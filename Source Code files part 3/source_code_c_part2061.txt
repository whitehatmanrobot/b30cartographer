se = testScenarios.AcceptFriend("", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return a 400 Bad Request when the gamertag is empty.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for empty gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is null the services returns a Bad Request")]
        public void AcceptFriend_NullGamertag()
        {
            string query = Constants.AcceptFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("Acceptfriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return Bad Request when the gamertag is null.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for null gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the account's privacy setting disallows accepting of friend requests returns a 401")]
        public void AcceptFriend_ChildAccountNotAllowed()
        {
            Account acct = AccountTransport.CreateAccount(ParentalControl.Strict);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);

            Response response = testScenarios.AddFriend(acct.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            Response acceptResponse = rt.AcceptFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.Unauthorized, acceptResponse.StatusCode, "Calling AcceptFriend didn't return a 401 when a user is not allowed to accept requests.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag parameter is not sent the service returrns a Bad Request")]
        public void AcceptFriend_NoGamertagParameters()
        {
            string query = Constants.AcceptFriend_RelativePathAndQuery;
            query = query.Replace("gamertag={gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("Acceptfriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return Bad Request when the gamertag param not present.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void AcceptFriend_Locale_Unsupported()
        {
            Response response = testScenarios.AcceptFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void AcceptFriend_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.AcceptFriend("gamertag", LiveApp.GameId, emptyLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PlatformType header is sent")]
        public void AcceptFriend_XPlatformType_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AcceptFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, "", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return Bad Request when no XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no XPlatformType header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PlatformType header is empty")]
        public void AcceptFriend_XPlatformType_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AcceptFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, " ", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return Bad Request when empty XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for empty XPlatformType header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PartnerAuthentication header is sent")]
        public void AcceptFriend_XPartnerAuthentication_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AcceptFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, "");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling AcceptFriend didn't return Unauthorized when no XPlatformType header was sent.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PartnerAuthentication header is empty")]
        public void AcceptFriend_XPartnerAuthentication_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AcceptFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, " ");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling AcceptFriend didn't return Unauthorized when empty XPlatformType header was sent.");
        }

        #endregion Accept Friend Tests

        #region Decline Friend Tests


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify DeclineFriend returns 200 when the gamertag is already friends with the user and the user's are still friends")]
        public void DeclineFriend_AlreadyFriends()
        {
            string friendsGamertag = AuthenticationTransport.PrimaryUser.Friends[0].Gamertag;
            Response declineResponse = testScenarios.DeclineFriend(friendsGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, declineResponse.StatusCode, "Calling DeclineFriend failed with a gamertag that is not a friend.");

            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            Assert.IsTrue(testScenarios.VerifyFriendState(profile, friendsGamertag, FriendState.Friend), "Declining a friends request from a friend deleted the friend.");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify DeclineFriend returns 200 when the gamertag is not friends with the user")]
        public void DeclineFriend_NotAFriend()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
            testScenarios.SetupUserForMessaging();

            Response declineResponse = newFriend.DeclineFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, declineResponse.StatusCode, "Calling DeclineFriend failed with a gamertag that is not a friend.");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does not exist we return a 400")]
        public void DeclineFriend_NonExistantGamertag()
        {
            Response response = testScenarios.DeclineFriend("g" + TestHelper.GetRandomString(14), LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return a 400 Bad Request when the gamertag does not exist.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagDoesNotExist, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does has invalid characters return a 400")]
        public void DeclineFriend_InvalidGamertag_InvalidCharacters()
        {
            Response response = testScenarios.DeclineFriend("Inval!dCh@rs", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return a 400 Bad Request when the gamertag contains invalid characters.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for invalid chars in gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is too long return a 400")]
        public void DeclineFriend_InvalidGamertag_TooLong()
        {
            Response response = testScenarios.DeclineFriend("ReallyReallyLongGamertagThatShouldFail", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return a 400 Bad Request when the gamertag is too long.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for too long gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does has invalid format return a 400")]
        public void DeclineFriend_InvalidGamertag_InvalidFormat()
        {
            Response response = testScenarios.DeclineFriend("4wesome", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return a 400 Bad Request when the gamertag starts with a number.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for invalid gamertag  format parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is empty we return a 400")]
        public void DeclineFriend_EmptyGamertag()
        {
            Response response = testScenarios.DeclineFriend("", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return a 400 Bad Request when the gamertag is empty.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for empty gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is null the services returns a Bad Request")]
        public void DeclineFriend_NullGamertag()
        {
            string query = Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("Declinefriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return Bad Request when the gamertag is null.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for null gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag parameter is not sent the service returrns a Bad Request")]
        public void DeclineFriend_NoGamertagParameters()
        {
            string query = Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("gamertag={gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("Declinefriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return Bad Request when the gamertag param not present.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void DeclineFriend_Locale_Unsupported()
        {
            Response response = testScenarios.DeclineFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void DeclineFriend_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.DeclineFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, emptyLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PlatformType header is sent")]
        public void DeclineFriend_XPlatformType_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, "", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return Bad Request when no XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no XPlatformType header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PlatformType header is empty")]
        public void DeclineFriend_XPlatformType_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, " ", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling DeclineFriend didn't return Bad Request when empty XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for empty XPlatformType header.");
        }
        
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PartnerAuthentication header is sent")]
        public void DeclineFriend_XPartnerAuthentication_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, "");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling DeclineFriend didn't return Unauthorized when no XPlatformType header was sent.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PartnerAuthentication header is empty")]
        public void DeclineFriend_XPartnerAuthentication_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, " ");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling DeclineFriend didn't return Unauthorized when empty XPlatformType header was sent.");
        }

        #endregion Decline Friend Tests

        #region Remove Friend Tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify RemoveFriend will remove a received friend request")]
        public void RemoveFriend_CancelRequest_Requesting()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);

            Account newFriendAccount2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend2 = new RewardsTestScenarioLibrary(newFriendAccount2);

            Response response = newFriend.AddFriend(newFriendAccount2.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            ProfileEx profile = newFriend2.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
            Assert.IsTrue(newFriend2.VerifyFriendState(profile, newFriendAccount.XblUser.Gamertag, FriendState.Requesting));

            Response acceptResponse = newFriend2.RemoveFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling RemoveFriend failed.");

            int count = 20;
            bool done = false;

            //poll to check if friend request is gone
            while (done == false && count > 0)
            {
                done = true;
                ProfileEx profile2 = newFriend2.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

                //loop through all friends and verify the newFriendAccount is NOT present as a Friend 
                foreach (Friend friend in profile2.FriendList)
                {
                    if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(newFriendAccount.XblUser.Gamertag))
                    {
                        //Assert.Fail("User was found in friends list after removing a friend request");
                        done = false;
                        break;
                    }
                }
                Thread.Sleep(5000);
                count--;
            }
            Assert.IsTrue(done, "Canceling a Requesting friend request did not remove the user from the friends list.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify RemoveFriend will cancel a sent friend request")]
        public void RemoveFriend_CancelRequest_Pending()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);

            Account newFriendAccount2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend2 = new RewardsTestScenarioLibrary(newFriendAccount2);

            Response response = newFriend2.AddFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            ProfileEx profile = newFriend2.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
            Assert.IsTrue(newFriend2.VerifyFriendState(profile, newFriendAccount.XblUser.Gamertag, FriendState.Pending));

            Response acceptResponse = newFriend2.RemoveFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling RemoveFriend failed.");

            int count = 20;
            bool done = false;

            //poll to check if friend request is gone
            while (done==false && count > 0)
            {
                done = true;
                ProfileEx profile2 = newFriend2.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

                //loop through all friends and verify the newFriendAccount is NOT present as a Friend 
                foreach (Friend friend in profile2.FriendList)
                {
                    if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(newFriendAccount.XblUser.Gamertag))
                    {
                        //Assert.Fail("User was found in friends list after removing a friend request");
                        done = false;
                        break;
                    }
                }
                Thread.Sleep(5000);
                count--;
            }
            Assert.IsTrue(done);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify RemoveFriend returns 200 when the gamertag is not friends with the user")]
        public void RemoveFriend_NotAFriend()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
            testScenarios.SetupUserForMessaging();

            Response removeResponse = newFriend.RemoveFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, removeResponse.StatusCode, "Calling RemoveFriend failed with a gamertag that is not a friend.");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does not exist we return a 400")]
        public void RemoveFriend_NonExistantGamertag()
        {
            Response response = testScenarios.RemoveFriend("g" + TestHelper.GetRandomString(14), LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return a 400 Bad Request when the gamertag does not exist.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagDoesNotExist, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does has invalid characters return a 400")]
        public void RemoveFriend_InvalidGamertag_InvalidCharacters()
        {
            Response response = testScenarios.RemoveFriend("Inval!dCh@rs", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return a 400 Bad Request when the gamertag contains invalid characters.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for invalid chars in gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is too long return a 400")]
        public void RemoveFriend_InvalidGamertag_TooLong()
        {
            Response response = testScenarios.RemoveFriend("ReallyReallyLongGamertagThatShouldFail", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return a 400 Bad Request when the gamertag is too long.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for too long gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does has invalid format return a 400")]
        public void RemoveFriend_InvalidGamertag_InvalidFormat()
        {
            Response response = testScenarios.RemoveFriend("4wesome", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return a 400 Bad Request when the gamertag starts with a number.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for invalid gamertag  format parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is empty we return a 400")]
        public void RemoveFriend_EmptyGamertag()
        {
            Response response = testScenarios.RemoveFriend("", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return a 400 Bad Request when the gamertag is empty.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for empty gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is null the services returns a Bad Request")]
        public void RemoveFriend_NullGamertag()
        {
            string query = Constants.RemoveFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("removefriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return Bad Request when the gamertag is null.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for null gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag parameter is not sent the service returrns a Bad Request")]
        public void RemoveFriend_NoGamertagParameters()
        {
            string query = Constants.RemoveFriend_RelativePathAndQuery;
            query = query.Replace("gamertag={gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("removefriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return Bad Request when the gamertag param not present.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void RemoveFriend_Locale_Unsupported()
        {
            Response response = testScenarios.RemoveFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void RemoveFriend_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.RemoveFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, emptyLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PlatformType header is sent")]
        public void RemoveFriend_XPlatformType_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.RemoveFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, "", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return Bad Request when no XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no XPlatformType header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PlatformType header is empty")]
        public void RemoveFriend_XPlatformType_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.RemoveFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, " ", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling RemoveFriend didn't return Bad Request when empty XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for empty XPlatformType header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PartnerAuthentication header is sent")]
        public void RemoveFriend_XPartnerAuthentication_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.RemoveFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, "");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling RemoveFriend didn't return Unauthorized when no XPlatformType header was sent.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PartnerAuthentication header is empty")]
        public void RemoveFriend_XPartnerAuthentication_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.RemoveFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, " ");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling RemoveFriend didn't return Unauthorized when empty XPlatformType header was sent.");
        }
        #endregion Remove Friend Tests
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GrantAvatarAsset.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Xml;
using System.Xml.Linq;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    /// <summary>
    /// Summary description for GrantAvatarAward
    /// </summary>
    [TestClass]
    public class GrantAvatarAsset
    {
        private static RewardsTransport rewardsTransport;
        private static RewardsTestScenarioLibrary testScenarios;
        private static TestGame achievementGame = TestGameUtility.GetFirstGameWithAchievements();
        private static TestGame avatarAwardAssetGame = TestGameUtility.GetFirstGameWithAvatarAwardables();

        private uint PlatformId = achievementGame.PlatformId;
        private string AppID = Guid.NewGuid().ToString();
        private string us_locale = "en-US";

        #region 

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Grant an avatarasset with a valid GameId")]
        public void GrantAvatarAsset_ValidGameID()
        {
            
            GuaranteeAvatarAssetsAvailable(1);

            //Create an achievement list
            GrantAvatarAssets grantAvatarAssets = testScenarios.CreateAvatarAssets_SingleUnearned(avatarAwardAssetGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAvatarAssets, "No avatar award assets found that we can grant");
            string avatarassetID = grantAvatarAssets.AvatarAssets[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAvatarAssets(grantAvatarAssets, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAvatarAssets failed");

            //Verify the achievement was granted
            bool avatarAssetGranted = testScenarios.CheckAvatarAssetForGame(avatarassetID, avatarAwardAssetGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(avatarAssetGranted, "AvatarAsset [{0}] was not granted", avatarassetID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Try not sending in GameId returns 400 for Granting Avatar Award Asset")]
        public void GrantAvatarAsset_Required_GameId()
        {
            GuaranteeAvatarAssetsAvailable(1);

            //Create an achievement list
            GrantAvatarAssets grantAvatarAssets = testScenarios.CreateAvatarAssets_SingleUnearned(avatarAwardAssetGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAvatarAssets, "No avatar award assets found that we can grant");
            string avatarassetID = grantAvatarAssets.AvatarAssets[0].Key;

            //Remove GameId from request body
            string grantAchString = RewardsTestUtil.GetGrantAvatarAwardsString(grantAvatarAssets);
            grantAchString = grantAchString.Replace(avatarAwardAssetGame.GameId.ToString(), "");
            
            //Grant the achievement
            Response ret = testScenarios.GrantAvatarAssets(grantAchString, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.InternalServerError, ret.StatusCode, "GrantAvatarAssets should have returned 500");

            //Verify the achievement was NOT granted
            bool avatarAssetGranted = testScenarios.CheckAvatarAssetForGame(avatarassetID, avatarAwardAssetGame.GameId, us_locale, PlatformId);
            Assert.IsFalse(avatarAssetGranted, "AvatarAsset [{0}] was granted", avatarassetID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Try not sending in AppId returns 400 for Granting Avatar Award Asset")]
        public void GrantAvatarAsset_Required_AppId()
        {
            GuaranteeAvatarAssetsAvailable(1);

            //Create an achievement list
            GrantAvatarAssets grantAvatarAssets = testScenarios.CreateAvatarAssets_SingleUnearned(avatarAwardAssetGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAvatarAssets, "No avatar award assets found that we can grant");
            string avatarassetID = grantAvatarAssets.AvatarAssets[0].Key;

            //Remove AppId from request body
            string grantAchString = RewardsTestUtil.GetGrantAvatarAwardsString(grantAvatarAssets);
            grantAchString = grantAchString.Replace(AppID, "");

            //Grant the achievement
            Response ret = testScenarios.GrantAvatarAssets(grantAchString, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAvatarAssets should have returned 400 Bad Request");

            //Verify the achievement was NOT granted
            bool avatarAssetGranted = testScenarios.CheckAvatarAssetForGame(avatarassetID, avatarAwardAssetGame.GameId, us_locale, PlatformId);
            Assert.IsFalse(avatarAssetGranted, "AvatarAsset [{0}] was granted", avatarassetID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Try not sending in Key returns 400 for Granting Avatar Award Asset")]
        public void GrantAvatarAsset_Required_Key()
        {
            GuaranteeAvatarAssetsAvailable(1);

            //Create an achievement list
            GrantAvatarAssets grantAvatarAssets = testScenarios.CreateAvatarAssets_SingleUnearned(avatarAwardAssetGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAvatarAssets, "No avatar award assets found that we can grant");
            string avatarassetID = grantAvatarAssets.AvatarAssets[0].Key;

            //Remove Key from request body
            string grantAchString = RewardsTestUtil.GetGrantAvatarAwardsString(grantAvatarAssets);
            grantAchString = grantAchString.Replace(avatarassetID, "");

            //Grant the achievement
            Response ret = testScenarios.GrantAvatarAssets(grantAchString, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAvatarAssets should have returned 400 Bad Request");

            //Verify the achievement was NOT granted
            bool avatarAssetGranted = testScenarios.CheckAvatarAssetForGame(avatarassetID, avatarAwardAssetGame.GameId, us_locale, PlatformId);
            Assert.IsFalse(avatarAssetGranted, "AvatarAsset [{0}] was granted", avatarassetID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Try not sending in EarnedOnline returns 500 for Granting Avatar Award Asset")]
        public void GrantAvatarAsset_Required_EarnedOnline()
        {
            GuaranteeAvatarAssetsAvailable(1);

            //Create an achievement list
            GrantAvatarAssets grantAvatarAssets = testScenarios.CreateAvatarAssets_SingleUnearned(avatarAwardAssetGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAvatarAssets, "No avatar award assets found that we can grant");
            string avatarassetID = grantAvatarAssets.AvatarAssets[0].Key;

            //Remove Earned Online from request body
            string grantAchString = RewardsTestUtil.GetGrantAvatarAwardsString(grantAvatarAssets);
            grantAchString = grantAchString.Replace("<EarnedOnline>true</EarnedOnline>", "<EarnedOnline></EarnedOnline>");

            //Grant the achievement
            Response ret = testScenarios.GrantAvatarAssets(grantAchString, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.InternalServerError, ret.StatusCode, "GrantAvatarAssets should have returned 500");

            //Verify the achievement was NOT granted
            bool avatarAssetGranted = testScenarios.CheckAvatarAssetForGame(avatarassetID, avatarAwardAssetGame.GameId, us_locale, PlatformId);
            Assert.IsFalse(avatarAssetGranted, "AvatarAsset [{0}] was granted", avatarassetID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Try sending in an invalid Key returns 200 for Granting Avatar Award Asset and hasnt awarded any new assets")]
        public void GrantAvatarAsset_Invalid_Key()
        {
            GuaranteeAvatarAssetsAvailable(1);

            AvatarAwardsAssetResult assetsBefore = testScenarios.GetAvatarAwardsAssetsXml(avatarAwardAssetGame.GameId, us_locale, PlatformId);

            //Create an achievement list
            GrantAvatarAssets grantAvatarAssets = testScenarios.CreateAvatarAssets_SingleUnearned(avatarAwardAssetGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAvatarAssets, "No avatar award assets found that we can grant");
            string avatarassetID = grantAvatarAssets.AvatarAssets[0].Key;
            grantAvatarAssets.AvatarAssets[0].Key = "1000";

            //Grant the achievement
            Response ret = testScenarios.GrantAvatarAssets(grantAvatarAssets, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAvatarAssets failed");

            //Verify the achievement was NOT granted
            AvatarAwardsAssetResult assetsAfter = testScenarios.GetAvatarAwardsAssetsXml(avatarAwardAssetGame.GameId, us_locale, PlatformId);

            for (int i = 0; i < assetsBefore.AvatarAwardsAssets.Count; i++)
            {
                if (assetsBefore.AvatarAwardsAssets[i].IsEarned != assetsAfter.AvatarAwardsAssets[i].IsEarned)
                {
                    Assert.Fail(string.Format("Asset [{0}] was awarded when it shouldn't have been.", assetsAfter.AvatarAwardsAssets[i].Key));
                }
            }
            
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Grant an already awarded avatarasset ")]
        public void GrantAvatarAsset_AlreadyAwarded()
        {
            GuaranteeAvatarAssetsAvailable(1);

            //Create an achievement list
            GrantAvatarAssets grantAvatarAssets = testScenarios.CreateAvatarAssets_SingleUnearned(avatarAwardAssetGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAvatarAssets, "No avatar award assets found that we can grant");
            string avatarassetID = grantAvatarAssets.AvatarAssets[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAvatarAssets(grantAvatarAssets, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAvatarAssets failed");

            //Verify the achievement was granted
            bool avatarAssetGranted = testScenarios.CheckAvatarAssetForGame(avatarassetID, avatarAwardAssetGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(avatarAssetGranted, "AvatarAsset [{0}] was not granted", avatarassetID);

            //Grant the achievement
            Response ret2 = testScenarios.GrantAvatarAssets(grantAvatarAssets, us_locale, PlatformId, avatarAwardAssetGame.GameId);
            Assert.AreEqual(HttpStatusCode.OK, ret2.StatusCode, "GrantAvatarAssets failed");

            //Verify the achievement was granted
            bool avatarAssetGranted2 = testScenarios.CheckAvatarAssetForGame(avatarassetID, avatarAwardAssetGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(avatarAssetGranted2, "AvatarAsset [{0}] was not granted", avatarassetID);
        }

        #endregion




        #region Support functions

        /// <summary>
        /// Ensures the current user has a given number of unearned achievements and if not, creates and loads a new user
        /// </summary>
        /// <param name="achievementNeededCount">How many unearned achievements are needed</param>
        private void GuaranteeAvatarAssetsAvailable(int avatarAssetsNeededCount)
        {
            if (testScenarios == null)
            {
                rewardsTransport = new RewardsTransport();
                testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
            }
            AvatarAwardsAssetResult results = testScenarios.GetAvatarAwardsAssetsXml(avatarAwardAssetGame.GameId, us_locale, PlatformId);
            int avatarAssetsAvailable = (from a in results.AvatarAwardsAssets
                                         where a.IsEarned == false
                                         select a).Count();

            if (avatarAssetsAvailable < avatarAssetsNeededCount)
            {
                testScenarios = new RewardsTestScenarioLibrary(true);
            }
        }
        #endregion Support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GetPostProfilePartner.cs ===
﻿using Gds.Contracts;
using System;
using System.Collections.Generic;
using System.Net;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using live.common;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;
using Microsoft.TestTools;
using System.Text;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class GetPostProfileEx
    {
        private static TestGame allStatsGame = TestGameUtility.GetFirstGameWithAllStats();
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();

        private static RewardsTestScenarioLibrary testGetProfileExScenarios;
        private static Account testGetProfileExAccount;
        private static Account testGetProfileExFriend1Account;

        private static RewardsTestScenarioLibrary testPostProfileExScenarios;
        private static Account testPostProfileExAccount;

        private static TestUser testUser = AuthenticationTransport.PrimaryUser;
        private static readonly string us_locale = "en-US";
        private static string AppID = Guid.Empty.ToString();
        private static string OffensiveString = "Holy shit!";

        private TestGame LiveApp = TestGameUtility.LiveAppTitle;

        private static XmlHelper xhelp = new XmlHelper();

        // NOTE ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //                                                                                                                //
        // This will run before any tests are run. It will create the following new accounts and populate the profiles:   //
        //    testPostProfileExAccount (use with testPostProfileExScenarios)                                              //
        //    testGetProfileExAccount (use with testGetProfileExScenarios)                                                //
        //    testGetProfileExFriend1Account                                                                              //
        //                                                                                                                //
        // It will also make testGetProfileExAccount and  testGetProfileExFriend1Account friends.                         //
        //                                                                                                                //
        // It will also add two recently played games and grant one achievement to testGetProfileExAccount.               //
        //                                                                                                                //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        [ClassInitialize()]
        public static void Initialize(TestContext testContext)
        {
            if (testGetProfileExScenarios == null || testPostProfileExScenarios == null)
            {
                testPostProfileExAccount = AccountTransport.CreateAccount();
                testPostProfileExAccount.GamerProfile.WriteProfileSettings("PostProfileExAcctMott", "PostProfileExAcctName", "PostProfileExAcctLocation", "PostProfileExAcctBio", null, null, testPostProfileExAccount.GamerProfile.MaleAvatar, null, null);

                testGetProfileExAccount = AccountTransport.CreateAccount();
                testGetProfileExAccount.GamerProfile.WriteProfileSettings("GetProfileExAcctMotto", "GetProfileExAcctName", "GetProfileExAcctLocation", "GetProfileExAcctBio", null, null, testGetProfileExAccount.GamerProfile.MaleAvatar, null, null);

                testGetProfileExFriend1Account = AccountTransport.CreateAccount();
                testGetProfileExFriend1Account.GamerProfile.WriteProfileSettings("GetProfileExFrd1Motto", "GetProfileExFrd1Name", "GetProfileExFrd1Location", "GetProfileExFrd1Bio", null, null, testGetProfileExFriend1Account.GamerProfile.MaleAvatar, null, null);

                //Wait for LiveCache to expire so that results from Profile service call will match.
                RewardsTestUtil.Wait(30);

                AccountTransport.MakeFriends(testGetProfileExAccount, testGetProfileExFriend1Account);

                testGetProfileExScenarios = new RewardsTestScenarioLibrary(testGetProfileExAccount);
                testPostProfileExScenarios = new RewardsTestScenarioLibrary(testPostProfileExAccount);

                Profile expectedProfile = new Profile();

                List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

                TestGame tg = testGames[0];
                testGetProfileExScenarios.AddGameOnly(expectedProfile, tg, testGetProfileExAccount, us_locale);

                tg = testGames[1];
                testGetProfileExScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);
            }
        }

        #region P1 Tests for Get and Post ProfileEx

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify basic functionality for the PostProfilePartner API properties")]
        public void PostProfilePartner_PropertiesP1()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithDefaultProperties();
            expectedProfile.SectionFlags = (long)SectionFlags.XboxLiveProperties;

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            SectionFlags sectionsToTest = SectionFlags.XboxLiveProperties;
            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, sectionsToTest);

            Assert.AreEqual(expectedProfile.ProfileProperties[ProfileProperty.Name], actualProfile.ProfileProperties[ProfileProperty.Name], "POST Profile Partner did not change ProfileProperty.Name");
            Assert.AreEqual(expectedProfile.ProfileProperties[ProfileProperty.Bio], actualProfile.ProfileProperties[ProfileProperty.Bio], "POST Profile Partner did not change ProfileProperty.Bio");
            Assert.AreEqual(expectedProfile.ProfileProperties[ProfileProperty.GamerZone], actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner did not change ProfileProperty.GamerZone");
            Assert.AreEqual(expectedProfile.ProfileProperties[ProfileProperty.Location], actualProfile.ProfileProperties[ProfileProperty.Location], "POST Profile Partner did not change ProfileProperty.Location");
            Assert.AreEqual(expectedProfile.ProfileProperties[ProfileProperty.Motto], actualProfile.ProfileProperties[ProfileProperty.Motto], "POST Profile Partner did not change ProfileProperty.Motto");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify basic functionality for GetProfilePartner for RecentGames")]
        public void GetProfilePartner_RecentGamesP1()
        {
            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.RecentGames);
            Assert.IsNotNull(profile.RecentGames, "No RecentGames.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify basic functionality for GetProfilePartner for RecentAchievements")]
        public void GetProfilePartner_RecentAchievementsP1()
        {
            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.RecentAchievements);
            Assert.IsNotNull(profile.RecentAchievements, "No RecentAchievements.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify basic functionality for GetProfilePartner for Friends")]
        public void GetProfilePartner_FriendsP1()
        {
            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.Friends, SectionFlags.XboxLiveProperties);
            Assert.IsNotNull(profile.Friends, "No Friends.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify basic functionality for GetProfilePartner")]
        public void GetProfilePartner_LiveProperties_P1()
        {
            string expectedName = testGetProfileExAccount.GamerProfile.Name.Replace("\0", "");
            ProfileEx actualProfile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);

            Assert.AreEqual(expectedName, actualProfile.ProfileProperties[ProfileProperty.Name], "Get Profile Partner is not correct for ProfileProperty.Name");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify basic functionality for GetProfilePartner for Gamertag param")]
        public void GetProfilePartner_Use_Gamertag_P1()
        {
            SectionFlags sectionsToTest = SectionFlags.XboxLiveProperties;

            string gamertag = testGetProfileExFriend1Account.XblUser.Gamertag;
            string expectedName = testGetProfileExFriend1Account.GamerProfile.Name.Replace("\0", "");

            ProfileEx actualProfile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, sectionsToTest, gamertag);

            Assert.AreEqual(expectedName, actualProfile.ProfileProperties[ProfileProperty.Name], "Get Profile Partner is not correct for ProfileProperty.Name");
        }

        #endregion P1 Tests for Get and Post ProfileEx

        #region PostProfilePartner Core properties field tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful update of Name field only")]
        public void PostProfilePartner_Field_Name()
        {
            string name = "UpdateName";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(name, null, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(name, actualProfile.ProfileProperties[ProfileProperty.Name], "POST Profile Partner did not change ProfileProperty.Name");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful update of Bio field only")]
        public void PostProfilePartner_Field_Bio()
        {
            string bio = "UpdateBio";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, bio, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(bio, actualProfile.ProfileProperties[ProfileProperty.Bio], "POST Profile Partner did not change ProfileProperty.Bio");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful update of Location field only")]
        public void PostProfilePartner_Field_Location()
        {
            string location = "UpdateLocation";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, location, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(location, actualProfile.ProfileProperties[ProfileProperty.Location], "POST Profile Partner did not change ProfileProperty.Location");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful update of Motto field only")]
        public void PostProfilePartner_Field_Motto()
        {
            string motto = "UpdateMotto";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, null, motto);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(motto, actualProfile.ProfileProperties[ProfileProperty.Motto], "POST Profile Partner did not change ProfileProperty.Motto");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of empty field for Name results in a blank Name")]
        public void PostProfilePartner_Field_Empty_Name()
        {
            string name = "";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(name, null, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(name, actualProfile.ProfileProperties[ProfileProperty.Name], "POST Profile Partner did not change ProfileProperty.Name");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of empty field for Bio results in a blank Bio")]
        public void PostProfilePartner_Field_Empty_Bio()
        {
            string bio = "";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, bio, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(bio, actualProfile.ProfileProperties[ProfileProperty.Bio], "POST Profile Partner did not change ProfileProperty.Bio");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of empty field for Location results in a blank Location")]
        public void PostProfilePartner_Field_Empty_Location()
        {
            string location = "";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, location, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(location, actualProfile.ProfileProperties[ProfileProperty.Location], "POST Profile Partner did not change ProfileProperty.Location");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of empty field for Motto results in a blank Motto")]
        public void PostProfilePartner_Field_Empty_Motto()
        {
            string motto = "";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, null, motto);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(motto, actualProfile.ProfileProperties[ProfileProperty.Motto], "POST Profile Partner did not change ProfileProperty.Motto");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of field length for Name - within boundary")]
        public void PostProfilePartner_FieldLength_Name()
        {
            int validLength = 129;
            string name = new string('a', validLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(name, null, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(name, actualProfile.ProfileProperties[ProfileProperty.Name], "POST Profile Partner did not change ProfileProperty.Name");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of field length for Bio - within boundary")]
        public void PostProfilePartner_FieldLength_Bio()
        {
            int validLength = 499;
            string bio = new string('a', validLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, bio, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(bio, actualProfile.ProfileProperties[ProfileProperty.Bio], "POST Profile Partner did not change ProfileProperty.Bio");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of field length for Location - within boundary")]
        public void PostProfilePartner_FieldLength_Location()
        {
            int validLength = 40;
            string location = new string('a', validLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, location, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(location, actualProfile.ProfileProperties[ProfileProperty.Location], "POST Profile Partner did not change ProfileProperty.Location");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify successful post of field length for Motto - within boundary")]
        public void PostProfilePartner_FieldLength_Motto()
        {
            int validLength = 21;
            string motto = new string('a', validLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, null, motto);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(motto, actualProfile.ProfileProperties[ProfileProperty.Motto], "POST Profile Partner did not change ProfileProperty.Motto");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure of post of field length for Name - outside of boundary")]
        public void PostProfilePartner_FieldLength_Name_TooLong()
        {
            int invalidLength = 130;
            string name = new string('a', invalidLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(name, null, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure - bug #6747");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(name, actualProfile.ProfileProperties[ProfileProperty.Name], "POST Profile Partner changed ProfileProperty.Name");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure of post of field length for Bio - outside of boundary")]
        public void PostProfilePartner_FieldLength_Bio_TooLong()
        {
            int invalidLength = 500;
            string bio = new string('a', invalidLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, bio, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure - bug #6747");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(bio, actualProfile.ProfileProperties[ProfileProperty.Bio], "POST Profile Partner changed ProfileProperty.Bio");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure of post of field length for Location - outside of boundary")]
        public void PostProfilePartner_FieldLength_Location_TooLong()
        {
            int invalidLength = 41;
            string location = new string('a', invalidLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, location, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure - bug #6747");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(location, actualProfile.ProfileProperties[ProfileProperty.Location], "POST Profile Partner changed ProfileProperty.Location");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure of post of field length for Motto - outside of boundary")]
        public void PostProfilePartner_FieldLength_Motto_TooLong()
        {
            int invalidLength = 22;
            string motto = new string('a', invalidLength);

            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, null, motto);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure - bug #6747");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(motto, actualProfile.ProfileProperties[ProfileProperty.Motto], "POST Profile Partner changed ProfileProperty.Motto");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure of post of Gamertag change")]
        public void PostProfilePartner_Field_Gamertag()
        {
            string gamertag = "newgamertag";
            ProfileEx pro = new ProfileEx();
            pro.ProfileProperties = new XmlSerializableDictionary<ProfileProperty, object>();
            pro.ProfileProperties.Add(ProfileProperty.GamerTag, gamertag);
            pro.SectionFlags = (long)SectionFlags.XboxLiveProperties;

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(gamertag, actualProfile.ProfileProperties[ProfileProperty.GamerTag], "POST Profile Partner changed ProfileProperty.GamerTag");
        }

        #region PostProfilePartner Core properties field tests - GamerZone
        //Based on XBL ENUM definition: “Recreation”, “Pro”, “Family”, “Underground” - "Cheater"?

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success of post of GamerZone Recreation")]
        public void PostProfilePartner_Field_GamerZone_Recreation()
        {
            string gamerZone = "Recreation";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, gamerZone, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(gamerZone, actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner did not change ProfileProperty.GamerZone");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success of post of GamerZone Pro")]
        public void PostProfilePartner_Field_GamerZone_Pro()
        {
            string gamerZone = "Pro";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, gamerZone, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(gamerZone, actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner did not change ProfileProperty.GamerZone");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success of post of GamerZone Family")]
        public void PostProfilePartner_Field_GamerZone_Family()
        {
            string gamerZone = "Family";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, gamerZone, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(gamerZone, actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner did not change ProfileProperty.GamerZone");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success of post of GamerZone Underground")]
        public void PostProfilePartner_Field_GamerZone_Underground()
        {
            string gamerZone = "Underground";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, gamerZone, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(gamerZone, actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner did not change ProfileProperty.GamerZone");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify behavior of post of GamerZone Cheater")]
        public void PostProfilePartner_Field_GamerZone_Cheater()
        {
            string gamerZone = "Cheater"; // is a valid Zone, but is not settable thru LiveApp
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, gamerZone, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(gamerZone, actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner changed ProfileProperty.GamerZone");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure of post of unsupported GamerZone")]
        public void PostProfilePartner_Field_GamerZone_Unsupported()
        {
            string gamerZone = "unsupported";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, gamerZone, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(gamerZone, actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner changed ProfileProperty.GamerZone");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure of post of empty field for GamerZone")]
        public void PostProfilePartner_Field_Empty_GamerZone()
        {
            string gamerZone = "";
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, gamerZone, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(gamerZone, actualProfile.ProfileProperties[ProfileProperty.GamerZone], "POST Profile Partner changed ProfileProperty.GamerZone");
        }

        #endregion PostProfilePartner Core properties field tests - GamerZone
        #region PostProfilePartner Core properties - vetted strings

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify field Name is vetted")]
        public void PostProfilePartner_Field_Name_Vetted()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(OffensiveString, null, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(OffensiveString, actualProfile.ProfileProperties[ProfileProperty.Name], "POST Profile Partner changed ProfileProperty.Name");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify field Bio is vetted")]
        public void PostProfilePartner_Field_Bio_Vetted()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, OffensiveString, null, null, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(OffensiveString, actualProfile.ProfileProperties[ProfileProperty.Bio], "POST Profile Partner changed ProfileProperty.Bio");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify field Location is vetted")]
        public void PostProfilePartner_Field_Location_Vetted()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, OffensiveString, null);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(OffensiveString, actualProfile.ProfileProperties[ProfileProperty.Location], "POST Profile Partner changed ProfileProperty.Location");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify field Motto is vetted")]
        public void PostProfilePartner_Field_Motto_Vetted()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithProperties(null, null, null, null, OffensiveString);

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreNotEqual(OffensiveString, actualProfile.ProfileProperties[ProfileProperty.Motto], "POST Profile Partner changed ProfileProperty.Motto");
        }

        #endregion PostProfilePartner Core properties - vetted strings
        #endregion PostProfilePartner Core properties field tests
        #region PostProfilePartner other tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify updating core profile while using SectionFlags = 4 fails")]
        public void PostProfilePartner_SectionFlags_Mismatch()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);

            ProfileEx profile = testPostProfileExScenarios.CreateProfileWithProperties("newName", "newBio", "Pro", "newLocation", "newMotto");
            profile.SectionFlags = (long)SectionFlags.Friends;

            Response result = testPostProfileExScenarios.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(expectedProfile.ProfileProperties[ProfileProperty.Name], actualProfile.ProfileProperties[ProfileProperty.Name], "POST Profile Partner changed ProfileProperty.Name ");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify updating non-core or non-privacy setttings profile section fails")]
        public void PostProfilePartner_Update_RecentAchievements()
        {
            ProfileEx profile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, Constants.AllProfileSections);
            profile.SectionFlags = (long)SectionFlags.RecentAchievements;

            Achievement achievement = new Achievement();
            achievement.GameId = allStatsGame.GameId;
            achievement.Gamerscore = 5;
            achievement.EarnedDateTime = DateTime.Now;
            achievement.IsEarned = true;
            achievement.Key = "0";
            profile.RecentAchievements.Add(achievement);

            Response result = testPostProfileExScenarios.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = testPostProfileExScenarios.GetProfilePartnerXml(us_locale, Constants.AllProfileSections);
            Assert.AreEqual(0, actualProfile.RecentAchievements.Count, "POST Profile Partner updated RecentAchievements");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify using other values than Core or PrivacySettings for SectionFlags fails gracefully: Friends")]
        public void PostProfilePartner_SectionFlags_NonCore_Friends()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithDefaultProperties();
            expectedProfile.SectionFlags = (long)SectionFlags.Friends;

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "Should pass with a 200");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify using other values than Core or PrivacySettings for SectionFlags fails gracefully: PresenceInfo")]
        public void PostProfilePartner_SectionFlags_NonCore_PresenceInfo()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithDefaultProperties();
            expectedProfile.SectionFlags = (long)SectionFlags.PresenceInfo;

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "Should pass with a 200");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify using other values than Core or PrivacySettings for SectionFlags fails gracefully: RecentAchievements")]
        public void PostProfilePartner_SectionFlags_NonCore_RecentAchievements()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithDefaultProperties();
            expectedProfile.SectionFlags = (long)SectionFlags.RecentAchievements;

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "Should pass with a 200");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify using other values than Core or PrivacySettings for SectionFlags fails gracefully: RecentGames")]
        public void PostProfilePartner_SectionFlags_NonCore_RecentGames()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithDefaultProperties();
            expectedProfile.SectionFlags = (long)SectionFlags.RecentGames;

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "Should passs with a 200");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify using other values than Core or PrivacySettings for SectionFlags fails gracefully: WindowsLiveProperties")]
        public void PostProfilePartner_SectionFlags_NonCore_WindowsLiveProperties()
        {
            ProfileEx expectedProfile = testPostProfileExScenarios.CreateProfileWithDefaultProperties();
            expectedProfile.SectionFlags = (long)SectionFlags.WindowsLiveProperties;

            Response result = testPostProfileExScenarios.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "Should pass with a 200");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when it is an unsupported locale")]
        public void GetProfilePartner_Locale_Unsupported()
        {
            Response response = testScenarios.GetProfilePartner(Constants.UnsupportedLocale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetProfilePartner_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetProfilePartner(emptyLocale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when it is an unsupported locale")]
        public void PostProfilePartner_Locale_Unsupported()
        {
            ProfileEx profile = testScenarios.CreateProfileWithDefaultProperties();
            Response response = testScenarios.PostProfilePartner(profile, Constants.UnsupportedLocale);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void PostProfilePartner_Locale_None()
        {
            string emptyLocale = string.Empty;
            ProfileEx profile = testScenarios.CreateProfileWithDefaultProperties();
            Response response = testScenarios.PostProfilePartner(profile, emptyLocale);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        #endregion PostProfilePartner other tests
        #region GetProfilePartner SectionFlags tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success for GetProfilePartner for sectionFlags = 0")]
        public void GetProfilePartner_SectionFlags_Zero()
        {
            SectionFlags sectionsToTest = (SectionFlags)0;
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, sectionsToTest);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure for GetProfilePartner for no params")]
        public void GetProfilePartner_SectionFlags_None()
        {
            string query = "/profile";

            Response response = testGetProfileExScenarios.ExecuteCustomQuery("GetProfilePartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure for GetProfilePartner for sectionFlags = WindowsLiveProperties")]
        public void GetProfilePartner_SectionFlags_Invalid_WinLive()
        {
            SectionFlags sectionsToTest = SectionFlags.WindowsLiveProperties;
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, sectionsToTest);
            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure for GetProfilePartner for sectionFlags = foobar")]
        public void GetProfilePartner_SectionFlags_Invalid_NaN()
        {
            string query = Constants.GetProfilePartner_RelativePathAndQuery;
            query = query.Replace("{sectionFlags}", "foobar");
            query = query.Replace("&friendsSectionFlags={friendsSectionFlags}&gamertag={gamertag}", "");

            Response response = testScenarios.ExecuteCustomQuery("GetProfilePartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify returned sectionFlags value for friends")]
        public void GetProfilePartner_FriendsSectionFlags_SectionFlags()
        {
            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.Friends, SectionFlags.XboxLiveProperties);
            int i = GetFriendIndex(profile, testGetProfileExFriend1Account.XblUser.Gamertag);
            Assert.AreEqual(0, profile.Friends[i].SectionFlags, "Returned sectionFlags value Should always be Zero", i);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for friendsSectionFlags = RecentGames")]
        public void GetProfilePartner_FriendsSectionFlags_Invalid_RecentGames()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, SectionFlags.RecentGames);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for friendsSectionFlags = RecentAchievements")]
        public void GetProfilePartner_FriendsSectionFlags_Invalid_RecentAchievements()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, SectionFlags.RecentAchievements);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for friendsSectionFlags = Friends")]
        public void GetProfilePartner_FriendsSectionFlags_Invalid_Friends()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, SectionFlags.Friends);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for friendsSectionFlags = PrivacySettings")]
        public void GetProfilePartner_FriendsSectionFlags_Invalid_PrivacySettings()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, SectionFlags.PrivacySettings);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for friendsSectionFlags = XboxLiveProperties")]
        public void GetProfilePartner_FriendsSectionFlags_XboxLiveProperties()
        {
            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.Friends, SectionFlags.XboxLiveProperties);
            int i = GetFriendIndex(profile, testGetProfileExFriend1Account.XblUser.Gamertag);
            Assert.IsNotNull(profile.Friends[i].ProfileProperties, "No ProfileProperties for Friend[{0}]", i);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success for GetProfilePartner for friendsSectionFlags = 0")]
        public void GetProfilePartner_FriendsSectionFlags_Zero()
        {
            SectionFlags zeroSectionFlags = (SectionFlags)0;
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, zeroSectionFlags);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify BadRequest failure for GetProfilePartner for friendsSectionFlags = WindowsLiveProperties")]
        public void GetProfilePartner_FriendsSectionFlags_Invalid_WinLive()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, SectionFlags.WindowsLiveProperties);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify status code returned for all combinations for frendsSectionFlags")]
        public void GetProfilePartner_FriendsSectionFlags_Combinations()
        {
            Response response = null;

            for (int friendsSectionFlags = 1; friendsSectionFlags <= (int)Constants.AllProfileSections; friendsSectionFlags++)
            {
                response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, (SectionFlags)friendsSectionFlags);
                switch (friendsSectionFlags)
                {
                    case (int)SectionFlags.XboxLiveProperties:
                    case (int)SectionFlags.PresenceInfo:
                    case (int)(SectionFlags.XboxLiveProperties | SectionFlags.PresenceInfo):
                        Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch for friendsSectionFlags = {0}", friendsSectionFlags.ToString());
                        break;
                    default:
                        Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch for friendsSectionFlags = {0}", friendsSectionFlags.ToString());
                        break;
                }
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure for GetProfilePartner for friendsSectionFlags = foobar")]
        public void GetProfilePartner_FriendsSectionFlags_Invalid_NaN()
        {
            string query = Constants.GetProfilePartner_RelativePathAndQuery;
            query = query.Replace("{friendsSectionFlags}", "foobar");
            query = query.Replace("{sectionFlags}", "4");
            query = query.Replace("&gamertag={gamertag}", "");

            Response response = testGetProfileExScenarios.ExecuteCustomQuery("GetProfilePartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        #endregion GetProfilePartner SectionFlags tests
        #region GetProfilePartner Gamertag tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success for GetProfilePartner for gamertag")]
        public void GetProfilePartner_Gamertag_Valid()
        {
            string gamertag = testGetProfileExFriend1Account.XblUser.Gamertag;
            string expectedName = testGetProfileExFriend1Account.GamerProfile.Name.Replace("\0", "");

            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.XboxLiveProperties, gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");

            ProfileEx actualProfile = Deserialize(response.Body);
            Assert.AreEqual(expectedName, actualProfile.ProfileProperties[ProfileProperty.Name], "Get Profile Partner is not correct for ProfileProperty.Name");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 404 for GetProfilePartner for a fake gamertag")]
        public void GetProfilePartner_Gamertag_Invalid()
        {
            string gamertag = "fakename8314579";

            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, gamertag);
            Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 404 returned for GetProfilePartner for a fake gamertag")]
        public void GetProfilePartner_FullFriendsList_Gamertag_Invalid()
        {
            string gamertag = "fakename8314579";

            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.FriendsList, gamertag);
            Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure for calling GetProfilePartner using both friendsSectionFlags and gamertag")]
        public void GetProfilePartner_Gamertag_FriendsSectionFlags()
        {
            TestGame LiveApp = TestGameUtility.LiveAppTitle;
            RewardsTransport rewardsTransport = new RewardsTransport(testUser.Username, testUser.Password);
            Response response = rewardsTransport.GetProfilePartner(us_locale, LiveApp.GameId, LiveApp.PlatformId.ToString(), ((long)Constants.AllProfileSections).ToString(), ((long)SectionFlags.XboxLiveProperties).ToString(), testUser.Gamertag);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling GetProfilePartner using both friendsSectionFlags and gamertag is not a valid scenario");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify returned sectionFlags value for friends")]
        public void GetProfilePartner_Gamertag_SectionFlagsReturned()
        {
            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, testUser.Gamertag);
            Assert.AreEqual((long)SectionFlags.XboxLiveProperties, profile.SectionFlags, "Returned sectionFlags value is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for RecentGames using Gamertag")]
        public void GetProfilePartner_Gamertag_RecentGames()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.RecentGames, testUser.Gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for RecentAchievements using gamertag")]
        public void GetProfilePartner_Gamertag_RecentAchievements()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.RecentAchievements, testUser.Gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for Friends using Gamertag")]
        public void GetProfilePartner_Gamertag_Friends()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.Friends, testUser.Gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify calling trying to get Friends of Friends with FullFriends returns empty friend list")]
        public void GetProfilePartner_Gamertag_FullFriendsList()
        {
            Response response = testScenarios.GetProfilePartner(us_locale, SectionFlags.FriendsList, AuthenticationTransport.PrimaryUser.Friends[0].Gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch bug# 10376");

            ProfileEx pro = xhelp.LoadXml<ProfileEx>(response.Body);

            Assert.IsNull(pro.FriendList, "FriendsList was not empty.");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify calling trying to get AccountInformation for another user returns a null AccountInformation section")]
        public void GetProfilePartner_Gamertag_AccountInformation()
        {
            Response response = testScenarios.GetProfilePartner(us_locale, SectionFlags.AccountInformation, AuthenticationTransport.PrimaryUser.Friends[0].Gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");

            ProfileEx pro = xhelp.LoadXml<ProfileEx>(response.Body);

            Assert.IsNull(pro.AccountInformation, "AccountInformation was not empty.");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for PrivacySettings using a gamertag")]
        public void GetProfilePartner_Gamertag_InvalidSection_PrivacySettings()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.PrivacySettings, testUser.Gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");

            ProfileEx profile = Deserialize(response.Body);
            Assert.IsNull(profile.PrivacySettings, "Some privacy settings were returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify basic functionality for GetProfilePartner for friendsSectionFlags = XboxLiveProperties")]
        public void GetProfilePartner_Gamertag_XboxLiveProperties()
        {
            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, testUser.Gamertag);
            Assert.IsNotNull(profile.ProfileProperties, "No ProfileProperties for Friend");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify success for GetProfilePartner for friendsSectionFlags = 0")]
        public void GetProfilePartner_Gamertag_ZeroSectionFlags()
        {
            SectionFlags zeroSectionFlags = (SectionFlags)0;
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, zeroSectionFlags, testUser.Gamertag);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify BadRequest failure for GetProfilePartner for friendsSectionFlags = WindowsLiveProperties")]
        public void GetProfilePartner_Gamertag_InvalidSection_WinLive()
        {
            Response response = testGetProfileExScenarios.GetProfilePartner(us_locale, SectionFlags.WindowsLiveProperties, testUser.Gamertag);
            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Http status mismatch");
            Assert.IsTrue(response.Body.Contains("System.NotSupportedException"));
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify graceful failure for GetProfilePartner for friendsSectionFlags = foobar")]
        public void GetProfilePartner_Gamertag_InvalidSectionFlags_NaN()
        {
            string query = Constants.GetProfilePartner_RelativePathAndQuery;
            query = query.Replace("&friendsSectionFlags={friendsSectionFlags}", "");
            query = query.Replace("{sectionFlags}", "foobar");
            query = query.Replace("{gamertag}", testUser.Gamertag);

            Response response = testGetProfileExScenarios.ExecuteCustomQuery("GetProfilePartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        #endregion GetProfilePartner Gamertag tests
        #region GetProfilePartner Recent Games and Recent Achievements tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify only 6 recent games show up when more than 6 have been played")]
        public void GetProfilePartner_RecentGames_Verify()
        {
            // Post results for 7 games
            List<TestGame> games = testGetProfileExScenarios.PostMultipleGameResults(7);

            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.RecentGames);
            Assert.AreEqual(6, profile.RecentGames.Count, "Incorrect number of recent games returned");
            Assert.AreEqual(games[6].GameId, (uint)profile.RecentGames[0].Id, "The gameId does not match - last game played should be at index 0");
            Assert.AreEqual(games[5].GameId, (uint)profile.RecentGames[1].Id, "The gameId does not match - game 5 should be at index 1");
            Assert.AreEqual(games[4].GameId, (uint)profile.RecentGames[2].Id, "The gameId does not match - game 4 should be at index 2");
            Assert.AreEqual(games[3].GameId, (uint)profile.RecentGames[3].Id, "The gameId does not match - game 3 should be at index 3");
            Assert.AreEqual(games[2].GameId, (uint)profile.RecentGames[4].Id, "The gameId does not match - game 2 should be at index 4");
            Assert.AreEqual(games[1].GameId, (uint)profile.RecentGames[5].Id, "The gameId does not match - game 1 should be at index 5");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify Type field in  recent games")]
        public void GetProfilePartner_RecentGames_VerifyType()
        {
            // Post results for 6 games with known types
            testGetProfileExScenarios.PostGameResultWithDefaultStats(TestGameUtility.GetTestGame("Backgammon"), us_locale);
            testGetProfileExScenarios.PostGameResultWithDefaultStats(TestGameUtility.GetTestGame("TicTacToe"), us_locale);
            testGetProfileExScenarios.PostGameResultWithDefaultStats(TestGameUtility.GetTestGame("Beehive"), us_locale);
            testGetProfileExScenarios.PostGameResultWithDefaultStats(TestGameUtility.GetTestGame("Reversi"), us_locale);
            testGetProfileExScenarios.PostGameResultWithDefaultStats(TestGameUtility.GetTestGame("HexicRush"), us_locale);
            testGetProfileExScenarios.PostGameResultWithDefaultStats(TestGameUtility.GetTestGame("Flowerz"), us_locale);

            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.RecentGames);
            Assert.AreEqual(TestGameUtility.GetTestGame((uint)profile.RecentGames[0].Id).Type, profile.RecentGames[0].Type, "Game type mismatch for {0}", profile.RecentGames[0].Name); // Flowerz
            Assert.AreEqual(TestGameUtility.GetTestGame((uint)profile.RecentGames[1].Id).Type, profile.RecentGames[1].Type, "Game type mismatch for {0}", profile.RecentGames[1].Name); // HexicRush
            Assert.AreEqual(TestGameUtility.GetTestGame((uint)profile.RecentGames[2].Id).Type, profile.RecentGames[2].Type, "Game type mismatch for {0}", profile.RecentGames[2].Name); // Reversi
            Assert.AreEqual(TestGameUtility.GetTestGame((uint)profile.RecentGames[3].Id).Type, profile.RecentGames[3].Type, "Game type mismatch for {0}", profile.RecentGames[3].Name); // Beehive
            Assert.AreEqual(TestGameUtility.GetTestGame((uint)profile.RecentGames[4].Id).Type, profile.RecentGames[4].Type, "Game type mismatch for {0}", profile.RecentGames[4].Name); // TicTacToe
            Assert.AreEqual(TestGameUtility.GetTestGame((uint)profile.RecentGames[5].Id).Type, profile.RecentGames[5].Type, "Game type mismatch for {0}", profile.RecentGames[5].Name); // Backgammon
            //test case fails on TestNet - bug #8435
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify the correct recent achievement shows up")]
        public void GetProfilePartner_RecentAchievements_Verify()
        {
            // grant an achievement
            GrantAchievements toGrant = testGetProfileExScenarios.CreateAchievements_SingleUnearned(allStatsGame, AppID, us_locale);
            Assert.IsNotNull(toGrant, "No achievements found that we can grant");
            Response response = testGetProfileExScenarios.GrantAchievements(toGrant, us_locale, allStatsGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "GrantAchievements failed");

            // grant a second achievement
            toGrant = testGetProfileExScenarios.CreateAchievements_SingleUnearned(allStatsGame, AppID, us_locale);
            Assert.IsNotNull(toGrant, "No achievements found that we can grant");
            string achievementID = toGrant.Achievements[0].Key;
            response = testGetProfileExScenarios.GrantAchievements(toGrant, us_locale, allStatsGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "GrantAchievements failed");

            ProfileEx profile = testGetProfileExScenarios.GetProfilePartnerXml(us_locale, SectionFlags.RecentAchievements);
            Assert.AreEqual(1, profile.RecentAchievements.Count, "Incorrect number of recent achievements returned");
            Assert.AreEqual(achievementID, profile.RecentAchievements[0].Key, "The achievementId (key) does not match");
        }

        #endregion GetProfilePartner Recent Games and Recent Achievements tests
        #region GetProfilePartner Full Friends List

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify real friend has a friend state of 0")]
        public void GetProfilePartner_FullFriendsList_FriendState_Friend()
        {
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
            Assert.IsTrue(testScenarios.VerifyFriendState(profile, AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, FriendState.Friend));
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify current user sends a friend request and the friend state of the user sent to is 1")]
        public void GetProfilePartner_FullFriendsList_FriendState_Pending()
        {
            Account newAcct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newLib = new RewardsTestScenarioLibrary(newAcct);

            Account newAcct2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newLib2 = new RewardsTestScenarioLibrary(newAcct2);

            Response addFriendResponse = newLib2.AddFriend(newAcct.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.IsTrue(addFriendResponse.StatusCode == HttpStatusCode.OK, "Call to add friend failed.");

            ProfileEx profile = newLib2.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
            Assert.IsTrue(testScenarios.VerifyFriendState(profile, newAcct.XblUser.Gamertag, FriendState.Pending), "Failure verifying friend state");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify current user receives a friend request and the friend state of the user sent from is 2")]
        public void GetProfilePartner_FullFriendsList_FriendState_Requesting()
        {
            Account newAcct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newLib = new RewardsTestScenarioLibrary(newAcct);

            Account newAcct2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newLib2 = new RewardsTestScenarioLibrary(newAcct2);

            Response addFriendResponse = newLib.AddFriend(newAcct2.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.IsTrue(addFriendResponse.StatusCode == HttpStatusCode.OK, "Call to add friend failed.");

            ProfileEx profile = newLib2.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
            Assert.IsTrue(testScenarios.VerifyFriendState(profile, newAcct.XblUser.Gamertag, FriendState.Requesting));
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify we return 400 bad request if a user asks for section flags 4 and 128 at the same time")]
        public void GetProfilePartner_FullFriendsList_BothFriendSectionFlagsBadRequest()
        {
            Response profileResponse = testScenarios.GetProfilePartner(us_locale, SectionFlags.Friends | SectionFlags.FriendsList);
            Assert.IsTrue(profileResponse.StatusCode == HttpStatusCode.BadRequest, "Sending Section Flags 4 and 128 did not return a 400 Bad Request.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(profileResponse), "LIVEn Error code is incorrect.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify we return each friends core profile, presence and friend state")]
        public void GetProfilePartner_FullFriendsList_ProperSectionsReturned()
        {
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            foreach (Friend friend in profile.FriendList)
            {
                Assert.IsNotNull(friend.ProfileEx.ProfileProperties, "ProfileProperties for a friend should not be null.");
                Assert.IsNotNull(friend.ProfileEx.PresenceInfo, "PresenceInfo for a friend should not be null.");
                Assert.IsNotNull(friend.FriendState, "FriendState for a friend should not be null.");

                //For completeness, make sure all other sections are null
                Assert.IsNull(friend.ProfileEx.RecentAchievements, "RecentAchievements for a friend should be null.");
                Assert.IsNull(friend.ProfileEx.RecentGames, "RecentGames for a friend should be null.");
                Assert.IsNull(friend.ProfileEx.PrivacySettings, "PrivacySettings for a friend should be null.");
                Assert.IsNull(friend.ProfileEx.Friends, "Friends for a friend should be null.");
                Assert.IsNull(friend.ProfileEx.FriendList, "FriendsEx for a friend should be null.");
            }


        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify friendsSectionFlag is ignored when sectionFlag 128 is sent in (checks valid and invalid values)")]
        public void GetProfilePartner_FullFriendsList_FriendsSectionFlagIgnored()
        {

            for (int friendsSectionFlags = 1; friendsSectionFlags <= (int)Constants.AllProfileSections; friendsSectionFlags++)
            {
                ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList, (SectionFlags)friendsSectionFlags);

                foreach (Friend friend in profile.FriendList)
                {
                    Assert.IsNotNull(friend.ProfileEx.ProfileProperties, "ProfileProperties for a friend should not be null.");
                    Assert.IsNotNull(friend.ProfileEx.PresenceInfo, "PresenceInfo for a friend should not be null.");
                    Assert.IsNotNull(friend.FriendState, "FriendState for a friend should not be null.");

                    //For completeness, make sure all other sections are null 
                    Assert.IsNull(friend.ProfileEx.RecentAchievements, "RecentAchievements for a friend should be null.");
                    Assert.IsNull(friend.ProfileEx.RecentGames, "RecentGames for a friend should be null.");
                    Assert.IsNull(friend.ProfileEx.PrivacySettings, "PrivacySettings for a friend should be null.");
                    Assert.IsNull(friend.ProfileEx.Friends, "Friends for a friend should be null.");
                    Assert.IsNull(friend.ProfileEx.FriendList, "FriendsEx for a friend should be null.");
                }
            }

        }
        #endregion

        #region GetProfilePartner Account Information


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify AccountInformation Section is returned when sending section flags = 256")]
        public void GetProfilePartner_AccountInformation_NotNull()
        {
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.AccountInformation);
            Assert.IsNotNull(profile.AccountInformation, "AccountInformation section should not be null.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify Porper Points balance is returned when it is greater than zero")]
        public void GetProfilePartner_AccountInformation_Gold_PointsBalanceNotZero()
        {
            Account acct = AccountTransport.CreateAccount();
            AccountTransport.AddMSPoints(acct, Offers.PointsOffers.CC5000US);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.AccountInformation);
            Assert.IsTrue(profile.AccountInformation.MsftPointsBalance == 5000, "Points balance is not correct.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify Porper Points balance is returned (0) for a brand new account that has never bought points")]
        public void GetProfilePartner_AccountInformation_Gold_NewAccountZeroPoints()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.AccountInformation);
            Assert.IsTrue(profile.AccountInformation.MsftPointsBalance == 0, "Points balance is not correct.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify Porper Points balance is returned when it is greater than zero")]
        public void GetProfilePartner_AccountInformation_Silver_PointsBalanceNotZero()
        {
            Account acct = AccountTransport.CreateAccount(AccountTier.Silver, CountryId.US, ParentalControl.None);
            AccountTransport.AddMSPoints(acct, Offers.PointsOffers.CC5000US);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.AccountInformation);
            Assert.IsTrue(profile.AccountInformation.MsftPointsBalance == 5000, "Points balance is not correct.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify Porper Points balance is returned (0) for a brand new account that has never bought points")]
        public void GetProfilePartner_AccountInformation_Silver_NewAccountZeroPoints()
        {
            Account acct = AccountTransport.CreateAccount(AccountTier.Silver, CountryId.US, ParentalControl.None);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.AccountInformation);
            Assert.IsTrue(profile.AccountInformation.MsftPointsBalance == 0, "Points balance is not correct.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify Porper Points balance is returned (0) for a brand new account that has never bought points")]
        public void GetProfilePartner_AccountInformation_Gold_Child_NewAccountZeroPoints()
        {
            Account acct = AccountTransport.CreateAccount(ParentalControl.Strict);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.AccountInformation);
            Assert.IsTrue(profile.AccountInformation.MsftPointsBalance == 0, "Points balance is not correct.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify Porper Points balance is returned (0) for a brand new account that has never bought points")]
        public void GetProfilePartner_AccountInformation_Silver_Child_NewAccountZeroPoints()
        {
            Account acct = AccountTransport.CreateAccount(AccountTier.Silver,CountryId.US, ParentalControl.Strict);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.AccountInformation);
            Assert.IsTrue(profile.AccountInformation.MsftPointsBalance == 0, "Points balance is not correct.");
        }

        #endregion

        #region GetProfilePartner IsParentallyControlled field


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify IsParentallyControlled flag is false for adult account")]
        public void GetProfilePartner_IsParentallyControlled_Adult()
        {
            Account acct = AccountTransport.CreateAccount(ParentalControl.None);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(false, profile.ProfileProperties[ProfileProperty.IsParentallyControlled], "IsParentallyControlled should be false for adult account.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify IsParentallyControlled flag is true for teen account")]
        public void GetProfilePartner_IsParentallyControlled_Teen()
        {
            Account acct = AccountTransport.CreateAccount(ParentalControl.Partial);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(true, profile.ProfileProperties[ProfileProperty.IsParentallyControlled], "IsParentallyControlled should be false for teen account.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify IsParentallyControlled flag is true for child account")]
        public void GetProfilePartner_IsParentallyControlled_Child()
        {
            Account acct = AccountTransport.CreateAccount(ParentalControl.Strict);
            RewardsTestScenarioLibrary rt = new RewardsTestScenarioLibrary(acct);
            ProfileEx profile = rt.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(true, profile.ProfileProperties[ProfileProperty.IsParentallyControlled], "IsParentallyControlled should be false for child account.");
        }

        #endregion

        #region ProfilePartner support functions
        private int GetFriendIndex(ProfileEx profileEx, string friendGamertag)
        {
            int i = 0;
            for (i = 0; i < profileEx.Friends.Count; i++)
            {
                if (profileEx.Friends[i].ProfileProperties[ProfileProperty.GamerTag].ToString() == friendGamertag)
                    return i;
            }
            Assert.Fail("Friend not found in results");
            return -1;
        }

        private ProfileEx Deserialize(string body)
        {
            XmlHelper xhelp = new XmlHelper();
            return xhelp.LoadXml<ProfileEx>(body);
        }

        #endregion ProfilePartner support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\HealthCheck.cs ===
﻿using System.Net;
using Leet.Core.Platforms;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class HealthCheck
    {
        private RewardsTransport rewardsTransport;
        private RewardsTestScenarioLibrary testScenarios;
        private string us_locale = "en-US";
        private int platformId = (int)PlatformType.Mobile;

        public HealthCheck()
        {
            rewardsTransport = new RewardsTransport();
            testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
        }

        #region Help page test cases
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds.<dev>.xboxlive.com/GameData.svc")]
        public void CheckGameDataService_Help()
        {
            CheckService_Help(rewardsTransport.GameDataService_fullUri + "/help", true);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://rewards.<dev>.xboxlive.com/RewardsService.svc")]
        public void CheckRewardsService_Help()
        {
            CheckService_Help(rewardsTransport.RewardsService_fullUri + "/help", true);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds.<dev>.xboxlive.com/Profiles.svc")]
        public void CheckProfileService_Help()
        {
            CheckService_Help(rewardsTransport.ProfileService_fullUri + "/help", true);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds-part.<dev>.xboxlive.com/GameData.svc")]
        public void CheckGameDataPartnerService_Help()
        {
            CheckService_Help(rewardsTransport.GameDataPartnerService_fullUri + "/help", false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds-part.<dev>.xboxlive.com/Profile.svc")]
        public void CheckProfilePartnerService_Help()
        {
            CheckService_Help(rewardsTransport.ProfilePartnerService_fullUri + "/help", false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds-part.<dev>.xboxlive.com/Presence.svc")]
        public void CheckPresenceService_Help()
        {
            CheckService_Help(rewardsTransport.PresencePartnerService_fullUri + "/help", false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds-part.<dev>.xboxlive.com/Message.svc")]
        public void CheckMessageService_Help()
        {
            CheckService_Help(rewardsTransport.MessagePartnerService_fullUri + "/help", false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds-part.<dev>.xboxlive.com/Friend.svc")]
        public void CheckFriendService_Help()
        {
            CheckService_Help(rewardsTransport.FriendPartnerService_fullUri + "/help", false);
        }
        #endregion Help page test cases

        private void CheckService_Help(string fullUri, bool isUserToken)
        {
            string userToken = "";
            string partnerToken = "";

            if (isUserToken)
            {
                userToken = rewardsTransport.CurrentStsTicket;
            }
            else
            {
                partnerToken = rewardsTransport.CurrentStsTicket;
            }

            Response resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, platformId.ToString(), userToken, partnerToken);
            Assert.AreEqual(HttpStatusCode.OK, resp.StatusCode, "Http response status was not as expected");
            Assert.IsTrue(resp.Body.ToLower().Contains("service help page"));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GrantAchievement.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class GrantAchievement
    {
        private static RewardsTransport rewardsTransport;
        private static RewardsTestScenarioLibrary testScenarios;
        private static TestGame achievementGame = TestGameUtility.GetFirstGameWithAchievements();

        private uint PlatformId = achievementGame.PlatformId;
        private string AppID = Guid.NewGuid().ToString();
        private string us_locale = "en-US";

        #region "GameId tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a valid GameId")]
        public void GrantAchievement_ValidGameID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Verify the achievement was granted
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        #endregion // "GameId tests"
        #region "AppId tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with no AppId")]
        public void GrantAchievement_MalformedRequest_NoAppID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MalformedAchievement("appId", achievementGame.GameId);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a zero AppId")]
        public void GrantAchievement_ZeroAppID()
        {
            GuaranteeAchievementsAvailable(1);
            string appID = "0";
            string achievementID = "1";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, appID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AppId")]
        public void GrantAchievement_InvalidAppID()
        {
            GuaranteeAchievementsAvailable(1);
            string appID = "Invalid-app-ID";
            string achievementID = "1";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, appID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a valid AppId")]
        public void GrantAchievement_ValidAppID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        #endregion // "AppId tests"
        #region "AchievementsList tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementsList")]
        public void GrantAchievement_EmptyAchievementList()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = "0";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Remove the achievements list
            grantAchievements.Achievements.Clear();

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievementsList containing one achievement")]
        public void GrantAchievement_SingleAchievement()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievementsList containing multiple achievements")]
        public void GrantAchievement_MultipleAchievements()
        {
            int achievementCount = 3;
            GuaranteeAchievementsAvailable(achievementCount);
            List<string> achievementIDs = new List<string>(achievementCount);

            //Create achievements
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleUnearned(achievementCount, achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "Not enough achievements were available to grant");
            for (int i = 0; i < achievementCount; i++)
            {
                achievementIDs.Add(grantAchievements.Achievements[i].Key);
            }

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            foreach (string achievementID in achievementIDs)
            {
                bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
                Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievementsList containing one valid and then one invalid AchievementId")]
        public void GrantAchievement_ValidInvalidAchievements()
        {
            GuaranteeAchievementsAvailable(2);
            List<string> achievementIDs = new List<string>(2);

            //Create a valid achievementID
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            string validAchievementID = (from achievement in results.Achievements
                                         where achievement.IsEarned == false
                                         select achievement.Key).First();
            achievementIDs.Add(validAchievementID);

            //Create an invalid achievementID
            achievementIDs.Add("X");
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleAchievements(achievementIDs, achievementGame.GameId, AppID);

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievemenstList containing one invalid and then one valid AchievementId")]
        public void GrantAchievement_InvalidValidAchievements()
        {
            GuaranteeAchievementsAvailable(2);
            List<string> achievementIDs = new List<string>(2);

            //Create an invalid achievementID
            achievementIDs.Add("X");

            //Create a valid achievementID
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            string validAchievementID = (from achievement in results.Achievements
                             where achievement.IsEarned == false
                             select achievement.Key).First();
            achievementIDs.Add(validAchievementID);

            //Create a new achievement list with the invalid and valid achievements
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleAchievements(achievementIDs, achievementGame.GameId, AppID);

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        #endregion // "AchievementsList tests"
        #region "Achievement tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementId")]
        public void GrantAchievement_EmptyAchievementID()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = string.Empty;

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with no AchievementId")]
        public void GrantAchievement_MalformedRequest_NoAchievementID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MalformedAchievement("achievementId", achievementGame.GameId);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [TestProperty("BugId", "9829")]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with no format on the query string")]
        public void GrantAchievement_MalformedRequest_NoFormat()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            string requestBody = RewardsTestUtil.GetGrantAchievementsString(grantAchievements);
            string query = "/GrantAchievements";

            //Grant the achievement
            Response ret = testScenarios.ExecuteCustomQuery("GrantAchievements", query, requestBody, achievementGame);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a zero AchievementId")]
        public void GrantAchievement_ZeroAchievementID()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = "0";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected - bug #2325");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AchievementId")]
        public void GrantAchievement_InvalidAchievementID()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = "X";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AchievementId with a boundary condition")]
        public void GrantAchievement_InvalidAchievementID_Boundary()
        {
            GuaranteeAchievementsAvailable(1);

            //Get the highest-numbered key for this game and increment it
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            int maxKey = 0;
            foreach (Achievement a in results.Achievements)
            {
                int key = Int16.Parse(a.Key);
                if (key > maxKey)
                    maxKey = key;
            }
            string achievementID = (maxKey + 1).ToString();

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID); 

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsFalse(achievementGranted, "Achievement [{0}] was granted", achievementID);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a valid AchievementId")]
        public void GrantAchievement_ValidAchievementID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a valid timestamp")]
        public void GrantAchievement_ValidTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a future timestamp")]
        public void GrantAchievement_FutureTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //A year and a day from today in the future
            earnedDate = earnedDate.AddYears(1);
            earnedDate = earnedDate.AddDays(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with a past timestamp")]
        public void GrantAchievement_PastTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //A year and a day from today in the past
            earnedDate = earnedDate.AddYears(-1);
            earnedDate = earnedDate.AddDays(-1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with no timestamp")]
        public void GrantAchievement_MalformedRequest_NoTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");

            //Get the GrantAchievements string
            string grantAchievementsString = RewardsTestUtil.GetGrantAchievementsString(grantAchievements);

            //Remove the earneddatetime
            int start = grantAchievementsString.IndexOf("<EarnedDateTime>");
            int end = grantAchievementsString.IndexOf("</EarnedDateTime>") + "</EarnedDateTime>".Length;
            int count = end - start;
            grantAchievementsString = grantAchievementsString.Remove(start, count);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievementsString, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with no earnedOnline value - should be accepted because a default is used")]
        public void GrantAchievement_MalformedRequest_NoEarnedOnline()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MalformedAchievement("earnedOnline", achievementGame.GameId);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with PlayerOnline = false")]
        public void GrantAchievement_PlayerNotOnline()
        {
            GuaranteeAchievementsAvailable(1);
            bool playerOnline = false;

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, playerOnline, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with PlayerOnline = true")]
        public void GrantAchievement_PlayerOnline()
        {
            GuaranteeAchievementsAvailable(1);
            bool playerOnline = true;

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, playerOnline, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        #endregion // "Achievement tests"
        #region "Gamerscore tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant one achievement and verify the Gamerscore")]
        public void GrantAchievement_Gamerscore_OneAchievement()
        {
            GuaranteeAchievementsAvailable(1);

            //Get the user's initial Gamerscore
            int initialGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Get the G for this achievement
            int achvGamerscore = testScenarios.GetGamerscoreForAchievement(achievementID, achievementGame.GameId, us_locale, PlatformId);
            if (achvGamerscore == -1)
                Assert.Inconclusive("Test cannot complete: no Gamerscore found for achievement {0}", achievementID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("Test cannot complete: GrantAchievements call failed");

            //Verify the achievement was granted
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);

            //Check the user's Gamerscore
            int currentGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);
            Assert.AreEqual(initialGamerscore + achvGamerscore, currentGamerscore, "Gamerscore is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant three achievements and verify the Gamerscore")]
        public void GrantAchievement_Gamerscore_ThreeAchievements()
        {
            int achievementCount = 3;
            GuaranteeAchievementsAvailable(achievementCount);
            List<string> achievementIDs = new List<string>(achievementCount);

            //Get the user's initial Gamerscore
            int initialGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleUnearned(achievementCount, achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "Not enough achievements were available to grant");
            for (int i = 0; i < achievementCount; i++)
            {
                achievementIDs.Add(grantAchievements.Achievements[i].Key);
            }

            //Get the G for these achievements
            int newGamerscore = 0;
            int achvGamerscore;
            foreach (string achievementID in achievementIDs)
            {
                achvGamerscore = testScenarios.GetGamerscoreForAchievement(achievementID, achievementGame.GameId, us_locale, PlatformId);
                if (achvGamerscore == -1)
                    Assert.Inconclusive("Test cannot complete: no Gamerscore found for achievement {0}", achievementID);
                else
                    newGamerscore += achvGamerscore;
            }

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("Test cannot complete: GrantAchievements call failed");

            //Verify the achievements were granted
            foreach (string achievementID in achievementIDs)
            {
                bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
                Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
            }

            //Check the user's Gamerscore
            int currentGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);
            Assert.AreEqual(initialGamerscore + newGamerscore, currentGamerscore, "Gamerscore is not correct");
        }

        #endregion "Gamerscore tests"
        #region "SQL injection tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 1 - 'use master \n drop database LIVEN_NPDB'")]
        public void GrantAchievement_SQLInjection_AchievementID1()
        {
            SQL_Injection_Test("use master \n drop database LIVEN_NPDB");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 2 - 'use LIVEN_NPDB \n delete table t_servers'")]
        public void GrantAchievement_SQLInjection_AchievementID2()
        {
            SQL_Injection_Test("use LIVEN_NPDB \n delete table t_servers");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 3 - 'use master \n drop database RewardsDB'")]
        public void GrantAchievement_SQLInjection_AchievementID3()
        {
            SQL_Injection_Test("use master \n drop database RewardsDB");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 4 - 'use master \n drop database RewardsQueueDb'")]
        public void GrantAchievement_SQLInjection_AchievementID4()
        {
            SQL_Injection_Test("use master \n drop database RewardsQueueDb");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 5 - '1=1'")]
        public void GrantAchievement_SQLInjection_AchievementID5()
        {
            SQL_Injection_Test("1=1");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 6 - '=achievementid'")]
        public void GrantAchievement_SQLInjection_AchievementID6()
        {
            SQL_Injection_Test("=achievementid");
        }

        private void SQL_Injection_Test(string text)
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(text, achievementGame.GameId, AppID);
            
            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        #endregion // "SQL injection tests"

        #region Locale tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GrantAchievements_Locale_Unsupported()
        {
            GuaranteeAchievementsAvailable(1);

            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement("1", achievementGame.GameId, AppID);
            Response response = testScenarios.GrantAchievements(grantAchievements, Constants.UnsupportedLocale, achievementGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GrantAchievements_Locale_None()
        {
            GuaranteeAchievementsAvailable(1);

            string emptyLocale = string.Empty;
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement("1", achievementGame.GameId, AppID);
            Response response = testScenarios.GrantAchievements(grantAchievements, emptyLocale, achievementGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch");
        }

        #endregion Locale tests

        #region Support functions

        /// <summary>
        /// Ensures the current user has a given number of unearned achievements and if not, creates and loads a new user
        /// </summary>
        /// <param name="achievementNeededCount">How many unearned achievements are needed</param>
        private void GuaranteeAchievementsAvailable(int achievementNeededCount)
        {
            if (testScenarios == null)
            {
                rewardsTransport = new RewardsTransport();
                testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
            }
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            int achievementsAvailable = (from a in results.Achievements
                                         where a.IsEarned == false
                                         select a).Count();
            if (achievementsAvailable < achievementNeededCount)
            {
                testScenarios = new RewardsTestScenarioLibrary(true);
            }
        }
        #endregion Support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\JsonTests.cs ===
﻿using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.Serialization.Json;
using System.Text;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class JsonTests
    {
        private RewardsTransport rewardsTransport;
        private RewardsTestScenarioLibrary testScenarios;
        private static TestGame testGame = TestGameUtility.GetFirstGameWithAllStats();
        private static TestGame achGame = TestGameUtility.GetFirstGameWithAchievements();
        private static TestGame allStatsGame = TestGameUtility.GetFirstGameWithAllStats();
        private TestUser tu = AuthenticationTransport.PrimaryUser;
        private readonly string us_locale = "en-US";
        private string AppID = Guid.NewGuid().ToString();

        public JsonTests()
        {
            rewardsTransport = new RewardsTransport();
            testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
        }

        #region Json tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Call GetAchievements with content type application/json")]
        public void Json_GetAchievements()
        {
            //Example Uri: gamedata.svc/achievements?format=json&gameId={gameId}
            string fullUri = rewardsTransport.GameDataService_fullUri + "/achievements?format=json&gameId=" + achGame.GameId.ToString();
            rewardsTransport.UpdateStsToken(achGame.GameId, achGame.PlatformId);
            Response ret = ExecuteWebServiceCall(fullUri, us_locale, achGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");

            AchievementsResult results = GetObjectFromJson<AchievementsResult>(ret);
            Assert.IsNotNull(results, "Null returned from GetAchievements");
            Assert.IsTrue(results.Achievements.Count > 0, "No achievements were found");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Call GetLeaderboard with content type application/json")]
        public void Json_GetLeaderboard()
        {
            //Example Uri: gamedata.svc/leaderboard?format=json&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}
            string query = "gameId=" + testGame.GameId.ToString() + "&variant=" + testGame.Variant.ToString() + "&property=BestScore&datagroup=W1&numRows=100&rankStart=1&socialGraph=2";
            rewardsTransport.UpdateStsToken(testGame.GameId, testGame.PlatformId);
            string fullUri = rewardsTransport.GameDataService_fullUri + "/leaderboard?format=json&" + query;
            Response ret = ExecuteWebServiceCall(fullUri, us_locale, testGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");

            LeaderboardResult initialLeaderboard = GetObjectFromJson<LeaderboardResult>(ret);
            long initialScore = long.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.BestScore));
            long newHighScore = initialScore + 1;

            //Post a higher score
            string fullPostGameResultUri = rewardsTransport.RewardsService_fullUri + "/GameResult?format=json";
            GameResult gameResult = testScenarios.CreateGameResult(testGame, newHighScore, 1, "blob", "Win");
            string gameResultString = GetPostBodyStringJson(gameResult);
            ExecutePOSTCall(gameResultString, fullPostGameResultUri, us_locale, testGame.PlatformId.ToString());

            // Get the new high score
            ret = ExecuteWebServiceCall(fullUri, us_locale, testGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");
            LeaderboardResult currentLeaderboard = GetObjectFromJson<LeaderboardResult>(ret);
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(currentLeaderboard, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newHighScore, actualScore, "Leaderboard was not updated with high score");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Call GetDatablob with content type application/json")]
        public void Json_GetDatablob()
        {
            string datablobId = string.Empty;
            datablobId = testScenarios.GetStatValue(allStatsGame, us_locale, LeaderboardPropertyType.BestScoreDataBlobId, "BestScore");

            if (string.IsNullOrEmpty(datablobId))
            {
                LeaderboardResult result = testScenarios.PostHigherScoreAndRetrieveLeaderboard(allStatsGame, us_locale, "I can haz more achievements", "Win", 1);
                datablobId = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScoreDataBlobId);
            }

            //Example Uri: gamedata.svc/Datablob?format=json&DatablobId={DatablobId}
            string fullUri = rewardsTransport.GameDataService_fullUri + "/Datablob?format=json&" + "DatablobId=" + datablobId;
            rewardsTransport.UpdateStsToken(allStatsGame.GameId, allStatsGame.PlatformId);
            Response ret = ExecuteWebServiceCall(fullUri, us_locale, allStatsGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");

            DatablobResult blobresult = GetObjectFromJson<DatablobResult>(ret);
            Assert.IsNotNull(Encoding.UTF8.GetString(blobresult.Blob), "Blob was null or empty");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Call GetProfileMyView with content type application/json")]
        public void Json_GetProfileMyView()
        {
            //Example Uri: Profiles.svc/profile?format=json&secionflags=<64-bit integer>
            string fullUri = rewardsTransport.ProfileService_fullUri + "/profile?format=json&sectionflags=" + ((uint)Constants.AllProfileSections).ToString();
            rewardsTransport.UpdateStsToken(allStatsGame.GameId, allStatsGame.PlatformId);
            Response ret = ExecuteWebServiceCall(fullUri, us_locale, allStatsGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");

            Profile pro = GetObjectFromJson<Profile>(ret);

            //Validate GamerTag for XboxLiveProperties 
            Assert.IsTrue((pro.ProfileProperties[ProfileProperty.GamerTag] as string).Equals(tu.Gamertag, StringComparison.OrdinalIgnoreCase), "GamerTag does not equal expected.");

            //Verify user has atleast one friend
            Assert.IsTrue(pro.Friends.Count > 0, "No friends returned where expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Call GetProfileYouView with content type application/json")]
        public void Json_GetProfileYouView()
        {
            TestUser firstFriend = tu.Friends[0];

            //Example Uri: Profiles.svc/profile?format=json&secionflags=<64-bit integer>&gamertag={gamertag}
            string fullUri = rewardsTransport.ProfileService_fullUri + "/profile?format=json&sectionflags=" + ((uint)Constants.AllProfileSections).ToString() + "&gamertag=" + firstFriend.Gamertag;
            rewardsTransport.UpdateStsToken(allStatsGame.GameId, allStatsGame.PlatformId);
            Response ret = ExecuteWebServiceCall(fullUri, us_locale, allStatsGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");

            Profile pro = GetObjectFromJson<Profile>(ret);

            //Validate GamerTag for XboxLiveProperties 
            Assert.IsTrue((pro.ProfileProperties[ProfileProperty.GamerTag] as string).Equals(firstFriend.Gamertag, StringComparison.OrdinalIgnoreCase));

            //Validate friend count greater than zero
            Assert.IsTrue(pro.Friends.Count > 0, "No friends returned where expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Call PostGameResult with content type application/json")]
        public void Json_PostGameResult()
        {
            //Example Uri: RewardsService.svc/GameResult?format=json 
            string fullUri = rewardsTransport.RewardsService_fullUri + "/GameResult?format=json";

            GameResult gameResult = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            string gameResultString = GetPostBodyStringJson(gameResult);

            rewardsTransport.UpdateStsToken(testGame.GameId, testGame.PlatformId);
            Response ret = ExecutePOSTCall(gameResultString, fullUri, us_locale, testGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.Accepted, ret.StatusCode, "Http response status code is not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Call GrantAchievements with content type application/json")]
        public void Json_GrantAchievements()
        {
            RewardsTestScenarioLibrary lib = testScenarios;
            try
            {
                lib = new RewardsTestScenarioLibrary(true);
            }
            catch (AssertInconclusiveException) { }

            //Example Uri: RewardsService.svc/GrantAchievements?format=json
            string fullUri = rewardsTransport.RewardsService_fullUri + "/GrantAchievements?format=json";

            GrantAchievements grantAchievements = lib.CreateAchievements_SingleUnearned(achGame.GameId, AppID, us_locale, achGame.PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string grantAchString = GetPostBodyStringJson(grantAchievements);

            rewardsTransport.UpdateStsToken(achGame.GameId, achGame.PlatformId);
            Response ret = ExecutePOSTCall(grantAchString, fullUri, us_locale, achGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");
        }

         #endregion Json tests
        #region Support functions
        private Response ExecutePOSTCall(string body, string requestUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting POST operation {0}", requestUri);
            Trace.TraceInformation("Username: {0}", rewardsTransport.CurrentUser);
            Trace.TraceInformation("Password: {0}", rewardsTransport.CurrentUserPassword);

            Response response = null;// RewardsTestUtil.ExecutePOSTCallJson(body, requestUri, locale, platformId, rewardsTransport.CurrentStsTicket);
            return response;
        }

        private Response ExecuteWebServiceCall(string fullUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting GET operation {0}", fullUri);
            Trace.TraceInformation("Username: {0}", rewardsTransport.CurrentUser);
            Trace.TraceInformation("Password: {0}", rewardsTransport.CurrentUserPassword);

            Response response = null; // RewardsTestUtil.ExecuteGETCallJson(fullUri, locale, platformId, rewardsTransport.CurrentStsTicket);
            return response;
        }

        private string GetPostBodyStringJson(object postBodyObject)
        {
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(postBodyObject.GetType());
            using (MemoryStream ms = new MemoryStream())
            {
                serializer.WriteObject(ms, postBodyObject);
                ms.Position = 0;
                byte[] buffer = ms.GetBuffer();
                return Encoding.UTF8.GetString(buffer, 0, (int)ms.Length);
            }
        }

        /// <summary>
        /// Deserializes a Json string to an object of specific type
        /// </summary>
        private static T GetObjectFromJson<T>(Response resp)
        {
            if (!String.IsNullOrEmpty(resp.Error))
            {
                throw new WebException(resp.Error);
            }

            T result = RewardsTestUtil.GetObjectFromJson<T>(resp.Body);
            return result;
        }
        #endregion Support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GetProfile.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using live.common;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    /// <summary>
    /// Summary description for GetProfile
    /// </summary>
    [TestClass]
    public class GetProfile
    {
        private TestGame allStatsGame = TestGameUtility.GetFirstGameWithAllStats();
        private RewardsTransport rewardsTransport = new RewardsTransport();
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        private readonly string us_locale = "en-US";
        private Random rand = new Random();
        #region Accounts for Basic Functional MyView and YouView tests
        private static Account myViewAcct;
        private Account MyViewAcct
        {
            get
            {
                if (myViewAcct == null)
                {
                    myViewAcct = AccountTransport.CreateAccount();
                    myViewAcct.GamerProfile.WriteProfileSettings("MyViewAcctMotto", "MyViewAcctName", "MyViewAcctLocation", "MyViewAcctBio", null, null, myViewAcct.GamerProfile.MaleAvatar, null, null);

                    //Wait for LiveCache to expire so that results from Profile service call will match.
                    RewardsTestUtil.Wait(30);
                }
                return myViewAcct;
            }
        }
        private static RewardsTestScenarioLibrary myViewScenarios;
        private RewardsTestScenarioLibrary MyViewScenarios
        {
            get
            {
                if (myViewScenarios == null)
                {
                    myViewScenarios = new RewardsTestScenarioLibrary(MyViewAcct);
                }
                return myViewScenarios;
            }
        }
        private TestGame achGame = TestGameUtility.GetFirstGameWithAchievements();

        private static Profile myViewProfile;
        private Profile MyViewProfile
        {
            get
            {
                if (myViewProfile == null)
                {
                    myViewProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(MyViewAcct);
                }
                return myViewProfile;
            }
        }
        private static Account youViewAcct;

        /// <summary>
        /// Account reused for various tests for YouView
        /// </summary>
        private Account YouViewAcct
        {
            get
            {
                if (youViewAcct == null)
                {
                    youViewAcct = AccountTransport.CreateAccount();
                    youViewAcct.GamerProfile.WriteProfileSettings("YouViewAcctMotto", "YouViewAcctName", "YouViewAcctLocation", "YouViewAcctBio", null, null, youViewAcct.GamerProfile.MaleAvatar, null, null);
                    UserLib.PrivacySettings set = new UserLib.PrivacySettings(PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone);
                    youViewAcct.ResetPrivacySettings(set);
                    //Wait for LiveCache to expire so that results from Profile service call will match.
                    RewardsTestUtil.Wait(30);
                }
                return youViewAcct;
            }
        }

        private static Profile youViewProfile;

        /// <summary>
        /// Profile reused for various tests for YouView
        /// </summary>
        private Profile YouViewProfile
        {
            get
            {
                if (youViewProfile == null)
                {
                    youViewProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(YouViewAcct);
                }
                return youViewProfile;
            }

        }
        #endregion


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Basic validation for Reputation returned from Profile")]
        [Priority(2)]        
        public void GetProfileMyView_Reputation()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);
            
            Profile pro = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections);
            string profileReputation = pro.ProfileProperties[ProfileProperty.Reputation].ToString();
            float actualReputation = 0;
            if (!float.TryParse(profileReputation, out actualReputation))
            {
                Assert.Inconclusive("Failed to parse the Reputation property");
            }
            float expectedReputation = (float)acct.GamerProfile.Rep;
            
            Assert.AreEqual(expectedReputation, actualReputation, "Reputation from Profile service matches that of UserLib Account.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Basic validation for the GameUrl and ImageUrl returned from Profile")]
        [Priority(2)] 
        public void GetProfileMyView_GameURLAndImage()
        {
            Profile prof = testScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentGames);

            Leet.UserGameData.DataContracts.GameInfo gameinfo = prof.RecentGames[0];
            
            Assert.IsTrue(Uri.IsWellFormedUriString(gameinfo.GameUrl, UriKind.Absolute), "GameUrl not a valid url");
            Assert.IsTrue(Uri.IsWellFormedUriString(gameinfo.ImageUrl, UriKind.Absolute), "ImageUrl not a valid url");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Basic test for Gamerscore for Me View Profile")]
        [Priority(2)] 
        public void GetProfileMyView_Gamerscore()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile pro = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties);
            int profileGamerScore = (int)pro.ProfileProperties[ProfileProperty.GamerScore];
            int expectedGamerScore = (int)acct.GamerProfile.Score;

            Assert.AreEqual(expectedGamerScore, profileGamerScore, "GamerScore from Profile service does not match GamserScore from UserLib Account.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate ProfileProperties from Profile Service for MyView")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_ProfileProperties()
        {
            Profile expectedProfile = MyViewProfile;

            Profile actualProfile = MyViewScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate ProfileProperties from Profile Service for YouView")]
        [Priority(2)] 
        public void GetProfileYouView_Verify_ProfileProperties()
        {
            Profile expectedProfile = YouViewProfile;
            Profile actualProfile = MyViewScenarios.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties, expectedProfile.ProfileProperties[ProfileProperty.GamerTag] as string);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate Profile properties sections are as spec'd")]
        [Priority(2)]
        public void GetProfile_Verify_SectionFlagsValues()
        {
            Assert.AreEqual((uint)SectionFlags.XboxLiveProperties, (uint)ProfileSections.XboxLiveProperties, "Profile sectionflags mismatch on XboxLiveProperties");
            Assert.AreEqual((uint)SectionFlags.WindowsLiveProperties, (uint)ProfileSections.WindowsLiveProperties, "Profile sectionflags mismatch on WindowsLiveProperties");
            Assert.AreEqual((uint)SectionFlags.Friends, (uint)ProfileSections.Friends, "Profile sectionflags mismatch on Friends");
            Assert.AreEqual((uint)SectionFlags.RecentGames, (uint)ProfileSections.RecentGames, "Profile sectionflags mismatch on RecentGames");
            Assert.AreEqual((uint)SectionFlags.RecentAchievements, (uint)ProfileSections.RecentAchievements, "Profile sectionflags mismatch on RecentAchievements");
            Assert.AreEqual((uint)SectionFlags.PresenceInfo, (uint)ProfileSections.PresenceInfo, "Profile sectionflags mismatch on PresenceInfo");
            Assert.AreEqual((uint)SectionFlags.PrivacySettings, (uint)ProfileSections.PrivacySettings, "Profile sectionflags mismatch on PrivacySettings");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate Friends from Profile Service for MyView")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_Friends()
        {
            if (MyViewProfile.Friends == null)
            {
                RewardsTestUtil.Wait(30);
                AccountTransport.MakeFriends(MyViewAcct, YouViewAcct);

                RewardsTestScenarioLibrary.UpdateProfileFriends(YouViewProfile, MyViewProfile);
            }

            Profile expectedProfile = MyViewProfile;

            Profile actualProfile = MyViewScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.Friends);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile.Friends[0], actualProfile.Friends[0]);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate Friends from Profile Service for YouView")]
        [Priority(2)] 
        public void GetProfileYouView_Verify_Friends()
        {
            if (MyViewProfile.Friends == null)
            {
                RewardsTestUtil.Wait(30);
                AccountTransport.MakeFriends(YouViewAcct, MyViewAcct);

                RewardsTestScenarioLibrary.UpdateProfileFriends(MyViewProfile, YouViewProfile);
            }

            Profile expectedProfile = YouViewProfile;

            Profile actualProfile = MyViewScenarios.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.Friends, youViewProfile.ProfileProperties[ProfileProperty.GamerTag] as string);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile.Friends[0], actualProfile.Friends[0]);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate AccountTier from Profile Service for MyView - Gold AccountTier")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_AccountTier_Gold()
        {
            AccountTier acctTier = AccountTier.Gold;

            Account acct = AccountTransport.CreateAccount(acctTier, CountryId.US, ParentalControl.None);
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);
            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties);

            RewardsTestScenarioLibrary.VerifyProfileProperty(expectedProfile, actualProfile, ProfileProperty.MembershipLevel);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate AccountTier from Profile Service for MyView - Silver AccountTier")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_AccountTier_Silver()
        {
            AccountTier acctTier = AccountTier.Silver;

            Account acct = AccountTransport.CreateAccount(acctTier, CountryId.US, ParentalControl.None);
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);
            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties);

            RewardsTestScenarioLibrary.VerifyProfileProperty(expectedProfile, actualProfile, ProfileProperty.MembershipLevel);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate GamerZone from Profile Service for MyView - All GamerZones")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_GamerZones()
        {
            Account mainAcct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(mainAcct);

            List<GamerZone> gamerZones = new List<GamerZone> { GamerZone.Family, GamerZone.Pro, GamerZone.Recreation, GamerZone.Underground };

            List<Account> accounts = new List<Account>();

            foreach (GamerZone gamerZone in gamerZones)
            {
                Account acct = AccountTransport.CreateAccount();
                acct.GamerProfile.WriteProfileSettings("", "", "", "", null, null, null, gamerZone, null);
                accounts.Add(acct);
            }

            RewardsTestUtil.Wait(30);

            foreach (GamerZone gamerZone in gamerZones)
            {
                Account acct = accounts[gamerZones.IndexOf(gamerZone)] as Account;

                Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);
                Profile actualProfile = newScenarios.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties, acct.XblUser.Gamertag);

                RewardsTestScenarioLibrary.VerifyProfileProperty(expectedProfile, actualProfile, ProfileProperty.GamerZone);
            }                       
        }

        #region Tests for RecentGames and RecentAchievements

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView Basic Test")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_Games_Achievements_1Game_1Achievement()
        {
            Account acct = AccountTransport.CreateAccount();
         
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);
            RewardsTestUtil.Wait(120);
            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);
            RewardsTestUtil.Wait(1);            

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);
            
            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for YouView Basic Test")]
        [Priority(2)] 
        public void GetProfileYouView_Verify_Games_Achievements_1Game_1Achievement()
        {
            Account acctMyView = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary myViewScenarios = new RewardsTestScenarioLibrary(acctMyView);

            Account acctYouView = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary youViewScenarios = new RewardsTestScenarioLibrary(acctYouView);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            TestGame tg = testGames[0];
            youViewScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myViewScenarios.GetProfileYouView(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections, acctYouView.XblUser.Gamertag);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView with No games and No achievements")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_Games_Achievements_0Game_0Achievement()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            expectedProfile.RecentAchievements = new XmlSerializableList<Achievement>();
            expectedProfile.RecentGames = new XmlSerializableList<Leet.UserGameData.DataContracts.GameInfo>();

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView with One game played and No achievements")]
        [Priority(2)] 
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_1Game_0Achievement()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            expectedProfile.RecentAchievements = new XmlSerializableList<Achievement>();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            TestGame tg = testGames[0];
            newScenarios.AddGameOnly(expectedProfile, tg, acct, us_locale);
            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView with Two games played and One achievement on a game that wasn't the most recent")]
        [Priority(2)]
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_2Game_1Achievement()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();
           
            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            tg = testGames[1];
            newScenarios.AddGameOnly(expectedProfile, tg, acct, us_locale);

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView with 2 games played each with an achievement")]
        [Priority(2)] 
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_2Game_2Achievement()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            tg = testGames[1];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView with 2 achievements on 1 game and 0 on the other game played.")]
        [Priority(2)]
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_2Game_2Achievementon1Game()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            tg = testGames[1];
            newScenarios.AddGameOnly(expectedProfile, tg, acct, us_locale);

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView with 2 games played 1 achievement not on the most recent game")]
        [Priority(2)]
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_2Game_2Achievement_RGneRA()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            tg = testGames[1];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            tg = testGames[0];
            newScenarios.AddGameOnly(expectedProfile, tg, acct, us_locale);

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView where 6 games are played with 1 achievement on the oldest game played.")]
        [Priority(2)]
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_6Game_1Achievement()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            Assert.IsTrue(testGames.Count >= 6, "Test needs at least 6 games with achivements to run and pass.");

            testGames.RemoveRange(6, testGames.Count - 6);
            
            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            testGames.Remove(tg);

            foreach (TestGame curGame in testGames)
            {
                newScenarios.AddGameOnly(expectedProfile, curGame, acct, us_locale);
            }

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView where 7 games are played with 1 achievement on the oldest game played which won't show on RecentAchievements since it isn't on the last 6 played games.")]
        [Priority(2)]
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_7Game_0Achievement()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            Assert.IsTrue(testGames.Count >= 7, "Test needs at least 7 games with achivements to run and pass.");

            testGames.RemoveRange(7, testGames.Count - 7);

            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            testGames.Remove(tg);

            foreach (TestGame curGame in testGames)
            {
                newScenarios.AddGameOnly(expectedProfile, curGame, acct, us_locale);
            }

            expectedProfile.RecentAchievements.Clear();

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView  where 7 games are played with 1 achievement on the latest game played.")]
        [Priority(2)]
        [Ignore]
        public void GetProfileMyView_Verify_Games_Achievements_7Game_1Achievement()
        {
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            Assert.IsTrue(testGames.Count >= 7, "Test needs at least 7 games with achivements to run and pass.");

            testGames.RemoveRange(7, testGames.Count - 7);

            TestGame tg = testGames[0];
            newScenarios.AddGameAndAchievment(expectedProfile, tg, us_locale);

            testGames.Remove(tg);

            foreach (TestGame curGame in testGames)
            {
                newScenarios.AddGameOnly(expectedProfile, curGame, acct, us_locale);
            }

            newScenarios.AddGameOnly(expectedProfile, tg, acct, us_locale);

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate RecentGames and RecentAchievements from Profile Service for MyView  where 7 games are played with 1 achievement on each.")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_Games_Achievements_7Game_7Achievement()
        {            
            Account acct = AccountTransport.CreateAccount();

            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Profile expectedProfile = new Profile();

            List<TestGame> testGames = TestGameUtility.GetGamesWithAchievements();

            Assert.IsTrue(testGames.Count >= 6, "Test needs at least 6 games with achivements to run and pass.");

            testGames.RemoveRange(6, testGames.Count - 6);

            foreach (TestGame curGame in testGames)
            {
                newScenarios.AddGameAndAchievment(expectedProfile, curGame, us_locale);
            }

            RewardsTestUtil.Wait(1);

            Profile actualProfile = newScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.RecentGamesAndAchievementsSections);

            RewardsTestScenarioLibrary.VerifyRecentGames(expectedProfile, actualProfile, false);
            RewardsTestScenarioLibrary.VerifyRecentAchievements(expectedProfile, actualProfile, false);
        }

        #endregion Tests for RecentGames and RecentAchievements


        #region Negative tests for ProfileProperties
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate ProfileProperties are not returned from Profile Service for MyView")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_ProfileProperties_NegativeTests()
        {
            Profile actualProfile = MyViewScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections);

            RewardsTestScenarioLibrary.VerifyProfilePropertiesNotReturned(actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate ProfileProperties are not returned from Profile Service for YouView")]
        [Priority(2)] 
        public void GetProfileYouView_Verify_ProfileProperties_NegativeTests()
        {
            string gamerTag = YouViewAcct.XblUser.Gamertag;
            Profile actualProfile = MyViewScenarios.GetProfileYouView(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections, gamerTag);

            RewardsTestScenarioLibrary.VerifyProfilePropertiesNotReturned(actualProfile);
        }
        #endregion

        #region AccountTypes

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate XboxLiveProperties are correctly returned for a Child Account")]
        [Priority(2)] 
        public void GetProfileMyView_ChildAccount_VerifyXboxLivePropertiesReturnedCorrectly()
        {
            Account acct = AccountTransport.CreateAccount(ParentalControl.Strict);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);
            Profile actualProfile = lib.GetProfileMyView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate XboxLiveProperties are correctly returned for a Teen Account")]
        [Priority(2)] 
        public void GetProfileMyView_TeenAccount_VerifyXboxLivePropertiesReturnedCorrectly()
        {
            Account acct = AccountTransport.CreateAccount(ParentalControl.Partial);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            RewardsTestUtil.Wait(30);

            Profile actualProfile = lib.GetProfileMyView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate XboxLiveProperties are correctly returned for a Foreign Account")]
        [Priority(2)] 
        public void GetProfileMyView_ForeignAccount_VerifyProfileReturned()
        {
            Account acct = AccountTransport.CreateAccount(CountryId.GB);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);
            
            RewardsTestUtil.Wait(30);

            Profile actualProfile = lib.GetProfileMyView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);
            
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate XboxLiveProperties are correctly returned for a Foreign Child Account")]
        [Priority(2)] 
        public void GetProfileMyView_ForeignChildAccount_VerifyProfileReturned()
        {
            Account acct = AccountTransport.CreateAccount(CountryId.GB, ParentalControl.Strict);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            RewardsTestUtil.Wait(30);

            Profile actualProfile = lib.GetProfileMyView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate XboxLiveProperties are correctly returned for a Foreign Teen Account")]
        [Priority(2)] 
        public void GetProfileMyView_ForeignTeenAccount_VerifyProfileReturned()
        {
            Account acct = AccountTransport.CreateAccount(CountryId.GB, ParentalControl.Partial);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            RewardsTestUtil.Wait(30);

            Profile actualProfile = lib.GetProfileMyView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(acct);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for an Adult Account")]
        [Priority(2)] 
        public void GetProfileYouView_AdultAccount_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();
            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Child Account")]
        [Priority(2)] 
        public void GetProfileYouView_ChildAccount_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount(ParentalControl.Strict);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Teen Account")]
        [Priority(2)]
        public void GetProfileYouView_TeenAccount_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Partial);
            Account friend = AccountTransport.CreateAccount(ParentalControl.Partial);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Banned friend's account")]
        [Priority(2)]
        public void GetProfileYouView_BannedAccount_VerifyProfileReturned()
        {
            Account goodUser = AccountTransport.CreateAccount();
            Account bannedUser = AccountTransport.CreateAccount();
            bannedUser.GamerProfile.WriteProfileSettings("MyMotto", "MyName", "MyLocation", "MyBio", null, null, bannedUser.GamerProfile.MaleAvatar, GamerZone.Pro, CountryId.US);

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(goodUser, bannedUser);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(bannedUser);
            AccountTransport.BanAccount(bannedUser, false, true, true, true, true);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(goodUser);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, bannedUser.XblUser.Gamertag);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate a user with a Banned Account can't get an STS token")]
        [Priority(2)]
        public void GetProfile_BannedAccount_VerifyNoSTSToken()
        {
            bool testPasses = false;
            
            Account user = AccountTransport.CreateAccount();
            RewardsTransport rt = new RewardsTransport(user.XblUser.Settings.UserPassportInfo.MemberName, user.XblUser.Settings.UserPassportInfo.Password);
            AccountTransport.BanAccount(user, false, true, true, true, true);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);

            try
            {
                rt.UpdateStsToken(TestGameUtility.GamesHubTitle.GameId, TestGameUtility.GamesHubTitle.PlatformId);
            }
            catch (System.Net.WebException)
            {
                // this is expected
                testPasses = true;
            }

            Assert.IsTrue(testPasses, "STS token was updated for a banned user");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Foreign Adult Account")]
        [Priority(2)]
        public void GetProfileYouView_ForeignAdultAccount_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(CountryId.GB);
            Account friend = AccountTransport.CreateAccount(CountryId.GB);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Foreign Child Account")]
        [Priority(2)]
        public void GetProfileYouView_ForeignChildAccount_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(CountryId.GB,ParentalControl.Strict);
            Account friend = AccountTransport.CreateAccount(CountryId.GB, ParentalControl.Strict);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Foreign Teen Account")]
        [Priority(2)]
        public void GetProfileYouView_ForeignTeenAccount_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(CountryId.GB, ParentalControl.Partial);
            Account friend = AccountTransport.CreateAccount(CountryId.GB, ParentalControl.Partial);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Child Friend Account")]
        [Priority(2)]
        public void GetProfileYouView_AdultAccountChildFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount(ParentalControl.Strict);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Teen Friend Account")]
        [Priority(2)]
        public void GetProfileYouView_AdultAccountTeenFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount(ParentalControl.Partial);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Banned Friend Account")]
        [Priority(2)]
        public void GetProfileYouView_AdultAccountBannedFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);

            AccountTransport.BanAccount(friend, false, true, true, true, true);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Teen Child Friend Account")]
        [Priority(2)]
        public void GetProfileYouView_TeenAccountChildFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Partial);
            Account friend = AccountTransport.CreateAccount(ParentalControl.Strict);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Teen Account Adult Friend")]
        [Priority(2)]
        public void GetProfileYouView_TeenAccountAdultFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Partial);
            Account friend = AccountTransport.CreateAccount();
            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Teen Account Banned Friend")]
        [Priority(2)]
        public void GetProfileYouView_TeenAccountBannedFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Partial);
            Account friend = AccountTransport.CreateAccount();

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);

            AccountTransport.BanAccount(friend, false, true, true, true, true);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Child Account Teen Friend")]
        [Priority(2)]
        public void GetProfileYouView_ChildAccountTeenFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Strict);
            Account friend = AccountTransport.CreateAccount(ParentalControl.Partial);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Child Account Adult Friend")]
        [Priority(2)]
        public void GetProfileYouView_ChildAccountAdultFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Strict);
            Account friend = AccountTransport.CreateAccount();

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);

            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate YouView XboxLiveProperties are correctly returned for a Child Account Banned Friend")]
        [Priority(2)]
        public void GetProfileYouView_ChildAccountBannedFriend_VerifyProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Strict);
            Account friend = AccountTransport.CreateAccount();

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(user, friend);
            
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friend);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);

            AccountTransport.BanAccount(friend, false, true, true, true, true);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Profile actualProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, SectionFlags.XboxLiveProperties, friend.XblUser.Gamertag);
            
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate MyView Achievements are correctly returned for an Adult Account")]
        [Priority(2)]
        public void GetProfileMyView_AdultAccountAchievements_VerifyUpdatedProfileReturned()
        {
            Account user = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            lib.CreateAchievementsGrantAndVerifyInProfile(1, achGame, us_locale, Guid.Empty.ToString());
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate MyView Achievements are correctly returned for a Child Account")]
        [Priority(2)]
        public void GetProfileMyView_ChildAccountAchievements_VerifyUpdatedProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Strict);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            lib.CreateAchievementsGrantAndVerifyInProfile(1, achGame, us_locale, Guid.Empty.ToString());
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Validate MyView Achievements are correctly returned for a Teen Account")]
        [Priority(2)]
        public void GetProfileMyView_TeenAccountAchievements_VerifyUpdatedProfileReturned()
        {
            Account user = AccountTransport.CreateAccount(ParentalControl.Partial);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            lib.CreateAchievementsGrantAndVerifyInProfile(1, achGame, us_locale, Guid.Empty.ToString());
        }

        #endregion AccountTypes

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Check response when user has not been authenticated")]        
        [Priority(2)] 
        public void CheckProfileService_Unauthorized()
        {
            Response response = testScenarios.GetProfileForCustomStsTicket(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections, null, null);
            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Http response code not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Check response for section flag 2 which is Not Supported")]
        [Priority(2)] 
        public void GetProfileMyView_Verify_WindowsLive_NotSupported()
        {
            Response response = testScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId.ToString(), SectionFlags.WindowsLiveProperties);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response code not as expected");
        }

        #region Privacy Tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Test to verify Me View ShowGamerProfile when GamerProfile privacy is set to Everyone")]
        [Priority(2)] 
        public void GetProfileMyView_VerifyShowGamerProfile_EveryoneAccount()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosEveryone = new RewardsTestScenarioLibrary(myAcctEveryone);
            
            Profile actualProfile = myScenariosEveryone.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties);
            int actualGamerProfilePrivacy = (int)actualProfile.ProfileProperties[ProfileProperty.ShowGamerProfile];

            int expectedGamerProfilePrivacy = (int)PrivacyOption.Everyone;
            Assert.AreEqual(expectedGamerProfilePrivacy, actualGamerProfilePrivacy, "PrivacySetting does not match expected.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Test to verify Me View ShowGamerProfile when GamerProfile privacy is set to FriendsOnly")]
        [Priority(2)] 
        public void GetProfileMyView_VerifyShowGamerProfile_FriendsOnlyAccount()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosFriendsOnly = new RewardsTestScenarioLibrary(myAcctFriendsOnly);

            Profile actualProfile = myScenariosFriendsOnly.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties);
            int actualGamerProfilePrivacy = (int)actualProfile.ProfileProperties[ProfileProperty.ShowGamerProfile];

            int expectedGamerProfilePrivacy = (int)PrivacyOption.FriendsOnly;
            Assert.AreEqual(expectedGamerProfilePrivacy, actualGamerProfilePrivacy, "PrivacySetting does not match expected.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Test to verify Me View ShowGamerProfile when GamerProfile privacy is set to Blocked")]
        [Priority(2)] 
        public void GetProfileMyView_VerifyShowGamerProfile_BlockedAccount()
        {
            Account myAcctBlocked = AccountTransport.CreateAccount(PrivacyOption.Blocked);
            RewardsTestScenarioLibrary myScenariosBlocked = new RewardsTestScenarioLibrary(myAcctBlocked);

            Profile actualProfile = myScenariosBlocked.GetProfileMyView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties);
            int actualGamerProfilePrivacy = (int)actualProfile.ProfileProperties[ProfileProperty.ShowGamerProfile];
            
            int expectedGamerProfilePrivacy = (int)PrivacyOption.Blocked;
            Assert.AreEqual(expectedGamerProfilePrivacy, actualGamerProfilePrivacy, "PrivacySetting does not match expected.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)] 
        [Description("Test for Me View Profile properties whose privacy is set to Blocked")]
        public void GetProfileMyViewBlocked_VerifyXboxLivePropertiesCorrectlyReturned()
        {
            Account myAcctBlocked = AccountTransport.CreateAccount(PrivacyOption.Blocked);
            AccountTransport.WriteProfileSettings(myAcctBlocked, "MyViewBlockedMotto", "MyViewBlockedName", "MyViewBlockedLoc", "MyViewBlockedBio", null, null, MyViewAcct.GamerProfile.MaleAvatar, GamerZone.Pro, CountryId.US);
            RewardsTestScenarioLibrary myScenariosEveryone = new RewardsTestScenarioLibrary(myAcctBlocked);

            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosEveryone.GetProfileMyView(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(myAcctBlocked);
            
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View is Not Friend Profile properties whose privacy is set to Everyone")]
        public void GetProfileYouView_EveryoneActIsNotFriend_VerifyXboxLivePropertiesCorrectlyReturned()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosEveryone = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account otherAcct = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            
            AccountTransport.WriteProfileSettings(otherAcct, "PublicNotFriendMotto", "PublicNotFriendName", "PublicNotFriendLoc", "PublicNotFriendBio", null, null, MyViewAcct.GamerProfile.FemaleAvatarMetadata, GamerZone.Pro, CountryId.US);
            RewardsTestUtil.Wait(30);
            string otherGamertag = otherAcct.XblUser.Gamertag;

            Profile actualProfile = myScenariosEveryone.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties, otherGamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(otherAcct);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test You View Friend's Profile properties whose privacy is set to Friends Only")]
        public void GetProfileYouView_FriendsOnlyActIsFriend_VerifyXboxLivePropertiesCorrectlyReturned()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosEveryone = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account friendAcct = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            
            AccountTransport.WriteProfileSettings(friendAcct, "FriendsIsFriendMotto", "FriendsIsFriendName", "FriendsIsFriendLoc", "FriendsIsFriendBio", null, null, MyViewAcct.GamerProfile.MaleAvatar, GamerZone.Recreation, CountryId.US);
            string friendGamertag = friendAcct.XblUser.Gamertag;

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(myAcctEveryone, friendAcct);
            
            Profile actualProfile = myScenariosEveryone.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties, friendGamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friendAcct);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test You View is Not Friend Profile properties whose privacy is set to Friends Only")]
        public void GetProfileYouView_FriendsOnlyActIsNotFriend_VerifyXboxLivePropertiesCorrectlyReturned()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosEveryone = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account otherAcct = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            
            AccountTransport.WriteProfileSettings(otherAcct, "FriendsNotFriendMotto", "FriendsNotFriendName", "FriendsNotFriendLoc", "FriendsNotFriendBio", null, null, MyViewAcct.GamerProfile.MaleAvatar, GamerZone.Family, CountryId.US);
            RewardsTestUtil.Wait(30);
            string otherGamertag = otherAcct.XblUser.Gamertag;

            Profile actualProfile = myScenariosEveryone.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties, otherGamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(otherAcct);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View Is Friend Profile properties whose privacy is set to Blocked")]
        public void GetProfileYouView_BlockedActIsFriend_VerifyXboxLivePropertiesCorrectlyReturned()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosEveryone = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account friendAcct = AccountTransport.CreateAccount(PrivacyOption.Blocked);
            
            AccountTransport.WriteProfileSettings(friendAcct, "BlockedIsFriendMotto", "BlockedIsFriendName", "BlockedIsFriendLoc", "BlockedIsFriendBio", null, null, MyViewAcct.GamerProfile.FemaleAvatarMetadata, GamerZone.Underground, CountryId.US);
            string friendGamertag = friendAcct.XblUser.Gamertag;
            
            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(MyViewAcct, friendAcct);
            
            Profile actualProfile = myScenariosEveryone.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties, friendGamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friendAcct);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View Profile properties whose privacy is set to Blocked and not a friend")]
        public void GetProfileYouView_BlockedActIsNotFriend_VerifyXboxLivePropertiesCorrectlyReturned()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosEveryone = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account otherAcct = AccountTransport.CreateAccount(PrivacyOption.Blocked);
            
            AccountTransport.WriteProfileSettings(otherAcct, "BlockedNotFriendMotto", "BlockedNotFriendName", "BlockedNotFriendLoc", "BlockedNotFriendBio", null, null, MyViewAcct.GamerProfile.FemaleAvatarMetadata, GamerZone.Underground, CountryId.US);
            RewardsTestUtil.Wait(30);
            string otherGamertag = otherAcct.XblUser.Gamertag;

            Profile actualProfile = myScenariosEveryone.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.XboxLiveProperties, otherGamertag);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(otherAcct);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that Friend's profile is returned when Friend has FriendsOnly setting")]
        public void GetProfileYouView_FriendsOnlyActIsFriend_VerifyFriendsList()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctFriendsOnly);
            AccountTransport.WriteProfileSettings(myAcctFriendsOnly, "Me_FO_Motto", "Me_FO_Name", "Me_FO_Loc", "Me_FO_Bio", null, null, MyViewAcct.GamerProfile.MaleAvatar, GamerZone.Underground, CountryId.US);
            
            Account friendAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            string friendGamertag = friendAcctFriendsOnly.XblUser.Gamertag;

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(myAcctFriendsOnly, friendAcctFriendsOnly);
            Profile myProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(myAcctFriendsOnly);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friendAcctFriendsOnly);
            RewardsTestScenarioLibrary.UpdateProfileFriends(expectedProfile, myProfile);

            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.Friends, friendGamertag);
            Assert.AreEqual<int>(1, actualProfile.Friends.Count, "Expected number of friends not returned");
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile.Friends[0], actualProfile.Friends[0]);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that Friend's profile is returned when friend has Everyone privacy setting")]
        public void GetProfileYouView_EveryoneActIsFriend_VerifyFriendsList()
        {
            Account myAcctLocal = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctLocal);
            
            Account friendAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            string friendGamertag = friendAcctEveryone.XblUser.Gamertag;
            AccountTransport.WriteProfileSettings(friendAcctEveryone, "You_Everyone_Motto", "You_Everyone_Name", "You_Everyone_Loc", "You_Everyone_Bio", null, null, MyViewAcct.GamerProfile.FemaleAvatarMetadata, GamerZone.Family, CountryId.US);

            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(myAcctLocal, friendAcctEveryone);
            Profile myProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(myAcctLocal);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friendAcctEveryone);
            RewardsTestScenarioLibrary.UpdateProfileFriends(expectedProfile, myProfile);
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.Friends, friendGamertag);
            Assert.AreEqual<int>(1, actualProfile.Friends.Count, "Expected number of friends not returned");
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile.Friends[0], actualProfile.Friends[0]);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("You View test to check that an account that is not a friend with Privacy Everyone returns a friend list")]
        public void GetProfileYouView_EveryoneActIsNotFriend_VerifyFriendsList()
        {
            Account myActLocal = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myActLocal);
            Account act2Everyone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            Account act3Friend = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            string act2Gamertag = act2Everyone.XblUser.Gamertag;

            AccountTransport.WriteProfileSettings(act3Friend, "Act3_Friend_Motto", "Act3_Friend_Name", "Act3_Friend_Loc", "Act3_Friend_Bio", null, null, MyViewAcct.GamerProfile.FemaleAvatarMetadata, GamerZone.Family, CountryId.US);
            
            RewardsTestUtil.Wait(30);

            // Make Account 2 and 3 friends so that 2 has a friend in FriendsList
            AccountTransport.MakeFriends(act2Everyone, act3Friend);
            Profile act3Profile = RewardsTestScenarioLibrary.ConvertAccountToProfile(act3Friend);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(act2Everyone);
            RewardsTestScenarioLibrary.UpdateProfileFriends(expectedProfile, act3Profile);
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.Friends, act2Gamertag);
            Assert.AreEqual<int>(1, actualProfile.Friends.Count, "Expected number of friends not returned");
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile.Friends[0], actualProfile.Friends[0]);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("You View test to check that an account that is not a friend with Privacy FriendsOnly does not return a friend list")]
        public void GetProfileYouView_FriendsOnlyActIsNotFriend_VerifyFriendsList()
        {
            Account myActLocal = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myActLocal);
            Account act2FriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            Account act3Friend = AccountTransport.CreateAccount();
            string act2Gamertag = act2FriendsOnly.XblUser.Gamertag;

            AccountTransport.WriteProfileSettings(act3Friend, "Act3_Friend_Motto", "Act3_Friend_Name", "Act3_Friend_Loc", "Act3_Friend_Bio", null, null, MyViewAcct.GamerProfile.FemaleAvatarMetadata, GamerZone.Family, CountryId.US);
            
            // Make Account 2 and 3 friends so that 2 has a friend in FriendsList
            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(act2FriendsOnly, act3Friend);            

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.Friends, act2Gamertag);
            Assert.AreEqual(0, actualProfile.Friends.Count, "Friends returned with Profile when not expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("You View test to check that an account that is not a friend with Privacy Blocked does not return a friend list")]
        public void GetProfileYouView_BlockedActIsNotFriend_VerifyFriendsList()
        {
            Account myActLocal = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myActLocal);
            Account act2Blocked = AccountTransport.CreateAccount(PrivacyOption.Blocked);
            Account act3Friend = AccountTransport.CreateAccount();
            string act2Gamertag = act2Blocked.XblUser.Gamertag;

            AccountTransport.WriteProfileSettings(act3Friend, "Act3_Friend_Motto", "Act3_Friend_Name", "Act3_Friend_Loc", "Act3_Friend_Bio", null, null, MyViewAcct.GamerProfile.FemaleAvatarMetadata, GamerZone.Family, CountryId.US);
            
            // Make Account 2 and 3 friends so that 2 has a friend in FriendsList
            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(act2Blocked, act3Friend);
            
            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.Friends, act2Gamertag);
            Assert.AreEqual(0, actualProfile.Friends.Count, "Friends returned with Profile when not expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that games are returned when other user has Everyone for PlayedGames setting")]
        public void GetProfileYouView_EveryoneActIsNotFriend_VerifyGames()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account otherAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary otherScenarios = new RewardsTestScenarioLibrary(otherAcctEveryone);

            otherScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string otherGamertag = otherAcctEveryone.XblUser.Gamertag;
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentGames, otherGamertag);
            Assert.AreEqual<int>(1, actualProfile.RecentGames.Count, "Expected number of games not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that Friend's games are returned when Friend has FriendsOnly for PlayedGames setting")]
        public void GetProfileYouView_FriendsOnlyActIsFriend_VerifyGames()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctFriendsOnly);
            Account friendAcctFriendsOnly = AccountTransport.CreateAccount();

            // Set GamesPlayed to FriendsOnly and all others to Everyone
            AccountTransport.BlockAccount(friendAcctFriendsOnly, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.FriendsOnly,
                PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone);

            RewardsTestScenarioLibrary friendScenarios = new RewardsTestScenarioLibrary(friendAcctFriendsOnly);
            friendScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string friendGamertag = friendAcctFriendsOnly.XblUser.Gamertag;

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(myAcctFriendsOnly, friendAcctFriendsOnly);
            
            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentGames, friendGamertag);
            Assert.AreEqual<int>(1, actualProfile.RecentGames.Count, "Expected number of games not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that games are not returned when other non-friend account has FriendsOnly for PlayedGames setting")]
        public void GetProfileYouView_FriendsOnlyActIsNotFriend_VerifyGames()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account otherAcctFriendsOnly = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary otherScenarios = new RewardsTestScenarioLibrary(otherAcctFriendsOnly);
            
            // Set GamesPlayed to FriendsOnly and all others to Everyone
            AccountTransport.BlockAccount(otherAcctFriendsOnly, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.FriendsOnly,
                PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone);

            otherScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string otherGamertag = otherAcctFriendsOnly.XblUser.Gamertag;
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentGames, otherGamertag);
            Assert.AreEqual<int>(0, actualProfile.RecentGames.Count, "Expected number of games not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that Friend's games are returned when Friend has FriendsOnly for PlayedGames setting")]
        public void GetProfileYouView_BlockedActIsFriend_VerifyGames()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctFriendsOnly);
            Account friendAcctBlocked = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary friendScenarios = new RewardsTestScenarioLibrary(friendAcctBlocked);
            
            // Set GamesPlayed to Blocked and all others to Everyone
            AccountTransport.BlockAccount(friendAcctBlocked, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Blocked,
                PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone);

            friendScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string friendGamertag = friendAcctBlocked.XblUser.Gamertag;

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(myAcctFriendsOnly, friendAcctBlocked);
            
            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentGames, friendGamertag);
            Assert.AreEqual<int>(0, actualProfile.RecentGames.Count, "Expected number of games not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that achievements are returned when other user has Everyone for PlayedGames setting")]
        public void GetProfileYouView_EveryoneActIsNotFriend_VerifyAchievements()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account otherAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary otherScenarios = new RewardsTestScenarioLibrary(otherAcctEveryone);
            
            otherScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string otherGamertag = otherAcctEveryone.XblUser.Gamertag;
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentAchievements, otherGamertag);
            Assert.AreEqual<int>(1, actualProfile.RecentAchievements.Count, "Expected number of achievements not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that Friend's achievements are returned when Friend has FriendsOnly for PlayedGames setting")]
        public void GetProfileYouView_FriendsOnlyActIsFriend_VerifyAchievements()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctFriendsOnly);
            Account friendAcctFriendsOnly = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary friendScenarios = new RewardsTestScenarioLibrary(friendAcctFriendsOnly);
            
            // Set GamesPlayed to FriendsOnly and all others to Everyone
            AccountTransport.BlockAccount(friendAcctFriendsOnly, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.FriendsOnly,
                PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone);

            friendScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string friendGamertag = friendAcctFriendsOnly.XblUser.Gamertag;

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(myAcctFriendsOnly, friendAcctFriendsOnly);
            
            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentAchievements, friendGamertag);
            Assert.AreEqual<int>(1, actualProfile.RecentAchievements.Count, "Expected number of achievements not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that achievements are not returned when other non-friend account has FriendsOnly for PlayedGames setting")]
        public void GetProfileYouView_FriendsOnlyActIsNotFriend_VerifyAchievements()
        {
            Account myAcctEveryone = AccountTransport.CreateAccount(PrivacyOption.Everyone);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctEveryone);
            Account otherAcctFriendsOnly = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary otherScenarios = new RewardsTestScenarioLibrary(otherAcctFriendsOnly);
            
            // Set GamesPlayed to FriendsOnly and all others to Everyone
            AccountTransport.BlockAccount(otherAcctFriendsOnly, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.FriendsOnly,
                PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone);

            otherScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string otherGamertag = otherAcctFriendsOnly.XblUser.Gamertag;
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentAchievements, otherGamertag);
            Assert.AreEqual<int>(0, actualProfile.RecentAchievements.Count, "Expected number of achievements not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check that Friend's achievements are NOT returned when Friend has Blocked Privacy setting for PlayedGames")]
        public void GetProfileYouView_BlockedActIsFriend_VerifyAchievements()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctFriendsOnly);
            Account friendAcctBlocked = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary friendScenarios = new RewardsTestScenarioLibrary(friendAcctBlocked);
            
            // Set GamesPlayed to Blocked and all others to Everyone
            AccountTransport.BlockAccount(friendAcctBlocked, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Blocked,
                PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone, PrivacyOption.Everyone);

            friendScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string friendGamertag = friendAcctBlocked.XblUser.Gamertag;

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(myAcctFriendsOnly, friendAcctBlocked);
            
            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, SectionFlags.RecentAchievements, friendGamertag);
            Assert.AreEqual<int>(0, actualProfile.RecentAchievements.Count, "Expected number of achievements not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check Profile with Blocked privacy, Games with Blocked privacy, and FriendsList with FriendsOnly privacy")]
        public void GetProfileYouView_IsFriend_ProfileBlocked_GamesBlocked_FriendsListFriendsOnly_VerifyProfile()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctFriendsOnly);
            Profile myProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(myAcctFriendsOnly);
            
            Account friendAcct = AccountTransport.CreateAccount();
            AccountTransport.WriteProfileSettings(friendAcct, "Friend_Blkd_Motto", "Friend_Blkd_Name", "Friend_Blkd_Loc", "Friend_Blkd_Bio", null, null, MyViewAcct.GamerProfile.MaleAvatar, GamerZone.Pro, CountryId.US);
            RewardsTestScenarioLibrary friendScenarios = new RewardsTestScenarioLibrary(friendAcct);
            // Set Profile to Blocked, GamesPlayed to Blocked, and FriendsList to FriendsOnly and all others to Everyone
            AccountTransport.BlockAccount(friendAcct, PrivacyOption.Everyone, PrivacyOption.Blocked, PrivacyOption.Blocked,
                PrivacyOption.Everyone, PrivacyOption.FriendsOnly, PrivacyOption.Everyone, PrivacyOption.Everyone);

            friendScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string friendGamertag = friendAcct.XblUser.Gamertag;

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(myAcctFriendsOnly, friendAcct);
            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friendAcct);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);
            RewardsTestScenarioLibrary.UpdateProfileFriends(expectedProfile, myProfile);
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections, friendGamertag);
            Assert.AreEqual<int>(1, actualProfile.Friends.Count, "Expected number of friends not returned");
            
            Assert.AreEqual<int>(0, actualProfile.RecentGames.Count, "Expected number of achievements not returned");
            Assert.AreEqual<int>(0, actualProfile.RecentAchievements.Count, "Expected number of achievements not returned");
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Test for You View to check Profile with FriendsOnly privacy, Games with Everyone privacy, and FriendsList with Blocked privacy")]
        public void GetProfileYouView_IsNotFriend_ProfileFriendsOnly_GamesEveryone_FriendsListBlocked_VerifyProfile()
        {
            Account myAcctFriendsOnly = AccountTransport.CreateAccount(PrivacyOption.FriendsOnly);
            RewardsTestScenarioLibrary myScenariosLocal = new RewardsTestScenarioLibrary(myAcctFriendsOnly);
            
            Account friendAcct = AccountTransport.CreateAccount();
            AccountTransport.WriteProfileSettings(friendAcct, "Friend_FO_Motto", "Friend_FO_Name", "Friend_FO_Loc", "Friend_FO_Bio", null, null, MyViewAcct.GamerProfile.MaleAvatar, GamerZone.Pro, CountryId.US);
            RewardsTestScenarioLibrary friendScenarios = new RewardsTestScenarioLibrary(friendAcct);
            // Set Profile to FriendsOnly, GamesPlayed to Everyone, and FriendsList to Blocked and all others to Everyone
            AccountTransport.BlockAccount(friendAcct, PrivacyOption.Everyone, PrivacyOption.FriendsOnly, PrivacyOption.Everyone,
                PrivacyOption.Everyone, PrivacyOption.Blocked, PrivacyOption.Everyone, PrivacyOption.Everyone);

            friendScenarios.AddGamesAndAchievements(achGame, Guid.Empty.ToString(), us_locale);
            string friendGamertag = friendAcct.XblUser.Gamertag;

            Profile expectedProfile = RewardsTestScenarioLibrary.ConvertAccountToProfile(friendAcct);
            RewardsTestScenarioLibrary.UpdateExpectedProfileToRestrictedView(expectedProfile);
            RewardsTestUtil.Wait(30);

            Profile actualProfile = myScenariosLocal.GetProfileYouView(us_locale, allStatsGame.PlatformId, Constants.AllProfileSections, friendGamertag);
            Assert.AreEqual<int>(0, actualProfile.Friends.Count, "Expected number of friends not returned");
            
            Assert.AreEqual<int>(1, actualProfile.RecentGames.Count, "Expected number of games not returned");
            Assert.AreEqual<int>(1, actualProfile.RecentAchievements.Count, "Expected number of achievements not returned");
            RewardsTestScenarioLibrary.VerifyXboxLiveProperties(expectedProfile, actualProfile);
        }
        #endregion  Privacy Tests
        #region URI Tests
        [TestMethod]
        [TestProperty("BugId", "9829")]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify format is a a required variable")]
        public void GetProfile_URI_NoFormat()
        {
            string query = "/profile?sectionflags={sectionflags}&gamertag={gamertag}";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sectionFlags is an optional variable which defaults to 0")]
        public void GetProfile_URI_NoSectionFlags()
        {
            string query = "/profile?format={format}&gamertag={gamertag}";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
            Assert.IsTrue(ret.Body.ToLower().Contains("<sectionflags>0</sectionflags>"), "sectionFlags does not default to 0");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify gamertag is an optional variable")]
        public void GetProfile_URI_NoGamerTag()
        {
            string query = "/profile?format={format}&sectionflags={sectionflags}";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }
        
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior with no querystring")]
        public void GetProfile_URI_NoQuery()
        {
            // See bug #3058 for the reason "404 Not Found" is okay here
            string query = "/profile";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior with no resource")]
        public void GetProfile_URI_NoResource()
        {
            // See bug #3058 for the reason "404 Not Found" is okay here
            string query = "/";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior with only '?' on querystring")]
        public void GetProfile_URI_QuestionMark()
        {
            // See bug #3058 for the reason "404 Not Found" is okay here
            string query = "/profile?";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify error when sectionflags is empty")]
        public void GetProfile_Query_EmptySectionFlags()
        {
            string query = "/profile?format={format}&sectionflags=";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.InternalServerError, ret.StatusCode, "Http response status code is not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify error when gamertag is empty")]
        public void GetProfile_Query_EmptyGamerTag()
        {
            string query = "/profile?format={format}&sectionflags={sectionflags}&gamertag=";
            Response ret = ExecuteCustomProfileQuery(query);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");
        }
        #endregion URI Tests
        #region Bad Data Tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Get profile using an invalid locale")]
        public void GetProfile_InvalidLocale()
        {
            Response response = testScenarios.GetProfileMyView("foo", allStatsGame.PlatformId.ToString(), Constants.AllProfileSections);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response status code is not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when it is an unsupported locale")]
        public void GetProfile_Locale_Unsupported()
        {
            Response response = testScenarios.GetProfileMyView(Constants.UnsupportedLocale, allStatsGame.PlatformId.ToString(), Constants.AllProfileSections);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetProfile_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetProfileMyView(emptyLocale, allStatsGame.PlatformId.ToString(), Constants.AllProfileSections);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Get profile using sectionFlags = 0")]
        public void GetProfile_ZeroSectionFlags()
        {
            Response results = testScenarios.GetProfileMyView(us_locale, allStatsGame.PlatformId.ToString(), (SectionFlags)0);
            Assert.AreEqual(HttpStatusCode.OK, results.StatusCode, "Http response status code is not as expected");
        }
        #endregion Bad Data Tests
        #region Supporting Functions

        /// <summary>
        /// Perform a web service call to GetProfile without the full URI. To be used for testing whether variables are optional or required
        /// </summary>
        /// <param name="query">The query to use for the webservice call. A full well-formed query: /profile?format={format}&amp;sectionflags={sectionflags}&amp;gamertag={gamertag}</param>
        private Response ExecuteCustomProfileQuery(string query)
        {
            //Full query: /profile?format={format}&sectionflags={sectionflags}&gamertag={gamertag}
            query = query.Replace("{format}", "xml");
            query = query.Replace("{sectionflags}", ((uint)Constants.AllProfileSections).ToString());
            query = query.Replace("{gamertag}", MyViewAcct.XblUser.Gamertag);

            return testScenarios.ExecuteCustomQuery("GetProfile", query, null, allStatsGame);
        }
        #endregion Supporting Functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\MessageTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Threading;
using Gds.Contracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class MessageTests
    {
        private readonly string us_locale = "en-US";
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;


        #region Get Message Summaries Tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return zero messages when a user has none")]
        public void GetMessageSummaries_ZeroMessages()
        {
            RewardsTestScenarioLibrary newUser = new RewardsTestScenarioLibrary(true);

            MessageSummariesResponse originalMessages = newUser.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(0, originalMessages.Summaries.Count, "Summaries count should be zero because it is a new user.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return message summaries in proper order")]
        public void GetMessageSummaries_CorrectOrder()
        {
            Account newAcct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newUser = new RewardsTestScenarioLibrary(newAcct);

            RewardsTestScenarioLibrary newUser2 = new RewardsTestScenarioLibrary(true);

            Thread.Sleep(60000);

            int msgCount = 5;

            for (int i = 0; i < msgCount; i++)
            {
                SendMessageRequest smr = newUser2.CreateSendMessageRequest(newAcct.XblUser.Gamertag, "Message " + i);
                XmlHelper xmlHelp = new XmlHelper();

                Response resp = newUser2.SendMessage(xmlHelp.SerializeObjectToXmlString(smr), LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());
                Thread.Sleep(2000);
            }

            Thread.Sleep(60000);

            MessageSummariesResponse originalMessages = newUser.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            DateTime prevTime = new DateTime(9999, 1, 1);
            //Verify message summaries in correct order (most recent is first)
            foreach (MessageSummary summary in originalMessages.Summaries)
            {
                Assert.IsTrue(summary.SentTime < prevTime, "Messages not in proper order.");
                prevTime = summary.SentTime;
            }

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we null hashcode doesn't negatively affect the call")]
        public void GetMessageSummaries_NullHashCode()
        {
            MessageSummariesResponse originalMessages = testScenarios.GetMessageSummaries("", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.IsNotNull(originalMessages, "Returned message summary response should not be null.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GetMessageSummaries_Locale_Unsupported()
        {
            Response response = testScenarios.GetMessageSummaries(null, LiveApp.GameId.ToString(), Constants.UnsupportedLocale, LiveApp.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetMessageSummaries_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetMessageSummaries(null, LiveApp.GameId.ToString(), emptyLocale, LiveApp.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify proper user gamerpic url is returned")]
        public void GetMessageSummaries_SenderGamerPicUrl()
        {
            testScenarios.GetValidMessageId();
            MessageSummariesResponse originalMessages = testScenarios.GetMessageSummaries("", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, originalMessages.Summaries[0].SenderGamertag);

            Assert.AreEqual(profile.ProfileProperties[Leet.UserGameData.DataContracts.ProfileProperty.GamerPicUrl].ToString(), originalMessages.Summaries[0].SenderGamerPicUrl, "SenderGamerPicUrl not set in message summary.");
        }

        #endregion

        #region Get Message Details Tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify getting message details for a message also sets the message to read")]
        public void GetMessageDetails_MarkMessageAsRead()
        {
            uint messageId = testScenarios.GetValidUnreadMessageId();
            MessageDetails messageDetails = testScenarios.GetMessageDetails(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            MessageSummariesResponse messsageSummaries = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            MessageSummary myMessageSummary = null;
            foreach (MessageSummary sum in messsageSummaries.Summaries)
            {
                if (sum.MessageId == messageId)
                {
                    myMessageSummary = sum;
                    break;
                }
            }

            Assert.IsTrue(myMessageSummary.HasBeenRead, "Message is not marked as Read after getting the message details for the message.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 500 with a null message id")]
        public void GetMessageDetails_NullMessageId()
        {
            Response response = testScenarios.GetMessageDetails("", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "500 not returned when a null message id is passed in.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 500 with a non-numeric message id")]
        public void GetMessageDetails_NonNumericMessageId()
        {
            Response response = testScenarios.GetMessageDetails("NaN", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "500 not returned when a non-numeric message id is passed in.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 200 and an empty message details object (messageid = 0) when the message id is invalid")]
        public void GetMessageDetails_InvalidMessageId()
        {
            MessageDetails msgDetails = testScenarios.GetMessageDetails(uint.MaxValue, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual((uint)0, msgDetails.MessageId, "Message Id should be 0 when we send in an invalid message id.");
            Assert.IsTrue(string.IsNullOrEmpty(msgDetails.MessageBody), "Message body should be empty with an invalid message id.");
            Assert.IsTrue(string.IsNullOrEmpty(msgDetails.SenderGamerTag), "Sender gamertag should be empty with an invalid message id.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return an empty message details object (messageid = 0) when the message id is valid but not for the current user")]
        public void GetMessageDetails_OtherUsersMessageId()
        {
            uint user1MsgId = testScenarios.GetValidMessageId();

            RewardsTestScenarioLibrary user2Lib = new RewardsTestScenarioLibrary(true);
            MessageDetails msgDetails = user2Lib.GetMessageDetails(user1MsgId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual((uint)0, msgDetails.MessageId, "Message Id should be 0 when we send in an invalid message id.");
            Assert.IsTrue(string.IsNullOrEmpty(msgDetails.MessageBody), "Message body should be empty with an invalid message id.");
            Assert.IsTrue(string.IsNullOrEmpty(msgDetails.SenderGamerTag), "Sender gamertag should be empty with an invalid message id.");
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message with special characters in the message text")]
        public void GetMessageDetails_SpecialCharsMessageText()
        {
            new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password).SetupUserForMessaging();
            testScenarios.SetupUserForMessaging();

            string messageText = TestHelper.GetRandomString(10) + "!@€#%&^u*()~s{}¨h'[]:`x»-|<>?¡ÅÉ$ÞÝÚÍÓ=;Ø¤\"\\¥£ÐßÁÆŒÇ_+Ñµ¿";

            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage should have succeeded.");
            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            uint messageId = 0;
            bool result = friendTransport.VerifyMessageExistsPoll(messageText, out messageId);

            Assert.IsTrue(result, "Message was not found.");

            MessageDetails msgDetails = friendTransport.GetMessageDetails(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(messageText, msgDetails.MessageBody, "Special Characters do not display properly in GetMessageDetails.");
            
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GetMessageDetails_Locale_Unsupported()
        {
            testScenarios.CheckForMessagesForBVTs(AuthenticationTransport.PrimaryUser.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();

            Response response = testScenarios.GetMessageDetails(messageId.ToString(), LiveApp.GameId.ToString(), Constants.UnsupportedLocale, LiveApp.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetMessageDetails_Locale_None()
        {
            string emptyLocale = string.Empty;
            testScenarios.CheckForMessagesForBVTs(AuthenticationTransport.PrimaryUser.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();

            Response response = testScenarios.GetMessageDetails(messageId.ToString(), LiveApp.GameId.ToString(), emptyLocale, LiveApp.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        #endregion

        #region Send Message Tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify you can send a message to one user and that user can get it")]
        public void SendMessage_OneUser_Self()
        {
            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");

            bool result = testScenarios.VerifyMessageExistsPoll(messageText);

            Assert.IsTrue(result, "Message was not found.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify you can send a message to two users and that user can get it")]
        public void SendMessage_TwoUsers()
        {
            TestUser recipient1 = AuthenticationTransport.PrimaryUser.Friends[1];
            TestUser recipient2 = AuthenticationTransport.PrimaryUser.Friends[2];

            new RewardsTestScenarioLibrary(recipient1.Username, recipient1.Password).SetupUserForMessaging();
            new RewardsTestScenarioLibrary(recipient2.Username, recipient2.Password).SetupUserForMessaging();
            testScenarios.SetupUserForMessaging();

            string messageText = TestHelper.GetRandomString(20);
            List<string> recipients = new List<string>() { recipient1.Gamertag, recipient2.Gamertag };
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(recipients, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");

            //Check to make sure user 1 got it
            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(recipient1.Username, recipient1.Password);
            bool result = friendTransport.VerifyMessageExistsPoll(messageText);

            Assert.IsTrue(result, "User 1 did not get message.");

            //Check to make sure user 2 got it
            friendTransport = new RewardsTestScenarioLibrary(recipient2.Username, recipient2.Password);
            result = friendTransport.VerifyMessageExistsPoll(messageText);

            Assert.IsTrue(result, "User 2 did not get message.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending to 100 recipients returns 200")]
        public void SendMessage_Recipients_100()
        {
            testScenarios.SetupUserForMessaging();
            List<string> recipients = new List<string>();

            //create 100 valid accounts to send a message to
            for (int i = 0; i < 100; i++)
            {
                Account newAcct = AccountTransport.CreateAccount();
                recipients.Add(newAcct.XblUser.Gamertag);
            }

            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(recipients, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending to 101 recipients returns 400 Bad Request error")]
        public void SendMessage_Recipients_101()
        {
            testScenarios.SetupUserForMessaging();
            List<string> recipients = new List<string>();

            //create 100 valid accounts to send a message to
            for (int i = 0; i < 101; i++)
            {
                Account newAcct = AccountTransport.CreateAccount();
                recipients.Add(newAcct.XblUser.Gamertag);
            }

            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(recipients, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling SendMessage should have failed with 400 Bad Request bug# 6848");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message of length 250 works")]
        public void SendMessage_MessageLength_250()
        {

            new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password).SetupUserForMessaging();
            testScenarios.SetupUserForMessaging();

            string messageText = TestHelper.GetRandomString(10) + new string('a', 240);
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");

            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            bool result = friendTransport.VerifyMessageExistsPoll(messageText);
            
            Assert.IsTrue(result, "Message was not found.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message of length 251 doesn't work")]
        public void SendMessage_MessageLength_251()
        {

            new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password).SetupUserForMessaging();
            testScenarios.SetupUserForMessaging();

            string messageText = TestHelper.GetRandomString(10) + new string('a', 241);
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling SendMessage should fail with 400 Bad Request for message length > 250 chars. bug# 6848");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message with no recipients returns 400")]
        public void SendMessage_NoRecipients()
        {
            testScenarios.SetupUserForMessaging();

            string messageText = "wont work";
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(new List<string>(), messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling SendMessage should fail with 400 Bad Request for call with no recipients. bug# 6853");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message to an invalid gamertag returns 400")]
        public void SendMessage_InvalidGamertag()
        {
            testScenarios.SetupUserForMessaging();

            string messageText = "wont work";
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest("Inv@l!dCh@r$", messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling SendMessage should fail with 400 Bad Request for call with no valid recipients. bug# 6853");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message to an unused gamertag returns 400")]
        public void SendMessage_UnusedGamertag()
        {
            testScenarios.SetupUserForMessaging();

            string messageText = "wont work";
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest("UnusedGt12345", messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling SendMessage should fail with 400 Bad Request for call with no valid recipients. bug# 6853");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message with empty message text")]
        public void SendMessage_EmptyMessageText()
        {
            testScenarios.SetupUserForMessaging();

            string messageText = "";
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling SendMessage should fail with 400 Bad Request for call with an empty message text. bug# 6853");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message with special characters in the message text")]
        public void SendMessage_SpecialCharsMessageText()
        {
            new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password).SetupUserForMessaging();
            testScenarios.SetupUserForMessaging();

            string messageText = "!@€#%^u*()~s{}¨h'[]:`x»-|<>?¡ÅÉ$ÞÝÚÍÓ=;Ø¤\"\\¥£ÐßÁÆŒÇ_+Ñµ¿";

            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage should have succeeded.");
            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            bool result = friendTransport.VerifyMessageExistsPoll(messageText);

            Assert.IsTrue(result, "Message was not found.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify sending message to one valid and one invalid gamertag successfully sends the message to the valid one and ignores the invalid one")]
        public void SendMessage_OneValidOneInvalidGamertag()
        {
            new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password).SetupUserForMessaging();
            testScenarios.SetupUserForMessaging();

            string messageText = TestHelper.GetRandomString(10);
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(new List<string>{AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, "Inv@l!dGT"}, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");

            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            bool result = friendTransport.VerifyMessageExistsPoll(messageText);

            Assert.IsTrue(result, "Message was not found.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void SendMessage_Locale_Unsupported()
        {
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, TestHelper.GetRandomString(20));
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void SendMessage_Locale_None()
        {
            string emptyLocale = string.Empty;
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, TestHelper.GetRandomString(20));
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, emptyLocale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }
        #endregion

        #region Delete Message Tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 500 with a null message id")]
        public void DeleteMessage_NullMessageId()
        {
            Response response = testScenarios.DeleteMessage("", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "500 not returned when a null message id is passed in.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 500 with a non-numeric message id")]
        public void DeleteMessage_NonNumericMessageId()
        {
            Response response = testScenarios.DeleteMessage("NaN", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "500 not returned when a non-numeric message id is passed in.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 200 with a invalid message id")]
        public void DeleteMessage_InvalidMessageId()
        {
            Response response = testScenarios.DeleteMessage(uint.MaxValue.ToString(), LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "200 not returned when an invalid message id is passed in bug #7191.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify user a is not able to delete a message in user b's inbox")]
        public void DeleteMessage_OtherUsersMessageId()
        {
            uint messageId = testScenarios.GetValidMessageId();

            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);
            Response response = friendTransport.DeleteMessage(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling Delete Message failed for deleting another user's message (when it should return 200)");

            MessageDetails message = testScenarios.GetMessageDetails(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(messageId, message.MessageId, "Message was deleted when it should not have been.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void DeleteMessage_Locale_Unsupported()
        {
            testScenarios.CheckForMessagesForBVTs(AuthenticationTransport.PrimaryUser.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessage(messageId, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void DeleteMessage_Locale_None()
        {
            string emptyLocale = string.Empty;
            testScenarios.CheckForMessagesForBVTs(AuthenticationTransport.PrimaryUser.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessage(messageId, LiveApp.GameId, emptyLocale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        #endregion

        #region Delete Message and Block Tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 500 with a null message id")]
        public void DeleteMessageAndBlockGamertag_NullMessageId()
        {
            Response response = testScenarios.DeleteMessageAndBlockGamertag("", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual( HttpStatusCode.InternalServerError, response.StatusCode, "500 not returned when a null message id is passed in.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 500 with a non-numeric message id")]
        public void DeleteMessageAndBlockGamertag_NonNumericMessageId()
        {
            Response response = testScenarios.DeleteMessageAndBlockGamertag("NaN", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "500 not returned when a non-numeric message id is passed in.");
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we return a 200 with a invalid message id")]
        public void DeleteMessageAndBlockGamertag_InvalidMessageId()
        {
            Response response = testScenarios.DeleteMessageAndBlockGamertag(uint.MaxValue.ToString(), LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "200 not returned when an invalid message id is passed in bug #7191. ");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify user a is not able to delete a message in user b's inbox")]
        public void DeleteMessageAndBlockGamertag_OtherUsersMessageId()
        {
            uint messageId = testScenarios.GetValidMessageId();

            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);
            Response response = friendTransport.DeleteMessageAndBlockGamertag(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling Delete and Block Message failed for deleting another user's message (when it should return 200)");

            MessageDetails message = testScenarios.GetMessageDetails(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(messageId, message.MessageId, "Message was deleted when it should not have been.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if you block and already blocked user you get a 200")]
        public void DeleteMessageAndBlockGamertag_BlockAlreadyBlockedUser()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            //send message to PrimaryUser from newUser and get messageId of that message
            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = lib.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, messageText);
            Response sendResponse = lib.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            MessageSummariesResponse originalMessages = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            uint messageId = 0;

            testScenarios.VerifyMessageExistsPoll(messageText, out messageId);

            Thread.Sleep(60000);

            //send 2nd message to PrimaryUser from newUser and get messageId of that message
            string messageText2 = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest2 = lib.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, messageText2);
            Response sendResponse2 = lib.SendMessage(sendMessageRequest2, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            MessageSummariesResponse originalMessages2 = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            uint messageId2 = 0;

            testScenarios.VerifyMessageExistsPoll(messageText2, out messageId2);

            Assert.IsTrue(messageId != 0, "Sent Message 2 was not found");

            //Delete Message and Block User
            Response deleteAndBlockResponse = testScenarios.DeleteMessageAndBlockGamertag(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, deleteAndBlockResponse.StatusCode, "Calling DeleteMessageAndBlockGamertag failed");

            //Verify message is deleted
            MessageSummariesResponse messagesAfterDelete = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            foreach (MessageSummary currMessage in messagesAfterDelete.Summaries)
            {
                if (currMessage.MessageId == messageId)
                {
                    Assert.Fail("Message was not deleted.");
                }
            }

            //Delete and Block 2nd message from user
            Response deleteAndBlockResponse2 = testScenarios.DeleteMessageAndBlockGamertag(messageId2, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, deleteAndBlockResponse.StatusCode, "Calling DeleteMessageAndBlockGamertag failed for message 2");

            //Verify user is blocked by sending a third message and verifying the user does not get it
            string messageText3 = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest3 = lib.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, messageText3);
            Response sendResponse3 = lib.SendMessage(sendMessageRequest3, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            bool result = testScenarios.VerifyMessageExistsPoll(messageText3);

            Assert.IsFalse(result, "Blocked User was allowed to send a message.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void DeleteMessageAndBlockGamertag_Locale_Unsupported()
        {
            testScenarios.CheckForMessagesForBVTs(AuthenticationTransport.PrimaryUser.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessageAndBlockGamertag(messageId, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void DeleteMessageAndBlockGamertag_Locale_None()
        {
            string emptyLocale = string.Empty;
            testScenarios.CheckForMessagesForBVTs(AuthenticationTransport.PrimaryUser.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessageAndBlockGamertag(messageId, LiveApp.GameId, emptyLocale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\PostGameResult.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using live.common;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class PostGameResult
    {
        private static RewardsTransport rewardsTransport = new RewardsTransport();
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
        private static TestGame testGame = TestGameUtility.AllStatsGame;
        private XmlHelper xhelp = new XmlHelper();
        private readonly string us_locale = "en-US";

        #region "GameID tests"

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify failure on titleId mismatch in the token")]
        public void PostGameResult_Verify_TitleId()
        {
            TestGame tgFlowerz = TestGameUtility.GetTestGame("Flowerz");
            TestGame tgHexic = TestGameUtility.GetTestGame("HexicRush");

            GameResult gameResult = testScenarios.CreateGameResult(tgFlowerz, 1, 1, null, null);
            string requestBody = RewardsTestUtil.GetPostGameResultString(gameResult);
            string fullUri = rewardsTransport.RewardsService_fullUri + "/GameResult";

            rewardsTransport.UpdateStsToken(tgHexic.GameId, tgHexic.PlatformId);
            Response ret = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, tgFlowerz.PlatformId.ToString(), rewardsTransport.CurrentStsTicket, string.Empty);

            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "PostGameResult failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify failure on platformId mismatch in the token")]
        public void PostGameResult_Verify_PlatformId()
        {
            TestGame tgFlowerz = TestGameUtility.GetTestGame("Flowerz");
            string wrongPlatformId = "4";

            GameResult gameResult = testScenarios.CreateGameResult(tgFlowerz, 1, 1, null, null);
            string requestBody = RewardsTestUtil.GetPostGameResultString(gameResult);
            string fullUri = rewardsTransport.RewardsService_fullUri + "/GameResult";

            rewardsTransport.UpdateStsToken(tgFlowerz.GameId, tgFlowerz.PlatformId);
            Response ret = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, wrongPlatformId, rewardsTransport.CurrentStsTicket, string.Empty);

            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "PostGameResult failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a valid gameID")]
        public void PostGameResult_GameID_Valid()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        #endregion "GameID tests"
        #region "GameResult tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an null game result and verify the status code")]
        public void PostGameResult_NullGameResult()
        {
            GameResult gr = null;
            Response result = testScenarios.PostGameResult(gr, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match - #8849");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a blank game result and verify the LastPlayedDateTime was updated")]
        public void PostGameResult_GameResult_PostBlankGameResultAndVerifyLastPlayedDateTimeUpdated()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for blank GameResult");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a new best score and verify the LastPlayedDateTime was updated")]
        public void PostGameResult_GameResult_PostBestScoreAndVerifyLastPlayedDateTimeUpdated()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));
            long score = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Score = score + 1;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for best score GameResult");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a new best time and verify the LastPlayedDateTime was updated")]
        public void PostGameResult_GameResult_PostBestTimeAndVerifyLastPlayedDateTimeUpdated()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));
            long time = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Time = time + 1;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for best time GameResult");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result for a newly created user")]
        public void PostGameResult_ForNewUser()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(acct);
            Response result = scenarios.PostGameResultWithDefaultStats(testGame, us_locale);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a valid GameResultID")]
        public void PostGameResult_GameResultID_Valid()
        {
            Guid grId = Guid.NewGuid();
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, grId, DateTime.Now, 1, 1, "Win", string.Empty, testGame.Variant);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an existing GameResultId")]
        public void PostGameResult_GameResultID_AlreadyExistingGameResultId()
        {
            Guid grId = Guid.NewGuid();
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, grId, DateTime.Now, 1, 1, "Win", string.Empty, testGame.Variant);
            testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Response response = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, response.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with no GameResultID")]
        public void PostGameResult_GameResultID_Empty()
        {
            GameResult gameResult = testScenarios.CreateGameResult_MalformedResult("gameResultId", testGame.GameId, Guid.Empty, DateTime.Now, 1, 1, "Win", string.Empty, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        #endregion "GameResult tests"
        #region "Locale tests"

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an empty locale")]
        public void PostGameResult_Locale_EmptyString()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, string.Empty, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a null locale")]
        public void PostGameResult_Locale_Null()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, null, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: ma-MA")]
        public void PostGameResult_Locale_Invalid()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "ma-MA", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result for a user from a non-US locale")]
        public void PostGameResult_Locale_ForeignUser()
        {
            Account ukUser = AccountTransport.CreateAccount(CountryId.GB);
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(ukUser);
            Response result = scenarios.PostGameResultWithDefaultStats(testGame, "en-GB");
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a valid but unsupported locale")]
        public void PostGameResult_Locale_ValidButUnsupported()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "sv-SE", testGame.PlatformId, testGame.GameId); //Swedish locale
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with unusual case: en-Us")]
        public void PostGameResult_Locale_Malformed1()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "en-Us", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with unusual case: En-uS")]
        public void PostGameResult_Locale_Malformed2()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "En-uS", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with unusual case: EN-US")]
        public void PostGameResult_Locale_Malformed3()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "EN-US", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: long string")]
        public void PostGameResult_Locale_LongString()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "I want to be a locale", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: short string")]
        public void PostGameResult_Locale_ShortString()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "sh", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: special characters")]
        public void PostGameResult_Locale_SpecialCharacters()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "#$@#$@%", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: use master \n drop database LIVEN_NPDB")]
        public void PostGameResult_Locale_SQLInjection1()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use master \n drop database LIVEN_NPDB", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string:use LIVEN_NPDB \n delete table t_servers ")]
        public void PostGameResult_Locale_SQLInjection2()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use LIVEN_NPDB \n delete table t_servers", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: use master \n drop database RewardsDB")]
        public void PostGameResult_Locale_SQLInjection3()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use master \n drop database RewardsDB", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: use master \n drop database RewardsQueueDb")]
        public void PostGameResult_Locale_SQLInjection4()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use master \n drop database RewardsQueueDb", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: 1=1")]
        public void PostGameResult_Locale_SQLInjection5()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "1=1", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: =locale")]
        public void PostGameResult_Locale_SQLInjection6()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "=locale", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        #endregion "Locale tests"
        #region Platform tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with platform = Mobile")]
        public void PostGameResult_Platform_Mobile()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with platform = WebGames")]
        public void PostGameResult_Platform_WebGames()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, PlatformType.WebGames, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }
        #endregion "Platform tests"

        #region "Time tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a negative time should return a BadRequest")]
        public void PostGameResult_Time_NegativeTime()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, -1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with zero time")]
        public void PostGameResult_Time_ZeroTime()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 0, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a random time")]
        public void PostGameResult_Time_RandomTime()
        {
            Random rand = new Random();
            long time = (long)(rand.Next(1, int.MaxValue));
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, time, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with time = long.MaxValue")]
        public void PostGameResult_Time_MaxTime()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(acct);
            GameResult gr = scenarios.CreateGameResult(testGame, 1, long.MaxValue, null, null);
            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with no time (an optional parameter)")]
        public void PostGameResult_Time_NoTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, null, "blob", "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with nil score (an optional parameter)")]
        public void PostGameResult_Time_NilTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Time>1</Time>", @"<Time i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify graceful failure when time is long.MaxValue + 1")]
        public void PostGameResult_Time_OverBoundaryHighTime()
        {
            string newTime = RewardsTestUtil.GetMaxLongPlusOne();

            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gr);
            gameResultString = gameResultString.Replace("<Time>1</Time>", "<Time>" + newTime + "</Time>");

            Response ret = testScenarios.PostGameResult(gameResultString, us_locale, testGame.PlatformId.ToString(), testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Expected BadRequest for a time of {0}", newTime);
        }

        #endregion "Time tests"
        #region "Score tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a negative score")]
        public void PostGameResult_Score_NegativeScore()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, -1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a zero score")]
        public void PostGameResult_Score_ZeroScore()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a random score")]
        public void PostGameResult_Score_RandomScore()
        {
            Random rand = new Random();
            long score = (long)(rand.Next(int.MinValue, int.MaxValue));
            GameResult gr = testScenarios.CreateGameResult(testGame, score, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a score = long.MaxValue")]
        public void PostGameResult_Score_MaxScore()
        {
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(true);

            GameResult gr = scenarios.CreateGameResult(testGame, long.MaxValue, 1, null, null);
            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with no score (an optional parameter)")]
        public void PostGameResult_Score_NoScore()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, null, 1, "blob", "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with nil score (an optional parameter)")]
        public void PostGameResult_Score_NilScore()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Score>1</Score>", @"<Score i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with negative score and time")]
        public void PostGameResult_Score_NegativeScoreAndTime()
        {
            TestGame tg = TestGameUtility.BestScoreTimeGame;
            GameResult gr = testScenarios.CreateGameResult(tg, -11, -12, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            
            Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with zero score and time")]
        public void PostGameResult_Score_ZeroScoreAndTime()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 0, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with No score and time")]
        public void PostGameResult_Score_NoScoreAndTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, null, null, "blob", "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Post a game result with No score, time or outcome")]
        public void PostGameResult_Score_NoScoreAndTimeAndOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, null, null, "blob", null);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with nil score and time")]
        public void PostGameResult_Score_NilScoreAndTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Score>1</Score>", @"<Score i:nil=""true"" />");
            gameResultString = gameResultString.Replace("<Time>1</Time>", @"<Time i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with nil score, time, and outcome and verify failure")]
        public void PostGameResult_Score_NilScoreAndTimeAndOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Score>1</Score>", @"<Score i:nil=""true"" />");
            gameResultString = gameResultString.Replace("<Time>1</Time>", @"<Time i:nil=""true"" />");
            gameResultString = gameResultString.Replace("<Outcome>Win</Outcome>", @"<Outcome i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a higher best score and verify the BestScore was updated")]
        public void PostGameResult_Score_UpdateBestScoreAndVerifyUpdated()
        {
            long score = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            LeaderboardResult result = testScenarios.PostHigherScoreAndRetrieveLeaderboard(testGame, us_locale, null, null, 1);
            long newscore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newscore, score + 1, "BestScore was not updated");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify graceful failure when score is long.MaxValue + 1")]
        public void PostGameResult_Score_OverBoundaryHighScore()
        {
            string newScore = RewardsTestUtil.GetMaxLongPlusOne();

            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gr);
            gameResultString = gameResultString.Replace("<Score>1</Score>", "<Score>" + newScore + "</Score>");

            Response ret = testScenarios.PostGameResult(gameResultString, us_locale, testGame.PlatformId.ToString(), testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Expected BadRequest for a score of {0}", newScore);
        }

        #endregion "Score tests"
        #region "Outcome tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a loss and score = long.MaxValue")]
        public void PostGameResult_Outcome_PostLossWithHighestScore()
        {
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(true);

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Loss";
            gr.Score = long.MaxValue;
            gr.Time = 1;

            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a win and score = long.MinValue")]
        public void PostGameResult_Outcome_PostWinWithLowestScore()
        {
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(true);

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Win";
            gr.Score = long.MinValue;
            gr.Time = 1;

            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a win and no score")]
        public void PostGameResult_Outcome_NoScoreGameResultWithWin()
        {
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(true);

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Win";
            gr.Time = 1;

            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result where outcome = Win")]
        public void PostGameResult_Outcome_Win()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result where outcome = Loss")]
        public void PostGameResult_Outcome_Loss()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Loss");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result where outcome = Tie")]
        public void PostGameResult_Outcome_Tie()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Tie");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result where outcome = None")]
        public void PostGameResult_Outcome_None()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "None");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result where outcome is an invalid string")]
        public void PostGameResult_Outcome_Invalid()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "ghuygwyg");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with no outcome (an optional parameter)")]
        public void PostGameResult_Outcome_NoOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Outcome>Win</Outcome>", "");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with nil outcome (an optional parameter)")]
        public void PostGameResult_Outcome_NilOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, null, "blob", 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }
        #endregion "Outcome tests"
        #region "Timestamp tests"
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with an empty timestamp")]
        public void PostGameResult_TimeStamp_Empty()
        {
            GameResult gameResult = testScenarios.CreateGameResult_MalformedResult("timestamp", testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", string.Empty, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }
        #endregion "Timestamp tests"
        #region "Blob tests"

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with no blob (an optional parameter)")]
        public void PostGameResult_Blob_NoBlob()
        {
            GameResult gameResult = testScenarios.CreateGameResult_MalformedResult("blob", testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", string.Empty, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with nil blob (an optional parameter)")]
        public void PostGameResult_Blob_NilBlob()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a blob at the maximum size limit")]
        public void PostGameResult_Blob_Limit()
        {
            int length = 10240;
            string blob = new string('?', length);
            byte[] blobArray = Encoding.UTF8.GetBytes(blob);
            Trace.TraceInformation("Blob size: {0}", blobArray.Length);

            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", blob, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with a blob over the maximum size limit")]
        public void PostGameResult_Blob_OverLimit()
        {
            int length = 10241;
            string blob = new string('?', length);
            byte[] blobArray = Encoding.UTF8.GetBytes(blob);
            Trace.TraceInformation("Blob size: {0}", blobArray.Length);

            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", blob, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        #endregion "Blob tests"
        #region Variant tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with no variant set")]
        public void PostGameResult_Variant_NoVariant()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Variant>0</Variant>", "");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }
        #endregion Variant tests
        #region Query tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Post a game result with no format on the query string")]
        public void PostGameResult_MalformedRequest_NoFormat()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 10, 10, null, null);
            string requestBody = RewardsTestUtil.GetPostGameResultString(gr);
            string query = "/GameResult";

            Response ret = testScenarios.ExecuteCustomQuery("PostGameResult", query, requestBody, testGame);
            Assert.AreEqual(HttpStatusCode.Accepted, ret.StatusCode, "PostGameResult failed - Http response status was not as expected");
        }
        #endregion Query tests
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\PresenceTests.cs ===
﻿using System.Net;
using System.Threading;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class PresenceTests
    {
        private static RewardsTransport rewardsTransport = new RewardsTransport();
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
        private readonly string us_locale = "en-US";
        private TestGame LiveAppTitle = TestGameUtility.LiveAppTitle;
        private uint LiveAppTitleID = 1297287404; //HACK: Live Mobile App will not be propped to TestNet/Dev
        private PresenceTester presenceTester = new PresenceTester();

        #region GetPresence tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Verify getting a friend's presence info using sectionFlags")]
        [Priority(2)]
        public void GetPresence_Friends_SectionFlags()
        {
            TestUser userFriend = AuthenticationTransport.PrimaryUser.Friends[0];
            RewardsTestScenarioLibrary lib_userFriend = new RewardsTestScenarioLibrary(userFriend.Username, userFriend.Password);

            // Post presence for friend
            Response result = lib_userFriend.PostPresence(us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("PostPresence failed - test cannot be completed.");
            }

            // set friend's privacy settings for OnlineStatus to everyone
            ProfileEx expectedProfile = lib_userFriend.CreateProfileWithPrivacySettings(null, null, null, PrivacySettings.Everyone, null, null, null);
            result = lib_userFriend.PostProfilePartner(expectedProfile, us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("HTTP status indicates a failure - Privacy Settings not updated");
            }

            // Get Presence
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.Friends, SectionFlags.PresenceInfo);
            int i = GetFriendIndex(profile, userFriend.Gamertag);
            Assert.IsNotNull(profile.Friends[i].PresenceInfo, "No presence info is set");
            Assert.AreEqual((uint)PresenceStatus.Offline, profile.Friends[i].PresenceInfo.OnlineState, "OnlineState is incorrect");
            Assert.AreEqual(LiveAppTitleID, profile.Friends[i].PresenceInfo.LastSeenTitleId, "LastSeenTitleId is incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Description("Verify getting a friend's presence info using a gamertag")]
        [Priority(2)]
        public void GetPresence_Friends_Gamertag()
        {
            TestUser userFriend = AuthenticationTransport.PrimaryUser.Friends[0];
            RewardsTestScenarioLibrary lib_userFriend = new RewardsTestScenarioLibrary(userFriend.Username, userFriend.Password);

            // Post presence for friend
            Response result = lib_userFriend.PostPresence(us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("PostPresence failed - test cannot be completed.");
            }

            // set friend's privacy settings for OnlineStatus to everyone
            ProfileEx expectedProfile = lib_userFriend.CreateProfileWithPrivacySettings(null, null, null, PrivacySettings.Everyone, null, null, null);
            result = lib_userFriend.PostProfilePartner(expectedProfile, us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("HTTP status indicates a failure - Privacy Settings not updated");
            }

            // Get Presence
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo, userFriend.Gamertag);
            Assert.IsNotNull(profile.PresenceInfo, "No presence info is set");
            Assert.AreEqual((uint)PresenceStatus.Offline, profile.PresenceInfo.OnlineState, "OnlineState is incorrect");
            Assert.AreEqual(LiveAppTitleID, profile.PresenceInfo.LastSeenTitleId, "LastSeenTitleId is incorrect");
        }
        #endregion GetPresence tests

        #region Presence Update tests
        #region Friend Operations
        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during AddFriend operation")]
        public void PresenceUpdate_AddFriendOperation()
        {
            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            // Grab a premade friend account
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[1];

            // Send friend request
            Response testResponse = presenceTester.PrimaryTestScenarioLibrary.AddFriend(friend.Gamertag, myGame.GameId, us_locale, myGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, testResponse.StatusCode, "Calling AddFriend failed.");
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "AddFriend");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during DeclineFriend operation")]
        public void PresenceUpdate_DeclineFriendRequest()
        {
            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");
            
            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            // Grab a real account & send a friend request
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[3];
            RewardsTestScenarioLibrary friendLib = new RewardsTestScenarioLibrary(friend.Username, friend.Password);

            friendLib.AddFriend(presenceTester.PrimaryGmrTag, LiveAppTitle.GameId, us_locale, LiveAppTitle.PlatformId);

            // Send a DeclineFriend request and verify presence
            Response testResponse = presenceTester.PrimaryTestScenarioLibrary.DeclineFriend(friend.Gamertag, myGame.GameId, us_locale, myGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, testResponse.StatusCode, "Calling DeclineFriend failed.");
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "DeclineFriend");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during AcceptFriendRequest operation")]
        public void PresenceUpdate_AcceptFriendRequest()
        {
            Response testResponse;

            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            // Get a friend account
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[2];
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(friend.Username, friend.Password);

            // Send a friend request to primary from friend account
            testResponse = newFriend.AddFriend(presenceTester.PrimaryGmrTag, LiveAppTitle.GameId, us_locale, LiveAppTitle.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, testResponse.StatusCode, "Calling AddFriend failed.");

            // Accept the request and verify presence
            testResponse = presenceTester.PrimaryTestScenarioLibrary.AcceptFriend(friend.Gamertag, myGame.GameId, us_locale, myGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, testResponse.StatusCode, "Calling AcceptFriend failed.");
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "AcceptFriend");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during RemoveFriend operation")]
        public void PresenceUpdate_RemoveFriend()
        {
            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            // Get a friend account
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[2];

            // Remove the friend and verify presence
            Response testResponse = presenceTester.PrimaryTestScenarioLibrary.RemoveFriend(friend.Gamertag, myGame.GameId, us_locale, myGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, testResponse.StatusCode, "Calling RemoveFriend failed.");
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "RemoveFriend");
        }

        #endregion
        #region Message operations
        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during GetMessageSummaries operation")]
        public void PresenceUpdate_GetMessageSummariesOperation()
        {
            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            presenceTester.PrimaryTestScenarioLibrary.GetMessageSummaries(myGame.GameId, us_locale, myGame.PlatformId);
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "GetMessageSummaries");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during GetMessageDetails operation")]
        public void PresenceUpdate_GetMessageDetailsOperation()
        {
            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            // send message to PrimaryUser from newUser
            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = presenceTester.SecondaryTestScenarioLibrary.CreateSendMessageRequest(presenceTester.PrimaryGmrTag, messageText);
            Response sendResponse = presenceTester.SecondaryTestScenarioLibrary.SendMessage(sendMessageRequest, LiveAppTitle.GameId, us_locale, LiveAppTitle.PlatformId);

            // Get the messageId
            uint messageId = 0;
            presenceTester.PrimaryTestScenarioLibrary.VerifyMessageExistsPoll(messageText, out messageId);
            Assert.IsFalse((messageId == 0), "Could not locate message");

            // Get message details & verify presence
            presenceTester.PrimaryTestScenarioLibrary.GetMessageDetails(messageId, myGame.GameId, us_locale, myGame.PlatformId);
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "GetMessageDetails");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during SendMessage operation")]
        public void PresenceUpdate_SendMessageOperation()
        {
            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            //send message from PrimaryUser and verify presence
            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = presenceTester.PrimaryTestScenarioLibrary.CreateSendMessageRequest(presenceTester.PrimaryGmrTag, messageText);
            Response sendResponse = presenceTester.PrimaryTestScenarioLibrary.SendMessage(sendMessageRequest, myGame.GameId, us_locale, myGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, sendResponse.StatusCode, "Error sending message");
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "SendMessage");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during DeleteMessage operation")]
        public void PresenceUpdate_DeleteMessageOperation()
        {
            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            //send message to PrimaryUser from SecondaryUser
            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = presenceTester.SecondaryTestScenarioLibrary.CreateSendMessageRequest(presenceTester.PrimaryGmrTag, messageText);
            Response sendResponse = presenceTester.SecondaryTestScenarioLibrary.SendMessage(sendMessageRequest, LiveAppTitle.GameId, us_locale, LiveAppTitle.PlatformId);

            // Get the messageId
            uint messageId = 0;
            presenceTester.PrimaryTestScenarioLibrary.VerifyMessageExistsPoll(messageText, out messageId);
            Assert.IsFalse((messageId == 0), "Could not locate message");

            // Delete the message, verify presence
            Response deleteResponse = presenceTester.PrimaryTestScenarioLibrary.DeleteMessage(messageId, myGame.GameId, us_locale, myGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, deleteResponse.StatusCode, "Error deleting message");
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "DeleteMessage");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("Verify presence gets updated during DeleteMessageAndBlockGamertag operation")]
        public void PresenceUpdate_DeleteMessageAndBlockOperation()
        {
            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");

            //send message to PrimaryUser from a friend
            string messageText = TestHelper.GetRandomString(20);
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[5];
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(friend.Username, friend.Password);
            SendMessageRequest sendMessageRequest = newFriend.CreateSendMessageRequest(presenceTester.PrimaryGmrTag, messageText);
            Response sendResponse = presenceTester.SecondaryTestScenarioLibrary.SendMessage(sendMessageRequest, LiveAppTitle.GameId, us_locale, LiveAppTitle.PlatformId);

            // Get the messageId
            uint messageId = 0;
            presenceTester.PrimaryTestScenarioLibrary.VerifyMessageExistsPoll(messageText, out messageId);
            Assert.IsFalse((messageId == 0), "Could not locate message");

            // Delete message & Block, verify presence
            Response deleteResponse = presenceTester.PrimaryTestScenarioLibrary.DeleteMessageAndBlockGamertag(messageId, myGame.GameId, us_locale, myGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, deleteResponse.StatusCode, "Error deleting message");
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "DeleteMessage");
        }
        #endregion
        #endregion

        #region PostPresence tests
        [TestMethod]
        [Owner("dahowell")]
        [Priority(1)]
        [Description("Verify posting a non Windows Live App title")]
        public void PostPresence_NonWindowsLiveApp()
        {
            // Reset presence
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));

            // Set presence
            TestGame myGame = TestGameUtility.GetTestGame("Flowerz");
            Response presenceResponse = presenceTester.PrimaryTestScenarioLibrary.PostPresence(us_locale, myGame.PlatformId.ToString(), myGame.GameId, AuthenticationMethod.PartnerToken);
            Assert.AreEqual(presenceResponse.StatusCode, HttpStatusCode.OK, "PostPresence failed - test cannot be completed.");

            // Verify presence
            presenceTester.VerifyPresence(myGame, PresenceStatus.Offline, "PostPresence");
        }

        [TestMethod]
        [Owner("dahowell")]
        [Priority(2)]
        [Description("PostPresence many times")]
        public void PostPresence_Many_Times()
        {
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("Flowerz"));
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("Backgammon"));
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("HexicRush"));
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("TicTacToe"));
            presenceTester.PostPresenceAndVerify(TestGameUtility.GetTestGame("SeaLegend"));
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void PostPresence_Locale_Unsupported()
        {
            Response response = testScenarios.PostPresence(Constants.UnsupportedLocale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void PostPresence_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.PostPresence(emptyLocale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        #endregion PostPresence tests

        #region Presence support functions

        private int GetFriendIndex(ProfileEx profileEx, string friendGamertag)
        {
            int i = 0;
            for (i = 0; i < profileEx.Friends.Count; i++)
            {
                if (profileEx.Friends[i].ProfileProperties[ProfileProperty.GamerTag].ToString() == friendGamertag)
                    return i;
            }
            Assert.Fail("Friend not found in results");
            return -1;
        }

        /// <summary>
        /// This helper class takes care of managing accounts necessary for verifying presence
        /// </summary>
        class PresenceTester
        {
            public TestUser PrimaryAcc { get; private set; }
            public TestUser SecondaryAcc { get; private set; }

            public RewardsTestScenarioLibrary PrimaryTestScenarioLibrary { get; private set; }
            public RewardsTestScenarioLibrary SecondaryTestScenarioLibrary { get; private set; }

            public string PrimaryGmrTag
            {
                get
                {
                    return PrimaryAcc.Gamertag;
                }
            }

            public string SecondaryGmrTag
            {
                get
                {
                    return SecondaryAcc.Gamertag;
                }
            }

            public PresenceTester()
            {
                // Use pre-existing Accounts                
                PrimaryAcc = AuthenticationTransport.PrimaryUser.Friends[0];
                SecondaryAcc = AuthenticationTransport.PrimaryUser;

                PrimaryTestScenarioLibrary = new RewardsTestScenarioLibrary(PrimaryAcc.Username, PrimaryAcc.Password);
                SecondaryTestScenarioLibrary = new RewardsTestScenarioLibrary(SecondaryAcc.Username, SecondaryAcc.Password);
                
                // Ensure accounts are setup for messaging
                PrimaryTestScenarioLibrary.SetupUserForMessaging();
                SecondaryTestScenarioLibrary.SetupUserForMessaging();
            }

            public void VerifyPresence(TestGame expectedGame, PresenceStatus expectedStatus, string lastOperation)
            {
                // Maximum poll count
                // This is currently set at 5 to allow tests to pass the majority of the time (TFS: 144682)
                int count = 5;
                bool presenceFound = false;
                uint lastSeenPresence = 0;

                // Poll until correct presence found or maximum count is reached
                while (count-- > 0 && !presenceFound)
                {
                    // Sleep to allow presence to propogate
                    Thread.Sleep(5000);

                    // Use secondary account to check the presence of the primary account
                    ProfileEx profile = SecondaryTestScenarioLibrary.GetProfilePartnerXml("en_us", SectionFlags.FriendsList);

                    // Loop through the friends list and grab the presence data            
                    foreach (Friend friend in profile.FriendList)
                    {
                        object friendName;
                        friend.ProfileEx.ProfileProperties.TryGetValue(ProfileProperty.GamerTag, out friendName);
                        if (this.PrimaryGmrTag.Equals(friendName as string))
                        {
                            if (expectedGame.GameId == (lastSeenPresence = friend.ProfileEx.PresenceInfo.LastSeenTitleId))
                            {
                                presenceFound = true;
                            }

                            break;
                        }
                    }
                }

                Assert.AreEqual(expectedGame.GameId, lastSeenPresence, "Presence incorrect after operation "+lastOperation);
            }

            public void PostPresenceAndVerify(TestGame presenceToPost)
            {
                // Post presence
                this.PrimaryTestScenarioLibrary.PostPresence("en_us", presenceToPost.PlatformId.ToString(), presenceToPost.GameId, AuthenticationMethod.PartnerToken);
               
                // Verify presence
                this.VerifyPresence(presenceToPost, PresenceStatus.Offline, "PostPresence");
            }
        }

        #endregion Presence support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GetLeaderboard.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using Gds.Contracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;
using Leet.Core.Platforms;
using live.protocol.Presence;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class GetLeaderboard
    {
        private RewardsTransport rewardsTransport;
        private RewardsTestScenarioLibrary testScenarios;
        private Random rand;
        private static TestGame testGame = TestGameUtility.GetFirstGameWithAllStats();
        private static TestGame testGameHighTime = TestGameUtility.BestTimeGame;
        private static TestGame testGameLowTime = TestGameUtility.BestTimeGameReverse;
        private static TestGame testGameLowScore = TestGameUtility.BestScoreGameReverse;
        private static List<TestGame> testGames = TestGameUtility.GetAllGamesWithAllStats();
        private static readonly string us_locale = "en-US";
        private static readonly string blob = "I can haz achievements";

        public GetLeaderboard()
        {
            rewardsTransport = new RewardsTransport();
            testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
            rand = new Random();
        }

        // This will run before the tests start running - ensure we have a leaderboard with at least one best score and one best time in it
        [ClassInitialize]
        public static void GuaranteeNonEmptyLeaderboard(TestContext testContext)
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary();
            LeaderboardResult res = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);
            if (res.TotalNumberOfRows == 0)
            {
                GameResult gr = lib.CreateGameResultWithDefaultStats(testGame, us_locale);
                lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            }

            res = lib.GetLeaderboardXml(testGameHighTime.GameId, testGameHighTime.Variant, "BestTime", 1, "W1", 100, us_locale, testGameHighTime.PlatformId);
            if (res.TotalNumberOfRows == 0)
            {
                GameResult gr = lib.CreateGameResultWithDefaultStats(testGameHighTime, us_locale);
                lib.PostGameResult(gr, us_locale, testGameHighTime.PlatformId, testGameHighTime.GameId);
            }
        }

        #region Acceptance
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void LeaderboardDuplicateStatistics()
        {
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            List<string> statistics = new List<string>();
            foreach (LeaderboardItem lbItem in currentResult.Leaderboard)
            {
                statistics.Clear();
                foreach (Entry statEntry in lbItem.Statistics)
                {
                    if (statistics.Contains(statEntry.Name))
                    {
                        Assert.Fail("Duplicate stat property found");
                    }
                    else
                    {
                        statistics.Add(statEntry.Name);
                    }
                }
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who hasn't played a game has no statistics on the BestScore leaderboard")]
        public void GetLeaderboard_BestScore_NoGamesPlayed()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);
            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);
            Assert.IsNull(result.Leaderboard);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who hasn't played a game has no statistics on the BestTime leaderboard")]
        public void GetLeaderboard_BestTime_NoGamesPlayed()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);
            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardXml(testGameHighTime.GameId, testGameHighTime.Variant, "BestTime", 1, "W1", 100, us_locale, testGameHighTime.PlatformId);
            Assert.IsNull(result.Leaderboard);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who hasn't played a game has no statistics on the Wins leaderboard")]
        public void GetLeaderboard_Wins_NoGamesPlayed()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);
            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "Wins", 1, "W1", 100, us_locale, testGame.PlatformId);
            Assert.IsNull(result.Leaderboard);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_BestHighScore()
        {
            string score = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");

            if (string.IsNullOrEmpty(score))
            {
                //Post a game result and retrieve score once
                GameResult gr = testScenarios.CreateGameResult(testGame, 100, 100, blob, "Win");
                testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                score = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");
            }

            long currentHighScore = long.Parse(score);

            LeaderboardResult result = testScenarios.PostHigherScoreAndRetrieveLeaderboard(testGame, us_locale, blob, "Win", 1);
            long newScore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(currentHighScore + 1, newScore, "Scores did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_BestLowScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);
            
            long highScore = 40;

            GameResult gr = lib.CreateGameResult(testGameLowScore, highScore, null, blob, "Win");
            lib.PostGameResult(gr, us_locale, testGameLowScore.PlatformId, testGameLowScore.GameId);

            long score = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual<long>(highScore, score);

            long newHighScore = 20;
            GameResult grNew = lib.CreateGameResult(testGameLowScore, newHighScore, null, blob, "Win");
            lib.PostGameResult(grNew, us_locale, testGameLowScore.PlatformId, testGameLowScore.GameId);

            long newScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual<long>(newHighScore, newScore);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        public void GetLeaderboard_CumulativeScore()
        {
            string score = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore");
            long cumulativeScore = long.Parse(score);

            GameResult gr = testScenarios.CreateGameResult(testGame, 10, null, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newScore = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore");
            long newCumulativeScore = long.Parse(newScore);

            Assert.AreEqual(cumulativeScore + 10, newCumulativeScore, "Cumulative scores did not match");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_BestHighTime()
        {
            string time = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime");

            if (string.IsNullOrEmpty(time))
            {
                //Post a game result and retrieve time once
                GameResult gr = testScenarios.CreateGameResult(testGame, 100, 100, blob, "Win");
                testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                time = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime");
            }

            long currentHighTime = long.Parse(time);

            LeaderboardResult result = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testGame, us_locale, blob, "Win", 1);
            long newTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(currentHighTime + 1, newTime, "Time did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        public void GetLeaderboard_BestLowTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            long lowTime = 40;
            
            GameResult gr = lib.CreateGameResult(testGameLowTime, null, lowTime, blob, "Win");
            lib.PostGameResult(gr, us_locale, testGameLowTime.PlatformId, testGameLowTime.GameId);

            long time = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual<long>(lowTime, time);

            long newLowerTime = 20;
            GameResult grNew = lib.CreateGameResult(testGameLowTime, null, newLowerTime, blob, "Win");
            lib.PostGameResult(grNew, us_locale, testGameLowTime.PlatformId, testGameLowTime.GameId);

            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual<long>(newLowerTime, actualTime);

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_CumulativeTime()
        {
            string time = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime");
            long cumulativeTime = long.Parse(time);

            GameResult gr = testScenarios.CreateGameResult(testGame, null, 1, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newTime = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime");
            long newCumulativeTime = long.Parse(newTime);

            Assert.AreEqual(cumulativeTime + 1, newCumulativeTime, "Cumulative times did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        public void GetLeaderboard_NumberOfGamesPlayed()
        {
            string gamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint gamesNo = uint.Parse(gamesPlayed);

            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newGamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint newGamesCount = uint.Parse(newGamesPlayed);

            Assert.AreEqual(gamesNo + 1, newGamesCount, "Number of games played did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify GamesPlayed is updated when a score of 0 is submitted")]
        public void GetLeaderboard_NoScore_NumberOfGamesPlayed()
        {
            string gamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint gamesNo = uint.Parse(gamesPlayed);

            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newGamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint newGamesCount = uint.Parse(newGamesPlayed);

            Assert.AreEqual(gamesNo + 1, newGamesCount, "Number of games played did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the average time played from the BestScore leaderboard")]
        public void GetLeaderboard_BestScore_AverageTimePlayed()
        {
            // Post a score to make sure we have a non-trivial time
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 123, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);

            long cumulativeTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.CumulativeTime));
            long gamesPlayed = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.GamesPlayed));

            long expectedAverageTime = (cumulativeTime / gamesPlayed);
            long actualAverageTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.AverageTime));

            Assert.AreEqual(expectedAverageTime, actualAverageTime, "Incorrect average time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the average time played from the BestTime leaderboard")]
        public void GetLeaderboard_BestTime_AverageTimePlayed()
        {
            // Post a score to make sure we have a non-trivial time
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 123, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "W1", 100, us_locale, testGame.PlatformId);

            long cumulativeTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.CumulativeTime));
            long gamesPlayed = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.GamesPlayed));

            long expectedAverageTime = (cumulativeTime / gamesPlayed);
            long actualAverageTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.AverageTime));

            Assert.AreEqual(expectedAverageTime, actualAverageTime, "Incorrect average time returned");
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the average score from the BestScore leaderboard")]
        public void GetLeaderboard_AverageScore()
        {
            // Post a score to make sure we have a non-trivial score
            GameResult gr = testScenarios.CreateGameResult(testGame, 123, 1, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);

            long cumulativeScore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.CumulativeScore));
            long gamesPlayed = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.GamesPlayed));

            long expectedAverageScore = (cumulativeScore / gamesPlayed);
            long actualAverageScore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.AverageScore));

            Assert.AreEqual(expectedAverageScore, actualAverageScore, "Incorrect average time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        public void GetLeaderboard_LastPlayedDateTime()
        {
            DateTime currentTime = DateTime.UtcNow;

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Time = 1;
            gr.Score = 1;
            gr.TimeStamp = currentTime;
            gr.Variant = testGame.Variant;

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            DateTime actualDateTime = new DateTime();
            string dateTimeString = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.LastPlayedDateTime);
            DateTime.TryParse(dateTimeString, null, DateTimeStyles.AdjustToUniversal, out actualDateTime);

            TimeSpan timeDifference = actualDateTime.Subtract(currentTime);

            Assert.IsTrue(timeDifference.Hours == 0, "More than 1 hour has passed");
            Assert.IsTrue(timeDifference.Minutes == 0, "More than 1 minute has passed");
            Assert.IsTrue(timeDifference.Seconds < 60, "More than 60 seconds have passed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Check the LastPlayedDateTime for a new user with one gameresult with no score")]
        public void GetLeaderboard_NewUser_LastPlayedDateTime()
        {
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(true);
            DateTime currentTime = DateTime.UtcNow;

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Time = 1;
            gr.TimeStamp = currentTime;
            gr.Variant = testGame.Variant;

            newScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = newScenarios.GetLeaderboardForBestTime(testGame, us_locale);
            Assert.IsTrue(result.TotalNumberOfRows > 0, "No statistics were returned");

            DateTime actualDateTime = new DateTime();
            string dateTimeString = newScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.LastPlayedDateTime);
            DateTime.TryParse(dateTimeString, null, DateTimeStyles.AdjustToUniversal, out actualDateTime);

            TimeSpan timeDifference = actualDateTime.Subtract(currentTime);

            Assert.IsTrue(timeDifference.Hours == 0, "More than 1 hour has passed");
            Assert.IsTrue(timeDifference.Minutes == 0, "More than 1 minute has passed");
            Assert.IsTrue(timeDifference.Seconds < 60, "More than 60 seconds have passed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        public void GetLeaderboard_NumberOfWins()
        {
            string numberWins = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Wins, "Wins");
            uint currentWins = uint.Parse(numberWins);

            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 0, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newWins = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Wins, "Wins");
            uint actualWins = uint.Parse(newWins);

            Assert.AreEqual(currentWins + 1, actualWins, "Number of wins did not match");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the number of losses on the BestScore leaderboard is incremented when a new loss is posted")]
        public void GetLeaderboard_BestScore_NumberOfLosses()
        {
            string numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestScore");
            if (string.IsNullOrEmpty(numberLoss))
            {
                GameResult gres = testScenarios.CreateGameResult(testGame, 0, 1, blob, "Loss");
                testScenarios.PostGameResult(gres, us_locale, testGame.PlatformId, testGame.GameId);
                numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestScore");

            }
            uint currentLoss = uint.Parse(numberLoss);
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, blob, "Loss");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newLosses = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestScore");
            uint newLoss = uint.Parse(newLosses);

            Assert.AreEqual(currentLoss + 1, newLoss, "Number of losses did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the number of losses on the BestTime leaderboard is incremented when a new loss is posted")]
        public void GetLeaderboard_BestTime_NumberOfLosses()
        {
            string numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestTime");
            if (string.IsNullOrEmpty(numberLoss))
            {
                GameResult gres = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
                testScenarios.PostGameResult(gres, us_locale, testGame.PlatformId, testGame.GameId);
                numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestTime");

            }
            uint currentLoss = uint.Parse(numberLoss);
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newLosses = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestTime");
            uint newLoss = uint.Parse(newLosses);

            Assert.AreEqual(currentLoss + 1, newLoss, "Number of losses did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the number of losses on the Wins leaderboard is incremented when a new loss is posted")]
        public void GetLeaderboard_Wins_NumberOfLosses()
        {
            string numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "Wins");
            if (string.IsNullOrEmpty(numberLoss))
            {
                GameResult gres = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
                testScenarios.PostGameResult(gres, us_locale, testGame.PlatformId, testGame.GameId);
                numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "Wins");

            }
            uint currentLoss = uint.Parse(numberLoss);
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newLosses = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "Wins");
            uint newLoss = uint.Parse(newLosses);

            Assert.AreEqual(currentLoss + 1, newLoss, "Number of losses did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a Wins leaderboard is returned when only a loss has been posted")]
        public void GetLeaderboard_Wins_LossesOnly()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            // post a loss
            lib.PostGameResultWithDefaultStatsAndLoss(testGame, us_locale);

            // get the Wins leaderboard
            LeaderboardResult result = lib.GetLeaderboardForWins(testGame, us_locale);

            Assert.IsTrue(result.TotalNumberOfRows > 0, "No results on returned on Wins leaderboard");
            Assert.AreEqual(0, result.Leaderboard[0].Value, "Number of Wins was not zero");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a Wins leaderboard is returned when only a tie has been posted")]
        public void GetLeaderboard_Wins_TiesOnly()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            // post a tie
            GameResult gr = lib.CreateGameResultWithDefaultStats(testGame, us_locale);
            gr.Outcome = "Tie";

            lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            // get the Wins leaderboard
            LeaderboardResult result = lib.GetLeaderboardForWins(testGame, us_locale);

            Assert.IsTrue(result.TotalNumberOfRows > 0, "No results on returned on Wins leaderboard - bug #8917");
            Assert.AreEqual(0, result.Leaderboard[0].Value, "Number of Wins was not zero");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify posting a tie increments the number of GamesPlayed")]
        public void GetLeaderboard_Outcome_Tie_IncrementGamesPlayed()
        {
            int gamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));
            
            //Post a tie
            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            gr.Outcome = "Tie";
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            int actualGamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));

            Assert.AreEqual(gamesPlayed + 1, actualGamesPlayed, "Games played was not incremented for a tie game");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify posting a 'none' outcome increments the number of GamesPlayed")]
        public void GetLeaderboard_Outcome_None_IncrementGamesPlayed()
        {
            int gamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));

            //Post a result with outcome = "None"
            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            gr.Outcome = "None";
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            int actualGamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));

            Assert.AreEqual(gamesPlayed + 1, actualGamesPlayed, "Games played was not incremented for a game with a 'None' outcome");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify correct leaderboard order for a ReverseWins game")]
        public void GetLeaderboard_Wins_VerifyReverseWinsOrder()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend1 = AccountTransport.CreateAccount();
            Account friend2 = AccountTransport.CreateAccount();

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend1);
            AccountTransport.MakeFriends(user, friend2);

            RewardsTestScenarioLibrary libUser = new RewardsTestScenarioLibrary(user);
            
            TestGame testGameReverseWins = TestGameUtility.WinsGameReverse;
            GameResult gr = libUser.CreateGameResultWithDefaultStats(testGameReverseWins, us_locale);

            // Post some wins - 3 for user, 1 for friend1, 2 for friend2
            libUser.PostGameResultWithDefaultStats(testGameReverseWins, us_locale);
            libUser.PostGameResultWithDefaultStats(testGameReverseWins, us_locale);
            libUser.PostGameResultWithDefaultStats(testGameReverseWins, us_locale);

            gr.GameResultId = Guid.NewGuid();
            libUser.PostGameResultForUser(gr, friend1, us_locale, testGameReverseWins.PlatformId, testGameReverseWins.GameId);
            gr.GameResultId = Guid.NewGuid();
            libUser.PostGameResultForUser(gr, friend2, us_locale, testGameReverseWins.PlatformId, testGameReverseWins.GameId);
            gr.GameResultId = Guid.NewGuid();
            libUser.PostGameResultForUser(gr, friend2, us_locale, testGameReverseWins.PlatformId, testGameReverseWins.GameId);

            // check rank
            LeaderboardResult result = libUser.GetLeaderboardForWins(testGameReverseWins, us_locale);
            
            Assert.AreEqual((uint)1, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend1.XblUser.Gamertag), "Rank for user {0} is incorrect", friend1.XblUser.Gamertag);
            Assert.AreEqual((uint)2, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend2.XblUser.Gamertag), "Rank for user {0} is incorrect", friend2.XblUser.Gamertag);
            Assert.AreEqual((uint)3, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, user.XblUser.Gamertag), "Rank for user {0} is incorrect", user.XblUser.Gamertag);
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_RankUp()
        {
            TestUser primaryUser = AuthenticationTransport.PrimaryUser;
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(primaryUser.Username, primaryUser.Password);

            //Get the best score
            long bestScore = 0;
            LeaderboardResult leaderboardResult = scenarios.GetLeaderboardForBestScore(testGame, us_locale);
            if (leaderboardResult.TotalNumberOfRows == 0)
            {
                GameResult gr = scenarios.CreateGameResult(testGame, 1, 1, "blob", "Win");
                scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                string score = scenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");
                bestScore = long.Parse(score);
            }
            else
            {
                bestScore = leaderboardResult.Leaderboard[0].Value;
            }

            //Post higher scores for each of the primary user's friends
            GameResult result = new GameResult();
            result.GameId = testGame.GameId;
            result.Outcome = "Win";
            result.Time = 100;
            result.TimeStamp = DateTime.Now;
            result.Variant = testGame.Variant;

            int i = primaryUser.Friends.Count;

            foreach (TestUser friend in primaryUser.Friends)
            {
                result.Score = bestScore + i;
                result.GameResultId = Guid.NewGuid();
                scenarios.PostGameResultForUser(result, friend.Username, friend.Password, us_locale, testGame.PlatformId, testGame.GameId);
                i--;
            }

            //Post highest score for primary user
            result.Score = bestScore + primaryUser.Friends.Count + 1;
            result.GameResultId = Guid.NewGuid();
            scenarios.PostGameResult(result, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult res = scenarios.GetLeaderboardForBestScore(testGame, us_locale);

            //Make sure leaderboard ranks are in order
            //Primary user should be above all
            Assert.AreEqual(res.Leaderboard[0].User.GamerTag, primaryUser.Gamertag, "Leaderboard ranked incorrectly");

            int j = 1;
            foreach (TestUser friend in primaryUser.Friends)
            {
                Assert.AreEqual(res.Leaderboard[j].User.GamerTag, friend.Gamertag, "Leaderboard ranked incorrectly");
                j++;
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify max leaderboard entries returned are restricted by total number of rows provided")]
        public void GetLeaderboard_NumRowsLessThanFriends_VerifyCorrectNumberReturned()
        {
            uint friendCount = (uint)AuthenticationTransport.PrimaryUser.Friends.Count;
            TestGame tg = TestGameUtility.AllStatsGame;
            long maxValue = AuthenticationTransport.PrimaryUser.Friends.Count + 1;
            testScenarios.PostGameResult(tg, us_locale, maxValue, maxValue, "Win", blob);

            //Post a score for each user, in case they dont have leaderboard entries
            foreach (var friend in AuthenticationTransport.PrimaryUser.Friends)
            {
                maxValue--;
                GameResult gr = testScenarios.CreateGameResult(tg, maxValue, maxValue, blob, "Win");
                gr.GameResultId = Guid.NewGuid();
                testScenarios.PostGameResultForUser(gr, friend.Username, friend.Password, us_locale, tg.PlatformId, tg.GameId);
            }

            LeaderboardResult result = testScenarios.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", 1, "W1", friendCount - 2, us_locale, tg.PlatformId);
            Assert.AreEqual<uint>(friendCount - 2, (uint)result.Leaderboard.Count, "Expected row count not returned");

            uint rows = result.TotalNumberOfRows - (friendCount - 2);
            result = testScenarios.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", friendCount-1, "W1", rows, us_locale, tg.PlatformId);
            Assert.AreEqual<uint>(rows, (uint)result.Leaderboard.Count, "Expected row count not returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a user doesn't show up on the leaderboard if he's outside of the rankStart/numRows window")]
        public void GetLeaderboard_UserHasLowestScore_NotOnLeaderboard()
        {
            Account user = AccountTransport.CreateAccount();
            string mainUserGT = user.XblUser.Gamertag;
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            List<Account> friends = AccountTransport.AddFriendsForAccount(user, 3);
            RewardsTestUtil.Wait(30);
            long maxScore = friends.Count * 2;
            Response resp = null;

            //Submit scores for all friends
            foreach (var fr in friends)
            {
                GameResult gr = lib.CreateGameResult(testGame, maxScore, 1, blob, "Win");
                resp = lib.PostGameResultForUser(gr, fr, us_locale, testGame.PlatformId, testGame.GameId);
                Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for friend failed: " + fr.XblUser.Gamertag);
                maxScore--;
            }

            //Submit lowest score for primary user
            GameResult grPrimary = lib.CreateGameResult(testGame, friends.Count, 1, blob, "Win");
            resp = lib.PostGameResult(grPrimary, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for user failed: " + mainUserGT);

            //Retrieve leaderboard with less rows than total friends
            uint rows = (uint)friends.Count - 1;
            LeaderboardResult result = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", rows, us_locale, testGame.PlatformId);

            //Make sure the caller is not within the leaderboard
            bool userPresent = false;
            foreach (var item in result.Leaderboard)
            {
                if (item.User.GamerTag.Equals(mainUserGT, StringComparison.OrdinalIgnoreCase))
                {
                    userPresent = true;
                    break;
                }
            }

            Assert.IsFalse(userPresent, "Caller's gamertag was returned within the leaderboard");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that current user in returned in the leaderboard when a start rank is not provided")]
        public void GetLeaderboard_NoRankSupplied_VerifyCurrentUserWithinLeaderboard()
        {
            Account user = AccountTransport.CreateAccount();
            string mainUserGT = user.XblUser.Gamertag;
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            List<Account> friends = AccountTransport.AddFriendsForAccount(user, 3);
            RewardsTestUtil.Wait(30);
            long maxScore = friends.Count * 2;
            Response resp = null;

            //Submit scores for all friends
            foreach (var fr in friends)
            {
                GameResult gr = lib.CreateGameResult(testGame, maxScore, 1, blob, "Win");
                resp = lib.PostGameResultForUser(gr, fr, us_locale, testGame.PlatformId, testGame.GameId);
                Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for friend failed: " + fr.XblUser.Gamertag);
                maxScore--;
            }

            //Submit lowest score for primary user
            GameResult grPrimary = lib.CreateGameResult(testGame, friends.Count, 1, blob, "Win");
            resp = lib.PostGameResult(grPrimary, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for user failed: " + mainUserGT);

            //Retrieve leaderboard with less rows than total friends and no rank
            LeaderboardResult result = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 0, "W1", (uint)friends.Count, us_locale, testGame.PlatformId);

            //Make sure the caller is within the leaderboard
            bool userPresent = false;
            foreach (var item in result.Leaderboard)
            {
                if (item.User.GamerTag.Equals(mainUserGT, StringComparison.OrdinalIgnoreCase))
                {
                    userPresent = true;
                    break;
                }
            }

            Assert.IsTrue(userPresent, "Caller's gamertag was not returned within the leaderboard where expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a friend who does not have a rank is not on the leaderboard")]
        public void GetLeaderboard_FriendHasNoRank()
        {
            Account user = AccountTransport.CreateAccount();
            RewardsTestUtil.Wait(30);
            
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            List<Account> friends = AccountTransport.AddFriendsForAccount(user, 2);

            // submit a score for primary user and for friend[0]
            GameResult grPrimary = lib.CreateGameResult(testGame, 5, 1, blob, "Win");
            Response resp = lib.PostGameResult(grPrimary, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for user failed: " + user.XblUser.Gamertag);

            GameResult gr = lib.CreateGameResult(testGame, 4, 1, blob, "Win");
            resp = lib.PostGameResultForUser(gr, friends[0], us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for friend failed: " + friends[0].XblUser.Gamertag);

            //Retrieve leaderboard
            LeaderboardResult result = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);

            // friend[1] should have no rank
            uint rank = RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, friends[1].XblUser.Gamertag);
            Assert.AreEqual((uint)0, rank, "Friend with no rank appeared in the leaderboard at rank {0}", rank);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_PendingFriendRequest_VerifyFriendDoesntAppearOnLeaderboard()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();
            
            RewardsTestScenarioLibrary userSc = new RewardsTestScenarioLibrary(user);
            userSc.PostGameResult(testGame, us_locale, 10, 10, "Win", blob);

            RewardsTestScenarioLibrary friendSc = new RewardsTestScenarioLibrary(friend);
            friendSc.PostGameResult(testGame, us_locale, 20, 20, "Win", blob);

            AccountTransport.SendFriendRequest(user, friend);
            RewardsTestUtil.Wait(10); 

            LeaderboardResult result = userSc.GetLeaderboardForBestScore(testGame, us_locale);

            bool containsFriend = false;

            foreach (var item in result.Leaderboard)
            {
                if (item.User.GamerTag.Equals(friend.XblUser.Gamertag,StringComparison.OrdinalIgnoreCase)) 
                    containsFriend = true;
            }

            Assert.IsFalse(containsFriend, "Friend with pending request exists in leaderboard results");
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_AddFriend_AFTER_SubmittingScore_VerifyFriendReturned()
        {
            Account acct = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();
            
            //Submit scores for user
            RewardsTestScenarioLibrary acctLib = new RewardsTestScenarioLibrary(acct);
            acctLib.PostGameResult(testGame, us_locale, 2, 2, "Win", blob);
            LeaderboardResult useLbd = acctLib.GetLeaderboardForBestScore(testGame, us_locale);
            Assert.AreEqual<uint>(1, useLbd.TotalNumberOfRows, "Multiple leaderboard rows returned for user with no friends");

            //Submit scores for friend
            RewardsTestScenarioLibrary friendLib = new RewardsTestScenarioLibrary(friend);
            friendLib.PostGameResult(testGame, us_locale, 1, 1, "Win", blob);
            friendLib.GetLeaderboardForBestScore(testGame, us_locale);

            RewardsTestUtil.Wait(30);

            //Make them friends and retrieve leaderboard
            AccountTransport.MakeFriends(acct, friend);

            RewardsTestUtil.Wait(30);

            LeaderboardResult result = acctLib.GetLeaderboardForBestScore(testGame, us_locale);
            
            //Verify leaderboard updated to reflect friend
            Assert.AreEqual<uint>(2, result.TotalNumberOfRows); 
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the behavior when a user views the leaderboard for a game he hasn't played, but his friend has")]
        public void GetLeaderboard_UserHasntPlayed_FriendHasPlayed()
        {
            Account user = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            Account friend = AccountTransport.CreateAccount();
            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend);

            //Post a game result for the friend
            GameResult gr = lib.CreateGameResultWithDefaultStats(testGame, us_locale);
            lib.PostGameResultForUser(gr, friend, us_locale, testGame.PlatformId, testGame.GameId);

            //Get the leaderboard
            LeaderboardResult result = lib.GetLeaderboardForBestScore(testGame, us_locale);

            Assert.AreEqual((uint)1, result.TotalNumberOfRows);
        }

        #endregion Acceptance
        #region High score tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the behavior when high score is long.MaxValue")]
        public void GetLeaderboard_HighScore_BoundaryHighScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            long newScore = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", null, newAccountScenarios); 

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(newScore, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a user's first submitted score is the high score")]
        public void GetLeaderboard_HighScore_FirstScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit new highscore
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", null, newAccountScenarios); 

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new high score replaces a lower score")]
        public void GetLeaderboard_HighScore_HighScore()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long currentScore = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestScore));

            //Submit new highscore
            long newScore = currentScore + 1;
            LeaderboardResult actualResult = testScenarios.PostHigherScoreAndRetrieveLeaderboard(testGame, us_locale, null, null, 1);

            //Get actual result
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify new lower score does't replace stored high score")]
        public void GetLeaderboard_HighScore_LowerScore()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long currentScore = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestScore));

            //Submit new highscore
            long newScore = currentScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", "My blob", testScenarios);
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            //Get actual result
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(currentScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new high score equal to the current high score doesn't change the high score")]
        public void GetLeaderboard_HighScore_EqualScore()
        {
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            PostGameResultAndVerify(testGame, us_locale, highScore, 1, "Win", "My blob", testScenarios);
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            Assert.IsNotNull(actualResult);
            Assert.IsTrue(actualResult.TotalNumberOfRows > 0);
            Assert.AreEqual(long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore)), highScore, "High score has changed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify submitting multiple lower scores does not change the high score")]
        public void GetLeaderboard_HighScore_MultipleLowScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = highScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new high scores the correct value is stored")]
        public void GetLeaderboard_HighScore_MultipleHighScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three higher user scores
            long newScore = highScore + 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasing scores the correct value is stored")]
        public void GetLeaderboard_HighScore_MultipleDecreasingScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            for (int i = 1; i <= 3; i++)
            {
                long newScore = highScore - i;
                PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            }

            //Get actual result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher scores the correct value is stored")]
        public void GetLeaderboard_HighScore_MultipleIncreasingScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = highScore;
            for (int i = 1; i <= 3; i++)
            {
                newScore = highScore + i;
                PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            }

            //Get actual result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting three scores of 0 the correct value is stored")]
        public void GetLeaderboard_HighScore_HighScore_MultipleZeroScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three user scores equal to zero
            long newScore = 0;
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);

            //Get actual result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who hasn't scored in a played game has 0 high score")]
        public void GetLeaderboard_HighScore_ZeroScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user score equal to zero
            PostGameResultAndVerify(testGame, us_locale, 0, 1, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who scored in a played game has but has 0 time has a high score")]
        public void GetLeaderboard_HighScore_ZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user score and zero time
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 high score")]
        public void GetLeaderboard_HighScore_ZeroScoreZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user score equal to zero
            PostGameResultAndVerify(testGame, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a game that uses negative scores handles high score correctly")]
        public void GetLeaderboard_HighScore_NegativeScore()
        {
            //Negative scores don’t invert the ordering logic. If a high score is better, the closer to zero you are the better score you have.
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a negative user score
            long newScore = rand.Next(1, 999) * -1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that getting a higher negative score (closer to 0) changes the high score")]
        public void GetLeaderboard_HighScore_NegativeHigherScore()
        {
            //Negative scores don’t invert the ordering logic. If a high score is better, the closer to zero you are the better score you have.
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a negative user score
            long firstScore = rand.Next(2, 999) * -1;
            PostGameResultAndVerify(testGame, us_locale, firstScore, 10, "Win", null, newAccountScenarios);

            //Submit a higher (closer to 0) high score
            long highScore = firstScore + 1;
            PostGameResultAndVerify(testGame, us_locale, highScore, 10, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that getting a lower negative score (farther from 0) does not change the high score")]
        public void GetLeaderboard_HighScore_NegativeLowerScore()
        {
            //Negative scores don’t invert the ordering logic. If a high score is better, the closer to zero you are the better score you have.
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a negative user score
            long firstScore = rand.Next(2, 999) * -1;
            PostGameResultAndVerify(testGame, us_locale, firstScore, 10, "Win", null, newAccountScenarios);

            //Submit a lower (farther from 0) high score
            long newScore = firstScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(firstScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same high score")]
        public void GetLeaderboard_HighScore_CallMultipleTimes()
        {
            //Retrieve statistics twice
            long firstScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long secondScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(firstScore, secondScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify high score is unchanged in game1 and updated in game2 when game2's high score is updated")]
        public void GetLeaderboard_HighScore_SameUserDifferentGame()
        {
            //Get two test games with Best High Score variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 4);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 4);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, testScenarios);

            long firstGameScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long secondGameScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Update the high score for game 2
            long newScore = secondGameScore + 1;
            PostGameResultAndVerify(game2, us_locale, newScore, 100, "Win", null, testScenarios);

            //Verify game 1 score is unchanged
            long firstGameNewScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(firstGameScore, firstGameNewScore, "Incorrect score returned for game 1");

            //Verify game 2 score is updated
            long secondGameNewScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(newScore, secondGameNewScore, "Incorrect score returned for game 2");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that when all users have the same score, the one who earned it first is ranked #1")]
        public void GetLeaderboard_AllUsersSameScore_ValidateBehavior()
        {
            TestUser tu = AuthenticationTransport.PrimaryUser;

            //Get the best score
            long score = 0;
            LeaderboardResult leaderboardResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            if (leaderboardResult.TotalNumberOfRows == 0)
            {
                testScenarios.PostGameResultWithDefaultStats(testGame, us_locale);
                score = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            }
            else
            {
                score = leaderboardResult.Leaderboard[0].Value;
            }

            //Post same highscore for each of the users
            GameResult gr = testScenarios.CreateGameResult(testGame, score, 1, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            foreach (var friend in tu.Friends)
            {
                gr.GameResultId = Guid.NewGuid();
                testScenarios.PostGameResultForUser(gr, friend.Username, friend.Password, us_locale, testGame.PlatformId, testGame.GameId);
            }

            //Get the resulting leaderboard
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            string topRankedUser = string.Empty;

            foreach (var item in result.Leaderboard)
            {
                if (item.Rank == 1)
                {
                    topRankedUser = item.User.GamerTag;
                    break;
                }
            }
            //The primary user scored it first, so they should be ranked #1
            Assert.AreEqual(topRankedUser, tu.Gamertag, "The wrong user was ranked first");

            gr.GameResultId = Guid.NewGuid();
            //Now post the same score for the primary user again so that he's no longer the first to earn it (now he's the last)
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            
            //Get the resulting leaderboard
            result = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            foreach (var item in result.Leaderboard)
            {
                if (item.Rank == 1)
                {
                    topRankedUser = item.User.GamerTag;
                    break;
                }
            }
            //The 0th friend user scored it first, so they should be ranked #1
            Assert.AreEqual(topRankedUser, tu.Friends[0].Gamertag, "The wrong user was ranked first");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_AllFriendsNoScore_VerifyLeaderboard()
        {
            Account acct = AccountTransport.CreateAccount();
            Account fr1 = AccountTransport.CreateAccount();
            Account fr2 = AccountTransport.CreateAccount();
            RewardsTestUtil.Wait(10);

            AccountTransport.MakeFriends(acct, fr1);
            AccountTransport.MakeFriends(acct, fr2);

            GameResult gr = testScenarios.CreateGameResult(testGame, null, 1, blob, "Win");

            testScenarios.PostGameResultForUser(gr, acct, us_locale, testGame.PlatformId, testGame.GameId);
            testScenarios.PostGameResultForUser(gr, fr1, us_locale, testGame.PlatformId, testGame.GameId);
            testScenarios.PostGameResultForUser(gr, fr2, us_locale, testGame.PlatformId, testGame.GameId);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            LeaderboardResult result = lib.GetLeaderboardForBestScore(testGame, us_locale);
            Assert.IsTrue(result.TotalNumberOfRows == 0, "No statistics were returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_ProgressiveHighScore_VerifyRankIncrement()
        {
            Account acct = AccountTransport.CreateAccount();
            Account fr1 = AccountTransport.CreateAccount();
            Account fr2 = AccountTransport.CreateAccount();
            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(acct, fr1);
            AccountTransport.MakeFriends(acct, fr2);
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            GameResult gr = lib.CreateGameResult(testGame, 10, 10, blob, "Win");
            lib.PostGameResultForUser(gr, acct, us_locale, testGame.PlatformId, testGame.GameId);
            gr = lib.CreateGameResult(testGame, 20, 10, blob, "Win");
            lib.PostGameResultForUser(gr, fr1, us_locale, testGame.PlatformId, testGame.GameId);
            gr = lib.CreateGameResult(testGame, 30, 10, blob, "Win");
            lib.PostGameResultForUser(gr, fr2, us_locale, testGame.PlatformId, testGame.GameId);

            //Get initial leaderboard state
            LeaderboardResult result = lib.GetLeaderboardForBestScore(testGame, us_locale);
            Dictionary<uint, long> rankScore = new Dictionary<uint, long>();

            //Get leaderboard rank and score in reverse order
            foreach (var item in result.Leaderboard.Reverse<LeaderboardItem>())
            {
                uint rank = item.Rank;
                long score = long.Parse(lib.FindLeaderboardEntry(item, "BestScore"));
                rankScore.Add(rank, score);
            }
            
            foreach (KeyValuePair<uint,long> kv in rankScore)
            {
                gr = lib.CreateGameResult(testGame, kv.Value + 1, 1, blob, "Win");
                lib.PostGameResultForUser(gr, acct, us_locale, testGame.PlatformId, testGame.GameId);
                LeaderboardResult lr = lib.GetLeaderboardForBestScore(testGame, us_locale);
                uint actualRank = RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(lr, acct.XblUser.Gamertag);

                Assert.AreEqual(kv.Key, actualRank, "Rank was not incremented for higher score submission"); 
            }
        }

        #endregion // High score tests
        #region Best high time tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the behavior when high time is long.MaxValue")]
        public void GetLeaderboard_HighTime_BoundaryHighTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            long newTime = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, 1, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(newTime, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a user's first submitted time is the high time")]
        public void GetLeaderboard_HighTime_FirstTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit new high time
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new high time replaces a lower time")]
        public void GetLeaderboard_HighTime_HighTime()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long currentTime = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestTime));

            //Submit new high time
            long newTime = currentTime + 1;
            LeaderboardResult actualResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testGameHighTime, us_locale, null, null, 1);

            //Get actual result
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify new lower time does't replace stored high time")]
        public void GetLeaderboard_HighTime_LowerTime()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long currentTime = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestTime));

            //Submit lower time
            long newTime = currentTime - 1;
            LeaderboardResult actualResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testGameHighTime, us_locale, null, null, -1);

            //Get actual result
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(currentTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new high time equal to the current high time doesn't change the high time")]
        public void GetLeaderboard_HighTime_EqualTime()
        {
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            PostGameResultAndVerify(testGameHighTime, us_locale, 1, highTime, "Win", "My blob", testScenarios);
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);

            //Get actual result
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));
            
            Assert.AreEqual(highTime, actualTime, "High time has changed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify submitting multiple lower times does not change the high time")]
        public void GetLeaderboard_HighTime_MultipleLowTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = highTime - 1;
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(highTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new high times the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleHighTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three higher user times
            long newTime = highTime + 1;
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasing times the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleDecreasingTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            
            //Ensure we're not going to try posting a negative time for the next part
            if (highTime < 3)
            {
                PostGameResultAndVerify(testGameHighTime, us_locale, 1, 3, "Win", null, testScenarios);
                highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            }

            //Submit three lower user times
            for (int i = 1; i <= 3; i++)
            {
                long newTime = highTime - i;
                PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            }

            //Get actual result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(highTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher times the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleIncreasingTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = highTime;
            for (int i = 1; i <= 3; i++)
            {
                newTime = highTime + i;
                PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            }

            //Get actual result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting three times of 0 the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleZeroTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three user times equal to zero
            long newTime = 0;
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);

            //Get actual result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(highTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who earned a time of 0 in a played game has 0 high time")]
        public void GetLeaderboard_HighTime_ZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a game time equal to zero
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(0, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who scored 0 in a played game has but has a positive time has a high time")]
        public void GetLeaderboard_HighTime_ZeroScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user time and zero score
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGame, us_locale, 0, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 high time")]
        public void GetLeaderboard_HighTime_ZeroScoreZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user score and time equal to zero
            PostGameResultAndVerify(TestGameUtility.BestScoreGame, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardForBestScore(TestGameUtility.BestScoreGame, us_locale);

            Assert.AreEqual<uint>(1, result.TotalNumberOfRows);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same high time")]
        public void GetLeaderboard_HighTime_CallMultipleTimes()
        {
            //Retrieve statistics twice
            long firstTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(firstTime, secondTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify high time is unchanged in game1 and updated in game2 when game2's high time is updated")]
        public void GetLeaderboard_HighTime_SameUserDifferentGame()
        {
            //Get two test games with Best High Time variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 6);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 6);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, testScenarios);

            long firstGameTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondGameTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Update the high time for game 2
            long newTime = secondGameTime + 1;
            PostGameResultAndVerify(game2, us_locale, 10, newTime, "Win", null, testScenarios);

            //Verify game 1 time is unchanged
            long firstGameNewTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(firstGameTime, firstGameNewTime, "Incorrect time returned for game 1");

            //Verify game 2 time is updated
            long secondGameNewTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(newTime, secondGameNewTime, "Incorrect time returned for game 2");
        }

        #endregion // High time tests
        #region Best low time tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a user's first submitted time is the low time")]
        public void GetLeaderboard_LowTime_FirstTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit new time
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new low time replaces a higher time")]
        public void GetLeaderboard_LowTime_LowTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            LeaderboardResult currentResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);
            long currentTime = long.Parse(lib.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestTime));

            //Submit new low time
            long newTime = currentTime - 1;
            LeaderboardResult actualResult = lib.PostHigherTimeAndRetrieveLeaderboard(testGameLowTime, us_locale, null, null, -1);

            //Get actual result
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify new higher time doesn't replace stored low time")]
        public void GetLeaderboard_LowTime_HigherTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Submit higher time
            long newTime = firstTime + 1;
            LeaderboardResult actualResult = lib.PostHigherTimeAndRetrieveLeaderboard(testGameLowTime, us_locale, null, null, 1);

            //Get actual result
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(firstTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new low time equal to the current low time doesn't change the low time")]
        public void GetLeaderboard_LowTime_EqualTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            PostGameResultAndVerify(testGameLowTime, us_locale, 1, lowTime, "Win", "My blob", lib);
            LeaderboardResult actualResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);

            //Get actual result
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(lowTime, actualTime, "Low time has changed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify submitting multiple higher times does not change the low time")]
        public void GetLeaderboard_LowTime_MultipleHighTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three higher user times
            long newTime = lowTime + 1;
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(lowTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new low times the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleLowTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = lowTime - 1;
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasingly lower times the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleDecreasingTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = lowTime;
            for (int i = 1; i <= 3; i++)
            {
                newTime = lowTime - i;
                PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            }

            //Get actual result
            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher times the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleIncreasingTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three higher user times
            long newTime = lowTime;
            for (int i = 1; i <= 3; i++)
            {
                newTime = lowTime + i;
                PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            }

            //Get actual result
            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(lowTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting three times of 0 the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleZeroTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three user times equal to zero
            long newTime = 0;
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);

            //Get actual result
            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who earned a time of 0 in a played game has 0 low time")]
        public void GetLeaderboard_LowTime_ZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a game time equal to zero
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(0, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a BestTime is returned for a user who scored 0 in a played game has but a positive time")]
        public void GetLeaderboard_LowTime_ZeroScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user time and zero score
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowTime, us_locale, 0, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 low time")]
        public void GetLeaderboard_LowTime_ZeroScoreZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user score and time equal to zero
            PostGameResultAndVerify(testGameLowTime, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(0, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same low time")]
        public void GetLeaderboard_LowTime_CallMultipleTimes()
        {
            //Submit low time
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, 1, "Win", null, testScenarios);

            //Retrieve statistics twice
            long firstTime = long.Parse(testScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondTime = long.Parse(testScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(firstTime, secondTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify low time is unchanged in game1 and updated in game2 when game2's low time is updated")]
        public void GetLeaderboard_LowTime_SameUserDifferentGame()
        {
            //Get two test games with Best Low Time variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 3);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 3);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, lib);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, lib);

            long firstGameTime = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondGameTime = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Update the low time for game 2
            long newTime = secondGameTime - 1;
            PostGameResultAndVerify(game2, us_locale, 10, newTime, "Win", null, lib);

            //Verify game 1 time is unchanged
            long firstGameNewTime = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(firstGameTime, firstGameNewTime, "Incorrect time returned for game 1");

            //Verify game 2 time is updated
            long secondGameNewTime = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(newTime, secondGameNewTime, "Incorrect time returned for game 2");
        }

        #endregion // Low time tests
        #region Best low score tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a user's first submitted score is the low score")]
        public void GetLeaderboard_LowScore_FirstScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit new score
            long newScore = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new low score replaces a higher score")]
        public void GetLeaderboard_LowScore_LowScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low Score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 1, "Win", null, lib);

            //Retrieve statistics first
            LeaderboardResult currentResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);
            long currentScore = long.Parse(lib.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestScore));

            //Submit new low score
            long newScore = currentScore - 1;
            LeaderboardResult actualResult = lib.PostHigherScoreAndRetrieveLeaderboard(testGameLowScore, us_locale, null, null, -1);

            //Get actual result
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify new higher score doesn't replace stored low score")]
        public void GetLeaderboard_LowScore_HigherScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Submit higher score
            long newScore = firstScore + 1;
            LeaderboardResult actualResult = lib.PostHigherScoreAndRetrieveLeaderboard(testGameLowScore, us_locale, null, null, 1);

            //Get actual result
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(firstScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new low score equal to the current low score doesn't change the low score")]
        public void GetLeaderboard_LowScore_EqualScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            PostGameResultAndVerify(testGameLowScore, us_locale, lowScore, 1, "Win", "My blob", lib);
            LeaderboardResult actualResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);

            //Get actual result
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(lowScore, actualScore, "Low score has changed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify submitting multiple higher scores does not change the low score")]
        public void GetLeaderboard_LowScore_MultipleHighScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three higher user scores
            long newScore = lowScore + 1;
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(lowScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new low scores the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleLowScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = lowScore - 1;
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasingly lower scores the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleDecreasingScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = lowScore;
            for (int i = 1; i <= 3; i++)
            {
                newScore = lowScore - i;
                PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            }

            //Get actual result
            long actualScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher scores the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleIncreasingScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three higher user scores
            long newScore = lowScore;
            for (int i = 1; i <= 3; i++)
            {
                newScore = lowScore + i;
                PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            }

            //Get actual result
            long actualScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(lowScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify after submitting three scores of 0 the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleZeroScore()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three user scores equal to zero
            long newScore = 0;
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);

            //Get actual result
            long actualScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who earned a score of 0 in a played game has 0 low score")]
        public void GetLeaderboard_LowScore_ZeroScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a game score equal to zero
            PostGameResultAndVerify(testGameLowScore, us_locale, 0, 1, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who has a positive score in a played game but a time of 0 has a low score")]
        public void GetLeaderboard_LowScore_ZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user score and 0 time
            long newScore = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 low score")]
        public void GetLeaderboard_LowScore_ZeroScoreZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit a user score and time equal to zero
            PostGameResultAndVerify(testGameLowScore, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same low score")]
        public void GetLeaderboard_LowScore_CallMultipleTimes()
        {
            //Submit low score
            PostGameResultAndVerify(testGameLowScore, us_locale, 1, 1, "Win", null, testScenarios);

            //Retrieve statistics twice
            long firstScore = long.Parse(testScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestTime, "BestScore"));
            long secondScore = long.Parse(testScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestTime, "BestScore"));

            Assert.AreEqual(firstScore, secondScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify low score is unchanged in game1 and updated in game2 when game2's low score is updated")]
        public void GetLeaderboard_LowScore_SameUserDifferentGame()
        {
            //Get two test games with Best Low Score variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 3);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 3);

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, lib);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, lib);

            long firstGameScore = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long secondGameScore = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Update the low score for game 2
            long newScore = secondGameScore - 1;
            PostGameResultAndVerify(game2, us_locale, newScore, 10, "Win", null, lib);

            //Verify game 1 score is unchanged
            long firstGameNewScore = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(firstGameScore, firstGameNewScore, "Incorrect score returned for game 1");

            //Verify game 2 score is updated
            long secondGameNewScore = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(newScore, secondGameNewScore, "Incorrect score returned for game 2");
        }

        #endregion // Low score tests
        #region Cumulative score tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the behavior when cumulative score is greater than long.MaxValue")]
        public void GetLeaderboard_CumulativeScore_OverBoundary()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Post game results
            long newScore = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", null, newAccountScenarios);
            PostGameResultAndVerify(testGame, us_locale, 1, 1, "Win", null, newAccountScenarios);

            //Retrieve stats
            Response response = newAccountScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore", "0", "Lifetime", "100", us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");

            string expectedScore = RewardsTestUtil.GetMaxLongPlusOne();
            string cumulativeScore = newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore");
            Assert.AreEqual(expectedScore, cumulativeScore, "Cumulative score was not as expected - bug #8610"); 
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative score is correct for a new user after posting the user's first score")]
        public void GetLeaderboard_CumulativeScore_FirstScore()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit the user's first score (a random number)
            int newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", newAccountScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            Assert.AreEqual(newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new random score is posted")]
        public void GetLeaderboard_CumulativeScore_NewScore()
        {
            long newScore = rand.Next(1, 99);

            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Submit the new score
            PostGameResultAndVerify(testGame, us_locale, newScore, 100, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new high score is posted")]
        public void GetLeaderboard_CumulativeScore_NewHigherScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = cumulativeScore + 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 100, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new lower score is posted")]
        public void GetLeaderboard_CumulativeScore_NewLowerScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = cumulativeScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new equal score is posted")]
        public void GetLeaderboard_CumulativeScore_NewEqualScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = cumulativeScore;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative score does not increase when a new zero score is posted")]
        public void GetLeaderboard_CumulativeScore_NewZeroScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = 0;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative score is unchanged in game1 and updated in game2 when game2's score is updated")]
        public void GetLeaderboard_CumulativeScore_SameUserDifferentGame()
        {
            //Get two test games with Best High Score variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 4);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 4);

            //Create some results
            PostGameResultAndVerify(game1, us_locale, 100, 100, null, null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, null, null, testScenarios);

            //Retrieve the current cumulative scores
            long game1CumulativeScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long game2CumulativeScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Update the cumulative score for game 2
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(game2, us_locale, newScore, 100, null, null, testScenarios);

            //Verify game 1 statistics
            long game1NewCumulativeScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            Assert.AreEqual(game1NewCumulativeScore, game1CumulativeScore, "Incorrect score returned for game 1");

            //Verify game 2 statistics
            long game2NewCumulativeScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            Assert.AreEqual(game2NewCumulativeScore, game2CumulativeScore + newScore, "Incorrect score returned for game 2");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative score is unchanged after subsequent GetLeaderboard calls")]
        public void GetLeaderboard_CumulativeScore_MultipleCalls()
        {
            //Retrieve statistics
            long firstScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long secondScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(firstScore, secondScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new random scores are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleScores()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post three new random scores
            long newScore1 = rand.Next(1, 99);
            long newScore2 = rand.Next(1, 99);
            long newScore3 = rand.Next(1, 99);
            PostGameResultAndVerify(testGame, us_locale, newScore1, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore2, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore3, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            long newCalculatedScore = currentScore + newScore1 + newScore2 + newScore3;
            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new scores of decreasing value are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleScoresDecreasingValue()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            PostGameResultAndVerify(testGame, us_locale, 3, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 2, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 1, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            long newCalculatedScore = currentScore + 6;
            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new scores of increasing value are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleScoresIncreasingValue()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 1, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 2, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 3, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long newCalculatedScore = currentScore + 6;

            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new scores of the same value are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleSameScores()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post three new scores
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long newCalculatedScore = currentScore + (newScore * 3);

            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        #endregion // Cumulative score tests
        #region Cumulative time tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the behavior when cumulative time is greater than long.MaxValue")]
        public void GetLeaderboard_CumulativeTime_OverBoundary()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Post game results
            long newTime = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, 1, newTime, "Win", null, newAccountScenarios);
            PostGameResultAndVerify(testGame, us_locale, 1, 1, "Win", null, newAccountScenarios);

            //Retrieve stats
            Response response = newAccountScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestTime", "0", "Lifetime", "100", us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch - bug #8610");

            string expectedTime = RewardsTestUtil.GetMaxLongPlusOne();
            string cumulativeTime = newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime");
            Assert.AreEqual(expectedTime, cumulativeTime, "Cumulative time was not as expected"); 
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a new user after posting the user's first time")]
        public void GetLeaderboard_CumulativeTime_FirstTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);

            //Submit the user's first time (a random number)
            int newTime = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", newAccountScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(newCumulativeTime, newTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting time")]
        public void GetLeaderboard_CumulativeTime_UpdateTime()
        {
            int newTime = rand.Next(1, 500);

            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting a higher time")]
        public void GetLeaderboard_CumulativeTime_HigherTime()
        {
            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long highTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long newTime = highTime + 1;

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting a lower time")]
        public void GetLeaderboard_CumulativeTime_LowerTime()
        {
            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long highTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long newTime = highTime - 1;

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting a time of 0")]
        public void GetLeaderboard_CumulativeTime_ZeroTime()
        {
            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, 0, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a new user after posting a time of 0")]
        public void GetLeaderboard_CumulativeTime_NewZeroTime()
        {
            //Create a new account
            RewardsTestScenarioLibrary newAccountScenarios = new RewardsTestScenarioLibrary(true);
            
            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, 0, "Win", "My blob", newAccountScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(0, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting an equal high score")]
        public void GetLeaderboard_CumulativeTime_HighScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newTime = rand.Next(1, 500);

            //Submit the user's time (a random number)
            PostGameResultAndVerify(testGame, us_locale, highScore, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting time")]
        public void GetLeaderboard_CumulativeTime_MultipleCalls()
        {
            //Retrieve statistics
            long firstCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long secondCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            Assert.AreEqual(firstCumulativeTime, secondCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative time is unchanged in game1 and updated in game2 when game2's time is updated")]
        public void GetLeaderboard_CumulativeTime_SameUserDifferentGame()
        {
            //Get two test games with Best High Time variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 6);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 6);

            //Create some results
            PostGameResultAndVerify(game1, us_locale, 100, 100, null, null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, null, null, testScenarios);

            //Retrieve the current cumulative scores
            long game1CumulativeTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long game2CumulativeTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Update the cumulative score for game 2
            long newTime = rand.Next(1, 999);
            PostGameResultAndVerify(game2, us_locale, 100, newTime, null, null, testScenarios);

            //Verify game 1 statistics
            long game1NewCumulativeTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(game1NewCumulativeTime, game1CumulativeTime, "Incorrect time returned for game 1");

            //Verify game 2 statistics
            long game2NewCumulativeTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(game2NewCumulativeTime, game2CumulativeTime + newTime, "Incorrect time returned for game 2");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative time is updated after three new times of increasing value are posted")]
        public void GetLeaderboard_CumulativeTime_MultipleTimesIncreasingValue()
        {
            //Retrieve statistics first
            long currentTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 10, 1, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 2, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);

            //Get new result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newCalculatedTime = currentTime + 6;

            Assert.AreEqual(newCalculatedTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative time is updated after three new times of decreasing value are posted")]
        public void GetLeaderboard_CumulativeTime_MultipleTimesDecreasingValue()
        {
            //Retrieve statistics first
            long currentTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 2, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 1, null, null, testScenarios);

            //Get new result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newCalculatedTime = currentTime + 6;

            Assert.AreEqual(newCalculatedTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify cumulative time is updated after three new times of equal value are posted")]
        public void GetLeaderboard_CumulativeTime_MultipleTimesEqualValue()
        {
            //Retrieve statistics first
            long currentTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);

            //Get new result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newCalculatedTime = currentTime + 9;

            Assert.AreEqual(newCalculatedTime, actualTime, "Incorrect time returned");
        }

        #endregion // Cumulative time tests
        #region Multiple variants

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_BestTime_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.AllStatsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestTime(TestGameUtility.AllStatsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_BestTimeOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.BestTimeGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestTime(TestGameUtility.BestTimeGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_BestScore_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.AllStatsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(TestGameUtility.AllStatsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_BestScoreOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.BestScoreGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(TestGameUtility.BestScoreGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_Wins_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.AllStatsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForWins(TestGameUtility.AllStatsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_WinsOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.WinsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForWins(TestGameUtility.WinsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_WinsReverseOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.WinsGameReverse, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForWins(TestGameUtility.WinsGameReverse, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_CallBestScoreForUndefinedGame_Verify()
        {
            TestGame tg = TestGameUtility.BestTimeGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "BestScore", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_CallBestTimeForUndefinedGame_Verify()
        {
            TestGame tg = TestGameUtility.BestScoreGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "BestTime", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_CallWinsForUndefinedGame_Verify()
        {
            TestGame tg = TestGameUtility.BestTimeGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "Wins", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_LossesLeaderboard_VerifyError()
        {
            TestGame tg = TestGameUtility.AllStatsGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "Losses", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_CumulativeScoreLeaderboard_VerifyError()
        {
            TestGame tg = TestGameUtility.AllStatsGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "CumulativeScore", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_BestScoreReverse_VerifyScoresAreInReverse()
        {
            //Submit a new game result in case there was no leaderboard information
            TestGame tg = TestGameUtility.BestScoreGameReverse;
            GameResult result = testScenarios.CreateGameResult(tg, 100, 100, blob, "Win");
            testScenarios.PostGameResult(result, us_locale, tg.PlatformId, testGame.GameId);
            long score = long.Parse(testScenarios.GetStatValue(tg, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            TestUser tu = AuthenticationTransport.PrimaryUser;
            //submit 1 more than the lowest score
            testScenarios.PostGameResult(tg, us_locale, score - 1, 1, "Win", blob);

            foreach (var item in tu.Friends)
            {
                testScenarios.PostGameResult(tg, us_locale, score, 1, "Win", blob);
                score++;
            }

            //Retrieve leaderboard and read all scores
            LeaderboardResult lr = testScenarios.GetLeaderboardForBestScore(tg, us_locale);
            ArrayList actualList = new ArrayList();
            foreach (var item in lr.Leaderboard)
            {
                long indScore = long.Parse(testScenarios.FindLeaderboardEntry(item, "BestScore"));
                actualList.Add(indScore);
            }

            ArrayList expectedList = actualList;
            actualList.Sort();

            Assert.AreEqual(expectedList, actualList, "Leaderboard items were not sorted");
                
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboards_BestTimeReverse_VerifyTimesAreInReverse()
        {
            //Submit a new game result in case there was no leaderboard information
            TestGame tg = TestGameUtility.BestTimeGameReverse;
            GameResult result = testScenarios.CreateGameResult(tg, 100, 100, blob, "Win");
            testScenarios.PostGameResult(result, us_locale, tg.PlatformId, testGame.GameId);
            long time = long.Parse(testScenarios.GetStatValue(tg, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            TestUser tu = AuthenticationTransport.PrimaryUser;
            //submit 1 more than the lowest score
            testScenarios.PostGameResult(tg, us_locale, 1, time-1, "Win", blob);

            foreach (var item in tu.Friends)
            {
                testScenarios.PostGameResult(tg, us_locale, 1, time, "Win", blob);
                time++;
            }

            //Retrieve leaderboard and read all scores
            LeaderboardResult lr = testScenarios.GetLeaderboardForBestTime(tg, us_locale);
            List<long> actualList = new List<long>();
            foreach (var item in lr.Leaderboard)
            {
                long indTime = long.Parse(testScenarios.FindLeaderboardEntry(item, "BestTime"));
                actualList.Add(indTime);
            }

            List<long> expectedList = actualList;
            actualList.Sort();

            Assert.AreEqual(expectedList, actualList, "Leaderboard items were not sorted");

        }

        #endregion Multiple variants
        #region Variable tests
        [TestMethod]
        [TestProperty("BugId", "9829")]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify format is a required variable")]
        public void GetLeaderboard_Variable_Format()
        {
            string query = "/leaderboard?gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify gameId is a required variable")]
        public void GetLeaderboard_Variable_GameId()
        {
            string query = "/leaderboard?format=xml&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify variant is an optional variable")]
        public void GetLeaderboard_Variable_Variant()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify property is a required variable")]
        public void GetLeaderboard_Variable_Property()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify bad request when property is not supplied")]
        public void GetLeaderboard_Empty_Property()
        {

            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), 
                                            string.Empty, "1", "W1", "100",us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify rankStart is an optional variable")]
        public void GetLeaderboard_Variable_RankStart()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify numRows is a required variable")]
        public void GetLeaderboard_Variable_NumRows()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify bad request when numRows is empty")]
        public void GetLeaderboard_Empty_NumRows()
        {
            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore",
                                                                           "1", "W1", string.Empty, us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify dataGroup is a required variable")]
        public void GetLeaderboard_Variable_DataGroup()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify dataGroup is not case sensitive using uppercase")]
        public void GetLeaderboard_Variable_DataGroup_Uppercase()
        {
            string datagroup = "Lifetime";
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup=" + datagroup + "&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify dataGroup is not case sensitive using lowercase")]
        public void GetLeaderboard_Variable_DataGroup_Lowercase()
        {
            string datagroup = "lifetime";
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup=" + datagroup + "&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify dataGroup is not case sensitive using uppercase and lowercase randomly")]
        public void GetLeaderboard_Variable_DataGroup_Wackycase()
        {
            string datagroup = "lIfEtIMe";
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup=" + datagroup + "&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify bad request when datagroup is missing")]
        public void GetLeaderboard_Empty_DataGroup()
        {
            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore",
                                                                           "1", string.Empty, "100", us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify socialGraph is a required variable")]
        public void GetLeaderboard_Variable_SocialGraph()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify bad request when social graph is missing")]
        public void GetLeaderboard_Empty_SocialGraph()
        {
            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore",
                                                                           "1", "W1", "100", us_locale, testGame.PlatformId.ToString(), string.Empty);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify setting socialGraph = 0 produces a bad request error")]
        public void GetLeaderboard_Variable_SocialGraph_0()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "0", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify setting socialGraph = 1 produces a bad request error")]
        public void GetLeaderboard_Variable_SocialGraph_1()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "1", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify setting socialGraph = 3 produces a bad request error")]
        public void GetLeaderboard_Variable_SocialGraph_3()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "3", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }
        #endregion
        #region Wins

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_SubmitLoss_VerifyWinsCount()
        {
            LeaderboardResult initialLeaderboard = new LeaderboardResult();
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, blob, "Loss");
            LeaderboardResult newLeaderboard = testScenarios.PostGameResultAndRetrieveLeaderboard(gr, "Wins", us_locale, testGame.PlatformId, out initialLeaderboard);

            uint expectedWins = uint.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.Wins));
            uint actualWins = uint.Parse(testScenarios.CheckLeaderboardResult(newLeaderboard, LeaderboardPropertyType.Wins));

            Assert.AreEqual(expectedWins, actualWins, "Submitting a loss in the result affected the number of Wins");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_NewUserWin_VerifyWinRegistered()
        {
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(true);

            GameResult gr = newScenarios.CreateGameResult(testGame, 1, 1, blob, "Win");
            newScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = newScenarios.GetLeaderboardForWins(testGame, us_locale);
            int actualWins = int.Parse(newScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.Wins));

            Assert.AreEqual(1, actualWins, "Win was not registered for user");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        public void GetLeaderboard_NewUserLoss_VerifyWinCountZero()
        {
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(true);

            GameResult gr = newScenarios.CreateGameResult(testGame, 1, 1, blob, "Loss");
            newScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = newScenarios.GetLeaderboardForWins(testGame, us_locale);

            uint actualWins = uint.Parse(newScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.Wins));

            Assert.AreEqual((uint)0, actualWins, "Win was not registered for user");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_NoWinsLossStat_VerifyWinsCountSame()
        {
            LeaderboardResult initialLeaderboard = new LeaderboardResult();
            
            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Score = 0;
            gr.Time = 0;
            gr.TimeStamp = DateTime.Now;
            gr.Variant = testGame.Variant;

            LeaderboardResult newLeaderboard = testScenarios.PostGameResultAndRetrieveLeaderboard(gr, "Wins", us_locale, testGame.PlatformId, out initialLeaderboard);

            uint expectedWins = uint.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.Wins));
            uint actualWins = uint.Parse(testScenarios.CheckLeaderboardResult(newLeaderboard, LeaderboardPropertyType.Wins));

            Assert.AreEqual(expectedWins, actualWins, "Submitting no 'win/loss' stat in the result affected the number of Wins");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a user who earns more wins than another rises in rank in the Wins leaderboard")]
        public void GetLeaderboard_RankUp_Wins()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();

            RewardsTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend);

            RewardsTestScenarioLibrary libUser = new RewardsTestScenarioLibrary(user);
            RewardsTestScenarioLibrary libFriend = new RewardsTestScenarioLibrary(friend);

            // Post some wins - 3 for user and 2 for friend
            libUser.PostGameResultWithDefaultStats(testGame, us_locale);
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);
            libUser.PostGameResultWithDefaultStats(testGame, us_locale);
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);
            libUser.PostGameResultWithDefaultStats(testGame, us_locale);

            // check rank
            LeaderboardResult result = libUser.GetLeaderboardForWins(testGame, us_locale);
            Assert.AreEqual((uint)1, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, user.XblUser.Gamertag), "Rank for user {0} is incorrect", user.XblUser.Gamertag);
            Assert.AreEqual((uint)2, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend.XblUser.Gamertag), "Rank for user {0} is incorrect", friend.XblUser.Gamertag);

            // Post some wins - 2 for friend
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);

            // check rank
            result = libUser.GetLeaderboardForWins(testGame, us_locale);
            Assert.AreEqual((uint)1, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend.XblUser.Gamertag), "Rank for user {0} is incorrect", user.XblUser.Gamertag);
            Assert.AreEqual((uint)2, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, user.XblUser.Gamertag), "Rank for user {0} is incorrect", friend.XblUser.Gamertag);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_GameWithWinsUndefined_VerifyError()
        {
            TestGame tg = TestGameUtility.BestScoreGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "Wins", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_AllFriendsZeroWins_VerifyBehavior()
        {
            Account acct = AccountTransport.CreateAccountWithFriends(3);

            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(acct);
            LeaderboardResult result = scenarios.GetLeaderboardForWins(testGame, us_locale);

            Assert.AreEqual(0, (int)result.TotalNumberOfRows, "Leaderboard is non empty");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify when three friends have the same score, they are ranked in order of the first to score down to the last to score")]
        public void GetLeaderboard_AllFriendsEqualWins_VerifyBehavior()
        {
            Account acct = AccountTransport.CreateAccount();
            Account friend1 = AccountTransport.CreateAccount();
            Account friend2 = AccountTransport.CreateAccount();
            RewardsTestUtil.Wait(30);

            AccountTransport.MakeFriends(acct, friend1);
            AccountTransport.MakeFriends(acct, friend2);
            
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(acct);
            GameResult gr1 = scenarios.CreateGameResult(testGame, 1, 1, blob, "Win");
            GameResult gr2 = scenarios.CreateGameResult(testGame, 1, 1, blob, "Win");
            GameResult gr3 = scenarios.CreateGameResult(testGame, 1, 1, blob, "Win");

            scenarios.PostGameResult(gr1, us_locale, testGame.PlatformId, testGame.GameId);
            scenarios.PostGameResultForUser(gr2, friend1.XblUser.Settings.UserPassportInfo.MemberName, friend1.XblUser.Settings.UserPassportInfo.Password, us_locale, testGame.PlatformId, testGame.GameId);
            scenarios.PostGameResultForUser(gr3, friend2.XblUser.Settings.UserPassportInfo.MemberName, friend2.XblUser.Settings.UserPassportInfo.Password, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = scenarios.GetLeaderboardForWins(testGame, us_locale);

            Assert.AreEqual((uint)1, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, acct.XblUser.Gamertag), "Rank is incorrect for user {0}", acct.XblUser.Gamertag);
            Assert.AreEqual((uint)2, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend1.XblUser.Gamertag), "Rank is incorrect for user {0}", friend1.XblUser.Gamertag);
            Assert.AreEqual((uint)3, RewardsTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend2.XblUser.Gamertag), "Rank is incorrect for user {0}", friend2.XblUser.Gamertag);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetLeaderboard_NoWinsStat_VerifyGamesPlayedUpdated()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, null, null);
            LeaderboardResult initialLeaderboard = new LeaderboardResult ();
            LeaderboardResult finalLeaderboard = testScenarios.PostGameResultAndRetrieveLeaderboard(gr, "Wins", us_locale, testGame.PlatformId, out initialLeaderboard);

            uint firstGamesPlayed = uint.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.GamesPlayed));
            uint finalGamesPlayed = uint.Parse(testScenarios.CheckLeaderboardResult(finalLeaderboard, LeaderboardPropertyType.GamesPlayed));

            Assert.AreEqual(firstGamesPlayed + 1, finalGamesPlayed, "Games played should be incremented when wins stat was missing");
        }

        #endregion Wins
        #region Locale
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when it is an unsupported locale")]
        public void GetLeaderboard_Locale_Unsupported()
        {
            Response response = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore", "1", "Lifetime", "100", Constants.UnsupportedLocale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetLeaderboard_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore", "1", "Lifetime", "100", emptyLocale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch");
        }
        #endregion Locale
        #region Support functions

        /// <summary>
        /// Perform a PostGameResult action and verify the Http status returned is "202 Accepted"
        /// </summary>
        private void PostGameResultAndVerify(TestGame rewardsTestGame, string locale, long score, long time, string outcome, string blob, RewardsTestScenarioLibrary testScenarioLibrary)
        {
            Response ret = testScenarioLibrary.PostGameResult(rewardsTestGame, locale, score, time, outcome, blob);
            if (ret.StatusCode != HttpStatusCode.Accepted)
            {
                Assert.Inconclusive("Cannot run this test - PostGameResult failed");
            }
        }

        /// <summary>
        /// Perform a web service call to GetLeaderboard *without* the full URI - to be used for testing whether variables are optional or required
        /// </summary>
        private Response ExecuteCustomLeaderboardQuery(string query, string socialGraph, TestGame tg)
        {
            query = query.Replace("{gameId}", tg.GameId.ToString());
            query = query.Replace("{variant}", tg.Variant.ToString());
            query = query.Replace("{property}", "BestScore");
            query = query.Replace("{datagroup}", "W1");
            query = query.Replace("{numRows}", "100");
            query = query.Replace("{rankStart}", "1");
            query = query.Replace("{socialGraph}", socialGraph);

            return testScenarios.ExecuteCustomQuery("GetLeaderboard", query, null, tg);
        }

        #endregion
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\UDSPUserTokenSupprt.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class UdspUserTokenSupport
    {
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        private TestGame HexicRush = TestGameUtility.GetTestGame("HexicRush");
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private TestUser tu = AuthenticationTransport.PrimaryUser;
        private readonly string us_locale = "en-US";
        private RewardsTransport trans = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
        private XmlHelper xhelp = new XmlHelper();


        #region UDS Partner taking User Token -- BVTs


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for GetProfilePartner for properties section")]
        public void GetProfilePartner_PropertiesBVT_UserToken()
        {
            // Get properties
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, AuthenticationMethod.UserToken);

            // Validate Properties
            Assert.IsNotNull(profile.ProfileProperties, "No properties are set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Name], "Name property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Bio], "Bio property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.GamerZone], "GamerZone property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Location], "Location property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Motto], "Motto property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.ParentalControlGroup], "ParentalControlGroup property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.FreeGamertagChangeEligible], "FreeGamertagChangeEligible property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.IsParentallyControlled], "IsParentallyControlled property is not set.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the PostProfilePartner API properties")]
        public void PostProfilePartner_PropertiesBVT_UserToken()
        {
            ProfileEx profile = testScenarios.CreateProfileWithDefaultProperties();
            Response result = testScenarios.PostProfilePartner(profile, us_locale, AuthenticationMethod.UserToken);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the PostPresence API")]
        public void PostPresenceBVT_UserToken()
        {
            Response result = testScenarios.PostPresence(us_locale, AuthenticationMethod.UserToken);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the GetMessages API")]
        public void GetMessageSummariesBVT_UserToken()
        {
            MessageSummariesResponse messages = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.IsNotNull(messages, "GetMessageSummaries is not returning proper data type.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Timeout(300000)]
        [Description("Verify basic functionality for the GetMessageDetails API")]
        public void GetMessageDetailsBVT_UserToken()
        {
            testScenarios.CheckForMessagesForBVTs(tu.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            MessageDetails messageDetails = testScenarios.GetMessageDetails(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.IsNotNull(messageDetails, "GetMessageDetails is not returning proper data type.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the SendMessages API")]
        public void SendMessageBVT_UserToken()
        {
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(tu.Gamertag, TestHelper.GetRandomString(20));
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Timeout(300000)]
        [Description("Verify basic functionality for the DeleteMessage API")]
        public void DeleteMessageBVT_UserToken()
        {
            testScenarios.CheckForMessagesForBVTs(tu.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessage(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling DeleteMessage failed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Timeout(300000)]
        [Description("Verify basic functionality for the BlockMessages API")]
        public void DeleteMessageAndBlockGamertagBVT_UserToken()
        {
            testScenarios.CheckForMessagesForBVTs(tu.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessageAndBlockGamertag(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling DeleteMessageAndBlockGamertag partner service failed.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the AddFriend API")]
        public void AddFriendBVT_UserToken()
        {
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            Response response = testScenarios.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the AcceptFriend API")]
        public void AcceptFriendBVT_UserToken()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
            testScenarios.SetupUserForMessaging();

            Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            Response acceptResponse = testScenarios.AcceptFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AcceptFriend failed.");

            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList, AuthenticationMethod.UserToken);

            Assert.IsTrue(testScenarios.VerifyFriendState(profile, newFriendAccount.XblUser.Gamertag, FriendState.Friend));

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the DeclineFriend API")]
        public void DeclineFriendvBVT_UserToken()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
            testScenarios.SetupUserForMessaging();

            Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            Response response2 = testScenarios.DeclineFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling DeclineFriend failed.");

            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            //loop through all friends and verify the newFriendAccount is NOT present as a Friend 
            foreach (Friend friend in profile.FriendList)
            {
                if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(newFriendAccount.XblUser.Gamertag))
                {
                    Assert.Fail("User was found in friends list after declining a friend request");
                }
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the RemoveFriend API, User A removes Friend B and then Friend B is no longer in Friends list")]
        public void RemoveFriendBVT_UserToken()
        {
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList, AuthenticationMethod.UserToken);
            string gamertagToDelete = "";

            if (profile.FriendList.Count < 10)
            {

                Account newFriendAccount = AccountTransport.CreateAccount();
                RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
                testScenarios.SetupUserForMessaging();

                Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

                Response acceptResponse = testScenarios.AcceptFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AcceptFriend failed.");

                ProfileEx acceptProfile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList, AuthenticationMethod.UserToken);
                Assert.IsTrue(testScenarios.VerifyFriendState(acceptProfile, newFriendAccount.XblUser.Gamertag, FriendState.Friend));

                gamertagToDelete = newFriendAccount.XblUser.Gamertag;
            }
            else
            {
                gamertagToDelete = profile.FriendList[profile.FriendList.Count - 1].ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString();
                if (gamertagToDelete.StartsWith("Rewards"))
                {
                    Assert.Fail("Gamertag selected was one we cannot delete (if you are seeing this it is a test issue).");
                }
            }

            Response removeFriendResponse = testScenarios.RemoveFriend(gamertagToDelete, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);

            Assert.AreEqual(HttpStatusCode.OK, removeFriendResponse.StatusCode, "Calling RemoveFriend failed");

            ProfileEx profile2 = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList, AuthenticationMethod.UserToken);

            //loop through friends and verify newFriendAccount is NOT in the users friend list
            foreach (Friend friend in profile2.FriendList)
            {
                if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(gamertagToDelete))
                {
                    Assert.Fail("User was found in friends list after being removed");
                }
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify we get full friends list back and each friend has a FriendState of 0, 1 or 2")]
        public void GetProfilePartner_FullFriendsList_BVT_UserToken()
        {
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList, AuthenticationMethod.UserToken);
            foreach (Friend friend in profile.FriendList)
            {
                Assert.IsTrue(friend.FriendState >= 0 && friend.FriendState <= 2);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Ignore]
        [Description("Verify basic functionality for the FreeGamertagChange API")]
        public void FreeGamertagChangeBVT_UserToken()
        {
            //To run this you must put a breakpoint after a new user is created and manually edit the DB to make that user free gamertag change eligible
            RewardsTestScenarioLibrary freeGamertagChangeLib = new RewardsTestScenarioLibrary("LL0uiee240uo0@xbltest.com", "supersecret"); //le-xblob-dev02

            string newRandomGamertag = "GT" + TestHelper.GetRandomString(10);

            Response response = freeGamertagChangeLib.FreeGamertagChange(newRandomGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId, AuthenticationMethod.UserToken);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling FreeGamertagChange partner service failed.");

            ProfileEx profile = freeGamertagChangeLib.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, AuthenticationMethod.UserToken);
            Assert.AreEqual(newRandomGamertag, profile.ProfileProperties[ProfileProperty.GamerTag], "Gamertag was NOT successfully changed.");
            Assert.AreEqual(false, profile.ProfileProperties[ProfileProperty.FreeGamertagChangeEligible], "User is still eligible for free gamertag change after changing it.");
        }

        #endregion

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify sending in both a usre and partner token returns a 401")]
        public void GetMessageSummaries_UserAndPartnerToken_401()
        {
            Response response = testScenarios.GetMessageSummaries("fakeHash", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString(), AuthenticationMethod.UserAndPartnerToken);

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "401 Not Returned when sending both User and Partner tokens to an API.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 401 is returned when the X-PartnerAuthentication header contains a user token")]
        public void DeclineFriend_XPartnerAuthentication_UserToken()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, rt.UserStsTicket);

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling DeclineFriend didn't return Unauthorized when empty a User Token was sent in the partner auth header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 401 is returned when the X-PartnerAuthentication header contains a user token")]
        public void DeclineFriend_XAuthentication_PartnerToken()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.DeclineFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), rt.PartnerStsTicket, string.Empty);

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling DeclineFriend didn't return Unauthorized when empty a Partner Token was sent in the auth header.");
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\UdsPartSecurityTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class UdsPartSecurityTests
    {
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        private TestGame HexicRush = TestGameUtility.GetTestGame("HexicRush");
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private TestUser tu = AuthenticationTransport.PrimaryUser;
        private readonly string us_locale = "en-US";
        private RewardsTransport trans = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
        private XmlHelper xhelp = new XmlHelper();

        //4D530920 = Halo Waypoint = 1297287456
        //4D53099C = XLE prototype = 1297287580
        //4D5308EC = LIVE XTRAS    = 1297287404

        /// <summary>
        /// This region holds a test case for each Partner API to verify that a title NOT in the whilte list is NOT allowed to call them
        /// </summary>
        #region Not Allowed Title Id

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetAchievementsPartner_NotAllowedTitleId()
        {
            Response response = trans.GetAchievementsPartnerService(tu.Gamertag, HexicRush.GameId.ToString(), HexicRush.GameId, us_locale, HexicRush.PlatformId);

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call GetAchievements.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetGames_NotAllowedTitleId()
        {
            Response response = trans.GetGamesPartnerService(HexicRush.GameId.ToString(), tu.Gamertag, "0", "500", us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call GetGames.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetProfilePartner_NotAllowedTitleId()
        {
            Response response = trans.GetProfilePartner(us_locale, HexicRush.GameId, HexicRush.PlatformId.ToString(), ((uint)Constants.AllProfileSections).ToString(), string.Empty, tu.Gamertag);

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call GetProfile.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void PostProfilePartner_NotAllowedTitleId()
        {
            ProfileEx profile = testScenarios.CreateProfileWithRandomPrivacySettings();
            string profileString = xhelp.SerializeObjectToXmlString(profile);
            Response response = trans.PostProfilePartner(profileString, us_locale, HexicRush.PlatformId.ToString(), HexicRush.GameId);

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call PostProfile.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void PostPresence_NotAllowedTitleId()
        {
            Response response = trans.PostPresence(us_locale, HexicRush.PlatformId.ToString(), HexicRush.GameId);

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call PostPresence.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetMessageSummaries_NotAllowedTitleId()
        {
            Response response = trans.GetMessageSummaries("", HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call GetMessageSummaries.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetMessageDetails_NotAllowedTitleId()
        {
            Response response = trans.GetMessageDetails("8", HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call GetMessageSummaries.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void SendMessage_NotAllowedTitleId()
        {
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(tu.Gamertag, TestHelper.GetRandomString(20));
            string strSendMessageRequest = xhelp.SerializeObjectToXmlString(sendMessageRequest);

            Response response = trans.SendMessage(strSendMessageRequest, HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call SendMessage.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void DeleteMessage_NotAllowedTitleId()
        {
            Response response = trans.DeleteMessage("8", HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call DeleteMessage.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void DeleteMessageAndBlockGamertag_NotAllowedTitleId()
        {

            Response response = trans.DeleteMessageAndBlockGamertag("8", HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call DeleteMessageAndBlockGamertag.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void AddFriend_NotAllowedTitleId()
        {
            Response response = trans.AddFriend(tu.Gamertag, HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call AddFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void AcceptFriend_NotAllowedTitleId()
        {
            Response response = trans.AcceptFriend(tu.Gamertag, HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call AcceptFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void DeclineFriend_NotAllowedTitleId()
        {
            Response response = trans.DeclineFriend(tu.Gamertag, HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call DeclineFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void RemoveFriend_NotAllowedTitleId()
        {
            Response response = trans.RemoveFriend(tu.Gamertag, HexicRush.GameId.ToString(), us_locale, HexicRush.PlatformId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call RemoveFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void FreeGamertagChange_NotAllowedTitleId()
        {
            Response response = trans.FreeGamertagChange(tu.Gamertag, us_locale, HexicRush.PlatformId.ToString(), HexicRush.GameId.ToString());

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID not in the white list was allowed to call FreeGamertagChange.");
        }

        #endregion

        /// <summary>
        /// This region holds a test case for each Partner API to verify that a title in the whilte list is allowed to call them
        /// </summary>
        #region Allowed Title Id

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetAchievementsPartner_AllowedTitleId()
        {
            Response response = trans.GetAchievementsPartnerService(tu.Gamertag, LiveApp.GameId.ToString(), LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call GetAchievements.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetGames_AllowedTitleId()
        {
            Response response = trans.GetGamesPartnerService(LiveApp.GameId.ToString(), tu.Gamertag, "0", "500", us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call GetGames.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetProfilePartner_AllowedTitleId()
        {
            Response response = trans.GetProfilePartner(us_locale, LiveApp.GameId, LiveApp.PlatformId.ToString(), ((uint)Constants.AllProfileSections).ToString(), ((uint)SectionFlags.XboxLiveProperties).ToString(), tu.Gamertag);

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call GetProfile.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void PostProfilePartner_AllowedTitleId()
        {
            ProfileEx profile = testScenarios.CreateProfileWithRandomPrivacySettings();
            string profileString = xhelp.SerializeObjectToXmlString(profile);
            Response response = trans.PostProfilePartner(profileString, us_locale, LiveApp.PlatformId.ToString(), LiveApp.GameId);

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call PostProfile.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void PostPresence_AllowedTitleId()
        {
            Response response = trans.PostPresence(us_locale, LiveApp.PlatformId.ToString(), LiveApp.GameId);

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call PostPresence.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetMessageSummaries_AllowedTitleId()
        {
            Response response = trans.GetMessageSummaries("", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call GetMessageSummaries.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void GetMessageDetails_AllowedTitleId()
        {
            Response response = trans.GetMessageDetails("8", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call GetMessageSummaries.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void SendMessage_AllowedTitleId()
        {
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(tu.Gamertag, TestHelper.GetRandomString(20));
            string strSendMessageRequest = xhelp.SerializeObjectToXmlString(sendMessageRequest);

            Response response = trans.SendMessage(strSendMessageRequest, LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call SendMessage.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void DeleteMessage_AllowedTitleId()
        {
            Response response = trans.DeleteMessage("8", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call DeleteMessage.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void DeleteMessageAndBlockGamertag_AllowedTitleId()
        {

            Response response = trans.DeleteMessageAndBlockGamertag("8", LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call DeleteMessageAndBlockGamertag.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void AddFriend_AllowedTitleId()
        {
            Response response = trans.AddFriend(tu.Gamertag, LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call AddFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void AcceptFriend_AllowedTitleId()
        {
            Response response = trans.AcceptFriend(tu.Gamertag, LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call AcceptFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void DeclineFriend_AllowedTitleId()
        {
            Response response = trans.DeclineFriend(tu.Gamertag, LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call DeclineFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void RemoveFriend_AllowedTitleId()
        {
            Response response = trans.RemoveFriend(tu.Gamertag, LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call RemoveFriend.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        public void FreeGamertagChange_AllowedTitleId()
        {
            Response response = trans.FreeGamertagChange(tu.Gamertag, us_locale, LiveApp.PlatformId.ToString(), LiveApp.GameId.ToString());

            Assert.AreNotEqual(HttpStatusCode.Unauthorized, response.StatusCode, "A Title ID in the white list was not allowed to call FreeGamertagChange.");
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Utilities\TestGame.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using Leet.Core.Platforms;

namespace Rewards.Test
{

    public class TestGame
    {
        public string Name { get; set; }
        public uint PlatformId { get; set; }
        public uint GameId { get; set; }
        public uint Variant { get; set; }
        public uint Type { get; set; } // Unknown = 0, Mobile = 1, Web = 2, Console = 4, PC = 8 - see UserData Partner Services spec
        public bool AllStats { get; set; }
        public bool HasAchievements { get; set; }
        public bool HasAvatarAwardables { get; set; }

        public TestGame(string name, uint platformId, uint gameId, uint variant, uint type, bool allStats, bool hasAchievements, bool hasAvatarAwardables)
        {
            Name = name;
            PlatformId = platformId;
            GameId = gameId;
            Variant = variant;
            Type = type;
            AllStats = allStats;
            HasAchievements = hasAchievements;
            HasAvatarAwardables = hasAvatarAwardables;
        }

        public TestGame()
        {
            Name = "";
            PlatformId = 0;
            GameId = 0;
            Variant = 0;
            Type = 0;
            AllStats = false;
            HasAchievements = false;
            HasAvatarAwardables = false;
        }
    }

    public static class TestGameUtility
    {

        private static string ConfigFile = "TestData.xml";
        private static List<TestGame> allGames;

        static TestGameUtility()
        {
            allGames = GetAllGames();
        }

        //Hardcoding values here, since these are ingested in GMS and are available across all environments

        /// <summary>
        /// Returns a game with all leaderboard stats(score,time and wins) with high values as best
        /// </summary>
        public static TestGame AllStatsGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 0, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with all leaderboard stats(score,time and wins) with low values as best
        /// </summary>
        public static TestGame AllStatsGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 1, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score and time stats with high values as best
        /// </summary>
        public static TestGame BestScoreTimeGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 2, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score and time stats with low values as best
        /// </summary>
        public static TestGame BestScoreTimeGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 3, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score stat with high values as best
        /// </summary>
        public static TestGame BestScoreGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 4, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score stat with low values as best
        /// </summary>
        public static TestGame BestScoreGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 5, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with time stat with high values as best
        /// </summary>
        public static TestGame BestTimeGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 6, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with time stat with low values as best
        /// </summary>
        public static TestGame BestTimeGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 7, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with wins stat with most wins as best
        /// </summary>
        public static TestGame WinsGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 8, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with time stat with least wins as best
        /// </summary>
        public static TestGame WinsGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 9, 3, true, false, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score and time stat with high score as best and low score as best
        /// </summary>
        public static TestGame BestScoreLowestTime
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 10, 3, true, false, false);
                return tg;
            }
        }

        public static List<TestGame> AllGames
        {
            get
            {
                if (allGames == null)
                {
                    allGames = GetAllGames();
                }
                return allGames;
            }

        }

        public static List<TestGame> GetAllGames()
        {
            XElement xe = XElement.Load(ConfigFile);
            var games = xe.Descendants("Game");
            List<TestGame> allGames = new List<TestGame>();

            foreach (var game in games)
            {
                TestGame tg = new TestGame();

                tg.Name = game.Attribute("name").Value;
                tg.GameId = uint.Parse(game.Attribute("id").Value);
                tg.Variant = uint.Parse(game.Attribute("variant").Value);
                tg.PlatformId = uint.Parse(game.Attribute("platformId").Value);
                tg.Type = uint.Parse(game.Attribute("type").Value);
                tg.AllStats = bool.Parse(game.Attribute("allstats").Value);
                tg.HasAchievements = bool.Parse(game.Attribute("HasAchievements").Value);
                tg.HasAvatarAwardables = bool.Parse(game.Attribute("HasAvatarAwardables").Value);

                allGames.Add(tg);
            }

            return allGames;
        }

        public static List<TestGame> GetGamesForVariant(uint variant)
        {
            List<TestGame> reqGames = new List<TestGame>();

            foreach (var game in AllGames)
            {
                if (game.Variant == variant)
                {
                    reqGames.Add(game);
                }
            }

            return reqGames;
        }

        public static List<TestGame> GetGamesForPlatformId(uint platformId)
        {
            List<TestGame> reqGames = new List<TestGame>();

            foreach (var game in AllGames)
            {
                if (game.PlatformId == platformId)
                {
                    reqGames.Add(game);
                }
            }

            return reqGames;
        }

        public static List<TestGame> GetGamesWithAchievements()
        {
            List<TestGame> reqGames = new List<TestGame>();

            foreach (var game in AllGames)
            {
                if (game.HasAchievements)
                {
                    reqGames.Add(game);
                }
            }

            return reqGames;
        }

        public static List<TestGame> GetGamesWithAvatarAwardables()
        {
            List<TestGame> reqGames = new List<TestGame>();

            foreach (var game in AllGames)
            {
                if (game.HasAvatarAwardables)
                {
                    reqGames.Add(game);
                }
            }

            return reqGames;
        }


        public static TestGame GetFirstGameWithAchievements()
        {
            List<TestGame> testGames = GetGamesWithAchievements();
            return testGames[0];
        }

        public static TestGame GetFirstGameWithAvatarAwardables()
        {
            List<TestGame> testGames = GetGamesWithAvatarAwardables();
            return testGames[0];
        }

        public static TestGame GetFirstGameWithAllStats()
        {
            return AllGames.Where(game => game.AllStats == true).First();
        }

        public static List<TestGame> GetAllGamesWithAllStats()
        {
            return AllGames.Where(game => game.AllStats == true).ToList<TestGame>();
        }

        public static TestGame GetTestGame(string name)
        {
            TestGame tg = GetAllGames().Where(g => g.Name.Equals(name, StringComparison.OrdinalIgnoreCase)).First();
            return tg;
        }

        public static TestGame GetTestGame(string name, uint variant)
        {
            TestGame tg = GetAllGames().Where(g => g.Name.Equals(name, StringComparison.OrdinalIgnoreCase)).First();
            tg.Variant = variant;
            return tg;
        }

        public static TestGame GetTestGame(uint gameId)
        {
            TestGame tg = GetAllGames().Where(g => g.GameId == gameId).First();
            return tg;
        }

        public static TestGame VivaPinata
        {
            get
            {
                TestGame tg = new TestGame("Viva Piñata", (uint)PlatformType.Xbox360, 1297287233, 0, 4, true, true, true);
                return tg;
            }
        }

        /// <summary>
        /// Returns information for GamesHub Title
        /// </summary>
        public static TestGame GamesHubTitle
        {
            get
            {
                TestGame tg = new TestGame("GamesHub", 5, 1481443286, 0, 3, false, false, false); // TODO: type correct?
                return tg;
            }
        }

        /// <summary>
        /// Returns information for LiveApp Title
        /// </summary>
        public static TestGame LiveAppTitle
        {
            get
            {
                string env = AccountTransport.GetCurrentLIVEnEnv();
                TestGame tg;
                if (env.Equals("int2") ||
                    env.Equals("certnet") ||
                    env.Equals("partnernet") ||
                    env.Equals("prod") ||
                    env.Equals("VINT")) 
                {
                    tg = new TestGame("LIVEMobileApp", 5, 1297287404, 0, 1, false, false, false);
                }
                else
                {
                    //HACK: using Games Hub titleId -- Live Mobile App will not be propped to TestNet/Dev
                    tg = new TestGame("LIVEMobileApp", 5, 1481443286, 0, 1, false, false, false);
                }
                return tg;
            }
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\PrivacySettings.cs ===
﻿using System;
using System.Net;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class PrivacySettingsTests
    {
        private static Account userPrimary;
        private static Account userFriend_Everyone;
        private static Account userFriend_Block;
        private static Account userFriend_FriendsOnly;
        private static Account userStranger;

        private static string userFriend_EveryoneGamertag;
        private static string userFriend_BlockGamertag;
        private static string userFriend_FriendsOnlyGamertag;

        private static RewardsTestScenarioLibrary lib_userPrimary;
        private static RewardsTestScenarioLibrary lib_userFriend_Everyone;
        private static RewardsTestScenarioLibrary lib_userFriend_Block;
        private static RewardsTestScenarioLibrary lib_userFriend_FriendsOnly;
        private static RewardsTestScenarioLibrary lib_userStranger;

        private static TestGame testGame = TestGameUtility.GetFirstGameWithAllStats();
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private static readonly string us_locale = "en-US";

        // NOTE ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        //                                                                                                               //
        // This will run before any tests are run. These users will be set up:                                           //
        //    userPrimary            (use with lib_userPrimary)                                                          //
        //    userFriend_Everyone    (use with lib_userFriend_Everyone) - all privacy settings will be "Everyone"        //
        //    userFriend_Block       (use with lib_userFriend_Block) - all privacy settings will be "Blocked"            //
        //    userFriend_FriendsOnly (use with lib_userFriend_FriendsOnly) - all privacy settings will be "FriendsOnly"  //
        //    userStranger           (use with lib_userStranger)                                                         //                                                                                          //
        //                                                                                                               //
        // The three userFriends_xxxx users are friends with userPrimary.                                                //
        // userStranger has no friends.                                                                                  //
        // The three userFriends_xxxx users and userPrimary will each have a recently played game.                       //
        //                                                                                                               //
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        [ClassInitialize()]
        public static void Initialize(TestContext testContext)
        {
            userPrimary = AccountTransport.CreateAccount();
            userFriend_Everyone = AccountTransport.CreateAccount();
            userFriend_Block = AccountTransport.CreateAccount();
            userFriend_FriendsOnly = AccountTransport.CreateAccount();
            userStranger = AccountTransport.CreateAccount();

            //Get gamertags
            userFriend_EveryoneGamertag = userFriend_Everyone.XblUser.Gamertag;
            userFriend_BlockGamertag = userFriend_Block.XblUser.Gamertag;
            userFriend_FriendsOnlyGamertag = userFriend_FriendsOnly.XblUser.Gamertag;

            //Wait for LiveCache to expire so that results from Profile service call will match
            RewardsTestUtil.Wait(30);

            //Make friends
            AccountTransport.MakeFriends(userPrimary, userFriend_Everyone);
            AccountTransport.MakeFriends(userPrimary, userFriend_Block);
            AccountTransport.MakeFriends(userPrimary, userFriend_FriendsOnly);

            //Set up TestScenarioLibraries
            lib_userPrimary = new RewardsTestScenarioLibrary(userPrimary);
            lib_userFriend_Everyone = new RewardsTestScenarioLibrary(userFriend_Everyone);
            lib_userFriend_Block = new RewardsTestScenarioLibrary(userFriend_Block);
            lib_userFriend_FriendsOnly = new RewardsTestScenarioLibrary(userFriend_FriendsOnly);
            lib_userStranger = new RewardsTestScenarioLibrary(userStranger);

            Init(lib_userPrimary, PrivacySettings.Everyone);
            Init(lib_userFriend_Everyone, PrivacySettings.Everyone);
            Init(lib_userFriend_Block, PrivacySettings.Blocked);
            Init(lib_userFriend_FriendsOnly, PrivacySettings.FriendsOnly);
        }
        private static void Init(RewardsTestScenarioLibrary lib, PrivacySettings ps)
        {
            // set user's profile
            ProfileEx profileEx = lib.CreateProfileWithDefaultProperties();
            Response resp = lib.PostProfilePartner(profileEx, us_locale);
            if (resp.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("Test suite initialization failed setting profile properties: {0}", resp.Error);

            // set user's privacy settings
            profileEx = lib.CreateProfileWithPrivacySettings(ps, ps, ps, ps, ps, ps, ps);
            resp = lib.PostProfilePartner(profileEx, us_locale);
            if (resp.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("Test suite initialization failed setting privacy settings: {0}", resp.Error);

            //Post game results for user
            lib.PostGameResultWithDefaultStats(testGame, us_locale);
        }

        #region PostPrivacySettings fields

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        [Description("Verify changing all privacy settings by incrementing them to ensure each one is getting set to something it wasn't set to before")]
        public void PostPrivacySettings_Change_IncrementAll()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);

            ProfileEx expectedProfile = new ProfileEx();
            expectedProfile.PrivacySettings = new XmlSerializableDictionary<PrivacySetting, uint>();
            expectedProfile.SectionFlags = (long)SectionFlags.PrivacySettings;

            expectedProfile.PrivacySettings.Add(PrivacySetting.VoiceAndText, IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.VoiceAndText]));
            expectedProfile.PrivacySettings.Add(PrivacySetting.Video, IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.Video]));
            expectedProfile.PrivacySettings.Add(PrivacySetting.GamerProfile, IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.GamerProfile]));
            expectedProfile.PrivacySettings.Add(PrivacySetting.OnlineStatus, IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.OnlineStatus]));
            expectedProfile.PrivacySettings.Add(PrivacySetting.MemberContent, IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.MemberContent]));
            expectedProfile.PrivacySettings.Add(PrivacySetting.PlayedGames, IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.PlayedGames]));
            expectedProfile.PrivacySettings.Add(PrivacySetting.FriendsList, IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.FriendsList]));

            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");
            RewardsTestUtil.Wait(90);

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify setting privacy settings to Blocked and then updating profile doesn't overwrite privacy settings")]
        public void PostPrivacySettings_Change_ThenChangeProfile_Blocked()
        {
            PostPrivacySettings_Change_ThenChangeProfile(PrivacySettings.Blocked);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify setting privacy settings to FriendsOnly and then updating profile doesn't overwrite privacy settings")]
        public void PostPrivacySettings_Change_ThenChangeProfile_FriendsOnly()
        {
            PostPrivacySettings_Change_ThenChangeProfile(PrivacySettings.FriendsOnly);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify setting privacy settings to Everyone and then updating profile doesn't overwrite privacy settings")]
        public void PostPrivacySettings_Change_ThenChangeProfile_Everyone()
        {
            PostPrivacySettings_Change_ThenChangeProfile(PrivacySettings.Everyone);
        }
        
        private void PostPrivacySettings_Change_ThenChangeProfile(PrivacySettings privacySettings)
        {
            // set user's privacy settings
            ProfileEx profileEx = lib_userPrimary.CreateProfileWithPrivacySettings(privacySettings, privacySettings, privacySettings, privacySettings, privacySettings, privacySettings, privacySettings);
            Response resp = lib_userPrimary.PostProfilePartner(profileEx, us_locale);
            if (resp.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("PostProfilePartner failed setting privacy settings: {0}", resp.Error);

            // set user's profile
            profileEx = lib_userPrimary.CreateProfileWithDefaultProperties();
            resp = lib_userPrimary.PostProfilePartner(profileEx, us_locale);
            if (resp.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("PostProfilePartner failed setting profile properties: {0}", resp.Error);

            // verify privacy settings are still set
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual((long)privacySettings, actualProfile.PrivacySettings[PrivacySetting.VoiceAndText], "POST Profile Partner did not change PrivacySetting.VoiceAndText");
            Assert.AreEqual((long)privacySettings, actualProfile.PrivacySettings[PrivacySetting.Video], "POST Profile Partner did not change PrivacySetting.Video");
            Assert.AreEqual((long)privacySettings, actualProfile.PrivacySettings[PrivacySetting.GamerProfile], "POST Profile Partner did not change PrivacySetting.GamerProfile");
            Assert.AreEqual((long)privacySettings, actualProfile.PrivacySettings[PrivacySetting.OnlineStatus], "POST Profile Partner did not change PrivacySetting.OnlineStatus");
            Assert.AreEqual((long)privacySettings, actualProfile.PrivacySettings[PrivacySetting.MemberContent], "POST Profile Partner did not change PrivacySetting.MemberContent");
            Assert.AreEqual((long)privacySettings, actualProfile.PrivacySettings[PrivacySetting.PlayedGames], "POST Profile Partner did not change PrivacySetting.PlayedGames");
            Assert.AreEqual((long)privacySettings, actualProfile.PrivacySettings[PrivacySetting.FriendsList], "POST Profile Partner did not change PrivacySetting.FriendsList");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing only the VoiceAndText privacy setting")]
        public void PostPrivacySettings_Change_VoiceAndTextOnly()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.VoiceAndText]);

            ProfileEx postProfile = lib_userPrimary.CreateProfileWithPrivacySettings(newValue, null, null, null, null, null, null);
            Response result = lib_userPrimary.PostProfilePartner(postProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx expectedProfile = startProfile;
            expectedProfile.PrivacySettings[PrivacySetting.VoiceAndText] = newValue;
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.VoiceAndText], actualProfile.PrivacySettings[PrivacySetting.VoiceAndText], "POST Profile Partner did not change PrivacySetting.VoiceAndText");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing the VoiceAndText privacy setting to something different than the other settings")]
        public void PostPrivacySettings_Change_VoiceAndText()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.VoiceAndText]);

            uint ps = IncrementPrivacySetting(newValue);
            ProfileEx expectedProfile = lib_userPrimary.CreateProfileWithPrivacySettings(newValue, ps, ps, ps, ps, ps, ps);
            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.VoiceAndText], actualProfile.PrivacySettings[PrivacySetting.VoiceAndText], "POST Profile Partner did not change PrivacySetting.VoiceAndText");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing only the Video privacy setting")]
        public void PostPrivacySettings_Change_VideoOnly()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.Video]);

            ProfileEx postProfile = lib_userPrimary.CreateProfileWithPrivacySettings(null, newValue, null, null, null, null, null);
            Response result = lib_userPrimary.PostProfilePartner(postProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx expectedProfile = startProfile;
            expectedProfile.PrivacySettings[PrivacySetting.Video] = newValue;
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.Video], actualProfile.PrivacySettings[PrivacySetting.Video], "POST Profile Partner did not change PrivacySetting.Video");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing the Video privacy setting to something different than the other settings")]
        public void PostPrivacySettings_Change_Video()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.Video]);

            uint ps = IncrementPrivacySetting(newValue);
            ProfileEx expectedProfile = lib_userPrimary.CreateProfileWithPrivacySettings(ps, newValue, ps, ps, ps, ps, ps);
            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.Video], actualProfile.PrivacySettings[PrivacySetting.Video], "POST Profile Partner did not change PrivacySetting.Video");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing only the GamerProfile privacy setting")]
        public void PostPrivacySettings_Change_GamerProfileOnly()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.GamerProfile]);

            ProfileEx postProfile = lib_userPrimary.CreateProfileWithPrivacySettings(null, null, newValue, null, null, null, null);
            Response result = lib_userPrimary.PostProfilePartner(postProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx expectedProfile = startProfile;
            expectedProfile.PrivacySettings[PrivacySetting.GamerProfile] = newValue;
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.GamerProfile], actualProfile.PrivacySettings[PrivacySetting.GamerProfile], "POST Profile Partner did not change PrivacySetting.GamerProfile");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing the GamerProfile privacy setting to something different than the other settings")]
        public void PostPrivacySettings_Change_GamerProfile()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.GamerProfile]);

            uint ps = IncrementPrivacySetting(newValue);
            ProfileEx expectedProfile = lib_userPrimary.CreateProfileWithPrivacySettings(ps, ps, newValue, ps, ps, ps, ps);
            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.GamerProfile], actualProfile.PrivacySettings[PrivacySetting.GamerProfile], "POST Profile Partner did not change PrivacySetting.GamerProfile");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing only the OnlineStatus privacy setting")]
        public void PostPrivacySettings_Change_OnlineStatusOnly()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.OnlineStatus]);

            ProfileEx postProfile = lib_userPrimary.CreateProfileWithPrivacySettings(null, null, null, newValue, null, null, null);
            Response result = lib_userPrimary.PostProfilePartner(postProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx expectedProfile = startProfile;
            expectedProfile.PrivacySettings[PrivacySetting.OnlineStatus] = newValue;
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.OnlineStatus], actualProfile.PrivacySettings[PrivacySetting.OnlineStatus], "POST Profile Partner did not change PrivacySetting.OnlineStatus");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing the OnlineStatus privacy setting to something different than the other settings")]
        public void PostPrivacySettings_Change_OnlineStatus()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.OnlineStatus]);

            uint ps = IncrementPrivacySetting(newValue);
            ProfileEx expectedProfile = lib_userPrimary.CreateProfileWithPrivacySettings(ps, ps, ps, newValue, ps, ps, ps);
            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.OnlineStatus], actualProfile.PrivacySettings[PrivacySetting.OnlineStatus], "POST Profile Partner did not change PrivacySetting.OnlineStatus");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing only the MemberContent privacy setting")]
        public void PostPrivacySettings_Change_MemberContentOnly()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.MemberContent]);

            ProfileEx postProfile = lib_userPrimary.CreateProfileWithPrivacySettings(null, null, null, null, newValue, null, null);
            Response result = lib_userPrimary.PostProfilePartner(postProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx expectedProfile = startProfile;
            expectedProfile.PrivacySettings[PrivacySetting.MemberContent] = newValue;
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.MemberContent], actualProfile.PrivacySettings[PrivacySetting.MemberContent], "POST Profile Partner did not change PrivacySetting.MemberContent");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing the MemberContent privacy setting to something different than the other settings")]
        public void PostPrivacySettings_Change_MemberContent()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.MemberContent]);

            uint ps = IncrementPrivacySetting(newValue);
            ProfileEx expectedProfile = lib_userPrimary.CreateProfileWithPrivacySettings(ps, ps, ps, ps, newValue, ps, ps);
            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.MemberContent], actualProfile.PrivacySettings[PrivacySetting.MemberContent], "POST Profile Partner did not change PrivacySetting.MemberContent");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing only the PlayedGames privacy setting")]
        public void PostPrivacySettings_Change_PlayedGamesOnly()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.PlayedGames]);

            ProfileEx postProfile = lib_userPrimary.CreateProfileWithPrivacySettings(null, null, null, null, null, newValue, null);
            Response result = lib_userPrimary.PostProfilePartner(postProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx expectedProfile = startProfile;
            expectedProfile.PrivacySettings[PrivacySetting.PlayedGames] = newValue;
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.PlayedGames], actualProfile.PrivacySettings[PrivacySetting.PlayedGames], "POST Profile Partner did not change PrivacySetting.PlayedGames");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing the PlayedGames privacy setting to something different than the other settings")]
        public void PostPrivacySettings_Change_PlayedGames()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.PlayedGames]);

            uint ps = IncrementPrivacySetting(newValue);
            ProfileEx expectedProfile = lib_userPrimary.CreateProfileWithPrivacySettings(ps, ps, ps, ps, ps, newValue, ps);
            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.PlayedGames], actualProfile.PrivacySettings[PrivacySetting.PlayedGames], "POST Profile Partner did not change PrivacySetting.PlayedGames");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing only the FriendsList privacy setting")]
        public void PostPrivacySettings_Change_FriendsListOnly()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.FriendsList]);

            ProfileEx postProfile = lib_userPrimary.CreateProfileWithPrivacySettings(null, null, null, null, null, null, newValue);
            Response result = lib_userPrimary.PostProfilePartner(postProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx expectedProfile = startProfile;
            expectedProfile.PrivacySettings[PrivacySetting.FriendsList] = newValue;
            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.FriendsList], actualProfile.PrivacySettings[PrivacySetting.FriendsList], "POST Profile Partner did not change PrivacySetting.FriendsList");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify changing the FriendsList privacy setting to something different than the other settings")]
        public void PostPrivacySettings_Change_FriendsList()
        {
            ProfileEx startProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            uint newValue = IncrementPrivacySetting(startProfile.PrivacySettings[PrivacySetting.FriendsList]);

            uint ps = IncrementPrivacySetting(newValue);
            ProfileEx expectedProfile = lib_userPrimary.CreateProfileWithPrivacySettings(ps, ps, ps, ps, ps, ps, newValue);
            Response result = lib_userPrimary.PostProfilePartner(expectedProfile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.AreEqual(expectedProfile.PrivacySettings[PrivacySetting.FriendsList], actualProfile.PrivacySettings[PrivacySetting.FriendsList], "POST Profile Partner did not change PrivacySetting.FriendsList");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(expectedProfile, actualProfile);
        }

        #endregion PostPrivacySettings fields
        #region PostProfile privacy settings
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if Privacy Settings section flag is not set, privacy settings are not updated")]
        public void PostPrivacySettings_VerifyNoUpdateWhenPrivacySectionFlagNotSet()
        {
            ProfileEx originalProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);

            ProfileEx profile = lib_userPrimary.CreateProfileWithRandomPrivacySettings();
            profile.SectionFlags = 0;
            Response result = lib_userPrimary.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status code mismatch on POST PrivacySettings");

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            //Verify the actual returned after a post is the same as the original
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(originalProfile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify no error if Privacy Settings object is null")]
        public void PostPrivacySettings_NullPrivacySettingsSection()
        {
            ProfileEx profile = new ProfileEx();
            profile.PrivacySettings = null;
            profile.SectionFlags = (long)SectionFlags.PrivacySettings;
            Response result = lib_userPrimary.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status code mismatch on POST PrivacySettings");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if Privacy Settings values are invalid")]
        public void PostPrivacySettings_InvalidPrivacySettingsValues()
        {
            ProfileEx profile = lib_userPrimary.CreateProfileWithPrivacySettings(4, 4, 4, 4, 4, 4, 4);
            Response result = lib_userPrimary.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "HTTP status code mismatch on POST PrivacySettings");
        }

        #endregion PostProfile privacy settings
        #region GetProfile privacy settings

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify user is NOT able to get privacy settings for a non-friend")]
        public void GetPrivacySettings_NonFriend()
        {
            ProfileEx strangerProfile = lib_userStranger.CreateProfileWithPrivacySettings(PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone);
            lib_userStranger.PostProfilePartner(strangerProfile, us_locale);
            RewardsTestUtil.Wait(90);

            ProfileEx actualProfile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.Friends, userStranger.XblUser.Gamertag);
            Assert.IsNull(actualProfile.PrivacySettings, "Privacy Settings should be null for other user");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify BadRequest is returned on getting privacy settings for friend")]
        public void GetPrivacySettings_Friend()
        {
            Response response = lib_userPrimary.GetProfilePartner(us_locale, SectionFlags.Friends, SectionFlags.PrivacySettings);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify BadRequest is returned on getting all sections for friend")]
        public void GetPrivacySettings_Friend_AllSections()
        {
            Response response = lib_userPrimary.GetProfilePartner(us_locale, SectionFlags.Friends, Constants.AllProfileSections);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        #endregion GetProfile privacy settings
        #region GetProfile privacy settings - blocked

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when VoiceAndText privacy settings are set to blocked")]
        public void GetPrivacySettings_Blocked_VoiceAndText()
        {
            ProfileEx profileFriend = lib_userFriend_Block.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.VoiceAndText] != (uint)PrivacySettings.Blocked)
                Assert.Inconclusive("User {0}'s VoiceAndText privacy setting should be BLOCKED", userFriend_BlockGamertag);

            SendMessageRequest sendMessageRequest = lib_userPrimary.CreateSendMessageRequest(userFriend_BlockGamertag, "Hey, s'up?");
            Response response = lib_userPrimary.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "A friend sending a message to a blocked user didn't fail");

            sendMessageRequest = lib_userStranger.CreateSendMessageRequest(userFriend_BlockGamertag, "Hey, s'up?");
            response = lib_userStranger.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "A stranger sending a message to a blocked user didn't fail");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when GamerProfile privacy settings are set to blocked")]
        public void GetPrivacySettings_Blocked_GamerProfile()
        {
            ProfileEx profileFriend = lib_userFriend_Block.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.GamerProfile] != (uint)PrivacySettings.Blocked)
                Assert.Inconclusive("User {0}'s GamerProfile privacy setting should be BLOCKED", userFriend_BlockGamertag);

            ProfileEx profile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.Friends, SectionFlags.XboxLiveProperties);
            int i = GetFriendIndex(profile, userFriend_BlockGamertag);
            Assert.IsNull(profile.Friends[i].ProfileProperties[ProfileProperty.Name], "A blocked profile was retrieved by a friend (Name property)");
            Assert.IsNull(profile.Friends[i].ProfileProperties[ProfileProperty.Bio], "A blocked profile was retrieved by a friend (Bio property)");
            Assert.IsNull(profile.Friends[i].ProfileProperties[ProfileProperty.Location], "A blocked profile was retrieved by a friend (Location property)");
            Assert.IsNull(profile.Friends[i].ProfileProperties[ProfileProperty.Motto], "A blocked profile was retrieved by a friend (Motto property)");
            Assert.AreEqual("XBOXLive", profile.Friends[i].ProfileProperties[ProfileProperty.GamerZone], "A blocked profile was retrieved by a friend (GamerZone property)");

            profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, userFriend_BlockGamertag);
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Name], "A blocked profile was retrieved by a stranger (Name property)");
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Bio], "A blocked profile was retrieved by a stranger (Bio property)");
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Location], "A blocked profile was retrieved by a stranger (Location property)");
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Motto], "A blocked profile was retrieved by a stranger (Motto property)");
            Assert.AreEqual("XBOXLive", profile.ProfileProperties[ProfileProperty.GamerZone], "A blocked profile was retrieved by a stranger (GamerZone property)");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when OnlineStatus privacy settings are set to blocked")]
        public void GetPrivacySettings_Blocked_OnlineStatus()
        {
            DateTime nullDate = new DateTime(2003, 1, 1);

            ProfileEx profileFriend = lib_userFriend_Block.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.OnlineStatus] != (uint)PrivacySettings.Blocked)
                Assert.Inconclusive("User {0}'s OnlineStatus privacy setting should be BLOCKED", userFriend_BlockGamertag);

            ProfileEx profile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.Friends, SectionFlags.PresenceInfo);
            int i = GetFriendIndex(profile, userFriend_BlockGamertag);

            // friend makes the query
            Assert.AreEqual((uint)PresenceStatus.Offline, profile.Friends[i].PresenceInfo.OnlineState, "A blocked profile was retrieved by a friend (OnlineState property)");
            Assert.IsTrue(profile.Friends[i].PresenceInfo.LastSeenDateTime.CompareTo(nullDate) == 0, "A blocked profile was retrieved by a friend (OnlineState property)");
            Assert.AreEqual((uint)0, profile.Friends[i].PresenceInfo.LastSeenTitleId, "A blocked profile was retrieved by a friend (OnlineState property)");

            // stranger makes the query
            profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo, userFriend_BlockGamertag);
            Assert.AreEqual((uint)PresenceStatus.Offline, profile.PresenceInfo.OnlineState, "A blocked profile was retrieved by a stranger (OnlineState property)");
            Assert.IsTrue(profile.PresenceInfo.LastSeenDateTime.CompareTo(nullDate) == 0, "A blocked profile was retrieved by a stranger (LastSeenDateTime property)");
            Assert.AreEqual((uint)0, profile.PresenceInfo.LastSeenTitleId, "A blocked profile was retrieved by a stranger (LastSeenTitleId property)");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when PlayedGames privacy settings are set to blocked")]
        public void GetPrivacySettings_Blocked_PlayedGames()
        {
            ProfileEx profileFriend = lib_userFriend_Block.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.PlayedGames] != (uint)PrivacySettings.Blocked)
                Assert.Inconclusive("User {0}'s PlayedGames privacy setting should be BLOCKED", userFriend_BlockGamertag);

            ProfileEx profile = lib_userPrimary.GetProfilePartnerXml(us_locale, SectionFlags.RecentGames, userFriend_BlockGamertag);
            Assert.AreEqual(0, profile.RecentGames.Count, "A blocked RecentGames profile section was retrieved by a friend");

            profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.RecentGames, userFriend_BlockGamertag);
            Assert.AreEqual(0, profile.RecentGames.Count, "A blocked RecentGames profile section was retrieved by a stranger");
        }
        #endregion GetProfile privacy settings - blocked
        #region GetProfile privacy settings - friendsOnly

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when VoiceAndText privacy settings are set to friendsOnly")]
        public void GetPrivacySettings_FriendsOnly_VoiceAndText()
        {
            ProfileEx profileFriend = lib_userFriend_FriendsOnly.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.VoiceAndText] != (uint)PrivacySettings.FriendsOnly)
                Assert.Inconclusive("User {0}'s VoiceAndText privacy setting should be FRIENDS ONLY", userFriend_FriendsOnlyGamertag);

            SendMessageRequest sendMessageRequest = lib_userStranger.CreateSendMessageRequest(userFriend_FriendsOnlyGamertag, "Hey, s'up?");
            Response response = lib_userStranger.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "A stranger sending a message to a friendsOnly user didn't fail");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when GamerProfile privacy settings are set to friendsOnly")]
        public void GetPrivacySettings_FriendsOnly_GamerProfile()
        {
            ProfileEx profileFriend = lib_userFriend_FriendsOnly.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.GamerProfile] != (uint)PrivacySettings.FriendsOnly)
                Assert.Inconclusive("User {0}'s GamerProfile privacy setting should be FRIENDS ONLY", userFriend_FriendsOnlyGamertag);

            ProfileEx profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, userFriend_FriendsOnlyGamertag);
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Name], "A friendsOnly profile was retrieved by a stranger (Name property)");
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Bio], "A friendsOnly profile was retrieved by a stranger (Bio property)");
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Location], "A friendsOnly profile was retrieved by a stranger (Location property)");
            Assert.IsNull(profile.ProfileProperties[ProfileProperty.Motto], "A friendsOnly profile was retrieved by a stranger (Motto property)");
            Assert.AreEqual("XBOXLive", profile.ProfileProperties[ProfileProperty.GamerZone], "A friendsOnly profile was retrieved by a stranger (GamerZone property)");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when OnlineStatus privacy settings are set to friendsOnly")]
        public void GetPrivacySettings_FriendsOnly_OnlineStatus()
        {
            DateTime nullDate = new DateTime(2003, 1, 1);

            ProfileEx profileFriend = lib_userFriend_FriendsOnly.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.OnlineStatus] != (uint)PrivacySettings.FriendsOnly)
                Assert.Inconclusive("User {0}'s OnlineStatus privacy setting should be FRIENDS ONLY", userFriend_FriendsOnlyGamertag);

            ProfileEx profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo, userFriend_FriendsOnlyGamertag);
            Assert.AreEqual((uint)PresenceStatus.Offline, profile.PresenceInfo.OnlineState, "A friendsOnly profile was retrieved by a stranger (OnlineState property)");
            Assert.IsTrue(profile.PresenceInfo.LastSeenDateTime.CompareTo(nullDate) == 0, "A friendsOnly profile was retrieved by a stranger (LastSeenDateTime property)");
            Assert.AreEqual((uint)0, profile.PresenceInfo.LastSeenTitleId, "A friendsOnly profile was retrieved by a stranger (LastSeenTitleId property)");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when PlayedGames privacy settings are set to friendsOnly")]
        public void GetPrivacySettings_FriendsOnly_PlayedGames()
        {
            ProfileEx profileFriend = lib_userFriend_FriendsOnly.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.PlayedGames] != (uint)PrivacySettings.FriendsOnly)
                Assert.Inconclusive("User {0}'s PlayedGames privacy setting should be FRIENDS ONLY", userFriend_FriendsOnlyGamertag);

            ProfileEx profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.RecentGames, userFriend_FriendsOnlyGamertag);
            Assert.AreEqual(0, profile.RecentGames.Count, "A friendsOnly RecentGames profile section was retrieved by a stranger");
        }

        #endregion GetProfile privacy settings - friendsOnly
        #region GetProfile privacy settings - everyone

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when VoiceAndText privacy settings are set to everyone")]
        public void GetPrivacySettings_Everyone_VoiceAndText()
        {
            ProfileEx profileFriend = lib_userFriend_Everyone.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.VoiceAndText] != (uint)PrivacySettings.Everyone)
                Assert.Inconclusive("User {0}'s VoiceAndText privacy setting should be EVERYONE", userFriend_EveryoneGamertag);

            SendMessageRequest sendMessageRequest = lib_userStranger.CreateSendMessageRequest(userFriend_EveryoneGamertag, "Hey, s'up?");
            Response response = lib_userStranger.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Sending a message by a stranger failed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when GamerProfile privacy settings are set to everyone")]
        public void GetPrivacySettings_Everyone_GamerProfile()
        {
            ProfileEx profileFriend = lib_userFriend_Everyone.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.GamerProfile] != (uint)PrivacySettings.Everyone)
                Assert.Inconclusive("User {0}'s GamerProfile privacy setting should be EVERYONE", userFriend_EveryoneGamertag);

            ProfileEx profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties, userFriend_EveryoneGamertag);
            Assert.IsNotNull(profile.ProfileProperties, "No profile was retrieved by a stranger");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when OnlineStatus privacy settings are set to everyone")]
        public void GetPrivacySettings_Everyone_OnlineStatus()
        {
            ProfileEx profileFriend = lib_userFriend_Everyone.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.OnlineStatus] != (uint)PrivacySettings.Everyone)
                Assert.Inconclusive("User {0}'s OnlineStatus privacy setting should be EVERYONE", userFriend_EveryoneGamertag);

            ProfileEx profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo, userFriend_EveryoneGamertag);
            Assert.IsNotNull(profile.PresenceInfo, "No profile was retrieved by a stranger");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when PlayedGames privacy settings are set to everyone")]
        public void GetPrivacySettings_Everyone_PlayedGames()
        {
            ProfileEx profileFriend = lib_userFriend_Everyone.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profileFriend.PrivacySettings[PrivacySetting.PlayedGames] != (uint)PrivacySettings.Everyone)
                Assert.Inconclusive("User {0}'s PlayedGames privacy setting should be EVERYONE", userFriend_EveryoneGamertag);

            ProfileEx profile = lib_userStranger.GetProfilePartnerXml(us_locale, SectionFlags.RecentGames, userFriend_EveryoneGamertag);
            Assert.IsNotNull(profile.RecentGames, "No RecentGames profile section was retrieved by a stranger");
        }

        #endregion GetProfile privacy settings - everyone

        #region ProfilePartner support functions

        private int GetFriendIndex(ProfileEx profileEx, string friendGamertag)
        {
            int i = 0;
            for (i = 0; i < profileEx.Friends.Count; i++)
            {
                if (profileEx.Friends[i].ProfileProperties[ProfileProperty.GamerTag].ToString() == friendGamertag)
                    return i;
            }
            Assert.Fail("Friend not found in results");
            return -1;
        }

        private uint IncrementPrivacySetting(uint n)
        {
            n++;
            if (n > 2)
                n = 0;
            return n;
        }

        #endregion ProfilePartner support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Utility\Constants.cs ===
﻿using System.Collections.Generic;

namespace Rewards.Test
{
    public class Constants
    {
        // Config files
        public const string REWARDS_CONFIG = "RewardsTransport.config.xml";
        public const string PROFILEUSER_CONFIG = "ProfileUser.Config.xml";

        // URLs
        public const string GdsNamespaceUri = "xmlns=\"http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects\"";
        public const string GdsContractsNamespaceUri = "xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\"";
        public const string DefaultXmlNamespace = "xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"";

        // Services
        public const string RewardsService = "RewardsService.svc"; //rewards
        public const string GameDataService = "Gamedata.svc"; //uds
        public const string ProfileService = "Profiles.svc"; //uds
        public const string GameDataPartnerService = "Gamedata.svc";  //uds-part
        public const string ProfilePartnerService = "Profile.svc"; //uds-part
        public const string PresencePartnerService = "Presence.svc"; //uds-part
        public const string MessagePartnerService = "Message.svc"; //uds-part
        public const string FriendPartnerService = "Friend.svc"; //uds-part

        // RewardsService path and queries
        public const string PostGameResult_RelativePathAndQuery = "/GameResult?format=xml";

        // GameDataService path and queries
        public const string GrantAchievements_RelativePathAndQuery = "/GrantAchievements?format=xml";
        public const string GrantAvatarAwards_RelativePathAndQuery = "/GrantAvatarAssets";
        public const string GetLeaderBoard_RelativePathAndQuery = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
        public const string GetAchievements_RelativePathAndQuery = "/achievements?format=xml&gameId={gameId}";
        public const string GetAvatarAwardsAssets_RelativePathAndQuery = "/avatarawardsassets?gameId={gameId}";
        public const string GetDataBlob_RelativePathAndQuery = "/Datablob?format=xml&datablobId={DataBlobId}";

        // ProfileService path and queries
        public const string GetProfile_RelativePathAndQuery = "/profile?format=xml&sectionflags={sectionflags}&gamertag={gamertag}";

        // GameDataPartnerService path and queries
        public const string GetGames_RelativePathAndQuery = "/games?gamertags={gamertags}&pageStart={pageStart}&pageCount={pageCount}";
        public const string GetAchievementsPartner_RelativePathAndQuery = "/achievements?gameId={gameId}&gamertags={gamertags}";

        // ProfilePartnerService path and queries
        public const string PostProfile_RelativePathAndQuery = "/";
        public const string GetProfilePartner_RelativePathAndQuery = "/profile?sectionFlags={sectionFlags}&friendsSectionFlags={friendsSectionFlags}&gamertag={gamertag}";
        public const string FreeGamertagChange_RelativePathAndQuery = "/gamertag/change?gamertag={gamertag}";

        // PresencePartnerService path and queries
        public const string PostPresence_RelativePathAndQuery = "/update";

        // FriendPartnerService path and queries
        public const string AddFriend_RelativePathAndQuery = "/add?gamertag={gamertag}";
        public const string AcceptFriend_RelativePathAndQuery = "/accept?gamertag={gamertag}";
        public const string DeclineFriend_RelativePathAndQuery = "/decline?gamertag={gamertag}";
        public const string RemoveFriend_RelativePathAndQuery = "/remove?gamertag={gamertag}";

        // MessagePartnerService path and queries
        public const string GetMessageSummaries_RelativePathAndQuery = "/summarylist?hashCode={hashCode}";
        public const string GetMessageDetails_RelativePathAndQuery = "/messagedetails?messageId={messageId}";
        public const string SendMessages_RelativePathAndQuery = "/send";
        public const string DeleteMessage_RelativePathAndQuery = "/delete?messageId={messageId}";
        public const string DeleteMessageAndBlockGamertag_RelativePathAndQuery = "/block?messageId={messageId}";

        // AppIDs and TitleIDs
        public const string BACKGAMMON_APPID = "c203973c-fd2b-4b8c-b785-5e38b3e35dec";
        public const string HEXICRUSH_APPID = "55755a91-2b4a-4879-969f-f4be081a8d13";

        //Profile sections
        public const SectionFlags AllProfileSections = SectionFlags.XboxLiveProperties | SectionFlags.Friends | SectionFlags.RecentGames | SectionFlags.RecentAchievements | SectionFlags.PresenceInfo | SectionFlags.PrivacySettings ;
        public const SectionFlags RecentGamesAndAchievementsSections = SectionFlags.RecentGames | SectionFlags.RecentAchievements;

        //LIVEn Error Codes
        public const uint LIVEnErrorCode_InvalidArgumentOrBadRequest = 2151475810;
        public const uint LIVEnErrorCode_InternalServiceError = 2151475811;
        public const uint LIVEnErrorCode_UserNotEligibleForFreeGamertagChange = 2151475812;
        public const uint LIVEnErrorCode_GamertagIsInvalid = 2151475813;
        public const uint LIVEnErrorCode_ErrorOccurredChangingGamertag = 2151475814;
        public const uint LIVEnErrorCode_GamertagDoesNotExist = 2151475815;
        public const uint LIVEnErrorCode_XPlatformTypeInvalidOrMissing = 2151475818;

        // Locales
        public const string UnsupportedLocale = "pt-BR";
    }

    /// <summary>
    /// Section flags used for Profile and ProfileEx calls
    /// </summary>
    public enum SectionFlags : uint
    {
        XboxLiveProperties = 1,
        WindowsLiveProperties = 2,  // Deprecated Windows Live Section
        Friends = 4,
        RecentGames = 8,
        RecentAchievements = 16,
        PresenceInfo = 32,
        PrivacySettings = 64,
        FriendsList = 128,
        AccountInformation = 256
    }

    /// <summary>
    /// Presence onlineStatus values
    /// </summary>
    public enum PresenceStatus : uint
    {
        Online = 0,
        Offline = 1,
        Away = 2,
        Busy = 3,
        Unknown = 4
    }

    /// <summary>
    /// Privacy settings values
    /// </summary>
    public enum PrivacySettings : uint
    {
        Everyone = 0,
        FriendsOnly = 1,
        Blocked = 2
    }

    /// <summary>
    /// FriendState enum values
    /// </summary>
    public enum FriendState : uint
    {
        Friend = 0,
        Pending = 1,
        Requesting = 2,
        NotAFriend = 3
    }

    /// <summary>
    /// Used to determine what property the Leaderboard should rank itself on
    /// Currently, only BestScore and BestTime are supported
    /// </summary>
    public enum LeaderboardPropertyType
    {
        BestScore = 0,
        BestTime,
        CumulativeScore,
        CumulativeTime,
        GamesPlayed,
        Wins,
        Losses,
        LastPlayedDateTime,
        BestScoreDataBlobId,
        BestTimeDataBlobId,
        AverageScore,
        AverageTime
    }

    public enum AuthenticationMethod
    {
        UserToken = 0,
        PartnerToken = 1,
        ClientCertificate = 2,
        UserAndPartnerToken = 3
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Utility\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Utility")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fdb39528-4f5e-454f-8281-39cc59539900")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Utility\XmlHelper.cs ===
﻿namespace Microsoft.TestTools
{
    using System;
    using System.IO;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Xml;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;

    public class XmlHelper : XmlDocument
    {
        #region member fields

        private const string READER_TYPE_ERROR = "Reader parameter type must be either an XmlReader, XmlTextReader, TextReader, StringReader or StreamReader";
        private const string NULL_OR_EMPTY_ERROR = "Object reference or strings passed into this method cannot be null or empty.";

        #endregion member fields

        #region public interface
        // Deserializes xml from string back into a class and
        // sets internal xml doc using the class type and xml string
        public T LoadXml<T>(string xmlString)
        {
            this.nullOrEmptyCheck(xmlString);

            T serializableClass = this.DeserializeXmlToObject<T>(xmlString);

            return serializableClass;
        }

        // Use this overload to load deserialize an xml file back into serializable class
        public T Load<T>(string fileSpec)
        {
            this.nullOrEmptyCheck(fileSpec);

            base.Load(fileSpec);

            return this.LoadXml<T>(this.InnerXml);
        }

        // Loads xml by first serializing class out to string, then loads string
        // into (this) by calling LoadXml
        public void Load(object serializableClass)
        {
            this.nullOrEmptyCheck(serializableClass);

            if (serializableClass.GetType() == typeof(string))
            {
                // Caller is passing a string which is most likely
                // a file spec. In this case a call to the base method is intended
                base.Load((string)serializableClass);
            }
            else
            {
                this.SerializeObjectToXmlDocument(serializableClass);
            }

        }

        // Serialize out to file and to XmlDocument
        public void Save(string fileSpec, object serializableClass)
        {
            this.nullOrEmptyCheck(fileSpec, serializableClass);

            this.SerializeObjectToXmlDocument(serializableClass);

            this.Save(fileSpec);
        }
        // Serialize out to Xml string
        public string SerializeObjectToXmlString(object serializableClass)
        {
            XmlObjectSerializer serializer = TryGetDeserializer(serializableClass.GetType());
            if (serializer != null)
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    serializer.WriteObject(ms, serializableClass);
                    ms.Position = 0;
                    byte[] buffer = ms.GetBuffer();
                    return Encoding.UTF8.GetString(buffer, 0, (int)ms.Length);
                }
            }

            return this.SerializeObjectToXmlString(serializableClass, false);
        }
        public string SerializeObjectToXmlString(object serializableClass, bool omitXmlDeclaration)
        {
            XmlDocument doc = this.SerializeObjectToXmlDocument(serializableClass, omitXmlDeclaration);

            return this.PrettyXml(doc);
        }
        public string SerializeObjectToXmlString(object serializableClass, bool omitXmlDeclaration, bool stripNamespaces)
        {
            string ret = this.SerializeObjectToXmlString(serializableClass, omitXmlDeclaration);

            if (stripNamespaces)
            {
                ret = this.StripNamespaces(ret);
            }
            return ret;
        }
        public XmlDocument SerializeObjectToXmlDocument(object serializableClass)
        {
            return this.SerializeObjectToXmlDocument(serializableClass, false);
        }

        // Serialize out to XmlDocument
        public XmlDocument SerializeObjectToXmlDocument(object serializableClass, bool omitXmlDeclaration)
        {
            this.nullOrEmptyCheck(serializableClass);

            XmlWriterSettings writerSettings = new XmlWriterSettings();
            if (omitXmlDeclaration)
            {
                writerSettings.OmitXmlDeclaration = true;
            }

            XmlSerializer xmlSerializer = new XmlSerializer(serializableClass.GetType());

            StringWriter stringWriter = new StringWriter();

            using (XmlWriter xmlWriter = XmlWriter.Create(stringWriter, writerSettings))
            {
                xmlSerializer.Serialize(xmlWriter, serializableClass);
            }

            string serializedXmlString = stringWriter.GetStringBuilder().ToString();

            this.LoadXml(serializedXmlString);

            return this as XmlDocument;

        }

        // Deserialize xml into object instance
        public T DeserializeXmlToObject<T>(string xmlString)
        {
            this.nullOrEmptyCheck(xmlString);

            TextReader textReader = new StringReader(xmlString);

            T serializableClass = this.DeserializeReaderToObject<T>(textReader);

            return serializableClass;
        }

        // Deserialize reader into object instance
        public T DeserializeReaderToObject<T>(object reader)
        {
            this.nullOrEmptyCheck(reader);

            XmlSerializer xmlSerializer = new XmlSerializer(typeof(T));

            T serializableClass = default(T);

            Type readerType = reader.GetType();

            switch (reader.GetType().ToString())
            {
                case "System.IO.TextReader":
                case "System.IO.StringReader":
                    serializableClass = (T)xmlSerializer.Deserialize(reader as TextReader);
                    break;

                case "System.IO.StreamReader":
                    serializableClass = (T)xmlSerializer.Deserialize(reader as StreamReader);
                    break;

                case "System.Xml.XmlTextReader":
                case "System.Xml.XmlReader":
                    serializableClass = (T)xmlSerializer.Deserialize(reader as XmlReader);
                    break;

                default:
                    throw new ArgumentException(READER_TYPE_ERROR);

            }

            this.Load(serializableClass);

            return serializableClass;
        }

        public string XMLEncode(string val)
        {
            //these 3 arrays must be of equal length
            string[] escSequences = { "&amp;", "&apos;", "&quot;", "&lt;", "&gt;" };
            string[] escEsc = { "#AMP#", "#APOS#", "#QUOT#", "#LT#", "#GT#" };
            string[] literals = { "&", ";", "\"", "<", ">" };

            string ret = val.Replace("�", "'").Replace("�", "\"").Replace("�", "\"");

            for (int i = 0; i < escEsc.Length; i++)
            {
                //try to find instances of the escEsc strings in val. if found, pad them up until they aren't found anymore
                while (val.IndexOf(escEsc[i]) != -1)
                {
                    escEsc[i] = "#" + escEsc[i] + "#";
                }
                //now, replace the escSequences strings with the padded escEsc strings (so they'll be safe from the later replacement)
                ret = ret.Replace(escSequences[i], escEsc[i]);
                //now, replace the reserved chars with their escapements
                ret = ret.Replace(literals[i], escSequences[i]);
                //now, put the original escSequences back in
                ret = ret.Replace(escEsc[i], escSequences[i]);
            }

            return ret;
        }

        public string XMLDecode(string val)
        {
            return val.Replace("&amp;", "&").Replace("&apos;", "'").Replace("&lt;", "<").Replace("&gt;", ">");
        }

        #endregion public interface

        #region private interface
        // Validate method parameters
        private void nullOrEmptyCheck(params object[] parameterList)
        {
            bool errorConditon = false;

            foreach (object obj in parameterList)
            {
                if (null == obj)
                {
                    errorConditon = true;
                }
                else
                {
                    if (obj.GetType() == typeof(string))
                    {
                        if (string.IsNullOrEmpty((string)obj))
                        {
                            errorConditon = true;
                        }
                    }
                }

                if (errorConditon)
                {
                    throw new ArgumentNullException(NULL_OR_EMPTY_ERROR);
                }
            }

        }
        public string PrettyXml(XmlNode node)
        {
            string ret = "";
            if (node != null)
            {
                MemoryStream memoryStream = new MemoryStream();
                XmlTextWriter writer = new XmlTextWriter(memoryStream, Encoding.Unicode);

                writer.Formatting = Formatting.Indented;

                // Write the XML into a formatting XmlTextWriter
                node.WriteContentTo(writer);
                writer.Flush();
                memoryStream.Flush();
                // Have to rewind the MemoryStream in order to read
                // its contents.
                memoryStream.Position = 0;

                // Read MemoryStream contents into a StreamReader.
                StreamReader reader = new StreamReader(memoryStream);

                // Extract the text from the StreamReader.
                ret = reader.ReadToEnd();

                memoryStream.Dispose();
            }
            return ret;

        }
        public string StripNamespaces(string xmlString)
        {
            string pattern = @"\sxmlns=""""";
            string ret = Regex.Replace(xmlString, pattern, "");

            pattern = @"\sxmlns[:|=][^=]*=[""][^""]*[""]";
            ret = Regex.Replace(ret, pattern, "");

            pattern = @"\sxmlns:(?<ns>[^=]+)=[""][^""]*[""]";
            MatchCollection matches = Regex.Matches(xmlString, pattern);
            foreach (Match m in matches)
            {
                string val = m.Groups["ns"].Value;
                try
                {
                    ret = Regex.Replace(ret, @"\s" + val + ":", " ");
                    ret = Regex.Replace(ret, @"<" + val + ":", "<");
                    ret = Regex.Replace(ret, @"</" + val + ":", "</");
                }
                catch { }

            }
            return ret;
        }
        public string StripXmlDeclaration(string xmlString)
        {
            string pattern = @"<\?xml.*>";
            string ret = Regex.Replace(xmlString, pattern, "");
            return ret;
        }
        #endregion private interface

        private static bool HasCustomAttribute<T>(Type dataContractType) where T : Attribute
        {
            if (dataContractType.GetCustomAttributes(typeof(T), false).Length > 0)
            {
                return true;
            }

            return false;
        }

        private static XmlObjectSerializer TryGetDeserializer(Type serializationType)
        {
            XmlObjectSerializer returnSerializer  = null;

            if (serializationType == null)
            {
                return null;
            }

            if (serializationType == typeof(string))
            {
                return null;
            }

            if (HasCustomAttribute<DataContractAttribute>(serializationType))
            {
                returnSerializer = new DataContractSerializer(serializationType);
            }

            return returnSerializer;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\ActiveAuthEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ActiveAuthEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("ActiveAuthEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("dbc5a2de-8c71-442c-ad9b-b997cf06a3fd")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Utilities\TestScenarioLibrary.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Xml.Linq;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;

namespace Rewards.Test
{
    public class RewardsTestScenarioLibrary
    {
        private RewardsTransport rewardsTransport;

        private RewardsTestScenarioLibrary sendMessageUser = null;

        /// <summary>
        /// Array containing all the ProfileProperties that should Not be Returned as part of a Profile object
        /// </summary>
        private static ProfileProperty[] ProfilePropertiesNotReturned = { ProfileProperty.Xuid, 
                                                                        ProfileProperty.WindowsLiveDisplayImageUrl, 
                                                                        ProfileProperty.WindowsLiveDisplayName,  
                                                                        ProfileProperty.Cid };

        private static PrivacySetting[] ProfilePrivacySettings = { PrivacySetting.FriendsList,
                                                                 PrivacySetting.GamerProfile,
                                                                 PrivacySetting.MemberContent,
                                                                 PrivacySetting.OnlineStatus,
                                                                 PrivacySetting.PlayedGames,
                                                                 PrivacySetting.Video,
                                                                 PrivacySetting.VoiceAndText};

        private static XmlHelper xhelp = new XmlHelper();
        private static TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private static string us_locale = "en-US";

        #region Constructors

        public RewardsTestScenarioLibrary()
        {
            this.rewardsTransport = new RewardsTransport();
        }

        public RewardsTestScenarioLibrary(RewardsTransport rTransport)
        {
            this.rewardsTransport = rTransport;
        }

        public RewardsTestScenarioLibrary(string username, string password)
        {
            this.rewardsTransport = new RewardsTransport(username, password);
        }

        public RewardsTestScenarioLibrary(Account acct)
        {
            this.rewardsTransport = new RewardsTransport(acct.XblUser.Settings.UserPassportInfo.MemberName, acct.XblUser.Settings.UserPassportInfo.Password);
        }

        public RewardsTestScenarioLibrary(bool createNewAccount)
        {
            if (createNewAccount)
            {
                try
                {
                    Account acct = AccountTransport.CreateAccount();
                    this.rewardsTransport = new RewardsTransport(acct.XblUser.Settings.PersonalInfo.Email, acct.XblUser.Settings.UserPassportInfo.Password);
                }
                catch (Exception err)
                {
                    Assert.Inconclusive("Account creation unsuccessful " + err.ToString());
                }
            }
        }

        #endregion Constructors
        #region FullResponse

        public Response PostGameResult(string gameResultString, string locale, string platformId, uint titleId)
        {
            Response result = this.rewardsTransport.PostGameResult(gameResultString, locale, platformId, titleId);
            Thread.Sleep(2000);
            return result;
        }

        public Response GetLeaderboardXml(string gameID, string variant, string property, string rankStart, string dataGroup, string rows, string locale, string platformId, string socialGraph)
        {
            Response result = this.rewardsTransport.GetLeaderboard(gameID, variant, property, rankStart, dataGroup, rows, locale, platformId, socialGraph);
            return result;
        }

        public Response GetDatablobXml(string datablobID, string locale, string platformId, string gameId)
        {
            Response result = this.rewardsTransport.GetDatablob(datablobID, locale, platformId, gameId);
            return result;
        }

        public Response GetAchievementsXml(string gameId, string locale, string platformId)
        {
            Response result = this.rewardsTransport.GetAchievements(gameId, locale, platformId);
            return result;
        }

        public Response GetAvatarAwardsAssetsXml(string gameId, string locale, string platformId)
        {
            Response result = this.rewardsTransport.GetAvatarAwardsAssets(gameId, locale, platformId);
            return result;
        }

        public Response GetProfileYouView(string locale, string platformId, string sectionFlags, string gamerTag)
        {
            uint titleId = TestGameUtility.GamesHubTitle.GameId;

            Response response = this.rewardsTransport.GetProfile(locale, titleId, platformId, sectionFlags, gamerTag);
            return response;
        }

        public Response GetProfileMyView(string locale, string platformId, SectionFlags sectionFlags)
        {
            uint titleId = TestGameUtility.GamesHubTitle.GameId;

            Response response = this.rewardsTransport.GetProfile(locale, titleId, platformId, ((uint)sectionFlags).ToString());
            return response;
        }

        public Response GetProfilePartner(string locale, SectionFlags sectionFlags)
        {
            Response response = this.rewardsTransport.GetProfilePartner(locale, LiveApp.GameId, LiveApp.PlatformId.ToString(), ((uint?)sectionFlags).ToString(), null, null);
            return response;
        }

        public Response GetProfilePartner(string locale, SectionFlags sectionFlags, string gamertag)
        {
            Response response = this.rewardsTransport.GetProfilePartner(locale, LiveApp.GameId, LiveApp.PlatformId.ToString(), ((uint?)sectionFlags).ToString(), null, gamertag);
            return response;
        }

        public Response GetProfilePartner(string locale, SectionFlags sectionFlags, SectionFlags friendsSectionFlags)
        {
            Response response = this.rewardsTransport.GetProfilePartner(locale, LiveApp.GameId, LiveApp.PlatformId.ToString(), ((uint?)sectionFlags).ToString(), ((uint?)friendsSectionFlags).ToString(), null);
            return response;
        }

        public Response PostProfilePartner(string profileString, string locale)
        {
            return PostProfilePartner(profileString, locale, AuthenticationMethod.PartnerToken);
        }

        public Response PostProfilePartner(string profileString, string locale, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.PostProfilePartner(profileString, locale, LiveApp.PlatformId.ToString(), LiveApp.GameId, authMethod);
            Thread.Sleep(2000);
            return response;
        }
        public Response PostPresence(string locale)
        {
            return PostPresence(locale, AuthenticationMethod.PartnerToken);
        }

        public Response PostPresence(string locale, AuthenticationMethod authMethod)
        {
            return this.rewardsTransport.PostPresence(locale, LiveApp.PlatformId.ToString(), LiveApp.GameId, authMethod);
        }

        public Response PostPresence(string locale, string platform, uint gameId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.PostPresence(locale, platform, gameId, authMethod);
            Thread.Sleep(2000);
            return response;
        }

        /// <summary>
        /// Calls the get Games web service on the UserDataPartnerService.
        /// </summary>
        /// <param name="gamertags">Comma-delimeted list of gamertags used for comparing games</param>
        /// <param name="pageStart">Optional.  This specifies the zero-based page. Defaults to 0.</param>
        /// <param name="pageCount">Optional.  This specifies the max number of games returned. Defaults to 100.</param>
        /// <param name="locale">locale for games</param>
        /// <returns>Response for service call to get Games</returns>
        public Response GetGames(string gamertags, string pageStart, string pageCount, string locale)
        {
            TestGame liveApp = TestGameUtility.LiveAppTitle;
            Response response = this.rewardsTransport.GetGamesPartnerService(liveApp.GameId.ToString(), gamertags, pageStart, pageCount, locale, liveApp.PlatformId.ToString());
            return response;
        }

        /// <summary>
        /// Does a POST to call the Get Achievements web service from UserDataPartnerService
        /// </summary>
        /// <param name="gamertags">Comma-delimeted list of gamertags</param>
        /// <param name="gameId">The gameId of the game for which to get achievements</param>
        /// <param name="locale">locale of game</param>
        /// <returns>Response for service POST call to GetAchievements</returns>
        public Response GetAchievementsPartner(string gamertags, string gameId, string locale)
        {
            Response response = this.rewardsTransport.GetAchievementsPartnerService(gamertags, gameId, LiveApp.GameId, locale, LiveApp.PlatformId);
            return response;
        }

        public Response FreeGamertagChange(string gamertag, string titleId, string locale, string platformId)
        {
            return FreeGamertagChange(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response FreeGamertagChange(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.FreeGamertagChange(gamertag, locale, platformId, titleId, authMethod);
            return response;
        }

        public Response GetMessageSummaries(string hashCode, string titleId, string locale, string platformId)
        {
            return GetMessageSummaries(hashCode, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response GetMessageSummaries(string hashCode, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.GetMessageSummaries(hashCode, titleId, locale, platformId, authMethod);
            return response;
        }

         public Response GetMessageDetails(string messageId, string titleId, string locale, string platformId)
        {
            return GetMessageDetails(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response GetMessageDetails(string messageId, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.GetMessageDetails(messageId, titleId, locale, platformId, authMethod);
            return response;
        }

         public Response SendMessage(string strMessagesRequest, string titleId, string locale, string platformId)
        {
            return SendMessage(strMessagesRequest, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response SendMessage(string strMessagesRequest, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.SendMessage(strMessagesRequest, titleId, locale, platformId, authMethod);
            return response;
        }

        public Response DeleteMessage(string messageId, string titleId, string locale, string platformId)
        {
            return DeleteMessage(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response DeleteMessage(string messageId, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.DeleteMessage(messageId, titleId, locale, platformId, authMethod);
            return response;
        }

        public Response DeleteMessageAndBlockGamertag(string messageId, string titleId, string locale, string platformId)
        {
            return DeleteMessageAndBlockGamertag(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response DeleteMessageAndBlockGamertag(string messageId, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.DeleteMessageAndBlockGamertag(messageId, titleId, locale, platformId, authMethod);
            return response;
        }

        
        public Response AddFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return AddFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }


        public Response AddFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.AddFriend(gamertag, titleId, locale, platformId, authMethod);
            return response;
        }
        
        public Response AcceptFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return AcceptFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response AcceptFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.AcceptFriend(gamertag, titleId, locale, platformId, authMethod);
            return response;
        }

        public Response DeclineFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return DeclineFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response DeclineFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.DeclineFriend(gamertag, titleId, locale, platformId, authMethod);
            return response;
        }

        public Response RemoveFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return RemoveFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response RemoveFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.RemoveFriend(gamertag, titleId, locale, platformId, authMethod);
            return response;
        }

        public Response ExecuteCustomQuery(string service, string query, string requestBody, TestGame tg)
        {
            string fullUri = string.Empty;
            Response resp = new Response();

            switch (service.ToLower())
            {
                case "getleaderboard":
                case "getdatablob":
                case "getachievements":
                case "getavatarawardsassets":
                    fullUri = rewardsTransport.GameDataService_fullUri + query;
                    rewardsTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, tg.PlatformId.ToString(), rewardsTransport.CurrentStsTicket, string.Empty);
                    break;

                case "grantachievements":
                    fullUri = rewardsTransport.GameDataService_fullUri + query;
                    rewardsTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, tg.PlatformId.ToString(), rewardsTransport.CurrentStsTicket, string.Empty);
                    break;

                case "grantavatarassets":
                    fullUri = rewardsTransport.GameDataService_fullUri + query;
                    rewardsTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, tg.PlatformId.ToString(), rewardsTransport.CurrentStsTicket, string.Empty);
                    break;

                case "postgameresult":
                    fullUri = rewardsTransport.RewardsService_fullUri + query;
                    rewardsTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, tg.PlatformId.ToString(), rewardsTransport.CurrentStsTicket, string.Empty);
                    break;

                case "getachievementspartner":
                case "getgames":
                    fullUri = rewardsTransport.GameDataPartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, LiveApp.PlatformId.ToString(), string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                case "getprofile":
                    fullUri = rewardsTransport.ProfileService_fullUri + query;
                    rewardsTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, tg.PlatformId.ToString(), rewardsTransport.CurrentStsTicket, string.Empty);
                    break;

                case "getprofilepartner":
                    fullUri = rewardsTransport.ProfilePartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, LiveApp.PlatformId.ToString(),string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                case "postprofile":
                    fullUri = rewardsTransport.ProfilePartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, LiveApp.PlatformId.ToString(),string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                case "postpresence":
                    fullUri = rewardsTransport.PresencePartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, fullUri, us_locale, LiveApp.PlatformId.ToString(),string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                case "getmessages":
                case "getmessagedetails":
                    fullUri = rewardsTransport.MessagePartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, LiveApp.PlatformId.ToString(),string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                case "sendmessage":
                case "deletemessageandblockgamertag":
                    fullUri = rewardsTransport.MessagePartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("DELETE", null, fullUri, us_locale, LiveApp.PlatformId.ToString(), string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                case "deletemessage":
                    fullUri = rewardsTransport.MessagePartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("DELETE", null, fullUri, us_locale, LiveApp.PlatformId.ToString(), string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                case "addfriend":
                case "acceptfriend":
                case "declinefriend":
                case "removefriend":
                    fullUri = rewardsTransport.FriendPartnerService_fullUri + query;
                    rewardsTransport.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);
                    resp = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, fullUri, us_locale, LiveApp.PlatformId.ToString(), string.Empty, rewardsTransport.CurrentStsTicket);
                    break;

                default:
                    Assert.Fail("Service name mismatch-- please check the service name used in the method call.");
                    break;
            }

            return resp;
        }

        #endregion FullResponse
        #region Basic API wrappers
        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. 
        /// </summary>
        /// <param name="gameResultString"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public Response PostGameResult(string gameResultString, string locale, PlatformType platformId, uint titleId)
        {
            Response result = this.rewardsTransport.PostGameResult(gameResultString, locale, ((uint)platformId).ToString(), titleId);
            Thread.Sleep(2000);
            return result;
        }

        /// <summary>
        /// Uses the transport class to call the GetLeaderboards API with the provided values. 
        /// </summary>
        /// <param name="rpsTicket">the RPS ticket of the user</param>
        /// <param name="gameID">the ID of the game</param>
        /// <param name="variant">variant</param>
        /// <param name="property">the property name to rank</param>
        /// <param name="rankStart">the rank to start at (1-based index)</param>
        /// <param name="dataGroup">datagroup (Lifetime, W1, W2, W3, W4, W5, All)</param>
        /// <param name="rows">the maximum number of rows to return</param>
        /// <returns>a valid LeaderboardResult object containing the relevant stats</returns>
        public LeaderboardResult GetLeaderboardXml(uint gameID, uint variant, string property, uint rankStart, string dataGroup, uint rows, string locale, uint platformId)
        {
            Response response = this.GetLeaderboardXml(gameID.ToString(), variant.ToString(), property, rankStart.ToString(), dataGroup, rows.ToString(), locale, platformId.ToString(), "2");

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            LeaderboardResult result = RewardsTestUtil.DeserializeLeaderboardResponseToObject<LeaderboardResult>(response.Body);
            return result;
        }

        /// <summary>
        /// Uses the transport class to call the GetDatablobXml API with the provided values. 
        /// </summary>
        /// <param name="rpsTicket">the RPS ticket of the user</param>
        /// <param name="datablobID">the ID of the datablob to get</param>
        /// <returns>a valid DatablobResult object</returns>
        public DatablobResult GetDatablobXml(string datablobID, string locale, uint platformId, uint gameId)
        {
            Response response = this.GetDatablobXml(datablobID, locale, platformId.ToString(), gameId.ToString());

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }
            response.Body = xhelp.StripNamespaces(response.Body);
            DatablobResult result = xhelp.LoadXml<DatablobResult>(response.Body);
            return result;
        }

        /// <summary>
        /// Calls the GetAchievements API with the specified values
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <returns>AchievementResult</returns>
        public AvatarAwardsAssetResult GetAvatarAwardsAssetsXml(uint gameId, string locale, uint platformId)
        {
            Response response = this.GetAvatarAwardsAssetsXml(gameId.ToString(), locale, platformId.ToString());

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }
            string responseBody = response.Body;
            responseBody = responseBody.Replace("xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\"", "");
            AvatarAwardsAssetResult result = xhelp.LoadXml<AvatarAwardsAssetResult>(responseBody);
            return result;
        }

        /// <summary>
        /// Calls the GetAchievements API with the specified values
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <returns>AchievementResult</returns>
        public AchievementsResult GetAchievementsXml(uint gameId, string locale, uint platformId)
        {
            Response response = this.GetAchievementsXml(gameId.ToString(), locale, platformId.ToString());

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }
            string responseBody = response.Body;
            responseBody = responseBody.Replace("xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\"", "");
            AchievementsResult result = xhelp.LoadXml<AchievementsResult>(responseBody);
            return result;
        }

        /// <summary>
        /// Uses the transport class to call the GrantAvatarAssets API with the provided values. 
        /// </summary>
        /// <param name="grantAvatarAsset">The avatarasset to be granted</param>
        /// <param name="rpsTicket">the RPS ticket of the user</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAvatarAssets(string grantAvatarAssets, string locale, string platformId, string gameId)
        {
            Response result = rewardsTransport.PostGrantAvatarAwards(grantAvatarAssets, locale, platformId, gameId);
            Thread.Sleep(2000);
            return result;
        }

        /// <summary>
        /// Uses the transport class to call the GrantAchievements API with the provided values. 
        /// </summary>
        /// <param name="grantAchievements">The achievements to be granted</param>
        /// <param name="rpsTicket">the RPS ticket of the user</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAchievements(string grantAchievements, string locale, string platformId)
        {
            Response result = rewardsTransport.PostGrantAchievements(grantAchievements, locale, platformId);
            Thread.Sleep(2000);
            return result;
        }

        /// <summary>
        /// Returns the profile information for the current user
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <param name="sectionFlags"></param>
        /// <returns></returns>
        public Profile GetProfileMyView(string locale, uint platformId, SectionFlags sectionFlags)
        {
            Response response = this.GetProfileMyView(locale, platformId.ToString(), sectionFlags);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            Profile pro = xhelp.LoadXml<Profile>(response.Body);
            return pro;
        }

        /// <summary>
        /// Returns the profile information for a specific gamertag
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <param name="sectionFlags"></param>
        /// <param name="gamertag"></param>
        /// <returns></returns>
        public Profile GetProfileYouView(string locale, uint platformId, SectionFlags sectionFlags, string gamertag)
        {
            Response response = this.GetProfileYouView(locale, platformId.ToString(), ((uint)sectionFlags).ToString(), gamertag);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            Profile pro = xhelp.LoadXml<Profile>(response.Body);
            return pro;
        }

        private ProfileEx GetProfilePartnerXml(string locale, SectionFlags sectionFlags, SectionFlags? friendsSectionFlags, string gamertag)
        {
            return GetProfilePartnerXml(locale, sectionFlags, friendsSectionFlags, gamertag, AuthenticationMethod.PartnerToken);
        }

        private ProfileEx GetProfilePartnerXml(string locale, SectionFlags sectionFlags, SectionFlags? friendsSectionFlags, string gamertag, AuthenticationMethod authMethod)
        {
            Response response = this.rewardsTransport.GetProfilePartner(locale, LiveApp.GameId, LiveApp.PlatformId.ToString(), ((uint?)sectionFlags).ToString(), ((uint?)friendsSectionFlags).ToString(), gamertag, authMethod);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            ProfileEx pro = xhelp.LoadXml<ProfileEx>(response.Body);
            return pro;
        }

        /// <summary>
        /// Returns the profile information for the current user and friends
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="sectionFlags">SectionFlags.Friends must be included in the bitmask for a valid call</param>
        /// <param name="friendsSectionFlags">SectionFlags.Friends and SectionFlags.PrivacySettings not allowed for a valid call</param>
        public ProfileEx GetProfilePartnerXml(string locale, SectionFlags sectionFlags, SectionFlags friendsSectionFlags)
        {
            ProfileEx pro = this.GetProfilePartnerXml(locale, sectionFlags, friendsSectionFlags, null);
            return pro;
        }

        /// <summary>
        /// Returns the profile information for the user with the specified gamertag
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="sectionFlags"></param>
        /// <param name="gamertag"></param>
        public ProfileEx GetProfilePartnerXml(string locale, SectionFlags sectionFlags, string gamertag)
        {
            ProfileEx pro = this.GetProfilePartnerXml(locale, sectionFlags, null, gamertag);
            return pro;
        }

        /// <summary>
        /// Returns the profile information for the current user
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="sectionFlags"></param>
        public ProfileEx GetProfilePartnerXml(string locale, SectionFlags sectionFlags)
        {
            ProfileEx pro = this.GetProfilePartnerXml(locale, sectionFlags, null, null);
            return pro;
        }
        /// <summary>
        /// Returns the profile information for the current user, sending in a user token
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="sectionFlags"></param>
        public ProfileEx GetProfilePartnerXml(string locale, SectionFlags sectionFlags, AuthenticationMethod authMethod)
        {
            ProfileEx pro = this.GetProfilePartnerXml(locale, sectionFlags, null, null, authMethod);
            return pro;
        }

        /// <summary>
        /// Returns the presence information for the current user and friends
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="sectionFlags"></param>
        /// <param name="friendsSectionFlags"></param>
        /// <returns></returns>
        public Presence GetPresenceXml(string locale, SectionFlags sectionFlags, SectionFlags friendsSectionFlags)
        {
            Response response = this.GetProfilePartner(locale, sectionFlags, friendsSectionFlags);
            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }
            string responseBody = response.Body;
            responseBody = responseBody.Replace("xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\"", "");
            Presence presence = xhelp.LoadXml<Presence>(response.Body);
            return presence;
        }

        /// <summary>
        /// Calls the get Games web service on the UserDataPartnerService.
        /// </summary>
        /// <param name="gamertags">Comma-delimeted list of gamertags used for comparing games</param>
        /// <param name="locale">locale for games</param>
        /// <returns>Games object returned from web service call to GetGames</returns>
        public Gds.Contracts.Games GetGamesXml(string gamertags, string locale)
        {
            return this.GetGamesXml(gamertags, 0, 100, locale);
        }

        /// <summary>
        /// Calls the get Games web service on the UserDataPartnerService.
        /// </summary>
        /// <param name="gamertags">Comma-delimeted list of gamertags used for comparing games</param>
        /// <param name="pageStart">Optional.  This specifies the zero-based page. Defaults to 0.</param>
        /// <param name="pageCount">Optional.  This specifies the max number of games returned. Defaults to 100.</param>
        /// <param name="locale">locale for games</param>
        /// <returns>Games object returned from web service call to GetGames</returns>
        public Gds.Contracts.Games GetGamesXml(string gamertags, uint? pageStart, uint? pageCount, string locale)
        {
            Response response = this.GetGames(gamertags, pageStart.ToString(), pageCount.ToString(), locale);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            //This is a hack so the deserialization of the gamertag works - bug 6135
            response.Body = response.Body.Replace("GamerTag", "Gamertag");

            string strNoNamespace = xhelp.StripNamespaces(response.Body);
            Gds.Contracts.Games games = xhelp.LoadXml<Gds.Contracts.Games>(strNoNamespace);

            return games;
        }

        /// <summary>
        /// Does a POST to call the Get Achievements web service from UserDataPartnerService
        /// </summary>
        /// <param name="gamertags">Comma-delimeted list of gamertags used for comparing games</param>
        /// <param name="gameId">The gameId of the game for which to get achievements</param>
        /// <param name="locale">The locale of the game</param>
        /// <returns>Achievements object returned from web service call to GetAchievements</returns>
        public Achievements GetAchievementsPartnerXml(string gamertags, uint gameId, string locale)
        {
            Response response = this.GetAchievementsPartner(gamertags, gameId.ToString(), locale);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            //This is a hack so the deserialization of the gamertag works
            response.Body = response.Body.Replace("GamerTag", "Gamertag");

            string strNoNamespace = xhelp.StripNamespaces(response.Body);
            Achievements achievements = xhelp.LoadXml<Achievements>(strNoNamespace);

            return achievements;
        }

        /// <summary>
        /// Does a POST to call the Get Achievements web service from UserDataPartnerService
        /// </summary>
        /// <param name="achivementsRequest">AchievementsRequest containing GamerTags and GameId</param>
        /// <param name="gameId">The gameId of the game for which to get achievements</param>
        /// <param name="locale">The locale of the game</param>
        /// <returns>Achievements object returned from web service call to GetAchievements</returns>
        public Achievements GetAchievementsPartnerXml(AchievementsRequest achivementsRequest, uint gameId, string locale)
        {
            string strAchievementsRequest = xhelp.SerializeObjectToXmlString(achivementsRequest);
            Achievements achievements = GetAchievementsPartnerXml(strAchievementsRequest, gameId, locale);

            return achievements;
        }

        
        public Response FreeGamertagChange(string gamertag, uint titleId, string locale, uint platformId)
        {
            return FreeGamertagChange(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response FreeGamertagChange(string gamertag, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            Response response = FreeGamertagChange(gamertag, titleId.ToString(), locale, platformId.ToString(), authMethod);

            //If body is empty then that means the call passed
            if (string.IsNullOrEmpty(response.Body))
            {
                Thread.Sleep(61000);
            }

            return response;
        }

        public string[] FreeGamertagChange(string gamertag)
        {
            Response response = FreeGamertagChange(gamertag, LiveApp.GameId.ToString(), us_locale, LiveApp.PlatformId.ToString());

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            string strNoNamespace = xhelp.StripNamespaces(response.Body);
            string[] suggestions = xhelp.LoadXml<String[]>(strNoNamespace);
            return suggestions;
        }

        public MessageSummariesResponse GetMessageSummaries(uint titleId, string locale, uint platformId)
        {
            return GetMessageSummaries(titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Gets ALL message summaries (does NOT send hash code)
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public MessageSummariesResponse GetMessageSummaries(uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            return this.GetMessageSummaries(null, titleId, locale, platformId, authMethod);
        }

        public MessageSummariesResponse GetMessageSummaries(string hashCode, uint titleId, string locale, uint platformId)
        {
            return GetMessageSummaries(hashCode, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public MessageSummariesResponse GetMessageSummaries(string hashCode, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            Response response = this.GetMessageSummaries(hashCode, titleId.ToString(), locale, platformId.ToString(), authMethod);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            string strNoNamespace = xhelp.StripNamespaces(response.Body);
            MessageSummariesResponse messages = xhelp.LoadXml<MessageSummariesResponse>(strNoNamespace);
            return messages;
        }

        public Response SendMessage(SendMessageRequest sendMessageRequest, uint titleId, string locale, uint platformId)
        {
            return SendMessage(sendMessageRequest, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }


        public Response SendMessage(SendMessageRequest sendMessageRequest, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            //Thread.Sleep(61000);
            string strSendMessageRequest = xhelp.SerializeObjectToXmlString(sendMessageRequest);

            Response response = SendMessage(strSendMessageRequest, titleId.ToString(), locale, platformId.ToString(), authMethod);

            return response;
        }

        public MessageDetails GetMessageDetails(uint messageId, uint titleId, string locale, uint platformId)
        {
            return GetMessageDetails(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public MessageDetails GetMessageDetails(uint messageId, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            Response response = this.GetMessageDetails(messageId.ToString(), titleId.ToString(), locale, platformId.ToString(), authMethod);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            string strNoNamespace = xhelp.StripNamespaces(response.Body);
            MessageDetails messageDetails = xhelp.LoadXml<MessageDetails>(strNoNamespace);
            return messageDetails;
        }

        public Response DeleteMessage(uint messageId, uint titleId, string locale, uint platformId)
        {
            return DeleteMessage(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response DeleteMessage(uint messageId, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            return this.DeleteMessage(messageId.ToString(), titleId.ToString(), locale, platformId.ToString(), authMethod);
        }

        
        public Response DeleteMessageAndBlockGamertag(uint messageId, uint titleId, string locale, uint platformId)
        {
            return DeleteMessageAndBlockGamertag(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response DeleteMessageAndBlockGamertag(uint messageId, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            return this.DeleteMessageAndBlockGamertag(messageId.ToString(), titleId.ToString(), locale, platformId.ToString(), authMethod);
        }

        
        public Response AddFriend(string gamertag, uint titleId, string locale, uint platformId)
        {
            return AddFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response AddFriend(string gamertag, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            return this.AddFriend(gamertag, titleId.ToString(), locale, platformId.ToString(), authMethod);
        }

        public Response AcceptFriend(string gamertag, uint titleId, string locale, uint platformId)
        {
            return AcceptFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response AcceptFriend(string gamertag, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            return this.AcceptFriend(gamertag, titleId.ToString(), locale, platformId.ToString(), authMethod);
        }
        
        public Response DeclineFriend(string gamertag, uint titleId, string locale, uint platformId)
        {
            return DeclineFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response DeclineFriend(string gamertag, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            return this.DeclineFriend(gamertag, titleId.ToString(), locale, platformId.ToString(), authMethod);
        }

        
        public Response RemoveFriend(string gamertag, uint titleId, string locale, uint platformId)
        {
            return RemoveFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        public Response RemoveFriend(string gamertag, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            return this.RemoveFriend(gamertag, titleId.ToString(), locale, platformId.ToString(), authMethod);
        }

        #endregion Basic API wrappers
        #region PostGameResult helpers

        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. 
        /// </summary>
        /// <param name="gameResult">the game result to save</param>
        public Response PostGameResult(GameResult gameResult, string locale, PlatformType platformId, uint titleId)
        {
            return this.PostGameResult(gameResult, locale, (uint)platformId, titleId);
        }

        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. 
        /// </summary>
        /// <param name="gameResult">the game result to save</param>
        public Response PostGameResult(GameResult gameResult, string locale, uint platformId, uint titleId)
        {
            return this.PostGameResult(gameResult, locale, platformId.ToString(), titleId);
        }

        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. Use for non-uint invalid PlatformId's.
        /// </summary>
        /// <param name="gameResult">the game result to save</param>
        public Response PostGameResult(GameResult gameResult, string locale, string platformId, uint titleId)
        {
            string gameResultString = RewardsTestUtil.GetPostGameResultString(gameResult);
            return this.PostGameResult(gameResultString, locale, platformId, titleId);
        }

        public Response PostGameResultWithDefaultStats(TestGame tg, string locale)
        {
            GameResult gameResult = this.CreateGameResult(tg.GameId,
                                                          Guid.NewGuid(),
                                                          DateTime.Now,
                                                          1,
                                                          1,
                                                          "Win",
                                                          "blob",
                                                          tg.Variant);

            return this.PostGameResult(gameResult, locale, tg.PlatformId, tg.GameId);
        }

        public GameResult CreateGameResult(uint gameId, Guid gameResultId, DateTime timeStamp, long score, long time, string outcome, string blob, uint variant)
        {
            GameResult gameResult = new GameResult();
            gameResult.GameId = gameId;
            gameResult.GameResultId = gameResultId;
            gameResult.TimeStamp = timeStamp;
            gameResult.Score = score;
            gameResult.Time = time;
            gameResult.Outcome = outcome;
            gameResult.Blob = Encoding.UTF8.GetBytes(blob);
            gameResult.Variant = variant;

            return gameResult;
        }

        /// <summary>
        /// Create a GameResult object for a given game with a malfomed game result
        /// </summary>
        /// <param name="missingParam">The param to leave off ("gameId", "gameResultId", "timeStamp", "score", "time", "outcome", "blob", "variant")</param>
        public GameResult CreateGameResult_MalformedResult(string missingParam, uint gameId, Guid gameResultId, DateTime timeStamp, long score, long time, string outcome, string blob, uint variant)
        {
            GameResult gameResult = new GameResult();
            if (missingParam.ToLower() != "gameid") { gameResult.GameId = gameId; }
            if (missingParam.ToLower() != "gameresultid") { gameResult.GameResultId = gameResultId; }
            if (missingParam.ToLower() != "timestamp") { gameResult.TimeStamp = timeStamp; }
            if (missingParam.ToLower() != "score") { gameResult.Score = score; }
            if (missingParam.ToLower() != "time") { gameResult.Time = time; }
            if (missingParam.ToLower() != "outcome") { gameResult.Outcome = outcome; }
            if (missingParam.ToLower() != "blob") { gameResult.Blob = Encoding.UTF8.GetBytes(blob); }
            if (missingParam.ToLower() != "variant") { gameResult.Variant = variant; }

            return gameResult;
        }

        public GameResult CreateGameResultWithDefaultStats(TestGame tg, string locale)
        {
            return this.CreateGameResult(tg.GameId,
                                        Guid.NewGuid(),
                                        DateTime.Now,
                                        1,
                                        1,
                                        "Win",
                                        "blob",
                                        tg.Variant);

        }

        public Response PostGameResultWithDefaultStatsAndLoss(TestGame tg, string locale)
        {

            GameResult gameResult = this.CreateGameResult(tg.GameId,
                                                          Guid.NewGuid(),
                                                          DateTime.Now,
                                                          1,
                                                          1,
                                                          "Loss",
                                                          "blob",
                                                          tg.Variant);

            return this.PostGameResult(gameResult, locale, tg.PlatformId, tg.GameId);
        }

        public Response PostGameResult(TestGame testGame, string locale, long score, long time, string outcome, string blob)
        {
            GameResult gr = this.CreateGameResult(testGame, score, time, blob, outcome);
            return this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
        }

        public Response PostGameResultForUser(GameResult gameResult, string username, string password, string locale, uint platformId, uint titleId)
        {
            RewardsTransport transport = new RewardsTransport(username, password);
            string gameResultSting = RewardsTestUtil.GetPostGameResultString(gameResult);
            return transport.PostGameResult(gameResultSting, locale, platformId.ToString(), titleId);
        }

        public Response PostGameResultForUser(GameResult gameResult, Account acct, string locale, uint platformId, uint titleId)
        {
            return this.PostGameResultForUser(gameResult,
                                              acct.XblUser.Settings.UserPassportInfo.MemberName,
                                              acct.XblUser.Settings.UserPassportInfo.Password,
                                              locale, platformId, titleId);
        }

        #endregion PostGameResult helpers
        #region GetLeaderboard helpers

        public LeaderboardResult PostGameResultAndRetrieveLeaderboard(GameResult gr, string leaderboardProperty, string locale, uint platformId, out LeaderboardResult initialLeaderboard)
        {
            initialLeaderboard = this.GetLeaderboardXml(gr.GameId, gr.Variant, leaderboardProperty, 1, "W1", 100, locale, platformId);
            this.PostGameResult(gr, locale, platformId, gr.GameId);
            LeaderboardResult newLeaderboard = this.GetLeaderboardXml(gr.GameId, gr.Variant, leaderboardProperty, 1, "W1", 100, locale, platformId);

            return newLeaderboard;
        }

        /// <summary>
        /// Posts a score that is [scoreIncrement] higher than the current BestScore, or posts a score of [scoreIncrement] if the user has no score in the game
        /// </summary>
        public LeaderboardResult PostHigherScoreAndRetrieveLeaderboard(TestGame testGame, string locale, string blob, string outcome, long scoreIncrement)
        {
            LeaderboardResult result = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);

            if (result.TotalNumberOfRows == 0)
            {
                GameResult gr = this.CreateGameResult(testGame, scoreIncrement, null, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }
            else
            {
                string statValue = this.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScore);

                long newScore = long.Parse(statValue) + scoreIncrement;
                GameResult gr = this.CreateGameResult(testGame, newScore, null, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }

            LeaderboardResult newResult = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);
            return newResult;
        }

        public LeaderboardResult PostHigherScoreAndRetrieveLeaderboard(TestGame testGame, string locale, string blob, string outcome, long scoreIncrement, out LeaderboardResult originalLeaderboard)
        {
            originalLeaderboard = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);
            string statValue = this.CheckLeaderboardResult(originalLeaderboard, LeaderboardPropertyType.BestScore);

            long newScore = long.Parse(statValue) + scoreIncrement;
            GameResult gr = this.CreateGameResult(testGame, newScore, null, blob, outcome);
            this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult newResult = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);

            return newResult;
        }

        /// <summary>
        /// Posts a time that is [timeIncrement] higher than the current BestTime, or posts a time of [timeIncrement] if the user has no time in the game
        /// </summary>
        public LeaderboardResult PostHigherTimeAndRetrieveLeaderboard(TestGame testGame, string locale, string blob, string outcome, long timeIncrement)
        {
            LeaderboardResult result = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "W1", 100, locale, testGame.PlatformId);

            if (result.TotalNumberOfRows == 0)
            {
                GameResult gr = this.CreateGameResult(testGame, null, timeIncrement, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }
            else
            {
                string statValue = this.CheckLeaderboardResult(result, LeaderboardPropertyType.BestTime);

                long newTime = long.Parse(statValue) + timeIncrement;
                GameResult gr = this.CreateGameResult(testGame, null, newTime, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }

            LeaderboardResult newResult = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "W1", 100, locale, testGame.PlatformId);
            return newResult;
        }

        /// <summary>
        /// Get the value of a given stat in a leaderboard
        /// </summary>
        /// <param name="stat">Property the leaderboard should rank itself on</param>
        /// <param name="leaderboardProperty">"BestScore", "BestTime", "CumulativeScore Score", "CumulativeTime", "GamesPlayed", "AverageScore", "AverageTime", "Wins", "Losses", "BestScoreDatablobId", "BestTimeDatablobId", "LastPlayedDateTime"</param>
        /// <returns></returns>
        public string GetStatValue(TestGame testGame, string locale, LeaderboardPropertyType stat, string leaderboardProperty)
        {
            LeaderboardResult result = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, leaderboardProperty, 1, "W1", 100, locale, testGame.PlatformId);
            string statValue = this.CheckLeaderboardResult(result, stat);

            return statValue;
        }

        public GameResult CreateGameResult(TestGame testGame, long? score, long? time, string blob, string outcome)
        {
            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Variant = testGame.Variant;
            gr.TimeStamp = DateTime.Now;

            if (!string.IsNullOrEmpty(outcome)) { gr.Outcome = outcome; }
            if (!string.IsNullOrEmpty(blob)) { gr.Blob = Encoding.UTF8.GetBytes(blob); }

            if (score.HasValue) { gr.Score = score.Value; }
            if (time.HasValue) { gr.Time = time.Value; }

            return gr;
        }

        /// <summary>
        /// Returns the rank of the given user in the leaderboard, or 0 if the user doesn't appear in the leaderboard
        /// </summary>
        public static uint GetRankForUserInLeaderboard(LeaderboardResult result, string gamertag)
        {
            try
            {
                uint rank = (from t in result.Leaderboard
                             where t.User.GamerTag.Equals(gamertag, StringComparison.OrdinalIgnoreCase)
                             select t.Rank).First();
                return rank;
            }
            catch (System.InvalidOperationException)
            {
                return 0;
            }
        }

        /// <summary>
        /// Returns the TestUser for the user at the given rank spot in the leaderboard (only works for users defined in RewardsTransport.config.xml)
        /// </summary>
        /// <param name="result">Leaderboard result</param>
        /// <param name="rank">Rank</param>
        public TestUser GetRankedUserInLeaderboard(LeaderboardResult result, uint rank)
        {
            string gamertag = string.Empty;
            for (int i = 0; i < result.TotalNumberOfRows; i++)
            {
                if (result.Leaderboard[i].Rank == rank)
                {
                    gamertag = result.Leaderboard[i].User.GamerTag;
                    break;
                }
            }

            // check if the primary user is the match
            TestUser user = AuthenticationTransport.PrimaryUser;
            if (gamertag.ToLower() == user.Gamertag.ToLower())
                return user;

            // check for a match among the primary user's friends
            for (int i = 0; i < user.Friends.Count; i++)
            {
                if (gamertag.ToLower() == user.Friends[i].Gamertag.ToLower())
                    return user.Friends[i];
            }

            Assert.Fail("Couldn't find a TestUser match for gamertag [{0}]", gamertag);
            return null;
        }

        public LeaderboardResult GetLeaderboardForBestScore(TestGame tg, string locale)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", 1, "W1", 100, locale, tg.PlatformId);
            return result;
        }

        public LeaderboardResult GetLeaderboardForBestTime(TestGame tg, string locale)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "BestTime", 1, "W1", 100, locale, tg.PlatformId);
            return result;
        }

        public LeaderboardResult GetLeaderboardForWins(TestGame tg, string locale)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "Wins", 1, "W1", 100, locale, tg.PlatformId);
            return result;
        }

        #region Statistics helpers

        public string FindLeaderboardEntry(LeaderboardItem item, string statEntry)
        {
            string result = (from i in item.Statistics
                             where i.Name.ToLower() == statEntry.ToLower()
                             select i.Value).First();
            return result;
        }

        /// <summary>
        /// Gets the result in the leaderboard for the current user
        /// </summary>
        /// <param name="result"></param>
        /// <param name="statEntry"></param>
        /// <returns></returns>
        public string CheckLeaderboardResult(LeaderboardResult result, string statEntry)
        {
            // Make sure we have a valid result
            CheckForValidLeaderboardResult(result);

            IList<Entry> entryList = null;
            if (result.TotalNumberOfRows == 1) // if there's only one user in the leaderboard, we're done - needed for new users where the gamertag is returned as '?????'. Can fail if the new user has friends in the leaderboard.
            {
                entryList = result.Leaderboard[0].Statistics;
            }
            else // find the cuurrent user in the leaderboard
            {
                string gamertag = rewardsTransport.CurrentUser.Split('@')[0]; // this will fail if the user's gamertag is different from the first part of their email
                uint rank = (from t in result.Leaderboard
                             where t.User.GamerTag.Equals(gamertag, StringComparison.OrdinalIgnoreCase)
                             select t.Rank).First();
                int position = (int)rank - 1;
                entryList = result.Leaderboard[position].Statistics;
            }

            IEnumerable<Entry> entries = (from e in entryList
                                          where e.Name == statEntry
                                          select e);
            int numEntries = entries.Count<Entry>();

            switch (numEntries)
            {
                case 0:
                    return null;
                case 1:
                    // This should be the normal case, so just return the value
                    return entries.First<Entry>().Value;
                default:
                    Assert.Fail(String.Format("More than one entry found for {0}", statEntry));
                    break;
            }

            return null;
        }

        /// <summary>
        /// Checks the provided LeaderboardResult to see if it's valid, and then returns the property value requested
        /// </summary>
        /// <param name="result">the LeaderboardResult to check</param>
        /// <param name="type">the type of the property to get the value for</param>
        /// <returns>the value of the property requested from the LeaderboardResult</returns>
        public string CheckLeaderboardResult(LeaderboardResult result, LeaderboardPropertyType type)
        {
            // Make sure we have a valid result
            CheckForValidLeaderboardResult(result);

            switch (type)
            {
                case LeaderboardPropertyType.BestScore:
                    return CheckLeaderboardResult(result, "BestScore");
                case LeaderboardPropertyType.BestTime:
                    return CheckLeaderboardResult(result, "BestTime");
                case LeaderboardPropertyType.CumulativeScore:
                    return CheckLeaderboardResult(result, "CumulativeScore");
                case LeaderboardPropertyType.CumulativeTime:
                    return CheckLeaderboardResult(result, "CumulativeTime");
                case LeaderboardPropertyType.GamesPlayed:
                    return CheckLeaderboardResult(result, "GamesPlayed");
                case LeaderboardPropertyType.Wins:
                    return CheckLeaderboardResult(result, "Wins");
                case LeaderboardPropertyType.Losses:
                    return CheckLeaderboardResult(result, "Losses");
                case LeaderboardPropertyType.LastPlayedDateTime:
                    return CheckLeaderboardResult(result, "LastPlayedDateTime");
                case LeaderboardPropertyType.BestScoreDataBlobId:
                    return CheckLeaderboardResult(result, "BestScoreDataBlobId");
                case LeaderboardPropertyType.BestTimeDataBlobId:
                    return CheckLeaderboardResult(result, "BestTimeDataBlobId");
                case LeaderboardPropertyType.AverageScore:
                    return CheckLeaderboardResult(result, "AverageScore");
                case LeaderboardPropertyType.AverageTime:
                    return CheckLeaderboardResult(result, "AverageTime");
            }

            throw new Exception(String.Format("Invalid property type provided: {0}", type.ToString()));
        }

        /// <summary>
        /// Checks the provided LeaderboardResult to make sure that it's not empty, valid stats were returned, etc.
        /// </summary>
        /// <param name="result">the LeaderboardResult to check</param>
        private void CheckForValidLeaderboardResult(LeaderboardResult result)
        {
            Assert.IsNotNull(result, "No result was returned");
            Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
            Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");
        }

        /// <summary>
        /// Searches the given LeaderboardResult for the LeaderboardItem belonging to the specified gamertag and returns it
        /// </summary>
        /// <param name="result">the LeaderboardResult to check</param>
        /// <param name="gamertag">the gamertag we want</param>
        /// <returns>the LeaderboardItem belonging to the user with the given gamertag</returns>
        public LeaderboardItem GetLeaderboardItemForGamertag(LeaderboardResult result, string gamertag)
        {
            // Go through each item until we find the one with the matching gamertag
            foreach (LeaderboardItem item in result.Leaderboard)
            {
                if (item.User.GamerTag.ToLower().Equals(gamertag.ToLower()))
                {
                    return item;
                }
            }

            // Otherwise, return null if we didn't find the user
            return null;
        }

        #endregion Statistics helpers

        #endregion GetLeaderboard helpers
        #region GrantAchievements helpers

        /// <summary>
        /// Returns an AchievementsResult which only contains already earned achievements
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public AchievementsResult GetEarnedAchievements(uint gameId, string locale, uint platformId)
        {
            AchievementsResult result = this.GetAchievementsXml(gameId, locale, platformId);
            AchievementsResult earnedAchievements = new AchievementsResult();

            earnedAchievements.Achievements = result.Achievements.Where(t => t.IsEarned).ToList();
            return earnedAchievements;
        }

        /// <summary>
        /// Uses the transport class to call the GrantAchievements API with the provided values. 
        /// </summary>
        /// <param name="grantAchievements">The achievements to be granted</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAchievements(GrantAchievements grantAchievements, string locale, uint platformId)
        {
            string grantAchString = RewardsTestUtil.GetGrantAchievementsString(grantAchievements);
            return this.GrantAchievements(grantAchString, locale, platformId.ToString());
        }

        /// <summary>
        /// Uses the transport class to call the GrantAchievements API with the provided values. 
        /// </summary>
        /// <param name="grantAchievements">The achievements to be granted</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAchievements(string grantAchievementsString, string locale, uint platformId)
        {
            return this.GrantAchievements(grantAchievementsString, locale, platformId.ToString());
        }

        /// <summary>
        /// Returns a boolean value based on whether there was an achievement in the game with the specified achievementId
        /// </summary>
        /// <param name="achievementID"></param>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public bool CheckAchievementForGame(string achievementID, uint gameId, string locale, uint platformId)
        {
            bool hasAchievement = false;
            AchievementsResult results = this.GetAchievementsXml(gameId, locale, platformId);

            if ((results.Achievements.Count == 0) || (results == null))
                return hasAchievement;

            foreach (Achievement achievement in results.Achievements)
            {
                if (achievement.Key == achievementID)
                    if (achievement.IsEarned)
                    {
                        hasAchievement = true;
                        return hasAchievement;
                    }
            }
            return hasAchievement;
        }

        /// <summary>
        /// Get the Gamerscore value for an achievement
        /// </summary>
        /// <returns>Returns the Gamerscore, or -1 if it was not found</returns>
        public int GetGamerscoreForAchievement(string achievementID, uint gameId, string locale, uint platformId)
        {
            int achvGamerscore = -1;

            AchievementsResult results = GetAchievementsXml(gameId, locale, platformId);
            achvGamerscore = (from achievement in results.Achievements
                              where achievement.Key == achievementID
                              select achievement.Gamerscore).First();

            return achvGamerscore;
        }

        /// <summary>
        /// Get the TotalPossibleGamerscore value for a game
        /// </summary>
        /// <returns>Returns the TotalPossibleGamerscore</returns>
        public uint GetTotalPossibleGamerscoreForGame(TestGame testGame, string locale)
        {
            int achvGamerscore = 0;

            AchievementsResult results = GetAchievementsXml(testGame.GameId, locale, testGame.PlatformId);
            achvGamerscore = (from achievement in results.Achievements
                              select achievement.Gamerscore).Sum();

            return (uint)achvGamerscore;
        }

        /// <summary>
        /// Get the number TotalPossibleAchievements for an game
        /// </summary>
        /// <returns>Returns the TotalPossibleAchievements, or -1 if none were found</returns>
        public int GetTotalPossibleAchievementsForGame(TestGame testGame, string locale)
        {
            int achievementsPossible = -1;

            AchievementsResult results = GetAchievementsXml(testGame.GameId, locale, testGame.PlatformId);
            achievementsPossible = (from achievement in results.Achievements
                                    select achievement.Gamerscore).Count();

            return achievementsPossible;
        }

        /// <summary>
        /// Grants an achievement and returns the gamerscore for that achievement, or -1 if something fails
        /// </summary>
        /// <param name="testGame">The game to grant an achievement for</param>
        /// <returns>The gamerscore value of the granted achievement</returns>
        public int GrantAchievement_ReturnGamerscore(TestGame testGame, string locale)
        {
            string appID = Guid.NewGuid().ToString();
            GrantAchievements grantAchievements = this.CreateAchievements_SingleUnearned(testGame.GameId, appID, locale, testGame.PlatformId);
            string achievementID = grantAchievements.Achievements[0].Key;

            Response ret = this.GrantAchievements(grantAchievements, locale, testGame.PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                return -1;

            return this.GetGamerscoreForAchievement(achievementID, testGame.GameId, locale, testGame.PlatformId);
        }

        /// <summary>
        /// Create an achievement to be added to an achievement list.
        /// </summary>
        /// <param name="key">achievement ID</param>
        /// <param name="earnedDateTime">DateTime the achievement was earned</param>
        /// <param name="earnedOnline">True if the player was online when the achievement was earned, false otherwise</param>
        /// <returns></returns>
        public AchievementEarned CreateAchievement(string key, DateTime earnedDateTime, bool earnedOnline)
        {
            AchievementEarned achievementEarned = new AchievementEarned();
            achievementEarned.Key = key;
            achievementEarned.EarnedDateTime = earnedDateTime;
            achievementEarned.EarnedOnline = earnedOnline;
            return achievementEarned;
        }

        /// <summary>
        /// Create a GrantAchievements object for a given game with a malfomed achievement
        /// </summary>
        /// <param name="missingParam">The param to leave off ("gameId", "appId", "achievementId", "earnedDateTime", "earnedOnline")</param>
        /// <param name="gameID">The gameID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_MalformedAchievement(string missingParam, uint gameID)
        {
            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.Achievements = new List<AchievementEarned>();
            AchievementEarned achievementEarned = new AchievementEarned();

            if (missingParam.ToLower() != "gameid") { grantAchievements.GameId = gameID; }
            if (missingParam.ToLower() != "appid") { grantAchievements.AppId = Guid.NewGuid().ToString(); }
            if (missingParam.ToLower() != "achievementid") { achievementEarned.Key = "1"; }
            if (missingParam.ToLower() != "earneddatetime") { achievementEarned.EarnedDateTime = DateTime.Now; }
            if (missingParam.ToLower() != "earnedonline") { achievementEarned.EarnedOnline = true; }

            grantAchievements.Achievements.Add(achievementEarned);

            return grantAchievements;
        }

        /// <summary>
        /// Create a GrantAchievements object for a given game and app with an achievement with a specified dateTime and earnedOnline status
        /// </summary>
        public GrantAchievements CreateAchievements(uint gameID, string appID, DateTime dateTime, bool earnedOnline, string locale, uint platformId)
        {
            string achievementID = string.Empty;

            //Pick an achievement that hasn't been earned yet
            AchievementsResult results = this.GetAchievementsXml(gameID, locale, platformId);

            try
            {
                achievementID = (from achievement in results.Achievements
                                 where achievement.IsEarned == false
                                 select achievement.Key).First();
            }
            catch (System.InvalidOperationException)
            {
                // no unearned achievements available
                return null;
            }

            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            grantAchievements.Achievements.Add(CreateAchievement(achievementID, dateTime, earnedOnline));

            return grantAchievements;
        }

        /// <summary>
        /// Validates that all properties returned in an achievement are not null or empty and all Uri's are well formed
        /// </summary>
        /// <param name="achievement"></param>
        public static void VerifyAchievementProperties(Achievement achievement, bool verifyAllProperties)
        {
            if (verifyAllProperties)
            {
                Assert.IsFalse(String.IsNullOrEmpty(achievement.GameId.ToString()), "GameId was empty");
                Assert.IsFalse(String.IsNullOrEmpty(achievement.GameName), "GameName was empty");
                Assert.IsFalse(String.IsNullOrEmpty(achievement.DisplayBeforeEarned.ToString()), "DisplayBeforeEarned not returned for this achievement");
                Assert.IsNull(Uri.IsWellFormedUriString(achievement.PictureUrl, UriKind.Absolute), "Achievement picture URL was not well formed");
                Assert.IsFalse(String.IsNullOrEmpty(achievement.EarnedDateTime.ToShortDateString()), "EarnedDateTime not returned for this achievement");
            }

            Assert.IsFalse(String.IsNullOrEmpty(achievement.Description), "No description returned for this achievement");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.EarnedOnline.ToString()), "EarnedOnline not returned for this achievement");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.Gamerscore.ToString()), "Gamerscore was empty");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.HowToEarn.ToString()), "HowToEarn was empty");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.IsEarned.ToString()), "IsEarned value was empty");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.Key), "Achievement key was not found");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.Name), "Achievement name was empty");

        }

        /// <summary>
        /// Returns the first achievement of a game as a GrantAchievements object
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="appID"></param>
        /// <param name="dateTime"></param>
        /// <param name="earnedOnline"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public GrantAchievements GetFirstAchievement(uint gameID, string appID, DateTime dateTime, bool earnedOnline, string locale, uint platformId)
        {
            string achievementID = string.Empty;

            AchievementsResult results = this.GetAchievementsXml(gameID, locale, platformId);
            achievementID = results.Achievements[0].Key;

            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            grantAchievements.Achievements.Add(CreateAchievement(achievementID, dateTime, earnedOnline));

            return grantAchievements;
        }

        /// <summary>
        /// Creates an achievement list with one achievement with the given achievement ID
        /// </summary>
        /// <param name="achievementID">achievement ID</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleAchievement(string achievementID, uint gameID, string appID)
        {
            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            //Add an achievement to the list of achievements
            grantAchievements.Achievements.Add(CreateAchievement(achievementID, DateTime.Now, true));

            return grantAchievements;
        }

        /// <summary>
        /// Creates an achievement list with one achievement that has not been earned yet
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(uint gameID, string appID, string locale, uint platformId)
        {
            return CreateAchievements(gameID, appID, DateTime.Now, true, locale, platformId);
        }

        /// <summary>
        /// Creates an achievement list with one achievement with the given dateTime earned
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <param name="dateTime">DateTime the achievement was earned</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(uint gameID, string appID, DateTime dateTime, string locale, uint platformId)
        {
            return CreateAchievements(gameID, appID, dateTime, true, locale, platformId);
        }

        /// <summary>
        /// Creates an achievement list with one achievement with player online/offline status
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <param name="playerOnline">True if the player was online when the achievement was earned, false otherwise</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(uint gameID, string appID, bool playerOnline, string locale, uint platformId)
        {
            return CreateAchievements(gameID, appID, DateTime.Now, playerOnline, locale, platformId);
        }

        /// <summary>
        /// Creates a single achievement list with one online achievement for a game
        /// </summary>
        /// <param name="tg"></param>
        /// <param name="appID"></param>
        /// <param name="locale"></param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(TestGame tg, string appID, string locale)
        {
            return CreateAchievements(tg.GameId, appID, DateTime.Now, true, locale, tg.PlatformId);
        }

        /// <summary>
        /// Creates an achievement list with multiple unearned achievements
        /// </summary>
        /// <param name="count">The number of achievements to create</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_MultipleUnearned(int count, uint gameID, string appID, string locale, uint platformId)
        {
            List<string> achievementIDs = new List<string>();

            //Pick an achievement that hasn't been earned yet
            AchievementsResult results = this.GetAchievementsXml(gameID, locale, platformId);
            foreach (Achievement achievement in results.Achievements)
            {
                if (!achievement.IsEarned)
                {
                    achievementIDs.Add(achievement.Key);
                }
            }

            //Return null if not enough achievements were found
            if (achievementIDs.Count < count)
            {
                return null;
            }

            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            //Add an achievement to the list of achievements
            for (int i = 0; i < count; i++)
            {
                grantAchievements.Achievements.Add(CreateAchievement(achievementIDs[i], DateTime.Now, true));
            }

            return grantAchievements;
        }

        /// <summary>
        /// Creates an achievement list with multiple achievements with the given achievement IDs
        /// </summary>
        /// <param name="achievementIDs">List of achievement IDs</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_MultipleAchievements(List<string> achievementIDs, uint gameID, string appID)
        {
            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            //Add an achievement to the list of achievements
            foreach (string achievementID in achievementIDs)
            {
                grantAchievements.Achievements.Add(CreateAchievement(achievementID, DateTime.Now, true));
            }

            return grantAchievements;
        }

        /// <summary>
        /// Creates the number of achievements specified(if available), grants them to the current user
        /// and verifies that the user's RecentAchievements list has been updated 
        /// </summary>
        /// <param name="numberofAchievements"></param>
        /// <param name="tg"></param>
        /// <param name="locale"></param>
        /// <param name="appId"></param>
        public void CreateAchievementsGrantAndVerifyInProfile(int numberofAchievements, TestGame tg, string locale, string appId)
        {
            List<Achievement> granted = new List<Achievement>();
            List<string> achIds = new List<string>();
            DateTime dt = DateTime.UtcNow;
            int gamerscore = 0;

            AchievementsResult result = this.GetAchievementsXml(tg.GameId, locale, tg.PlatformId);
            if (result.Achievements.Count < numberofAchievements)
            {
                Assert.Inconclusive("Game doesnt have enough achievements");
            }

            for (int i = 0; i < numberofAchievements; i++)
            {
                granted.Add(result.Achievements[i]);
                achIds.Add(result.Achievements[i].Key);
                gamerscore += result.Achievements[i].Gamerscore;
            }

            GrantAchievements gr = this.CreateAchievements_MultipleAchievements(achIds, tg.GameId, appId);
            this.GrantAchievements(gr, locale, tg.PlatformId);
            Thread.Sleep(10000);
            Profile pro = this.GetProfileMyView(locale, PlatformType.Mobile, Constants.AllProfileSections);

            Assert.AreEqual<int>(1, pro.RecentAchievements.Count);
            Assert.AreEqual<uint>(tg.GameId, pro.RecentAchievements[0].GameId);
            Assert.AreEqual<string>(achIds.Last(), pro.RecentAchievements[0].Key);

            Assert.AreEqual<int>((int)pro.ProfileProperties[ProfileProperty.GamerScore], gamerscore, "Gamerscore mismatch");
            foreach (var achievement in pro.RecentAchievements)
            {
                Assert.IsTrue(achievement.EarnedDateTime.ToUniversalTime().Subtract(dt).Minutes < 10);
                Assert.IsTrue(Uri.IsWellFormedUriString(achievement.PictureUrl, UriKind.Absolute));
            }
            foreach (var game in pro.RecentGames)
            {
                Assert.AreEqual<string>(tg.Name, game.Name);
                Assert.AreEqual<uint>(tg.GameId, (uint)game.Id);
                Assert.IsTrue(Uri.IsWellFormedUriString(game.GameUrl, UriKind.Absolute));
                Assert.IsTrue(Uri.IsWellFormedUriString(game.ImageUrl, UriKind.Absolute));
            }

        }

        /// <summary>
        /// Verifies the achievementKey is part of the granted achievements in the AchievementsResult
        /// </summary>
        /// <param name="result"></param>
        /// <param name="achievementKey"></param>
        /// <returns></returns>
        public bool VerifyAchievementGranted(AchievementsResult result, string achievementKey)
        {
            bool achKey = result.Achievements.Exists(a => (a.Key.Equals(achievementKey, StringComparison.OrdinalIgnoreCase) &&
                                                           a.IsEarned.Equals(true)));

            return achKey;
        }

        /// <summary>
        /// Retrieve the Gamerscore for the current user
        /// </summary>
        public int GetGamerscore(string locale, uint platformId)
        {
            Profile profile = this.GetProfileMyView(locale, platformId, SectionFlags.XboxLiveProperties);
            return (int)profile.ProfileProperties[ProfileProperty.GamerScore];
        }

        #endregion GrantAchievements helpers
        #region GrantAvatarAssets helpers

        /// <summary>
        /// Returns an AvatarAssetsResult which only contains already earned AvatarAssets
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public AvatarAwardsAssetResult GetEarnedAvatarAssets(uint gameId, string locale, uint platformId)
        {
            AvatarAwardsAssetResult result = this.GetAvatarAwardsAssetsXml(gameId, locale, platformId);
            AvatarAwardsAssetResult earnedAvatarAssets = new AvatarAwardsAssetResult();

            earnedAvatarAssets.AvatarAwardsAssets = result.AvatarAwardsAssets.Where(t => t.IsEarned).ToList();
            return earnedAvatarAssets;
        }

        /// <summary>
        /// Uses the transport class to call the GrantAvatarAssets API with the provided values. 
        /// </summary>
        /// <param name="grantAvatarAssets">The AvatarAssets to be granted</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAvatarAssets(GrantAvatarAssets grantAvatarAssets, string locale, uint platformId, uint gameId)
        {
            string grantAchString = RewardsTestUtil.GetGrantAvatarAwardsString(grantAvatarAssets);
            return this.GrantAvatarAssets(grantAchString, locale, platformId.ToString(), gameId.ToString());
        }

        /// <summary>
        /// Uses the transport class to call the GrantAvatarAssets API with the provided values. 
        /// </summary>
        /// <param name="grantAvatarAssets">The AvatarAssets to be granted</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAvatarAssets(string grantAvatarAssetsString, string locale, uint platformId, uint gameId)
        {
            return this.GrantAvatarAssets(grantAvatarAssetsString, locale, platformId.ToString(), gameId.ToString());
        }

        /// <summary>
        /// Returns a boolean value based on whether there was an AvatarAsset in the game with the specified AvatarAssetId
        /// </summary>
        /// <param name="AvatarAssetID"></param>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public bool CheckAvatarAssetForGame(string AvatarAssetID, uint gameId, string locale, uint platformId)
        {
            bool hasAvatarAsset = false;
            AvatarAwardsAssetResult results = this.GetAvatarAwardsAssetsXml(gameId, locale, platformId);

            if ((results.AvatarAwardsAssets.Count == 0) || (results == null))
                return hasAvatarAsset;

            foreach (AvatarAwardsAsset AvatarAsset in results.AvatarAwardsAssets)
            {
                if (AvatarAsset.Key == AvatarAssetID)
                    if (AvatarAsset.IsEarned)
                    {
                        hasAvatarAsset = true;
                        return hasAvatarAsset;
                    }
            }
            return hasAvatarAsset;
        }

        /// <summary>
        /// Create an AvatarAsset to be added to an AvatarAsset list.
        /// </summary>
        /// <param name="key">AvatarAsset ID</param>
        /// <param name="earnedDateTime">DateTime the AvatarAsset was earned</param>
        /// <param name="earnedOnline">True if the player was online when the AvatarAsset was earned, false otherwise</param>
        /// <returns></returns>
        public AvatarAssetEarned CreateAvatarAsset(string key, DateTime earnedDateTime, bool earnedOnline, bool isUnisex)
        {
            AvatarAssetEarned AvatarAssetEarned = new AvatarAssetEarned();
            AvatarAssetEarned.Key = key;
            AvatarAssetEarned.EarnedDateTime = earnedDateTime;
            AvatarAssetEarned.EarnedOnline = earnedOnline;
            AvatarAssetEarned.IsUnisexItem = isUnisex;

            return AvatarAssetEarned;
        }

        /// <summary>
        /// Create a GrantAvatarAssets object for a given game with a malfomed AvatarAsset
        /// </summary>
        /// <param name="missingParam">The param to leave off ("gameId", "appId", "AvatarAssetId", "earnedDateTime", "earnedOnline")</param>
        /// <param name="gameID">The gameID of the game</param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_MalformedAvatarAsset(string missingParam, uint gameID)
        {
            GrantAvatarAssets grantAvatarAssets = new GrantAvatarAssets();
            grantAvatarAssets.AvatarAssets = new List<AvatarAssetEarned>();
            AvatarAssetEarned AvatarAssetEarned = new AvatarAssetEarned();

            if (missingParam.ToLower() != "gameid") { grantAvatarAssets.GameId = gameID; }
            if (missingParam.ToLower() != "appid") { grantAvatarAssets.AppId = Guid.NewGuid().ToString(); }
            if (missingParam.ToLower() != "AvatarAssetid") { AvatarAssetEarned.Key = "1"; }
            if (missingParam.ToLower() != "earneddatetime") { AvatarAssetEarned.EarnedDateTime = DateTime.Now; }
            if (missingParam.ToLower() != "earnedonline") { AvatarAssetEarned.EarnedOnline = true; }

            grantAvatarAssets.AvatarAssets.Add(AvatarAssetEarned);

            return grantAvatarAssets;
        }

        /// <summary>
        /// Create a GrantAvatarAssets object for a given game and app with an AvatarAsset with a specified dateTime and earnedOnline status
        /// </summary>
        public GrantAvatarAssets CreateAvatarAssets(uint gameID, string appID, DateTime dateTime, bool earnedOnline, string locale, uint platformId)
        {
            string AvatarAssetID = string.Empty;

            //Pick an AvatarAsset that hasn't been earned yet
            AvatarAwardsAssetResult results = this.GetAvatarAwardsAssetsXml(gameID, locale, platformId);

            try
            {
                AvatarAssetID = (from AvatarAsset in results.AvatarAwardsAssets
                                 where AvatarAsset.IsEarned == false
                                 select AvatarAsset.Key).First();
            }
            catch (System.InvalidOperationException)
            {
                // no unearned AvatarAssets available
                return null;
            }

            int count = results.AvatarAwardsAssets.Count(n => n.Key == AvatarAssetID);

            //IsUnisex = true when Key.Count == 1
            //IsUnisex = false when Key.Count > 1
            bool isUnisex = false;
            if (count == 1)
            {
                isUnisex = true;
            }

            GrantAvatarAssets grantAvatarAssets = new GrantAvatarAssets();
            grantAvatarAssets.GameId = gameID;
            grantAvatarAssets.AppId = appID;
            grantAvatarAssets.AvatarAssets = new List<AvatarAssetEarned>();


            grantAvatarAssets.AvatarAssets.Add(CreateAvatarAsset(AvatarAssetID, dateTime, earnedOnline, isUnisex));

            return grantAvatarAssets;
        }

        /// <summary>
        /// Validates that all properties returned in an AvatarAsset are not null or empty and all Uri's are well formed
        /// </summary>
        /// <param name="AvatarAsset"></param>
        public static void VerifyAvatarAssetProperties(AvatarAwardsAsset AvatarAsset, bool verifyAllProperties)
        {
            if (verifyAllProperties)
            {
                Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.GameId.ToString()), "GameId was empty");
                Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.EarnedDateTime.ToShortDateString()), "EarnedDateTime not returned for this AvatarAsset");
            }

            Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.Description), "No description returned for this AvatarAsset");
            Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.EarnedOnline.ToString()), "EarnedOnline not returned for this AvatarAsset");
            Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.HowToEarn.ToString()), "HowToEarn was empty");
            Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.IsEarned.ToString()), "IsEarned value was empty");
            Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.Key), "AvatarAsset key was not found");
            Assert.IsFalse(String.IsNullOrEmpty(AvatarAsset.Name), "AvatarAsset name was empty");

        }

        /// <summary>
        /// Returns the first AvatarAsset of a game as a GrantAvatarAssets object
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="appID"></param>
        /// <param name="dateTime"></param>
        /// <param name="earnedOnline"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public GrantAvatarAssets GetFirstAvatarAsset(uint gameID, string appID, DateTime dateTime, bool earnedOnline, string locale, uint platformId)
        {
            string AvatarAssetID = string.Empty;

            AvatarAwardsAssetResult results = this.GetAvatarAwardsAssetsXml(gameID, locale, platformId);
            AvatarAssetID = results.AvatarAwardsAssets[0].Key;


            int count = results.AvatarAwardsAssets.Count(n => n.Key == AvatarAssetID);

            //IsUnisex = true when Key.Count == 1
            //IsUnisex = false when Key.Count > 1
            bool isUnisex = false;
            if (count == 1)
            {
                isUnisex = true;
            }

            GrantAvatarAssets grantAvatarAssets = new GrantAvatarAssets();
            grantAvatarAssets.GameId = gameID;
            grantAvatarAssets.AppId = appID;
            grantAvatarAssets.AvatarAssets = new List<AvatarAssetEarned>();

            grantAvatarAssets.AvatarAssets.Add(CreateAvatarAsset(AvatarAssetID, dateTime, earnedOnline, isUnisex));

            return grantAvatarAssets;
        }

        /// <summary>
        /// Creates an AvatarAsset list with one AvatarAsset with the given AvatarAsset ID
        /// </summary>
        /// <param name="AvatarAssetID">AvatarAsset ID</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_SingleAvatarAsset(string AvatarAssetID, uint gameID, string appID, bool isUnisex)
        {
            GrantAvatarAssets grantAvatarAssets = new GrantAvatarAssets();
            grantAvatarAssets.GameId = gameID;
            grantAvatarAssets.AppId = appID;
            grantAvatarAssets.AvatarAssets = new List<AvatarAssetEarned>();

            //Add an AvatarAsset to the list of AvatarAssets
            grantAvatarAssets.AvatarAssets.Add(CreateAvatarAsset(AvatarAssetID, DateTime.Now, true, isUnisex));

            return grantAvatarAssets;
        }

        /// <summary>
        /// Creates an AvatarAsset list with one AvatarAsset that has not been earned yet
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_SingleUnearned(uint gameID, string appID, string locale, uint platformId)
        {
            return CreateAvatarAssets(gameID, appID, DateTime.Now, true, locale, platformId);
        }

        /// <summary>
        /// Creates an AvatarAsset list with one AvatarAsset with the given dateTime earned
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <param name="dateTime">DateTime the AvatarAsset was earned</param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_SingleUnearned(uint gameID, string appID, DateTime dateTime, string locale, uint platformId)
        {
            return CreateAvatarAssets(gameID, appID, dateTime, true, locale, platformId);
        }

        /// <summary>
        /// Creates an AvatarAsset list with one AvatarAsset with player online/offline status
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <param name="playerOnline">True if the player was online when the AvatarAsset was earned, false otherwise</param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_SingleUnearned(uint gameID, string appID, bool playerOnline, string locale, uint platformId)
        {
            return CreateAvatarAssets(gameID, appID, DateTime.Now, playerOnline, locale, platformId);
        }

        /// <summary>
        /// Creates a single AvatarAsset list with one online AvatarAsset for a game
        /// </summary>
        /// <param name="tg"></param>
        /// <param name="appID"></param>
        /// <param name="locale"></param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_SingleUnearned(TestGame tg, string appID, string locale)
        {
            return CreateAvatarAssets(tg.GameId, appID, DateTime.Now, true, locale, tg.PlatformId);
        }

        /// <summary>
        /// Creates an AvatarAsset list with multiple unearned AvatarAssets
        /// </summary>
        /// <param name="count">The number of AvatarAssets to create</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_MultipleUnearned(int count, uint gameID, string appID, string locale, uint platformId)
        {
            Dictionary<string, bool> AvatarAssetIDs = new Dictionary<string, bool>();

            //Pick an AvatarAsset that hasn't been earned yet
            AvatarAwardsAssetResult results = this.GetAvatarAwardsAssetsXml(gameID, locale, platformId);
            foreach (AvatarAwardsAsset AvatarAsset in results.AvatarAwardsAssets)
            {
                if (!AvatarAsset.IsEarned)
                {
                    if (AvatarAssetIDs.ContainsKey(AvatarAsset.Key))
                    {
                        AvatarAssetIDs[AvatarAsset.Key] = true;
                    }
                    else
                    {
                        AvatarAssetIDs.Add(AvatarAsset.Key, false);
                    }
                }
            }

            //Return null if not enough AvatarAssets were found
            if (AvatarAssetIDs.Count < count)
            {
                return null;
            }

            GrantAvatarAssets grantAvatarAssets = new GrantAvatarAssets();
            grantAvatarAssets.GameId = gameID;
            grantAvatarAssets.AppId = appID;
            grantAvatarAssets.AvatarAssets = new List<AvatarAssetEarned>();

            //Add an AvatarAsset to the list of AvatarAssets
            foreach( string avatarAssetId in AvatarAssetIDs.Keys)
            {
                grantAvatarAssets.AvatarAssets.Add(CreateAvatarAsset(avatarAssetId, DateTime.Now, true, AvatarAssetIDs[avatarAssetId]));
            }

            return grantAvatarAssets;
        }

        /// <summary>
        /// Creates an AvatarAsset list with multiple AvatarAssets with the given AvatarAsset IDs
        /// </summary>
        /// <param name="AvatarAssetIDs">Dictionary of AvatarAsset IDs and bool saying if it is a unisex item</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAvatarAssets CreateAvatarAssets_MultipleAvatarAssets(Dictionary<string, bool> AvatarAssetIDs, uint gameID, string appID)
        {
            GrantAvatarAssets grantAvatarAssets = new GrantAvatarAssets();
            grantAvatarAssets.GameId = gameID;
            grantAvatarAssets.AppId = appID;
            grantAvatarAssets.AvatarAssets = new List<AvatarAssetEarned>();

            //Add an AvatarAsset to the list of AvatarAssets
            foreach (string AvatarAssetID in AvatarAssetIDs.Keys)
            {
                grantAvatarAssets.AvatarAssets.Add(CreateAvatarAsset(AvatarAssetID, DateTime.Now, true, AvatarAssetIDs[AvatarAssetID]));
            }

            return grantAvatarAssets;
        }


        /// <summary>
        /// Verifies the AvatarAssetKey is part of the granted AvatarAssets in the AvatarAssetsResult
        /// </summary>
        /// <param name="result"></param>
        /// <param name="AvatarAssetKey"></param>
        /// <returns></returns>
        public bool VerifyAvatarAssetGranted(AvatarAwardsAssetResult result, string AvatarAssetKey)
        {
            bool achKey = result.AvatarAwardsAssets.Exists(a => (a.Key.Equals(AvatarAssetKey, StringComparison.OrdinalIgnoreCase) &&
                                                           a.IsEarned.Equals(true)));

            return achKey;
        }

        #endregion GrantAvatarAssets helpers


        #region Profile helpers
        /// <summary>
        /// Adds a game to the profile no achievement earned
        /// </summary>
        /// <param name="prof">Profile to modify</param>
        /// <param name="tg">Game to add</param>
        /// <param name="acct">Account used for UserLib</param>
        public void AddGameOnly(Profile prof, TestGame tg, Account acct, string locale)
        {
            //Make a game show as being played
            acct.AddTitles(new uint[] { tg.GameId });

            if (prof.RecentGames == null)
            {
                prof.RecentGames = new XmlSerializableList<Leet.UserGameData.DataContracts.GameInfo>();
            }

            Leet.UserGameData.DataContracts.GameInfo game = GetGameAlreadyAdded(prof.RecentGames, (int)tg.GameId);

            if (game == null)
            {
                game = new Leet.UserGameData.DataContracts.GameInfo();
                game.Id = (int)tg.GameId;
                game.Name = tg.Name;

                //Only keep the latest 6 most recent games
                if (prof.RecentGames.Count >= 6)
                {
                    prof.RecentGames.RemoveAt(5);
                }
            }
            else
            {
                //If the game is already in the list the remove it 
                //so we can add it as the first game in RecentGames
                prof.RecentGames.Remove(game);
            }

            prof.RecentGames.Insert(0, game);
        }

        /// <summary>
        /// Adds an achievement and game to the profile for the given game
        /// </summary>
        /// <param name="prof">Profile to modify</param>
        /// <param name="tg">Game to use</param>
        public void AddGameAndAchievment(Profile prof, TestGame tg, string locale)
        {
            GrantAchievements ga = this.CreateAchievements_SingleUnearned(tg, Guid.Empty.ToString(), locale);
            Response resp = this.GrantAchievements(ga, locale, tg.PlatformId);
            AchievementsResult achievementResult = this.GetAchievementsXml(tg.GameId, locale, tg.PlatformId);

            if (resp.StatusCode == HttpStatusCode.OK)
            {
                UpdateRecentGamesInProfile(prof, ga, achievementResult, tg);
                UpdateAchievementsInProfile(prof, ga, achievementResult, tg);
            }

            Assert.AreEqual(HttpStatusCode.OK, resp.StatusCode, "Could not grant Achievement.");
        }

        /// <summary>
        /// Updates RecentGames in the profile with the recently granted achievement
        /// </summary>
        /// <param name="prof">Profile to modify</param>
        /// <param name="ga">achievement earned</param>
        /// <param name="achievementResult">list of achievements for the game</param>
        /// <param name="tg">game being added</param>
        private void UpdateRecentGamesInProfile(Profile prof, GrantAchievements ga, AchievementsResult achievementResult, TestGame tg)
        {
            if (prof.RecentGames == null)
            {
                prof.RecentGames = new XmlSerializableList<Leet.UserGameData.DataContracts.GameInfo>();
            }

            Leet.UserGameData.DataContracts.GameInfo game = GetGameAlreadyAdded(prof.RecentGames, (int)ga.GameId);

            if (game == null)
            {
                game = new Leet.UserGameData.DataContracts.GameInfo();
                game.Id = (int)ga.GameId;
                game.Name = tg.Name;
                game.TotalAchievements = achievementResult.Achievements.Count;

                AchievementEarned ea = ga.Achievements[0];
                Achievement ach = GetAchievementData(ea, achievementResult);
                game.LastPlayed = ach.EarnedDateTime;

                int achievementsEarned = 0;
                foreach (Achievement curAch in achievementResult.Achievements)
                {
                    if (curAch.IsEarned)
                    {
                        achievementsEarned++;
                    }
                }

                game.AchievementsEarned = achievementsEarned;

                //Only keep the latest 6 most recent games
                if (prof.RecentGames.Count >= 6)
                {
                    prof.RecentGames.RemoveAt(5);
                }
            }
            else
            {
                //If the game is already in RecentGames, remove it so we can add it as the first
                prof.RecentGames.Remove(game);
            }

            //Move game to start of list
            prof.RecentGames.Insert(0, game);
        }

        /// <summary>
        /// Updates the RecentAchievements in the Profile with the newly granted achievement in ga
        /// </summary>
        /// <param name="prof">Profile to modify</param>
        /// <param name="ga">achievement earned</param>
        /// <param name="achievementResult">list of achievements for the game</param>
        /// <param name="tg">game for achievement being added</param>
        private void UpdateAchievementsInProfile(Profile prof, GrantAchievements ga, AchievementsResult achievementResult, TestGame tg)
        {
            prof.RecentAchievements = new XmlSerializableList<Achievement>();
            AchievementEarned ea = ga.Achievements[0];
            Achievement ach = GetAchievementData(ea, achievementResult);

            if (ach != null)
            {
                ach.GameName = tg.Name;
                prof.RecentAchievements.Add(ach);
            }
        }

        /// <summary>
        /// Gets the Achievement that matches the earned achievement ID
        /// </summary>
        /// <param name="ea">achievement to find</param>
        /// <param name="achievementResult">achievements for a given game</param>
        /// <returns></returns>
        private Achievement GetAchievementData(AchievementEarned ea, AchievementsResult achievementResult)
        {
            foreach (Achievement achievement in achievementResult.Achievements)
            {
                if (achievement.Key == ea.Key)
                {
                    return achievement;
                }
            }
            return null;
        }

        /// <summary>
        /// Returns the GameInfo if that game exists in the list
        /// </summary>
        /// <param name="recentGames">list of games to check</param>
        /// <param name="gameId">game ID to find</param>
        /// <returns></returns>
        private Leet.UserGameData.DataContracts.GameInfo GetGameAlreadyAdded(XmlSerializableList<Leet.UserGameData.DataContracts.GameInfo> recentGames, int gameId)
        {
            foreach (Leet.UserGameData.DataContracts.GameInfo game in recentGames)
            {
                if (game.Id == gameId)
                {
                    return game;
                }
            }
            return null;
        }

        /// <summary>
        /// Tests to see that the RecentGames in the actual profile match the expected
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        /// <param name="verifyAllProperties">If true verify all values, if false only verify GameInfo.ID</param>
        public static void VerifyRecentGames(Profile expected, Profile actual, bool verifyAllProperties)
        {
            if (expected.RecentGames != null && actual.RecentGames != null)
            {
                Assert.AreEqual(expected.RecentGames.Count, actual.RecentGames.Count, "Actual RecentGames.Count does not equal expected.");

                if (expected.RecentGames.Count == actual.RecentGames.Count)
                {
                    for (int i = 0; i < actual.RecentGames.Count; i++)
                    {
                        Leet.UserGameData.DataContracts.GameInfo expectedGameInfo = expected.RecentGames[i];
                        Leet.UserGameData.DataContracts.GameInfo actualGameInfo = actual.RecentGames[i];

                        VerifyGameInfo(expectedGameInfo, actualGameInfo, verifyAllProperties);
                    }
                }
            }
            else
            {
                Assert.AreEqual(expected.RecentGames, actual.RecentGames, "Actual RecentGames does not equal expected.");
            }
        }

        /// <summary>
        /// Tests to see that the actual GameInfo matches the expected
        /// </summary>
        /// <param name="expectedGameInfo"></param>
        /// <param name="actualGameInfo"></param>
        /// <param name="verifyAllProperties">If true verify all values, if false only verify GameInfo.ID</param>
        private static void VerifyGameInfo(Leet.UserGameData.DataContracts.GameInfo expectedGameInfo, Leet.UserGameData.DataContracts.GameInfo actualGameInfo, bool verifyAllProperties)
        {
            Assert.AreEqual(expectedGameInfo.Id, actualGameInfo.Id, "Actual GameInfo.Id does not equal expected.");

            if (verifyAllProperties)
            {
                Assert.AreEqual(expectedGameInfo.Name, actualGameInfo.Name, "Actual GameInfo.Name does not equal expected.");
                Assert.AreEqual(expectedGameInfo.Type, actualGameInfo.Type, "Actual GameInfo.Type does not equal expected.");
                Assert.AreEqual(expectedGameInfo.AchievementsEarned, actualGameInfo.AchievementsEarned, "Actual GameInfo.AchievementsEarned does not equal expected.");
                Assert.AreEqual(expectedGameInfo.TotalAchievements, actualGameInfo.TotalAchievements, "Actual GameInfo.TotalAchievements does not equal expected.");
            }
        }

        /// <summary>
        /// Tests to see that the RecentAchievements in the actual profile match the expected
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        /// <param name="verifyAllProperties">If true verify all values, if false only verify Key and GameID</param>
        public static void VerifyRecentAchievements(Profile expected, Profile actual, bool verifyAllProperties)
        {
            if (expected.RecentAchievements != null && actual.RecentAchievements != null)
            {
                Assert.AreEqual(expected.RecentAchievements.Count, actual.RecentAchievements.Count, "Actual RecentAchievements.Count does not equal expected.");
                Assert.IsTrue(actual.RecentAchievements.Count <= 1, "Actual RecentAchievements.Count should not be greater than 1.");
                Assert.IsTrue(expected.RecentAchievements.Count <= 1, "Expected RecentAchievements.Count should not be greater than 1.");

                if (expected.RecentAchievements.Count == actual.RecentAchievements.Count)
                {
                    for (int i = 0; i < actual.RecentAchievements.Count; i++)
                    {
                        Achievement expectedAchievement = expected.RecentAchievements[i];
                        Achievement actualAchievement = actual.RecentAchievements[i];

                        VerifyAchievement(expectedAchievement, actualAchievement, verifyAllProperties);
                    }
                }
            }
            else
            {
                Assert.AreEqual(expected.RecentAchievements, actual.RecentAchievements, "Actual RecentAchievements does not equal expected.");
            }
        }

        /// <summary>
        /// Test that the expected Achievement values match the actual.
        /// </summary>
        /// <param name="expectedAchievement"></param>
        /// <param name="actualAchievement"></param>
        /// <param name="verifyAllProperties">If true verify all values, if false only verify Key and GameID</param>
        private static void VerifyAchievement(Achievement expectedAchievement, Achievement actualAchievement, bool verifyAllProperties)
        {
            Assert.AreEqual(expectedAchievement.Key, actualAchievement.Key, "Actual Achievement.Key does not equal expected.");
            Assert.AreEqual(expectedAchievement.GameId, actualAchievement.GameId, "Actual Achievement.Key does not equal expected.");

            if (verifyAllProperties)
            {
                Assert.AreEqual(expectedAchievement.GameName, actualAchievement.GameName, "Actual Achievement.GameName does not equal expected.");
                Assert.AreEqual(expectedAchievement.EarnedOnline, actualAchievement.EarnedOnline, "Actual Achievement.EarnedOnline does not equal expected.");
                Assert.AreEqual(expectedAchievement.EarnedDateTime, actualAchievement.EarnedDateTime, "Actual Achievement.EarnedDateTime does not equal expected.");
                Assert.AreEqual(expectedAchievement.Description, actualAchievement.Description, "Actual Achievement.Description does not equal expected.");
                Assert.AreEqual(expectedAchievement.DisplayBeforeEarned, actualAchievement.DisplayBeforeEarned, "Actual Achievement.DisplayBeforeEarned does not equal expected.");
                Assert.AreEqual(expectedAchievement.Gamerscore, actualAchievement.Gamerscore, "Actual Achievement.Gamerscore does not equal expected.");
                Assert.AreEqual(expectedAchievement.HowToEarn, actualAchievement.HowToEarn, "Actual Achievement.HowToEarn does not equal expected.");
                Assert.AreEqual(expectedAchievement.IsEarned, actualAchievement.IsEarned, "Actual Achievement.IsEarned does not equal expected.");
                Assert.AreEqual(expectedAchievement.Name, actualAchievement.Name, "Actual Achievement.Name does not equal expected.");
                Assert.AreEqual(expectedAchievement.PictureUrl, actualAchievement.PictureUrl, "Actual Achievement.PictureUrl does not equal expected.");
            }
        }

        public static void VerifyMessageSummariesResponses(MessageSummariesResponse expected, MessageSummariesResponse actual)
        {
            Assert.AreEqual(expected.HashCode, actual.HashCode, "Hash Codes are not equal.");
            Assert.AreEqual(expected.Summaries.Count, actual.Summaries.Count, "Number of message summaries is not equal");

            for (int i = 0; i < expected.Summaries.Count; i++)
            {
                Assert.AreEqual(expected.Summaries[i].CanDelete, actual.Summaries[i].CanDelete, "CanDelete flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].CanSetReadFlag, actual.Summaries[i].CanSetReadFlag, "CanSetReadFlag flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].HasBeenRead, actual.Summaries[i].HasBeenRead, "HasBeenRead flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].HasImage, actual.Summaries[i].HasImage, "HasImage flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].HasText, actual.Summaries[i].HasText, "HasText flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].HasVoice, actual.Summaries[i].HasVoice, "HasVoice flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].IsFromFriend, actual.Summaries[i].IsFromFriend, "IsFromFriend flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].MessageId, actual.Summaries[i].MessageId, "MessageId flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].MessageType, actual.Summaries[i].MessageType, "MessageType flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].SenderGamertag, actual.Summaries[i].SenderGamertag, "SenderGamertag flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].SenderTitleId, actual.Summaries[i].SenderTitleId, "SenderTitleId flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].SentTime, actual.Summaries[i].SentTime, "SentTime flags are not equal for message summary index " + i);
                Assert.AreEqual(expected.Summaries[i].Subject, actual.Summaries[i].Subject, "Subject flags are not equal for message summary index " + i);
            }
        }

        public Profile GetProfileYouView(string locale, PlatformType platformType, SectionFlags sectionFlags, string gamertag)
        {
            return this.GetProfileYouView(locale, (uint)platformType, sectionFlags, gamertag);
        }

        /// <summary>
        /// Returns the profile information for the current user
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <param name="sectionFlags"></param>
        /// <returns></returns>
        public Profile GetProfileMyView(string locale, PlatformType platformType, SectionFlags sectionFlags)
        {
            return this.GetProfileMyView(locale, (uint)platformType, sectionFlags);
        }

        /// <summary>
        /// Returns a list of gamertags that are friends of the account passed in.
        /// </summary>
        /// <param name="acct"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public List<string> GetFriendsGamertags(Account acct, string locale, uint platformId)
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);
            Profile pro = lib.GetProfileMyView(us_locale, platformId, SectionFlags.XboxLiveProperties);

            List<string> gamertags = new List<string>();

            foreach (var friend in pro.Friends)
            {
                gamertags.Add(friend.ProfileProperties[ProfileProperty.GamerTag] as string);
            }

            return gamertags;
        }

        /// <summary>
        /// Tests all the XboxLiveProperties against the expected values
        /// </summary>
        /// <param name="expected">expected Profile object</param>
        /// <param name="actual">actual Profile object</param>
        public static void VerifyXboxLiveProperties(Profile expected, Profile actual)
        {
            foreach (ProfileProperty profProp in XboxLiveProfileProperties)
            {
                VerifyProfileProperty(expected, actual, profProp);
            }
        }

        /// <summary>
        /// Validate ProfileProperties in ProfilePropertiesNotReturned are not in the Profile object
        /// </summary>
        /// <param name="actual">Profile object to validate</param>
        public static void VerifyProfilePropertiesNotReturned(Profile actual)
        {
            foreach (ProfileProperty profProp in ProfilePropertiesNotReturned)
            {
                VerifyProfilePropertiesIsMissing(actual, profProp);
            }
        }

        /// <summary>
        /// Validate that the ProfileProperty is not found in the ProfileProperties of a Profile object.
        /// </summary>
        /// <param name="actual">Profile Object to validate</param>
        /// <param name="prop">PropfileProperty to check</param>
        public static void VerifyProfilePropertiesIsMissing(Profile actual, ProfileProperty prop)
        {
            Assert.IsFalse(actual.ProfileProperties.ContainsKey(prop), "Profile should not contain ProfileProperty " + prop.ToString());
        }

        /// <summary>
        /// Tests that the Profile properties match the expected values
        /// AvatarImageUrl, GamerPicUrl and SmallGamerPicUrl are only tested for the ending since it changes per environment
        /// </summary>
        /// <param name="expected">Profile containing expected values</param>
        /// <param name="actual">Profile containing the actual values</param>
        /// <param name="prop">ProfileProperty to test</param>
        public static void VerifyProfileProperty(Profile expected, Profile actual, ProfileProperty prop)
        {
            if (prop.ToString().ToLower().EndsWith("url"))
            {
                Assert.IsTrue(Uri.IsWellFormedUriString(((string)actual.ProfileProperties[prop]), UriKind.Absolute), prop.ToString() + " not a valid url");
            }

            if (prop == ProfileProperty.AvatarImageUrl
                || prop == ProfileProperty.GamerPicUrl
                || prop == ProfileProperty.SmallGamerPicUrl)
            {
                Assert.IsTrue(((string)actual.ProfileProperties[prop]).EndsWith(((string)expected.ProfileProperties[prop])), "Expected value for " + prop.ToString() + " does not match actual from Profile service.");
            }
            else
            {
                Assert.AreEqual(expected.ProfileProperties[prop], actual.ProfileProperties[prop], "Expected value for " + prop.ToString() + " does not match actual from Profile service.");
            }
        }

        /// <summary>
        /// Tests that all Privacy Settings of 2 ProfileEx objects are the same
        /// </summary>
        /// <param name="expected">Expected ProfileEx object</param>
        /// <param name="actual">Actual ProfileEx object</param>
        public static void VerifyProfilePrivacySettings(ProfileEx expected, ProfileEx actual)
        {
            foreach (PrivacySetting currSetting in ProfilePrivacySettings)
            {
                Assert.AreEqual(expected.PrivacySettings[currSetting], actual.PrivacySettings[currSetting], "Privacy Setting " + currSetting.ToString() + " is different than expected.");
            }
        }

        /// <summary>
        /// Retrieve profile information based on an STS ticket
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <param name="sectionFlags"></param>
        /// <param name="gamertag"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public Response GetProfileForCustomStsTicket(string locale, uint platformId, SectionFlags sectionFlags, string gamertag, string stsToken)
        {
            string fullUri = rewardsTransport.ProfileService_fullUri + Constants.GetProfile_RelativePathAndQuery;
            fullUri = fullUri.Replace("{sectionflags}", ((uint)sectionFlags).ToString());
            if (!String.IsNullOrEmpty(gamertag))
            {
                fullUri = fullUri.Replace("{gamertag}", gamertag);
            }
            else
            {
                fullUri = fullUri.Replace("&gamertag={gamertag}", "");
            }
            Response resp;
            if (String.IsNullOrEmpty(stsToken))
            {
                resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, locale, platformId.ToString(), null, string.Empty);
            }
            else
            {
                resp = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, locale, platformId.ToString(), stsToken, string.Empty);
            }
            return resp;
        }

        /// <summary>
        /// Updates an expected Profile object to match the restricted View where some properties are expected to be null
        /// </summary>
        /// <param name="expected">Profile containing expected values</param>
        public static void UpdateExpectedProfileToRestrictedView(Profile expectedProfile)
        {
            //The following properties are not expected to be returned for You View with restricted privacy settings
            expectedProfile.ProfileProperties[ProfileProperty.Bio] = null;
            expectedProfile.ProfileProperties[ProfileProperty.Location] = null;
            expectedProfile.ProfileProperties[ProfileProperty.Motto] = null;
            expectedProfile.ProfileProperties[ProfileProperty.Name] = null;
        }

        /// <summary>
        /// Returns true or false, from the AddFriend response body
        /// </summary>
        /// <param name="responseString"></param>
        /// <returns></returns>
        public static bool GetFriendRequestBool(string responseString)
        {
            string ret = responseString.Replace("xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\"", "");//TODO: Make this elegant
            XmlHelper xhelp = new XmlHelper();
            Boolean b = xhelp.LoadXml<Boolean>(ret);
            return b;
        }

        /// <summary>
        /// Takes an existing user Account and converts it to a Profile object
        /// </summary>
        /// <param name="acct">user Account to be converted</param>
        /// <returns>Profile object created using Account settings</returns>
        public static Profile ConvertAccountToProfile(Account acct)
        {
            Profile meViewProf = new Profile();
            ConvertAccountProfileProperties(acct, meViewProf);

            return meViewProf;
        }

        /// <summary>
        /// Updates the friends lists to be in sync with each other.
        /// </summary>
        /// <param name="profile1"></param>
        /// <param name="profile2"></param>
        public static void UpdateProfileFriends(Profile profile1, Profile profile2)
        {
            if (profile1.Friends == null)
            {
                profile1.Friends = new XmlSerializableList<Profile>();
            }
            if (profile2.Friends == null)
            {
                profile2.Friends = new XmlSerializableList<Profile>();
            }

            Profile newProf1 = CopyXboxLiveProfileProperties(profile1);
            Profile newProf2 = CopyXboxLiveProfileProperties(profile2);

            profile1.Friends.Add(newProf2);
            profile2.Friends.Add(newProf1);

        }

        /// <summary>
        /// Array containing all the XboxLiveProfileProperties
        /// </summary>
        public static ProfileProperty[] XboxLiveProfileProperties = { ProfileProperty.GamerTag, 
                                                                        ProfileProperty.GamerScore, 
                                                                        ProfileProperty.HasAvatar,  
                                                                        ProfileProperty.AvatarImageUrl,
                                                                        ProfileProperty.Bio,
                                                                        ProfileProperty.GamerPicUrl,
                                                                        ProfileProperty.SmallGamerPicUrl,
                                                                        ProfileProperty.Location,
                                                                        ProfileProperty.Motto,
                                                                        ProfileProperty.Name,
                                                                        ProfileProperty.MembershipLevel,
                                                                        ProfileProperty.GamerZone,
                                                                        ProfileProperty.Reputation };

        /// <summary>
        /// Copies all the XboxLiveProperties from one Profile object to another
        /// </summary>
        /// <param name="fromProf"></param>
        /// <returns></returns>
        public static Profile CopyXboxLiveProfileProperties(Profile fromProf)
        {
            Profile toProf = new Profile();

            foreach (ProfileProperty profProp in XboxLiveProfileProperties)
            {
                CopyProfileProperty(fromProf, toProf, profProp);
            }

            return toProf;
        }

        /// <summary>
        /// Copies a ProfileProperty from one Profile to Another
        /// </summary>
        /// <param name="fromProf"></param>
        /// <param name="toProf"></param>
        /// <param name="prop"></param>
        public static void CopyProfileProperty(Profile fromProf, Profile toProf, ProfileProperty prop)
        {
            if (toProf.ProfileProperties == null)
            {
                toProf.ProfileProperties = new XmlSerializableDictionary<ProfileProperty, object>();
            }

            toProf.ProfileProperties.Add(prop, fromProf.ProfileProperties[prop]);
        }

        /// <summary>
        /// Takes an Account and sets the associated ProfileProperties on a Profile object
        /// </summary>
        /// <param name="acct">Account to copy from</param>
        /// <param name="meViewProf">Profile object to modify</param>
        private static void ConvertAccountProfileProperties(Account acct, Profile meViewProf)
        {
            meViewProf.ProfileProperties = new XmlSerializableDictionary<ProfileProperty, object>();
            meViewProf.ProfileProperties.Add(ProfileProperty.GamerTag, acct.XblUser.Gamertag);
            meViewProf.ProfileProperties.Add(ProfileProperty.GamerScore, (int)acct.GamerProfile.Score);

            bool hasAvatar = (acct.GamerProfile.Avatar.Length > 0);
            meViewProf.ProfileProperties.Add(ProfileProperty.HasAvatar, hasAvatar);

            string strXboxAvatarImageUrl = String.Format("avatar/{0}/avatar-body.png", acct.XblUser.Gamertag);
            meViewProf.ProfileProperties.Add(ProfileProperty.AvatarImageUrl, strXboxAvatarImageUrl); //The Full URL is not tested

            meViewProf.ProfileProperties.Add(ProfileProperty.Bio, FixString(acct.GamerProfile.Bio));

            string gamerPicUrl = GetGamerPicUrl(acct.GamerProfile.GamerPicture);
            meViewProf.ProfileProperties.Add(ProfileProperty.GamerPicUrl, gamerPicUrl);
            meViewProf.ProfileProperties.Add(ProfileProperty.SmallGamerPicUrl, gamerPicUrl.Replace("tile/0/2", "tile/0/1"));

            meViewProf.ProfileProperties.Add(ProfileProperty.Location, FixString(acct.GamerProfile.Location));
            meViewProf.ProfileProperties.Add(ProfileProperty.Motto, FixString(acct.GamerProfile.Motto));
            meViewProf.ProfileProperties.Add(ProfileProperty.Name, FixString(acct.GamerProfile.Name));
            meViewProf.ProfileProperties.Add(ProfileProperty.MembershipLevel, acct.XblUser.Settings.UserType.ToString());
            meViewProf.ProfileProperties.Add(ProfileProperty.GamerZone, acct.GamerProfile.Zone.ToString());
            meViewProf.ProfileProperties.Add(ProfileProperty.Reputation, acct.GamerProfile.Rep);
        }

        /// <summary>
        /// Removes '\0' from strings
        /// </summary>
        /// <param name="value">string to check</param>
        /// <returns>string with '0' removed</returns>
        private static string FixString(string value)
        {
            if (value.Contains("\0"))
            {
                value = value.Replace("\0", "");
            }

            return value;
        }

        /// <summary>
        /// Converts GamerPic returned from GamerProfile to url
        /// </summary>
        /// <param name="GamerPic">string containing GamerPic value from GamerProfile object</param>
        /// <returns>url for the GamerPic</returns>
        private static string GetGamerPicUrl(string GamerPic)
        {
            string m_GamerPicUrl = "";

            GamerPic = FixString(GamerPic);

            switch (GamerPic.ToLowerInvariant())
            {
                case "585207d10002000100010001":
                    m_GamerPicUrl += "t.585207d1/tile/0/20001";
                    //FriendlyName = "Bubbles";
                    break;
                case "585207d10002000200010002":
                    m_GamerPicUrl += "t.585207d1/tile/0/20002";
                    //FriendlyName = "Dragon";
                    break;
                case "585207d10002000300010003":
                    m_GamerPicUrl += "t.585207d1/tile/0/20003";
                    //FriendlyName = "Blue Guy 1";
                    break;
                case "585207d10002000400010004":
                    m_GamerPicUrl += "t.585207d1/tile/0/20004";
                    //FriendlyName = "Gorrilla";
                    break;
                case "585207d10002000500010005":
                    m_GamerPicUrl += "t.585207d1/tile/0/20005";
                    //FriendlyName = "Fish";
                    break;
                case "585207d10002000600010006":
                    m_GamerPicUrl += "t.585207d1/tile/0/20006";
                    //FriendlyName = "Kitty";
                    break;
                case "585207d10002000700010007":
                    m_GamerPicUrl += "t.585207d1/tile/0/20007";
                    //FriendlyName = "Blue Guy 2";
                    break;
                case "585207d10002000800010008":
                    m_GamerPicUrl += "t.585207d1/tile/0/20008";
                    //FriendlyName = "Chess";
                    break;
                case "585207d10002000900010009":
                    m_GamerPicUrl += "t.585207d1/tile/0/20009";
                    //FriendlyName = "Purple Chatter";
                    break;
                case "585207d10002000a0001000a":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000a";
                    //FriendlyName = "Elf Lady";
                    break;
                case "585207d10002000b0001000b":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000b";
                    //FriendlyName = "Horse";
                    break;
                case "585207d10002000c0001000c":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000c";
                    //FriendlyName = "Red-Haired Alien";
                    break;
                case "585207d10002000d0001000d":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000d";
                    //FriendlyName = "Green Monster 1";
                    break;
                case "fffe07d10002000100010001":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20001";
                    //FriendlyName = "Xbox Rings";
                    break;
                case "fffe07d10002000200010002":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20002";
                    //FriendlyName = "Boy";
                    break;
                case "fffe07d10002000300010003":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20003";
                    //FriendlyName = "Chimp";
                    break;
                case "fffe07d10002000400010004":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20004";
                    //FriendlyName = "Smiley";
                    break;
                case "fffe07d10002000500010005":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20005";
                    //FriendlyName = "Pirate";
                    break;
                case "fffe07d10002000600010006":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20006";
                    //FriendlyName = "Panda";
                    break;
                case "fffe07d10002000700010007":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20007";
                    //FriendlyName = "Pink-Haired Girl";
                    break;
                case "fffe07d10002000800010008":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20008";
                    //FriendlyName = "Dragon Sillouette";
                    break;
                case "fffe07d10002000900010009":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20009";
                    //FriendlyName = "Dog";
                    break;
                case "fffe07d10002000a0001000a":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/2000a";
                    //FriendlyName = "Blue Guy 3";
                    break;
                case "fffe07d10002000b0001000b":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/2000b";
                    //FriendlyName = "Soccer Ball";
                    break;
                case "fffe07d10002000c0001000c":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/2000c";
                    //FriendlyName = "Skull";
                    break;
                default:
                    throw new Exception("The specified Gamer Pic is unknown.");
            }
            return m_GamerPicUrl;
        }

        /// <summary>
        /// Adds games and achievements to the user account associated with this TestScenarioLibrary instance
        /// </summary>
        /// <param name="achievementsGame">TestGame with Achievements</param>
        /// <param name="appId">The app id of the game</param>
        /// <param name="locale">Locale</param>
        public void AddGamesAndAchievements(TestGame achievementsGame, string appId, string locale)
        {

            GrantAchievements ga = this.CreateAchievements_SingleUnearned(achievementsGame, appId, locale);

            Response resp = this.GrantAchievements(ga, locale, achievementsGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, resp.StatusCode, "Grant achievement was not successful");
        }

        /// <summary>
        /// This verifies that GamerTag, GamerScore, MembershipLevel, AvatarPic Url SmallGamerPicUrl and GamerPic URL are non empty. 
        /// These are the basic properties displayed by default on xbox.com
        /// </summary>
        /// <param name="profile"></param>
        public static void VerifyBasicXboxLiveProperties(Profile profile)
        {
            Assert.IsFalse(String.IsNullOrEmpty(profile.ProfileProperties[ProfileProperty.GamerTag].ToString()));
            Assert.IsFalse(String.IsNullOrEmpty(profile.ProfileProperties[ProfileProperty.GamerScore].ToString()));
            Assert.IsFalse(String.IsNullOrEmpty(profile.ProfileProperties[ProfileProperty.MembershipLevel].ToString()));
            Assert.IsFalse(String.IsNullOrEmpty(profile.ProfileProperties[ProfileProperty.SmallGamerPicUrl].ToString()));
            Assert.IsFalse(String.IsNullOrEmpty(profile.ProfileProperties[ProfileProperty.SmallGamerPicUrl].ToString()));
            Assert.IsFalse(String.IsNullOrEmpty(profile.ProfileProperties[ProfileProperty.AvatarImageUrl].ToString()));
            Assert.IsFalse(String.IsNullOrEmpty(profile.ProfileProperties[ProfileProperty.GamerPicUrl].ToString()));
        }

        /// <summary>
        /// This verifies that all Privacy Settings are a valid values (0, 1 or 2)
        /// </summary>
        /// <param name="profile"></param>
        public static void VerifyPrivacySettings(ProfileEx profile)
        {
            Assert.IsTrue(profile.PrivacySettings[PrivacySetting.FriendsList] >= 0 && profile.PrivacySettings[PrivacySetting.FriendsList] <= 2);
            Assert.IsTrue(profile.PrivacySettings[PrivacySetting.GamerProfile] >= 0 && profile.PrivacySettings[PrivacySetting.GamerProfile] <= 2);
            Assert.IsTrue(profile.PrivacySettings[PrivacySetting.MemberContent] >= 0 && profile.PrivacySettings[PrivacySetting.MemberContent] <= 2);
            Assert.IsTrue(profile.PrivacySettings[PrivacySetting.OnlineStatus] >= 0 && profile.PrivacySettings[PrivacySetting.OnlineStatus] <= 2);
            Assert.IsTrue(profile.PrivacySettings[PrivacySetting.PlayedGames] >= 0 && profile.PrivacySettings[PrivacySetting.PlayedGames] <= 2);
            Assert.IsTrue(profile.PrivacySettings[PrivacySetting.Video] >= 0 && profile.PrivacySettings[PrivacySetting.Video] <= 2);
            Assert.IsTrue(profile.PrivacySettings[PrivacySetting.VoiceAndText] >= 0 && profile.PrivacySettings[PrivacySetting.VoiceAndText] <= 2);
        }

        /// <summary>
        /// Verify proper profile section displayed based on privacy setting 
        /// (only verifies whether a section is null or not)
        /// </summary>
        /// <param name="profile"></param>
        /// <param name="userLevel">0 = self, 1 = friend, 2 = non-friend</param>
        public static void VerifyPrivacySettingsApplied(ProfileEx profile, int userLevel)
        {
            //Profile Properties
            if (userLevel <= profile.PrivacySettings[PrivacySetting.GamerProfile])
            {
                Assert.IsNotNull(profile.ProfileProperties);
            }
            else
            {
                Assert.IsNull(profile.ProfileProperties);
            }

            //Friends
            if (userLevel <= profile.PrivacySettings[PrivacySetting.FriendsList])
            {
                Assert.IsNotNull(profile.Friends);
            }
            else
            {
                Assert.IsNull(profile.Friends);
            }

            //Recent Games
            if (userLevel <= profile.PrivacySettings[PrivacySetting.PlayedGames])
            {
                Assert.IsNotNull(profile.RecentGames);
            }
            else
            {
                Assert.IsNull(profile.RecentGames);
            }

            //Recent Achievements
            if (userLevel <= profile.PrivacySettings[PrivacySetting.PlayedGames])
            {
                Assert.IsNotNull(profile.RecentAchievements);
            }
            else
            {
                Assert.IsNull(profile.RecentAchievements);
            }

            //Presence Info
            if (userLevel <= profile.PrivacySettings[PrivacySetting.OnlineStatus])
            {
                Assert.IsNotNull(profile.PresenceInfo);
            }
            else
            {
                Assert.IsNull(profile.PresenceInfo);
            }

        }

        #endregion Profile helpers
        #region ProfilePartner helpers


        public Response PostProfilePartner(ProfileEx profile, string locale)
        {
            return PostProfilePartner(profile, locale, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Uses the transport class to call the POST Profile API with the provided values
        /// </summary>
        public Response PostProfilePartner(ProfileEx profile, string locale, AuthenticationMethod authMethod)
        {
            string profileString = RewardsTestUtil.GetPostProfilePartnerString(profile);
            return this.PostProfilePartner(profileString, locale, authMethod);
        }

        /// <summary>
        /// Creates a profile with specific properties for posting 
        /// </summary>
        /// <param name="name">name (optional)</param>
        /// <param name="bio">bio (optional)</param>
        /// <param name="gamerZone">gamerZone (optional)</param>
        /// <param name="location">location (optional)</param>
        /// <param name="motto">motto (optional)</param>
        public ProfileEx CreateProfileWithProperties(string name, string bio, string gamerZone, string location, string motto)
        {
            ProfileEx pro = new ProfileEx();
            pro.ProfileProperties = new XmlSerializableDictionary<ProfileProperty, object>();

            // if a string is empty, it is valid to add that attribute, so only test for null
            if (name != null) { pro.ProfileProperties.Add(ProfileProperty.Name, name); }
            if (bio != null) { pro.ProfileProperties.Add(ProfileProperty.Bio, bio); }
            if (gamerZone != null) { pro.ProfileProperties.Add(ProfileProperty.GamerZone, gamerZone); }
            if (location != null) { pro.ProfileProperties.Add(ProfileProperty.Location, location); }
            if (motto != null) { pro.ProfileProperties.Add(ProfileProperty.Motto, motto); }

            pro.SectionFlags = (long)SectionFlags.XboxLiveProperties;

            return pro;
        }

        public ProfileEx CreateProfileWithDefaultProperties()
        {
            return CreateProfileWithProperties("Sam Aran", "I like flowers.", "Recreation", "Redmond", "Interesting!");
        }

        /// <summary>
        /// Creates a profile with specific privacy settings for posting
        /// </summary>
        /// <param name="voiceAndText">voiceAndText (optional)</param>
        /// <param name="voice">voice (optional)</param>
        /// <param name="gamerProfile">gamerProfile (optional)</param>
        /// <param name="onlineStatus">onlineStatus (optional)</param>
        /// <param name="memberContent">memberContent (optional)</param>
        /// <param name="playedGames">playedGames (optional)</param>
        /// <param name="friendsList">friendsList (optional)</param>
        public ProfileEx CreateProfileWithPrivacySettings(uint? voiceAndText, uint? voice, uint? gamerProfile, uint? onlineStatus, uint? memberContent, uint? playedGames, uint? friendsList)
        {
            ProfileEx pro = new ProfileEx();
            pro.PrivacySettings = new XmlSerializableDictionary<PrivacySetting, uint>();

            if (voiceAndText.HasValue) { pro.PrivacySettings.Add(PrivacySetting.VoiceAndText, voiceAndText.Value); }
            if (voice.HasValue) { pro.PrivacySettings.Add(PrivacySetting.Video, voice.Value); }
            if (gamerProfile.HasValue) { pro.PrivacySettings.Add(PrivacySetting.GamerProfile, gamerProfile.Value); }
            if (onlineStatus.HasValue) { pro.PrivacySettings.Add(PrivacySetting.OnlineStatus, onlineStatus.Value); }
            if (memberContent.HasValue) { pro.PrivacySettings.Add(PrivacySetting.MemberContent, memberContent.Value); }
            if (playedGames.HasValue) { pro.PrivacySettings.Add(PrivacySetting.PlayedGames, playedGames.Value); }
            if (friendsList.HasValue) { pro.PrivacySettings.Add(PrivacySetting.FriendsList, friendsList.Value); }

            pro.SectionFlags = (long)SectionFlags.PrivacySettings;

            return pro;
        }

        public ProfileEx CreateProfileWithPrivacySettings(PrivacySettings? voiceAndText, PrivacySettings? voice, PrivacySettings? gamerProfile, PrivacySettings? onlineStatus, PrivacySettings? memberContent, PrivacySettings? playedGames, PrivacySettings? friendsList)
        {
            return this.CreateProfileWithPrivacySettings((uint?)voiceAndText, (uint?)voice, (uint?)gamerProfile, (uint?)onlineStatus, (uint?)memberContent, (uint?)playedGames, (uint?)friendsList);
        }

        public ProfileEx CreateProfileWithRandomPrivacySettings()
        {
            Random r = new Random();
            return CreateProfileWithPrivacySettings((uint)r.Next(0, 3), (uint)r.Next(0, 3), (uint)r.Next(0, 3), (uint)r.Next(0, 3), (uint)r.Next(0, 3), (uint)r.Next(0, 3), (uint)r.Next(0, 3));
        }
        #endregion Profile Partner helpers
        #region PartnerServices helpers

        public static List<Gamertag> GetDefaultFriendsGamertags(int count)
        {
            List<Gamertag> gts = new List<Gamertag>();

            for (int i = 0; i < count; i++)
            {
                Gamertag gt = new Gamertag();
                gt.Name = AuthenticationTransport.FriendsGamertags[i];
                gts.Add(gt);
            }

            return gts;
        }

        public static string GetDefaultFriendsGamertagsCommaDelimited(int count)
        {
            string gamertags = string.Empty;

            for (int i = 0; i < count; i++)
            {
                gamertags = gamertags + AuthenticationTransport.FriendsGamertags[i] + ",";
            }

            gamertags = gamertags.Remove(gamertags.Length - 1); // remove the last comma

            return gamertags;
        }

        public AchievementsRequest CreateDefaultAchievementsList(int gamertagCount, uint gameId)
        {
            AchievementsRequest request = new AchievementsRequest();
            request.GamerTags = GetDefaultFriendsGamertags(gamertagCount);
            request.GameId = gameId.ToString();
            return request;
        }

        public AchievementsRequest CreateAchievementsRequest(List<string> gamertagList, uint gameId)
        {
            AchievementsRequest request = new AchievementsRequest();
            request.GameId = gameId.ToString();
            request.GamerTags = new List<Gamertag>();

            foreach (var item in gamertagList)
            {
                Gamertag gt = new Gamertag();
                gt.Name = item;
                request.GamerTags.Add(gt);
            }

            return request;
        }

        public SendMessageRequest CreateSendMessageRequest(List<string> gamertagList, string messageText)
        {
            SendMessageRequest request = new SendMessageRequest();
            request.MessageText = messageText;
            request.Recipients = new List<string>();

            foreach (var item in gamertagList)
            {
                request.Recipients.Add(item);
            }

            return request;
        }

        public SendMessageRequest CreateSendMessageRequest(string gamertag, string messageText)
        {
            SendMessageRequest request = new SendMessageRequest();
            request.MessageText = messageText;
            request.Recipients = new List<string>();

            request.Recipients.Add(gamertag);

            return request;
        }

        /// <summary>
        /// Check if the user has any messages, if they do not send them a message from themself
        /// This will avoid user account creation failures
        /// </summary>
        public void CheckForMessagesForBVTs(string gamertag)
        {
            MessageSummariesResponse messages = this.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            if (messages.Summaries.Count == 0)
            {
                SendMessageRequest sendMessageRequest = this.CreateSendMessageRequest(gamertag, TestHelper.GetRandomString(15));
                Response response = this.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);
                if (response.StatusCode == HttpStatusCode.InternalServerError)
                {
                    Assert.Fail("Message BVT failure.  An error occurred when trying to send a message. (Most likely a platform error)");
                }
            }
        }

        /// <summary>
        /// This will return a valid messageId for the current user
        /// NOTE: This can also be used to guarantee that the current user has at least 1 message (from random user)
        /// </summary>
        /// <returns></returns>
        public uint GetValidMessageId()
        {
            MessageSummariesResponse messages = this.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            uint messageId = 0;

            if (messages.Summaries.Count == 0)
            {
                messageId = SendMessageAndGetMessageId(AuthenticationTransport.PrimaryUser.Gamertag, TestHelper.GetRandomString(20));
            }
            else
            {
                messageId = messages.Summaries[0].MessageId;
            }

            return messageId;
        }

        /// <summary>
        /// This will return a valid messageId for the current user
        /// NOTE: This can also be used to guarantee that the current user has at least 1 message (from random user)
        /// </summary>
        /// <returns></returns>
        public uint GetValidUnreadMessageId()
        {
            MessageSummariesResponse messages = this.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            uint messageId = 0;

            foreach (MessageSummary sum in messages.Summaries)
            {
                if (sum.HasBeenRead == false)
                {
                    messageId = sum.MessageId;
                    break;
                }
            }

            if (messageId == 0)
            {
                messageId = SendMessageAndGetMessageId(AuthenticationTransport.PrimaryUser.Gamertag, TestHelper.GetRandomString(20));
            }

            return messageId;
        }

        public uint SendMessageAndGetMessageId(string toGamertag, string messageText)
        {
            InitializeSendMessageUser();

            return SendMessageAndGetMessageId(sendMessageUser, toGamertag, messageText);
        }

        /// <summary>
        /// Send a message with <code>messageText</code> to <code>gamertag</code> and return the ID of the message sent
        /// NOTE: This can also just be used to easily send a message to a gamertag (from random user)
        /// NOTE2: Please make sure privacy settings are properly set for To and From users.
        /// </summary>
        /// <param name="gamertag"></param>
        /// <param name="messageText"></param>
        /// <returns></returns>
        public uint SendMessageAndGetMessageId(RewardsTestScenarioLibrary fromUserLibrary, string toGamertag, string messageText)
        {
            uint returnId = 0;

            //cache for SendMessage() is 60 sec
            int retries = 20;

            //Set RewardsHead PrivacySetting for VoiceAndText to Everyone so it can receive messages
            ProfileEx profile = this.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            if (profile.PrivacySettings[PrivacySetting.VoiceAndText] != 0)
            {
                profile.PrivacySettings[PrivacySetting.VoiceAndText] = 0;
                Response result = this.PostProfilePartner(profile, us_locale);
            }

            SendMessageRequest sendMessageRequest = fromUserLibrary.CreateSendMessageRequest(toGamertag, messageText);
            Response response = fromUserLibrary.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            //if send failed retry only once 
            if (response.StatusCode != HttpStatusCode.OK)
            {
                response = fromUserLibrary.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            }

            //if 2nd send attempt failed, throw exception
            if (response.StatusCode != HttpStatusCode.OK)
            {
                throw new Exception("Failure sending message.");
            }

            while (returnId == 0 && retries >= 0)
            {
                MessageSummariesResponse messages = this.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

                string compareMessageText = messageText;

                if (messageText.Length > 19)
                {
                    compareMessageText = messageText.Substring(0, 19);
                }

                foreach (MessageSummary summary in messages.Summaries)
                {
                    if (summary.Subject.Equals(compareMessageText))
                    {
                        returnId = summary.MessageId;
                        break;
                    }
                }

                Trace.TraceInformation("Message was not received yet, retrying " + retries + " more times.");
                Thread.Sleep(5000);
                retries--;
            }

            if (returnId == 0) { throw new Exception("Message was not delivered in a reasonable time."); }

            return returnId;
        }

        public bool VerifyMessageExistsPoll(string messageText)
        {
            uint trash = 0;
            return VerifyMessageExistsPoll(messageText, out trash);
        }

        public bool VerifyMessageExistsPoll(string messageText, out uint messageId)
        {
            uint returnId = 0;
            int retries = 20;
            messageId = 0;

            while (returnId == 0 && retries >= 0)
            {
                MessageSummariesResponse userMessages = this.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

                if (VerifyMessageExists(userMessages, messageText, null, out messageId))
                {
                    return true;
                }

                Trace.TraceInformation("Message was not received yet, retrying " + retries + " more times.");
                Thread.Sleep(5000);
                retries--;
            }

            return false;
        }

        public bool VerifyMessageExistsPoll(string messageText, string fromGamertag, out uint messageId)
        {
            uint returnId = 0;
            int retries = 20;
            messageId = 0;

            while (returnId == 0 && retries >= 0)
            {
                MessageSummariesResponse userMessages = this.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

                if (VerifyMessageExists(userMessages, messageText, fromGamertag, out messageId))
                {
                    return true;
                }

                Trace.TraceInformation("Message was not received yet, retrying " + retries + " more times.");
                Thread.Sleep(5000);
                retries--;
            }

            return false;
        }

        public bool VerifyNumberOfFriendRequestFromUser(string fromGamertag, int numRequests)
        {
            int retries = 20;
            int count = 0;

            while (retries >= 0)
            {
                count = 0;
                MessageSummariesResponse userMessages = this.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

                foreach (MessageSummary summary in userMessages.Summaries)
                {
                    //MessageType of 2 = Friend Request
                    if (summary.MessageType == 2)
                    {
                        if (summary.SenderGamertag.Equals(fromGamertag))
                        {
                            count++;
                        }
                    }
                }

                if (count != numRequests)
                {
                    throw new Exception("Incorrect number of friend requests from user, expected " + numRequests);
                }

                Thread.Sleep(5000);
                retries--;
            }

            return false;
        }

        public bool VerifyMessageExists(MessageSummariesResponse messages, string messageText, string fromGamertag, out uint messageId)
        {
            bool result = false;
            messageId = 0;

            foreach (MessageSummary currSummary in messages.Summaries)
            {
                string compareMessageText = messageText;

                if (messageText.Length > 19)
                {
                    compareMessageText = messageText.Substring(0, 19);
                }

                if (fromGamertag == null)
                {
                    fromGamertag = currSummary.SenderGamertag;
                }

                if (currSummary.Subject.Equals(compareMessageText) &&
                    currSummary.SenderGamertag.Equals(fromGamertag))
                {
                    messageId = currSummary.MessageId;
                    result = true;
                    break;
                }
            }

            return result;
        }

        public void InitializeSendMessageUser()
        {
            sendMessageUser = new RewardsTestScenarioLibrary(true);
        }

        /// <summary>
        /// Posts {gamesCount} unique game result(s).
        /// </summary>
        /// <param name="gamesCount">The number of (unique) games to post a result for</param>
        public List<TestGame> PostMultipleGameResults(int gamesCount)
        {
            List<TestGame> allGames = TestGameUtility.GetAllGames();
            List<TestGame> gamesPosted = new List<TestGame>();

            if (gamesCount > allGames.Count)
                Assert.Fail("There are only {0} games available, where {1} were requested", allGames.Count, gamesCount);

            foreach (TestGame game in allGames)
            {
                if (game.PlatformId == 5) // only post Mobile games
                {
                    Response resp = PostGameResultWithDefaultStats(game, us_locale);
                    if (resp.StatusCode == HttpStatusCode.Accepted)
                        gamesPosted.Add(game);
                    if (gamesPosted.Count == gamesCount)
                        break;
                }
            }

            if (gamesPosted.Count < gamesCount)
                Assert.Inconclusive("Not enough games were posted to successfully test this case");

            return gamesPosted;
        }

        /// <summary>
        /// Setup user so all privacy settings are set to everyone for messaging purposes
        /// </summary>
        public void SetupUserForMessaging()
        {
            ProfileEx prof = CreateProfileWithPrivacySettings(PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone);
            Response response = this.PostProfilePartner(prof, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Setting up Send Message User failed.");
        }

        public void SetupUserWithUniformPrivacy(PrivacySettings privacySettings)
        {
            ProfileEx profile = CreateProfileWithPrivacySettings(privacySettings, privacySettings, privacySettings, privacySettings, privacySettings, privacySettings, privacySettings);
            Response response = this.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Setting up user's profile failed");
        }

        public bool VerifyFriendState(ProfileEx profile, string friendGamertag, FriendState expectedFriendState)
        {
            bool isFriendStateCorrect = false;

            foreach (Friend friend in profile.FriendList)
            {
                if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(friendGamertag))
                {
                    Trace.TraceInformation("Expected FriendState: {0}, Actual FriendState: {1}", (uint)expectedFriendState, friend.FriendState);
                    if (friend.FriendState == (uint)expectedFriendState)
                    {
                        isFriendStateCorrect = true;
                        break;
                    }
                }
            }
            return isFriendStateCorrect;
        }
        #endregion PartnerServices helpers

        public uint GetLIVEnErrorCode(Response response)
        {
            uint errorCode = 0;

            XDocument errorResponse = XDocument.Parse(response.Body);

            string errorCodeString = errorResponse.Descendants().Where(n => n.Name.LocalName == "LIVEnErrorCode").ElementAt(0).Value;

            errorCode = Convert.ToUInt32(errorCodeString);

            return errorCode;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\ActiveAuthEmulator\ActiveAuthData.cs ===
﻿using Leet.Identity.ActiveAuth;

namespace MetroidEmulator
{
    /// <summary>
    /// ActiveAuthData class
    /// </summary>
    public class ActiveAuthData : IActiveAuthAdapter
    {
        /// <summary>
        /// Gets or sets the Cid
        /// </summary>
        public long Cid { get; set; }

        /// <summary>
        /// Gets or sets the Puid
        /// </summary>
        public long Puid { get; set; }

        /// <summary>
        /// Gets or sets the Xuid
        /// </summary>
        public ulong Xuid { get; set; }

        /// <summary>
        /// Creates an instance of the ActiveAuthData class
        /// </summary>
        public ActiveAuthData()
        { }

        public bool HasPrivilege(int privilege)
        {
            throw new System.NotImplementedException();
        }

        public xonline.common.service.XblSamlToken SamlToken
        {
            get
            {
                return null;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Utility\RewardsTestUtilityLibrary.cs ===
﻿using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Threading;
using System.Xml.Linq;
using Gds.Contracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Rewards.Test
{
    public class RewardsTestUtil
    {
        private static XmlHelper xhelp = new XmlHelper();

        public static string AuthorizationType = "X-Authorization";

        /// <summary>
        /// Asserts that the expected status code is returned in the WebException
        /// </summary>
        /// <param name="we"></param>
        /// <param name="expectedStatusCode"></param>
        public static void VerifyHttpStatusCode(WebException we, HttpStatusCode expectedStatusCode)
        {
            if (!(we.Response == null))
            {
                HttpWebResponse response = we.Response as HttpWebResponse;
                Assert.AreEqual(expectedStatusCode, response.StatusCode, "Status code did not match");
            }
        }

        /// <summary>
        /// Deserializes an xml string to an object of specific type
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="xmlString"></param>
        /// <returns></returns>
        public static T DeserializeLeaderboardResponseToObject<T>(string xmlString)
        {
            DataContractSerializer dcs = new DataContractSerializer(typeof(T));
            MemoryStream memStre = new MemoryStream(Encoding.UTF8.GetBytes(xmlString));
            T result = (T)dcs.ReadObject(memStre);
            memStre.Close();
            return result;
        }

        /// <summary>
        /// Deserializes a Json string to an object of specific type
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="jsonString"></param>
        /// <returns></returns>
        public static T GetObjectFromJson<T>(string jsonString)
        {
            DataContractJsonSerializer dcs = new DataContractJsonSerializer(typeof(T));
            MemoryStream memStre = new MemoryStream(Encoding.UTF8.GetBytes(jsonString));
            T result = (T)dcs.ReadObject(memStre);
            memStre.Close();
            return result;
        }

        /// <summary>
        /// Returns a well formed xml string 
        /// </summary>
        /// <param name="xml"></param>
        /// <returns></returns>
        public static string GetXML(string xml)
        {
            try
            {
                XDocument xdoc = XDocument.Parse(xml);
                return xdoc.ToString();
            }
            catch
            {
                return xml;
            }
        }

        /// <summary>
        /// Get the string for a GrantAchievements object
        /// </summary>
        /// <param name="grantAch"></param>
        /// <returns></returns>
        public static string GetGrantAchievementsString(GrantAchievements grantAch)
        {
            if (grantAch == null)
            {
                return null;
            }
            string achievementString = xhelp.SerializeObjectToXmlString(grantAch);
            achievementString = xhelp.StripXmlDeclaration(achievementString);
            achievementString = achievementString.Replace("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", Constants.GdsContractsNamespaceUri);
            achievementString = achievementString.Replace("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", Constants.DefaultXmlNamespace);
            achievementString = achievementString.Replace("<AchievementEarned>", "<AchievementEarned xmlns=\"\">");//BUGBUG: Shouldnt add empty namespace attributes
            achievementString = achievementString.Replace("\r\n  ", "");
            achievementString = achievementString.Replace("\r\n", "");
            achievementString = achievementString.Replace("\0", "");
            Trace.TraceInformation("GrantAchievements body");
            Trace.WriteLine(RewardsTestUtil.GetXML(achievementString));

            return achievementString;
        }

        public static string GetGrantAvatarAwardsString(GrantAvatarAssets grantAas)
        {
            if (grantAas == null)
            {
                return null;
            }
            string avaratawardsString = xhelp.SerializeObjectToXmlString(grantAas);
            avaratawardsString = xhelp.StripXmlDeclaration(avaratawardsString);
            avaratawardsString = avaratawardsString.Replace("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", Constants.GdsContractsNamespaceUri);
            avaratawardsString = avaratawardsString.Replace("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", Constants.DefaultXmlNamespace);
            avaratawardsString = avaratawardsString.Replace("<AvatarAssetsEarned xmlns=\"\">", "<AvatarAssetsEarned xmlns=\"\">");//BUGBUG: Shouldnt add empty namespace attributes
            avaratawardsString = avaratawardsString.Replace("\r\n  ", "");
            avaratawardsString = avaratawardsString.Replace("\r\n", "");
            avaratawardsString = avaratawardsString.Replace("\0", "");
            Trace.TraceInformation("GrantAvatarAssets body");
            Trace.WriteLine(RewardsTestUtil.GetXML(avaratawardsString));

            return avaratawardsString;
        }

        /// <summary>
        /// Get the string for a GameResult object
        /// </summary>
        /// <param name="gameResult"></param>
        /// <returns></returns>
        public static string GetPostGameResultString(GameResult gameResult)
        {
            if (gameResult == null)
            {
                return null;
            }
            string gameResultString = xhelp.SerializeObjectToXmlString(gameResult);

            Trace.TraceInformation("GameResult body");
            Trace.WriteLine(RewardsTestUtil.GetXML(gameResultString));
            return gameResultString;
        }

        /// <summary>
        /// Get the string for a Profile object
        /// </summary>
        public static string GetPostProfilePartnerString(ProfileEx profile)
        {
            if (profile == null)
            {
                return null;
            }
            string profileString = xhelp.SerializeObjectToXmlString(profile);

            Trace.TraceInformation("Profile body");
            Trace.WriteLine(RewardsTestUtil.GetXML(profileString));
            return profileString;
        }

        /// <summary>
        /// Get the string for a Presence object
        /// </summary>
        public static string GetPostPresenceString(Presence presence)
        {
            if (presence == null)
            {
                return null;
            }
            string presenceString = xhelp.SerializeObjectToXmlString(presence);

            Trace.TraceInformation("Presence body");
            Trace.WriteLine(RewardsTestUtil.GetXML(presenceString));
            return presenceString;
        }

        /// <summary>
        /// Convert a hex string into a decimal uint
        /// </summary>
        /// <param name="hexString">A hex number in string form, like "0x0F56D109"</param>
        /// <returns></returns>
        public static uint ConvertHexStringToDecimalUint(string hexString)
        {
            hexString = hexString.Substring(2); // remove the "0x"
            return uint.Parse(hexString, System.Globalization.NumberStyles.AllowHexSpecifier);
        }

        /// <summary>
        /// Returns a string representation of the value of long.MaxValue + 1
        /// </summary>
        public static string GetMaxLongPlusOne()
        {
            char[] value = (long.MaxValue).ToString().ToCharArray();
            if (value[value.Length - 1] != '9')
            {
                value[value.Length - 1]++;
            }
            else
            {
                Assert.Fail("Fix this"); //This should never happen, so I'm going to be lazy and not deal with it properly
            }
            return new string(value);
        }

        #region WebRequestHelpers
        /// <summary>
        /// Execute a HttpWebRequest with the provided request parameters with Json content type
        /// </summary>
        /// <param name="method"></param>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteHttpWebRequestJson(string method, string requestBody, string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            return ExecuteHttpWebRequest(method, @"application/json", requestBody, fullUri, locale, platformType, userStsToken, partnerStsToken);
        }

        /// <summary>
        /// Execute a HttpWebRequest with the provided request parameters with xml content type
        /// </summary>
        /// <param name="method"></param>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteHttpWebRequestXml(string method, string requestBody, string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            return ExecuteHttpWebRequest(method, @"application/xml", requestBody, fullUri, locale, platformType, userStsToken, partnerStsToken);
        }

        /// <summary>
        /// Execute a HttpWebRequest with the provided request parameters
        /// </summary>
        /// <param name="webRequest"></param>
        /// <param name="postData"></param>
        /// <returns></returns>
        public static Response ExecuteHttpWebRequest(string method, string contentType, string requestBody, string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            HttpWebRequest request = HttpWebRequest.Create(fullUri) as HttpWebRequest;
            request.Method = method;
            request.Headers = AddHeaders(locale, platformType, userStsToken, partnerStsToken);
            request.ContentType = contentType;
            LogHttpRequest(request);
            if (!String.IsNullOrEmpty(requestBody))
            {
                using (Stream stream = request.GetRequestStream())
                {
                    using (StreamWriter writer = new StreamWriter(stream))
                    {
                        writer.Write(requestBody);
                    }
                }
            }
            else
            {
                request.ContentLength = 0;
            }

            Response resp = new Response();
            HttpWebResponse response = null;
            try
            {
                response = request.GetResponse() as HttpWebResponse;
                resp = CreateResponse(response, ref resp);
                LogResponse(resp);
            }
            catch (WebException we)
            {
                response = we.Response as HttpWebResponse;
                resp.Error = we.ToString();
                resp = CreateResponse(response, ref resp);
                Trace.TraceError("Error occurred executing the request: {0}", we.Message);
                LogResponse(resp);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                }
            }

            return resp;
        }

        /// <summary>
        /// Execute a POST call with content type application/xml for the given Uri
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecutePOSTCallXml(string requestBody, string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            return ExecuteHttpWebRequestXml("POST", requestBody, fullUri, locale, platformType, userStsToken, partnerStsToken);
        }

        /// <summary>
        /// /// Execute a GET call with content type application/xml for the given Uri
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteGETCallXml(string requestBody, string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            return ExecuteHttpWebRequestXml("GET", requestBody, fullUri, locale, platformType, userStsToken, partnerStsToken);
        }

        /// <summary>
        /// Execute a DELETE call with the content type application/xml for the given Uri
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteDELETECallXml(string requestBody, string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            return ExecuteHttpWebRequestXml("DELETE", requestBody, fullUri, locale,platformType, userStsToken, partnerStsToken );
        }

        /// <summary>
        /// Execute a POST call with content type application/json for the given Uri
        /// </summary>
        public static Response ExecutePOSTCallJson(string requestBody, string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            return ExecuteHttpWebRequestJson("POST", requestBody, fullUri, locale, platformType, userStsToken, partnerStsToken);
        }

        /// <summary>
        /// /// Execute a GET call with content type application/json for the given Uri
        /// </summary>
        /// <returns></returns>
        public static Response ExecuteGETCallJson(string fullUri, string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            return ExecuteHttpWebRequestJson("GET", null, fullUri, locale, platformType, userStsToken, partnerStsToken);
        }

        /// <summary>
        /// Trace a HttpWebRequest
        /// </summary>
        /// <param name="request"></param>
        public static void LogHttpRequest(HttpWebRequest request)
        {
            if (request != null)
            {
                Trace.TraceInformation(request.Method);
                Trace.TraceInformation(request.RequestUri.PathAndQuery);
            }
        }

        /// <summary>
        /// Trace a HttpWebResponse
        /// </summary>
        /// <param name="response"></param>
        public static void LogResponse(Response response)
        {
            if (response != null)
            {
                Trace.TraceInformation(response.Server);
                Trace.TraceInformation(response.ResponseUri.PathAndQuery);
                Trace.TraceInformation("StatusCode: {0}", ((int)response.StatusCode));
                Trace.TraceInformation("Response body: {0}", GetXML(response.Body));
            }

        }

        /// <summary>
        /// Wait for cached values to update.  Work around for livecache.
        /// </summary>
        /// <param name="seconds">time in seconds to wait</param>
        public static void Wait(int seconds)
        {
            Thread.Sleep(1000 * seconds);
        }

        private static WebHeaderCollection AddHeaders(string locale, string platformType, string userStsToken, string partnerStsToken)
        {
            WebHeaderCollection headers = new WebHeaderCollection();
            if (!string.IsNullOrEmpty(locale)) { headers.Add("X-Locale", locale); }
            if (!string.IsNullOrEmpty(platformType)) { headers.Add("X-Platform-Type", platformType); }
            if (!string.IsNullOrEmpty(userStsToken)) { headers.Add("X-Authorization", "XBL1.0 x=" + userStsToken); }
            if (!string.IsNullOrEmpty(partnerStsToken)) { headers.Add("X-PartnerAuthorization", "XBL1.0 x=" + partnerStsToken); }
            return headers;
        }

        private static void CheckUri(string uriString)
        {
            if (Uri.IsWellFormedUriString(uriString, UriKind.Absolute))
            {
                throw new ArgumentException("Invalid uri was supplied");
            }
        }

        private static Response CreateResponse(HttpWebResponse response, ref Response resp)
        {
            if (response == null)
            {
                throw new ArgumentException("Invalid/null response was received: " + resp.Error);
            }
            resp.StatusCode = response.StatusCode;
            resp.ResponseUri = response.ResponseUri;
            resp.Server = response.Server;
            resp.StatusDescription = response.StatusDescription;
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                resp.Body = reader.ReadToEnd();
            }
            return resp;
        }
        #endregion WebRequestHelpers
    }

    public class Response
    {
        public HttpStatusCode StatusCode { get; set; }

        public Uri ResponseUri { get; set; }

        public string Body { get; set; }

        public string Server { get; set; }

        public string StatusDescription { get; set; }

        public string Error { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\ActiveAuthEmulator\ActiveAuthEmulator.cs ===
﻿using System;
using System.Web;
using Test.Identity.Common;
using Leet.Identity.ActiveAuth;
using System.Net;
using System.Collections.Specialized;
using xonline.common.service;

namespace MetroidEmulator
{
    /// <summary>
    /// ActiveAuthEmulator class
    /// </summary>
    public class ActiveAuthEmulator : BaseEmulator, IActiveAuthAdapter
    {
        private long cid;
        private long puid;
        private ulong xuid;

        public long Cid
        {
            get
            {
                return this.cid;
            }
        }

        /// <summary>
        /// Gets the Puid
        /// </summary>
        public long Puid
        {
            get
            {
                return this.puid;
            }
        }

        /// <summary>
        /// Gets the Xuid
        /// </summary>
        public ulong Xuid
        {
            get
            {
                return this.xuid;
            }
        }

        /// <summary>
        /// Creates a new instance of the ActiveAuthEmulator
        /// </summary>
        public ActiveAuthEmulator()
            : base()
        {
            long uniqueId = RandomDataGenerator.GenerateRandomUserBase();

            cid = RandomDataGenerator.CID_BASE + uniqueId;
            puid = RandomDataGenerator.PUID_BASE + uniqueId;

            xuid = GetXUID();

            if (xuid == 0)
            {
                xuid = RandomDataGenerator.XUID_BASE + (ulong)uniqueId; 
            }
        }

        public bool HasPrivilege(int privilege)
        {
            throw new System.NotImplementedException();
        }

        public XblSamlToken SamlToken
        {
            get
            {
                return null;
            }
        }

        static ulong GetXUID()
        {
            ulong xuidValue = 0;
            if (HttpContext.Current != null && HttpContext.Current.Request != null && HttpContext.Current.Request.Headers != null)
            {
                NameValueCollection headers = HttpContext.Current.Request.Headers;
                string xuid = headers["X-Authorization"];

                ulong.TryParse(xuid, out xuidValue);             
            }

            return xuidValue;
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\AccountCreationDataAccessEmulator.cs ===
﻿using System;
using Leet.Live.Livecache.Account;
using Leet.Live.Livecache.DataAccess;
using xonline.common.protocol;

namespace MetroidEmulator
{
    public class AccountCreationDataAccessEmulator : IAccountCreationDataAccess
	{
        public void GetUserWebInfo(
            ulong livePuid,
            ServiceTypeEnum liveServiceType,
            out uint tier,
            out uint[] privileges,
            out DateTime lastWebActivity,
            out byte parentalControlGroup,
            out bool isLightAccount,
            out bool isProvisioned,
            out byte accountType,
            out bool isFreeGamertagChangeEligible)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetUserWebInfo_LATENCY);

            tier = 6;
            privileges = RandomDataGenerator.GetRandomPrivileges();
            lastWebActivity = RandomDataGenerator.GetRandomDateTime(TimeSpan.FromDays(2));
            parentalControlGroup = 0;
            isLightAccount = false;
            isProvisioned = true;
            accountType = 2;
            isFreeGamertagChangeEligible = true;

        }
        public void UpdateParentalControls(ulong livePuid, uint[] grantPrivileges, uint[] restrictPrivileges, string source)
        {
            //Nothing returned here just wait with latency.
            RandomDataGenerator.Wait(RandomDataGenerator.UpdateParentalControls_LATENCY);
        }

        public ReserveNameSuggestedName[] ReserveGamerTag(ulong machinePuid, int countryID, string gamerTag)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.ReserveGamerTag_LATENCY);

            return RandomDataGenerator.GetRandomReserveNameSuggestedNameArray();
        }

        public Account GetAccount(ulong livePuid)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetAccount_LATENCY);

            return RandomDataGenerator.GetRandomAccount(livePuid);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\ActiveAuthEmulator\PartnerAuthEmulator.cs ===
﻿using Leet.Identity;
using Leet.Identity.ActiveAuth;
using Leet.Identity.PartnerAuth;
using System;
using System.Collections.Specialized;
using System.Net;
using System.Web;
using Test.Identity.Common;

namespace MetroidEmulator
{
    /// <summary>
    /// ActiveAuthEmulator class
    /// </summary>
    public class PartnerAuthEmulator : BaseEmulator, IPartnerAuthAdapter
    {
        private const String PartnerIdentityHeader = "X-PartnerAuthorization";

        public PartnerIdentity PartnerIdentity { get; private set; }  
        
        /// <summary>
        /// Creates a new instance of the ActiveAuthEmulator
        /// </summary>
        public PartnerAuthEmulator()
            : base()
        {
            string partnerAuthHeader = "XBL1.0 x=<?xml version='1.0' encoding='utf-16'?><saml:Assertion MajorVersion='1' MinorVersion='1' AssertionID='SamlSecurityToken-5051066e-2986-4bb7-a16a-67d8e2d39c9b' Issuer='http://sts.xboxlive.com' IssueInstant='2010-07-12T22:39:24.754Z' xmlns:saml='urn:oasis:names:tc:SAML:1.0:assertion'><saml:Conditions NotBefore='2010-07-12T22:39:24.754Z' NotOnOrAfter='2010-07-13T02:39:22.898Z'><saml:AudienceRestrictionCondition><saml:Audience>http://xboxlive.com/userdata</saml:Audience></saml:AudienceRestrictionCondition></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format='/xboxlive/nameFormat' NameQualifier='Microsoft-NameQualifier-domain'>XboxLive Partner security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName='TitleID' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>584D07D6</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName='TitleVersion' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName='PartnerID0' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>2600292641993881</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName='Gamertag0' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>RewardsHead</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns='http://www.w3.org/2000/09/xmldsig#'><SignedInfo><CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#'></CanonicalizationMethod><SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#rsa-sha1'></SignatureMethod><Reference URI='#SamlSecurityToken-5051066e-2986-4bb7-a16a-67d8e2d39c9b'><Transforms><Transform Algorithm='http://www.w3.org/2000/09/xmldsig#enveloped-signature'></Transform><Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#'></Transform></Transforms><DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1'></DigestMethod><DigestValue>ZggddlcFFd9IWb4M5n8ET6U11Yc=</DigestValue></Reference></SignedInfo><SignatureValue>Rf4DFggUBIJ2FXrV1M1b4vniY8S4WSLEyyQtIhWOVfDYNcfhBX5soVUx8h61QsRrfMzSZBGdWV9ZeSPFQZH2Lu8AeTKQGJPMgiWDL/X2dt51OdycUEWdwYJnIu4/1UeAkfLtm7nUQHDRUm+wL2PjK0MAT4o6T1TYzWYUAvXAD1U=</SignatureValue><KeyInfo><X509Data><X509Certificate>MIICJzCCAZSgAwIBAgIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTAeFw0wOTA3MTMxNTU3MzdaFw0zOTEyMzEyMzU5NTlaMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAgz0fPGlZa73r2TWmQsQy72aTiKdkAcuW18TyPUL3326CF03eiP3MDUR51U8flfssgt7+2lkuTYALTnCCG4n4XuRVu8JHGdAsGjSmfUpY+EGjxo6A3DuCDJF3Aa0uXzt72OShgF2IcX3+PMJnqryiMXyiPxi6/I1FEZ+i2FWdSYsCAwEAAaNqMGgwEwYDVR0lBAwwCgYIKwYBBQUHAwEwUQYDVR0BBEowSIAQodN354CzBxTNqhzW0A3gWqEiMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbYIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAA4GBAEeUyfLsUMQ1o3v9KmC4GV+9N0WMbmnv5iPusd0BiqtfNp0xcWUbwm1ea5Gw65nTmF5YJKmDN3VEIH4LyTgwTPHLP1QFq4XHY97GXYieeYLJluW+TQTk8rn2rPrYre9yWQDvkijCwERT8F6zV59RKHMAuv36b0oCtSqMCH6hxTRZ</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";

            PartnerIdentity pi = new PartnerIdentity(partnerAuthHeader);

            pi.Xuid = GetXUID();

            if (pi.Xuid == 0)
            {
                long uniqueId = RandomDataGenerator.GenerateRandomUserBase();
                pi.Xuid = RandomDataGenerator.XUID_BASE + (ulong)uniqueId;
            }
           
            PartnerIdentity = pi;            
        }

        static ulong GetXUID()
        {
            ulong xuidValue = 0;
            if (HttpContext.Current != null && HttpContext.Current.Request != null && HttpContext.Current.Request.Headers != null)
            {
                NameValueCollection headers = HttpContext.Current.Request.Headers;
                string xuid = headers["X-Authorization"];

                ulong.TryParse(xuid, out xuidValue);
            }

            return xuidValue;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\AchievementDataAccessEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Live.Livecache.DataAccess;
using Leet.Live.Livecache.Logic.Achievements;
using Leet.Live.Livecache.Logic.Games;

namespace MetroidEmulator
{
	public class AchievementDataAccessEmulator : IAchievementDataAccess
	{
        public List<IReadOnlyAchievementInfo> GetUserAchievements(uint gameTitleId, ulong callingUserPuid, ulong targetUserPuid, ushort localeId)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetUserAchievements_LATENCY);

            return RandomDataGenerator.GetRandomAchievements(gameTitleId);
        }


        public List<IReadOnlyUserTitle> GetUserTitles(ulong callingUserPuid, ulong targetUserPuid, ushort localeId,
            ushort startingIndex, ushort maxTitles)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetUserTitles_LATENCY);

            return RandomDataGenerator.GetRandomTitles(maxTitles);
        }


        public List<IReadOnlyUserTitle> GetPublicUserTitles(ulong targetUserPuid, ushort localeId,
            ushort startingIndex, ushort maxTitles, out DateTime responseTTL)
        {
            throw new NotImplementedException();
        }

        public void SyncAchievements(uint gameTitleId, ulong targetUserPuid, ushort localeId, IList<IReadOnlyAchievementInfo> readOnlyAchievementInfos)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.SyncAchievements_LATENCY);
        }

        public void SyncTitles(uint gameTitleId, ulong targetUserPuid, ushort localeId, DateTime lastPlayedTime)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.SyncTitles_LATENCY);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\BillingOfferingDataAccessEmulator.cs ===
﻿using System;
using System.Collections.ObjectModel;
using Leet.Live.Livecache.Account;
using Leet.Live.Livecache.DataAccess;
using xonline.common.protocol;

namespace MetroidEmulator
{
    public class BillingOfferingDataAccessEmulator : IBillingOfferingDataAccess
	{
        public ReadOnlyCollection<PurchaseHistoryEntry> GetPurchaseHistory(ulong livePuid, String locale)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns the available offers.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ContentEnumerateResponse EnumerateContent(ContentEnumerateRequest request)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.EnumerateContent_LATENCY);

            ContentEnumerateResponse cer = RandomDataGenerator.GetRandomContentEnumerateResponse();

            return cer;
        }

        /// <summary>
        /// Returns 0 if the purchase successful, hresult error code if fails.
        /// </summary>
        /// <param name="purchaseReq"></param>
        /// <returns></returns>
        public uint PurchaseGamertag(XeOfferPurchaseGamertagRequest purchaseReq)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.PurchaseGamertag_LATENCY);

            return 0;
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\PresenceDataAccessEmulator.cs ===
﻿using System;
using Leet.Live.Livecache.DataAccess;
using Leet.Live.Livecache.Logic.Messaging;
using Leet.Live.Livecache.Logic.Profile;
using xonline.common.protocol;

namespace MetroidEmulator
{
    public class PresenceDataAccessEmulator : IPresenceDataAccess
    {
        public void SendWebAlive(ulong livePuid)
        {
            //Do nothing except latency
            RandomDataGenerator.Wait(RandomDataGenerator.SendWebAlive_LATENCY);
        }

        public IReadOnlyPresenceInfo GetPresenceInfo(ulong senderLivePuid, ulong targetLivePuid)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetPresenceInfo_LATENCY);

            return RandomDataGenerator.GetRandomPresenceInfo(targetLivePuid);
        }

        public IReadOnlyPresenceInfo GetPublicPresenceInfo(ulong targetLivepuid, out DateTime responseTTL)
        {
            throw new NotImplementedException();
        }

        public QueryAffiliatesReplyData[] GetQueryAffiliatesReplyData(ulong callingLivepuid, ushort maxCount)
        {
            throw new NotImplementedException();
        }

        public IReadOnlyFriendInfo[] GetFriendsInfo(ulong callerLivepuid, bool sortAlphabetically, bool includeProfileData)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetFriendsInfo_LATENCY);

            return RandomDataGenerator.GetRandomFriendsInfo(callerLivepuid);
        }

        public void AddFriend(ulong userPuid, ulong targetPuid)
        {
            //Do nothing except latency
            RandomDataGenerator.Wait(RandomDataGenerator.AddFriend_LATENCY);
        }

        public void AddFriendFromContact(ulong userPuid, ulong targetPuid)
        {
            throw new NotImplementedException();
        }

        public void DeleteFriend(ulong userPuid, ulong targetPuid)
        {
            //Do nothing except latency
            RandomDataGenerator.Wait(RandomDataGenerator.DeleteFriend_LATENCY);
        }

        public void AcceptFriendRequest(ulong userPuid, ulong targetPuid)
        {
            throw new NotImplementedException();
        }

        public void RejectFriendRequest(ulong userPuid, ulong targetPuid)
        {
            throw new NotImplementedException();
        }

        public MessageSummary2[] EnumerateMessages(ulong userPuid)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.EnumerateMessages_LATENCY);

            return RandomDataGenerator.GetRandomMessageSummariesResponse();
        }

        public MessageSummary2 GetMessageSummary(ulong userPuid, uint messageId)
        {
            throw new NotImplementedException();
        }

        public bool DeleteMessage(ulong userPuid, uint messageId, uint flags)
        {
            //Do nothing except return true
            RandomDataGenerator.Wait(RandomDataGenerator.DeleteMessage_LATENCY);

            return true;
        }

        public bool SetMessageFlags(ulong userPuid, uint messageId, uint setFlags, uint unsetFlags)
        {
            //Do nothing except return true
            RandomDataGenerator.Wait(RandomDataGenerator.SetMessageFlags_LATENCY);

            return true;
        }

        public void SendMessage(ulong userPuid, string szSenderName, ulong qwSenderContext, uint dwMessageFlags,
            ushort wExpireMinutes, byte bMessageType, ulong[] rgqwRecipients, MessageDetails details)
        {
            //Do nothing except latency
            RandomDataGenerator.Wait(RandomDataGenerator.SendMessage_LATENCY);
        }

        public SystemMessageSummary[] EnumerateSystemMessages(ulong userPuid, uint titleId)
        {
            throw new NotImplementedException();
        }

        public IReadOnlyFriendInfo[] GetFriendsOfFriend(ulong sender, ulong target)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetFriendsOfFriend_LATENCY);

            return RandomDataGenerator.GetRandomFriendsInfo(target);
        }

        public IReadOnlySystemMessage GetSystemMessageDetails(ulong userPuid, uint titleId, uint messageId)
        {
            throw new NotImplementedException();
        }

        public IReadOnlyMessage GetMessageDetails(ulong userPuid, uint messageId, uint setFlags, uint unsetFlags)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetMessageDetails_LATENCY);

            return RandomDataGenerator.GetRandomMessageDetails(messageId, userPuid);
        }

        #region IPresenceDataAccess Members


        public uint[] CanSendMessageToUsers(ulong userPuid, ulong[] targetPuids)
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\RandomDataGenerator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Threading;
using Leet.Live.Livecache;
using Leet.Live.Livecache.Account;
using Leet.Live.Livecache.Logic.Achievements;
using Leet.Live.Livecache.Logic.Games;
using Leet.Live.Livecache.Logic.Profile;
using xonline.common.protocol;
using xonline.common.service;

namespace MetroidEmulator
{
    public class RandomDataGenerator
    { 
        public const ulong XUID_BASE = 200000000000000;
        public const long CID_BASE = 200000000000000;
        public const long PUID_BASE = 200000000000000;
        public const int USER_RANGE = 1000001;

        public const uint TITLEID_BASE = 1179582800;

        const int LATENCY = 100;  //Livecache call latency in miliseconds.
        
        //IPresenceDataAccess
        public const int SendWebAlive_LATENCY = 67;
        public const int GetPresenceInfo_LATENCY = 150;
        public const int GetFriendsInfo_LATENCY = 193;
        public const int AddFriend_LATENCY = 202;
        public const int DeleteFriend_LATENCY = LATENCY;
        public const int EnumerateMessages_LATENCY = 158;
        public const int DeleteMessage_LATENCY = 270;
        public const int SetMessageFlags_LATENCY = 269;
        public const int SendMessage_LATENCY = 357;
        public const int GetFriendsOfFriend_LATENCY = 448;        
        public const int GetMessageDetails_LATENCY = 270;
                       
        //ISettingsDataAccess
        public const int SaveGamerProfile_LATENCY = 300;
        public const int GetGamerProfile_LATENCY = 200;
        public const int GetGamerProfilesBySetting_LATENCY = LATENCY;

        //IStringServerDataAccess
        public const int LookupString_LATENCY = 125;
        public const int VetString_LATENCY = 125;

        //IAchievementDataAccess
        public const int GetUserAchievements_LATENCY = 195;
        public const int GetUserTitles_LATENCY = 187;
        public const int SyncAchievements_LATENCY = 300;
        public const int SyncTitles_LATENCY = 300;

        //IAccountCreationDataAccess
        public const int GetUserWebInfo_LATENCY = 152;
        public const int ReserveGamerTag_LATENCY = 355;
        public const int GetAccount_LATENCY = 200;
        public const int UpdateParentalControls_LATENCY = 227;        

        //IBillingOfferingDataAccess
        public const int PurchaseGamertag_LATENCY = 3000;
        public const int EnumerateContent_LATENCY = 276;

        //IXCacheDataAccess
        public const int GetGamertagByPuid_LATENCY = 200;
        public const int GetPuidByGamerTag_LATENCY = 200;
        public const int LookupWebID_LATENCY = 200;

        const int MAX_GAMERSCORE = 3000;
        const int MAX_BIO_STRING = 15;
        const int MAX_LOCATION_STRING = 20;
        const int MAX_MOTTO_STRING = 20;
        const int MAX_NAME_STRING = 25;
        const int MAX_PRESENCE_STRING = 20;
        const int MAX_REPUTATION = 100;
        const int MAX_TITLES = 20;
        const int MAX_TOTAL_MOBILE_GAMERSCORE = 200;
        const int MIN_MOBILE_ACHIEVEMENTS = 10;
        const int MAX_MOBILE_ACHIEVEMENTS = 20;
        const int MAX_ACHIEVEMENT_DESCRIPTION = 20;
        const int MAX_ACHIEVEMENT_TITLE = 20;
        const int MAX_ACHIEVEMENT_HOWTO = 20;
        const int MAX_TITLENAME = 20;
        const int MAX_MESSAGES = 100;
        const int MAX_MESSAGE_SUBJECT = 19;
        const int MAX_MESSAGE_TEXT = 100;
        const int UPPER_MAX_FRIENDRANGE = 100;
        const int UPPER_MAX_FRIENDRANGE_CUTOFF = 80;
        const int LOWER_MAX_FRIENDRANGE = 12;

        const long TICKS_PER_MILLISECOND = 10000;

        const string ImageHrefStr = "http://tiles.stress.xbox.com/tiles/VK/xc/0YCLiGJhbC9FFQRrXVBRF0UyL2FjaC8wLzEAAAAA5+fn-nOsTw==.jpg";

        private static Random rand = new Random();

        public static void Wait()
        {
            Wait(LATENCY);
        }

        public static void Wait(int milliseconds)
        {
            Thread.Sleep(milliseconds);
        }

        public static long GenerateRandomUserBase()
        {
            return rand.Next(1,USER_RANGE);
        }

        public static IReadOnlyPresenceInfo GetRandomPresenceInfo(ulong targetLivePuid)
        {
            PresenceInfo presence = new PresenceInfo();

            presence.LivePuid = targetLivePuid;
            presence.Gamertag = "GamerTag_" + targetLivePuid.ToString();
            presence.IsJoinable = false;
            presence.IsPlaying = false;
            presence.State = GetRandomState();
            presence.PresenceString = GetRandomString(MAX_PRESENCE_STRING);
            presence.LastSeen = RandomDataGenerator.GetRandomDateTime(TimeSpan.FromDays(5));
            presence.TitleId = GetRandomTitleIds(1)[0];
            
            return presence;
        }

        private static OnlineState GetRandomState()
        {
            OnlineState[] states = new OnlineState[] { OnlineState.Away, OnlineState.Busy, OnlineState.Offline, OnlineState.Online };
            int randInt = rand.Next(0, states.Length);

            return states[randInt];
        }

        public static IGamerProfile GetRandomProfileFromXuid(ulong xuid)
        {
            IGamerProfile prof = new LiveCacheData();
            prof.AvatarManifest = new byte[1];
            prof.GamerTag = "GamerTag_" + xuid.ToString();
            prof.Gamerscore = rand.Next(MAX_GAMERSCORE);
            prof.Bio = GetRandomString(MAX_BIO_STRING);
            prof.GamerTileUrl = "http://image.stress.xboxlive.com/global/t.585207d1/tile/0/20009";
            prof.SmallGamerTileUrl = "http://image.stress.xboxlive.com/global/t.585207d1/tile/0/10009";
            prof.Location = GetRandomString(MAX_LOCATION_STRING);
            prof.Motto = GetRandomString(MAX_MOTTO_STRING);
            prof.Name = GetRandomString(MAX_NAME_STRING);
            prof.Tier = GetRandomGameTier();
            prof.Zone = GetRandomGamercardZone();
            prof.Reputation = (float)(rand.NextDouble() * MAX_REPUTATION);
            prof.ProfileUserCreatedContentPrivilege = GetRandomPrivilegeValue();

            return prof;
        }

        public static IGamerProfile[] GetRandomProfilesFromXuids(ulong[] targetLivepuids)
        {
            List<IGamerProfile> profs = new List<IGamerProfile>();

            for (int i = 0; i < targetLivepuids.Length; i++)
            {
                profs.Add(GetRandomProfileFromXuid(targetLivepuids[i]));
            }

            return profs.ToArray();
        }

        public static List<IReadOnlyUserTitle> GetRandomTitles(int titlesMax)
        {
            if (titlesMax > MAX_TITLES)
            {
                titlesMax = MAX_TITLES;
            }

            int titlesCount = rand.Next(0, titlesMax);

            List<IReadOnlyUserTitle> titles = new List<IReadOnlyUserTitle>();
            List<uint> titleIds = RandomDataGenerator.GetRandomTitleIds(titlesCount);

            for (int i = 0; i < titlesCount; i++)
            {
                Title title = new Title();
                title.TitleId = titleIds[i];
                title.EarnedAchievements = (ushort)rand.Next(MAX_MOBILE_ACHIEVEMENTS);
                title.EarnedGamerscore = (uint)rand.Next(1, MAX_TOTAL_MOBILE_GAMERSCORE);
                title.LastPlayed = RandomDataGenerator.GetRandomDateTime(TimeSpan.FromDays(5));
                title.TitleName = RandomDataGenerator.GetRandomString(1, MAX_TITLENAME);
                title.TotalAchievements = (ushort)rand.Next(MIN_MOBILE_ACHIEVEMENTS, MAX_MOBILE_ACHIEVEMENTS);
                title.TotalGamerscore = MAX_TOTAL_MOBILE_GAMERSCORE;

                titles.Add(title);
            }

            return titles;
        }


        public static DateTime GetRandomDateTime(TimeSpan timeSpan)
        {
            int totalTicks = (int)(timeSpan.Ticks / TICKS_PER_MILLISECOND);

            if (totalTicks <= 0)
            {
                return DateTime.Now;
            }

            long randomTicks = (long)rand.Next(totalTicks) * TICKS_PER_MILLISECOND;

            return DateTime.Now.Subtract(TimeSpan.FromTicks(randomTicks));
        }

        public static List<IReadOnlyAchievementInfo> GetRandomAchievements(uint titleId)
        {
            int achivementsCount = rand.Next(MIN_MOBILE_ACHIEVEMENTS, MAX_MOBILE_ACHIEVEMENTS);
            int earnedAchievements = rand.Next(0, achivementsCount + 1);

            List<IReadOnlyAchievementInfo> achievements = new List<IReadOnlyAchievementInfo>();

            for (int i = 0; i < achivementsCount; i++)
            {
                Achievement ach = new Achievement();
                ach.AchievementId = (uint)i;
                ach.Description = GetRandomString(1, MAX_ACHIEVEMENT_DESCRIPTION);
                ach.GamerscoreValue = rand.Next(1, MAX_TOTAL_MOBILE_GAMERSCORE);
                ach.IsHidden = false;
                ach.IsUnlocked = (i < earnedAchievements);
                if (ach.IsUnlocked)
                {
                    ach.DateUnlocked = RandomDataGenerator.GetRandomDateTime(TimeSpan.FromMinutes(5)); ;
                    ach.WasEarnedOnline = true;
                }
                ach.strImageHref = ImageHrefStr;
                ach.Title = RandomDataGenerator.GetRandomString(1, MAX_ACHIEVEMENT_TITLE);
                ach.HowTo = RandomDataGenerator.GetRandomString(1, MAX_ACHIEVEMENT_HOWTO);

                achievements.Add(ach);
            }

            return achievements;
        }

        public static FriendInfo[] GetRandomFriendsInfo(ulong xuid)
        {
            int numFriends = RandomDataGenerator.GetRandomFriendCount();
            List<ulong> friendXuids = RandomDataGenerator.GetRandomXuids(numFriends, xuid);

            FriendInfo[] friends = new FriendInfo[numFriends];

            for (int i = 0; i < numFriends; i++)
            {
                FriendInfo friend = new FriendInfo();

                friend.LivePuid = friendXuids[i];

                friends[i] = friend;
            }

            return friends;
        }

        private static List<uint> GetRandomTitleIds(int numTitles)
        {
            List<uint> allTitleUints = new List<uint>();

            for (uint i = 0; i < MAX_TITLES; i++)
            {
                uint curTitleId = i + TITLEID_BASE;
                allTitleUints.Add(curTitleId);
            }

            List<uint> titleUints = new List<uint>();

            for (int i = 0; i < numTitles; i++)
            {
                int itemNum = rand.Next(0, allTitleUints.Count);

                uint curRandUint = allTitleUints[itemNum];
                titleUints.Add(curRandUint);
                allTitleUints.RemoveAt(itemNum);
            }

            return titleUints;
        }

        private static List<ulong> GetRandomXuids(int numFriends, ulong userXuid)
        {
            List<ulong> friendXuids = new List<ulong>();

            while (friendXuids.Count < numFriends + 1)
            {
                ulong curRandXuid = (ulong)RandomDataGenerator.GenerateRandomUserBase() + XUID_BASE;

                friendXuids.Add(curRandXuid);
            }

            return friendXuids;
        }

        private static int GetRandomFriendCount()
        {
            int friendRange = rand.Next(UPPER_MAX_FRIENDRANGE);

            if (friendRange < UPPER_MAX_FRIENDRANGE_CUTOFF)
            {
                return rand.Next(LOWER_MAX_FRIENDRANGE);
            }

            return rand.Next(LOWER_MAX_FRIENDRANGE, UPPER_MAX_FRIENDRANGE + 1);
        }

        private static PrivilegeValue GetRandomPrivilegeValue()
        {
            int randInt = rand.Next(3);

            if (randInt == 0)
            {
                return PrivilegeValue.Allow;
            }
            else if (randInt == 1)
            {
                return PrivilegeValue.Deny;
            }

            return PrivilegeValue.FriendsOnly;
        }

        private static GamercardZone GetRandomGamercardZone()
        {
            int randInt = rand.Next(4);

            if (randInt == 0)
            {
                return GamercardZone.Family;
            }
            else if (randInt == 1)
            {
                return GamercardZone.Pro;
            }
            else if (randInt == 2)
            {
                return GamercardZone.Recreation;
            }

            return GamercardZone.Underground;
        }

        private static GamerTier GetRandomGameTier()
        {
            int randInt = rand.Next(3);

            if (randInt == 0)
            {
                return GamerTier.Family;
            }
            else if (randInt == 1)
            {
                return GamerTier.Gold;
            }

            return GamerTier.Silver;
        }

        public static string GetRandomString(int maxLength)
        {
            return GetRandomString(0, maxLength);
        }

        public static string GetRandomString(int minLength, int maxLength)
        {
            int Length = rand.Next(minLength, maxLength);

            char[] chars = new char[Length];
            string validChars = " abcdefghijklmnopqrstuvwxyzABCEDFGHIJKLMNOPQRSTUVWXYZ1234567890";

            for (int m_Count = 0; m_Count < Length; m_Count++)
            {
                chars[m_Count] = validChars[rand.Next(validChars.Length - 1)];
            }

            return (new string(chars));
        }

        public static MyMessage GetRandomMessageDetails(uint messageId, ulong userXuid)
        {
            string senderGamerTag = "GamerTag_" + GetRandomXuids(1, userXuid)[0].ToString();

            MyMessage message = new MyMessage(GetRandomString(1, MAX_MESSAGE_TEXT), messageId, senderGamerTag, GetRandomDateTime(TimeSpan.FromDays(2)));

            return message;
        }

        public static MessageSummary2[] GetRandomMessageSummariesResponse()
        {
            int messageRange = rand.Next(0, 100);

            //80% of the time return 0 to 10 messages, 20% of the time return 11 to MAX_MESSAGES
            int numMessages = rand.Next(0, 10);

            if (messageRange > 80)
            {
                numMessages = rand.Next(11, MAX_MESSAGES);
            }

            List<MessageSummary2> messages = new List<MessageSummary2>();

            for (int i = 0; i < numMessages; i++)
            {
                MessageSummary2 ms2 = new MessageSummary2();
                ms2.dwMessageID = (uint)rand.Next(1, 1000);
                ms2.bMessageType = (byte)rand.Next(1, 13);
                ms2.szSenderName = GetRandomString(4, 10);
                ms2.dwSenderTitleID = GetRandomTitleIds(1)[0];
                ms2.mtSentTime = (uint)GetRandomDateTime(TimeSpan.FromDays(4)).Ticks;
                ms2.szSubject = GetRandomString(4, MAX_MESSAGE_SUBJECT);
                ms2.dwMessageFlags = (uint)rand.Next(0, 1000);

                messages.Add(ms2);
            }

            return messages.ToArray();
        }

        public static uint[] GetRandomPrivileges()
        {
            uint[] privileges = new uint[8];

            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_VIDEO_COMMUNICATIONS, XOn.XPRIVILEGE_VIDEO_COMMUNICATIONS_FRIENDS_ONLY);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_MUSIC_EXPLICIT_CONTENT);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_USER_CREATED_CONTENT, XOn.XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_ADD_FRIEND);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_MULTIPLAYER_SESSIONS);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_PRESENCE, XOn.XPRIVILEGE_PRESENCE_FRIENDS_ONLY);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_XBOX1_LIVE_ACCESS);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_PURCHASE_CONTENT);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_PROFILE_VIEWING, XOn.XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_MULTIPLAYER_DEDICATED_SERVER);
            SetPrivilegeValue(privileges, XOn.XPRIVILEGE_SHARE_FRIENDS_LIST, XOn.XPRIVILEGE_SHARE_FRIENDS_LIST_FRIENDS_ONLY);

            return privileges;
        }

        private static void SetPrivilegeValue(uint[] privileges, byte privilegeId, byte friendsOnlyPrivilegeId)
        {
            int i = rand.Next(3);

            if (i == 0)
            {
                SetPrivilege(privileges, privilegeId);
            }
            else if (i == 1)
            {
                SetPrivilege(privileges, friendsOnlyPrivilegeId);
            }
        }

        private static void SetPrivilegeValue(uint[] privileges, byte privilegeId)
        {
            int i = rand.Next(2);

            if (i == 0)
            {
                SetPrivilege(privileges, privilegeId);
            }
        }

        private static void SetPrivilege(uint[] privilegeSet, int privilegeId)
        {
            uint mask = (uint)1 << (privilegeId % 32);
            privilegeSet[privilegeId / 32] |= mask;
        }

        public static Account GetRandomAccount(ulong livePuid)
        {
            Account account = new Account();
            account.Xuid = livePuid;
            account.CountryId = 1;
            account.LanguageId = 1;
            account.Tier = GetRandomSubscriptionTier();

            return account;
        }

        private static SubscriptionTier GetRandomSubscriptionTier()
        {
            SubscriptionTier[] values = new SubscriptionTier[] { SubscriptionTier.None, SubscriptionTier.Silver, SubscriptionTier.Gold, SubscriptionTier.Family };
            int randInt = rand.Next(0, values.Length);

            return values[randInt];
        }

        public static ReserveNameSuggestedName[] GetRandomReserveNameSuggestedNameArray()
        {
            ReserveNameSuggestedName[] rnsnArray = null;

            if (rand.Next(2) == 0)
            {
                rnsnArray = new ReserveNameSuggestedName[5];
                for (int i = 0; i < 5; i++)
                {
                    rnsnArray[i] = new ReserveNameSuggestedName();
                    rnsnArray[i].name = "GamerTag_" + ((ulong)RandomDataGenerator.GenerateRandomUserBase() + XUID_BASE).ToString();
                }                
            }

            return rnsnArray;
        }


        public static ContentEnumerateResponse GetRandomContentEnumerateResponse()
        {
            const ulong FreeGamertagChangeOfferId = 0xFFFE07D10AA00002;

            ContentEnumerateResponse cer = new ContentEnumerateResponse();
            cer.offersReturned = 1;
            cer.offersTotal = 1;
            cer.infos = new BasicContentInfo[1];
            cer.infos[0] = new BasicContentInfo();
            cer.infos[0].offerID = FreeGamertagChangeOfferId;

            return cer;
        }
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\LiveCacheData.cs ===
﻿using Leet.Live.Livecache;
using Leet.Live.Livecache.Logic.Achievements;
using Leet.Live.Livecache.Logic.Avatars;
using Leet.Live.Livecache.Logic.Games;
using Leet.Live.Livecache.Logic.Messaging;
using Leet.Live.Livecache.Logic.Profile;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MetroidEmulator
{
	public class LiveCacheData : IGamerProfile, IReadOnlyPresenceInfo
	{
		#region IGamerProfile members
		public ulong LivePuid { get; set; }
		public string GamerTag { get; set; }
		public string Bio { get; set; }
		public string Name { get; set; }
		public string Location { get; set; }
		public int Gamerscore { get; set; }
		public string Motto { get; set; }
		public bool HasAcceptedTOU { get; set; }
		public int Country { get; set; }
		public float Reputation { get; set; }
		public int ReputationBucket { get; set; }
		public string GamerTileUrl { get; set; }
        public string SecureGamerTileUrl { get; set; }
        public string SmallGamerTileUrl { get; set; }
        public string SecureSmallGamerTileUrl { get; set; }
		public string GamerTileId { get; set; }
		public GamercardZone Zone { get; set; }
		public GamerTier Tier { get; set; }
        public byte[] AvatarManifest { get; set; }
		public bool IsLaunchTeamMember { get; set; }
		public bool IsCheater { get; set; }
		public bool IsNXELaunchTeamMember { get; set; }
        public int ProfilePermissions { get; set; }
        public PrivilegeValue ProfileActivityPrivilege { get; set; }
        public PrivilegeValue ProfileUserCreatedContentPrivilege { get; set; }
        public PrivilegeValue PlayedMusicSharingPrivilege { get; set; }
        public PrivilegeValue ProfileViewingPrivilege { get; set; }
        public AvatarBodyType AvatarBodyType { get; set; }
        public string GamerTile { get; set; }
        public string BlogUrl { get; set; }
        public GamerTypeFlags GamerType { get; set; }
		#endregion

		#region IReadOnlyPresenceInfo members
		public string Gamertag { get;set; }
		public OnlineState State { get;set; }
		public bool IsOnline { get;set; }
		public bool IsJoinable { get;set; }
		public bool IsPlaying { get;set; }
		public DateTime LastSeen { get;set; }
		public uint TitleId { get;set; }
		public string PresenceString { get;set; }
		#endregion

		public uint[] Priveleges { get; set; }
		public DateTime LastWebActivity { get; set; }
		public byte ParentalControlGroup { get; set; }
		public bool IsLightAccount { get; set; }
		public bool IsProvisioned { get; set; }
        public byte AccountType { get; set; }

		public long WLIDPuid { get; set; }

		public ProfileSecurity Security { get; set; }

		public List<Achievement> Achievements { get; set; }
		public List<FriendInfo> Friends { get; set; }
        public List<Title> Titles { get; set; }
    }

    public class Title : IReadOnlyUserTitle
    {
        #region IReadOnlyUserTitle Members

        public DateTime LastPlayed { get; set; }
        public ushort EarnedAchievements { get; set; }
        public uint EarnedGamerscore { get; set; }
        public uint Reserved { get; set; }
        public uint Sequence { get; set; }
        public uint TitleId { get; set; }
        public string TitleName { get; set; }
        public ushort TotalAchievements { get; set; }
        public uint TotalGamerscore { get; set; }

        #endregion
    }

	public class Achievement : IReadOnlyAchievementInfo
	{
		public DateTime DateUnlocked { get; set; }
		public uint AchievementId { get; set; }
		public int GamerscoreValue { get; set; }
		public string Description { get; set; }
		public int Flags { get; set; }
        public string HowTo { get; set; }
		public uint ImageId { get; set; }
		public Uri ImageHref { get { return new Uri(strImageHref); } }
		public string strImageHref { get; set; }
		public Uri SecureImageHref { get { return new Uri(strSecureImageHref); } }
		public string strSecureImageHref { get; set; }
		public string Title { get; set; }
		public byte Type { get; set; }
		public bool IsHidden { get; set; }
        public bool IsUnlocked { get; set; }
		public bool WasEarnedOnline { get; set; }
        public bool WasEarnedOffline { get; set; }
		public uint TitleID { get; set; }
	}

	public class FriendInfo : IReadOnlyFriendInfo
	{
		public string Gamertag { get; set; }
		public ulong LivePuid { get; set; }
		public FriendState FriendState { get; set; }
		public OnlineState State { get; set; }
		public bool IsOnline { get; set; }
		public bool IsJoinable { get; set; }
		public bool IsPlaying { get; set; }
		public DateTime LastSeen { get; set; }
		public uint TitleId { get; set; }
		public string PresenceString { get; set; }
	}

	public enum ProfileSecurity
	{
		Public = 0,
		FriendsOnly,
		Private
	};

    public class PresenceInfo : IReadOnlyPresenceInfo
    {
        public string Gamertag { get; set; }
        public OnlineState State { get; set; }
        public ulong LivePuid { get; set; }
        public bool IsOnline { get; set; }
        public bool IsJoinable { get; set; }
        public bool IsPlaying { get; set; }
        public DateTime LastSeen { get; set; }
        public uint TitleId { get; set; }
        public string PresenceString { get; set; }
    }

    public class MyMessage : IReadOnlyMessage
    {
        private IReadOnlyMessageHeader m_header;
        private string text = "";

        public MyMessage(string text, uint messageId, string senderGamertag, DateTime sentTime)
        {
            this.text = text;

            this.m_header = new MyMessageHeader(messageId, senderGamertag, sentTime);
        }

        public IReadOnlyMessageHeader Header
        {
            get { return this.m_header; }
        }

        public string Text
        {
            get { return this.text; }
        }
    }

    public class MyMessageHeader : IReadOnlyMessageHeader
    {
        private uint messageId;
        private string senderGamertag;
        private DateTime sentTime;

        public MyMessageHeader(uint messageId, string senderGamertag, DateTime sentTime)
        {
            this.messageId = messageId;
            this.senderGamertag = senderGamertag;
            this.sentTime = sentTime;
        }

        public string SenderGamertag
        {
            get { return this.senderGamertag; }
        }

        public uint MessageId
        {
            get { return this.messageId; }
        }

        public DateTime SentTime
        {
            get { return this.sentTime; }
        }

        //  Not used but needs to be implemented on interface

        public MessageTypeEnum MessageType
        {
            get { return MessageTypeEnum.PersonalMessage; }
        }

        public IGamerProfile UserProfileSettings
        {
            get { return null; }
        }

        public bool IsRequired
        {
            get { return false; }
        }

        public bool IsRecommended
        {
            get { return false; }
        }

        public bool HasVoice
        {
            get { return false; }
        }

        public bool HasImage
        {
            get { return false; }
        }

        public bool HasText
        {
            get { return true; }
        }

        public bool HasBeenRead
        {
            get { return false; }
        }

        public bool AllowDisplayOnWeb
        {
            get { return true; }
        }

        public bool IsTeamContext
        {
            get { return false; }
        }

        public bool IsCompetitionContext
        {
            get { return false; }
        }

        public bool IsFromAlternateTitle
        {
            get { return false; }
        }

        public bool IsFromMarketing
        {
            get { return false; }
        }

        public bool IsFromMicrosoftMarketing
        {
            get { return false; }
        }

        public bool IsFromFriend
        {
            get { return true; }
        }

        public bool IsFromZune
        {
            get { return false; }
        }

        public ulong SenderId
        {
            get { return 123456; }
        }

        public uint SenderTitleId
        {
            get { return 123456; }
        }

        public int Expires
        {
            get { return 40; }
        }

        public int ExpiresInDays
        {
            get { return 4; }
        }

        public string Subject
        {
            get { return "SUBJECT"; }
        }

        public bool CanDelete
        {
            get { return true; }
        }

        public bool CanSetReadFlag
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\GameMetadataClientEmulator\GameMetadataClientEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using GameMetadata.Common;
using GameMetadata.Client;

namespace MetroidEmulator
{
    /// <summary>
    /// GameMetadataClientEmulator class
    /// </summary>
    /// <summary>
    /// Mock GameMetadataClient that returns predictable data based on method inputs.
    /// </summary>
    public class GameMetadataClientEmulator : IGameMetadataClient
    {
        private const UInt32 DEFAULTVARIANTID = 0;

        public GameMetadataComposite GetGameMetadata(UInt32 gameId, string locale)
        {
            return GetGameMetadata(gameId, locale, DEFAULTVARIANTID);
        }

        public GameMetadataComposite GetGameMetadata(UInt32 gameId, string locale, UInt32 variantId)
        {
            GameMetadataComposite gmc = new GameMetadataComposite();
            gmc.GameId = gameId;
            gmc.VariantId = variantId;
            gmc.GameAndVariantName = String.Format("Game and Variant Name for {0}:{1} in {2}", gameId, variantId, locale);
            gmc.GameName = String.Format("Base Game Name for {0} in {1}", gameId, locale);
            gmc.GameRedirectionUrl = GetGameRedirectionUrl(gameId, variantId);
            gmc.Images.Add(ImageType.GameTile_WebSmall, new GameImageComposite { ImageUrl = String.Format("http://icons.xboxlive.com/{0}/{1}/GameTile_WebSmall.png", gameId, variantId), Height = 32, Width = 32, ImageType = ImageType.GameTile_WebSmall });
            gmc.Images.Add(ImageType.GameTile_WebLarge, new GameImageComposite { ImageUrl = String.Format("http://icons.xboxlive.com/{0}/{1}/GameTile_WebLarge.png", gameId, variantId), Height = 64, Width = 64, ImageType = ImageType.GameTile_WebLarge });
            gmc.Images.Add(ImageType.GameTile_MobileSmall, new GameImageComposite { ImageUrl = String.Format("http://icons.xboxlive.com/{0}/{1}/GameTile_MobileSmall.png", gameId, variantId), Height = 99, Width = 99, ImageType = ImageType.GameTile_MobileSmall });
            gmc.Images.Add(ImageType.GameTile_MobileLarge, new GameImageComposite { ImageUrl = String.Format("http://icons.xboxlive.com/{0}/{1}/GameTile_MobileLarge.png", gameId, variantId), Height = 173, Width = 173, ImageType = ImageType.GameTile_MobileLarge });
            gmc.IsUsingFallbackLocale = false;
            gmc.LocalizationLocale = locale;
            gmc.UsesLiveMultiplayerServices = false;

            gmc.SupportedPlatforms.Add(5);
            gmc.SupportedPlatforms.Add(6);

            return gmc;
        }

        public string GetProfileRedirectionUrl(string gamertag)
        {
            return String.Format("http://profileredirect.xboxlive.com/{0}/", gamertag);
        }

        public string GetGameRedirectionUrl(UInt32 gameId)
        {
            return GetGameRedirectionUrl(gameId, DEFAULTVARIANTID);
        }

        public string GetGameRedirectionUrl(UInt32 gameId, UInt32 variantId)
        {
            return String.Format("http://gameredirect.xboxlive.com/{0}/{1}/", gameId, variantId);
        }

        public string GetGameSessionRedirectionUrl(UInt32 gameId, string sessionId)
        {
            return String.Format("http://gamesessionredirect.xboxlive.com/{0}/{1}/", gameId, sessionId);
        }

        public GameVariantComposite GetGameVariant(UInt32 gameId)
        {
            return GetGameVariant(gameId, DEFAULTVARIANTID);
        }

        public GameVariantComposite GetGameVariant(UInt32 gameId, UInt32 variantId)
        {
            GameVariantComposite gvc = new GameVariantComposite();
            gvc.GameId = gameId;
            gvc.VariantId = variantId;

            switch (variantId)
            {
                case 0:
                    gvc.StatRankings.Add("BestScore", StatRanking.High);
                    gvc.StatRankings.Add("BestTime", StatRanking.High);
                    gvc.StatRankings.Add("Wins", StatRanking.High);
                    break;
                case 1:
                    gvc.StatRankings.Add("BestScore", StatRanking.Low);
                    gvc.StatRankings.Add("BestTime", StatRanking.Low);
                    gvc.StatRankings.Add("Wins", StatRanking.Low);
                    break;
            }
            return gvc;
        }


        public List<UInt32> GetGameVariantIds(UInt32 gameId)
        {
            throw new NotImplementedException();
        }

        public Dictionary<UInt32, GameVariantComposite> GetGameVariants(UInt32 gameId)
        {
            throw new NotImplementedException();
        }

        public bool CheckIsValidGameId(UInt32 gameId)
        {
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\StringServerDataAccessEmulator.cs ===
﻿using System;
using Leet.Live.Livecache.DataAccess;

namespace MetroidEmulator
{
    public class StringServerDataAccessEmulator : IStringServerDataAccess
	{
        public string LookupString(uint titleId, uint stringId, ushort liveLanguageId, out DateTime responseTTL)
        {
            //GetPresence only using return string value
            RandomDataGenerator.Wait(RandomDataGenerator.LookupString_LATENCY);

            responseTTL = DateTime.Now;

            return RandomDataGenerator.GetRandomString(1, 10);
        }

        public bool VetString(string locale, string vetString)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.VetString_LATENCY);
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\SettingsDataAccessEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Leet.Live.Livecache.DataAccess;
using Leet.Live.Livecache.Logic.Profile;
using xonline.common.protocol;

namespace MetroidEmulator
{
    public class SettingsDataAccessEmulator : ISettingsDataAccess
    {
        public IGamerProfile GetGamerProfile(string gamertag, ulong callingLivepuid, ulong targetLivepuid)
        {
            throw new NotImplementedException();
        }

        public IGamerProfile GetGamerProfile(ulong callingLivepuid, ulong targetLivepuid)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetGamerProfile_LATENCY);

            return RandomDataGenerator.GetRandomProfileFromXuid(targetLivepuid);
        }

        public IGamerProfile GetPublicGamerProfile(ulong targetLivepuid)
        {
            throw new NotImplementedException();
        }

        public IGamerProfile GetPublicGamerProfile(string gamertag, ulong targetLivepuid)
        {
            throw new NotImplementedException();
        }

        public void LoadSettings(ReadSettingsResponse readResp, IGamerProfile profile, IWebPreferences webPreferences)
        {
            throw new NotImplementedException();
        }

        public IGamerProfile[] LoadSettings(ReadSettingsResponse readResp)
        {
            throw new NotImplementedException();
        }

        public void SaveSettings(IGamerProfile profile, IWebPreferences preferences, string locale)
        {
            //Only SaveGamerProfile in this class calls this 
            //and product implementation does nothing with this response yet.
            throw new NotImplementedException();
        }

        public ReadSettingsResponse[] ReadProfileSettings(ulong callingLivepuid, ulong[] targetLivepuids, uint[] settings)
        {
            throw new NotImplementedException();
        }

        public IGamerProfile[] GetGamerProfilesBySetting(ulong callingLivepuid, ulong[] targetLivepuids, uint[] settings, bool getGamertag)
        {
            RandomDataGenerator.Wait(RandomDataGenerator.GetGamerProfilesBySetting_LATENCY);

            return RandomDataGenerator.GetRandomProfilesFromXuids(targetLivepuids);
        }

        public Dictionary<ulong, IGamerProfile> GetGamerProfileCollectionBySetting(ulong callingLivepuid, ulong[] targetLivepuids, uint[] settings, bool getGamertag)
        {
            throw new NotImplementedException();
        }

        public SaveSettingsResponse SyncSettings(ulong callingLivepuid, ProfileSetting[] settings)
        {
            //Only SaveGamerProfile in this class calls this 
            //and product implementation does nothing with this response yet.
            throw new NotImplementedException();
        }

        public ReadOnlyCollection<AwardedAvatarAsset> GetUserAvatarAwards(ulong livePuid, ushort localeID, uint titleID)
        {
            throw new NotImplementedException();
        }

        public void SaveGamerProfile(IGamerProfile profile, string locale)
        {
            //Nothing returned here just wait with latency.
            RandomDataGenerator.Wait(RandomDataGenerator.SaveGamerProfile_LATENCY);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LiveCacheEmulator")]
[assembly: AssemblyDescription("")]
//[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("LiveCacheEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("dbb5a44a-971d-46fb-9f07-7ab3083a468e")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidEmulator\LiveCacheEmulator\XCacheDataAccessEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Live.Livecache.DataAccess;

namespace MetroidEmulator
{
    public class XCacheDataAccessEmulator : IXCacheDataAccess
    {
        public bool GetGamertagByPuid(ulong livePuid, out string gamertag)
        {
            gamertag = "GamerTag_" + livePuid.ToString();

            RandomDataGenerator.Wait(RandomDataGenerator.GetGamertagByPuid_LATENCY);

            return (livePuid > 0);
        }
        public bool GetOfficialGamerTag(string gamertag, out ulong livePuid, out string officialGamertag)
        {
            throw new NotImplementedException();
        }
        public bool GetPuidByGamerTag(string gamertag, out ulong livePuid)
        {
            string livePuidStr = gamertag.Split('_')[1];
            livePuid = ulong.Parse(livePuidStr);

            RandomDataGenerator.Wait(RandomDataGenerator.GetPuidByGamerTag_LATENCY);

            return (livePuid > 0);
        }
        public bool LookupWebID(ulong passportPuid, out ulong livePuid, out string gamertag)
        {
            livePuid = passportPuid;
            gamertag = "GamerTag_" + livePuid.ToString();

            RandomDataGenerator.Wait(RandomDataGenerator.LookupWebID_LATENCY);

            return (livePuid > 0);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStress\MetroidStress\MetroidStress\BaseUtils.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Gds.Contracts;
using System.Text.RegularExpressions;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using System.Runtime.Serialization;
using Leet.UserGameData.DataContracts;

namespace MetroidStress
{
    public static class BaseUtils
    {

        const string GdsContractsNamespaceUri = "xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\"";
        const string DefaultXmlNamespace = "xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"";


        public static string GetProfile()
        {
            ProfileEx profile = CreateProfileWithProperties("Sam Aran", "I like turtles.", "Recreation", "Redmond", "Interesting!");
            string getProfileString = SerializeObjectToXmlString(profile as object);

            return getProfileString;
        }

        public static string GetMessage()
        {
            SendMessageRequest sendMessageRequest = new SendMessageRequest();
            sendMessageRequest.MessageText =  "RandomMessageText";
            sendMessageRequest.Recipients = new List<string>();

            int numRecipients = RNGAgent.NextRandom(1,10);

            for (int i = 0; i < numRecipients; i++)
            {
                sendMessageRequest.Recipients.Add("GT_" + RNGAgent.GetXUID().ToString());
            }

            string getSendMessageRequestString = SerializeObjectToXmlString(sendMessageRequest as object);

            return getSendMessageRequestString;
        }

        private static ProfileEx CreateProfileWithProperties(string name, string bio, string gamerZone, string location, string motto)
        {
            ProfileEx pro = new ProfileEx();
            pro.ProfileProperties = new XmlSerializableDictionary<ProfileProperty, object>();

            if (!string.IsNullOrEmpty(name)) { pro.ProfileProperties.Add(ProfileProperty.Name, name); }
            if (!string.IsNullOrEmpty(bio)) { pro.ProfileProperties.Add(ProfileProperty.Bio, bio); }
            if (!string.IsNullOrEmpty(gamerZone)) { pro.ProfileProperties.Add(ProfileProperty.GamerZone, gamerZone); }
            if (!string.IsNullOrEmpty(location)) { pro.ProfileProperties.Add(ProfileProperty.Location, location); }
            if (!string.IsNullOrEmpty(motto)) { pro.ProfileProperties.Add(ProfileProperty.Motto, motto); }

            return pro;
        }

        ///<summary>
        /// Returns a randomly generated GameResult string 
        /// </summary>
        /// <returns></returns>
        public static string GetGameResult()
        {
            GameResult result = new GameResult();
            
            result.GameResultId = Guid.NewGuid();
            result.GameId = RNGAgent.GetGameID();
            result.Variant = 0;
            result.Outcome = "Win";
            result.Score = RNGAgent.NextRandom(0, int.MaxValue);
            result.Time = RNGAgent.NextRandom(0, int.MaxValue);
            result.TimeStamp = DateTime.UtcNow;

            if (DateTime.UtcNow.Second == 30)
            {
                result.Outcome = "Loss";
                result.Variant = 1;
            }

            return BaseUtils.GetPostGameResultString(result);
        }


        /// <summary>
        /// Returns a randomly generated GrantAchievement string with achievements between 1 and 10. 
        /// </summary>
        /// <returns></returns>
        public static string GetGrantAchievements()
        {
            GrantAchievements achievements = new GrantAchievements();
            
            achievements.AppId = Guid.NewGuid().ToString();
            achievements.GameId = RNGAgent.GetGameID();
            achievements.Achievements = new List<AchievementEarned>();

            int achCount = RNGAgent.NextRandom(1, 10);

            for (int i = 1; i <= achCount; i++)
            {
                AchievementEarned ae = new AchievementEarned();
                
                ae.EarnedDateTime = DateTime.UtcNow;
                ae.EarnedOnline = false;
                ae.Key = i.ToString();
                achievements.Achievements.Add(ae);
            }

            return BaseUtils.GetGrantAchievementsString(achievements);
        }
                

        private static string GetGrantAchievementsString(GrantAchievements grantAch)
        {
            if (grantAch == null)
            {
                return null;
            }
            string achievementString = SerializeObjectToXmlString(grantAch);
            
            achievementString = StripXmlDeclaration(achievementString);
            achievementString = achievementString.Replace("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", GdsContractsNamespaceUri);
            achievementString = achievementString.Replace("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", DefaultXmlNamespace);
            achievementString = achievementString.Replace("<AchievementEarned>", "<AchievementEarned xmlns=\"\">");
            achievementString = achievementString.Replace("\r\n  ", "");
            achievementString = achievementString.Replace("\r\n", "");
            achievementString = achievementString.Replace("\0", "");

            return achievementString;
        }


        private static string GetPostGameResultString(GameResult gameResult)
        {
            if (gameResult == null)
            {
                return null;
            }
            string gameResultString = SerializeObjectToXmlString(gameResult as object);

            return gameResultString;
        }


        private static XmlObjectSerializer TryGetDeserializer(Type serializationType)
        {
            XmlObjectSerializer returnSerializer = null;

            if (serializationType == null)
            {
                return null;
            }

            if (serializationType == typeof(string))
            {
                return null;
            }

            if (HasCustomAttribute<DataContractAttribute>(serializationType))
            {
                returnSerializer = new DataContractSerializer(serializationType);
            }

            return returnSerializer;
        }


        private static bool HasCustomAttribute<T>(Type dataContractType) where T : Attribute
        {
            if (dataContractType.GetCustomAttributes(typeof(T), false).Length > 0)
            {
                return true;
            }

            return false;
        }


        public static string SerializeObjectToXmlString(object serializableClass)
        {
            XmlObjectSerializer serializer = TryGetDeserializer(serializableClass.GetType());
            if (serializer != null)
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    serializer.WriteObject(ms, serializableClass);
                    ms.Position = 0;
                    byte[] buffer = ms.GetBuffer();
                    return Encoding.UTF8.GetString(buffer, 0, (int)ms.Length);
                }
            }

            return SerializeObjectToXml<object>(serializableClass);
        }

        
        private static string StripXmlDeclaration(string xmlString)
        {
            string pattern = @"<\?xml.*>";
            string ret = Regex.Replace(xmlString, pattern, "");
            return ret;
        }


        private static string SerializeObjectToXml<T>(T obj)
        {
            if (obj == null)
            {
                return null;
            }
            StringBuilder resultString = new StringBuilder();

            using (MemoryStream stream = new MemoryStream())
            {
                XmlSerializer ser = new XmlSerializer(typeof(T));

                using (XmlWriter writer = XmlWriter.Create(resultString))
                {
                    ser.Serialize(writer, obj);
                }
            }

            return resultString.ToString();
        }

        public static string ReplaceOptionalQueryParams(string fullUri, string param, string value)
        {
            if (!String.IsNullOrEmpty(value))
            {
                fullUri = fullUri.Replace("{" + param + "}", value);
            }
            else
            {
                if (fullUri.Contains("&"))
                {
                    fullUri = fullUri.Replace("&" + param + "={" + param + "}", "");
                    fullUri = fullUri.Replace("?" + param + "={" + param + "}&", "?"); //this will catch it if it's the first parameter on the query string
                }
                else // this case if for only one parameter on the query string
                {
                    fullUri = fullUri.Replace("?" + param + "={" + param + "}", "");
                }
            }
            return fullUri;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStress\MetroidStress\MetroidStress\RNGAgent.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;

namespace MetroidStress
{
    public static class RNGAgent
    {

        const int L_LIMIT_XUID = 1;
        const int U_LIMIT_XUID = 1000001;
        const long XUID_ADDER = 200000000000000;

        const int L_LIMIT_GAMEID = 0;
        const int U_LIMIT_GAMEID = 20;
        const uint GAMEID_ADDER = 1179582800;

        private static RNGCryptoServiceProvider rngCSP = new RNGCryptoServiceProvider();

        [ThreadStatic]
        private static Random l_Random;
        

        public static int NextRandom(int lowerRange, int upperRange)
        {
            Random randInstance = l_Random;
            if (randInstance == null)
            {
                byte[] buffer = new byte[6];

                rngCSP.GetBytes(buffer);

                l_Random = randInstance = new Random(
                    BitConverter.ToInt32(buffer, 0));
            }
            return randInstance.Next(lowerRange, upperRange);
        }


        public static long GetXUID()
        {
            long xuid = XUID_ADDER + RNGAgent.NextRandom(L_LIMIT_XUID, U_LIMIT_XUID);
            return xuid;
        }

        
        public static uint GetGameID()
        {
            return GAMEID_ADDER + (uint)RNGAgent.NextRandom(L_LIMIT_GAMEID, U_LIMIT_GAMEID);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStress\MetroidStress\MetroidStress\MetroidStress.cs ===
﻿using System;
using System.Globalization;
using System.Linq;
using System.Net.NetworkInformation;
using System.Threading;
using Gds.Contracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net;
using System.Configuration;
using System.Collections.Generic;
using System.Diagnostics;
using System.Security.Cryptography;

namespace MetroidStress
{
    [TestClass]
    public class MetroidStress
    {
        [ClassInitialize]
        public static void StartTests(TestContext context)
        {
            ServicePointManager.DefaultConnectionLimit = 10000;
        }
        
        [TestMethod]
        public void POSTGameResult()
        {
            HttpWebResponse resp = TestAgent.POSTGameResult();
        }


        [TestMethod]
        public void GETLeaderboard()
        {
            int val = RNGAgent.NextRandom(0, 10);
            HttpWebResponse response = null;

            if (val < 4)
            {
                response = TestAgent.GETLeaderboard("0", "BestScore", "Lifetime"); 
            }
            else if (val >= 4 && val < 7)
            {
                response = TestAgent.GETLeaderboard("0", "BestTime", "Lifetime");
            }
            else
            {
                response = TestAgent.GETLeaderboard("0", "Wins", "Lifetime");
            }
        }


        [TestMethod]
        public void GETAchievements()
        {
            HttpWebResponse response = TestAgent.GETAchievements();
        }


        [TestMethod]
        public void POSTAchievements()
        {
            HttpWebResponse response = TestAgent.POSTAchievements();
        }

        [TestMethod]
        public void GETProfileMy()
        {
            HttpWebResponse response = TestAgent.GETProfile(null);
        }

        [TestMethod]
        public void GETProfileYou()
        {
            HttpWebResponse response = TestAgent.GETProfile("Gamertag_" + RNGAgent.GetXUID().ToString());
        }

        // ProfilePartnerService

        [TestMethod]
        public void GETProfileMyPartner()
        {
            HttpWebResponse response = TestAgent.GETProfilePartner(null);
        }

        [TestMethod]
        public void GETProfileYouPartner()
        {
            HttpWebResponse response = TestAgent.GETProfilePartner("Gamertag_" + RNGAgent.GetXUID().ToString());
        }

        [TestMethod]
        public void POSTProfilePartner()
        {
            HttpWebResponse response = TestAgent.POSTProfilePartner();
        }

        [TestMethod]
        public void POSTGamertagChange()
        {
            //Make sure random Gamertag is 15 characters or less
            int maxGamertag = 15;
            string xuid = RNGAgent.GetXUID().ToString();
            string gamertag = "GT" + xuid;
            if (gamertag.Length > maxGamertag)
            {
                gamertag = "GT" + xuid.Substring(xuid.Length - maxGamertag + 2, maxGamertag - 2);
            }

            HttpWebResponse response = TestAgent.POSTGamertagChange(gamertag);
        }

        // GameDataPartnerService 

        [TestMethod]
        public void GETGames()
        {
            HttpWebResponse response = TestAgent.GETGames();
        }

        [TestMethod]
        public void GETAchievementsPartner()
        {
            HttpWebResponse response = TestAgent.GETAchievementsPartner();
        }

        // PresencePartnerService
        [TestMethod]
        public void POSTPresence()
        {
            HttpWebResponse response = TestAgent.POSTPresence();
        }

        // FriendPartnerService
        [TestMethod]
        public void POSTAddFriend()
        {
            HttpWebResponse response = TestAgent.POSTAddFriend();
        }

        // MessagePartnerService
        [TestMethod]
        public void GETMessageSummaries()
        {
            HttpWebResponse response = TestAgent.GETMessageSummaries();
        }

        [TestMethod]
        public void GETMessageDetails()
        {
            HttpWebResponse response = TestAgent.GETMessageDetails();
        }

        [TestMethod]
        public void SendMessage()
        {
            HttpWebResponse response = TestAgent.SendMessage();
        }

        [TestMethod]
        public void DELETEMessage()
        {
            HttpWebResponse response = TestAgent.DELETEMessage();
        }

        [TestMethod]
        public void DELETEMessageBlock()
        {
            HttpWebResponse response = TestAgent.DELETEMessageBlock();
        }                
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStressTool\MultiplayerThreadState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MetroidStressTool
{
    /// <summary>
    /// 
    /// </summary>
    public class MultiplayerThreadState
    {
        /// <summary>
        /// 
        /// </summary>
        public string RequestBody
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string HttpMethod
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int Timeout
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserToken
        {
            get;
            set;
        }
        
        /// <summary>
        /// 
        /// </summary>
        public string PartnerToken
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Locale
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool UseRandomXuid
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStress\MetroidStress\MetroidStress\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MetroidStress")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("MetroidStress")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f8be6c01-6cec-484b-b699-a75b2a18a15a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStressTool\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace MetroidStressTool
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new mainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStressTool\MainForm.Designer.cs ===
﻿namespace MetroidStressTool
{
    partial class mainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(mainForm));
            this.label1 = new System.Windows.Forms.Label();
            this.userToken = new System.Windows.Forms.TextBox();
            this.start = new System.Windows.Forms.Button();
            this.stop = new System.Windows.Forms.Button();
            this.label3 = new System.Windows.Forms.Label();
            this.baseUrl = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.tps = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.durations = new System.Windows.Forms.TextBox();
            this.label5 = new System.Windows.Forms.Label();
            this.threadCount = new System.Windows.Forms.NumericUpDown();
            this.requestBody = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.cboApi = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.timeout = new System.Windows.Forms.TextBox();
            this.label9 = new System.Windows.Forms.Label();
            this.label10 = new System.Windows.Forms.Label();
            this.avgLatency = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.label12 = new System.Windows.Forms.Label();
            this.label13 = new System.Windows.Forms.Label();
            this.totalSucceeded = new System.Windows.Forms.Label();
            this.totalFailed = new System.Windows.Forms.Label();
            this.totalTimeout = new System.Windows.Forms.Label();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ignoreSSLErrorsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.useRandomXuidToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
            this.threadsRunning = new System.Windows.Forms.ToolStripStatusLabel();
            ((System.ComponentModel.ISupportInitialize)(this.threadCount)).BeginInit();
            this.menuStrip1.SuspendLayout();
            this.statusStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(24, 138);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(62, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "STS Token";
            // 
            // userToken
            // 
            this.userToken.Location = new System.Drawing.Point(27, 154);
            this.userToken.Multiline = true;
            this.userToken.Name = "userToken";
            this.userToken.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.userToken.Size = new System.Drawing.Size(292, 73);
            this.userToken.TabIndex = 1;
            this.userToken.Text = resources.GetString("userToken.Text");
            // 
            // start
            // 
            this.start.Location = new System.Drawing.Point(92, 571);
            this.start.Name = "start";
            this.start.Size = new System.Drawing.Size(75, 23);
            this.start.TabIndex = 2;
            this.start.Text = "&Start";
            this.start.UseVisualStyleBackColor = true;
            this.start.Click += new System.EventHandler(this.start_Click);
            // 
            // stop
            // 
            this.stop.Location = new System.Drawing.Point(173, 571);
            this.stop.Name = "stop";
            this.stop.Size = new System.Drawing.Size(75, 23);
            this.stop.TabIndex = 3;
            this.stop.Text = "&Stop";
            this.stop.UseVisualStyleBackColor = true;
            this.stop.Click += new System.EventHandler(this.stop_Click);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(24, 63);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(29, 13);
            this.label3.TabIndex = 4;
            this.label3.Text = "URL";
            // 
            // baseUrl
            // 
            this.baseUrl.Location = new System.Drawing.Point(27, 79);
            this.baseUrl.Multiline = true;
            this.baseUrl.Name = "baseUrl";
            this.baseUrl.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.baseUrl.Size = new System.Drawing.Size(292, 50);
            this.baseUrl.TabIndex = 5;
            this.baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/?count=10";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(72, 419);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(31, 13);
            this.label2.TabIndex = 6;
            this.label2.Text = "TPS:";
            // 
            // tps
            // 
            this.tps.AutoSize = true;
            this.tps.Location = new System.Drawing.Point(102, 419);
            this.tps.Name = "tps";
            this.tps.Size = new System.Drawing.Size(13, 13);
            this.tps.TabIndex = 8;
            this.tps.Text = "0";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(25, 480);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(87, 13);
            this.label4.TabIndex = 9;
            this.label4.Text = "Call Latency (ms)";
            // 
            // durations
            // 
            this.durations.Location = new System.Drawing.Point(28, 496);
            this.durations.Multiline = true;
            this.durations.Name = "durations";
            this.durations.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.durations.Size = new System.Drawing.Size(292, 63);
            this.durations.TabIndex = 10;
            this.durations.WordWrap = false;
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(54, 392);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(49, 13);
            this.label5.TabIndex = 11;
            this.label5.Text = "Threads:";
            // 
            // threadCount
            // 
            this.threadCount.Location = new System.Drawing.Point(106, 389);
            this.threadCount.Name = "threadCount";
            this.threadCount.Size = new System.Drawing.Size(120, 20);
            this.threadCount.TabIndex = 12;
            this.threadCount.Value = new decimal(new int[] {
            5,
            0,
            0,
            0});
            // 
            // requestBody
            // 
            this.requestBody.Location = new System.Drawing.Point(28, 250);
            this.requestBody.Multiline = true;
            this.requestBody.Name = "requestBody";
            this.requestBody.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.requestBody.Size = new System.Drawing.Size(292, 73);
            this.requestBody.TabIndex = 14;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(25, 234);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(74, 13);
            this.label6.TabIndex = 13;
            this.label6.Text = "Request Body";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(25, 338);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(78, 13);
            this.label7.TabIndex = 15;
            this.label7.Text = "HTTP Method:";
            // 
            // comboBox1
            // 
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Items.AddRange(new object[] {
            "DELETE",
            "GET",
            "POST",
            "PUT"});
            this.comboBox1.Location = new System.Drawing.Point(105, 335);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(121, 21);
            this.comboBox1.TabIndex = 16;
            // 
            // cboApi
            // 
            this.cboApi.FormattingEnabled = true;
            this.cboApi.Items.AddRange(new object[] {
            "DeleteMessage",
            "DeleteMessageBlock",
            "GetAchievements",
            "GetAchievementsPartner",
            "GetGames",
            "GetLeaderboard",
            "GetMessageSummaries",
            "GetMessageDetails",
            "GetNotifications",
            "GetProfile",
            "GetProfileMyPartner",
            "GetProfileYouPartner",
            "GET_GMSRedirector",
            "PostAchievements",
            "PostAddFriend",
            "PostGameResult",
            "PostGamertagChange",
            "PostProfilePartner",
            "PostSendMessage",
            "SendInvite"});
            this.cboApi.Location = new System.Drawing.Point(123, 34);
            this.cboApi.Name = "cboApi";
            this.cboApi.Size = new System.Drawing.Size(121, 21);
            this.cboApi.TabIndex = 18;
            this.cboApi.SelectedIndexChanged += new System.EventHandler(this.cboApi_SelectedIndexChanged);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(92, 38);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(27, 13);
            this.label8.TabIndex = 17;
            this.label8.Text = "API:";
            // 
            // timeout
            // 
            this.timeout.Location = new System.Drawing.Point(105, 363);
            this.timeout.Name = "timeout";
            this.timeout.Size = new System.Drawing.Size(121, 20);
            this.timeout.TabIndex = 19;
            this.timeout.Text = "30000";
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(32, 366);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(70, 13);
            this.label9.TabIndex = 20;
            this.label9.Text = "Timeout (ms):";
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(30, 441);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(73, 13);
            this.label10.TabIndex = 21;
            this.label10.Text = "Avg. Latency:";
            // 
            // avgLatency
            // 
            this.avgLatency.AutoSize = true;
            this.avgLatency.Location = new System.Drawing.Point(102, 442);
            this.avgLatency.Name = "avgLatency";
            this.avgLatency.Size = new System.Drawing.Size(13, 13);
            this.avgLatency.TabIndex = 22;
            this.avgLatency.Text = "0";
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(170, 419);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(65, 13);
            this.label11.TabIndex = 23;
            this.label11.Text = "Succeeded:";
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(197, 441);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(38, 13);
            this.label12.TabIndex = 24;
            this.label12.Text = "Failed:";
            // 
            // label13
            // 
            this.label13.AutoSize = true;
            this.label13.Location = new System.Drawing.Point(176, 463);
            this.label13.Name = "label13";
            this.label13.Size = new System.Drawing.Size(59, 13);
            this.label13.TabIndex = 25;
            this.label13.Text = "Timed Out:";
            // 
            // totalSucceeded
            // 
            this.totalSucceeded.AutoSize = true;
            this.totalSucceeded.Location = new System.Drawing.Point(234, 420);
            this.totalSucceeded.Name = "totalSucceeded";
            this.totalSucceeded.Size = new System.Drawing.Size(13, 13);
            this.totalSucceeded.TabIndex = 26;
            this.totalSucceeded.Text = "0";
            // 
            // totalFailed
            // 
            this.totalFailed.AutoSize = true;
            this.totalFailed.Location = new System.Drawing.Point(234, 442);
            this.totalFailed.Name = "totalFailed";
            this.totalFailed.Size = new System.Drawing.Size(13, 13);
            this.totalFailed.TabIndex = 27;
            this.totalFailed.Text = "0";
            // 
            // totalTimeout
            // 
            this.totalTimeout.AutoSize = true;
            this.totalTimeout.Location = new System.Drawing.Point(234, 464);
            this.totalTimeout.Name = "totalTimeout";
            this.totalTimeout.Size = new System.Drawing.Size(13, 13);
            this.totalTimeout.TabIndex = 28;
            this.totalTimeout.Text = "0";
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(346, 24);
            this.menuStrip1.TabIndex = 29;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(92, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ignoreSSLErrorsToolStripMenuItem,
            this.useRandomXuidToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // ignoreSSLErrorsToolStripMenuItem
            // 
            this.ignoreSSLErrorsToolStripMenuItem.CheckOnClick = true;
            this.ignoreSSLErrorsToolStripMenuItem.Name = "ignoreSSLErrorsToolStripMenuItem";
            this.ignoreSSLErrorsToolStripMenuItem.Size = new System.Drawing.Size(168, 22);
            this.ignoreSSLErrorsToolStripMenuItem.Text = "&Ignore SSL Errors";
            this.ignoreSSLErrorsToolStripMenuItem.Click += new System.EventHandler(this.ignoreSSLErrorsToolStripMenuItem_Click);
            // 
            // useRandomXuidToolStripMenuItem
            // 
            this.useRandomXuidToolStripMenuItem.CheckOnClick = true;
            this.useRandomXuidToolStripMenuItem.Name = "useRandomXuidToolStripMenuItem";
            this.useRandomXuidToolStripMenuItem.Size = new System.Drawing.Size(168, 22);
            this.useRandomXuidToolStripMenuItem.Text = "&Use Random Xuid";
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel1,
            this.threadsRunning});
            this.statusStrip1.Location = new System.Drawing.Point(0, 607);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(346, 22);
            this.statusStrip1.TabIndex = 30;
            this.statusStrip1.Text = "statusStrip";
            // 
            // toolStripStatusLabel1
            // 
            this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
            this.toolStripStatusLabel1.Size = new System.Drawing.Size(100, 17);
            this.toolStripStatusLabel1.Text = "Threads Running:";
            // 
            // threadsRunning
            // 
            this.threadsRunning.Name = "threadsRunning";
            this.threadsRunning.Size = new System.Drawing.Size(13, 17);
            this.threadsRunning.Text = "0";
            // 
            // mainForm
            // 
            this.AcceptButton = this.start;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(346, 629);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.totalTimeout);
            this.Controls.Add(this.totalFailed);
            this.Controls.Add(this.totalSucceeded);
            this.Controls.Add(this.label13);
            this.Controls.Add(this.label12);
            this.Controls.Add(this.label11);
            this.Controls.Add(this.avgLatency);
            this.Controls.Add(this.label10);
            this.Controls.Add(this.label9);
            this.Controls.Add(this.timeout);
            this.Controls.Add(this.cboApi);
            this.Controls.Add(this.label8);
            this.Controls.Add(this.comboBox1);
            this.Controls.Add(this.label7);
            this.Controls.Add(this.requestBody);
            this.Controls.Add(this.label6);
            this.Controls.Add(this.threadCount);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.durations);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.tps);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.baseUrl);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.stop);
            this.Controls.Add(this.start);
            this.Controls.Add(this.userToken);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "mainForm";
            this.Text = "Metroid Xtress Tool Ultimate v0.01 Beta, Sign-off Edition As Copied From MP Xtres" +
                "s Tool";
            this.Load += new System.EventHandler(this.mainForm_Load);
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.mainForm_FormClosing);
            ((System.ComponentModel.ISupportInitialize)(this.threadCount)).EndInit();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox userToken;
        private System.Windows.Forms.Button start;
        private System.Windows.Forms.Button stop;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox baseUrl;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label tps;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.TextBox durations;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.NumericUpDown threadCount;
        private System.Windows.Forms.TextBox requestBody;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.ComboBox cboApi;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TextBox timeout;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label avgLatency;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.Label label13;
        private System.Windows.Forms.Label totalSucceeded;
        private System.Windows.Forms.Label totalFailed;
        private System.Windows.Forms.Label totalTimeout;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ignoreSSLErrorsToolStripMenuItem;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
        private System.Windows.Forms.ToolStripStatusLabel threadsRunning;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem useRandomXuidToolStripMenuItem;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStress\MetroidStress\MetroidStress\TestAgent.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Gds.Contracts;
using System.Net;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Serialization;
using System.Text.RegularExpressions;
using System.Configuration;

namespace MetroidStress
{
    public static class TestAgent
    {
        public static string GetLeaderBoardURI = UDSServer + "GameData.svc/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
        public static string GetAchievementsURI = UDSServer + "GameData.svc/achievements?format=xml&gameId={gameId}";
        public static string GetProfileURI = UDSServer + "Profiles.svc/profile?format=xml&sectionflags={sectionflags}&gamertag={gamertag}";

        public static string GrantAchievementsURI = RewardsServer + "RewardsService.svc/GrantAchievements?format=xml";
        public static string PostGameResultURI = RewardsServer + "RewardsService.svc/GameResult?format=xml";
        
        //********MISSING GetDatablob stress scenario NEEDED???******

        // GameDataPartnerService path and queries
        public const string GetGamesPartnerURI = PartnerServer + GameDataPartnerService + GetGames_RelativePathAndQuery;
        public const string GetAchievementsPartnerURI = PartnerServer + GameDataPartnerService + GetAchievementsPartner_RelativePathAndQuery;

        // ProfilePartnerService path and queries
        public const string PostProfilePartnerUri = PartnerServer + ProfilePartnerService + PostProfile_RelativePathAndQuery;
        public const string GetProfilePartnerUri = PartnerServer + ProfilePartnerService + GetProfilePartner_RelativePathAndQuery;
        public const string PostGamertagChangeUri = PartnerServer + ProfilePartnerService + PostGamertagChange_RelativePathAndQuery;

        // PresencePartnerService path and queries
        public const string PostPresenceUri = PartnerServer + PresencePartnerService + PostPresence_RelativePathAndQuery;

        // FriendPartnerService path and queries
        public const string AddFriendUri = PartnerServer + FriendPartnerService + AddFriend_RelativePathAndQuery;
        
        // MessagePartnerService path and queries
        public const string GetMessageSummariesUri = PartnerServer + MessagePartnerService + GetMessageSummaries_RelativePathAndQuery;
        public const string GetMessageDetailsUri = PartnerServer + MessagePartnerService + GetMessageDetails_RelativePathAndQuery;
        public const string SendMessagesUri = PartnerServer + MessagePartnerService + SendMessages_RelativePathAndQuery;
        public const string DeleteMessageUri = PartnerServer + MessagePartnerService + DeleteMessage_RelativePathAndQuery;
        public const string DeleteMessageAndBlockGamertagUri = PartnerServer + MessagePartnerService + DeleteMessageAndBlockGamertag_RelativePathAndQuery;

        // Servers
        const string RewardsServer = "https://rewards.dev.xboxlive.com/";
        const string UDSServer = "https://uds.dev.xboxlive.com/";
        const string PartnerServer = "https://uds-part.dev.xboxlive.com/";

        // Services
        const string RewardsService = "RewardsService.svc"; //rewards
        const string GameDataService = "Gamedata.svc"; //uds
        const string ProfileService = "Profiles.svc"; //uds
        const string GameDataPartnerService = "Gamedata.svc";  //uds-part
        const string ProfilePartnerService = "Profile.svc"; //uds-part
        const string PresencePartnerService = "Presence.svc"; //uds-part
        const string MessagePartnerService = "Message.svc"; //uds-part
        const string FriendPartnerService = "Friend.svc"; //uds-part

        // RewardsService path and queries
        const string PostGameResult_RelativePathAndQuery = "/GameResult?format=xml";

        // GameDataService path and queries
        const string GrantAchievements_RelativePathAndQuery = "/GrantAchievements?format=xml";
        const string GetLeaderBoard_RelativePathAndQuery = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
        const string GetAchievements_RelativePathAndQuery = "/achievements?format=xml&gameId={gameId}";
        const string GetDataBlob_RelativePathAndQuery = "/Datablob?format=xml&datablobId={DataBlobId}";

        // ProfileService path and queries
        const string GetProfile_RelativePathAndQuery = "/profile?format=xml&sectionflags={sectionflags}&gamertag={gamertag}";
        const string PostGamertagChange_RelativePathAndQuery = "/gamertag/change?gamertag={gamertag}";

        // GameDataPartnerService path and queries
        const string GetGames_RelativePathAndQuery = "/games?gamertags={gamertags}&pageStart={pageStart}&pageCount={pageCount}";
        const string GetAchievementsPartner_RelativePathAndQuery = "/achievements?gameId={gameId}&gamertags={gamertags}";

        // ProfilePartnerService path and queries
        const string PostProfile_RelativePathAndQuery = "/";
        const string GetProfilePartner_RelativePathAndQuery = "/profile?sectionFlags={sectionFlags}&friendsSectionFlags={friendsSectionFlags}&gamertag={gamertag}";

        // PresencePartnerService path and queries
        const string PostPresence_RelativePathAndQuery = "/update";

        // FriendPartnerService path and queries
        const string AddFriend_RelativePathAndQuery = "/add?gamertag={gamertag}";

        // MessagePartnerService path and queries
        const string GetMessageSummaries_RelativePathAndQuery = "/summarylist?hashCode={hashCode}";
        const string GetMessageDetails_RelativePathAndQuery = "/messagedetails?messageId={messageId}";
        const string SendMessages_RelativePathAndQuery = "/send";
        const string DeleteMessage_RelativePathAndQuery = "/delete?messageId={messageId}";
        const string DeleteMessageAndBlockGamertag_RelativePathAndQuery = "/block?messageId={messageId}";

        const string def_locale = "en-US";
        const string def_platform = "5";

        const SectionFlags AllProfileSections = SectionFlags.XboxLiveProperties | SectionFlags.Friends | SectionFlags.RecentGames | SectionFlags.RecentAchievements | SectionFlags.PresenceInfo | SectionFlags.PrivacySettings;

        /// <summary>
        /// Section flags used for Profile and ProfileEx calls
        /// </summary>
        public enum SectionFlags : uint
        {
            XboxLiveProperties = 1,
            WindowsLiveProperties = 2,  // Deprecated Windows Live Section
            Friends = 4,
            RecentGames = 8,
            RecentAchievements = 16,
            PresenceInfo = 32,
            PrivacySettings = 64
        }
        
        public static HttpWebResponse POSTGameResult()
        {
            string body = BaseUtils.GetGameResult();
            return HttpAgent.ExecutePOSTRequest(RNGAgent.GetXUID().ToString(), body, PostGameResultURI, def_locale, def_platform);
        }


        public static HttpWebResponse POSTAchievements()
        {
            string body = BaseUtils.GetGrantAchievements();
            return HttpAgent.ExecutePOSTRequest(RNGAgent.GetXUID().ToString(), body, GrantAchievementsURI, def_locale, def_platform);
        }


        public static HttpWebResponse GETLeaderboard(string variant, string property, string dataGroup)
        {
            string query = GetLeaderBoardURI;
            
            query = query.Replace("{gameId}", RNGAgent.GetGameID().ToString());
            query = query.Replace("{variant}", variant);
            query = query.Replace("{property}", property);
            query = query.Replace("{datagroup}", dataGroup);
            query = query.Replace("{numRows}", "100");
            query = query.Replace("{rankStart}", "1");
            query = query.Replace("{socialGraph}", "2");

            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);

        }


        public static HttpWebResponse GETAchievements()
        {
            string query = GetAchievementsURI;
            
            query = query.Replace("{gameId}", RNGAgent.GetGameID().ToString());

            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);
        }


        public static HttpWebResponse GETProfile(string gamertag)
        {
            string query = GetProfileURI;
            query = query.Replace("{sectionflags}", "29");

            if (!string.IsNullOrEmpty(gamertag))
            {
                query = query.Replace("{gamertag}", gamertag);
            }
            else
            {
                query = query.Replace("&gamertag={gamertag}", "");
            }

            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);
        }

        // ProfilePartnerService 

        public static HttpWebResponse GETProfilePartner(string gamertag)
        {
            string query = GetProfilePartnerUri;            
            query = query.Replace("{sectionFlags}", AllProfileSections.ToString());
            query = query.Replace("{friendsSectionFlags}", AllProfileSections.ToString());
            query = BaseUtils.ReplaceOptionalQueryParams(query, "gamertag", gamertag);
            
            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);
        }

        public static HttpWebResponse POSTProfilePartner()
        {
            string body = BaseUtils.GetProfile();
            return HttpAgent.ExecutePOSTRequest(RNGAgent.GetXUID().ToString(), body, PostProfilePartnerUri, def_locale, def_platform);
        }

        public static HttpWebResponse POSTGamertagChange(string gamertag)
        {
            string query = PostGamertagChangeUri;
            query = query.Replace("{gamertag}", gamertag);

            return HttpAgent.ExecutePOSTRequest(RNGAgent.GetXUID().ToString(), null, query, def_locale, def_platform);
        }        

        // GameDataPartnerService 

        public static HttpWebResponse GETGames()
        {
            string gamertags = "GT_" + RNGAgent.GetXUID().ToString();

            int numGamerTags = RNGAgent.NextRandom(0, 2);

            if (numGamerTags == 1)
            {
                 gamertags += ",GT_" + RNGAgent.GetXUID().ToString();
            }

            string query = GetGamesPartnerURI;

            query = BaseUtils.ReplaceOptionalQueryParams(query, "pageStart", null);
            query = BaseUtils.ReplaceOptionalQueryParams(query, "pageCount", null);
            query = query.Replace("{gamertags}", gamertags);

            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);
        }

        public static HttpWebResponse GETAchievementsPartner()
        {
            string gamertags = "GT_" + RNGAgent.GetXUID().ToString();

            int numGamerTags = RNGAgent.NextRandom(0, 3);

            for (int i = 0; i < numGamerTags; i++)
            {
                 gamertags += ",GT_" + RNGAgent.GetXUID().ToString();
            }

            string gameId = RNGAgent.GetGameID().ToString();

            string query = GetAchievementsPartnerURI;

            query = query.Replace("{gameId}", gameId);
            query = query.Replace("{gamertags}", gamertags);

            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);
        }

        // PresencePartnerService 

        public static HttpWebResponse POSTPresence()
        {
            return HttpAgent.ExecutePOSTRequest(RNGAgent.GetXUID().ToString(), null, PostPresenceUri, def_locale, def_platform);
        }

        // FriendPartnerService
        
        public static HttpWebResponse POSTAddFriend()
        {
            string gamertag = "GT_" + RNGAgent.GetXUID().ToString();

            string query = AddFriendUri;
            query = query.Replace("{gamertag}", gamertag);

            return HttpAgent.ExecutePOSTRequest(RNGAgent.GetXUID().ToString(), null, query, def_locale, def_platform);
        }

        // MessagePartnerService

        public static HttpWebResponse GETMessageSummaries()
        {
            string hashCode = RNGAgent.NextRandom(1, 1000).ToString();

            string query = GetMessageSummariesUri;
            query = query.Replace("{hashCode}", hashCode);

            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);
        }

        public static HttpWebResponse GETMessageDetails()
        {
            string messageId = RNGAgent.NextRandom(1, 1000).ToString();

            string query = GetMessageDetailsUri;
            query = query.Replace("{messageId}", messageId);

            return HttpAgent.ExecuteGETRequest(RNGAgent.GetXUID().ToString(), query, def_locale, def_platform);
        }


        public static HttpWebResponse SendMessage()
        {
            string body = BaseUtils.GetMessage();
            return HttpAgent.ExecutePOSTRequest(RNGAgent.GetXUID().ToString(), body, SendMessagesUri, def_locale, def_platform);
        }

        public static HttpWebResponse DELETEMessage()
        {
            string messageId = RNGAgent.NextRandom(1, 1000).ToString();

            string query = DeleteMessageUri;
            query = query.Replace("{messageId}", messageId);
            
            return HttpAgent.ExecuteDELETERequest(RNGAgent.GetXUID().ToString(), null, query, def_locale, def_platform);
        }

        public static HttpWebResponse DELETEMessageBlock()
        {
            string messageId = RNGAgent.NextRandom(1, 1000).ToString();

            string query = DeleteMessageUri;
            query = query.Replace("{messageId}", messageId);
           
            return HttpAgent.ExecuteDELETERequest(RNGAgent.GetXUID().ToString(), null, query, def_locale, def_platform);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStressTool\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Net;
using System.Windows.Forms;
using System.Diagnostics;
using System.Xml.Linq;
using System.Security.Cryptography;
using System.Xml;

namespace MetroidStressTool
{
    /// <summary>
    /// 
    /// </summary>
    public partial class mainForm : Form
    {
        private static bool quit;
        private static int calls;
        private static int totalCalls;
        private static int succeeded;
        private static int failed;
        private static int timeouts;
        private static ulong latencyTotal;

        private System.Threading.Timer timer;
        private Queue<Thread> workerThreads;

        const int L_LIMIT_XUID = 1;
        const int U_LIMIT_XUID = 1001;
        const long XUID_ADDER = 200000000000000;

        const int L_LIMIT_GAMEID = 0;
        const int U_LIMIT_GAMEID = 7;
        const uint GAMEID_ADDER = 1179582800;

        const string recipientForm = "<a:string>{0}</a:string>";

        /// <summary>
        /// 
        /// </summary>
        public mainForm()
        {
            InitializeComponent();
            this.cboApi.SelectedIndex = 0;
            this.comboBox1.SelectedIndex = 1;
            this.workerThreads = new Queue<Thread>(100);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void start_Click(object sender, EventArgs e)
        {
            this.tps.Text = "0";
            this.avgLatency.Text = "0";
            quit = false;
            calls = totalCalls = succeeded = failed = timeouts = 0;

            timer = new System.Threading.Timer(new TimerCallback(UpdateStats), null, 0, 1000);

            for (int i = 1; i <= threadCount.Value; i++)
            {
                Thread worker = new Thread(new ParameterizedThreadStart(SubmitRequest));
                this.workerThreads.Enqueue(worker);

                int timeout;
                if (!int.TryParse(this.timeout.Text.Trim(), out timeout))
                    timeout = 30000;

                worker.Start(new MultiplayerThreadState() { 
                    BaseUrl = this.baseUrl.Text, 
                    UserToken = this.userToken.Text, 
                    Locale = "en-US",
                    RequestBody = this.requestBody.Text,
                    HttpMethod = this.comboBox1.SelectedItem.ToString(),
                    Timeout = timeout,
                    UseRandomXuid = this.useRandomXuidToolStripMenuItem.Checked});

                IncrementRunningThreads();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void stop_Click(object sender, EventArgs e)
        {
            quit = true;
            if(timer != null)
                timer.Dispose();
            timer = null;

            //kill all worker threads
            while(this.workerThreads.Count > 0)
            {
                Thread worker = this.workerThreads.Dequeue();
                if (!worker.Join(10) && worker.IsAlive)
                    worker.Abort();
                DecrementRunningThreads();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void UpdateStats(object state)
        {
            UpdateTps(calls);
            calls = 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tps"></param>
        private void UpdateTps(object tps)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new ParameterizedThreadStart(UpdateTps), tps);
            }
            else
            {
                this.tps.Text = tps.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateSuccess()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateSuccess));
            }
            else
            {
                this.totalSucceeded.Text = succeeded.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateFailed()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateFailed));
            }
            else
            {
                this.totalFailed.Text = failed.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateTimeout()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateTimeout));
            }
            else
            {
                this.totalTimeout.Text = timeouts.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void IncrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(IncrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count + 1).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void DecrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(DecrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count - 1).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="time"></param>
        private void AppendDuration(object data)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new ParameterizedThreadStart(AppendDuration), data);
            }
            else
            {
                object[] stats = data as object[];
                
                latencyTotal += Convert.ToUInt64(stats[0]);
                if (totalCalls > 0)
                    this.avgLatency.Text = (latencyTotal / (ulong)totalCalls).ToString();
                this.durations.AppendText(stats[1].ToString());
                Trace.TraceInformation(stats[1].ToString());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void SubmitRequest(object state)
        {
            MultiplayerThreadState mpState = state as MultiplayerThreadState;

            while (!quit)
            {
                try
                {
                    string baseUrl = mpState.BaseUrl;
                    UpdateRequestUri(ref baseUrl);
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(baseUrl);
                    request.Method = mpState.HttpMethod;
                    request.ContentType = "application/xml";
                    request.UserAgent = "MP Stress Tool";
                    request.Timeout = mpState.Timeout;
                    request.Headers.Add("X-Locale", mpState.Locale);
                    string xuid = GenerateRandomXUID().ToString();
                    request.Headers.Add("X-Authorization", xuid);
                    request.Headers.Add("X-PartnerAuthorization", xuid);
                    request.Headers.Add("X-Platform-Type", "5");
                    
                    string body = mpState.RequestBody;
                    UpdateRequestBody(ref body);
                    if (!string.IsNullOrEmpty(body))
                    {
                        byte[] buffer = Encoding.UTF8.GetBytes(body);
                        request.ContentLength = buffer.Length;
                        using (Stream st = request.GetRequestStream())
                        {
                            st.Write(buffer, 0, buffer.Length);
                        }                        
                    }

                    HttpWebResponse response = null;
                    DateTime start = DateTime.MinValue, finish;
                    string status = "N/A";

                    try
                    {
                        start = DateTime.Now;
                        response = (HttpWebResponse)request.GetResponse();
                        Interlocked.Increment(ref succeeded);
                        UpdateSuccess();
                        status = "200";
                    }
                    catch (WebException e)
                    {
                        Interlocked.Increment(ref failed);
                        UpdateFailed();

                        if (e.Status == WebExceptionStatus.Timeout)
                        {
                            Interlocked.Increment(ref timeouts);
                            UpdateTimeout();
                            status = "Timeout";
                        }
                        else if (e.Status == WebExceptionStatus.ProtocolError)
                        {
                            status = ((int)((HttpWebResponse)e.Response).StatusCode).ToString();
                        }
                    }
                    catch (ThreadAbortException)
                    {
                        status = "Thread Aborted";
                    }
                    catch
                    {
                        Interlocked.Increment(ref failed);
                    }
                    finally
                    {
                        finish = DateTime.Now;
                        Interlocked.Increment(ref calls);
                        Interlocked.Increment(ref totalCalls);

                        double latency = finish.Subtract(start).TotalMilliseconds;
                        object[] data = { latency, String.Format("{0} - {1}\r\n", latency, status) };
                        AppendDuration(data);
                        response.Close();
                    }
                }
                catch
                {
                    //keep the loop going, no matter what...
                }
                finally
                {
                    Thread.Sleep(50);
                }
            }
        }      

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cboApi_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (cboApi.SelectedItem.ToString())
            {
                case "PostGameResult":
                    baseUrl.Text = "https://rewards.stress.xboxlive.com/RewardsService.svc/GameResult?format=xml";
                    requestBody.Text = "<GameResult xmlns=\"http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameId>{gameId}</GameId><Variant>0</Variant><GameResultId>{gameResultId}</GameResultId><TimeStamp>{timeStamp}</TimeStamp><Score>{score}</Score><Time>{time}</Time><Outcome>Win</Outcome><Blob i:nil=\"true\"/></GameResult>";
                    
                    comboBox1.SelectedIndex = 2;//POST
                    break;
                case "PostAchievements":
                    baseUrl.Text = "https://rewards.stress.xboxlive.com/RewardsService.svc/GrantAchievements?format=xml";
                    requestBody.Text = "<GrantAchievements xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameId>{gameId}</GameId><AppId>{appId}</AppId><Achievements><AchievementEarned xmlns=\"\"><Key>1</Key><EarnedDateTime>{timeStamp}</EarnedDateTime><EarnedOnline>false</EarnedOnline></AchievementEarned></Achievements></GrantAchievements>";
                    comboBox1.SelectedIndex = 2;//POST
                    break;
                case "GetLeaderboard":
                    baseUrl.Text = "https://uds.stress.xboxlive.com:51422/GameData.svc/leaderboard?format=xml&gameId={gameId}&variant=0&property=BestScore&datagroup=Lifetime&numRows=100&rankStart=1&socialGraph=2";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "GetProfile":
                    baseUrl.Text = "https://uds.stress.xboxlive.com:51422/Profiles.svc/profile?format=xml&sectionflags=29";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "GetAchievements":
                    baseUrl.Text = "https://uds.stress.xboxlive.com:51422/GameData.svc/achievements?format=xml&gameId={gameId}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "GetProfileMyPartner":
                    //txtXuid.Text = partnerTokenDefault;
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Profile.svc/profile?sectionFlags={sectionFlags}&friendsSectionFlags={friendsSectionFlags}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "GetProfileYouPartner":
                    //txtXuid.Text = partnerTokenDefault;
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Profile.svc/profile?sectionFlags={sectionFlags}&friendsSectionFlags={friendsSectionFlags}&gamertag={gamertag}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "PostProfilePartner":
                    //txtXuid.Text = partnerTokenDefault;
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Profile.svc/";
                    requestBody.Text = "<ProfileEx xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Friends i:nil=\"true\"/><ProfileProperties><items><item><ProfileProperty>Name</ProfileProperty><anyType i:type=\"q1:string\" xmlns:q1=\"http://www.w3.org/2001/XMLSchema\">Sam Aran</anyType></item><item><ProfileProperty>Bio</ProfileProperty><anyType i:type=\"q1:string\" xmlns:q1=\"http://www.w3.org/2001/XMLSchema\">I like turtles.</anyType></item><item><ProfileProperty>GamerZone</ProfileProperty><anyType i:type=\"q1:string\" xmlns:q1=\"http://www.w3.org/2001/XMLSchema\">Recreation</anyType></item><item><ProfileProperty>Location</ProfileProperty><anyType i:type=\"q1:string\" xmlns:q1=\"http://www.w3.org/2001/XMLSchema\">Redmond</anyType></item><item><ProfileProperty>Motto</ProfileProperty><anyType i:type=\"q1:string\" xmlns:q1=\"http://www.w3.org/2001/XMLSchema\">Interesting!</anyType></item></items></ProfileProperties><RecentAchievements i:nil=\"true\"/><RecentGames i:nil=\"true\"/><SectionFlags>0</SectionFlags><PresenceInfo i:nil=\"true\"/><PrivacySettings i:nil=\"true\"/></ProfileEx>";
                    comboBox1.SelectedIndex = 2;//POST
                    break;
                case "PostGamertagChange":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Profile.svc/gamertag/change?gamertag={gamertag}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 2;//POST
                    break;
                case "GetGames":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/GameData.svc/games?gamertags={gamertags}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "GetAchievementsPartner":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/GameData.svc/achievements?gameId={gameId}&gamertags={gamertags}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "PostAddFriend":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Friend.svc/add?gamertag={gamertag}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 2;//POST
                    break;
                case "GetMessageSummaries":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Message.svc/summarylist";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "GetMessageDetails":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Message.svc/messagedetails?messageId={messageId}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                case "PostSendMessage":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Message.svc/send";
                    requestBody.Text = "<SendMessageRequest xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Recipients xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">{recipients}</Recipients><MessageText>RandomMessageText</MessageText></SendMessageRequest>";
                    comboBox1.SelectedIndex = 2;//POST
                    break;
                case "DeleteMessage":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Message.svc/delete?messageId={messageId}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 0;//DELETE
                    break;
                case "DeleteMessageBlock":
                    baseUrl.Text = "https://uds-part.stress.xboxlive.com:51425/Message.svc/block?messageId={messageId}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 0;//DELETE
                    break;
                case "GET_GMSRedirector":
                    baseUrl.Text = "http://redirect.stress.xboxlive.com/g/1297287391/0/";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void mainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            //make sure this shit gets cleaned up... particularly if it's running when closed
            stop_Click(this.stop, EventArgs.Empty);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ignoreSSLErrorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Net.ServicePointManager.ServerCertificateValidationCallback = (senderz, certificate, chain, sslPolicyErrors) => true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stsToken"></param>
        private static string InsertRandomXuid(string stsToken)
        {
            //XDocument xDoc = XDocument.Parse(stsToken);
            //xDoc.Element
            return null;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static ulong GenerateRandomUInt64()
        {
            byte[] buffer = new byte[sizeof(ulong)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetNonZeroBytes(buffer);
            return BitConverter.ToUInt64(buffer, 0);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lowerRange"></param>
        /// <param name="upperRange"></param>
        /// <returns></returns>
        public static int NextRandom(int lowerRange, int upperRange)
        {
            byte[] buffer = new byte[sizeof(ulong)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetNonZeroBytes(buffer);
            Random rand = new Random(BitConverter.ToInt32(buffer, 0));
                 
            return rand.Next(lowerRange, upperRange);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static long GenerateRandomXUID()
        {
            long xuid = XUID_ADDER + NextRandom(L_LIMIT_XUID, U_LIMIT_XUID);
            return xuid;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static uint GetRandomGameID()
        {
            return GAMEID_ADDER + (uint)NextRandom(L_LIMIT_GAMEID, U_LIMIT_GAMEID);
        }

        public static string GetRandomGamertag()
        {
            return "GT" + NextRandom(1000000, 9999999);
        }

        public static string GetRandomGamertags()
        {
            string gamertags = "GT" + NextRandom(1000000, 9999999).ToString();
            int numGamerTags = NextRandom(0, 2);

            for (int i = 0; i < numGamerTags; i++)
            {
                gamertags += ",GT" + NextRandom(1000000, 9999999).ToString();
            }

            return gamertags;
        }

        public static string GetRandomMessageId()
        {
            return NextRandom(1, 1000).ToString();
        }

        public static string GetRandomMessageRecipients()
        {
            string recipients = "";
            int numRecipients = NextRandom(1, 10);

            for (int i = 0; i < numRecipients; i++)
            {
                recipients += string.Format(recipientForm, "GT" + NextRandom(1000000, 9999999).ToString());
            }

            return recipients;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="baseUrl"></param>
        public static void UpdateRequestUri(ref string baseUrl)
        {
            if (baseUrl.Contains("uds-part"))
            {
                //Partner values
                baseUrl = baseUrl.Replace("{sectionFlags}", "29");
                baseUrl = baseUrl.Replace("{friendsSectionFlags}", "29");
            }
            else
            {
                //User values
                baseUrl = baseUrl.Replace("{sectionFlags}", "17");
                baseUrl = baseUrl.Replace("{friendsSectionFlags}", "17");
            }

            baseUrl = baseUrl.Replace("{gameId}", GetRandomGameID().ToString());
            baseUrl = baseUrl.Replace("{gamertag}", GetRandomGamertag());
            baseUrl = baseUrl.Replace("{gamertags}", GetRandomGamertags()); 
            baseUrl = baseUrl.Replace("{messageId}", GetRandomMessageId());
        }

        public static void UpdateRequestBody(ref string requestBody)
        {
            if (!String.IsNullOrEmpty(requestBody))
            {
                requestBody = requestBody.Replace("{gameId}", GetRandomGameID().ToString());
                requestBody = requestBody.Replace("{score}", NextRandom(0,Int16.MaxValue).ToString());
                requestBody = requestBody.Replace("{time}", NextRandom(0, Int16.MaxValue).ToString());
                requestBody = requestBody.Replace("{timeStamp}", XmlConvert.ToString(DateTime.UtcNow, XmlDateTimeSerializationMode.Utc));
                requestBody = requestBody.Replace("{gameResultId}", Guid.NewGuid().ToString());
                requestBody = requestBody.Replace("{appId}", Guid.NewGuid().ToString());
                requestBody = requestBody.Replace("{recipients}", GetRandomMessageRecipients());
            }
        }

        private void mainForm_Load(object sender, EventArgs e)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\MetroidStress\MetroidStress\MetroidStress\HttpAgent.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Xml.Linq;

namespace MetroidStress
{
    public static class HttpAgent
    {
        const bool DEBUG_RESPONSE = true;

        /// <summary>
        /// Execute a POST HttpWebRequest 
        /// </summary>
        public static HttpWebResponse ExecutePOSTRequest(string xuid, string requestBody, string fullUri, string locale, string platformType)
        {
            return ExecuteHttpWebRequest("POST", requestBody, fullUri, locale, platformType, xuid);
        }


        /// <summary>
        /// Execute a GET HttpWebRequest 
        /// </summary>
        public static HttpWebResponse ExecuteGETRequest(string xuid, string fullUri, string locale, string platformType)
        {
            return ExecuteHttpWebRequest("GET", null, fullUri, locale, platformType, xuid);
        }

        /// <summary>
        /// Execute a DELETE HttpWebRequest 
        /// </summary>
        public static HttpWebResponse ExecuteDELETERequest(string xuid, string requestBody, string fullUri, string locale, string platformType)
        {
            return ExecuteHttpWebRequest("DELETE", requestBody, fullUri, locale, platformType, xuid);
        }

        /// <summary>
        /// Execute an HttpWebRequest with any method and uri
        /// </summary>
        public static HttpWebResponse ExecuteHttpWebRequest(string method, string requestBody, string fullUri, string locale, string platformType, string xuid)
        {
            HttpWebRequest request = HttpWebRequest.Create(fullUri) as HttpWebRequest;
            string partnerAuthHeader = "XBL1.0 x=<?xml version='1.0' encoding='utf-16'?><saml:Assertion MajorVersion='1' MinorVersion='1' AssertionID='SamlSecurityToken-c23a0c9f-e1b6-441d-aef3-9044f65f5c17' Issuer='http://sts.xboxlive.com' IssueInstant='2010-07-08T23:41:21.350Z' xmlns:saml='urn:oasis:names:tc:SAML:1.0:assertion'><saml:Conditions NotBefore='2010-07-08T23:41:21.350Z' NotOnOrAfter='2010-07-09T03:41:19.981Z'><saml:AudienceRestrictionCondition><saml:Audience>http://xboxlive.com/userdata</saml:Audience></saml:AudienceRestrictionCondition></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format='/xboxlive/nameFormat' NameQualifier='Microsoft-NameQualifier-domain'>XboxLive Partner security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName='TitleID' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>584D07D6</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName='TitleVersion' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName='PartnerID0' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>2600292641993881</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName='Gamertag0' AttributeNamespace='http://xboxlive.com/claims'><saml:AttributeValue>RewardsHead</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns='http://www.w3.org/2000/09/xmldsig#'><SignedInfo><CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#'></CanonicalizationMethod><SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#rsa-sha1'></SignatureMethod><Reference URI='#SamlSecurityToken-c23a0c9f-e1b6-441d-aef3-9044f65f5c17'><Transforms><Transform Algorithm='http://www.w3.org/2000/09/xmldsig#enveloped-signature'></Transform><Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#'></Transform></Transforms><DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1'></DigestMethod><DigestValue>T6i+1WOgZPPolEl1L9LIdyPF7P8=</DigestValue></Reference></SignedInfo><SignatureValue>DZf1OzDXm+ESGFZb6WJFrDqoRii5j0iPcb3FfVgjT+LUc/SKgo+kawpdJttNBsL2EJECm0ZlOtYMdnXBW+IjrPmK93fqs8rC8B1isGzUkaA7H69FHrtqB9wSIwjf0Z2X5Zh+u5ALZ9wzDVEhUJfs5HBoohVBepiZDd5Bp3Jap0k=</SignatureValue><KeyInfo><X509Data><X509Certificate>MIICJzCCAZSgAwIBAgIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTAeFw0wOTA3MTMxNTU3MzdaFw0zOTEyMzEyMzU5NTlaMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAgz0fPGlZa73r2TWmQsQy72aTiKdkAcuW18TyPUL3326CF03eiP3MDUR51U8flfssgt7+2lkuTYALTnCCG4n4XuRVu8JHGdAsGjSmfUpY+EGjxo6A3DuCDJF3Aa0uXzt72OShgF2IcX3+PMJnqryiMXyiPxi6/I1FEZ+i2FWdSYsCAwEAAaNqMGgwEwYDVR0lBAwwCgYIKwYBBQUHAwEwUQYDVR0BBEowSIAQodN354CzBxTNqhzW0A3gWqEiMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbYIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAA4GBAEeUyfLsUMQ1o3v9KmC4GV+9N0WMbmnv5iPusd0BiqtfNp0xcWUbwm1ea5Gw65nTmF5YJKmDN3VEIH4LyTgwTPHLP1QFq4XHY97GXYieeYLJluW+TQTk8rn2rPrYre9yWQDvkijCwERT8F6zV59RKHMAuv36b0oCtSqMCH6hxTRZ</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";

            request.Method = method;

            if (fullUri.Contains("uds-part"))
            {
                request.Headers = AddHeaders(locale, platformType, xuid, partnerAuthHeader);
            }
            else
            {
                request.Headers = AddHeaders(locale, platformType, xuid);
            }

            request.ContentType = @"application/xml";
            
            if (!String.IsNullOrEmpty(requestBody))
            {
                using (Stream stream = request.GetRequestStream())
                {
                    using (StreamWriter writer = new StreamWriter(stream,Encoding.UTF8))
                    {
                        writer.Write(requestBody);
                    }
                }
            }
            else
            {
                request.ContentLength = 0;
            }

            HttpWebResponse response = null;

            try
            {
                response = request.GetResponse() as HttpWebResponse;
            }
            catch (WebException ex)
            {
                HttpWebResponse resp = ex.Response as HttpWebResponse;
                Trace.TraceError(ex.Message);
                using(StreamReader reader = new StreamReader(resp.GetResponseStream()))
                {
                    Trace.TraceError(reader.ReadToEnd());
                }
                throw;
            }
            finally
            {
                if (response != null)
                {
                    if (DEBUG_RESPONSE)
                    {
                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            string text = reader.ReadToEnd();
                            try
                            {
                                XDocument xdoc = XDocument.Parse(text);
                                Trace.TraceInformation(xdoc.ToString());
                            }
                            catch (System.Xml.XmlException)
                            {
                                Trace.TraceInformation(text);
                            }
                        }
                    }
                    response.Close();
                }
            }

            return response;
        }


        private static WebHeaderCollection AddHeaders(string locale, string platformType, string xuid)
        {
            WebHeaderCollection headers = new WebHeaderCollection();

            if (!string.IsNullOrEmpty(locale)) { headers.Add("X-Locale", locale); }
            
            if (!string.IsNullOrEmpty(platformType)) { headers.Add("X-Platform-Type", platformType); }
            
            if (!string.IsNullOrEmpty(xuid)) { headers.Add("X-Authorization",xuid); }

            return headers;
        }

        private static WebHeaderCollection AddHeaders(string locale, string platformType, string xuid, string partnerAuthHeader)
        {
            WebHeaderCollection headers = AddHeaders(locale, platformType, xuid);

            if (!string.IsNullOrEmpty(partnerAuthHeader)) { headers.Add("X-PartnerAuthorization", partnerAuthHeader); }

            return headers;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\testdata\464F0103\FFFFBAAA_test.spa.h ===
////////////////////////////////////////////////////////////////////
//
// FFFFBAAA_test.spa.h
//
// Auto-generated on Wednesday, 15 December 2010 at 15:54:13
// XLAST project version 1.0.33.0
// SPA Compiler version 2.0.20441.0
//
////////////////////////////////////////////////////////////////////

#ifndef __UNDERACHIEVEMENSWEAR_SPA_H__
#define __UNDERACHIEVEMENSWEAR_SPA_H__

#ifdef __cplusplus
extern "C" {
#endif

//
// Title info
//

#define TITLEID_UNDERACHIEVEMENSWEAR                0x464F0103

//
// Context ids
//
// These values are passed as the dwContextId to XUserSetContext.
//


//
// Context values
//
// These values are passed as the dwContextValue to XUserSetContext.
//

// Values for X_CONTEXT_PRESENCE

#define CONTEXT_PRESENCE_DEFAULT_PRESENCE           0

// Values for X_CONTEXT_GAME_MODE

#define CONTEXT_GAME_MODE_DEFAULT                   0

//
// Property ids
//
// These values are passed as the dwPropertyId value to XUserSetProperty
// and as the dwPropertyId value in the XUSER_PROPERTY structure.
//


//
// Achievement ids
//
// These values are used in the dwAchievementId member of the
// XUSER_ACHIEVEMENT structure that is used with
// XUserWriteAchievements and XUserCreateAchievementEnumerator.
//

#define ACHIEVEMENT_ACHIEVEMENT_1                   1
#define ACHIEVEMENT_ACHIEVEMENT_2                   2
#define ACHIEVEMENT_ACHIEVEMENT_3                   3
#define ACHIEVEMENT_ACHIEVEMENT_4                   4
#define ACHIEVEMENT_ACHIEVEMENT_5                   5
#define ACHIEVEMENT_ACHIEVEMENT_6                   6
#define ACHIEVEMENT_ACHIEVEMENT_7                   7
#define ACHIEVEMENT_ACHIEVEMENT_8                   8
#define ACHIEVEMENT_ACHIEVEMENT_9                   9
#define ACHIEVEMENT_ACHIEVEMENT_10                  10
#define ACHIEVEMENT_ACHIEVEMENT_11                  11
#define ACHIEVEMENT_ACHIEVEMENT_12                  12
#define ACHIEVEMENT_ACHIEVEMENT_13                  13
#define ACHIEVEMENT_ACHIEVEMENT_14                  14
#define ACHIEVEMENT_ACHIEVEMENT_15                  15
#define ACHIEVEMENT_ACHIEVEMENT_16                  16
#define ACHIEVEMENT_ACHIEVEMENT_17                  17
#define ACHIEVEMENT_ACHIEVEMENT_18                  18
#define ACHIEVEMENT_ACHIEVEMENT_19                  19
#define ACHIEVEMENT_ACHIEVEMENT_20                  20
#define ACHIEVEMENT_ACHIEVEMENT_21                  21
#define ACHIEVEMENT_ACHIEVEMENT_22                  22
#define ACHIEVEMENT_ACHIEVEMENT_23                  23
#define ACHIEVEMENT_ACHIEVEMENT_24                  24
#define ACHIEVEMENT_ACHIEVEMENT_25                  25
#define ACHIEVEMENT_ACHIEVEMENT_26                  26
#define ACHIEVEMENT_ACHIEVEMENT_27                  27

//
// AvatarAssetAward ids
//

#define AVATARASSETAWARD_SHIRT                           1
#define AVATARASSETAWARD_HAT                             14
#define AVATARASSETAWARD_EARRINGS                        15
#define AVATARASSETAWARD_SHOES                           16
#define AVATARASSETAWARD_DOGBAG                          17
#define AVATARASSETAWARD_EARRINGS2                       18
#define AVATARASSETAWARD_EARRINGS3                       19
#define AVATARASSETAWARD_EARRINGS4                       20
#define AVATARASSETAWARD_EARRINGS5                       21
#define AVATARASSETAWARD_SHIRT2                          22
#define AVATARASSETAWARD_SHIRT3                          23
#define AVATARASSETAWARD_SHIRT4                          24
#define AVATARASSETAWARD_SHIRT5                          25

//
// Stats view ids
//
// These are used in the dwViewId member of the XUSER_STATS_SPEC structure
// passed to the XUserReadStats* and XUserCreateStatsEnumerator* functions.
//

// Skill leaderboards for ranked game modes

#define STATS_VIEW_SKILL_RANKED_DEFAULT             0xFFFF0000

// Skill leaderboards for unranked (standard) game modes

#define STATS_VIEW_SKILL_STANDARD_DEFAULT           0xFFFE0000

// Title defined leaderboards


//
// Stats view column ids
//
// These ids are used to read columns of stats views.  They are specified in
// the rgwColumnIds array of the XUSER_STATS_SPEC structure.  Rank, rating
// and gamertag are not retrieved as custom columns and so are not included
// in the following definitions.  They can be retrieved from each row's
// header (e.g., pStatsResults->pViews[x].pRows[y].dwRank, etc.).
//

//
// Matchmaking queries
//
// These values are passed as the dwProcedureIndex parameter to
// XSessionSearch to indicate which matchmaking query to run.
//


//
// Gamer pictures
//
// These ids are passed as the dwPictureId parameter to XUserAwardGamerTile.
//



#ifdef __cplusplus
}
#endif

#endif // __UNDERACHIEVEMENSWEAR_SPA_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardInfiltrator\LeaderboardAdapter.cs ===
﻿using System.Collections.Generic;
using System.Data;
using Microsoft.Webstore.MetaData;
using Microsoft.Webstore.WstClient;

namespace LeaderboardInfiltrator
{
    internal class LeaderboardAdapter
    {
        const string DeploymentName = "UserProfile";
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuidCollection"></param>
        /// <returns></returns>
        internal List<WstCommand> GetWstCommandSequence(WstConnection conn, List<long> xuidList, string gameId, string variant, string dataGroup)
        {
            Dictionary<int, List<long>> hashXuidCollection = AddXuidByHash(xuidList, DeploymentName);
            List<WstCommand> commandSequence = new List<WstCommand>();

            foreach (var item in hashXuidCollection)
            {
                string xuids = GetCommaDelimitedXuidList(item.Value);
                
                commandSequence.Add(this.GetWstCommand(conn, item.Key,
                                                  xuids, gameId,
                                                  variant, dataGroup));
            }

            return commandSequence;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="hash"></param>
        /// <param name="xuids"></param>
        /// <param name="gameId"></param>
        /// <param name="variant"></param>
        /// <param name="dataGroup"></param>
        /// <returns></returns>
        internal WstCommand GetWstCommand(WstConnection conn, int hash, string xuids, string gameId, string variant, string dataGroup)
        {
            WstCommand wstCommand = conn.CreateCommand();
            wstCommand.Partition = hash;
            wstCommand.CommandType = CommandType.Text;

            //This should be a sproc
            wstCommand.CommandText = "SELECT * FROM dbo.UserStats" +
                                     "WHERE Xuid IN (@p_Xuids) AND" +
                                     "GameID = @p_GameId AND" +
                                     "Variant = @p_Variant AND" +
                                     "Datagroup = @p_Datagroup";

            wstCommand.Parameters.AddWithValue("@p_Xuids", xuids);
            wstCommand.Parameters.AddWithValue("@p_GameId", gameId);
            wstCommand.Parameters.AddWithValue("@p_Variant", variant);
            wstCommand.Parameters.AddWithValue("@p_Datagroup", dataGroup);

            return wstCommand;

        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuidList"></param>
        /// <returns></returns>
        internal static string GetCommaDelimitedXuidList(List<long> xuidList)
        {
            string xuids = string.Empty;

            foreach (var xuid in xuidList)
            {
                if (xuids.Length > 0)
                {
                    xuids += ",";
                }

                xuids += "'" + xuid.ToString() + "'";
            }

            return xuids;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuidList"></param>
        /// <param name="deploymentName"></param>
        /// <returns></returns>
        internal static Dictionary<int, List<long>> AddXuidByHash(List<long> xuidList, string deploymentName)
        {
            Dictionary<int, List<long>> hashXuidCollection = new Dictionary<int, List<long>>();

            int hashKey = 0;

            foreach (var xuid in xuidList)
            {
                hashKey = GetHash(xuid);

                if (!hashXuidCollection.ContainsKey(hashKey))
                {
                    hashXuidCollection.Add(hashKey, new List<long>());
                }
                hashXuidCollection[hashKey].Add(xuid);
            }

            return hashXuidCollection;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuidValue"></param>
        /// <param name="deploymentName"></param>
        /// <returns></returns>
        private static int GetHash(long xuidValue)
        {
            return WstHash.GetHash(xuidValue,
                                   WebstoreMetaData.Instance.DefaultConfig.
                                   Deployments[DeploymentName].Partitions.Count);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardInfiltrator\LeaderboardAgent.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using Microsoft.Webstore.WstClient;
using Microsoft.Webstore.MetaData;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Configuration;
using System.Threading;

namespace LeaderboardInfiltrator
{
    public class LeaderboardAgent
    {
        
        const int Max_GamesPlayed = 2000;
        const int Max_Wins = 200;
        const int Lifetime_DG = 0;
        
        [ThreadStatic]
        private static RNGCryptoServiceProvider rngcsp;

        [ThreadStatic]
        private static Random rand = null;


        /// <summary>
        /// 
        /// </summary>
        public static string DeploymentName { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public Int64 BaseXuid { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public Int32 Range { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public string GameId { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public int Variant { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public List<string> Properties
        {
            get
            {
                return new List<string> 
                {
                    "BestHighScore", 
                    "BestLowScore", 
                    "BestHighTime", 
                    "BestLowTime", 
                    "GamesPlayed", 
                    "CumulativeTime", 
                    "CumulativeScore",
                    "Wins"
                };
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static int[] Datagroups { get; private set; }

        public static int Counter = 0;

        /// <summary>
        /// 
        /// </summary>
        public static string Sproc { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="deploymentName"></param>
        /// <param name="baseXuid"></param>
        /// <param name="range"></param>
        public LeaderboardAgent(string deploymentName, Int64 baseXuid, Int32 range, string gameId, int variant)
        {
            DeploymentName = deploymentName;
            BaseXuid = baseXuid;
            Range = range;
            GameId = gameId;
            Variant = variant;
            Datagroups = new int[] { Lifetime_DG, GetWeeklyDatagroupNumber(DateTime.Now) };
            Sproc = ConfigurationSettings.AppSettings["sproc"];
        }

        /// <summary>
        /// 
        /// </summary>
        public void PopulateDatabase()
        {
            ScatterGatherManager sgm = new ScatterGatherManager(ScatterGatherManager.MaxNumberOfScatter, true);

            List<PopulateParameters> subTasks = new List<PopulateParameters>(ScatterGatherManager.MaxNumberOfScatter);

            for (int i = 0; i < 50; i++)
            {
                PopulateParameters pp = new PopulateParameters()
                {
                    Agent = this,
                    BaseXuid = this.BaseXuid + ((this.Range / 50) * i),
                    DeploymentName = LeaderboardAgent.DeploymentName,
                    GameId = this.GameId,
                    Range = this.Range / 50,
                    Variant = this.Variant
                };

                subTasks.Add(pp);
            }

            sgm.ExecuteParallel<MyScatterGatherTask, PopulateParameters, object>(subTasks);

            Console.WriteLine("\n ******* {0} rows inserted into DB ************", Counter);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="deploymentName"></param>
        /// <param name="BaseXuid"></param>
        /// <param name="Range"></param>
        public static void PopulateDatabase(string deploymentName, long BaseXuid, int Range, string GameId, int Variant)
        {
            LeaderboardEntry entry = new LeaderboardEntry();
            long counter =0;

            using (WstConnection conn = new WstConnection(DeploymentName))
            {
                conn.Open();
                {
                    for (long i = 0; i <= Range; i++)
                    {
                        entry.Xuid = i + BaseXuid;
                        entry.GameID = GameId;
                        entry.PlatformId = 5;
                        entry.Variant = Variant;
                        entry.GameEventId = Guid.NewGuid();
                        entry.GameSessionId = Guid.NewGuid();
                        entry.BestScore = GetPropertyValue("BestScore");
                        entry.BestTime = GetPropertyValue("BestTime");
                        entry.CumulativeScore = entry.BestScore;
                        entry.CumulativeTime = entry.BestTime;
                        entry.GamesPlayed = GetPropertyValue("GamesPlayed");
                        entry.Wins = GetPropertyValue("Wins");
                        entry.Losses = GetPropertyValue("Losses");
                        entry.PropertyBagId = Guid.NewGuid();
                        entry.DateCreated = DateTime.Now;
                        entry.DateUpdated = DateTime.Now;

                        InsertRows(conn, entry, ref counter);
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="entry"></param>
        private static void InsertRows(WstConnection conn, LeaderboardEntry entry, ref long rowCounter)
        {
            int returnVal = 0;
            string error = String.Empty;

            foreach (var datagroup in Datagroups)
            {

                int hash = WstHash.GetHash(entry.Xuid,
                                              WebstoreMetaData.Instance.DefaultConfig.
                                              Deployments[DeploymentName].Partitions.Count);

                using (WstCommand command = conn.CreateCommand())
                {
                    command.CommandText = Sproc;
                    command.CommandType = CommandType.StoredProcedure;
                    command.Partition = hash;
                    command.WstFailoverMode = WstFailoverMode.DefaultWrite;

                    SqlParameterCollection sqlParams = command.Parameters;

                    sqlParams.AddWithValue("@Xuid", entry.Xuid);
                    sqlParams.AddWithValue("@si_HashBucket", 0);
                    sqlParams.AddWithValue("@GameID", entry.GameID);
                    sqlParams.AddWithValue("@Variant", entry.Variant);
                    sqlParams.AddWithValue("@Datagroup", datagroup);
                    sqlParams.AddWithValue("@PlatformID", entry.PlatformId);
                    sqlParams.AddWithValue("@GameEventID", entry.GameSessionId);
                    sqlParams.AddWithValue("@GameSessionID", entry.GameEventId);
                    sqlParams.AddWithValue("@DTCreated", entry.DateCreated);
                    sqlParams.AddWithValue("@DTUpdated", entry.DateUpdated);
                    sqlParams.AddWithValue("@BlobID", Guid.Empty);
                    sqlParams.AddWithValue("@BestScore", entry.BestScore);
                    sqlParams.AddWithValue("@BestTime", entry.BestTime);
                    sqlParams.AddWithValue("@CumulativeScore", entry.CumulativeScore);
                    sqlParams.AddWithValue("@CumulativeTime", entry.CumulativeTime);
                    sqlParams.AddWithValue("@Wins", entry.Wins);
                    sqlParams.AddWithValue("@Losses", entry.Losses);
                    sqlParams.AddWithValue("@GamesPlayed", entry.GamesPlayed);
                    sqlParams.AddWithValue("@PropertyBagId", entry.PropertyBagId);
                    sqlParams.Add("@ErrCode", SqlDbType.Int).Direction = ParameterDirection.Output;

                    SqlParameter sqlErrValue = sqlParams.Add("@ErrMsg", SqlDbType.VarChar);
                    sqlErrValue.Size = 400;
                    sqlErrValue.Direction = ParameterDirection.Output;

                    SqlParameter sqlErrCode = sqlParams.Add("@ErrCode", SqlDbType.Int, 10);
                    sqlErrCode.Direction = ParameterDirection.ReturnValue;

                    command.ExecuteNonQuery();

                    returnVal = (int)sqlErrCode.Value;
                    error = sqlErrValue.Value.ToString();
                }

                if (returnVal != 0)
                {
                    Console.WriteLine("Error inserting into DB. Xuid {0} could not be inserted", entry.Xuid.ToString());
                    Console.WriteLine(error);
                }
                else
                {
                    //Console.WriteLine("Inserted Xuid {0} into db", entry.Xuid);
                    Interlocked.Increment(ref Counter);
                    //rowCounter++;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        private static long GetPropertyValue(string propertyName)
        {
            if (propertyName == "GamesPlayed")
            {
                return GiveNewRandom(0, Max_GamesPlayed);
            }
            else if (propertyName.Equals("Wins", StringComparison.OrdinalIgnoreCase) || propertyName.Equals("Losses", StringComparison.OrdinalIgnoreCase))
            {
                return GiveNewRandom(0, Max_Wins);
            }
            else
            {
                return GiveNewRandom(0, int.MaxValue);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lower"></param>
        /// <param name="higher"></param>
        /// <returns></returns>
        private static int GiveNewRandom(int lower, int higher)
        {
            if (LeaderboardAgent.rand == null)
            {
                rngcsp = new RNGCryptoServiceProvider();
                byte[] buffer = new byte[sizeof(uint)];
                rngcsp.GetNonZeroBytes(buffer);
                LeaderboardAgent.rand = new Random(BitConverter.ToUInt16(buffer, 0));
            }
            return LeaderboardAgent.rand.Next(lower, higher);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="dt"></param>
        /// <returns></returns>
        private static int GetWeeklyDatagroupNumber(DateTime dt)
        {
            TimeSpan duration = dt.Subtract(DateTime.MinValue);

            unchecked
            {
                return (int)duration.TotalDays / 7;
            }
        }
    }

    public class PopulateParameters
    {
        public string DeploymentName { get; set; }
        public long BaseXuid  { get; set; }
        public int Range  { get; set; }
        public string GameId  { get; set; }
        public int Variant { get; set; }
        public LeaderboardAgent Agent { get; set; }
    }

    public class MyScatterGatherTask : ScatterGatherTask<PopulateParameters, object>
    {
        public override object Execute(PopulateParameters input)
        {
            LeaderboardAgent.PopulateDatabase(input.DeploymentName, input.BaseXuid, input.Range, input.GameId, input.Variant);
            return (object)string.Empty;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardInfiltrator\LeaderboardEntry.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LeaderboardInfiltrator
{
    public class LeaderboardEntry
    {
        /// <summary>
        /// 
        /// </summary>
        public long Xuid { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int PlatformId { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public string GameID { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int Variant { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public Guid DatablobId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public Guid GameEventId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public Guid GameSessionId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public int Datagroup { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public long BestScore { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public long BestTime { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public long CumulativeScore { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public long CumulativeTime { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public long Wins { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public long Losses { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public long GamesPlayed { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public Guid PropertyBagId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DateUpdated { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardInfiltrator\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LeaderboardInfiltrator
{
    class Program
    {
        static void Main(string[] args)
        {
            string deploymentName = null;
            Int64 BaseXuid = 0;
            Int32 Range = -1;
            string GameId = String.Empty;
            int Variant = 0;

            try
            {
                for (int i = 0; i < args.Length; i++)
                {
                    if (args[i].StartsWith("-") || args[i].StartsWith("/"))
                    {
                        string tag = args[i].Substring(1, args[i].Length - 1);
                        string paramValue = args[i + 1];

                        if (tag.ToLower().Equals("d") && paramValue != null)
                        {
                            i++;
                            deploymentName = paramValue;
                        }

                        else if (tag.ToLower().Equals("base") && paramValue != null)
                        {
                            i++;
                            try { BaseXuid = Convert.ToInt64(paramValue); }
                            catch { BaseXuid = 0; }
                        }

                        else if (tag.ToLower().Equals("range") && paramValue != null)
                        {
                            i++;
                            try { Range = Convert.ToInt32(paramValue); }
                            catch { Range = -1; }
                        }
                        else if (tag.ToLower().Equals("g") && paramValue != null)
                        {
                            i++;
                            GameId = paramValue;
                        }
                        else if (tag.ToLower().Equals("v") && paramValue != null)
                        {
                            i++;
                            Variant = Convert.ToInt32(paramValue);
                        }
                    }
                }
            }
            catch
            {
                ShowUsage();
                return;
            }

            if (deploymentName == null || Range == -1 || BaseXuid == 0 || GameId.Equals(String.Empty))
            {
                ShowUsage();
            }

            try
            {
                LeaderboardAgent agent = new LeaderboardAgent(deploymentName, BaseXuid, Range, GameId, Variant);
                agent.PopulateDatabase();
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex);
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
                return;
            }
        }

        static void ShowUsage()
        {
            Console.WriteLine("\nLeaderboardInfiltrator.exe  -d <deploymentName> -base <baseXuid> -range <XuidRange> -g <gameId> -v <variant(default is 0)>" );
            Console.WriteLine("Inserts entries into the UserProfile database starting with the specified base Xuid, consecutively over the range");
            Console.WriteLine("Example:");
            Console.WriteLine("LeaderboardInfiltrator.exe -d UserProfile -base 2533274827776884 -range 1000 -g 1297287392 -v 0");
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\LeaderboardThreadState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LeaderboardPerfTool
{
    public class LeaderboardThreadState
    {
        public long UserXuid { get; set; }

        public List<long> FriendXuids { get; set; }

        public int Titleid { get; set; }

        public int Datagroup { get; set; }

        public int Variant { get; set; }

        public string Property { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardInfiltrator\ScatterGatherManager.cs ===
﻿namespace LeaderboardInfiltrator
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading;

    public class ScatterGatherManager
    {
        // Due to limitations on WaitAll, must be "chunked" in sets of 64 or fewer waithandles
        private const int DefaultMaxNumberOfScatteringAllowed = 64;
        private const bool DefaultFailOnAnyErrorPolicy = true; 

        private static int maxNumberOfScatteringAllowed = DefaultMaxNumberOfScatteringAllowed;
        private static bool failOnAnyErrorPolicy = ScatterGatherManager.DefaultFailOnAnyErrorPolicy;

        public static int MaxNumberOfScatter
        {
            get 
            { 
                return maxNumberOfScatteringAllowed; 
            }

            set 
            {
                if (value > ScatterGatherManager.DefaultMaxNumberOfScatteringAllowed)
                {
                    throw new ArgumentOutOfRangeException("You can't generate more than max default allowed number of gathering threads");
                }

                maxNumberOfScatteringAllowed = value;
            }
        }

        public static bool FailOnAnyError 
        {
            get
            {
                return failOnAnyErrorPolicy;
            }
            set
            {
                failOnAnyErrorPolicy = value;
            }
        }

        private int numberOfScatter = MaxNumberOfScatter;
        public int NumberOfScatter
        {
            get
            {
                return numberOfScatter;
            }
            set
            {
                if (value > MaxNumberOfScatter)
                {
                    numberOfScatter = MaxNumberOfScatter;
                }
                numberOfScatter = value;
            }
        }

        public bool FailOnError { get; set; }

        public ScatterGatherManager(int numberOfScatter, bool failOnError)
        {
            this.NumberOfScatter = numberOfScatter;
            this.FailOnError = failOnError;
        }

        private object PendingTaskList { get; set; }
        private List<WaitHandle> WaitHandleList { get; set; }
        private object FinishedTaskList { get; set; }


        private int openHandleCount = 0;
        internal int outstandingTaskCount = 0;


        public List<TScatterGatherTask> ExecuteParallel<TScatterGatherTask, TTaskContext, TResult>(List<TTaskContext> contextList)
            where TScatterGatherTask : ScatterGatherTask<TTaskContext, TResult>, new()
        {
            ValidateThread();

            int taskCount = contextList.Count;

            List<TScatterGatherTask> taskList = new List<TScatterGatherTask>(taskCount);

            //no need to process anything thing, because we weren't sent anything
            if (contextList == null || taskCount == 0)
            {
                return taskList;
            }

            this.PendingTaskList = (object)taskList;

            List<WaitHandle> waitHandleList = new List<WaitHandle>(taskCount);
            this.WaitHandleList = waitHandleList;

            int taskIndex = 0;
            // initialize TaskList and appropriate wait events.
            foreach (TTaskContext context in contextList)
            {
                Interlocked.Increment(ref openHandleCount);
                ManualResetEvent manualResetEvent = new ManualResetEvent(false);
                waitHandleList.Add(manualResetEvent);
                TScatterGatherTask scatterTask = new TScatterGatherTask();
                scatterTask.SetData(context, taskIndex++, manualResetEvent, this);
                taskList.Add(scatterTask);
            }

            TScatterGatherTask[] finishedTaskList = new TScatterGatherTask[taskCount];
            this.FinishedTaskList = (object)finishedTaskList;

            int availableScatterQuota = ScatterGatherManager.MaxNumberOfScatter;

            try
            {
                while (waitHandleList.Count > 0)
                {
                    for (int i = 0; i < availableScatterQuota && i < taskList.Count; i++)
                    {
                        // if a task is Not done and Not scheduled operate on it.
                        if (!taskList[i].IsScheduled && !taskList[i].Done)
                        {
                            taskList[i].IsScheduled = true;
                            Interlocked.Increment(ref this.outstandingTaskCount);
                            ThreadPool.QueueUserWorkItem(taskList[i].ThreadPoolCallback, null);
                        }
                        else
                        {
                            // we have an uncleaned operation, simply bump up the quota to hide this fact AND try the next task in the list
                            // the subsequent WaitAny and CleanUp section will clean completed tasks up, 
                            // it may take multiple loops to achieve this.
                            availableScatterQuota++;
                        }
                    }

                    availableScatterQuota = 0;

                    int completedIndex = WaitHandle.WaitAny(GetWaitArray(waitHandleList));

                    availableScatterQuota += this.CleanUpTasksAndSaveResults<TScatterGatherTask, TTaskContext, TResult>(completedIndex);

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            finally
            {
                // Ensure that there are no more pending tasks
                this.StopTasksAndWait<TScatterGatherTask, TTaskContext, TResult>();

                // Ensure we dispose all wait handles appropriately
                foreach (TScatterGatherTask unfinishedTask in taskList)
                {
                    Interlocked.Decrement(ref openHandleCount);
                    unfinishedTask.DoneEvent.Close();
                }

                for (int i = 0; i < finishedTaskList.Length; i++)
                {
                    if (finishedTaskList[i] != null)
                    {
                        Interlocked.Decrement(ref openHandleCount);
                        finishedTaskList[i].DoneEvent.Close();
                    }
                }
            }

            if (openHandleCount != 0)
            {
                throw new InvalidOperationException();
            }

            return finishedTaskList.ToList();
        }

        /// <summary>
        /// Cleans up completed tasks from the pendingTaskList and cleans the WaitHandle List, and 
        /// returns the count of completed tasks
        /// </summary>
        /// <typeparam name="TScatterGatherTask"></typeparam>
        /// <typeparam name="TTaskContext"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="completedIndex"></param>
        /// <returns></returns>
        private int CleanUpTasksAndSaveResults<TScatterGatherTask, TTaskContext, TResult>(int completedIndex) 
            where TScatterGatherTask : ScatterGatherTask<TTaskContext, TResult>, new()
        {
            int completedTaskCount = 0;
            List<WaitHandle> waitHandleList = this.WaitHandleList;
            List<TScatterGatherTask> pendingTaskList = (List<TScatterGatherTask>)this.PendingTaskList;
            TScatterGatherTask[] finishedTaskList = (TScatterGatherTask[])this.FinishedTaskList;

            // figure out which thread(s) completed, 
            // 1- update pending operations
            // 2- make sure taskList only contains remaining tasks.
            // 3- move finished tasks to the finishedTaskList in the appropriate position.
            // 4- increment available quota
            int iTaskRelativeIndex = 0;
            List<int> indexesOfCompletedTasks = new List<int>(pendingTaskList.Count);

            // do a single-pass
            // it is entirely possible that more tasks may finish during this operation.
            // and we intentionally don't care 
            foreach (TScatterGatherTask pendingTask in pendingTaskList)
            {
                if (pendingTask.Done)
                {
                    indexesOfCompletedTasks.Add(iTaskRelativeIndex);
                }
                iTaskRelativeIndex++;
            }

            // it is possible that our detection failed to detect the signaled event.
            if (!indexesOfCompletedTasks.Contains(completedIndex))
            {
                int iIndexOfIndexFound = 0;
                foreach (int iCompletedTaskIndex in indexesOfCompletedTasks)
                {
                    if (iCompletedTaskIndex > completedIndex)
                    {
                        indexesOfCompletedTasks.Insert(iIndexOfIndexFound - 1, completedIndex);
                    }
                    iIndexOfIndexFound++;
                }
            }

            // start from the end, and move backwards, 
            // this way the relativeIndexes will always be accurate relative to the modified List.
            indexesOfCompletedTasks.Reverse();

            foreach (int iRelativeTaskIndex in indexesOfCompletedTasks)
            {
                waitHandleList.RemoveAt(iRelativeTaskIndex);
                TScatterGatherTask completedTask = pendingTaskList[iRelativeTaskIndex];

                if (!completedTask.Done)
                {
                    throw new InvalidOperationException();
                }
                

                // If we are asked to fail on Any error, 
                // Then check if there is an error, and throw if any.
                if (this.FailOnError && completedTask.Error != null)
                {
                    throw completedTask.Error;
                }

                finishedTaskList[completedTask.TaskIndex] = completedTask;
                pendingTaskList.RemoveAt(iRelativeTaskIndex);
                completedTaskCount++;
            }

            return completedTaskCount;
        }

        public void StopTasksAndWait<TScatterGatherTask, TTaskContext, TResult>()
            where TScatterGatherTask : ScatterGatherTask<TTaskContext, TResult>, new()
        {
            int iScheduledTaskCount = 0;
            foreach (TScatterGatherTask pendingTask in (List<TScatterGatherTask>)this.PendingTaskList)
            {
                pendingTask.Stop = true;
                if (pendingTask.IsScheduled)
                {
                    iScheduledTaskCount++;
                }
            }

            if (iScheduledTaskCount > 0)
            {
                WaitHandle[] scheduledTaskWaits = new WaitHandle[iScheduledTaskCount];
                
                iScheduledTaskCount = 0;
                foreach (TScatterGatherTask pendingTask in (List<TScatterGatherTask>)this.PendingTaskList)
                {
                    if (pendingTask.IsScheduled)
                    {
                        scheduledTaskWaits[iScheduledTaskCount++] = pendingTask.DoneEvent;
                    }
                }

                WaitHandle.WaitAll(scheduledTaskWaits);
            }

            // we are still racing, spin until outstanding tasks have completed.
            while (this.outstandingTaskCount != 0)
            {
                Thread.SpinWait(1);
            }
        }

        private static WaitHandle[] GetWaitArray(List<WaitHandle> waitList)
        {
            int count = waitList.Count < MaxNumberOfScatter ? waitList.Count : MaxNumberOfScatter;
            return waitList.GetRange(0, count).ToArray();
        }

        private static void ValidateThread()
        {
            if (Thread.CurrentThread.GetApartmentState() == ApartmentState.STA)
            {
                throw new InvalidOperationException("We do not support this operation on STA threads");
            }
        }
    }

    public abstract class ScatterGatherTask<TTaskContext, TResult>
    {
        public TTaskContext Context { get; private set; }
        
        /// <summary>
        /// Has the Result object, Throws if there was an error.
        /// </summary>
        public TResult Result 
        {
            get
            {
                if (this.Error != null)
                {
                    throw this.Error;
                }

                return this.result;
            }
            private set
            {
                this.result = value;
            }
        }
        
        /// <summary>
        /// Has an Exception, if the task has thrown any exception
        /// </summary>
        public Exception Error { get; private set; }

        public bool Stop { get; internal set; }
        public bool Done { get; private set; }
        
        internal ManualResetEvent DoneEvent { get; private set; }

        internal int TaskIndex { get; private set; }
        internal bool IsScheduled { get; set; }
        
        private TResult result;
        private ScatterGatherManager ScatterGatherManager { get; set; }

        internal void SetData(TTaskContext input, int index, ManualResetEvent doneEvent, ScatterGatherManager sgm)
        {
            this.TaskIndex = index;
            this.DoneEvent = doneEvent;
            this.Context = input;
            this.ScatterGatherManager = sgm;
        }

        internal void ThreadPoolCallback(Object threadContext)
        {
            try
            {
                if (!this.Stop)
                {
                    this.Result = Execute(this.Context);
                }
            }
            catch (Exception ex)
            {
                this.Error = ex;
            }
            finally
            {
                try
                {
                    this.Done = true;
                    this.DoneEvent.Set();

                    Thread.MemoryBarrier();
                }
                catch (ObjectDisposedException ex)
                {
                    Console.WriteLine(this.DumpString());
                    Console.WriteLine(ex.ToString());
                    throw;
                }
                this.IsScheduled = false;
                Interlocked.Decrement(ref this.ScatterGatherManager.outstandingTaskCount);
            }
        }

        /// <summary>
        /// Executes the specified input.
        /// Consumers needs to overload and create an instance.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns></returns>
        public abstract TResult Execute(TTaskContext input);

        private string DumpString()
        {
            StringBuilder sb = new StringBuilder(1024);
            sb.AppendFormat("Context is {0}\n", this.Context.ToString());
            //sb.AppendFormat("DoneEvent handle is {0}\n", this.DoneEvent.Handle.ToInt64());
            sb.AppendFormat("DoneEvent handle is closed: {0}\n", this.DoneEvent.SafeWaitHandle.IsClosed);
            sb.AppendFormat("DoneEvent handle is invalid: {0}\n", this.DoneEvent.SafeWaitHandle.IsInvalid);
            
            sb.AppendFormat("TaskIndex: {0}\n", this.TaskIndex);
            sb.AppendFormat("Stopped: {0}\n", this.Stop);
            sb.AppendFormat("Done: {0}\n", this.Done);
            sb.AppendFormat("IsScheduled: {0}\n", this.IsScheduled);
            return sb.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardInfiltrator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LeaderboardInfiltrator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("LeaderboardInfiltrator")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("274832f6-297c-4af6-ad63-a3fc27cae87f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\SamlTokenValidation\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace LeaderboardPerfTool
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LeaderboardPerfTool")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("LeaderboardPerfTool")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("e6ad4110-3df0-4f41-94da-68cd168a8409")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using Gds.DataAccess.UserData;
using System.Diagnostics;
using GDS.DataAccess.UserData;
using System.Net;

namespace LeaderboardPerfTool
{
    public partial class MainForm : Form
    {
        private static bool quit;
        private static int calls;
        private static int totalCalls;
        private static int succeeded;
        private static int failed;
        private static int timeouts;
        private static int timeoutPeriod;
        private static long latencyTotal;
        private static bool endtoend { get; set; }

        private System.Threading.Timer timer;
        private Queue<Thread> workerThreads;
        private static UserDataStorageWebstore udsw = new UserDataStorageWebstore();
        private static Stopwatch tpsSw = new Stopwatch();
        const string LeaderboardUrl = "http://uds.stress.xboxlive.com:51422/Gamedata.svc/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup=W1&numRows=100&rankStart=1&socialGraph=2";

        public MainForm()
        {
            InitializeComponent();
            workerThreads = new Queue<Thread>(100);
            ThreadPool.SetMinThreads(250, 250);
            ThreadPool.SetMaxThreads(1000, 1000);
        }

        private void startButton_Click(object sender, EventArgs e)
        {

            this.tps.Text = "0";
            this.avgLatency.Text = "0";
            endtoend = endtoEnd.Checked;
            quit = false;
            calls =  succeeded = failed = timeouts = 0;
            totalCalls = 1;
            timeoutPeriod = int.Parse(timeout.Text);

            tpsSw.Start();

            timer = new System.Threading.Timer(new TimerCallback(UpdateStats), null, 0, 1000);

            for (int i = 0; i <= ThreadCount.Value; i++)
            {
                Thread worker = new Thread(new ParameterizedThreadStart(CallLeaderboard));
                this.workerThreads.Enqueue(worker);

                worker.Start(new LeaderboardThreadState()
                {

                });

                IncrementRunningThreads();
            }

        }

        private void CallLeaderboard(object state)
        {
            LeaderboardThreadState lbdState = state as LeaderboardThreadState;
            while (!quit)
            {
                try
                {
                    lbdState.UserXuid = RNG.GetUserXuid();
                    lbdState.Titleid = RNG.GetTitleId();
                    lbdState.Datagroup = RNG.GetDataGroup();
                    lbdState.Variant = RNG.GetVariant();

                    Stopwatch sw = new Stopwatch();

                    try
                    {
                        if (endtoend)
                        {
                            string uri = LeaderboardUrl;

                            uri = uri.Replace("{gameId}", lbdState.Titleid.ToString());
                            uri = uri.Replace("{variant}", lbdState.Variant.ToString());
                            uri = uri.Replace("{property}", lbdState.Property);
                            
                            HttpWebRequest request = HttpWebRequest.Create(LeaderboardUrl) as HttpWebRequest;
                            
                            request.Headers.Add("X-Locale", "en-US");
                            request.Headers.Add("X-Platform-Type", "5"); 
                            request.Headers.Add("X-Authorization", lbdState.UserXuid.ToString());
                            request.Timeout = timeoutPeriod;

                            sw.Start();

                            using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                            {
                                if (response == null || response.StatusCode != HttpStatusCode.OK)
                                {
                                  throw new WebException();
                                }
                            }
                        }
                        else
                        {
                            lbdState.FriendXuids = RNG.GetFriendXuids();
                            lbdState.FriendXuids.Add(lbdState.UserXuid);

                            sw.Start();
                            IList<StatsResult> result = udsw.GetStatsForXuids(lbdState.Titleid,
                                                  lbdState.Variant,
                                                  lbdState.Datagroup,
                                                  lbdState.FriendXuids);

                            if (result.Count == 0)
                            {
                                throw new Exception();
                            }
                        }

                        Interlocked.Increment(ref succeeded);
                    }
                    catch (ThreadAbortException)
                    {
                        ///
                    }
                    catch
                    {
                        Interlocked.Increment(ref failed);
                    }
                    finally
                    {
                        sw.Stop();

                        Interlocked.Increment(ref calls);
                        Interlocked.Increment(ref totalCalls);
                        Interlocked.Add(ref latencyTotal, sw.ElapsedMilliseconds);
                    }
                }
                catch
                {
                    ///
                }
                finally
                {
                    ///
                }
            }
        }

        private void IncrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(IncrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count + 1).ToString();
            }
        }

        private void DecrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(DecrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count - 1).ToString();
            }
        }

        private void UpdateStats(object state)
        {
            tpsSw.Stop();
            int realTps;
            unchecked
            {
               realTps = (int)((long)(Interlocked.Exchange(ref calls, 0) * 1000) / (tpsSw.ElapsedMilliseconds == 0 ? 1 : tpsSw.ElapsedMilliseconds));
            }

            tpsSw.Reset();
            tpsSw.Start();

            UpdateTps(realTps);

        }

        private void UpdateTps(object tps)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new ParameterizedThreadStart(UpdateTps), tps);
            }
            else
            {
                this.tps.Text = tps.ToString();
                this.totalFailed.Text = failed.ToString();
                this.totalSucceeded.Text = succeeded.ToString();
                this.avgLatency.Text = ((double)(latencyTotal / totalCalls)).ToString();
            }
        }

        private void UpdateSuccess()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateSuccess));
            }
            else
            {
                this.totalSucceeded.Text = succeeded.ToString();
            }
        }

        private void UpdateFailed()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateFailed));
            }
            else
            {
                this.totalFailed.Text = failed.ToString();
            }
        }

        private void UpdateTimeout()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateTimeout));
            }
            else
            {
                this.totalTimeout.Text = timeouts.ToString();
            }
        }

        private void stop_Click(object sender, EventArgs e)
        {
            quit = true;
            if (timer != null)
                timer.Dispose();
            timer = null;

            //kill all worker threads
            while (this.workerThreads.Count > 0)
            {
                Thread worker = this.workerThreads.Dequeue();
                if (!worker.Join(10) && worker.IsAlive)
                    worker.Abort();
                DecrementRunningThreads();
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\MainForm.Designer.cs ===
﻿namespace LeaderboardPerfTool
{
    partial class MainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.ThreadCount = new System.Windows.Forms.NumericUpDown();
            this.label1 = new System.Windows.Forms.Label();
            this.startButton = new System.Windows.Forms.Button();
            this.totalTimeout = new System.Windows.Forms.Label();
            this.totalFailed = new System.Windows.Forms.Label();
            this.totalSucceeded = new System.Windows.Forms.Label();
            this.label13 = new System.Windows.Forms.Label();
            this.label12 = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.avgLatency = new System.Windows.Forms.Label();
            this.label10 = new System.Windows.Forms.Label();
            this.tps = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.durations = new System.Windows.Forms.TextBox();
            this.label4 = new System.Windows.Forms.Label();
            this.stop = new System.Windows.Forms.Button();
            this.label9 = new System.Windows.Forms.Label();
            this.timeout = new System.Windows.Forms.TextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.threadsRunning = new System.Windows.Forms.Label();
            this.endtoEnd = new System.Windows.Forms.CheckBox();
            ((System.ComponentModel.ISupportInitialize)(this.ThreadCount)).BeginInit();
            this.SuspendLayout();
            // 
            // ThreadCount
            // 
            this.ThreadCount.Location = new System.Drawing.Point(117, 47);
            this.ThreadCount.Name = "ThreadCount";
            this.ThreadCount.Size = new System.Drawing.Size(120, 20);
            this.ThreadCount.TabIndex = 0;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(40, 50);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(72, 13);
            this.label1.TabIndex = 1;
            this.label1.Text = "Thread Count";
            // 
            // startButton
            // 
            this.startButton.Location = new System.Drawing.Point(52, 244);
            this.startButton.Name = "startButton";
            this.startButton.Size = new System.Drawing.Size(75, 23);
            this.startButton.TabIndex = 2;
            this.startButton.Text = "Start";
            this.startButton.UseVisualStyleBackColor = true;
            this.startButton.Click += new System.EventHandler(this.startButton_Click);
            // 
            // totalTimeout
            // 
            this.totalTimeout.AutoSize = true;
            this.totalTimeout.Location = new System.Drawing.Point(225, 123);
            this.totalTimeout.Name = "totalTimeout";
            this.totalTimeout.Size = new System.Drawing.Size(13, 13);
            this.totalTimeout.TabIndex = 38;
            this.totalTimeout.Text = "0";
            // 
            // totalFailed
            // 
            this.totalFailed.AutoSize = true;
            this.totalFailed.Location = new System.Drawing.Point(225, 101);
            this.totalFailed.Name = "totalFailed";
            this.totalFailed.Size = new System.Drawing.Size(13, 13);
            this.totalFailed.TabIndex = 37;
            this.totalFailed.Text = "0";
            // 
            // totalSucceeded
            // 
            this.totalSucceeded.AutoSize = true;
            this.totalSucceeded.Location = new System.Drawing.Point(225, 79);
            this.totalSucceeded.Name = "totalSucceeded";
            this.totalSucceeded.Size = new System.Drawing.Size(13, 13);
            this.totalSucceeded.TabIndex = 36;
            this.totalSucceeded.Text = "0";
            // 
            // label13
            // 
            this.label13.AutoSize = true;
            this.label13.Location = new System.Drawing.Point(167, 122);
            this.label13.Name = "label13";
            this.label13.Size = new System.Drawing.Size(59, 13);
            this.label13.TabIndex = 35;
            this.label13.Text = "Timed Out:";
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(188, 100);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(38, 13);
            this.label12.TabIndex = 34;
            this.label12.Text = "Failed:";
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(161, 78);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(65, 13);
            this.label11.TabIndex = 33;
            this.label11.Text = "Succeeded:";
            // 
            // avgLatency
            // 
            this.avgLatency.AutoSize = true;
            this.avgLatency.Location = new System.Drawing.Point(93, 101);
            this.avgLatency.Name = "avgLatency";
            this.avgLatency.Size = new System.Drawing.Size(13, 13);
            this.avgLatency.TabIndex = 32;
            this.avgLatency.Text = "0";
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(21, 100);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(73, 13);
            this.label10.TabIndex = 31;
            this.label10.Text = "Avg. Latency:";
            // 
            // tps
            // 
            this.tps.AutoSize = true;
            this.tps.Location = new System.Drawing.Point(93, 78);
            this.tps.Name = "tps";
            this.tps.Size = new System.Drawing.Size(13, 13);
            this.tps.TabIndex = 30;
            this.tps.Text = "0";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(63, 78);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(31, 13);
            this.label2.TabIndex = 29;
            this.label2.Text = "TPS:";
            // 
            // durations
            // 
            this.durations.Location = new System.Drawing.Point(10, 161);
            this.durations.Multiline = true;
            this.durations.Name = "durations";
            this.durations.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.durations.Size = new System.Drawing.Size(292, 63);
            this.durations.TabIndex = 40;
            this.durations.WordWrap = false;
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(7, 145);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(87, 13);
            this.label4.TabIndex = 39;
            this.label4.Text = "Call Latency (ms)";
            // 
            // stop
            // 
            this.stop.Location = new System.Drawing.Point(151, 244);
            this.stop.Name = "stop";
            this.stop.Size = new System.Drawing.Size(75, 23);
            this.stop.TabIndex = 41;
            this.stop.Text = "&Stop";
            this.stop.UseVisualStyleBackColor = true;
            this.stop.Click += new System.EventHandler(this.stop_Click);
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(44, 15);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(70, 13);
            this.label9.TabIndex = 43;
            this.label9.Text = "Timeout (ms):";
            // 
            // timeout
            // 
            this.timeout.Location = new System.Drawing.Point(117, 12);
            this.timeout.Name = "timeout";
            this.timeout.Size = new System.Drawing.Size(39, 20);
            this.timeout.TabIndex = 42;
            this.timeout.Text = "30000";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(1, 297);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(89, 13);
            this.label3.TabIndex = 45;
            this.label3.Text = "ThreadsRunning:";
            // 
            // threadsRunning
            // 
            this.threadsRunning.AutoSize = true;
            this.threadsRunning.Location = new System.Drawing.Point(86, 298);
            this.threadsRunning.Name = "threadsRunning";
            this.threadsRunning.Size = new System.Drawing.Size(13, 13);
            this.threadsRunning.TabIndex = 46;
            this.threadsRunning.Text = "0";
            // 
            // endtoEnd
            // 
            this.endtoEnd.AutoSize = true;
            this.endtoEnd.Checked = true;
            this.endtoEnd.CheckState = System.Windows.Forms.CheckState.Checked;
            this.endtoEnd.Location = new System.Drawing.Point(168, 15);
            this.endtoEnd.Name = "endtoEnd";
            this.endtoEnd.Size = new System.Drawing.Size(84, 17);
            this.endtoEnd.TabIndex = 47;
            this.endtoEnd.Text = "Test service";
            this.endtoEnd.UseVisualStyleBackColor = true;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(306, 323);
            this.Controls.Add(this.endtoEnd);
            this.Controls.Add(this.threadsRunning);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.label9);
            this.Controls.Add(this.timeout);
            this.Controls.Add(this.stop);
            this.Controls.Add(this.durations);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.totalTimeout);
            this.Controls.Add(this.totalFailed);
            this.Controls.Add(this.totalSucceeded);
            this.Controls.Add(this.label13);
            this.Controls.Add(this.label12);
            this.Controls.Add(this.label11);
            this.Controls.Add(this.avgLatency);
            this.Controls.Add(this.label10);
            this.Controls.Add(this.tps);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.startButton);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.ThreadCount);
            this.Name = "MainForm";
            this.Text = "LeaderboardPerfTool";
            ((System.ComponentModel.ISupportInitialize)(this.ThreadCount)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.NumericUpDown ThreadCount;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Button startButton;
        private System.Windows.Forms.Label totalTimeout;
        private System.Windows.Forms.Label totalFailed;
        private System.Windows.Forms.Label totalSucceeded;
        private System.Windows.Forms.Label label13;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.Label avgLatency;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label tps;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox durations;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Button stop;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.TextBox timeout;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label threadsRunning;
        private System.Windows.Forms.CheckBox endtoEnd;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LeaderboardPerfTool.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LeaderboardPerfTool.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LeaderboardPerfTool.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test.Common\Tools\LeaderboardPerfTool\LeaderboardPerfTool\RNG.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;

namespace LeaderboardPerfTool
{
    public static class RNG
    {
        const long BaseXuid = 2533274820000000;
        const int XuidRange = 5000001;
        const int friendCount = 20;

        [ThreadStatic]
        private static RNGCryptoServiceProvider rngcsp;

        [ThreadStatic]
        private static Random rand = null;

        private static List<int> titles = new List<int>
        {
            1297287392,
            1627287725,
            1957288058,
            1287288391,
            1617288724,
            1115287304,
            1281283155,
            1043616545,
            1265487898,
            1140212654,
            1154584592,
            1115647895,
            1235468755,
            1124564563,
            1412254654
        };

        private static List<string> properties = new List<string> { "BestScore", "BestTime", "Wins" };

        internal static string GetProperty()
        {
            return properties[GiveNewRandom(0, properties.Count)];
        }

        internal static long GetUserXuid()
        {
            return BaseXuid + GiveNewRandom(0, XuidRange);
        }

        internal static List<long> GetFriendXuids()
        {
            List<long> friends = new List<long>();

            for (int i = 0; i < friendCount; i++)
            {
                friends.Add(GetUserXuid());
            }

            return friends;
        }

        internal static int GetDataGroup()
        {
            return 0;
        }

        internal static int GetTitleId()
        {
            return titles[GiveNewRandom(0,titles.Count)];
        }

        internal static int GetVariant()
        {
            return GiveNewRandom(0, 2);
        }

        private static int GiveNewRandom(int lower, int higher)
        {
            if (RNG.rand == null)
            {
                rngcsp = new RNGCryptoServiceProvider();
                byte[] buffer = new byte[sizeof(uint)];
                rngcsp.GetNonZeroBytes(buffer);
                RNG.rand = new Random(BitConverter.ToUInt16(buffer, 0));
            }

            return RNG.rand.Next(lower, higher);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\SamlTokenValidation\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SamlTokenValidation")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("SamlTokenValidation")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f8f13c9c-a9af-41b2-ac93-a851450b58c7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\SamlTokenValidation\Common\ModuleWebRequest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.IO;

using LiveN.Test.Common.Web;
using LiveN.Test.Framework.Configuration;

namespace SamlTokenValidation.Common
{
    /// <summary>
    /// 
    /// </summary>
    class ModuleWebRequest
    {
        private const string PartnerAuthHeader = "X-PartnerAuthorization";
        private const string XblHeader = "XBL1.0 x=";

        /// <summary>
        /// Sends the request to the service
        /// </summary>
        /// <param name="samlToken"></param>
        /// <returns></returns>
        public static RestResponse SendRequest(string samlToken)
        {
            Dictionary <string, string> httpHeaders = GetHttpHeaders(samlToken);
            RestResponse response = RestRequest.Get(Config.Environment.ManifestReadPartService.OriginalString, httpHeaders);
            return response;
        }

        /// <summary>
        /// Gets the headers for the http request
        /// </summary>
        /// <param name="samlToken"></param>
        /// <returns></returns>
        public static Dictionary<string, string> GetHttpHeaders(string samlToken)
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string,string>();

            if (!string.IsNullOrEmpty(samlToken))
            {
                httpHeaders.Add(PartnerAuthHeader, XblHeader + samlToken);
            }

            httpHeaders.Add("X-Locale", "en-US");
            httpHeaders.Add("X-Platform-Type", "5");

            return httpHeaders;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationCmd\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Framework;

namespace AccountCreationCmd
{
    class Program
    {
        private static List<string> validEnvironments = new List<string> {"dev","storax","testnet","int2","PartnerNet","Airlock_LEST", "Airlock_LEET"};
        private static void PrintUsage(bool detailed)
        {
            Console.WriteLine("\nAccountCreationCmd.exe creates both Windows Live ID and xbox account.");
            Console.WriteLine("The expected format is:");
            Console.WriteLine("AccountCreationCmd.exe /env [environment] /username [username] /password [password] /gamertag [gamertag]");
            if (detailed)
            {
                Console.WriteLine("\nSupported envionments are:");
                foreach(string env in validEnvironments)
                {
                Console.WriteLine(env);
                }
                Console.WriteLine("username should be end with @live-int.com");
            }
            else
                Console.WriteLine("Type /help for list of supported environments");

        }

        static void Main(string[] args)
        {
            string environment = string.Empty;
            string username = string.Empty;
            string password = string.Empty;
            string gamertag = string.Empty;

            if (args == null || args[0]== "/help" || args[0] == "/?")
            {
                PrintUsage(true);
                return;
            }
           
            if (args.Count() != 8)
            {
                Console.WriteLine("Invalid arguements.");
                PrintUsage(false);
                return;
            }

            int argindex = 0;

            while (argindex < args.Length)
            {
                switch (args[argindex])
                {
                    case "/env":
                        environment = args[argindex + 1];
                        if (!(IsvalidEnvironment(environment)))
                        {
                            Console.WriteLine("Invalid environment name.");
                            PrintUsage(true);
                            return;
                        }
                        argindex = argindex + 2;
                        break;

                    case "/username":
                        username = args[argindex + 1];
                        argindex = argindex + 2;
                        break;

                    case "/password":
                        password = args[argindex + 1];
                        argindex++;
                        break;

                    case "/gamertag":
                        gamertag = args[argindex + 1];
                        argindex++;
                        break;

                    default:
                        argindex++;
                        break;
                }
            }

            if (string.IsNullOrEmpty(environment) || string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password) || string.IsNullOrEmpty(gamertag))
            {
                //this means the arguement is incorrect
                PrintUsage(false); 
                return;
            }

            EnvironmentElement env = Config.EnvironmentSettings.Environments[environment];
            Console.WriteLine("Creating account in " + env.Name + " ...");
            
            try
            {
                XboxLive xboxClient = new XboxLive(env.XuacsSettings.XuacsUrl, env.XuacsSettings.ClientCertSubject, env.XuacsSettings.Timeout, env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject, env.WindowsLiveIDSettings.LiveIdServiceTarget, env.WindowsLiveIDSettings.Policy, env.WindowsLiveIDSettings.Environment, env.StsSettings.PlatformType, env.StsSettings.TitleId, env.StsSettings.TitleVersion, env.StsSettings.ClientVersion);
                XboxLiveAccount account = xboxClient.CreateWlidAndXblAccount(username, password, gamertag);
                Console.WriteLine("User Created Successfully!\n");
                Console.WriteLine("\nUser Name = " + account.MemberName);
                Console.WriteLine("\nPassword = " + account.Password);
                Console.WriteLine("\nGamertag = " + account.GamerTag);
                Console.WriteLine("\nXuid= " + account.Xuid);
            }
            catch (Exception ex)
            {
                Console.WriteLine("\n");
                Console.WriteLine("Failed to create user.\n ");
                Console.WriteLine(ex.Message + "\n");
                Console.WriteLine("StackTrace:");
                Console.WriteLine(ex.StackTrace + "\n");
                Console.WriteLine("Source:");
                Console.WriteLine(ex.Source + "\n");
                if (ex.InnerException != null)
                {
                    Console.WriteLine("Inner Exception:");
                    Console.WriteLine(ex.InnerException.Message + "\n");
                    Console.WriteLine("Source:");
                    Console.WriteLine(ex.InnerException.Source + "\n");
                    Console.WriteLine("\nInner Exception stack trace:");
                    Console.WriteLine(ex.InnerException.StackTrace + "\n");
                }
            }
        }

        private static bool IsvalidEnvironment(string environmentName)
        {
            bool isValidEnv = false;
            foreach(string env in validEnvironments)
            {
                if(string.Compare(environmentName, env, true) == 0)
                {
                    isValidEnv = true;
                    break;
                }
            }
            return isValidEnv;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\SamlTokenValidation\Tests\PartnerTokenValidation.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using SamlTokenValidation.Common;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Common.Web;

namespace SamlTokenValidation.Tests
{
    [TestClass]
    public class PartnerTokenValidation : TestBase
    {
        #region BVT

        /// <summary>
        /// Tests ValidatePartnerToken BVT
        /// </summary>
        [TestMethod]
        public void BVT_ValidatePartnerToken()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        #endregion

        #region Positive Tests

        /// <summary>
        /// Tests partner token validation when space before major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space before major version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("                             1", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when space after major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space after major version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceAfterMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("1                                       ", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is space before and after major version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space before and after major version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeAndAfterMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("                 1                                       ", MinorVersion, Issuer,
                                                            Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is leading zeroes in major version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing zeroes before major version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_ZeroBeforeMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("00000000000000000000000000001", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is a plus sign before major version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing plus sign before major version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_PlusBeforeMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("+1", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when space before minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space before minor version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "                 1", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when space after minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space after minor version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceAfterMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "1                     ", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is space before and after minor version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space before and after minor version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeAndAfterMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "                  1                            ", Issuer,
                                                            Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is leading zeroes in minor version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing zeroes before minor version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_ZeroBeforeMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "000000000000000000001", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is a plus sign before minor version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing plus sign before minor version in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_PlusBeforeMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "+1", Issuer, Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when space before issuer is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space before issuer in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "                                      http://sts.xboxlive.com", Now.ToString("o"),
                                                            Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when space after issuer is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space after issuer in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceAfterIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "http://sts.xboxlive.com                                       ", Now.ToString("o"),
                                                            Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is space before and after issuer in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space before and after issuer in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeAndAfterIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "                               http://sts.xboxlive.com                           ", Now.ToString("o"),
                                                            Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when issuer is in uppercase form in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing uppercase issuer in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_ValidUpperCaseIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer.ToUpper(), Now.ToString("o"), Expires.ToString("o"), Audience, Subject, 
                                                            OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when space before subject is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space before subject in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, "                              XboxLive Partner security ticket", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when space after subject is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space after subject in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceAfterSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, "XboxLive Partner security ticket                                            ", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is space before and after subject
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space before and after subject in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeAndAfterSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"), Audience,
                                                            "                                   XboxLive Partner security ticket                           ", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when subject is in uppercase form in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing uppercase subject in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_ValidUpperCaseSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"),
                                                            Expires.ToString("o"), Audience, Subject.ToUpper(), OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when space before audience uri is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space before audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "                               http://xboxlive.com/avatar", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when space after audience uri is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space after audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceAfterAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "http://xboxlive.com/avatar                                   ", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when there is space before and after audience uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space before and after audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SpaceBeforeAndAfterAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "                                http://xboxlive.com/avatar                       ", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        /// <summary>
        /// Tests partner token validation when audience uri is in uppercase form in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing uppercase audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_ValidUpperCaseAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"),
                                                            Expires.ToString("o"), Audience.ToUpper(), Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when there is a small gap between NotBefore and NotOnOrAfter attributes in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing small gap between notBefore and notOnOrAfter attributes in token")]
        [TestProperty("Type", "Feature")]
        public void P_ValidatePartnerToken_SmallGapBetweenNotBeforeNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            Expires = Now.AddMilliseconds(1);
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.OK);
        }

        #endregion

        #region Negative tests

        /// <summary>
        /// Tests partner token validation when invalid major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("5", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when major version with invalid format is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing invalid format major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidFormatMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("V1", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing invalid decimal format for major version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing invalid decimal format for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidDecimalFormatMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("1.0", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when null major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NullMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(null, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when space is passed for major version in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_SpaceForMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("                                            ", MinorVersion, Issuer, Now.ToString("o"),
                                                            Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when a large value is passed for major version in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing a large value for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_LargeMajorVersion()
        {
            GetDateTimeData();
            string largeVersion = "38756454784784784784784784784784784784784784784784784784784784784784784784784784784786766666666664" +
                                   "87555555555555555555555555555555555555555555555555555555555555555555555555555789999999999999999" +
                                   "34676666666666666666666666666666666666666666666666654542323232323232323232323232323232323232342" +
                                   "56576666666654322222222222222222225444444444444444444444444444444444444444444444444444767688888" +
                                   "68098766666666666666666666666666666666666666666666666666666666666666666666666666666555555555555" +
                                   "57798973243274674658434856483904785676589766666666666666666666666666666666666666666666666666666" +
                                   "86748564788888888888888888888888885555555555555555555555555555555555555555555555899999999999999" +
                                   "67785678433333333333333333333333333333333333333333333333333333333333333333333333899999999999999" +
                                   "56222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222" +
                                   "56680342222222222222222222222222222222222222222222244444444444444444444444444445555555555555555";
            string token = stsToken.GeneratePartnerToken(largeVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when negative major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing negative major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NegativeMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("-45765", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when decimal major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing decimal value for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_DecimalMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("345.65", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when hexadecimal major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_HexadecimalMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("0x345AB6", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when unicode major version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing unicode value for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_UnicodeMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("\u003f\u0062", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when major version has alphabets
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing alphabets for major version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_AlphaMajorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken("hjgffdgf", MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when major version attribute is omitted from token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Omitting major version attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_OmitMajorVersionAttribute()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(null, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.MajorVersion);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when invalid minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "2", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when minor version with invalid format is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing invalid format minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidFormatMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, ".1", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when null minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null for minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NullMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, null, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when space is passed for minor version in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_SpaceForMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "                    ", Issuer, Now.ToString("o"),
                                                            Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when a large value is passed for minor version in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing a large value for minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_LargeMinorVersion()
        {
            GetDateTimeData();
            string largeVersion = "38756454784784784784784784784784784784784784784784784784784784784784784784784784784786766666666664" +
                                   "87555555555555555555555555555555555555555555555555555555555555555555555555555789999999999999999" +
                                   "34676666666666666666666666666666666666666666666666654542323232323232323232323232323232323232342" +
                                   "56576666666654322222222222222222225444444444444444444444444444444444444444444444444444767688888" +
                                   "68098766666666666666666666666666666666666666666666666666666666666666666666666666666555555555555" +
                                   "57798973243274674658434856483904785676589766666666666666666666666666666666666666666666666666666" +
                                   "86748564788888888888888888888888885555555555555555555555555555555555555555555555899999999999999" +
                                   "67785678433333333333333333333333333333333333333333333333333333333333333333333333899999999999999" +
                                   "56222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222" +
                                   "56680342222222222222222222222222222222222222222222244444444444444444444444444445555555555555555";
            string token = stsToken.GeneratePartnerToken(MajorVersion, largeVersion, Issuer, Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when negative minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing negative minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NegativeMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "-54463563", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when decimal minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing decimal value for minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_DecimalMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "7456478.76", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when hexadecimal minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_HexadecimalMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "0x56A54D", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when unicode minor version is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing unicode value for minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_UnicodeMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "\u0057\u0127\u01d2", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when minor version has alphabets
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing alphabets for minor version in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_AlphaMinorVersion()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, "gjhefgerfeu", Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when minor version attribute is omitted from token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Omitting minor version attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_OmitMinorVersionAttribute()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, null, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.MinorVersion);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when invalid url issuer is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid url issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidUrlIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "http://www.hotmail.com", Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid string issuer is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid string issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidStringIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "hgfhdjhdkgjh", Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when issuer url has invalid syntax in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing invalid syntax in issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidSyntaxInIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "http:/sts.xboxlive.com", Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when issuer url has invalid scheme name in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing invalid scheme name in issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidSchemeNameInIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "https://sts.xboxlive.com", Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }


        /// <summary>
        /// Tests partner token validation when passing null for issuer in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NullIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, null, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing space for issuer in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_SpaceForIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "                                                                      ",
                                                            Now.ToString("o"), Expires.ToString("o"), Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing large string for issuer in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing large string for issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_LargeIssuer()
        {
            string largeIssuer = "hjdgfdjgyfdjfdhhhhhhhhhhhhhhhhhhhfwefregrggggggggggggggggggggggggggggnmbhjjjjjjjjjjjjjjjjjjjjjrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trgggggggggggggghthtfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg" +
                            "trgtrghtrhthtwwwwwwwwwwwwwwwwwwwwwwwwwwwwhhhhhhhhhhhhhhhhtrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "grwethtrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trgrgeaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaarggggggggggggggggggggg" +
                            "greewqrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrreeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee" +
                            "trrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh" +
                            "bvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "gsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss" +
                            "ggggggggggggggggggggggggggggggggggggggggggggwrgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg" +
                            "sddsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss";
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, largeIssuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when integer value is passed for issuer in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing integer value for issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_IntegerIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "34374563", Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when hexadecimal value is passed for issuer in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_HexadecimalIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "0x37463ABF", Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when unicode value is passed for issuer in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing unicode value for issuer in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_UnicodeIssuer()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, "\u00a6\u00d7\u00fa", Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when issuer attribute is omitted from token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Omitting issuer attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_OmitIssuerAttribute()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, null, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.Issuer);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when invalid subject is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, "fjhfgdfgdhkujyjdfs", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when omitting a word from valid subject
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Omitting word from valid subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_OmitWordFromValidSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, "XboxLive Partner security", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing null for subject in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NullSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, null, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing space for subject in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_SpaceForSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"), Audience,
                                                            "                                                         ", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing large string for subject in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing large string for subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_LargeSubject()
        {
            string largeSubject = "hjdgfdjgyfdjfdhhhhhhhhhhhhhhhhhhhfwefregrggggggggggggggggggggggggggggnmbhjjjjjjjjjjjjjjjjjjjjjrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trgggggggggggggghthtfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg" +
                            "trgtrghtrhthtwwwwwwwwwwwwwwwwwwwwwwwwwwwwhhhhhhhhhhhhhhhhtrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "grwethtrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trgrgeaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaarggggggggggggggggggggg" +
                            "greewqrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrreeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee" +
                            "trrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh" +
                            "bvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "gsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss" +
                            "ggggggggggggggggggggggggggggggggggggggggggggwrgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg" +
                            "sddsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss";
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, largeSubject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when integer value is passed for subject in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing integer value for subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_IntegerSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, "4546", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when hexadecimal value is passed for subject in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_HexadecimalSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, "0xA76B", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when unicode value is passed for subject in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing unicode value for subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_UnicodeSubject()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, "\u0125\u012d", OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when the subject node is omitted from token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Omitting subject node in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_OmitSubjectNode()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, null, OmittedTokenItems.Subject);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when invalid audience uri is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "http://www.google.com", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid string audience uri is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid string audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidStringAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "dgfdughsDfsdsdf", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when audience url has invalid syntax in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing invalid syntax in audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidSyntaxInAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "http;//xboxlive.com/avatar", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when audience url has invalid scheme name in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing invalid scheme name in audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidSchemeNameInAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "https://xboxlive.com/avatar", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }


        /// <summary>
        /// Tests partner token validation when passing null for audience uri in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NullAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            null, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing space for audience uri in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_SpaceForAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "                                                            ", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when passing large string for audience uri in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing large string for audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_LargeAudienceUri()
        {
            string largeAudienceUri = "hjdgfdjgyfdjfdhhhhhhhhhhhhhhhhhhhfwefregrggggggggggggggggggggggggggggnmbhjjjjjjjjjjjjjjjjjjjjjrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trgggggggggggggghthtfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg" +
                            "trgtrghtrhthtwwwwwwwwwwwwwwwwwwwwwwwwwwwwhhhhhhhhhhhhhhhhtrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "grwethtrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "trgrgeaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaarggggggggggggggggggggg" +
                            "greewqrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrreeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee" +
                            "trrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh" +
                            "bvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "gsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss" +
                            "ggggggggggggggggggggggggggggggggggggggggggggwrgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg" +
                            "sddsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss";
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            largeAudienceUri, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when integer value is passed for audience uri in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing integer value for audience in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_IntegerAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "74567468957435", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when hexadecimal value is passed for audience uri in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_HexadecimalAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "0xAAAA", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when unicode value is passed for audience uri in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing unicode value for audience uri in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_UnicodeAudienceUri()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            "\u00aa\u00b2", Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when the AudienceRestrictionCondition node is omitted from token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Omitting AudienceRestrictionCondition node in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_OmitAudienceRestrictionConditionNode()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            null, Subject, OmittedTokenItems.Audience);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when invalid string is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid string for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidStringForNotBefore()
        {
            Expires = DateTime.UtcNow.Add(TimeSpan.FromMinutes(MinutesToExpire));
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, "dfjkghjkg", Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid string is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid string for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidStringForNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), "hgwswsqdjhwfdwq",
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid format is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid format for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidFormatForNotBefore()
        {
            GetDateTimeData();
            // full date/time format for notBefore
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("f"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid format is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid format for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidFormatForNotOnOrAfter()
        {
            GetDateTimeData();
            // general date/time format for notBefore
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("g"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid format is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid format for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_ChangeNotBeforeFormat()
        {
            GetDateTimeData();
            string now = Now.ToString("o").Replace('-', ':');
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, now, Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid format is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid format for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_ChangeNotOnOrAfterFormat()
        {
            GetDateTimeData();
            string expires = Expires.ToString("o").Replace('.', '-');
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), expires,
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when space is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_SpaceForNotBefore()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, "          ", Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when space is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_SpaceForNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), "                     ",
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }


        /// <summary>
        /// Tests partner token validation when a large string is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing a large string for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_LargeStringForNotBefore()
        {
            GetDateTimeData();
            string now = "fgfdftgjkgvhkghjdfgdhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjfddddddddddddddddddddddddddddddddd" +
                            "fjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjhrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrerrrrrrrrrrrggg" +
                            "fgjngjjjjjjjjjjjjjjjjjjjjjjjjdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddd" +
                            "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "dfewwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwee" +
                            "frefffffffffffffffffffffvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv" +
                            "bbbbbbbbbdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaavvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvdsssssssssssssss" +
                            "bfggggggggggggggfffffffffffffffffffffffffffffffffffffffdddddddddddddddddddddddddddddddddddddddddddddd" +
                            "vxxxxxxxxxxxxxxxxxxxxxfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" +
                            "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrr" +
                            "fffffffffffdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd";
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, now, Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when space is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_LargeStringForNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            string expires = "fgfdftgjkgvhkghjdfgdhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjfddddddddddddddddddddddddddddddddd" +
                            "fjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjhrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrerrrrrrrrrrrggg" +
                            "fgjngjjjjjjjjjjjjjjjjjjjjjjjjdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddd" +
                            "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" +
                            "dfewwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwee" +
                            "frefffffffffffffffffffffvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv" +
                            "bbbbbbbbbdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaavvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvdsssssssssssssss" +
                            "bfggggggggggggggfffffffffffffffffffffffffffffffffffffffdddddddddddddddddddddddddddddddddddddddddddddd" +
                            "vxxxxxxxxxxxxxxxxxxxxxfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" +
                            "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrr" +
                            "fffffffffffdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd";
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), expires,
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when integer value is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing integer value for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_IntegerNotBefore()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, "745647856", Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when integer value is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing integer value for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_IntegerNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), "847548",
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when hexadecimal value is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_HexadecimalNotBefore()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, "0x123AD", Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when hexadecimal value is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_HexadecimalNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), "0xFFFF",
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when unicode value is passed for notBefore attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing unicode value for notBefore attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_UnicodeNotBefore()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, "\u0055\u00cc", Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when unicode value is passed for notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing unicode value for notOnOrAfter attribute in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_UnicodeNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), "\u005e\u00e7",
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when NotBefore is greater than notOnOrAfter attribute in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing notBefore greater than notOnOrAfter in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NotBeforeGreaterThanNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            Expires = Now.AddHours(-6);
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when NotBefore is greater than NotOnOrAfter by a millisecond in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing notBefore greater than notOnOrAfter by a millisecond")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_NotBeforeGreaterThanNotOnOrAfterByMilliSecond()
        {
            Now = DateTime.UtcNow;
            Expires = Now.AddMilliseconds(-1);
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when NotBefore and notOnOrAfter attributes are equal in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing equal notBefore and notOnOrAfter attributes in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_EqualNotBeforeNotOnOrAfter()
        {
            Now = DateTime.UtcNow;
            Expires = now;
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when token is expired
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(0)]
        [Description("Passing expired token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_ExpiredToken()
        {
            Now = DateTime.UtcNow.AddHours(-7);
            Expires = Now.AddHours(5);
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when notBefore is greater than current time in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing notBefore and NotOnOrAfter greater than current time in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_GreaterThanCurrentTimeForNotBefore()
        {
            Now = DateTime.UtcNow.AddHours(2);
            Expires = Now.AddHours(5);
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when min and max values are passed for NotOnOrAfter and NotBefore respectively
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing min and max valid values for notOnOrAfter and notBefore attributes respectively")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_MinAndMaxNotOnOrAfterNotBefore()
        {
            Now = DateTime.MaxValue.ToUniversalTime();
            Expires = DateTime.MinValue.ToUniversalTime();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when invalid signature is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid signature in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidSignature()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.Signature);
            token = WriteInvalidSignature(token, "jtyurtsdrdjkg");
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when invalid signature node values are passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid signature node values in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidSignatureNodes()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.Signature);
            token = WriteInvalidSignatureNodes(token);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when null signature is passed in token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null value for signature in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_nullSignature()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.Signature);
            token = WriteInvalidSignature(token, null);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when the Signature node is omitted from token
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Omitting Signature node in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_OmitSignatureNode()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.Signature);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Tests partner token validation when certificate with invalid subject is passed
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(0)]
        [Description("Passing certificate with invalid subject in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidCertificateSubject()
        {
            GetDateTimeData();
            stsToken.CertificateSubject = System.Configuration.ConfigurationManager.AppSettings["SelfSignedTestCertificateSubject"];
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            stsToken.CertificateSubject = System.Configuration.ConfigurationManager.AppSettings["TestCertificateSubject"];
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================

        /// <summary>
        /// Tests partner token validation when token with invalid xml format is passed
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid xml format in token")]
        [TestProperty("Type", "Feature")]
        public void N_ValidatePartnerToken_InvalidXmlFormat()
        {
            GetDateTimeData();
            string token = stsToken.GeneratePartnerToken(MajorVersion, MinorVersion, Issuer, Now.ToString("o"), Expires.ToString("o"),
                                                            Audience, Subject, OmittedTokenItems.None);
            token = token.Remove(token.LastIndexOf('/'),1);
            SendRequestToService(token, HttpStatusCode.Unauthorized);
        }

        //====================================================================================
        
        #endregion

        #region Helper functions

        /// <summary>
        /// Gets DateTime variables
        /// </summary>
        private void GetDateTimeData()
        {
            Now = DateTime.UtcNow;
            Expires = now.Add(TimeSpan.FromMinutes(MinutesToExpire)); 
        }

        /// <summary>
        /// Send the http request to service with the token in header
        /// </summary>
        /// <param name="token"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void SendRequestToService(string token, HttpStatusCode httpStatus)
        {
            Assert.IsNotNull(token);
            try
            {
                RestResponse response = ModuleWebRequest.SendRequest(token);
                Assert.AreEqual<HttpStatusCode>(httpStatus, response.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }
       
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\SamlTokenValidation\Common\TestBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test.Framework.Configuration;
using LiveN.Test.Framework.Authorization;
using LiveConnect.Test.Common;

namespace SamlTokenValidation.Common
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class TestBase
    {
        private TestContext testContextInstance;
        protected DateTime now;
        protected DateTime expires;
        protected static StsToken stsToken;

        public const string MajorVersion = "1";
        public const string MinorVersion = "1";
        public const string Issuer = "http://sts.xboxlive.com";
        public const string Audience = "http://xboxlive.com/avatar";
        public const string Subject = "XboxLive Partner security ticket";
        public const int MinutesToExpire = 60;

        /// <summary>
        /// 
        /// </summary>
        public DateTime Now
        {
            set
            {
                now = value;

            }
            get
            {
                return now;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Expires
        {
            set
            {
                expires = value;
            }
            get
            {
                return expires;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public TestBase()
        {
            if (stsToken == null)
            {
                // install self signed certificate in cert store
                LiveConnectUtil.InstallCertificate(true);
                // install valid certificate in cert store
                LiveConnectUtil.InstallCertificate(false);

                stsToken = new StsToken(System.Configuration.ConfigurationManager.AppSettings["TestCertificateSubject"]);
            }
            if (Trace.Listeners.Count > 1)
            {
                Trace.Listeners[1].Filter = Trace.Listeners[0].Filter;
                Trace.Listeners[1].IndentLevel = Trace.Listeners[0].IndentLevel;
                Trace.Listeners[1].IndentSize = Trace.Listeners[0].IndentSize;
                Trace.Listeners[1].TraceOutputOptions = Trace.Listeners[0].TraceOutputOptions;
            }
            else
                Trace.TraceWarning("Unable to configure custom trace listening.");

            if (bool.Parse(System.Configuration.ConfigurationManager.AppSettings["IgnoreServerSSLErrors"]))
                System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;

            StringBuilder trace = new StringBuilder();
            trace.AppendFormat("Running against the {0} environment.\r\n", Config.Environment.Name);
            Trace.TraceInformation(trace.ToString());
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContextInstance;
            }
            set
            {
                this.testContextInstance = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestInitialize]
        public void Start()
        {
            Trace.WriteLine("Starting test: {0}", this.testContextInstance.TestName);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCleanup]
        public void Finish()
        {
            Trace.WriteLine("Finished test: {0}", this.testContextInstance.TestName);
            if (this.testContextInstance.CurrentTestOutcome == UnitTestOutcome.Passed)
                Trace.TraceInformation("{0} Passed!", this.testContextInstance.TestName);
        }

        /// <summary>
        /// Writes invalid signature value in the token
        /// </summary>
        /// <param name="token"></param>
        /// <param name="value"></param>
        /// <returns>string</returns>
        protected static string WriteInvalidSignature(string token, string value)
        {
            XmlDocument document = new XmlDocument();
            document.LoadXml(token);
            XmlNode root = document.DocumentElement;

            XmlElement signatureElement = document.CreateElement("Signature");
            signatureElement.InnerText = value;
            root.AppendChild(signatureElement);
            return document.OuterXml;
        }

        /// <summary>
        /// Writes invalid signature node values in the token
        /// </summary>
        /// <param name="token"></param>
        /// <returns>string</returns>
        protected static string WriteInvalidSignatureNodes(string token)
        {
            string signatureNamespace = "http://www.w3.org/2000/09/xmldsig#";
            XmlDocument document = new XmlDocument();
            document.LoadXml(token);
            XmlNode root = document.DocumentElement;

            XmlElement signatureElement = document.CreateElement("Signature", signatureNamespace);

            XmlElement signedInfoElement = document.CreateElement("SignedInfo", signatureNamespace);
            XmlElement canonicalizationMethodElement = WriteInvalidSignatureElements(document, "CanonicalizationMethod", signatureNamespace);
            XmlElement signatureMethodElement = WriteInvalidSignatureElements(document, "SignatureMethod", signatureNamespace);
            XmlElement referenceElement = document.CreateElement("Reference", signatureNamespace);
            referenceElement.SetAttribute("URI", "#SamlSecurityToken-fg785t4yhfo89t7498rtuy489t");

            XmlElement transformsElement = document.CreateElement("Transforms", signatureNamespace);
            XmlElement transformElement = WriteInvalidSignatureElements(document, "Transform", signatureNamespace);
            transformsElement.AppendChild(transformElement);

            XmlElement digestMethodElement = WriteInvalidSignatureElements(document, "DigestMethod", signatureNamespace);
            XmlElement digestValueElement = document.CreateElement("DigestValue", signatureNamespace);
            digestValueElement.InnerText = "fgrulgrioflchkljfhrjgtjr";

            referenceElement.AppendChild(transformsElement);
            referenceElement.AppendChild(digestMethodElement);
            referenceElement.AppendChild(digestValueElement);

            signedInfoElement.AppendChild(canonicalizationMethodElement);
            signedInfoElement.AppendChild(signatureMethodElement);
            signedInfoElement.AppendChild(referenceElement);

            XmlElement signatureValueElement = document.CreateElement("SignatureValue", signatureNamespace);
            signatureValueElement.InnerText = "ufyeuir74r48fryheuireghruehjkefherliuygriutgyuiyeriuftrygutruietrtuiytigyireu";

            XmlElement keyInfoElement = document.CreateElement("KeyInfo", signatureNamespace);
            XmlElement x509DataElement = document.CreateElement("X509Data", signatureNamespace);
            XmlElement x509CertificateDataElement = document.CreateElement("X509Certificate", signatureNamespace);
            x509CertificateDataElement.InnerText = "uiyf74ryuierfyheruity3478ry4iu3yguuuu47385ry4378r4yurguy4rtg74863879r6478rt47rteyftg47rty4ertgfeytrrrrrrrrrry74tr4";
            x509DataElement.AppendChild(x509CertificateDataElement);
            keyInfoElement.AppendChild(x509DataElement);

            signatureElement.AppendChild(signedInfoElement);
            signatureElement.AppendChild(signatureValueElement);
            signatureElement.AppendChild(keyInfoElement);

            root.AppendChild(signatureElement);
            return document.OuterXml;
        }

        /// <summary>
        /// Writes invalid elements to the signature node in the token
        /// </summary>
        /// <param name="document"></param>
        /// <param name="elementName"></param>
        /// <param name="signatureNamespace"></param>
        /// <returns>XmlElement</returns>
        private static XmlElement WriteInvalidSignatureElements(XmlDocument document, string elementName, string signatureNamespace)
        {
            string invalidAlgorithm = "http://www.google.com";

            XmlElement xmlElement = document.CreateElement(elementName, signatureNamespace);
            xmlElement.SetAttribute("Algorithm", invalidAlgorithm);
            return xmlElement;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationCmd\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AccountCreationCmd")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("7367639f-10fc-4e51-810d-7a87b03b168f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationUI\Form1.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Configuration;
using System.Diagnostics;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Framework;
using LiveN.Test.Common.Forms;


namespace AccountCreationUI
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            (Trace.Listeners["textboxVerbose"] as TextBoxTraceListener).TextBox = this.LogResults;
            (Trace.Listeners["textbox"] as TextBoxTraceListener).TextBox = this.LogResults;        
        }

        private void createRUButton_Click(object sender, EventArgs e)
        {

            EnvironmentElement env = Config.EnvironmentSettings.Environments[environmentListRU.Text.ToString()];
            int numberOfUsers = Int32.Parse(numberOfUsersTB.Text);
            int numberOfUsersCreated = 0;
            outputRUTB.Visible = true;
            clearRUOutput.Visible = true;
            if (numberOfUsers <= 0)
            {
                outputRUTB.AppendText("\n");
                outputRUTB.AppendText("Number of accounts must be greateer than or equal to 1.\n");
                createRUStatus.BackColor = Color.Firebrick;
                createRUStatus.Text = "Account creation failed.";
                outputRUTB.Refresh();
                createRUStatus.Refresh(); 
                return;
            }
            outputRUTB.AppendText("\n");
            outputRUTB.AppendText("Creating " + numberOfUsersTB.Text.ToString() + " users in " + env.Name + " ...\n");
            outputRUTB.AppendText("\n");
            createRUStatus.BackColor = Color.BurlyWood;
            createRUStatus.Text = "Account creation in progress";
            createRUStatus.Visible = true;
            outputRUTB.Refresh();
            createRUStatus.Refresh();
            try
            {
                XboxLive xboxClient = new XboxLive(env.XuacsSettings.XuacsUrl, env.XuacsSettings.ClientCertSubject, env.XuacsSettings.Timeout, env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject, env.WindowsLiveIDSettings.LiveIdServiceTarget, env.WindowsLiveIDSettings.Policy, env.WindowsLiveIDSettings.Environment, env.StsSettings.PlatformType, env.StsSettings.TitleId, env.StsSettings.TitleVersion, env.StsSettings.ClientVersion);
                XboxLiveAccount user = null;

                if (string.IsNullOrEmpty(AcctPrfx.Text))
                {
                    for (numberOfUsersCreated = 0; numberOfUsersCreated < numberOfUsers; numberOfUsersCreated++)
                    {
                        user = xboxClient.CreateWlidAndXblAccount();
                        outputRUTB.AppendText("User Name = " + user.MemberName + "\n");
                        outputRUTB.AppendText("Password = " + user.Password + "\n");
                        outputRUTB.AppendText("Gamertag = " + user.GamerTag + "\n");
                        outputRUTB.AppendText("Xuid= " + user.Xuid + "\n");
                        outputRUTB.AppendText("\n");
                        outputRUTB.Refresh();
                    }
                    createRUStatus.BackColor = Color.LimeGreen;
                    outputRUTB.AppendText("Accounts created successfully!\n");
                    outputRUTB.AppendText("\n");
                    outputRUTB.AppendText("\n");
                    createRUStatus.Text = "Accounts created successfully!";
                }
                else
                {               
                  //creating users with predefined account name prefix and consecutive int attached , starting at 1
                    for (numberOfUsersCreated = 0; numberOfUsersCreated < numberOfUsers; numberOfUsersCreated++)
                    {
                        try
                        {
                            user = xboxClient.CreateWlidAndXblAccount(AcctPrfx.Text + (numberOfUsersCreated + 1).ToString() + "@live-int.com",
                                                                      "password",
                                                                      AcctPrfx.Text + (numberOfUsersCreated + 1).ToString());
                            outputRUTB.AppendText("User Name = " + user.MemberName + "\n");
                            outputRUTB.AppendText("Password = " + user.Password + "\n");
                            outputRUTB.AppendText("Gamertag = " + user.GamerTag + "\n");
                            outputRUTB.AppendText("Xuid= " + user.Xuid + "\n");
                            outputRUTB.AppendText("\n");
                            outputRUTB.Refresh();
                        }
                        catch (Exception ex)
                        {
                            string LoginTKT = null;
                            Authorization auth = new Authorization(env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject);
                            try
                            {
                                LoginTKT = auth.GetLoginTicket(AcctPrfx.Text + (numberOfUsersCreated + 1).ToString() + "@live-int.com",
                                                                             "password",
                                                                             env.WindowsLiveIDSettings.LiveIdServiceTarget,
                                                                             env.WindowsLiveIDSettings.Policy,
                                                                             env.WindowsLiveIDSettings.Environment);
                            }
                            catch(Exception expt)
                            {
                                outputRUTB.AppendText(expt.Message);
                            }

                            if (string.IsNullOrEmpty(LoginTKT))
                            {
                                throw ex;

                            }
                            else
                            {
                                outputRUTB.AppendText("User Name = " + AcctPrfx.Text + (numberOfUsersCreated + 1).ToString() + "@live-int.com " + " is an existing alias that is already created \n");
                                outputRUTB.AppendText("User Name = " + AcctPrfx.Text + (numberOfUsersCreated + 1).ToString() + "@live-int.com" + "\n");
                                outputRUTB.AppendText("Password = " + "password" + "\n");
                                outputRUTB.AppendText("Gamertag = " + AcctPrfx.Text + (numberOfUsersCreated + 1).ToString() + "\n");
                                outputRUTB.AppendText("\n");
                                outputRUTB.Refresh();
                            }
                        }
                    }
                    createRUStatus.BackColor = Color.LimeGreen;
                    outputRUTB.AppendText("Accounts created successfully!\n");
                    outputRUTB.AppendText("\n");
                    outputRUTB.AppendText("\n");
                    createRUStatus.Text = "Accounts created successfully!";
                    
                }
            }
            catch(Exception ex)
            {
                if (numberOfUsersCreated == 0)
                {
                    createRUStatus.BackColor = Color.Firebrick;
                    createRUStatus.Text = "Account creation failed.";
                }
                else
                {
                    createRUStatus.BackColor = Color.LightCoral;
                    createRUStatus.Text = "Account creation failed partially.";
                }
                outputRUTB.AppendText("\n"); 
                outputRUTB.AppendText("Created " + numberOfUsersCreated + " of the " + numberOfUsers + " accounts in " +  env.Name + ".\n ");
                outputRUTB.AppendText("\n");
                outputRUTB.AppendText("\n");
                outputRUTB.AppendText(ex.Message + "\n");
                outputRUTB.AppendText("\n");
                outputRUTB.AppendText("\n"); 
                outputRUTB.AppendText("StackTrace:");
                outputRUTB.AppendText(ex.StackTrace + "\n");
                outputRUTB.AppendText("Source:");
                outputRUTB.AppendText(ex.Source + "\n");
                outputRUTB.AppendText("\n");
                outputRUTB.AppendText("\n");
                if (ex.InnerException != null)
                {
                    outputRUTB.AppendText("Inner Exception:");
                    outputRUTB.AppendText(ex.InnerException.Message + "\n");
                    outputRUTB.AppendText("Source:");
                    outputRUTB.AppendText(ex.InnerException.Source + "\n");
                    outputRUTB.AppendText("\nInner Exception stack trace:");
                    outputRUTB.AppendText(ex.InnerException.StackTrace);
                    outputRUTB.AppendText("\n");
                    outputRUTB.AppendText("\n");
                }
                createRUStatus.Refresh();
                outputRUTB.Refresh();
            }
        }

        private void splitContainer2_Panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void createNUButton_Click(object sender, EventArgs e)
        {
            outputNUTB.Visible = true;
            clearNUOutput.Visible = true;
            //if (string.IsNullOrEmpty(usernameTB.Text.ToString()) || string.IsNullOrEmpty(passwordTB.Text.ToString()) || string.IsNullOrEmpty(gamertagTB.Text.ToString()))
            //{
            //    outputNUTB.AppendText("\n");
            //    outputNUTB.AppendText("Please populate all the fields.\n");
            //    outputNUTB.AppendText("You can also use the other tab to create random users without specifying user details.\n");
            //    return;
            //}

            EnvironmentElement env = Config.EnvironmentSettings.Environments[environmentListNU.Text.ToString()];
            outputNUTB.AppendText("Creating user in " + env.Name + " ...\n");
            outputNUTB.AppendText("\n");
            outputNUTB.Refresh();
            createNUStatus.BackColor = Color.BurlyWood;
            createNUStatus.Text = "Account creation in progress";
            createNUStatus.Visible = true;
            createNUStatus.Refresh();
            try
            {
                XboxLive xboxClient = new XboxLive(env.XuacsSettings.XuacsUrl, env.XuacsSettings.ClientCertSubject, env.XuacsSettings.Timeout, env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject, env.WindowsLiveIDSettings.LiveIdServiceTarget, env.WindowsLiveIDSettings.Policy, env.WindowsLiveIDSettings.Environment, env.StsSettings.PlatformType, env.StsSettings.TitleId, env.StsSettings.TitleVersion, env.StsSettings.ClientVersion);
                XboxLiveAccount account = xboxClient.CreateWlidAndXblAccount("mpint2test1@live-int.com", "password", "hUhRrtEBXFS");
                outputNUTB.AppendText("User Created Successfully!\n");
                outputNUTB.AppendText("\nUser Name = " + account.MemberName + "\n");
                outputNUTB.AppendText("\nPassword = " + account.Password + "\n");
                outputNUTB.AppendText("\nGamertag = " + account.GamerTag + "\n");
                outputNUTB.AppendText("\nXuid= " + account.Xuid + "\n");
                outputNUTB.AppendText("\n");
                createNUStatus.BackColor = Color.DarkGreen;
                createNUStatus.Text = "Account created successfully!";
                createNUStatus.Refresh();
                outputNUTB.Refresh();
            }
            catch (Exception ex)
            {
                createNUStatus.BackColor = Color.Firebrick;
                createNUStatus.Text = "Account creation failed.";
                outputNUTB.AppendText("\n");
                outputNUTB.AppendText("Failed to create user.\n ");
                outputNUTB.AppendText("\n");
                outputNUTB.AppendText("\n");
                outputNUTB.AppendText(ex.Message + "\n");
                outputNUTB.AppendText("\n");
                outputNUTB.AppendText("\n");
                outputNUTB.AppendText("StackTrace:");
                outputNUTB.AppendText(ex.StackTrace + "\n");
                outputNUTB.AppendText("Source:");
                outputNUTB.AppendText(ex.Source + "\n");
                outputNUTB.AppendText("\n");
                outputNUTB.AppendText("\n");
                if (ex.InnerException != null)
                {
                    outputNUTB.AppendText("Inner Exception:");
                    outputNUTB.AppendText(ex.InnerException.Message + "\n");
                    outputNUTB.AppendText("Source:");
                    outputNUTB.AppendText(ex.InnerException.Source + "\n");
                    outputNUTB.AppendText("\nInner Exception stack trace:");
                    outputNUTB.AppendText(ex.InnerException.StackTrace);
                    outputNUTB.AppendText("\n");
                    outputNUTB.AppendText("\n");
                }
                    createNUStatus.Refresh();
                    outputNUTB.Refresh();
            }
        }

        private void mp(object sender, EventArgs e)
        {

        }

        private void clearRUOutput_Click(object sender, EventArgs e)
        {
            outputRUTB.ResetText();
            outputRUTB.Refresh();
        }

        private void clearNUOutput_Click(object sender, EventArgs e)
        {
            outputNUTB.ResetText();
            outputNUTB.Refresh();
        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void CreateRUTab_Click(object sender, EventArgs e)
        {

        }

        private void splitContainer1_Panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void LogResults_TextChanged(object sender, EventArgs e)
        {

        }

       
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationUI\Form1.Designer.cs ===
﻿namespace AccountCreationUI
{
    partial class Form1
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.CreateNUTab = new System.Windows.Forms.TabPage();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.label5 = new System.Windows.Forms.Label();
            this.createNUButton = new System.Windows.Forms.Button();
            this.gamertagTB = new System.Windows.Forms.TextBox();
            this.passwordTB = new System.Windows.Forms.TextBox();
            this.usernameTB = new System.Windows.Forms.TextBox();
            this.environmentListNU = new System.Windows.Forms.ComboBox();
            this.label4 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.clearNUOutput = new System.Windows.Forms.Button();
            this.createNUStatus = new System.Windows.Forms.Label();
            this.outputNUTB = new System.Windows.Forms.TextBox();
            this.CreateRUTab = new System.Windows.Forms.TabPage();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.AcctPrfx = new System.Windows.Forms.TextBox();
            this.AccountPrefix = new System.Windows.Forms.Label();
            this.createRUButton = new System.Windows.Forms.Button();
            this.numberOfUsersTB = new System.Windows.Forms.TextBox();
            this.environmentListRU = new System.Windows.Forms.ComboBox();
            this.label7 = new System.Windows.Forms.Label();
            this.label8 = new System.Windows.Forms.Label();
            this.clearRUOutput = new System.Windows.Forms.Button();
            this.createRUStatus = new System.Windows.Forms.Label();
            this.outputRUTB = new System.Windows.Forms.TextBox();
            this.OutPut = new System.Windows.Forms.TabControl();
            this.LogResult = new System.Windows.Forms.TabPage();
            this.LogResults = new System.Windows.Forms.TextBox();
            this.CreateNUTab.SuspendLayout();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            this.CreateRUTab.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            this.OutPut.SuspendLayout();
            this.LogResult.SuspendLayout();
            this.SuspendLayout();
            // 
            // CreateNUTab
            // 
            this.CreateNUTab.Controls.Add(this.splitContainer1);
            this.CreateNUTab.Location = new System.Drawing.Point(4, 22);
            this.CreateNUTab.Name = "CreateNUTab";
            this.CreateNUTab.Padding = new System.Windows.Forms.Padding(3);
            this.CreateNUTab.Size = new System.Drawing.Size(853, 348);
            this.CreateNUTab.TabIndex = 0;
            this.CreateNUTab.Text = "Create Named Users";
            this.CreateNUTab.UseVisualStyleBackColor = true;
            // 
            // splitContainer1
            // 
            this.splitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer1.Location = new System.Drawing.Point(3, 3);
            this.splitContainer1.Name = "splitContainer1";
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.label5);
            this.splitContainer1.Panel1.Controls.Add(this.createNUButton);
            this.splitContainer1.Panel1.Controls.Add(this.gamertagTB);
            this.splitContainer1.Panel1.Controls.Add(this.passwordTB);
            this.splitContainer1.Panel1.Controls.Add(this.usernameTB);
            this.splitContainer1.Panel1.Controls.Add(this.environmentListNU);
            this.splitContainer1.Panel1.Controls.Add(this.label4);
            this.splitContainer1.Panel1.Controls.Add(this.label3);
            this.splitContainer1.Panel1.Controls.Add(this.label2);
            this.splitContainer1.Panel1.Controls.Add(this.label1);
            this.splitContainer1.Panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.splitContainer1_Panel1_Paint);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.clearNUOutput);
            this.splitContainer1.Panel2.Controls.Add(this.createNUStatus);
            this.splitContainer1.Panel2.Controls.Add(this.outputNUTB);
            this.splitContainer1.Size = new System.Drawing.Size(847, 342);
            this.splitContainer1.SplitterDistance = 309;
            this.splitContainer1.TabIndex = 0;
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(232, 59);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(71, 13);
            this.label5.TabIndex = 9;
            this.label5.Text = "@live-int.com";
            // 
            // createNUButton
            // 
            this.createNUButton.Location = new System.Drawing.Point(71, 172);
            this.createNUButton.Name = "createNUButton";
            this.createNUButton.Size = new System.Drawing.Size(75, 23);
            this.createNUButton.TabIndex = 8;
            this.createNUButton.Text = "Creat";
            this.createNUButton.UseVisualStyleBackColor = true;
            this.createNUButton.Click += new System.EventHandler(this.createNUButton_Click);
            // 
            // gamertagTB
            // 
            this.gamertagTB.Location = new System.Drawing.Point(129, 119);
            this.gamertagTB.Name = "gamertagTB";
            this.gamertagTB.Size = new System.Drawing.Size(100, 20);
            this.gamertagTB.TabIndex = 7;
            // 
            // passwordTB
            // 
            this.passwordTB.Location = new System.Drawing.Point(129, 88);
            this.passwordTB.Name = "passwordTB";
            this.passwordTB.Size = new System.Drawing.Size(100, 20);
            this.passwordTB.TabIndex = 6;
            // 
            // usernameTB
            // 
            this.usernameTB.Location = new System.Drawing.Point(129, 57);
            this.usernameTB.Name = "usernameTB";
            this.usernameTB.Size = new System.Drawing.Size(100, 20);
            this.usernameTB.TabIndex = 5;
            this.usernameTB.Click += new System.EventHandler(this.mp);
            // 
            // environmentListNU
            // 
            this.environmentListNU.FormattingEnabled = true;
            this.environmentListNU.Items.AddRange(new object[] {
            "dev",
            "testnet",
            "int2",
            "PartnerNet",
            "Airlock_LEST",
            "Airlock_LEET",
            "storax"});
            this.environmentListNU.Location = new System.Drawing.Point(129, 30);
            this.environmentListNU.Name = "environmentListNU";
            this.environmentListNU.Size = new System.Drawing.Size(121, 21);
            this.environmentListNU.TabIndex = 4;
            this.environmentListNU.Text = "testnet";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(25, 119);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(53, 13);
            this.label4.TabIndex = 3;
            this.label4.Text = "Gamertag";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(25, 91);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(53, 13);
            this.label3.TabIndex = 2;
            this.label3.Text = "Password";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(25, 60);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(60, 13);
            this.label2.TabIndex = 1;
            this.label2.Text = "User Name";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(25, 30);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(66, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "Environment";
            // 
            // clearNUOutput
            // 
            this.clearNUOutput.Location = new System.Drawing.Point(403, 291);
            this.clearNUOutput.Name = "clearNUOutput";
            this.clearNUOutput.Size = new System.Drawing.Size(109, 23);
            this.clearNUOutput.TabIndex = 7;
            this.clearNUOutput.Text = "Clear output screen";
            this.clearNUOutput.UseVisualStyleBackColor = true;
            this.clearNUOutput.Visible = false;
            this.clearNUOutput.Click += new System.EventHandler(this.clearNUOutput_Click);
            // 
            // createNUStatus
            // 
            this.createNUStatus.AutoSize = true;
            this.createNUStatus.Location = new System.Drawing.Point(179, 291);
            this.createNUStatus.Name = "createNUStatus";
            this.createNUStatus.Size = new System.Drawing.Size(35, 13);
            this.createNUStatus.TabIndex = 5;
            this.createNUStatus.Text = "label5";
            this.createNUStatus.Visible = false;
            // 
            // outputNUTB
            // 
            this.outputNUTB.Location = new System.Drawing.Point(3, 3);
            this.outputNUTB.Multiline = true;
            this.outputNUTB.Name = "outputNUTB";
            this.outputNUTB.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.outputNUTB.Size = new System.Drawing.Size(515, 275);
            this.outputNUTB.TabIndex = 0;
            this.outputNUTB.Visible = false;
            // 
            // CreateRUTab
            // 
            this.CreateRUTab.Controls.Add(this.splitContainer2);
            this.CreateRUTab.Location = new System.Drawing.Point(4, 22);
            this.CreateRUTab.Name = "CreateRUTab";
            this.CreateRUTab.Padding = new System.Windows.Forms.Padding(3);
            this.CreateRUTab.Size = new System.Drawing.Size(853, 348);
            this.CreateRUTab.TabIndex = 1;
            this.CreateRUTab.Text = "Create Random Users";
            this.CreateRUTab.UseVisualStyleBackColor = true;
            this.CreateRUTab.Click += new System.EventHandler(this.CreateRUTab_Click);
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 3);
            this.splitContainer2.Name = "splitContainer2";
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.AcctPrfx);
            this.splitContainer2.Panel1.Controls.Add(this.AccountPrefix);
            this.splitContainer2.Panel1.Controls.Add(this.createRUButton);
            this.splitContainer2.Panel1.Controls.Add(this.numberOfUsersTB);
            this.splitContainer2.Panel1.Controls.Add(this.environmentListRU);
            this.splitContainer2.Panel1.Controls.Add(this.label7);
            this.splitContainer2.Panel1.Controls.Add(this.label8);
            this.splitContainer2.Panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.splitContainer2_Panel1_Paint);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.clearRUOutput);
            this.splitContainer2.Panel2.Controls.Add(this.createRUStatus);
            this.splitContainer2.Panel2.Controls.Add(this.outputRUTB);
            this.splitContainer2.Size = new System.Drawing.Size(847, 342);
            this.splitContainer2.SplitterDistance = 346;
            this.splitContainer2.TabIndex = 0;
            // 
            // AcctPrfx
            // 
            this.AcctPrfx.Location = new System.Drawing.Point(168, 97);
            this.AcctPrfx.Name = "AcctPrfx";
            this.AcctPrfx.Size = new System.Drawing.Size(159, 20);
            this.AcctPrfx.TabIndex = 18;
            // 
            // AccountPrefix
            // 
            this.AccountPrefix.AutoSize = true;
            this.AccountPrefix.Location = new System.Drawing.Point(5, 97);
            this.AccountPrefix.Name = "AccountPrefix";
            this.AccountPrefix.Size = new System.Drawing.Size(150, 13);
            this.AccountPrefix.TabIndex = 2;
            this.AccountPrefix.Text = "Account Name Prefix(optional)";
            this.AccountPrefix.Click += new System.EventHandler(this.label5_Click);
            // 
            // createRUButton
            // 
            this.createRUButton.BackColor = System.Drawing.SystemColors.Control;
            this.createRUButton.Location = new System.Drawing.Point(77, 159);
            this.createRUButton.Name = "createRUButton";
            this.createRUButton.Size = new System.Drawing.Size(75, 23);
            this.createRUButton.TabIndex = 17;
            this.createRUButton.Text = "Creat";
            this.createRUButton.UseVisualStyleBackColor = false;
            this.createRUButton.Click += new System.EventHandler(this.createRUButton_Click);
            // 
            // numberOfUsersTB
            // 
            this.numberOfUsersTB.Location = new System.Drawing.Point(171, 59);
            this.numberOfUsersTB.Name = "numberOfUsersTB";
            this.numberOfUsersTB.Size = new System.Drawing.Size(100, 20);
            this.numberOfUsersTB.TabIndex = 14;
            this.numberOfUsersTB.Text = "1";
            // 
            // environmentListRU
            // 
            this.environmentListRU.FormattingEnabled = true;
            this.environmentListRU.Items.AddRange(new object[] {
            "dev",
            "testnet",
            "int2",
            "PartnerNet",
            "Airlock_LEST",
            "Airlock_LEET",
            "storax"});
            this.environmentListRU.Location = new System.Drawing.Point(171, 29);
            this.environmentListRU.Name = "environmentListRU";
            this.environmentListRU.Size = new System.Drawing.Size(121, 21);
            this.environmentListRU.TabIndex = 13;
            this.environmentListRU.Text = "testnet";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(5, 62);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(57, 13);
            this.label7.TabIndex = 10;
            this.label7.Text = "How many";
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(5, 29);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(66, 13);
            this.label8.TabIndex = 9;
            this.label8.Text = "Environment";
            // 
            // clearRUOutput
            // 
            this.clearRUOutput.Location = new System.Drawing.Point(388, 288);
            this.clearRUOutput.Name = "clearRUOutput";
            this.clearRUOutput.Size = new System.Drawing.Size(109, 23);
            this.clearRUOutput.TabIndex = 6;
            this.clearRUOutput.Text = "Clear output screen";
            this.clearRUOutput.UseVisualStyleBackColor = true;
            this.clearRUOutput.Visible = false;
            this.clearRUOutput.Click += new System.EventHandler(this.clearRUOutput_Click);
            // 
            // createRUStatus
            // 
            this.createRUStatus.AutoSize = true;
            this.createRUStatus.ForeColor = System.Drawing.Color.Black;
            this.createRUStatus.Location = new System.Drawing.Point(191, 293);
            this.createRUStatus.Name = "createRUStatus";
            this.createRUStatus.Size = new System.Drawing.Size(35, 13);
            this.createRUStatus.TabIndex = 5;
            this.createRUStatus.Text = "label5";
            this.createRUStatus.Visible = false;
            // 
            // outputRUTB
            // 
            this.outputRUTB.Location = new System.Drawing.Point(3, 3);
            this.outputRUTB.Multiline = true;
            this.outputRUTB.Name = "outputRUTB";
            this.outputRUTB.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.outputRUTB.Size = new System.Drawing.Size(497, 269);
            this.outputRUTB.TabIndex = 1;
            this.outputRUTB.Visible = false;
            // 
            // OutPut
            // 
            this.OutPut.Controls.Add(this.CreateRUTab);
            this.OutPut.Controls.Add(this.CreateNUTab);
            this.OutPut.Controls.Add(this.LogResult);
            this.OutPut.Location = new System.Drawing.Point(0, 0);
            this.OutPut.Name = "OutPut";
            this.OutPut.SelectedIndex = 0;
            this.OutPut.Size = new System.Drawing.Size(861, 374);
            this.OutPut.SizeMode = System.Windows.Forms.TabSizeMode.FillToRight;
            this.OutPut.TabIndex = 1;
            // 
            // LogResult
            // 
            this.LogResult.Controls.Add(this.LogResults);
            this.LogResult.Location = new System.Drawing.Point(4, 22);
            this.LogResult.Name = "LogResult";
            this.LogResult.Padding = new System.Windows.Forms.Padding(3);
            this.LogResult.Size = new System.Drawing.Size(853, 348);
            this.LogResult.TabIndex = 2;
            this.LogResult.Text = "Logs";
            this.LogResult.UseVisualStyleBackColor = true;
            // 
            // LogResults
            // 
            this.LogResults.Dock = System.Windows.Forms.DockStyle.Fill;
            this.LogResults.Location = new System.Drawing.Point(3, 3);
            this.LogResults.Multiline = true;
            this.LogResults.Name = "LogResults";
            this.LogResults.ReadOnly = true;
            this.LogResults.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.LogResults.Size = new System.Drawing.Size(847, 342);
            this.LogResults.TabIndex = 0;
            this.LogResults.TextChanged += new System.EventHandler(this.LogResults_TextChanged);
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(882, 386);
            this.Controls.Add(this.OutPut);
            this.Name = "Form1";
            this.Text = "Account Creation Tool";
            this.CreateNUTab.ResumeLayout(false);
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel1.PerformLayout();
            this.splitContainer1.Panel2.ResumeLayout(false);
            this.splitContainer1.Panel2.PerformLayout();
            this.splitContainer1.ResumeLayout(false);
            this.CreateRUTab.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel1.PerformLayout();
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.Panel2.PerformLayout();
            this.splitContainer2.ResumeLayout(false);
            this.OutPut.ResumeLayout(false);
            this.LogResult.ResumeLayout(false);
            this.LogResult.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.TabPage CreateNUTab;
        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.Button createNUButton;
        private System.Windows.Forms.TextBox gamertagTB;
        private System.Windows.Forms.TextBox passwordTB;
        private System.Windows.Forms.TextBox usernameTB;
        private System.Windows.Forms.ComboBox environmentListNU;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox outputNUTB;
        private System.Windows.Forms.TabPage CreateRUTab;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.Button createRUButton;
        private System.Windows.Forms.TextBox numberOfUsersTB;
        private System.Windows.Forms.ComboBox environmentListRU;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TextBox outputRUTB;
        private System.Windows.Forms.TabControl OutPut;
        private System.Windows.Forms.Label createNUStatus;
        private System.Windows.Forms.Label createRUStatus;
        private System.Windows.Forms.Button clearNUOutput;
        private System.Windows.Forms.Button clearRUOutput;
        private System.Windows.Forms.Label AccountPrefix;
        private System.Windows.Forms.TextBox AcctPrfx;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.TabPage LogResult;
        private System.Windows.Forms.TextBox LogResults;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationUI\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace AccountCreationUI
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\ComponentLibrary\ComponentLibrary\Attributes\PluginComponentAttribute.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Microsoft.Live.AddressBook.Test.ComponentLibrary.Attributes
{
    [AttributeUsage(AttributeTargets.Class)]
    public sealed class PluginComponentAttribute : Attribute
    {
        public PluginComponentAttribute(string description)
        {
            componentDescription = description;
        }

        private string componentDescription;

        public string Description
        {
            get { return componentDescription; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\ComponentLibrary\ComponentLibrary\Interfaces\PluginInterface.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Microsoft.Live.AddressBook.Test.ComponentLibrary.Interfaces
{
    public interface IPluginInterface
    {
        void SetEnvironment(string environmentName); //interfaces can not have constructors, but this acts like one. it is called right after an instance is created.
        bool TestComponent();
        string ShortServiceName
        {
            get;
        }
        string ServiceName
        {
            get;
        }
        string ClientMessage
        {
            get;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationUI\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AccountCreationUI")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f10d1ab5-95ae-4b31-bf56-20163eedaff7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationUI\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountCreationUI.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\AccountCreation\AccountCreationUI\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountCreationUI.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AccountCreationUI.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\ComponentLibrary\ComponentLibrary\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ComponentLibrary")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ComponentLibrary")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("e521e94c-922f-4947-a65f-410e82016d98")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\EnvMonitorWebService\Availibility2.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Live.AddressBook.Test.Monitoring {
    
    
    public partial class Availability2 {
        
        /// <summary>
        /// Head1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlHead Head1;
        
        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
        
        /// <summary>
        /// FolderList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList FolderList;
        
        /// <summary>
        /// DailySummary control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label DailySummary;
        
        /// <summary>
        /// AvailabilityTableDay control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Table AvailabilityTableDay;
        
        /// <summary>
        /// AvailabilityTable control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Table AvailabilityTable;
        
        /// <summary>
        /// TableRow1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TableRow TableRow1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\EnvMonitorWebService\Availibility2.aspx.cs ===
﻿using System;
using System.IO;
using System.Web.UI.WebControls;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public partial class Availability2 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                FillFolderSelect();
                ShowAvailability();
            }
        }

        private void FillFolderSelect()
        {
            string logFolder = GlobalVars.AvailabilityLogsPath;
            string[] logFolders = Directory.GetDirectories(logFolder);

            foreach (string folder in logFolders)
            {
                ListItem item = new ListItem(Path.GetFileName(folder), folder);

                FolderList.Items.Add(item);
            }

            FolderList.SelectedIndex = FolderList.Items.IndexOf(FolderList.Items.FindByText("PROD"));
        }

        private void ShowAvailability()
        {
            string site = FolderList.SelectedValue;

            WebUtil.WriteLog("Show availability start " + site);

            if (GlobalVars.LastUpdatedAvailability.ContainsKey(site))
            {
                WebUtil.WriteLog("LastUpdated == " + GlobalVars.LastUpdatedAvailability[site]);
            }

            WebUtil.WriteLog("RowFound == " + GlobalVars.Tables.ContainsKey(site));

            GlobalVars.RefreshDataIfNeeded(site);

            WebUtil.WriteLog("Showing availability for " + site);

            AvailabilityTable.Rows.AddRange(GlobalVars.Tables[site]);
        }

        protected void FolderList_SelectedIndexChanged(object sender, EventArgs e)
        {
            ShowAvailability();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\EnvMonitorWebService\Default.aspx.cs ===
﻿using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;

namespace Microsoft.Live.AddressBook.Test.MonitorWebService
{
    public partial class Default : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\EnvMonitorWebService\Default.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Live.AddressBook.Test.MonitorWebService {
    
    
    public partial class Default {
        
        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\EnvMonitorWebService\Global.asax.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Globalization;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public static class GlobalVars
    {
        private static Dictionary<string, DateTime> lastUpdatedAvailability = new Dictionary<string, DateTime>();
        public static Dictionary<string, DateTime> LastUpdatedAvailability
        {
            get
            {
                return lastUpdatedAvailability;
            }
        }
        public static string SiteStatus
        {
            get
            {
                if (WebUtil.IsDataStale(lastUpdated) /*|| true*/) //vikhuran
                {
                    lock (readLock)
                    {
                        if (WebUtil.IsDataStale(lastUpdated) /*|| true*/)//vikhuran
                        {
                            siteStatus = File.ReadAllText(StatusXmlFile);

                            lastUpdated = DateTime.Now;
                        }
                    }
                }

                return siteStatus;
            }
        }

        private static DateTime lastUpdated;
        private static string siteStatus;
        private static object readLock = new object();
        private static Dictionary<string, TableRow[]> _tableRows = new Dictionary<string, TableRow[]>();
        private static Dictionary<string, Dictionary<DateTime, bool>> _dailyResults;

        private static Dictionary<string, string> shortNameDictionary = new Dictionary<string, string>()
        {
            {"Authentication", "auth" },
            {"UDSPartner", "part" },
            {"Notifications", "noti" },
            {"Spotlight", "spot" },
            {"Multiplayer", "multi" },
            {"AvatarRead", "avtr read" },
            {"AvatarWrite", "avtr wrte" },
            {"AvatarCloset", "avtr clst" },
            {"JobsDiagnosticPrivate", "Jobs" },
            {"LiveIDPrivate", "LiveID" },
            {"ProfileSoapPrivate", "Profile" },
            {"PubSubDiagnosticPrivate", "PubSub" },
            {"ReplicationLatencyPrivate", "Repl" },
            {"StorageDiagnosticPrivate", "HDD" },
            {"StorageServiceDiagnosticPrivate", "Storage" },
            {"SupSoapPrivate", "SUP" },
            {"WCFDiagnosticPrivate", "WCF" },
        };

        public static Dictionary<string, TableRow[]> Tables
        {
            get { return _tableRows; }
        }

        public static Dictionary<string, Dictionary<DateTime, bool>> DailyResults
        {
            get { return _dailyResults; }
        }

        //public static SiteMonitor SiteMonitor1 = new SiteMonitor();
        public const int RefreshIntervalInMinutes = 5;
        public const string Url = "http://abch/SiteMonitor/SiteStatus.ashx";
        private static Mutex globalMutex = new Mutex();
        public static Mutex GlobalMutex
        {
            get
            {
                return globalMutex;
            }
        }
        private static Mutex logMutex = new Mutex();
        public static Mutex LogMutex
        {
            get
            {
                return logMutex;
            }
        }

        public static string HomeDirectory
        {
            get
            {
                return System.AppDomain.CurrentDomain.BaseDirectory;
            }
        }

        public static string StatusXmlFile
        {
            get
            {
                //deployment_variant
                return System.Configuration.ConfigurationManager.AppSettings["SiteStatusFile"];
            }
        }

        public static string LogFile
        {
            get
            {
                return Path.Combine(HomeDirectory, "Log.txt");
            }
        }

        public static string AvailabilityLogsPath
        {
            get
            {
                    return System.Configuration.ConfigurationManager.AppSettings["LogsLocation"];
            }
        }

        public static string[] SiteInterfaces
        {
            get
            {
                return System.Configuration.ConfigurationManager.AppSettings["SiteInterfaces"].Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
            }
        }

        public static string SiteConfigurationXml
        {
            get
            {
                    return Path.Combine(System.Configuration.ConfigurationManager.AppSettings["ServiceLocation"], "Configuration.xml");
            }
        }

        public static string MessagesXml
        {
            get
            {
                    return System.Configuration.ConfigurationManager.AppSettings["MessagesXml"];
            }
        }

        public static string MessageXmlContent
        {
            get
            {
                if (_messageXmlContent == null)
                {
                    if (File.Exists(MessagesXml))
                    {
                        _messageXmlContent = File.ReadAllText(MessagesXml);
                    }
                }

                return _messageXmlContent;
            }
            set
            {
                _messageXmlContent = value;
            }
        }

        private static string _messageXmlContent;
        private static int _pollingPeriod; // milliseconds between each poll

        public static int PollInterval
        {
            get
            {
                int temp = 120000;// Convert.ToInt32(WebUtil.ReadSetting("PollInterval"));

                if (temp != 0)
                {
                    _pollingPeriod = temp;
                }

                return _pollingPeriod;
            }
        }

        public static bool IsDataStale(string site)
        {
            return LastUpdatedAvailability[site] < DateTime.Now.AddMinutes(-RefreshIntervalInMinutes);
        }

        public static void RefreshDataIfNeeded(string site)
        {
            if (!LastUpdatedAvailability.ContainsKey(site) ||
                IsDataStale(site) ||
                !Tables.ContainsKey(site))
            {
                WebUtil.WriteLog("Refreshing availability for " + site);
                if (!Tables.ContainsKey(site))
                {
                    WebUtil.WriteLog("Adding value for " + site);
                    Tables.Add(site, GetAvailabilityForSite(site));
                }
                else
                {
                    WebUtil.WriteLog("Assigning value for " + site);
                    Tables[site] = GetAvailabilityForSite(site);
                }

                LastUpdatedAvailability[site] = DateTime.Now;
                WebUtil.WriteLog("LastUpdated = " + LastUpdatedAvailability);
            }
        }

        private static TableRow[] GetAvailabilityForSite(string siteName)
        {
            GlobalVars.MessageXmlContent = null;
            List<TableRow> tableRows = new List<TableRow>();

            try
            {
                WebUtil.WriteLog("GetAvailability: Start " + siteName);

                string[] siteInterfaces = new string[GlobalVars.SiteInterfaces.Length];

                for (int i = 0; i < GlobalVars.SiteInterfaces.Length; i++)
                {
                    siteInterfaces[i] = Path.Combine(Path.GetFullPath(siteName), GlobalVars.SiteInterfaces[i]);
                }

                Dictionary<DateTime, Dictionary<string, double>> values = new Dictionary<DateTime, Dictionary<string, double>>();

                List<DateTime> dates = new List<DateTime>();

                TableCell messageCell = new TableCell();
                TableCell availabilityCell = new TableCell();
                TableCell dateCell = new TableCell();
                TableRow tableRow = new TableRow();

                foreach (string siteInterface in siteInterfaces)
                {
                    if (Directory.Exists(siteInterface))
                    {
                        string[] files = Directory.GetFiles(siteInterface);
                        foreach (string file in files)
                        {
                            DateTime date = WebUtil.ConvertToDateTime(file);
                            double availability = WebUtil.CalculateAvailability(file);

                            if (date != DateTime.MinValue && availability != -1)
                            {
                                if (!values.ContainsKey(date))
                                {
                                    dates.Add(date);
                                    Dictionary<string, double> av = new Dictionary<string, double>();
                                    av.Add(siteInterface, availability);

                                    values.Add(date, av);
                                }
                                else
                                {
                                    values[date].Add(siteInterface, availability);
                                }
                            }
                        }
                    }
                    else
                    {
                        
                    }
                }

                Comparison<DateTime> descending = new Comparison<DateTime>(Comparer);

                dates.Sort(descending);

                //add the titles
                TableRow titles = new TableRow();
                TableCell dateBox = new TableCell();
                dateBox.Text = "Date";
                titles.Cells.Add(dateBox);
                foreach (string component in siteInterfaces)
                {
                    TableCell newComponent = new TableCell();
                    //if (Directory.Exists(component))
                    {
                        string title = component.Substring(component.LastIndexOf("\\") + 1, component.Length - component.LastIndexOf("\\") - 1);
                        if (shortNameDictionary.ContainsKey(title))
                        {
                            newComponent.Text = shortNameDictionary[title];
                        }
                        else
                        {
                            title = title.Replace("a", "");
                            title = title.Replace("e", "");
                            title = title.Replace("i", "");
                            title = title.Replace("o", "");
                            title = title.Replace("u", "");
                            newComponent.Text = title;
                        }
                        titles.Cells.Add(newComponent);
                    }
                }
                TableCell notesBox = new TableCell();
                notesBox.Text = "Notes";
                titles.Cells.Add(notesBox);
                tableRows.Add(titles);

                foreach (DateTime date in dates)
                {
                    tableRow = new TableRow();
                    dateCell = new TableCell();
                    messageCell = new TableCell();

                    dateCell.Text = date.DayOfWeek.ToString().Substring(0, 3) + ", " + date.ToShortDateString();

                    tableRow.Cells.Add(dateCell);

                    foreach (string siteInterface in siteInterfaces)
                    {
                        availabilityCell = new TableCell();
                        availabilityCell.HorizontalAlign = HorizontalAlign.Center;

                        if (values[date].ContainsKey(siteInterface))
                        {
                            int color = Convert.ToInt32(Math.Floor(233 * Math.Abs(50 - values[date][siteInterface]) / 50));

                            if (color < 128)
                            {
                                availabilityCell.ForeColor = System.Drawing.Color.White;
                                availabilityCell.CssClass = "white";
                            }

                            if (values[date][siteInterface] < 50)
                            {
                                availabilityCell.BackColor = System.Drawing.Color.FromArgb(color, 0, 0);
                            }
                            else
                            {
                                availabilityCell.BackColor = System.Drawing.Color.FromArgb(0, color, 0);
                            }

                            availabilityCell.Text = string.Format(
                                CultureInfo.InvariantCulture,
                                "<a href=\"Availability2.aspx?date={1}&site={2}&interface={3}\">{0:0.00}%</a>",
                                values[date][siteInterface],
                                HttpUtility.UrlEncode(date.ToShortDateString()),
                                siteName.Substring(siteName.LastIndexOf(Path.DirectorySeparatorChar) + 1),
                                siteInterface.Substring(siteInterface.LastIndexOf(Path.DirectorySeparatorChar) + 1));
                            availabilityCell.Style.Add(HtmlTextWriterStyle.BackgroundImage, "images/gloss.png");
                            availabilityCell.Style.Add("background-repeat", "repeat-x");
                        }

                        tableRow.Cells.Add(availabilityCell);
                    }

                    if (date.Date == DateTime.Today)
                    {
                        dateCell.Text = "Today";
                        //tableRow.Height = new Unit(100);
                        tableRow.Style.Add(HtmlTextWriterStyle.Height, "30px");
                        tableRow.Font.Bold = true;
                        tableRow.Font.Size = new FontUnit("17px");
                    }

                    Dictionary<string, string> messages = WebUtil.GetMessages(date, Path.GetFileNameWithoutExtension(siteName).ToUpper(), GlobalVars.MessageXmlContent);

                    foreach (string message in messages.Keys)
                    {
                        if (!string.IsNullOrEmpty(messages[message]))
                        {
                            messageCell.Text += "<a target=\"_blank\" href=\"" + messages[message] + "\">" + message + "</a><br/>";
                        }
                        else
                        {
                            messageCell.Text += message + "<br />";
                        }
                    }

                    messageCell.Style.Add(HtmlTextWriterStyle.PaddingLeft, "3px");
                    messageCell.Style.Add(HtmlTextWriterStyle.FontSize, "13px");
                    messageCell.Font.Bold = false;

                    tableRow.Cells.Add(messageCell);
                    tableRow.Height = new Unit(20);
                    tableRows.Add(tableRow);
                }

                return tableRows.ToArray();
            }
            catch (Exception e)
            {
                WebUtil.WriteLog("GetAvailability: " + e.Message + " " + e.StackTrace);
                return tableRows.ToArray();
            }
        }

        private static int Comparer(DateTime a, DateTime b)
        {
            if (b > a)
            {
                return 1;
            }
            else if (b == a)
                return 0;
            else
            {
                return -1;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\EnvMonitorWebService\SiteMonitor.ashx.cs ===
﻿using System.Web;
using System.Web.Services;
using System.Xml;
using System.IO;
using System.Xml.XPath;
using System;
using System.Globalization;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    /// <summary>
    /// Summary description for $codebehindclassname$
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    public class SiteMonitor : IHttpHandler
    {
        public void ProcessRequest(HttpContext context)
        {
            string responseXML = GlobalVars.SiteStatus;
            StringReader sr = new StringReader(responseXML);
            XPathDocument xpathDoc = new XPathDocument(sr);
            XPathNavigator xpathNav = xpathDoc.CreateNavigator();
            XPathNodeIterator nodeReader = xpathNav.Select("SiteList/LastUpdated");
            string lastModified_str = "";
            while (nodeReader.MoveNext())
            {
                lastModified_str = nodeReader.Current.Value;
            }
            DateTime lastModified_DT = DateTime.Parse(lastModified_str, CultureInfo.InvariantCulture);

            if (DateTime.Now.Subtract(lastModified_DT).TotalMinutes > 10)
            {
                //the data is stale
                context.Response.ContentType = "text/plain";
                context.Response.StatusCode = 203;
                string response = "stale data found\n\n\n\n";
                response += responseXML;
                context.Response.Write(response);
                WebUtil.WriteLog(context.Request.LogonUserIdentity.Name  + ":" + context.Request.UserHostAddress + ": Request served BUT DATA IS STALE SO 203 RETURNED(" + lastModified_DT.ToString() + ")");
            }
            else
            {
                //the data is ok
                context.Response.ContentType = "text/xml    ";
                context.Response.Write(responseXML);
                WebUtil.WriteLog(context.Request.LogonUserIdentity.Name + ":" + context.Request.UserHostAddress + ": Request served (" + lastModified_DT.ToString() + ")");
            }
        }

        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\AuthenticationService.cs ===
﻿using System;
using System.Diagnostics;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.Rewards;
using Microsoft.Live.AddressBook.Test.Monitoring;
using System.Collections.Generic;

namespace SiteMonitorNTService
{
    class AuthenticationService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        private RewardsUtil rewardsUtil = null;
        private string player1 = "";
        private string player1Password = "";

        public AuthenticationService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;
            envConfig = Config.EnvironmentSettings.Environments[env];
            rewardsUtil = new RewardsUtil(
                   this.envConfig.RewardsService.ToString(),
                   this.envConfig.StsSettings.StsUrl,
                   this.envConfig.StsSettings.ClientCertSubject,
                   this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
                   this.envConfig.WindowsLiveIDSettings.Policy,
                   this.envConfig.WindowsLiveIDSettings.Environment,
                   this.envConfig.StsSettings.TitleId,
                   this.envConfig.StsSettings.TitleVersion,
                   this.envConfig.StsSettings.PlatformType,
                   this.envConfig.StsSettings.ClientVersion);

            //setup canned users
            player1 = this.envConfig.UserSettings[0].Membername;
            player1Password = this.envConfig.UserSettings[0].Password;

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.Authentication;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get
            {
                return envConfig.StsSettings.StsUrl.ToString() + "\n" +
                    envConfig.WindowsLiveIDSettings.Environment.ToString();
            }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = true;
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                StartApiTimer();
                LogInformation("**GetRpsTicket**");
                string rpsTicket = rewardsUtil.RewardsServiceUtil.AuthorizationCache.GetLoginTicket(
                    player1,
                    player1Password,
                    this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
                    this.envConfig.WindowsLiveIDSettings.Policy,
                    this.envConfig.WindowsLiveIDSettings.Environment);
                if (string.IsNullOrEmpty(rpsTicket))
                {
                    LogError("GetRpsTicket Failed");
                    result = false;
                    return;
                }

                LogInformation("**GetStsUserToken**");
                string userToken = rewardsUtil.RewardsServiceUtil.AuthorizationCache.GetUserToken(player1,
                                                                                               player1Password,
                                                                                                this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
                                                                                                this.envConfig.WindowsLiveIDSettings.Policy,
                                                                                                this.envConfig.WindowsLiveIDSettings.Environment,
                                                                                               this.envConfig.StsSettings.PlatformType,
                                                                                               this.envConfig.StsSettings.TitleId,
                                                                                               this.envConfig.StsSettings.TitleVersion,
                                                                                               this.envConfig.StsSettings.ClientVersion);
                if (string.IsNullOrEmpty(userToken) == true)
                {
                    LogError("GetStsUserToken Failed");
                    result = false;
                    return;
                }

                LogInformation("**GetStsPartnerToken**");
                string partnerToken = rewardsUtil.RewardsServiceUtil.AuthorizationCache.GetPartnerToken(userToken,
                                                                                                       this.envConfig.StsSettings.TitleId,
                                                                                                       this.envConfig.StsSettings.TitleVersion,
                                                                                                       this.envConfig.StsSettings.AudienceUri_UserData);
                if (string.IsNullOrEmpty(partnerToken) == true)
                {
                    LogError("GetStsPartnerToken Failed");
                    result = false;
                    return;
                }

                StopApiTimer();
            }
            catch (Exception e)
            {
                LogExceptionDetail(e);
                SetClientError(e);
                result = false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\EnvMonitorWebService\WebUtil.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.XPath;
using System.Globalization;
using System.Diagnostics.CodeAnalysis;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public static class WebUtil
    {
        public static string NormalizePath(string serverPath)
        {
            return Path.Combine(GlobalVars.HomeDirectory, serverPath);
        }

        public static string ReadSetting(string path)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(GlobalVars.SiteConfigurationXml);

            XmlNode node = doc.DocumentElement.SelectSingleNode(path);

            if (node != null)
                return node.InnerText;
            else
                return string.Empty;
        }

        /// <summary>
        /// This method returns true if the last updated time is older than the
        /// current time minus polling interval.
        /// </summary>
        /// <param name="lastUpdated">The last updated time of the data</param>
        /// <returns>Boolean indicating whether data is fresh or stale</returns>
        public static bool IsDataStale(DateTime lastUpdated)
        {
            // true if we are less than 10 seconds away from the next poll 
            return (DateTime.Now - lastUpdated).TotalMilliseconds > (GlobalVars.PollInterval - 10000);
        }

        /// <summary>
        /// Writes text to a log file (GlobalVars.LogFile)
        /// </summary>
        /// <param name="text">The text to write</param>
        public static void WriteLog(string text)
        {
            FileInfo file = new FileInfo(GlobalVars.LogFile);

            if (file.Exists && file.Length > 1000000)
            {
                file.Delete();
            }

            if (!string.IsNullOrEmpty(text))
            {
                text = "[" + DateTime.Now.ToLongTimeString() + "]    " + text + Environment.NewLine;
            }
            else
            {
                text = Environment.NewLine;
            }

            try
            {
                GlobalVars.LogMutex.WaitOne();
                File.AppendAllText(GlobalVars.LogFile, text);
            }
            catch (Exception e)
            {
                WriteExceptionToEventLog(e, "An exception occurred while writing to log file " + GlobalVars.LogFile, EventLogEntryType.Error);
            }
            finally
            {
                GlobalVars.LogMutex.ReleaseMutex();
            }
        }

        /// <summary>
        /// This methods writes an exception to the event log
        /// </summary>
        /// <param name="e">exception</param>
        /// <param name="text">additional text describing the event</param>
        /// <param name="type">the event type (info, warning, error, etc)</param>
        public static void WriteExceptionToEventLog(Exception exception, string text, System.Diagnostics.EventLogEntryType type)
        {
            string source = "ABCHSiteMonitor2";
            //string log = "Application";
            string eventText = exception.Message + Environment.NewLine + exception.StackTrace + Environment.NewLine + text;

            if (System.Diagnostics.EventLog.SourceExists(source))
                System.Diagnostics.EventLog.WriteEntry(source, eventText, type);
        }

        /// <summary>
        /// This method executes a process given the name of the executable 
        /// and the arguments needed. It allows a timeout of 5 minutes for 
        /// the process.
        /// </summary>
        /// <param name="fileName">The name of the exe</param>
        /// <param name="args">The args for the exe</param>
        public static void ExecuteProcess(string fileName, string args)
        {
            Process p = CreateProcess(fileName, args, false);

            p.Start();

            // allow 5 minutes max
            p.WaitForExit(300000);

            if (!p.HasExited)
            {
                p.Kill();
            }
        }

        public static Dictionary<string, string> GetMessages(DateTime date, string site, string innerXml)
        {
            Dictionary<string, string> messages = new Dictionary<string, string>();

            if (string.IsNullOrEmpty(innerXml))
            {
                return messages;
            }

            XmlDocument doc = new XmlDocument();
            doc.LoadXml(innerXml);

            XmlNodeList nodes = doc.SelectNodes("/Messages/Message");

            foreach (XmlNode node in nodes)
            {
                if (node != null)
                {
                    try
                    {
                        if (Convert.ToDateTime(node["Date"].InnerText, CultureInfo.InvariantCulture) == date && (node["SitesAffected"].InnerText.Contains(site) || node["SitesAffected"].InnerText.Equals("all", StringComparison.CurrentCultureIgnoreCase)))
                        {
                            string link = string.Empty;

                            if (node["Link"] != null)
                            {
                                link = node["Link"].InnerText;
                            }

                            messages.Add(node["Text"].InnerText, link);
                        }
                    }
                    catch (Exception e)
                    {
                        WebUtil.WriteLog("While parsing messages.xml: " + e.Message + " " + e.StackTrace);
                    }
                }
            }

            return messages;
        }

        public static Process CreateProcess(string fileName, string args, bool redirectOutput)
        {
            ProcessStartInfo si = new ProcessStartInfo();
            Process p = new Process();

            si.Arguments = args;
            si.FileName = fileName;
            si.CreateNoWindow = true;
            si.UseShellExecute = false;
            si.WindowStyle = ProcessWindowStyle.Hidden;
            si.ErrorDialog = false;

            if (redirectOutput)
            {
                si.RedirectStandardOutput = true;
                si.RedirectStandardError = true;
                p.EnableRaisingEvents = true;
                p.OutputDataReceived += new DataReceivedEventHandler(OnOutputDataReceived);
            }

            p.StartInfo = si;

            return p;
        }

        private static void OnOutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            Console.WriteLine(e.Data);
        }

        [SuppressMessage("Microsoft.Design", "CA1059:MembersShouldNotExposeCertainConcreteTypes", Target = "CreateAndAppendNode(System.Xml.XmlDocument,System.Xml.XmlNode&amp;,System.String,System.String):System.Void")]
        public static void CreateAndAppendNode(XmlDocument doc, ref XmlNode appendTo, string newNodeName, string newNodeText)
        {
            XmlNode newNode = doc.CreateElement(newNodeName);
            newNode.InnerText = newNodeText;

            appendTo.AppendChild(newNode);
        }

        public static DateTime ConvertToDateTime(string file)
        {
            try
            {
                return Convert.ToDateTime(Path.GetFileNameWithoutExtension(file).Replace("_", "/"), CultureInfo.InvariantCulture);
            }
            catch
            {
                return DateTime.MinValue;
            }
        }

        public static string ConvertDateToFolderName(DateTime date)
        {
            return date.ToShortDateString().Replace("/", "_");
        }

        public static double CalculateAvailability(string file)
        {
            string[] lines = null;

            lines = File.ReadAllLines(file);

            double successes = 0;
            double totalSamples = lines.Length;

            foreach (string line in lines)
            {
                string status = line.Substring(line.IndexOf("]") + 2).Trim();

                if (status == "1")
                {
                    successes++;
                }
            }

            if (totalSamples > 0)
            {
                return 100 * successes / totalSamples;
            }
            else
            {
                return -1;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\AvatarClosetService.cs ===
﻿using System;
using System.Diagnostics;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.Multiplayer;
using LiveN.Test.Services.Rewards;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    class AvatarWriteService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        //private UDSPartnerUtil udsPartUtil = null;

        public AvatarWriteService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;

            envConfig = Config.EnvironmentSettings.Environments[env];
            //udsPartUtil = new UDSPartnerUtil(
            //        this.envConfig.UDSPartnerProfileService.ToString(),
            //        this.envConfig.UDSPartnerGameDataService.ToString(),
            //        this.envConfig.UDSPartnerMessageService.ToString(),
            //        this.envConfig.UDSPartnerFriendService.ToString(),
            //        this.envConfig.UDSPartnerPresenceService.ToString(),
            //        this.envConfig.StsSettings.StsUrl,
            //        this.envConfig.StsSettings.ClientCertSubject,
            //        this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //        this.envConfig.WindowsLiveIDSettings.Policy,
            //        this.envConfig.WindowsLiveIDSettings.Environment,
            //        this.envConfig.StsSettings.TitleId2,
            //        this.envConfig.StsSettings.TitleVersion,
            //        this.envConfig.StsSettings.PlatformType,
            //        this.envConfig.StsSettings.ClientVersion,
            //        this.envConfig.StsSettings.AudienceUriUserData);

            //LoggerTraceListener loggerListener = new LoggerTraceListener();
            //loggerListener.Logger = logger;
            //loggerListener.EnvironmentName = EnvironmentName;
            //loggerListener.ServiceName = ServiceName;

            //Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.AvatarCloset;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get { return "Avatar Closet"; }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = true;
            try
            {
                ClearClientError();

                //string userName = this.envConfig.UserSettings[0].Membername;
                //string password = this.envConfig.UserSettings[0].Password;

                StartApiTimer();


                StopApiTimer();

            }
            catch (Exception e)
            {
                result = false;
                LogError(e.ToString());
                SetClientError(e);

            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\CertNetParser.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using Microsoft.Live.AddressBook.Test.Monitoring.Properties;

namespace SiteMonitorNTService
{
    class CertNetParser
    {
        private XDocument siteStatusXml = new XDocument();
        private Dictionary<string, string> serviceValues = new Dictionary<string, string>();

        public CertNetParser() { }

        public Dictionary<string,string> GetSiteStatus(string serviceName)
        {
            siteStatusXml = XDocument.Load(Path.Combine(Settings.Default.CertNetPath, "Sitestatus.xml"));

            IEnumerable<XElement> certNetSite = from site in siteStatusXml.Elements("SiteList").Elements("Site")
                                                where site.Element("SiteName").Value.Equals("CERT")
                                                select site;

            if (certNetSite.Count<XElement>() == 1)
            {
                XElement certSite = certNetSite.ElementAt<XElement>(0);
                var query = from service in certSite.Elements("Service")
                            where service.Element("ServiceName").Value.Equals(serviceName)
                            select service;

                foreach (var y in query.Descendants<XElement>())
                {
                    serviceValues.Add(y.Name.ToString(), y.Value);
                }
            }

            return serviceValues;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\AvatarWriteService.cs ===
﻿using System;
using System.Diagnostics;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.Multiplayer;
using LiveN.Test.Services.Rewards;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    class AvatarClosetService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        private UDSPartnerUtil udsPartUtil = null;

        public AvatarClosetService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;

            envConfig = Config.EnvironmentSettings.Environments[env];
            //udsPartUtil = new UDSPartnerUtil(
            //        this.envConfig.UDSPartnerProfileService.ToString(),
            //        this.envConfig.UDSPartnerGameDataService.ToString(),
            //        this.envConfig.UDSPartnerMessageService.ToString(),
            //        this.envConfig.UDSPartnerFriendService.ToString(),
            //        this.envConfig.UDSPartnerPresenceService.ToString(),
            //        this.envConfig.StsSettings.StsUrl,
            //        this.envConfig.StsSettings.ClientCertSubject,
            //        this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //        this.envConfig.WindowsLiveIDSettings.Policy,
            //        this.envConfig.WindowsLiveIDSettings.Environment,
            //        this.envConfig.StsSettings.TitleId2,
            //        this.envConfig.StsSettings.TitleVersion,
            //        this.envConfig.StsSettings.PlatformType,
            //        this.envConfig.StsSettings.ClientVersion,
            //        this.envConfig.StsSettings.AudienceUriUserData);

            //LoggerTraceListener loggerListener = new LoggerTraceListener();
            //loggerListener.Logger = logger;
            //loggerListener.EnvironmentName = EnvironmentName;
            //loggerListener.ServiceName = ServiceName;

            //Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.AvatarWrite;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get { return "Avatar Closet"; }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = true;
            try
            {
                ClearClientError();

                //string userName = this.envConfig.UserSettings[0].Membername;
                //string password = this.envConfig.UserSettings[0].Password;

                StartApiTimer();


                StopApiTimer();

            }
            catch (Exception e)
            {
                result = false;
                LogError(e.ToString());
                SetClientError(e);

            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\AvatarServicesService.cs ===
﻿using System;
using System.Diagnostics;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.Multiplayer;
using LiveN.Test.Services.Rewards;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Services;
using System.Collections.Generic;

namespace SiteMonitorNTService
{
    class AvatarServices : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        private AvatarServicesMonitoringBlock avatarMonitoringBlock = null;

        public AvatarServices(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;

            envConfig = Config.EnvironmentSettings.Environments[env];
            //udsPartUtil = new UDSPartnerUtil(
            //        this.envConfig.UDSPartnerProfileService.ToString(),
            //        this.envConfig.UDSPartnerGameDataService.ToString(),
            //        this.envConfig.UDSPartnerMessageService.ToString(),
            //        this.envConfig.UDSPartnerFriendService.ToString(),
            //        this.envConfig.UDSPartnerPresenceService.ToString(),
            //        this.envConfig.StsSettings.StsUrl,
            //        this.envConfig.StsSettings.ClientCertSubject,
            //        this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //        this.envConfig.WindowsLiveIDSettings.Policy,
            //        this.envConfig.WindowsLiveIDSettings.Environment,
            //        this.envConfig.StsSettings.TitleId2,
            //        this.envConfig.StsSettings.TitleVersion,
            //        this.envConfig.StsSettings.PlatformType,
            //        this.envConfig.StsSettings.ClientVersion,
            //        this.envConfig.StsSettings.AudienceUriUserData);

            avatarMonitoringBlock = new AvatarServicesMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.AvatarServices;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get { return "Avatar Services";  }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                ClearClientError();

                string userName = this.envConfig.UserSettings[0].Membername;
                string password = this.envConfig.UserSettings[0].Password;

                StartApiTimer();

                List<IResult> avatarResults = avatarMonitoringBlock.RunTests();
                foreach (IResult res in avatarResults)
                {
                    if (res.Passed == false)
                    {
                        SetClientError(res.Error);
                        return;
                    }
                }
                result = true;

                StopApiTimer();

            }
            catch (Exception e)
            {
                result = false;
                LogError(e.ToString());
                SetClientError(e);
                
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\DummyService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;

namespace SiteMonitorNTService
{
    class DummyService : TestService
    {
        string environment = "";

        public DummyService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.Dummy;
            }
        }

        internal override string EnvironmentName
        {
            get {  return environment;}
        }

        public override string Url
        {
            get { return "dummyurl"; }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Configuration.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Xml;
//using Microsoft.Live.AddressBook.Test.TestFramework;
//using Microsoft.Live.AddressBook.Test.TestFramework.Authentication;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public class Configuration
    {
        internal const string ErrorFile = "Error.txt";        
        internal const string UserDictionaryFile = "Users.csv";
        internal const string DisabledSitesFile = "DisabledSites.txt";
        private static Configuration instance;

        public static Configuration Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new Configuration();
                }

                return instance;
            }
        }        

        internal string CurrentDirectory
        {
            get
            {
                return Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            }
        }

        /// <summary>
        /// The default timeout for each API call.
        /// </summary>
        internal int DefaultApiTimeout
        {
            get
            {
                return 5000;
            }
        }

        //internal Dictionary<AuthenticationEnvironment, List<User>> UserDictionary
        //{
        //    get
        //    {
        //        if (this.userDictionary == null)
        //        {
        //            this.userDictionary = new Dictionary<AuthenticationEnvironment, List<User>>();

        //            string userDictionaryFile = Path.Combine(CurrentDirectory, UserDictionaryFile);

        //            if (!File.Exists(userDictionaryFile))
        //            {
        //                throw new FileNotFoundException("File not found: " +  Path.GetFullPath(userDictionaryFile));
        //            }

        //            string[] lines = File.ReadAllLines(userDictionaryFile);

        //            foreach (string line in lines)
        //            {
        //                // Parse the line
        //                string[] tokens = line.Split(new char[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries);
        //                AuthenticationEnvironment authEnvironment = (AuthenticationEnvironment)Enum.Parse(typeof(AuthenticationEnvironment), tokens[0]);
        //                string liveId = tokens[1];
        //                string password = tokens[2];
        //                Guid addressBookId = new Guid(tokens[3]);

        //                if (!this.userDictionary.ContainsKey(authEnvironment))
        //                {
        //                    this.userDictionary.Add(authEnvironment, new List<User>());
        //                }

        //                this.userDictionary[authEnvironment].Add(new User(addressBookId, liveId, password));
        //            }
        //        }

        //        return userDictionary;
        //    }
        //}
        
        public Dictionary<string, TestSite> TestSites
        {
            get
            {
                if (this.testSites == null)
                {
                    this.testSites = new Dictionary<string, TestSite>();

                    string[] siteNames =
                        Properties.Settings.Default.TestSites.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);

                    foreach (string siteName in siteNames)
                    {
                        TestSite site = new LIVEnEnvironment(siteName);

                        if (site.IsDefined)
                        {
                            this.testSites.Add(siteName, site);
                            Logger.Instance.LogInformation(String.Format("{0} loaded", siteName));
                        }
                        else
                        {
                            Logger.Instance.LogInformation(String.Format("{0} not defined", siteName));
                        }
                    }
                }

                return this.testSites;
            }
        }

        public Dictionary<string, string> EmailTo
        {
            get { return emailToOfSite; }
        }

        public List<string> EmailServices
        {
            get { return monitoredServices; }
        }

        public int NumFailBeforeFirstAlarm
        {
            get { return numFailBeforeFirstAlarm; }
        }

        public int NumFailBeforeExtraAlarm
        {
            get { return numFailBeforeExtraAlarm; }
        }

        public int NumSuccessBeforeNotification
        {
            get { return numSuccessBeforeNotification; }
        }

        public string EmailFrom
        {
            get { return emailFrom; }
        }

        public string EmailSuccessSubject
        {
            get { return emailSuccessSubject; }
        }

        public string EmailDownSubject
        {
            get { return emailDownSubject; }
        }

        public bool IsEmailSettingsInit
        {
            get { return isEmailSettingInit; }
        }

        //private Dictionary<AuthenticationEnvironment, List<User>> userDictionary;
        private Dictionary<string, List<string>> disabledServices;
        private Dictionary<string, TestSite> testSites;
        private Dictionary<string, string> emailToOfSite = new Dictionary<string,string>();
        private List<string> monitoredServices = new List<string>();
        private int numFailBeforeFirstAlarm;
        private int numFailBeforeExtraAlarm;
        private int numSuccessBeforeNotification;
        private string emailFrom;
        private string emailSuccessSubject;
        private string emailDownSubject;
        private bool isEmailSettingInit = false;
        private object readLock = new object();

        protected Configuration()
        {
        }

        /// <summary>
        /// Read EmailAlert settings from config
        /// </summary>
        /// <returns>Return true if reading succeed</returns>
        internal bool EmailSettingsInitialize()
        {
            Logger.Instance.LogInformation("Reading Email Settings from config...");
            try
            {
                XmlDocument emailSettings = Properties.Settings.Default.EmailAlerter;

                // Add different recipients for each site
                foreach (XmlNode siteNode in emailSettings.FirstChild.SelectNodes("Site"))
                {
                    string recipients = siteNode.SelectSingleNode("EmailTo").InnerText;
                    string site = siteNode.Attributes["Name"].Value;

                    emailToOfSite.Add(site, recipients);
                }

                foreach (XmlNode servicesNode in emailSettings.FirstChild.SelectNodes("MonitoredServices"))
                {
                    string serviceName = servicesNode.InnerText;
                    monitoredServices.Add(serviceName);
                    Logger.Instance.LogInformation("enabling alert emails for " + serviceName);
                }

                // Read other email settings
                numFailBeforeFirstAlarm = int.Parse(emailSettings.FirstChild.SelectSingleNode("NumFailBeforeFirstAlarm").InnerText);
                numFailBeforeExtraAlarm = int.Parse(emailSettings.FirstChild.SelectSingleNode("NumFailBeforeExtraAlarm").InnerText);
                numSuccessBeforeNotification = int.Parse(emailSettings.FirstChild.SelectSingleNode("NumSuccessBeforeNotification").InnerText);
                emailFrom = emailSettings.FirstChild.SelectSingleNode("EmailFrom").InnerText;
                emailSuccessSubject = emailSettings.FirstChild.SelectSingleNode("EmailSuccessSubject").InnerText;
                emailDownSubject = emailSettings.FirstChild.SelectSingleNode("EmailDownSubject").InnerText;

                Logger.Instance.LogInformation("Done reading Email Settings");
                isEmailSettingInit = true;
                return true;
            }
            catch (Exception e)
            {
                Logger.Instance.LogError
                    (string.Format
                    ("Failed on reading Email Settings, Email alert is unavailable. Please refer to inner exeception for Details: [{0}] - Stack Trace: {1}",
                                                    e.Message,e.StackTrace));
                return false;
            }
        }

        internal bool IsSiteEnabled(string siteName, string serviceName)
        {
            if (this.disabledServices == null)
            {
                lock (readLock)
                {
                    if (this.disabledServices == null)
                    {
                        string disabledSitesFile = Path.Combine(this.CurrentDirectory, DisabledSitesFile);

                        Logger.Instance.LogInformation("Reading {0}", disabledSitesFile);

                        this.disabledServices = new Dictionary<string, List<string>>();
                        string[] lines = File.ReadAllLines(disabledSitesFile);

                        foreach (string line in lines)
                        {
                            string[] tokens = line.Split(':');

                            if (tokens.Length != 2)
                            {
                                throw new InvalidDataException(
                                    String.Format(
                                        "{0} has invalid data. Could not parse line {1}.",
                                        DisabledSitesFile,
                                        line));
                            }

                            string site = tokens[0];
                            string[] services = tokens[1].Split(new char[] { ',', ' '}, StringSplitOptions.RemoveEmptyEntries);

                            if (!this.disabledServices.ContainsKey(site))
                            {
                                this.disabledServices[site] = new List<string>();
                            }
                            else
                            {
                                throw new InvalidDataException(
                                    String.Format(
                                        "{0} is specified twice in {1}.",
                                        site,
                                        DisabledSitesFile));
                            }

                            foreach (string service in services)
                            {
                                this.disabledServices[site].Add(service);
                                Logger.Instance.LogInformation("  {0}: {1} is disabled", site, service);
                            }

                            Logger.Instance.LogInformation("Done reading {0}", disabledSitesFile);
                        }
                    }
                }
            }

            if (this.disabledServices.ContainsKey(siteName) && this.disabledServices[siteName].Contains(serviceName))
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        internal static string ResolvePath(string path)
        {
            return Path.Combine(Configuration.Instance.CurrentDirectory, path);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\LIVEnEnvironment.cs ===
namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    class LIVEnEnvironment : TestSite
    {
        /// <summary>
        /// The AbchEnvironment representing this site
        /// </summary>
        //private AbchEnvironment environment;

        public LIVEnEnvironment(string environmentName)
            : base(environmentName, null)
        {
            //if (AbchEnvironmentManager.Environments.HasEnvironment(environmentName))
            //{
            this.isDefined = true;
            //this.environment = environmentName;
            this.testServices = LIVEnTestServiceManager.GetTestServices(environmentName);
            //}
            //else
            //{
            //    this.isDefined = false;
            //}
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\LIVEnTestServiceManager.cs ===
using System.Collections.Generic;
using SiteMonitorNTService;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    class LIVEnTestServiceManager
    {
        /// <summary>
        /// This method gets test services available in a test environment.
        /// </summary>
        /// <param name="env">The environment</param>
        /// <returns></returns>
        internal static Dictionary<string, TestService> GetTestServices(string env)
        {
            Dictionary<string, TestService> testServices = new Dictionary<string, TestService>();

            TestService authService = new AuthenticationService(Logger.GetLogger(env, TestServiceType.Authentication), env, "Authentication", "auth");
            TestService uds = new UDSService(Logger.GetLogger(env, TestServiceType.UDS), env, "UDS", "uds");
            TestService udsPartner = new UDSPartnerService(Logger.GetLogger(env, TestServiceType.UDSPartner), env, "UDSPartner", "udsp");
            TestService rewards = new RewardsService(Logger.GetLogger(env, TestServiceType.Rewards), env, "Rewards", "rewd");
            TestService leaderboard = new LeaderboardService(Logger.GetLogger(env, TestServiceType.Leaderboard), env, "Leaderboard", "ldrbd");
            TestService spotlight = new SpotlightService(Logger.GetLogger(env, TestServiceType.Spotlight), env, "Spotlight", "spot");
            TestService multiplayer = new MultiplayerService(Logger.GetLogger(env, TestServiceType.Multiplayer), env, "Multiplayer", "mult");
            TestService avatar = new AvatarServices(Logger.GetLogger(env, TestServiceType.AvatarServices), env, "AvatarServices", "avtr");
            TestService webSts = new WebStsService(Logger.GetLogger(env, TestServiceType.WebSts), env, "WebSTS", "wbsts");
            TestService liveConnect = new LiveConnectService(Logger.GetLogger(env, TestServiceType.LiveConnect), env, "LiveConnect", "lc");

            authService.Enabled = Configuration.Instance.IsSiteEnabled(env, authService.ServiceName);
            uds.Enabled = Configuration.Instance.IsSiteEnabled(env, uds.ServiceName);
            udsPartner.Enabled = Configuration.Instance.IsSiteEnabled(env, udsPartner.ServiceName);
            rewards.Enabled = Configuration.Instance.IsSiteEnabled(env, rewards.ServiceName);
            leaderboard.Enabled = Configuration.Instance.IsSiteEnabled(env, leaderboard.ServiceName);
            spotlight.Enabled = Configuration.Instance.IsSiteEnabled(env, spotlight.ServiceName);
            multiplayer.Enabled = Configuration.Instance.IsSiteEnabled(env, multiplayer.ServiceName);
            avatar.Enabled = Configuration.Instance.IsSiteEnabled(env, avatar.ServiceName);
            webSts.Enabled = Configuration.Instance.IsSiteEnabled(env, webSts.ServiceName);
            liveConnect.Enabled = Configuration.Instance.IsSiteEnabled(env, liveConnect.ServiceName);

            testServices.Add(authService.ServiceName, authService);
            testServices.Add(uds.ServiceName, uds);
            testServices.Add(udsPartner.ServiceName, udsPartner);
            testServices.Add(rewards.ServiceName, rewards);
            testServices.Add(leaderboard.ServiceName, leaderboard);
            testServices.Add(spotlight.ServiceName, spotlight);
            testServices.Add(multiplayer.ServiceName, multiplayer);
            testServices.Add(avatar.ServiceName, avatar);
            testServices.Add(webSts.ServiceName, webSts);
            testServices.Add(liveConnect.ServiceName, liveConnect);
            
            //load plugins
            //List<PluginWrapper> plugins = PluginProvider.GetComponents(env.EnvironmentName);
            //foreach (PluginWrapper plugin in plugins)
            //{
            //    plugin.Enabled = true;
            //    testServices.Add(plugin.ServiceName, plugin);
            //}

            return testServices;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\LiveConnectService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.LiveConnect;
using System.Diagnostics;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        LiveConnectMonitoringBlock liveConnectMonitor;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="logger"></param>
        /// <param name="env"></param>
        /// <param name="serviceName"></param>
        /// <param name="shortServiceName"></param>
        public LiveConnectService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            this.ServiceName = serviceName;
            this.ShortServiceName = shortServiceName;
            this.environment = env;
            this.envConfig = Config.EnvironmentSettings.Environments[env];

            this.liveConnectMonitor = new LiveConnectMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        /// <summary>
        /// 
        /// </summary>
        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.LiveConnect;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        internal override string EnvironmentName
        {
            get { return environment; }
        }

        /// <summary>
        /// 
        /// </summary>
        public override string Url
        {
            get { return envConfig.LiveConnectSettings.StsEndpoint + Environment.NewLine + this.envConfig.LiveConnectSettings.CertEndpoint; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="result"></param>
        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                StartApiTimer();

                List<IResult> liveConnectResult = this.liveConnectMonitor.RunTests();
                result = liveConnectResult.All<IResult>(r => r.Passed);
                if (!result)
                {
                    SetClientError(liveConnectResult.First<IResult>(r => !r.Passed).Error);
                }
                
                StopApiTimer();
            }
            catch (Exception e)
            {
                LogExceptionDetail(e);
                SetClientError(e);
                result = false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\LeaderboardService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Services.Rewards;
using LiveN.Test.Framework.Configuration;
using System.Diagnostics;
using LiveN.Test.Services.Multiplayer;
using Rewards.Contracts;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    class LeaderboardService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        //private UDSUtil udsUtil = null;
        //private RewardsUtil rewardsUtil = null;
        private LeaderboardMonitoringBlock leaderboardMonitor;

        public LeaderboardService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;

            envConfig = Config.EnvironmentSettings.Environments[env];
            //udsUtil = new UDSUtil(
            //        this.envConfig.UDSProfileService.ToString(),
            //        this.envConfig.UDSGameDataService.ToString(),
            //        this.envConfig.StsSettings.StsUrl,
            //        this.envConfig.StsSettings.ClientCertSubject,
            //        this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //        this.envConfig.WindowsLiveIDSettings.Policy,
            //        this.envConfig.WindowsLiveIDSettings.Environment,
            //        this.envConfig.StsSettings.TitleId3,
            //        this.envConfig.StsSettings.TitleVersion,
            //        this.envConfig.StsSettings.PlatformType,
            //        this.envConfig.StsSettings.ClientVersion);

            //rewardsUtil = new RewardsUtil(
            //       this.envConfig.RewardsService.ToString(),
            //       this.envConfig.StsSettings.StsUrl,
            //       this.envConfig.StsSettings.ClientCertSubject,
            //       this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //       this.envConfig.WindowsLiveIDSettings.Policy,
            //       this.envConfig.WindowsLiveIDSettings.Environment,
            //       this.envConfig.StsSettings.TitleId,
            //       this.envConfig.StsSettings.TitleVersion,
            //       this.envConfig.StsSettings.PlatformType,
            //       this.envConfig.StsSettings.ClientVersion);

            leaderboardMonitor = new LeaderboardMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.Leaderboard;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get { return this.envConfig.UDSGameDataService.ToString(); }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                ClearClientError();

                StartApiTimer();

                List<IResult> leaderboardResult = leaderboardMonitor.RunTests();
                foreach (IResult res in leaderboardResult)
                {
                    if (res.Passed == false)
                    {
                        SetClientError(res.Error);
                        return;
                    }
                }
                result = true;

                StopApiTimer();

            }
            catch (Exception e)
            {
                result = false;
                LogError(e.ToString());
                SetClientError(e);

            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\ProjectInstaller.cs ===
using System.ComponentModel;
using System.Configuration.Install;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    [RunInstaller(true)]
    public partial class ProjectInstaller : Installer
    {
        public ProjectInstaller()
        {
            InitializeComponent();
        }

        private void serviceProcessInstaller1_AfterInstall(object sender, InstallEventArgs e)
        {
            
        }

        private void serviceInstaller1_AfterInstall(object sender, InstallEventArgs e)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\EmailAlerter.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Mail;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public class EmailAlerter
    {
        private string site=string.Empty;
        private string service;
        private string serviceLogName;
        private int consecutiveFailures=0;
        private int consecutiveSuccess=0;
        private Exception lastServiceError;
        private AlerterType emailType = AlerterType.Unavailable;

        public Exception LastServiceError
        {
            get { return lastServiceError; }
            set { lastServiceError = value; }
        }

        public AlerterType EmailType
        {
            get { return emailType; }
        }

        internal EmailAlerter(string siteName,string serviceName,int consecutiveF,int consecutiveS)
        {
            if (string.IsNullOrEmpty(serviceName))
                serviceName = "";

            site = siteName;
            serviceLogName = serviceName;

            service = serviceName.Replace("private", "");
            service = serviceName.Replace("public", "");

            consecutiveFailures = consecutiveF;
            consecutiveSuccess = consecutiveS;

            // Check for email type that indicated by consecutive failures or consecutive success
            CheckEmailType();
        }

        public void SendEmailAlert()
        {
            // Check if email alert is not enabled for current site, then do nothing
            if (!CheckEmailEnable(this.site))
                return;

            // If email type equals unavailable, do nothing
            if (this.EmailType == AlerterType.Unavailable)
                return;

            string emailSubject=null;
            string emailBody = null;
            MailAddress emailFrom;
            MailAddress[] emailTo;
            string recepientsString = GetEmailTo(this.site);

            if (string.IsNullOrEmpty(recepientsString))
            {
                Logger.Instance.LogInformation(string.Format("EmailTo is empty, alert will not be sent for this site: {0} according to Settings"),this.site);
            }

            emailFrom = new MailAddress(Configuration.Instance.EmailFrom, "LIVEn Gadget Alerts");
            emailTo = GenerateEmailToFromString(recepientsString);

            // Initilize email subject and email body base on different email type
            if (this.EmailType == AlerterType.FirstAlarm)
            {
                emailSubject = string.Format(Configuration.Instance.EmailDownSubject,this.site,this.service,consecutiveFailures);
                emailBody = GenEmailBody();
            }
            // Check whether send reminder failure alert
            else if (this.EmailType == AlerterType.ExtraAlarm) 
            {
                emailSubject = string.Format(Configuration.Instance.EmailDownSubject, this.site, this.service, consecutiveFailures);
                emailBody = GenEmailBody();
            }
            // Check whether send fix notification 
            else if (this.EmailType == AlerterType.FixNotification)
            {
                emailSubject = string.Format(Configuration.Instance.EmailSuccessSubject, this.site, this.service, consecutiveSuccess);
            }

            if (string.IsNullOrEmpty(emailSubject))
            {
                Logger.Instance.LogError("Internal error on sending email, subject is empty");
                return;
            }

            SendEmail(emailFrom, emailTo, null, emailSubject, emailBody);
        }

        /// <summary>
        /// Base on settings, check if the site need to send alert
        /// </summary>
        /// <param name="siteName">Bed name</param>
        /// <returns>If found related settings for this site return true, otherwise return false</returns>
        internal bool CheckEmailEnable(string siteName)
        {
            //Logger.Instance.LogError("site " + siteName);
            if (Configuration.Instance.EmailTo.ContainsKey(siteName))
            {
                //Logger.Instance.LogError("true");
                return true;
            }
            else
            {
                //Logger.Instance.LogError("false");
                return false;
            }
        }

        internal bool CheckServiceEmailEnabled(string serviceName)
        {
            foreach (string service in Configuration.Instance.EmailServices)
            {
                if (service.ToLower().Contains(serviceName.ToLower())) return true;
            }
            return false;
        }

        /// <summary>
        /// Get receivers by different site
        /// </summary>
        /// <param name="siteName">Test bed name in settings</param>
        /// <returns>Recepients string</returns>
        private string GetEmailTo(string siteName)
        {
            string result = string.Empty;
            // ignore any errors on geting EmailTo, only return empty string.
            try
            {
                Configuration.Instance.EmailTo.TryGetValue(siteName, out result);
            }
            catch
            {
            }
            
            return result;
        }

        private void SendEmail(MailAddress from, MailAddress[] to, MailAddressCollection cc, string subject, string body)
        {
            Logger.Instance.LogInformation("ALERT from: " + from + " to: " + to.ToString() + " cc: " + cc + " subj: " + subject + " body: " + body);
            Logger.Instance.LogInformation("server = " + Properties.Settings.Default.SmtpServer);
            Logger.Instance.LogInformation(string.Format("Sending notification email for site: {0}", this.site));
            try
            {
                MailMessage message = new MailMessage();
                message.From = from;
                if (to.Length != 0)
                {
                    for (int i = 0; i < to.Length; i++)
                    {
                        message.To.Add(to[i]);
                    }
                }
                SmtpClient client = new SmtpClient(Properties.Settings.Default.SmtpServer);
                client.UseDefaultCredentials = true;
                client.DeliveryMethod = SmtpDeliveryMethod.Network;

                message.IsBodyHtml = true;
                message.Body = body;
                message.Subject = subject;

                if (cc != null)
                {
                    foreach (MailAddress email in cc)
                    {
                        message.CC.Add(email);
                    }
                }
                Logger.Instance.LogInformation("sending mail...");
                client.Send(message);
            }
            catch (Exception e)
            {
                Logger.Instance.LogError("error=" + e.Message);
                // Log inner exception for debugging error
                //Logger.Instance.LogError("Error while sending email using " + Properties.Settings.Default.SmtpServer + ". " + e.InnerException.Message);
            }
        }

        /// <summary>
        /// Get MailAddress array from settings
        /// </summary>
        /// <param name="receivers">recepients string from settings</param>
        /// <returns>MailAddress Array</returns>
        private MailAddress[] GenerateEmailToFromString(string receivers)
        {
            // hardcode splitor as ";"
            string[] addresses = receivers.Split(";".ToCharArray(),StringSplitOptions.RemoveEmptyEntries);
            if (addresses.Length != 0)
            {
                MailAddress[] emailTo = new MailAddress[addresses.Length];
                for (int i = 0; i < addresses.Length; i++)
                {
                    emailTo[i] = new MailAddress(addresses[i]);
                }
                return emailTo;
            }
            return null;
        }

        /// <summary>
        /// To determine which type of email should be send, return false if it matches none
        /// </summary>
        private bool CheckEmailType()
        {
            // Check whether send first failure alert
            if (this.consecutiveFailures == Configuration.Instance.NumFailBeforeFirstAlarm)
            {
                emailType = AlerterType.FirstAlarm;
                return true;
            }
            // Check whether send extra failure alert
            else if ((consecutiveFailures > Configuration.Instance.NumFailBeforeFirstAlarm) &&
                ((consecutiveFailures - Configuration.Instance.NumFailBeforeFirstAlarm) %
                Configuration.Instance.NumFailBeforeExtraAlarm == 0))
            {
                emailType = AlerterType.ExtraAlarm;
                return true;
            }
            // Check whether send fix notification 
            else if (consecutiveSuccess == Configuration.Instance.NumSuccessBeforeNotification)
            {
                emailType = AlerterType.FixNotification;
                return true;
            }
            else
            {
                emailType = AlerterType.Unavailable;
                return false;
            }
        }

        private string GenEmailBody()
        {
            string lastTenAvailabilitiesLog;
            // If no exception found in last service error, do nothing but return
            if (this.LastServiceError == null)
            {
                Logger.Instance.LogInformation(string.Format("No error detail found for last failed {0} {1} service", this.site, this.service));
                return null;
            }

            lastTenAvailabilitiesLog = Logger.GetLogger(this.site).ReadLastTenAvailablities(this.serviceLogName);

            System.Text.StringBuilder sb = new StringBuilder();
            sb.AppendLine("<p style=\"font-family: Calibri, Verdana;\">");
            sb.Append("<table style=\"border: 0px solid;margin: 0px\">");
            sb.Append("<tr><td style=\"border: 1px solid;horizontal-align: right;vertical-align: top;background-color: silver\">");
            sb.Append("<b>Last 10<br>Availablities'<br>Log</b></td>");
            sb.AppendFormat("<td style=\"border: 1px solid\"><pre>{0}</pre></td></tr>",
                                        string.IsNullOrEmpty(lastTenAvailabilitiesLog) ? "Get availablity log failed." : lastTenAvailabilitiesLog);
            sb.Append("<tr><td style=\"border: 1px solid;horizontal-align: right;vertical-align: top;background-color: silver\"><b>Last Error</b></td>");
            sb.AppendFormat("<td style=\"border: 1px solid\"><pre>{0}</pre></td></tr>", this.lastServiceError.Message);
            sb.Append("<tr><td style=\"border: 1px solid;horizontal-align: right;vertical-align: top;background-color: silver\"><b>Stack Trace</b></td>");
            sb.AppendFormat("<td style=\"border: 1px solid\"><pre>{0}</pre></td></tr>", this.lastServiceError.StackTrace);
            sb.Append("</table></p>");

            return sb.ToString();
        }

        public enum AlerterType
        {
            FirstAlarm,
            ExtraAlarm,
            FixNotification,
            Unavailable,
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\MonitoringUtil.cs ===
using System.Collections.Generic;
using System.Configuration;
using System.Xml;
//using Microsoft.Live.AddressBook.Test.TestFramework;
//using Microsoft.Live.AddressBook.Test.TestFramework.Authentication;
using Microsoft.Win32;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    class MonitoringUtil
    {
        //public static List<User> GetUsersForEnvironment(AuthenticationEnvironment authEnv)
        //{
        //    List<User> users;

        //    Configuration.Instance.UserDictionary.TryGetValue(authEnv, out users);

        //    if (users == null || users.Count == 0)
        //    {
        //        throw new ConfigurationErrorsException(
        //            Configuration.UserDictionaryFile + " does not contain any users for " + authEnv.ToString());
        //    }

        //    return users;
        //}

        public static void CreateAndAppendNode(
            XmlDocument doc,
            ref XmlNode appendTo,
            string newNodeName,
            string newNodeText)
        {
            XmlNode newNode = doc.CreateElement(newNodeName);
            newNode.InnerText = newNodeText;

            appendTo.AppendChild(newNode);
        }

        public static void DisableProxyCheck()
        {
            try
            {
                // Get Connection Settings registry key
                RegistryKey currentSetting = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Connections", true);

                byte[] value = (byte[])currentSetting.GetValue("DefaultConnectionSettings");

                // If "Automatically Detect Settings" is checked
                if (value[8] == 9)
                {
                    // increment the "serial number", my guess is that IE uses this to determine 
                    // whether it's existing settings are expired and it should get new ones
                    value[4]++;
                    // Set the "Automatically Detect Settings" checkbox to unchecked
                    value[8] = 1;

                    currentSetting.SetValue("DefaultConnectionSettings", value);
                }
            }
            catch(System.Exception e)
            {
                Logger.Instance.LogError("Diable proxy check failed. " + e.Message);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Program.cs ===
﻿using System;
using System.Diagnostics;
using System.ServiceProcess;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        static void Main()
        {
            if (Environment.CommandLine.IndexOf("run", StringComparison.OrdinalIgnoreCase) != -1)
            {
                //hook up a console trace listener
                LiveN.Test.Common.ColorConsoleTraceListener consoleListener = new LiveN.Test.Common.ColorConsoleTraceListener(false);
                consoleListener.Filter = new EventTypeFilter(SourceLevels.Information | SourceLevels.ActivityTracing);
                System.Diagnostics.Trace.Listeners.Add(consoleListener);

                SiteMonitorService monitor = new SiteMonitorService();
                monitor.RunService();
                Console.WriteLine("<Press any key to exit>");
                Console.Read();
                monitor.Stop();
            }
            else
            {
                ServiceBase[] ServicesToRun;
                ServicesToRun = new ServiceBase[] { new SiteMonitorService() };
                ServiceBase.Run(ServicesToRun);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\MultiplayerService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.Multiplayer;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;
using LiveN.Test.Common;
using System.Diagnostics;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    class MultiplayerService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        MultiplayerMonitoringBlock multiplayerMonitor;

        public MultiplayerService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;
            envConfig = Config.EnvironmentSettings.Environments[env];

            multiplayerMonitor = new MultiplayerMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.GameSession;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get 
            {
                return String.Format("{0}\r\n{1}\r\n{2}", this.envConfig.GameSessionService, this.envConfig.GameStateService, this.envConfig.NotificationsService);                
            }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                StartApiTimer();

                List<IResult> multiResults = multiplayerMonitor.RunTests();
                result = multiResults.All<IResult>(r => r.Passed);
                if (!result)
                {
                    SetClientError(multiResults.First<IResult>(r => !r.Passed).Error);
                }

                StopApiTimer();
            }
            catch (Exception e)
            {
                LogExceptionDetail(e);
                SetClientError(e);
                result = false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Logger.cs ===
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;
//using Microsoft.Live.AddressBook.Test.TestFramework.Authentication;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public class Logger
    {
        private static Dictionary<string, Logger> LoggerDictionary = new Dictionary<string, Logger>();
        private const string EventSource = "ABCHSiteMonitor2";
        private const string EventLogName = "Application";
        private const string DefaultLogName = "Main";
        private const string LogExtension = "log.txt";
        private const string ErrorLogExtension = "err.txt";
        private const string VersionFileName = "version.html";

        internal static Logger Instance
        {
            get 
            {
                return GetLogger(DefaultLogName);
            }
        }

        public string LogName
        {
            get { return logName;  }
        }

        /// <summary>
        /// The folder containing the logs for this logger
        /// </summary>
        private string logFolder
        {
            get
            {
                // if this is the default logger, place the logs in the application
                // folder, otherwise place them in the debug log path
                return this.logName == DefaultLogName ? Configuration.Instance.CurrentDirectory : 
                    Configuration.ResolvePath(Properties.Settings.Default.DebugLogPath);
            }
        }


        /// <summary>
        /// The log file for this logger
        /// </summary>
        internal string LogFile
        {
            get
            {
                return Path.Combine(this.logFolder,
                    String.Format("{0}.{1}", this.logName, LogExtension));
            }
        }


        /// <summary>
        /// The error log file for this logger
        /// </summary>
        internal string ErrorLogFile
        {
            get
            {
                return Path.Combine(this.logFolder,
                    String.Format("{0}.{1}", this.logName, ErrorLogExtension));
            }
        }

        private string logName;
        private object writeLock = new object();

        protected Logger()
            : this(DefaultLogName)
        {
        }

        protected Logger(string logName)
        {   
            this.logName = logName;
            string debugLogPath = Configuration.ResolvePath(Properties.Settings.Default.DebugLogPath);

            if (!Directory.Exists(debugLogPath))
            {
                Directory.CreateDirectory(debugLogPath);
            }
        }

        /// <summary>
        /// Gets the logger based on the log name.
        /// </summary>
        /// <param name="siteName">the log name</param>
        /// <returns></returns>
        public static Logger GetLogger(string siteName, TestServiceType serviceType)
        {
            string key = String.Format("{0}.{1}", siteName, serviceType.ToString());

            return GetLogger(key);
        }

        public static Logger GetLogger(string key)
        {
            Logger logger;

            // If the requested logger does not exist in the dictionary,
            // create a new one
            if (LoggerDictionary.TryGetValue(key, out logger))
            {
                return logger;
            }
            else
            {
                logger = new Logger(key);
                LoggerDictionary.Add(key, logger);

                return logger;
            }
        }

        /// <summary>
        /// Logs an exception to the error log file
        /// </summary>
        /// <param name="e">the exception</param>
        public void LogExceptionDetail(Exception e)
        {
            string text = e.ToString();

            WriteLogToFile(e.Message, this.LogFile, this.writeLock);
            WriteLogToFile(text, this.ErrorLogFile, this.writeLock);
        }

        /// <summary>
        /// save version information 
        /// </summary>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="serviceName"></param>
        /// <param name="versionStr"></param>
        public void LogVersion(string environmentName, string serviceName, string versionStr)
        {
            string logPath = Configuration.ResolvePath(Properties.Settings.Default.LogPath);

            string siteFolder = Path.Combine(
                logPath,
                environmentName + Path.DirectorySeparatorChar +
                serviceName);

            string versionFile = Path.Combine(
                siteFolder,
                VersionFileName);

            try
            {
                if (!Directory.Exists(logPath))
                {
                    Directory.CreateDirectory(logPath);
                }

                if (!Directory.Exists(siteFolder))
                {
                    Directory.CreateDirectory(siteFolder);
                }

                File.WriteAllText(versionFile, versionStr);
            }
            catch (Exception e)
            {
                Logger.Instance.LogInformation("While writing result log " + e.Message + " " + e.StackTrace);
                Logger.WriteExceptionToEventLog(e, "While writing result log", EventLogEntryType.Error);
            }



            //WriteNewLineToFile(versionStr, versionLog, this.writeLock);
        }
        /// <summary>
        /// Logs a string to the error log file as well as the regular log file
        /// </summary>
        /// <param name="text">The string to log</param>
        public void LogError(string text)
        {
            WriteLogToFile(text, this.LogFile, this.writeLock);
            WriteLogToFile(text, this.ErrorLogFile, this.writeLock);
        }

        public void LogInformation()
        {
            LogInformation(String.Empty);
        }

        public void LogInformation(string format, params string[] args)
        {
            LogInformation(String.Format(format, args));
        }

        public void LogInformation(string text)
        {
            LogInformation(text, false);
        }

        public void LogInformation(string text, bool writeToDefaultLog)
        {
            WriteLogToFile(text, this.LogFile, this.writeLock);

            // Also write to default log if requested
            if (this.logName != DefaultLogName && writeToDefaultLog)
            {
                Logger.Instance.LogInformation(text);
            }
        }

        private static void WriteLogToFile(string text, string file, object writeLock)
        {
            if (!String.IsNullOrEmpty(text))
            {
                text = String.Format("[{0}] {3} {1}{2}", DateTime.Now.ToString(), 
                    text, Environment.NewLine, Thread.CurrentThread.ManagedThreadId);
            }
            else
            {
                text = Environment.NewLine;
            }

            try
            {
                lock (writeLock)
                {
                    FileInfo fileInfo = new FileInfo(file);

                    if (fileInfo.Exists && fileInfo.Length > 
                        Properties.Settings.Default.MaxLogFileLengthInMegaBytes * 1000000)
                    {
                        File.Delete(file);
                    }

                    File.AppendAllText(file, text);
                }
            }
            catch (Exception e)
            {
                WriteExceptionToEventLog(e,
                    "An exception occurred while writing to log file " + file,
                    EventLogEntryType.Error);
            }
        }


        public void LogAvailability(string serviceName, bool success)
        {
            int status = success ? 1 : 0;
            string logPath = Configuration.ResolvePath(Properties.Settings.Default.LogPath);

            string siteFolder = Path.Combine(
                logPath,
                this.logName + Path.DirectorySeparatorChar +
                serviceName);

            string logFile = Path.Combine(
                siteFolder,
                DateTime.Today.ToShortDateString().Replace("/", "_") + ".txt");

            try
            {
                if (!Directory.Exists(logPath))
                {
                    Directory.CreateDirectory(logPath);
                }

                if (!Directory.Exists(siteFolder))
                {
                    Directory.CreateDirectory(siteFolder);
                }

                File.AppendAllText(
                    logFile,
                    "[" + DateTime.Now.ToShortTimeString() + "]\t" + status + Environment.NewLine);
            }
            catch (Exception e)
            {
                Logger.Instance.LogInformation("While writing result log " + e.Message + " " + e.StackTrace);
                Logger.WriteExceptionToEventLog(e, "While writing result log", EventLogEntryType.Error);
            }
        }

        /// <summary>
        /// Only used for Email alerter for now.
        /// Get last 10 lines from given service log or all of the total lines if lines are no more than 10.
        /// </summary>
        /// <param name="serviceName">Service Name</param>
        /// <returns>string lines of log</returns>
        /// <example>
        /// [3:04 AM]            1
        /// [3:06 AM]            1
        /// [3:08 AM]            1
        /// [3:10 AM]            0
        /// [3:13 AM]            0
        /// [3:15 AM]            0
        /// </example>
        internal string ReadLastTenAvailablities(string serviceName)
        {
            string logPath = Configuration.ResolvePath(Properties.Settings.Default.LogPath);

            string siteFolder = Path.Combine(
                logPath,
                this.logName + Path.DirectorySeparatorChar +
                serviceName);

            string logFile = Path.Combine(
                siteFolder,
                DateTime.Today.ToShortDateString().Replace("/", "_") + ".txt");

            try
            {
                // Read all lines
                FileStream fs = File.OpenRead(logFile);
                StreamReader sr = new StreamReader(fs);
                List<string> totalLines = new List<string>();
                string line;
                while ((line = sr.ReadLine()) != null)
                {
                    totalLines.Add(line);
                }
                sr.Close();
                fs.Close();

                System.Text.StringBuilder result = new System.Text.StringBuilder();
                // Get last 10 lines or total lines if lines no more than 10
                int startIndex = ((totalLines.Count - 10) >= 0) ? (totalLines.Count - 10) : 0;
                for (int i = startIndex; i < totalLines.Count; i++)
                {
                    // add more info for current failure log line
                    if (i == totalLines.Count - 1)
                        totalLines[i] += "  <= failure alert has been sent.";
                    result.AppendLine(totalLines[i]);
                }

                return result.ToString();
            }
            catch(Exception e)
            {
                Logger.Instance.LogInformation("While reading result log " + e.Message + " " + e.StackTrace);
                Logger.WriteExceptionToEventLog(e, "While reading result log", EventLogEntryType.Error);
            }
            return null;
        }

        public static void WriteToEventLog(
            string text,
            System.Diagnostics.EventLogEntryType type)
        {   

            if (!System.Diagnostics.EventLog.SourceExists(EventSource))
                System.Diagnostics.EventLog.CreateEventSource(EventSource, EventLogName);

            System.Diagnostics.EventLog.WriteEntry(EventSource, text, type);
        }

        /// <summary>
        /// This method writes an exception to the event log.
        /// </summary>
        /// <param name="e">exception</param>
        /// <param name="format">additional format describing the event</param>
        /// <param name="type">the event type (info, warning, error, etc)</param>
        public static void WriteExceptionToEventLog(
            Exception e,
            string text,
            EventLogEntryType type)
        {
            string eventText = text + ": " + e.Message + Environment.NewLine + e.StackTrace + Environment.NewLine;

            WriteToEventLog(eventText, type);
        }

        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\ProjectInstaller.Designer.cs ===
namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    partial class ProjectInstaller
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();
            this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();
            // 
            // serviceProcessInstaller1
            // 
            this.serviceProcessInstaller1.Account = System.ServiceProcess.ServiceAccount.NetworkService;
            this.serviceProcessInstaller1.Password = null;
            this.serviceProcessInstaller1.Username = null;
            this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);
            // 
            // serviceInstaller1
            // 
            this.serviceInstaller1.DisplayName = "ABCH Test Lab Monitor Service2";
            this.serviceInstaller1.ServiceName = "abchsitemon2";
            this.serviceInstaller1.StartType = System.ServiceProcess.ServiceStartMode.Automatic;
            this.serviceInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceInstaller1_AfterInstall);
            // 
            // ProjectInstaller
            // 
            this.Installers.AddRange(new System.Configuration.Install.Installer[] {
            this.serviceProcessInstaller1,
            this.serviceInstaller1});

        }

        #endregion

        private System.ServiceProcess.ServiceProcessInstaller serviceProcessInstaller1;
        private System.ServiceProcess.ServiceInstaller serviceInstaller1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\LoggerTraceListener.cs ===
﻿using System;
using System.Collections;
using System.Diagnostics;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;

namespace SiteMonitorNTService
{
    /// <summary>
    /// 
    /// </summary>
    public class LoggerTraceListener: TraceListener
    {
        /// <summary>
        /// 
        /// </summary>
        public LoggerTraceListener()
            : this(true)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="showSource"></param>
        public LoggerTraceListener(bool showSource)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        public Logger Logger
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ShowSource
        {
            get;
            set;
        }

        public string ServiceName
        { get; set; }

        public string EnvironmentName
        { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="eventCache"></param>
        /// <param name="source"></param>
        /// <param name="eventType"></param>
        /// <param name="id"></param>
        /// <param name="message"></param>
        public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message)
        {
            if ((this.Filter != null) && !this.Filter.ShouldTrace(eventCache, source, eventType, id, message, null, null, null))
                return;

            this.WriteHeader(source, eventType, id);
            //WriteLine(message);
            WriteText(message, (eventType == TraceEventType.Error));
            this.WriteFooter(eventCache);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="eventCache"></param>
        /// <param name="source"></param>
        /// <param name="eventType"></param>
        /// <param name="id"></param>
        /// <param name="format"></param>
        /// <param name="args"></param>
        public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, params object[] args)
        {
            TraceEvent(eventCache, source, eventType, id, String.Format(format, args));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override void WriteIndent()
        {
            this.NeedIndent = false;
            for (int i = 0; i < this.IndentLevel; i++)
            {
                for (int j = 0; j < this.IndentSize; j++)
                    this.Write("\t");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="source"></param>
        /// <param name="type"></param>
        /// <param name="id"></param>
        protected virtual void WriteHeader(string source, TraceEventType type, int id)
        {
            StringBuilder header = new StringBuilder();
            if (this.ShowSource)
                header.AppendFormat("{0} ", source);
            header.AppendFormat("{0}: ", type);
            if (id != 0)
                header.AppendFormat("{0}: ", id);
            this.Write(header.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cache"></param>
        protected virtual void WriteFooter(TraceEventCache eventCache)
        {
            if (eventCache != null)
            {
                base.IndentLevel++;
                if (this.IsEnabled(TraceOptions.ProcessId))
                {
                    this.WriteLine("ProcessId=" + eventCache.ProcessId);
                }
                if (this.IsEnabled(TraceOptions.LogicalOperationStack))
                {
                    this.Write("LogicalOperationStack=");
                    Stack logicalOperationStack = eventCache.LogicalOperationStack;
                    bool flag = true;
                    foreach (object obj2 in logicalOperationStack)
                    {
                        if (!flag)
                        {
                            this.Write(", ");
                        }
                        else
                        {
                            flag = false;
                        }
                        this.Write(obj2.ToString());
                    }
                    this.WriteLine(string.Empty);
                }
                if (this.IsEnabled(TraceOptions.ThreadId))
                {
                    this.WriteLine("ThreadId=" + eventCache.ThreadId);
                }
                if (this.IsEnabled(TraceOptions.DateTime))
                {
                    //this POS is in UTC; convert to local
                    DateTime local = TimeZoneInfo.ConvertTimeFromUtc(eventCache.DateTime, TimeZoneInfo.Local);
                    this.WriteLine("DateTime=" + local.ToString("MM/dd/yyyy hh:mm:ss.ffff tt"));
                }
                if (this.IsEnabled(TraceOptions.Timestamp))
                {
                    this.WriteLine("Timestamp=" + eventCache.Timestamp);
                }
                if (this.IsEnabled(TraceOptions.Callstack))
                {
                    this.WriteLine("Callstack=" + eventCache.Callstack);
                }
                base.IndentLevel--;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="opts"></param>
        /// <returns></returns>
        protected bool IsEnabled(TraceOptions opts)
        {
            return ((opts & this.TraceOutputOptions) != TraceOptions.None);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public override void Write(string message)
        {
            WriteText(message, false);
        }

        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public override void WriteLine(string message)
        {
            WriteText(message + Environment.NewLine, false);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        private void WriteText(string message, bool isError)
        {
            string[] threadName = System.Threading.Thread.CurrentThread.Name.Split(new char[] { '.' });

            if (threadName[0].Equals(EnvironmentName) &&
                threadName[1].Equals(ServiceName))
            {
                if (isError)
                {
                    this.Logger.LogError(message);
                }
                else
                {
                    this.Logger.LogInformation(message);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\RewardsService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Services.Rewards;
using LiveN.Test.Framework.Configuration;
using System.Diagnostics;
using LiveN.Test.Services.Multiplayer;
using Rewards.Contracts;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    class RewardsService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        //private RewardsUtil rewardsUtil = null;
        RewardsMonitoringBlock rewardsMonitor;

        public RewardsService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;

            envConfig = Config.EnvironmentSettings.Environments[env];
            //rewardsUtil = new RewardsUtil(
            //        this.envConfig.RewardsService.ToString(),
            //        this.envConfig.StsSettings.StsUrl,
            //        this.envConfig.StsSettings.ClientCertSubject,
            //        this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //        this.envConfig.WindowsLiveIDSettings.Policy,
            //        this.envConfig.WindowsLiveIDSettings.Environment,
            //        this.envConfig.StsSettings.TitleId,
            //        this.envConfig.StsSettings.TitleVersion,
            //        this.envConfig.StsSettings.PlatformType,
            //        this.envConfig.StsSettings.ClientVersion);

            rewardsMonitor = new RewardsMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.Rewards;
            }
        }

        internal override string EnvironmentName
        {
            get {  return environment;}
        }

        public override string Url
        {
            get { return this.envConfig.RewardsService.ToString(); }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                ClearClientError();

                string userName = this.envConfig.UserSettings[0].Membername;
                string password = this.envConfig.UserSettings[0].Password;

                StartApiTimer();
                
                List<IResult> multiResults = rewardsMonitor.RunTests();
                foreach (IResult res in multiResults)
                {
                    if (res.Passed == false)
                    {
                        SetClientError(res.Error);
                        return;
                    }
                }
                result = true;

                StopApiTimer();

            }
            catch (Exception e)
            {
                result = false;
                LogError(e.ToString());
                SetClientError(e);

            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\SiteMonitorService.Designer.cs ===
namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    partial class SiteMonitorService
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            // 
            // SiteMonitorService
            // 
            this.ServiceName = "ABCHSiteMonitor2";

        }

        #endregion



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\SiteMonitorService.cs ===
using System;
using System.ServiceProcess;
//using Microsoft.Live.AddressBook.Test.TestFramework.Authentication;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public partial class SiteMonitorService : ServiceBase
    {
        public SiteMonitorService() : this(true)
        {            
        }

        public SiteMonitorService(bool initialize)
        {
            if (initialize)
            {
                InitializeComponent();
            }
        }

        public void RunService()
        {
            Logger.Instance.LogInformation("==================================================");
            Logger.Instance.LogInformation(" Service started");
            Logger.Instance.LogInformation("   Polling interval in milliseconds: " + Properties.Settings.Default.PollIntervalInMilliseconds);
            Logger.Instance.LogInformation("   SiteTimeout in milliseconds: " + Properties.Settings.Default.DefaultSiteTimeoutInMilliseconds);
            Logger.Instance.LogInformation("   Test in milliseconds: " + Properties.Settings.Default.DefaultTestTimeoutInMilliseconds);
            //Logger.Instance.LogInformation("   INT User: " + MonitoringUtil.GetUsersForEnvironment(AuthenticationEnvironment.INT)[0].PassportName);

            // Set up unhandled exception handler
            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);

            // Disable IE proxy checks
            MonitoringUtil.DisableProxyCheck();

            // Read email settings only once
            Configuration.Instance.EmailSettingsInitialize();

            // Start the Monitoring Service
            SiteMonitor.Instance.Start();
        }

        protected override void OnStart(string[] args)
        {
            RunService();
        }

        protected override void OnStop()
        {
            SiteMonitor.Instance.Stop();

            Logger.Instance.LogInformation("Service Stopped");
            Logger.Instance.LogInformation("");
        }

        protected void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            Logger.Instance.LogError("Unhandled exception: " + ((Exception)e.ExceptionObject).Message + " " + ((Exception)e.ExceptionObject).StackTrace);
            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\TestService.cs ===
u s i n g   S y s t e m ; 
 
 u s i n g   S y s t e m . T e x t ; 
 
 u s i n g   S y s t e m . X m l ; 
 
 u s i n g   S y s t e m . D i a g n o s t i c s ; 
 
 
 
 n a m e s p a c e   M i c r o s o f t . L i v e . A d d r e s s B o o k . T e s t . M o n i t o r i n g 
 
 { 
 
         p u b l i c   e n u m   T e s t S e r v i c e T y p e 
 
         { 
 
                 D u m m y , 
 
                 U D S P a r t n e r , 
 
                 N o t i f i c a t i o n s , 
 
                 G a m e S e s s i o n , 
 
                 G a m e S t a t e , 
 
                 A u t h e n t i c a t i o n , 
 
                 U D S , 
 
                 R e w a r d s , 
 
                 S p o t l i g h t , 
 
                 M u l t i p l a y e r , 
 
                 A v a t a r R e a d , 
 
                 A v a t a r W r i t e , 
 
                 A v a t a r C l o s e t , 
 
                 L e a d e r b o a r d , 
 
                 A v a t a r S e r v i c e s , 
 
                 W e b S t s , 
 
                 L i v e C o n n e c t , 
 
         } 
 
 
 
         / / /   < s u m m a r y > 
 
         / / /   A n   a b s t r a c t   c l a s s   t h a t   f o r m s   t h e   b a s e   f o r   a l l   s e r v i c e   t y p e s . 
 
         / / /   A   T e s t S e r v i c e   i s   a   d i s t i n c t   s e r v i c e   w h o s e   a v a i l a b i l i t y   i s   b e i n g   
 
         / / /   m e a s u r e d . 
 
         / / /   < / s u m m a r y > 
 
         p u b l i c   a b s t r a c t   c l a s s   T e s t S e r v i c e 
 
         { 
 
                 p r o t e c t e d   a b s t r a c t   v o i d   C o n d u c t A v a i l a b i l i t y T e s t ( o u t   b o o l   r e s u l t ) ; 
 
                 p u b l i c   a b s t r a c t   T e s t S e r v i c e T y p e   S e r v i c e T y p e   {   g e t ;   } 
 
                 p u b l i c   a b s t r a c t   s t r i n g   U r l   {   g e t ;   } 
 
                 i n t e r n a l   a b s t r a c t   s t r i n g   E n v i r o n m e n t N a m e   {   g e t ;   } 
 
                 / / i n t e r n a l   a b s t r a c t   s t r i n g   C l i e n t M e s s a g e N o d e N a m e   {   g e t ;   } 
 
                 / / i n t e r n a l   a b s t r a c t   s t r i n g   S t a t u s N o d e N a m e   {   g e t ;   } 
 
                 / / i n t e r n a l   a b s t r a c t   s t r i n g   L a s t A t t e m p t N o d e N a m e   {   g e t ;   } 
 
 
 
                 / / v i k h u r a n 
 
                 p r o t e c t e d   s t r i n g   _ s e r v i c e N a m e ; 
 
                 p r o t e c t e d   s t r i n g   _ s h o r t S e r v i c e N a m e ; 
 
                 i n t e r n a l   a b s t r a c t   s t r i n g   S e r v i c e N a m e   {   g e t ;   s e t ;   } 
 
                 i n t e r n a l   a b s t r a c t   s t r i n g   S h o r t S e r v i c e N a m e   {   g e t ;   s e t ;   } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   E x p o s e s   t h e   r e s u l t   o f   t h e   l a s t   a v a i l a b i l i t y   t e s t 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   b o o l   I s A v a i l a b l e 
 
                 { 
 
                         g e t   {   r e t u r n   i s A v a i l a b l e ;   } 
 
                 } 
 
 
 
                 i n t e r n a l   i n t   S t a t u s 
 
                 { 
 
                         g e t   {   r e t u r n   t h i s . s t a t u s ;   } 
 
                 } 
 
 
 
                 i n t e r n a l   s t r i n g   L a s t A t t e m p t 
 
                 { 
 
                         g e t 
 
                         { 
 
                                 i f   ( t h i s . E n a b l e d ) 
 
                                 { 
 
                                         r e t u r n   G e t L a s t A t t e m p t S t r i n g ( t h i s . I s A v a i l a b l e ) ; 
 
                                 } 
 
                                 e l s e 
 
                                 { 
 
                                         r e t u r n   " - " ; 
 
                                 } 
 
                         } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   S t o r e s   n o t i c e s   t o   p r e s e n t   t o   t h e   c l i e n t .   C o u l d   b e   u s e d   f o r   
 
                 / / /   m a i n t a n c e   n o t i c e s ,   b u g   a d v i s o r i e s ,   e t c 
 
                 / / /   < / s u m m a r y > 
 
                 i n t e r n a l   s t r i n g   N o t i c e 
 
                 { 
 
                         g e t   {   r e t u r n   n o t i c e ;   } 
 
                         s e t   {   n o t i c e   =   v a l u e ;   } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   A   p r o p e r t y   t o   d e t e r m i n e   w h e t h e r   a   s i t e   i s   d e f i n e d 
 
                 / / /   < / s u m m a r y > 
 
                 i n t e r n a l   b o o l   E n a b l e d 
 
                 { 
 
                         g e t 
 
                         { 
 
                                 r e t u r n   t h i s . e n a b l e d ; 
 
                         } 
 
                         s e t 
 
                         { 
 
                                 t h i s . e n a b l e d   =   v a l u e ; 
 
                         } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   A   s t r i n g   c o n t a i n i n g   t h e   d e b u g   o u t p u t   f r o m   t h e   l a s t   a v a i l a b i l i t y 
 
                 / / /   c h e c k 
 
                 / / /   < / s u m m a r y > 
 
                 i n t e r n a l   s t r i n g   D e b u g L o g 
 
                 { 
 
                         g e t   {   r e t u r n   d e b u g O u t p u t . T o S t r i n g ( ) ;   } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   M e s s a g e   t h a t   w i l l   b e   s e n t   t o   t h e   c l i e n t 
 
                 / / /   < / s u m m a r y > 
 
                 i n t e r n a l   s t r i n g   C l i e n t M e s s a g e 
 
                 { 
 
                         g e t 
 
                         { 
 
                                 i f   ( t h i s . E n a b l e d ) 
 
                                 { 
 
                                         S t r i n g B u i l d e r   s b   =   n e w   S t r i n g B u i l d e r ( ) ; 
 
 
 
                                         s b . A p p e n d L i n e ( U r l ) ; 
 
 
 
                                         i f   ( ! S t r i n g . I s N u l l O r E m p t y ( t h i s . v e r s i o n ) ) 
 
                                         { 
 
                                                 s b . A p p e n d F o r m a t ( " B u i l d :   { 0 } { 1 } " ,   t h i s . v e r s i o n ,   E n v i r o n m e n t . N e w L i n e ) ; 
 
                                         } 
 
 
 
                                         i f   ( ! S t r i n g . I s N u l l O r E m p t y ( t h i s . n o t i c e ) ) 
 
                                         { 
 
                                                 s b . A p p e n d F o r m a t ( " N o t i c e :   { 0 } { 1 } " ,   t h i s . n o t i c e ,   E n v i r o n m e n t . N e w L i n e ) ; 
 
                                         } 
 
 
 
                                         i f   ( t h i s . l a t e n c y . T o t a l M i l l i s e c o n d s   ! =   0 ) 
 
                                         { 
 
                                                 s b . A p p e n d F o r m a t ( " L a t e n c y :   { 0 : N 0 }   m s { 1 } " ,   t h i s . l a t e n c y . T o t a l M i l l i s e c o n d s ,   E n v i r o n m e n t . N e w L i n e ) ; 
 
                                         } 
 
 
 
                                         i f   ( ! S t r i n g . I s N u l l O r E m p t y ( t h i s . s e r v e r N a m e ) ) 
 
                                         { 
 
                                                 s b . A p p e n d F o r m a t ( " S e v e r :   { 0 } { 1 } " ,   t h i s . s e r v e r N a m e ,   E n v i r o n m e n t . N e w L i n e ) ; 
 
                                         } 
 
 
 
                                         i f   ( ! S t r i n g . I s N u l l O r E m p t y ( t h i s . l a s t E r r o r ) ) 
 
                                         { 
 
                                                 s b . A p p e n d F o r m a t ( " L a s t   E r r o r :   { 0 } { 1 } " ,   t h i s . l a s t E r r o r ,   E n v i r o n m e n t . N e w L i n e ) ; 
 
                                         } 
 
 
 
                                         t h i s . c l i e n t M e s s a g e   =   s b . T o S t r i n g ( ) ; 
 
                                 } 
 
                                 e l s e 
 
                                 { 
 
                                         t h i s . c l i e n t M e s s a g e   =   " N o t   S u p p o r t e d " ; 
 
                                 } 
 
 
 
                                 r e t u r n   t h i s . c l i e n t M e s s a g e ; 
 
                         } 
 
                 } 
 
 
 
                 p r o t e c t e d   i n t   s t a t u s ; 
 
                 p r i v a t e   L o g g e r   l o g g e r ; 
 
                 p r i v a t e   s t r i n g   v e r s i o n ; 
 
                 p r i v a t e   b o o l   e n a b l e d ; 
 
                 p r i v a t e   s t r i n g   n o t i c e ; 
 
                 p r i v a t e   s t r i n g   l a s t E r r o r ; 
 
                 p r i v a t e   E x c e p t i o n   l a s t E x c e p t i o n ; 
 
                 p r i v a t e   s t r i n g   c l i e n t M e s s a g e ; 
 
                 p r i v a t e   s t r i n g   s e r v e r N a m e ; 
 
                 p r i v a t e   S t o p w a t c h   s t o p W a t c h ; 
 
                 p r i v a t e   T i m e S p a n   l a t e n c y ; 
 
                 p r i v a t e   b o o l   i s A v a i l a b l e ; 
 
                 p r i v a t e   D a t e T i m e   l a s t T e s t e d ; 
 
                 p r i v a t e   S t r i n g B u i l d e r   d e b u g O u t p u t ; 
 
                 / /   t w o   c o u n t e r s   f o r   c o n s e c u t i v e   f a i l u r e s   a n d   c o n s e c u t i v e   s u c c e s s   f o r   s e r v i c e s 
 
                 p r i v a t e   i n t   c o n s e c u t i v e F a i l u r e s   =   0 ; 
 
                 p r i v a t e   i n t   c o n s e c u t i v e S u c c e s s   =   C o n f i g u r a t i o n . I n s t a n c e . I s E m a i l S e t t i n g s I n i t   ?   C o n f i g u r a t i o n . I n s t a n c e . N u m S u c c e s s B e f o r e N o t i f i c a t i o n   +   1   :   0 ; 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   Z e r o - a r g   C o n s t r u c t o r   -   C r e a t e s   a   s i m p l e   i n s t a n c e   o f   
 
                 / / /   T e s t S e r v i c e 
 
                 / / /   < / s u m m a r y > 
 
                 p r o t e c t e d   T e s t S e r v i c e ( L o g g e r   l o g g e r ) 
 
                 { 
 
                         t h i s . d e b u g O u t p u t   =   n e w   S t r i n g B u i l d e r ( ) ; 
 
                         t h i s . s t o p W a t c h   =   n e w   S t o p w a t c h ( ) ; 
 
                         t h i s . l o g g e r   =   l o g g e r ; 
 
                         t h i s . e n a b l e d   =   t r u e ; 
 
 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   T e s t s   a v a i l a b i l i t y   f o r   t h i s   s i t e   a n d   s e t s   t h e   s t a t u s   
 
                 / / /   a n d   i s A v a i l a b l e   f l a g s   a s   a p p r o p r i a t e . 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   v o i d   T e s t A v a i l a b i l i t y ( ) 
 
                 { 
 
                         b o o l   u p d a t e d   =   f a l s e ; 
 
                         t r y 
 
                         { 
 
                                 / /   C l e a r   t h e   c l i e n t   m e s s a g e   a n d   d e b u g   l o g   a n d   u p d a t e   l a s t T e s t e d   
 
                                 / /   t i m e 
 
                                 t h i s . c l i e n t M e s s a g e   =   n u l l ; 
 
                                 t h i s . l a s t T e s t e d   =   D a t e T i m e . N o w ; 
 
                                 t h i s . d e b u g O u t p u t   =   n e w   S t r i n g B u i l d e r ( ) ; 
 
 
 
                                 / /   C l e a r   a n y   p r e v i o u s   e r r o r s   
 
                                 C l e a r C l i e n t E r r o r ( ) ; 
 
 
 
                                 i f   ( t h i s . E n a b l e d ) 
 
                                 { 
 
                                         t h i s . L o g I n f o r m a t i o n ( " = =   { 0 }   s t a r t e d   = = " ,   t h i s . S e r v i c e N a m e ) ; 
 
                                         / /   T e s t   a v a i l a b i l i t y   a n d   u p d a t e   c l i e n t   s t a t u s 
 
                                         C o n d u c t A v a i l a b i l i t y T e s t ( o u t   i s A v a i l a b l e ) ; 
 
                                         U p d a t e C l i e n t S t a t u s ( ) ; 
 
                                         u p d a t e d   =   t r u e ; 
 
                                         t h i s . L o g I n f o r m a t i o n ( " = =   { 0 }   c o m p l e t e d .   A v a i l a b l e   =   { 1 }   = = " ,   t h i s . S e r v i c e N a m e ,   t h i s . i s A v a i l a b l e . T o S t r i n g ( ) ) ; 
 
 
 
                                         / /   c h e c k   i f   e m a i l   s e t t i n g s   i s   i n i t i a l i z e d ,   i f   n o t   s k i p   a l e r t e r 
 
                                         i f   ( ! C o n f i g u r a t i o n . I n s t a n c e . I s E m a i l S e t t i n g s I n i t ) 
 
                                         { 
 
                                                 / / L o g g e r . I n s t a n c e . L o g I n f o r m a t i o n ( " E m a i l   s e t t i n g s   n o t   f o u n d ,   s k i p   e m a i l   a l e r t e r " ) ; 
 
                                                 r e t u r n ; 
 
                                         } 
 
                                         / /   u p d a t e   c o u n t e r s   o f   c o n s e c u t i v e   f a i l u r e s   o r   s u c c e s s 
 
                                         i f   ( i s A v a i l a b l e ) 
 
                                         { 
 
                                                 c o n s e c u t i v e S u c c e s s + + ; 
 
                                                 / /   I n   o r d e r   t o   a v o i d   o v e r f l o w ,   a u t o m a t i c a l l y   r e s e t   c o u n t e r   a f t e r   i t   l a r g e r   t h a n   l i m i t 
 
                                                 i n t   c o u n t e r L i m i t   =   C o n f i g u r a t i o n . I n s t a n c e . N u m S u c c e s s B e f o r e N o t i f i c a t i o n   *   1 0 0 ; 
 
                                                 i f   ( c o n s e c u t i v e S u c c e s s   > =   c o u n t e r L i m i t ) 
 
                                                         c o n s e c u t i v e S u c c e s s   =   C o n f i g u r a t i o n . I n s t a n c e . N u m S u c c e s s B e f o r e N o t i f i c a t i o n   +   1 ; 
 
 
 
                                                 / /   R e s e t   c o n s e c u t i v e F a i l u r e s   t o   0   o n l y   F i x   m a i l   a r e   s e n t   o r   F i r s t E m a i l A l a r m   i s   n o t   s e n t 
 
                                                 / /   t h i s   m a k e s   o n l y   e n o u g h   c o n s e c u t i v e   f a i l u r e s   c a n   t r i g e r   f i s r t   e m a i l   a l a r m 
 
                                                 i f   ( c o n s e c u t i v e S u c c e s s   = =   C o n f i g u r a t i o n . I n s t a n c e . N u m S u c c e s s B e f o r e N o t i f i c a t i o n   | | 
 
                                                         c o n s e c u t i v e F a i l u r e s   <   C o n f i g u r a t i o n . I n s t a n c e . N u m F a i l B e f o r e F i r s t A l a r m ) 
 
                                                         c o n s e c u t i v e F a i l u r e s   =   0 ; 
 
                                         } 
 
                                         e l s e 
 
                                         { 
 
                                                 c o n s e c u t i v e F a i l u r e s + + ; 
 
                                                 / /   I n   o r d e r   t o   a v o i d   o v e r f l o w ,   a u t o m a t i c a l l y   r e s e t   c o u n t e r   a f t e r   i t   l a r g e r   t h a n   l i m i t 
 
                                                 / /   I t   m u s t   n o t   b r e a k   f a i l u r e s   e m a i l   a l e r t 
 
                                                 i n t   c o u n t e r L i m i t   =   C o n f i g u r a t i o n . I n s t a n c e . N u m F a i l B e f o r e E x t r a A l a r m   *   1 0 0 0 0 
 
                                                                                                 +   C o n f i g u r a t i o n . I n s t a n c e . N u m F a i l B e f o r e F i r s t A l a r m ; 
 
                                                 i f   ( c o n s e c u t i v e F a i l u r e s   > =   c o u n t e r L i m i t ) 
 
                                                 { 
 
                                                         c o n s e c u t i v e F a i l u r e s   =   C o n f i g u r a t i o n . I n s t a n c e . N u m F a i l B e f o r e F i r s t A l a r m 
 
                                                                                                                 +   C o n f i g u r a t i o n . I n s t a n c e . N u m F a i l B e f o r e E x t r a A l a r m ; 
 
                                                 } 
 
 
 
                                                 / /   O n l y   a f t e r   f a i l u r e   a l e r t   i s   s e n t ,   t h e n   u p d a t e   c o n s e c u t i v e   s u c c e s s   t o   0   f o r   p r e p a r i n g   t o   s e n d   f i x   m a i l 
 
                                                 i f   ( c o n s e c u t i v e F a i l u r e s   > =   C o n f i g u r a t i o n . I n s t a n c e . N u m F a i l B e f o r e F i r s t A l a r m ) 
 
                                                         c o n s e c u t i v e S u c c e s s   =   0 ; 
 
                                         } 
 
 
 
                                         / /   T r i g e r   e m a i l   a l e r t e r 
 
                                         / / i f   ( C o n f i g u r a t i o n . I n s t a n c e . I s E m a i l S e t t i n g s I n i t ) 
 
                                         / /     S e n d E m a i l A l e r t ( t h i s . E n v i r o n m e n t N a m e ,   t h i s . S e r v i c e N a m e ,   c o n s e c u t i v e F a i l u r e s ,   c o n s e c u t i v e S u c c e s s ) ; 
 
                                 } 
 
                                 e l s e 
 
                                 { 
 
                                         t h i s . s t a t u s   =   0 ; 
 
                                         t h i s . L o g I n f o r m a t i o n ( " = =   { 0 }   i s   d i a b l e d .   I g n o r i n g .   = = " ,   t h i s . S e r v i c e N a m e ) ; 
 
                                 } 
 
                         } 
 
                         c a t c h   ( E x c e p t i o n   e ) 
 
                         { 
 
                                 i f   ( ! u p d a t e d ) 
 
                                 { 
 
                                         U p d a t e C l i e n t S t a t u s ( ) ; 
 
                                         S e t C l i e n t E r r o r ( e ) ; 
 
                                 } 
 
                                 t h i s . L o g E x c e p t i o n D e t a i l ( e ) ; 
 
                         } 
 
                 } 
 
                 / * 
 
                 i n t e r n a l   v o i d   R e a d P r e v i o u s S t a t u s ( X m l N o d e   s i t e N o d e ) 
 
                 { 
 
                         i f   ( s i t e N o d e [ t h i s . S t a t u s N o d e N a m e ]   ! =   n u l l ) 
 
                         { 
 
                                 t h i s . s t a t u s   =   C o n v e r t . T o I n t 3 2 ( s i t e N o d e [ t h i s . S t a t u s N o d e N a m e ] . I n n e r T e x t ) ; 
 
                         } 
 
 
 
                         i f   ( s i t e N o d e [ t h i s . L a s t A t t e m p t N o d e N a m e ]   ! =   n u l l ) 
 
                         { 
 
                                 t h i s . i s A v a i l a b l e   =   s i t e N o d e [ t h i s . L a s t A t t e m p t N o d e N a m e ] . I n n e r T e x t   = =   G e t L a s t A t t e m p t S t r i n g ( t r u e )   ?   t r u e :   f a l s e ; 
 
                         } 
 
                 } 
 
                 * / 
 
                 i n t e r n a l   s t r i n g   G e t L a s t E r r o r ( ) 
 
                 { 
 
                         i f   ( t h i s . l a s t E r r o r   ! =   n u l l   & &   t h i s . l a s t E r r o r . L e n g t h   >   0 ) 
 
                                 r e t u r n   t h i s . l a s t E r r o r ; 
 
                         e l s e 
 
                                 r e t u r n   " " ; 
 
                 } 
 
 
 
                 i n t e r n a l   v o i d   S e t C l i e n t E r r o r ( E x c e p t i o n   e ) 
 
                 { 
 
                         t h i s . l a s t E r r o r   =   e . M e s s a g e ; 
 
                         t h i s . l a s t E x c e p t i o n   =   e ; 
 
                 } 
 
 
 
                 i n t e r n a l   v o i d   S e t C l i e n t E r r o r ( s t r i n g   E r r o r ) 
 
                 { 
 
                         t h i s . l a s t E r r o r   =   E r r o r ; 
 
                 } 
 
 
 
                 i n t e r n a l   v o i d   C l e a r C l i e n t E r r o r ( ) 
 
                 { 
 
                         t h i s . l a s t E r r o r   =   n u l l ; 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   S t a r t A p i T i m e r ( ) 
 
                 { 
 
                         l a t e n c y   =   d e f a u l t ( T i m e S p a n ) ; 
 
                         s t o p W a t c h . S t a r t ( ) ; 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   S t o p A p i T i m e r ( ) 
 
                 { 
 
                         s t o p W a t c h . S t o p ( ) ; 
 
                         l a t e n c y   =   s t o p W a t c h . E l a p s e d ; 
 
                         s t o p W a t c h . R e s e t ( ) ; 
 
 
 
                         t h i s . L o g I n f o r m a t i o n ( " L a t e n c y :   { 0 : N 2 }   m s " ,   l a t e n c y . T o t a l M i l l i s e c o n d s . T o S t r i n g ( ) ) ; 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   E n d T e s t ( s t r i n g   s e r v e r N a m e ,   s t r i n g   v e r s i o n ) 
 
                 { 
 
                         t h i s . s e r v e r N a m e   =   s e r v e r N a m e ; 
 
                         t h i s . v e r s i o n   =   v e r s i o n ; 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   L o g V e r s i o n ( ) 
 
                 { 
 
                         s t r i n g   v e r s i o n S t r   =   S t r i n g . F o r m a t ( " B u i l d :   { 0 } " ,   v e r s i o n ) ; 
 
 
 
                         i f   ( t h i s . l o g g e r   ! =   n u l l ) 
 
                                 t h i s . l o g g e r . L o g V e r s i o n ( E n v i r o n m e n t N a m e ,   S e r v i c e N a m e ,   v e r s i o n S t r ) ; 
 
 
 
                 } 
 
                 / / /   < s u m m a r y > 
 
                 / / /   S e n d   e m a i l   a l e r t   w h e n   s e r v i c e   e n c o u n t e r   c o n s e c u t i v e   f a i l u r e s 
 
                 / / /   a l s o   s e n d   e m a i l   n o t i f i c a t i o n   w h e n   i t   g e t   f i x e d 
 
                 / / /   < / s u m m a r y > 
 
                 / / /   < p a r a m   n a m e = " s i t e N a m e " > T e s t   b e d   n a m e < / p a r a m > 
 
                 / / /   < p a r a m   n a m e = " s e r v i c e N a m e " > S e r v i c e   n a m e < / p a r a m > 
 
                 / / /   < p a r a m   n a m e = " c o n s e c u t i v e F a i l u r e s " > C o n s e c u t i v e   f a i l u r e s   c a t c h e d   b y   m o n i t o r < / p a r a m > 
 
                 / / /   < p a r a m   n a m e = " c o n s e c u t i v e S u c c e s s " > C o n s e c u t i v e   s u c c e s s   c a t c h e d   b y   m o n i t o r < / p a r a m > 
 
                 p u b l i c   v o i d   S e n d E m a i l A l e r t ( ) 
 
                 { 
 
                         i f   ( C o n f i g u r a t i o n . I n s t a n c e . I s E m a i l S e t t i n g s I n i t ) 
 
                         { 
 
                                 E m a i l A l e r t e r   a l e r t e r   =   n e w   E m a i l A l e r t e r ( t h i s . E n v i r o n m e n t N a m e ,   t h i s . S e r v i c e N a m e ,   c o n s e c u t i v e F a i l u r e s ,   c o n s e c u t i v e S u c c e s s ) ; 
 
                                 / /   O n l y   t r i g e r   e m a i l   s e n d i n g   w h e n   r e l a t e d   s i t e   i s   f o u n d   i n   e m a i l   s e t t i n g s 
 
                                 / / L o g g e r . I n s t a n c e . L o g I n f o r m a t i o n ( " s e n d i n g   e m a i l   a l e r t   -   "   +   t h i s . E n v i r o n m e n t N a m e   +   "   :   "   +   t h i s . S e r v i c e N a m e ) ; 
 
                                 i f   ( a l e r t e r . C h e c k E m a i l E n a b l e ( t h i s . E n v i r o n m e n t N a m e ) ) 
 
                                 { 
 
                                         i f   ( a l e r t e r . C h e c k S e r v i c e E m a i l E n a b l e d ( t h i s . S e r v i c e N a m e )   & &   t h i s . I s A v a i l a b l e   & &   ( a l e r t e r . E m a i l T y p e   = =   E m a i l A l e r t e r . A l e r t e r T y p e . F i x N o t i f i c a t i o n ) ) 
 
                                         { 
 
                                                 L o g g e r . I n s t a n c e . L o g E r r o r ( " s e n d i n g   f i x   a l a r m   f o r   "   +   t h i s . E n v i r o n m e n t N a m e ) ; 
 
                                                 a l e r t e r . S e n d E m a i l A l e r t ( ) ;   / /   w i l l   s e n d   f i x   n o t i f i c a t i o n   e m a i l 
 
                                         } 
 
                                         e l s e   i f   ( a l e r t e r . C h e c k S e r v i c e E m a i l E n a b l e d ( t h i s . S e r v i c e N a m e )   & &   ( ! t h i s . I s A v a i l a b l e )   & &   ( 
 
                                                 ( a l e r t e r . E m a i l T y p e   = =   E m a i l A l e r t e r . A l e r t e r T y p e . F i r s t A l a r m   | |   a l e r t e r . E m a i l T y p e   = =   E m a i l A l e r t e r . A l e r t e r T y p e . E x t r a A l a r m ) ) ) 
 
                                         { 
 
                                                 L o g g e r . I n s t a n c e . L o g E r r o r ( " s e n d i n g   b r o k e n   a l a r m   f o r   "   +   t h i s . E n v i r o n m e n t N a m e ) ; 
 
                                                 a l e r t e r . L a s t S e r v i c e E r r o r   =   t h i s . l a s t E x c e p t i o n ; 
 
                                                 a l e r t e r . S e n d E m a i l A l e r t ( ) ;   / /   w i l l   s e n d   f a i l u r e   a l a r m   e m a i l 
 
                                         } 
 
                                 } 
 
                         } 
 
                         e l s e 
 
                         { 
 
                                 L o g I n f o r m a t i o n ( " e m a i l   s e t t i n g s   n o t   i n i t i a l i z e d " ) ; 
 
                         } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   U p d a t e s   c l i e n t   s t a t u s 
 
                 / / /   < / s u m m a r y > 
 
                 p r i v a t e   v o i d   U p d a t e C l i e n t S t a t u s ( ) 
 
                 { 
 
                         i f   ( i s A v a i l a b l e ) 
 
                         { 
 
                                 / / s t a t u s   =   M a t h . M i n ( 1 4 ,   s t a t u s   +   3 ) ; 
 
                                 / / s t a t u s   =   M a t h . M a x ( 0 ,   s t a t u s ) ; 
 
                                 s t a t u s   =   M a t h . M i n ( 1 4 ,   s t a t u s   +   3 ) ; 
 
                         } 
 
                         e l s e 
 
                         { 
 
                                 / / s t a t u s   =   M a t h . M a x ( - 1 4 ,   s t a t u s   -   3 ) ; 
 
                                 / / s t a t u s   =   M a t h . M i n ( 0 ,   s t a t u s ) ; 
 
                                 s t a t u s   =   M a t h . M a x ( - 1 4 ,   s t a t u s   -   6 ) ; 
 
                         } 
 
                 } 
 
 
 
                 p r i v a t e   s t r i n g   G e t L a s t A t t e m p t S t r i n g ( b o o l   i s A v a i l a b l e ) 
 
                 { 
 
                         r e t u r n   i s A v a i l a b l e   ?   " !"   :   " !" ; 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   L o g I n f o r m a t i o n ( s t r i n g   f o r m a t ,   p a r a m s   s t r i n g [ ]   a r g s ) 
 
                 { 
 
                         i f   ( t h i s . l o g g e r   ! =   n u l l ) 
 
                         { 
 
                                 t h i s . l o g g e r . L o g I n f o r m a t i o n ( f o r m a t ,   a r g s ) ; 
 
                         } 
 
                         e l s e 
 
                         { 
 
                                 D e b u g . W r i t e L i n e ( S t r i n g . F o r m a t ( f o r m a t ,   a r g s ) ) ; 
 
                         } 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   L o g I n f o r m a t i o n ( s t r i n g   t e x t ) 
 
                 { 
 
                         i f   ( t h i s . l o g g e r   ! =   n u l l ) 
 
                         { 
 
                                 t h i s . l o g g e r . L o g I n f o r m a t i o n ( t e x t ) ; 
 
                         } 
 
                         e l s e 
 
                         { 
 
                                 D e b u g . W r i t e L i n e ( t e x t ) ; 
 
                         } 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   L o g E x c e p t i o n D e t a i l ( E x c e p t i o n   e ) 
 
                 { 
 
                         i f   ( t h i s . l o g g e r   ! =   n u l l ) 
 
                         { 
 
                                 t h i s . l o g g e r . L o g E x c e p t i o n D e t a i l ( e ) ; 
 
                         } 
 
                         e l s e 
 
                         { 
 
                                 D e b u g . W r i t e L i n e ( e . T o S t r i n g ( ) ) ; 
 
                         } 
 
                 } 
 
 
 
                 p r o t e c t e d   v o i d   L o g E r r o r ( s t r i n g   t e x t ) 
 
                 { 
 
                         i f   ( t h i s . l o g g e r   ! =   n u l l ) 
 
                         { 
 
                                 t h i s . l o g g e r . L o g E r r o r ( t e x t ) ; 
 
                         } 
 
                         e l s e 
 
                         { 
 
                                 D e b u g . W r i t e L i n e ( t e x t ) ; 
 
                         } 
 
                 } 
 
         } 
 
 } 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\TestSite.cs ===
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Threading;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    /// <summary>
    /// TestSite - This class represents a test environment that will 
    /// be monitored by the monitoring service.
    /// </summary>
    public class TestSite
    {
        /// <summary>
        /// The services running on this site
        /// </summary>
        protected Dictionary<string, TestService> testServices;        

        protected  bool isDefined;
        /// <summary>
        /// The name of this site
        /// </summary>
        private string siteName;        
        private Logger logger;
        private List<Thread> workerThreads;

        public bool IsDefined
        {
            get
            {
                return this.isDefined;
            }
        }

        /// <summary>
        /// The name of the test site
        /// </summary>
        public string SiteName
        {
            get
            {
                return this.siteName;
            }
        }

        //public Dictionary<string, TestService> testServicesByName = new Dictionary<string, TestService>();

        public Dictionary<string, TestService> TestServices
        {
            get { return testServices; }
        }

        /// <summary>
        /// Constructor - Creates an instance of TestSite based on the
        /// environment name
        /// </summary>
        /// <param name="name">The name of the site</param>
        public TestSite(string siteName, Dictionary<string, TestService> testServices)
        {
            this.siteName = siteName;
            this.testServices = testServices;
            this.logger = Logger.GetLogger(siteName);
        }

        /// <summary>
        /// This synchronous method tests the availability of all services 
        /// belonging to this test site sequentially
        /// </summary>
        public void TestAvailability()
        {
            //Logger.Instance.LogInformation(this.siteName + " started");
            //foreach (TestService service in testServices.Values)
            //{
            //    service.TestAvailability();
            //    if (service.Enabled)
            //    {
            //        this.logger.LogAvailability(service.ServiceName, service.IsAvailable);
            //        service.SendEmailAlert();
            //    }
            //}
            //Logger.Instance.LogInformation(this.siteName + " completed");

            this.workerThreads = new List<Thread>();
            Logger.Instance.LogInformation(this.siteName + " started");
            foreach (TestService service in testServices.Values)
            {
                Thread serviceThread = new Thread(new ThreadStart(service.TestAvailability));
                serviceThread.Name = this.siteName + "." + service.ServiceName;
                workerThreads.Add(serviceThread);
                serviceThread.Start();

                // Wait on the threads
                foreach (Thread thread in this.workerThreads)
                {
                    //make the service thread timeout 10 seconds less than the site thread timeout
                    thread.Join(Properties.Settings.Default.DefaultSiteTimeoutInMilliseconds - 10000);
                }

                // If any thread hasn't finished execution, terminate it and log
                foreach (Thread thread in workerThreads)
                {
                    if (thread.ThreadState != System.Threading.ThreadState.Stopped)
                    {
                        thread.Abort();
                        Logger.Instance.LogInformation(thread.Name + " thread timed out");
                    }
                }

                //service.TestAvailability();
                if (service.Enabled)
                {
                    this.logger.LogAvailability(service.ServiceName, service.IsAvailable);
                    service.SendEmailAlert();
                }
            }
            Logger.Instance.LogInformation(this.siteName + " completed");
        }

        internal string XmlNode
        {
            get
            {
                XmlSerializer serviceSerializer = new XmlSerializer(typeof(TestService));
                //XmlSerializer siteSerializer = new XmlSerializer(typeof(TestSite));

                StringBuilder sb = new StringBuilder();
                XmlWriter writer = XmlWriter.Create(sb);

                //siteSerializer.Serialize(writer, this);
                
                writer.WriteStartElement("Site");
                writer.WriteStartElement("SiteName");
                writer.WriteValue(this.SiteName);
                writer.WriteEndElement();

                foreach (TestService testService in this.testServices.Values)
                {
                    #region old_code
                    ////serializer.Serialize(writer, testService);

                    //// @TODO hammads: Change this to more generic node names.
                    //// Currently doing this to maintain backwards compatibility
                    //// Write Status
                    //writer.WriteStartElement(testService.StatusNodeName);
                    //writer.WriteValue(testService.Status);
                    //writer.WriteEndElement();

                    //// Write Last Attempt
                    //writer.WriteStartElement(testService.LastAttemptNodeName);
                    //writer.WriteValue(testService.LastAttempt);
                    //writer.WriteEndElement();

                    //// Write Client Message
                    //writer.WriteStartElement(testService.ClientMessageNodeName);
                    //writer.WriteValue(testService.ClientMessage);
                    //writer.WriteEndElement();
                    #endregion
                    writer.WriteStartElement("Service");

                    //if (testService.ServiceName == "StorageDiagnostic")
                    {
                        //service name
                        writer.WriteStartElement("ServiceName");
                        writer.WriteValue(testService.ServiceName);
                        writer.WriteEndElement();

                        //short service name
                        writer.WriteStartElement("ShortServiceName");
                        writer.WriteValue(testService.ShortServiceName);
                        writer.WriteEndElement();

                        //tooltip (url)
                        writer.WriteStartElement("ClientMessage");
                        writer.WriteValue(testService.ClientMessage);
                        writer.WriteEndElement();

                        //status
                        writer.WriteStartElement("Status");
                        writer.WriteValue(testService.Status);
                        writer.WriteEndElement();

                        //last attempt
                        writer.WriteStartElement("LastAttempt");
                        writer.WriteValue(testService.LastAttempt);
                        writer.WriteEndElement();
                    }
                    writer.WriteEndElement(); //service

                }

                writer.WriteEndElement();
                writer.Flush();
                writer.Close();
                
                string node = sb.ToString();
                node = node.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "");

                return node;
            }
        }
        /*
        internal void ReadPreviousStatus(string statusXml)
        {
            XmlDocument doc = new XmlDocument();
            doc.InnerXml = statusXml;

            Dictionary<string, TestService> servicesByStatusNodeName = new Dictionary<string, TestService>();
            Dictionary<string, TestService> servicesByLastAttemptNodeName = new Dictionary<string, TestService>();

            XmlNode siteNode = doc.SelectSingleNode("/SiteList/Site[SiteName='" + this.siteName + "']");

            foreach (TestService service in this.testServices.Values)
            {
                service.ReadPreviousStatus(siteNode);
            }
        }
        */
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\SiteMonitor.cs ===
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading;
using System.Xml;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public class SiteMonitor
    {
        public string OutputFile
        {
            get { return outputFile; }
        }

        public static SiteMonitor Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new SiteMonitor(
                        Configuration.ResolvePath(Properties.Settings.Default.OutputFile),
                        Properties.Settings.Default.PollIntervalInMilliseconds,
                        Properties.Settings.Default.DefaultSiteTimeoutInMilliseconds);
                }

                return SiteMonitor.instance;
            }
        }

        private DateTime lastUpdated;
        private List<Thread> workerThreads;
        private string statusXml;
        private string outputFile;
        private System.Timers.Timer timer;
        private int threadTimeout;
        private static SiteMonitor instance;        

        /// <summary>
        /// Constructor - creates a new instance of the SiteMonitor service
        /// and sets up the timer.
        /// </summary>
        /// <param name="outputFile">The output file that status will be written to</param>
        /// <param name="pollInterval">The polling interval in milliseconds</param>
        /// <param name="threadTimeout">The timeout for each site</param>
        protected SiteMonitor(string outputFile, int pollInterval, int threadTimeout)
        {
            // Set up the instance variables
            this.outputFile = outputFile;
            this.threadTimeout = threadTimeout;
            this.workerThreads = new List<Thread>();

            // Set up the timer
            this.timer = new System.Timers.Timer();
            this.timer.Interval = pollInterval;
            this.timer.Elapsed += new System.Timers.ElapsedEventHandler(this.FireUpdate);
        }

        public void Start()
        {
            System.Threading.ThreadPool.QueueUserWorkItem(new WaitCallback(FirstUpdate));
        }

        public void Stop()
        {
            foreach (Thread thread in workerThreads)
            {
                if (thread.ThreadState != System.Threading.ThreadState.Stopped)
                {
                    thread.Abort();
                    Logger.Instance.LogInformation(thread.Name + " thread timed out");
                }
            }
        }

        private void FirstUpdate(object sender)
        {
            FireUpdate(sender, null);
        }

        /// <summary>
        /// This method fires an update for all sites. 
        /// It is called when the timer fires.
        /// </summary>
        /// <param name="sender">sender</param>
        /// <param name="e">args</param>
        private void FireUpdate(object sender, System.Timers.ElapsedEventArgs e)
        {
            this.timer.Enabled = false;
            
            this.UpdateSites();

            if (this.timer != null)
            {
                this.timer.Enabled = true;
            }
        }

        /// <summary>
        /// This method updates the status for all sites, using one thread per site.
        /// </summary>
        public void UpdateSites()
        {   
            Logger.Instance.LogInformation("Start Update for All Sites");

            try
            {
                XmlDocument doc = new XmlDocument();
                this.workerThreads = new List<Thread>();
                DateTime beforePoll = DateTime.Now;

                // Fire up a thread for each site
                foreach (TestSite site in Configuration.Instance.TestSites.Values)
                {
                    Thread siteThread = new Thread(new ThreadStart(site.TestAvailability));
                    siteThread.Name = site.SiteName;
                    workerThreads.Add(siteThread);                    
                    siteThread.Start();
                }

                // Wait on the threads
                foreach (Thread thread in this.workerThreads)
                {
                    thread.Join(this.threadTimeout);
                }

                // If any thread hasn't finished execution, terminate it and log
                foreach (Thread thread in workerThreads)
                {
                    if (thread.ThreadState != System.Threading.ThreadState.Stopped)
                    {
                        thread.Abort();
                        Logger.Instance.LogInformation(thread.Name + " thread timed out");
                    }
                }

                // create root node
                Logger.Instance.LogInformation("Creating XML output");

                XmlNode header = doc.CreateProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");
                XmlNode root = doc.CreateElement("SiteList");

                // add misc info
                MonitoringUtil.CreateAndAppendNode(doc, ref root, "CurrentVersion", Properties.Settings.Default.Version.ToString(CultureInfo.InvariantCulture));
                MonitoringUtil.CreateAndAppendNode(doc, ref root, "CurrentVersionUrl", Properties.Settings.Default.GadgetDownloadUrl);
                MonitoringUtil.CreateAndAppendNode(doc, ref root, "LastUpdated", DateTime.Now.ToString());
                MonitoringUtil.CreateAndAppendNode(doc, ref root, "NewLocation", Properties.Settings.Default.DefaultMonitorUrl);
                MonitoringUtil.CreateAndAppendNode(doc, ref root, "UpdateInterval", Properties.Settings.Default.ClientPollIntervalInMilliseconds.ToString());

                // add site info
                foreach (TestSite site in Configuration.Instance.TestSites.Values)
                {
                    root.InnerXml += site.XmlNode;
                }

                doc.AppendChild(header);
                doc.AppendChild(root);

                lastUpdated = DateTime.Now;
                statusXml = doc.InnerXml;

                Logger.Instance.LogInformation("Writing XML to " + outputFile);

                try
                {
                    //Application.GlobalMutex.WaitOne();
                    File.WriteAllText(outputFile, doc.InnerXml);
                }
                catch (Exception e)
                {
                    Logger.Instance.LogError("Error occurred when writing out status " + e.Message + " " + e.StackTrace);
                    Logger.WriteExceptionToEventLog(e, String.Empty, System.Diagnostics.EventLogEntryType.Error);
                }
                finally
                {
                    //Application.GlobalMutex.ReleaseMutex();
                }

                Logger.Instance.LogInformation("End Update for All Sites");
                Logger.Instance.LogInformation(" - ");
            }
            catch (Exception e)
            {
                Logger.Instance.LogExceptionDetail(e);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\UDSPartnerService.cs ===
﻿using System;
using System.Diagnostics;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.Multiplayer;
using LiveN.Test.Services.Rewards;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Services;
using Rewards.Contracts;
using System.Collections.Generic;

namespace SiteMonitorNTService
{
    class UDSPartnerService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        //private UDSPartnerUtil udsPartUtil = null;
        UDSPartnerMonitoringBlock udsPartMonitor;

        public UDSPartnerService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;

            envConfig = Config.EnvironmentSettings.Environments[env];
            //udsPartUtil = new UDSPartnerUtil(
            //        this.envConfig.UDSPartnerProfileService.ToString(),
            //        this.envConfig.UDSPartnerGameDataService.ToString(),
            //        this.envConfig.UDSPartnerMessageService.ToString(),
            //        this.envConfig.UDSPartnerFriendService.ToString(),
            //        this.envConfig.UDSPartnerPresenceService.ToString(),
            //        this.envConfig.StsSettings.StsUrl,
            //        this.envConfig.StsSettings.ClientCertSubject,
            //        this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //        this.envConfig.WindowsLiveIDSettings.Policy,
            //        this.envConfig.WindowsLiveIDSettings.Environment,
            //        this.envConfig.StsSettings.TitleId2,
            //        this.envConfig.StsSettings.TitleVersion,
            //        this.envConfig.StsSettings.PlatformType,
            //        this.envConfig.StsSettings.ClientVersion,
            //        this.envConfig.StsSettings.AudienceUriUserData);

            udsPartMonitor = new UDSPartnerMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.UDSPartner;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get { return this.envConfig.UDSPartnerProfileService.ToString();  }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                ClearClientError();

                string userName = this.envConfig.UserSettings[0].Membername;
                string password = this.envConfig.UserSettings[0].Password;

                StartApiTimer();

                List<IResult> multiResults = udsPartMonitor.RunTests();
                foreach (IResult res in multiResults)
                {
                    if (res.Passed == false)
                    {
                        SetClientError(res.Error);
                        return;
                    }
                }
                result = true;

                StopApiTimer();

            }
            catch (Exception e)
            {
                result = false;
                LogError(e.ToString());
                SetClientError(e);
                
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\SpotlightService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.Multiplayer;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;
using System.Diagnostics;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    class SpotlightService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        SpotlightMonitoringBlock spotlightMonitor;

        public SpotlightService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;
            envConfig = Config.EnvironmentSettings.Environments[env];

            spotlightMonitor = new SpotlightMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.Spotlight;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get { return envConfig.NotificationsService.ToString(); }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                StartApiTimer();

                List<IResult> spotlightResult = spotlightMonitor.RunTests();
                result = spotlightResult.All<IResult>(r => r.Passed);
                if (!result)
                {
                    SetClientError(spotlightResult.First<IResult>(r => !r.Passed).Error);
                }
                
                StopApiTimer();
            }
            catch (Exception e)
            {
                LogExceptionDetail(e);
                SetClientError(e);
                result = false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\UDSService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Services.Rewards;
using LiveN.Test.Framework.Configuration;
using System.Diagnostics;
using LiveN.Test.Services.Multiplayer;
using Rewards.Contracts;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    class UDSService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        //private UDSUtil udsUtil = null;
        UDSMonitoringBlock udsMonitor;

        public UDSService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            ServiceName = serviceName;
            ShortServiceName = shortServiceName;
            environment = env;

            envConfig = Config.EnvironmentSettings.Environments[env];
            //udsUtil = new UDSUtil(
            //        this.envConfig.UDSProfileService.ToString(),
            //        this.envConfig.UDSGameDataService.ToString(),
            //        this.envConfig.StsSettings.StsUrl,
            //        this.envConfig.StsSettings.ClientCertSubject,
            //        this.envConfig.WindowsLiveIDSettings.LiveIdServiceTarget,
            //        this.envConfig.WindowsLiveIDSettings.Policy,
            //        this.envConfig.WindowsLiveIDSettings.Environment,
            //        this.envConfig.StsSettings.TitleId3,
            //        this.envConfig.StsSettings.TitleVersion,
            //        this.envConfig.StsSettings.PlatformType,
            //        this.envConfig.StsSettings.ClientVersion);

            udsMonitor = new UDSMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.Rewards;
            }
        }

        internal override string EnvironmentName
        {
            get { return environment; }
        }

        public override string Url
        {
            get { return this.envConfig.UDSProfileService.ToString(); }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                ClearClientError();

                StartApiTimer();

                List<IResult> multiResults = udsMonitor.RunTests();
                foreach (IResult res in multiResults)
                {
                    if (res.Passed == false)
                    {
                        SetClientError(res.Error);
                        return;
                    }
                }

                result = true;

                StopApiTimer();

            }
            catch (Exception e)
            {
                LogError(e.ToString());
                SetClientError(e);

            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SiteMonitorNTService")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("SiteMonitorNTService")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("4dd1d1be-6eb1-4638-b9b1-5e3b204e5d9e")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Plugins\PluginProvider.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using Microsoft.Live.AddressBook.Test.ComponentLibrary.Interfaces;
using System.IO;
using Microsoft.Live.AddressBook.Test.ComponentLibrary;
using Microsoft.Live.AddressBook.Test.ComponentLibrary.Attributes;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public static class PluginProvider
    {
        private static List<PluginWrapper> components;
        public static List<PluginWrapper> GetComponents(string envName)
        {
            Logger.Instance.LogInformation("GetComponents(" + envName + ")");
            LoadPluginComponents(envName);
            return components;
        } //end Components

        private static void LoadPluginComponents(string envName)
        {
            if (components == null)
            {
                //the components have never been loaded
                components = new List<PluginWrapper>();
            }
            else
            {
                //reset the plugins that have been loaded
                components.Clear();
            }

            List<Assembly> pluginAssemblies = LoadPluginAssmeblies();
            List<IPluginInterface> dllComponents = LoadComponentPlugins(pluginAssemblies);

            foreach (IPluginInterface component in dllComponents)
            {
                component.SetEnvironment(envName);
                components.Add(new PluginWrapper(component));
            }

        }//end private LoadPlugins

        private static List<Assembly> LoadPluginAssmeblies()
        {
            DirectoryInfo dirInfo = new DirectoryInfo(Path.Combine("c:\\temp\\", "plugins"));
            Logger.Instance.LogInformation("checking " + dirInfo.FullName + "...");
            FileInfo[] files = dirInfo.GetFiles("*.dll");
            List<Assembly> pluginAssemblies = new List<Assembly>();
            if (files != null && files.Length != 0)
            {
                foreach (FileInfo file in files)
                {
                    pluginAssemblies.Add(Assembly.LoadFile(file.FullName));
                }
                Logger.Instance.LogInformation("loading dlls ..." + files.Length.ToString());
            }
            return pluginAssemblies;
        }//end LoadAssemblies

        private static List<IPluginInterface> LoadComponentPlugins(List<Assembly> assemblies)
        {
            List<Type> availableComponents = new List<Type>();

            foreach (Assembly assembly in assemblies)
                availableComponents.AddRange(assembly.GetTypes());

            // get a list of objects that implement the PluginInterface AND have the ComponentAttribute
            List<Type> componentList = availableComponents.FindAll(delegate(Type t)
            {
                List<Type> interfaceTypes = new List<Type>(t.GetInterfaces());
                object[] arr = t.GetCustomAttributes(typeof(PluginComponentAttribute), true);
                return !(arr == null || arr.Length == 0) && interfaceTypes.Contains(typeof(IPluginInterface));
            });
            Logger.Instance.LogInformation("found " + componentList.Count + " usable plugins...");
            // conver the list of Objects to an instantiated list of IComponents
            return componentList.ConvertAll<IPluginInterface>(delegate(Type t) { return Activator.CreateInstance(t) as IPluginInterface; });
        }//end LoadPlugins
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\WebStsService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.Monitoring;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Services.WebSTS;
using System.Diagnostics;
using LiveN.Test.Services;

namespace SiteMonitorNTService
{
    /// <summary>
    /// 
    /// </summary>
    public class WebStsService : TestService
    {
        string environment = "";
        private EnvironmentElement envConfig = null;
        WebStsMonitoringBlock webStsMonitor;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="logger"></param>
        /// <param name="env"></param>
        /// <param name="serviceName"></param>
        /// <param name="shortServiceName"></param>
        public WebStsService(Logger logger, string env, string serviceName, string shortServiceName)
            : base(logger)
        {
            this.ServiceName = serviceName;
            this.ShortServiceName = shortServiceName;
            this.environment = env;
            this.envConfig = Config.EnvironmentSettings.Environments[env];

            this.webStsMonitor = new WebStsMonitoringBlock(env);

            LoggerTraceListener loggerListener = new LoggerTraceListener();
            loggerListener.Logger = logger;
            loggerListener.EnvironmentName = EnvironmentName;
            loggerListener.ServiceName = ServiceName;

            Trace.Listeners.Add(loggerListener);
        }

        /// <summary>
        /// 
        /// </summary>
        internal override string ServiceName
        {
            get
            {
                return _serviceName;
            }
            set
            {
                _serviceName = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        internal override string ShortServiceName
        {
            get
            {
                return _shortServiceName;
            }
            set
            {
                _shortServiceName = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.WebSts;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        internal override string EnvironmentName
        {
            get { return environment; }
        }

        /// <summary>
        /// 
        /// </summary>
        public override string Url
        {
            get { return envConfig.StsSettings.WebStsUrl; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="result"></param>
        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            
            try
            {
                if (Microsoft.Live.AddressBook.Test.Monitoring.Properties.Settings.Default.ReadCertNetFromFile)
                {
                    if (environment.ToLower().StartsWith("cert"))
                    {
                        CertNetParser cn = new CertNetParser();
                        Dictionary<string, string> values = cn.GetSiteStatus(ServiceName);
                        if (values["LastAttempt"].Equals("↑"))
                        {
                            result = true;
                            this.Notice = values["ClientMessage"];
                            this.Notice = this.Notice.Replace(Url, "");
                        }
                        else
                        {
                            result = false;
                            SetClientError(values["ClientMessage"]);
                        }
                        return;
                    }
                }

                StartApiTimer();

                List<IResult> webStsResult = this.webStsMonitor.RunTests();
                result = webStsResult.All<IResult>(r => r.Passed);
                if (!result)
                {
                    SetClientError(webStsResult.First<IResult>(r => !r.Passed).Error);
                }
                
                StopApiTimer();
            }
            catch (Exception e)
            {
                LogExceptionDetail(e);
                SetClientError(e);
                result = false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Plugins\PluginWrapper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Live.AddressBook.Test.ComponentLibrary.Interfaces;

namespace Microsoft.Live.AddressBook.Test.Monitoring
{
    public class PluginWrapper : TestService
    {
        private IPluginInterface iComponent;
        public PluginWrapper(IPluginInterface component) : base (null)
        {
            iComponent = component;
        }
        
        private string envName = "";
        internal override string EnvironmentName
        {
            get { return envName; }
        }

        internal override string ServiceName
        {
            get
            {
                return iComponent.ServiceName;
            }
            set
            {
                ;
            }
        }
        internal override string ShortServiceName
        {
            get
            {
                return iComponent.ShortServiceName;
            }
            set
            {
                ;
            }
        }

        protected override void ConductAvailabilityTest(out bool result)
        {
            result = false;
            result = iComponent.TestComponent();
            SetClientError(iComponent.ClientMessage);
        }

        public override string Url
        {
            get
            {
                return "";
            }
        }

        public override TestServiceType ServiceType
        {
            get
            {
                return TestServiceType.Plugin;
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Live.AddressBook.Test.Monitoring.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Live.AddressBook.Test.Monitoring.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TestUsers0@hotmail-int.com,password,00000000-0000-0000-0006-7fff80f534cb,-8150178912152983468
        ///TestUsers1@hotmail-int.com,password,00000000-0000-0000-0006-000080de72d8,-4838545156383526043
        ///TestUsers2@hotmail-int.com,password,00000000-0000-0000-0006-000080de72e0,3533033674216369009
        ///TestUsers3@hotmail-int.com,password,00000000-0000-0000-0006-000080de72e3,6570548256174509245
        ///TestUsers4@hotmail-int.com,password,00000000-0000-0000-0006-7fff80f534ce,-1621204466608452432
        ///TestUsers5@hotmail-int.com,password,000 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string testusers {
            get {
                return ResourceManager.GetString("testusers", resourceCulture);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\NotificationCreation\Notifications\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace Notifications
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\NotificationCreation\Notifications\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Notifications")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("55eba6fd-1fb7-4d34-b8b4-e2a19524415f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\NotificationCreation\Notifications\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Notifications.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\LIVEnEnvironmentMonitor\SiteMonitorNTService\SiteMonitorNTService\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Live.AddressBook.Test.Monitoring.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ABCH Test Lab Monitor")]
        public string ClientTitle {
            get {
                return ((string)(this["ClientTitle"]));
            }
            set {
                this["ClientTitle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Logs")]
        public string LogPath {
            get {
                return ((string)(this["LogPath"]));
            }
            set {
                this["LogPath"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("CERT")]
        public string CertNetPath
        {
            get
            {
                return ((string)(this["CertNetPath"]));
            }
            set
            {
                this["CertNetPath"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("true")]
        public bool ReadCertNetFromFile
        {
            get
            {
                return ((bool)(this["ReadCertNetFromFile"]));
            }
            set
            {
                this["ReadCertNetFromFile"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\\\\transfer\\TRANSFER\\t-vivek\\Gadget\\CDPTestLabGadget2.gadget")]
        public string GadgetDownloadUrl {
            get {
                return ((string)(this["GadgetDownloadUrl"]));
            }
            set {
                this["GadgetDownloadUrl"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("180000")]
        public int PollIntervalInMilliseconds {
            get {
                return ((int)(this["PollIntervalInMilliseconds"]));
            }
            set {
                this["PollIntervalInMilliseconds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("120000")]
        public int ClientPollIntervalInMilliseconds {
            get {
                return ((int)(this["ClientPollIntervalInMilliseconds"]));
            }
            set {
                this["ClientPollIntervalInMilliseconds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SiteStatus.xml")]
        public string OutputFile {
            get {
                return ((string)(this["OutputFile"]));
            }
            set {
                this["OutputFile"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Debug")]
        public string DebugLogPath {
            get {
                return ((string)(this["DebugLogPath"]));
            }
            set {
                this["DebugLogPath"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int MaxLogFileLengthInMegaBytes {
            get {
                return ((int)(this["MaxLogFileLengthInMegaBytes"]));
            }
            set {
                this["MaxLogFileLengthInMegaBytes"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("175000")]
        public int DefaultSiteTimeoutInMilliseconds {
            get {
                return ((int)(this["DefaultSiteTimeoutInMilliseconds"]));
            }
            set {
                this["DefaultSiteTimeoutInMilliseconds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("45000")]
        public int DefaultTestTimeoutInMilliseconds {
            get {
                return ((int)(this["DefaultTestTimeoutInMilliseconds"]));
            }
            set {
                this["DefaultTestTimeoutInMilliseconds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("mail.msgr-tst.com")]
        public string SmtpServer {
            get {
                return ((string)(this["SmtpServer"]));
            }
            set {
                this["SmtpServer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("INT, BVT, NEXT, CURRENT, PARTNER")]
        public string TestSites {
            get {
                return ((string)(this["TestSites"]));
            }
            set {
                this["TestSites"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://monitor.abch.live-tst.com/SiteMonitor2/SiteMonitor.ashx")]
        public string DefaultMonitorUrl {
            get {
                return ((string)(this["DefaultMonitorUrl"]));
            }
            set {
                this["DefaultMonitorUrl"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://pvt-directory.services.live-int.com/profile/profile.asmx")]
        public string ProfileUrl {
            get {
                return ((string)(this["ProfileUrl"]));
            }
            set {
                this["ProfileUrl"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<AlerterSettings>\r\n  <EmailFrom>abchtt@m" +
            "icrosoft.com</EmailFrom>\r\n  <EmailSuccessSubject>Gadget Alert: {0} {1} has been " +
            "fixed after succeeded for {2} consecutive attempts</EmailSuccessSubject>\r\n  <Ema" +
            "ilDownSubject>Gadget Alert: {0} {1} down for {2} consecutive attempts</EmailDown" +
            "Subject>\r\n  <NumFailBeforeFirstAlarm>3</NumFailBeforeFirstAlarm>\r\n  <NumFailBefo" +
            "reExtraAlarm>5</NumFailBeforeExtraAlarm>\r\n  <NumSuccessBeforeNotification>2</Num" +
            "SuccessBeforeNotification>\r\n  <Site Name=\"INT\">\r\n    <!--<EmailTo>abchtt@microso" +
            "ft.com;maseabch@microsoft.com;amuhinja@microsoft.com;v-sbsdf@microsoft.com;bpark" +
            "er@microsoft.com</EmailTo>-->\r\n    <EmailTo>diegofte@microsoft.com;maseabch@micr" +
            "osoft.com;cdprt@microsoft.com</EmailTo>\r\n  </Site>\r\n  <!--To enable Email Alerte" +
            "r for other test beds, please remove comment out-->\r\n  <!--\n                    " +
            "    <Site Name=\"BVT\">\n                            <EmailTo>v-chongw@microsoft.co" +
            "m;diegore@microsoft.com;hammads@microsoft.com</EmailTo>\n                        " +
            "</Site>\n                        <Site Name=\"NEXT\">\n                            <" +
            "EmailTo>v-chongw@microsoft.com;diegore@microsoft.com;hammads@microsoft.com</Emai" +
            "lTo>\n                        </Site>\n                        <Site Name=\"CURRENT" +
            "\">\n                            <EmailTo>v-chongw@microsoft.com;diegore@microsoft" +
            ".com;hammads@microsoft.com</EmailTo>\n                        </Site>\n           " +
            "             -->\r\n  <MonitoredServices>AbchSoap</MonitoredServices>\r\n  <Monitore" +
            "dServices>AbchSoapPub</MonitoredServices>\r\n  <MonitoredServices>AbchRest</Monito" +
            "redServices>\r\n  <MonitoredServices>SupSoap</MonitoredServices>\r\n  <MonitoredServ" +
            "ices>ProfileSoap</MonitoredServices>\r\n</AlerterSettings>")]
        public global::System.Xml.XmlDocument EmailAlerter {
            get {
                return ((global::System.Xml.XmlDocument)(this["EmailAlerter"]));
            }
            set {
                this["EmailAlerter"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public short DefaultDataCenter {
            get {
                return ((short)(this["DefaultDataCenter"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2.2")]
        public float Version {
            get {
                return ((float)(this["Version"]));
            }
            set {
                this["Version"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("emailalertsettings.xml")]
        public string EmailSettingsXML {
            get {
                return ((string)(this["EmailSettingsXML"]));
            }
            set {
                this["EmailSettingsXML"] = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\NotificationCreation\Notifications\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Notifications.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Notifications.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\NotificationCreation\Notifications\Form1.Designer.cs ===
﻿namespace Notifications
{
    partial class Form1
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.createNtfnBtn = new System.Windows.Forms.Button();
            this.sendInviteBtn = new System.Windows.Forms.Button();
            this.recipientsTB = new System.Windows.Forms.TextBox();
            this.recipientsL = new System.Windows.Forms.Label();
            this.datablobTB = new System.Windows.Forms.TextBox();
            this.datablobL = new System.Windows.Forms.Label();
            this.getBtn = new System.Windows.Forms.Button();
            this.label3 = new System.Windows.Forms.Label();
            this.createFakeNtfnBtn = new System.Windows.Forms.Button();
            this.usernameTB = new System.Windows.Forms.TextBox();
            this.fromDisplayNameTB = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.fromGamertagTB = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.variantTB = new System.Windows.Forms.TextBox();
            this.label4 = new System.Windows.Forms.Label();
            this.sessionIdTB = new System.Windows.Forms.TextBox();
            this.label5 = new System.Windows.Forms.Label();
            this.gameIdTB = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.notificationTypeCB = new System.Windows.Forms.ComboBox();
            this.sessionIdL = new System.Windows.Forms.Label();
            this.envNameCB = new System.Windows.Forms.ComboBox();
            this.variantL = new System.Windows.Forms.Label();
            this.operationCB = new System.Windows.Forms.ComboBox();
            this.fromGamertagL = new System.Windows.Forms.Label();
            this.passwordTB = new System.Windows.Forms.TextBox();
            this.fromDisplayNameL = new System.Windows.Forms.Label();
            this.clearOutputBtn = new System.Windows.Forms.Button();
            this.notificationIdList = new System.Windows.Forms.ComboBox();
            this.deleteBtn = new System.Windows.Forms.Button();
            this.label8 = new System.Windows.Forms.Label();
            this.outputTB = new System.Windows.Forms.TextBox();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.clearVerboseOutputBtn = new System.Windows.Forms.Button();
            this.verboseOutpuTB = new System.Windows.Forms.TextBox();
            this.helpBtn = new System.Windows.Forms.Button();
            this.statusL = new System.Windows.Forms.Label();
            this.tabControl1.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.SuspendLayout();
            // 
            // tabControl1
            // 
            this.tabControl1.Controls.Add(this.tabPage1);
            this.tabControl1.Controls.Add(this.tabPage2);
            this.tabControl1.Location = new System.Drawing.Point(2, 1);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(964, 590);
            this.tabControl1.TabIndex = 6;
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.splitContainer2);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(956, 564);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Notifications";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 3);
            this.splitContainer2.Name = "splitContainer2";
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.helpBtn);
            this.splitContainer2.Panel1.Controls.Add(this.createNtfnBtn);
            this.splitContainer2.Panel1.Controls.Add(this.sendInviteBtn);
            this.splitContainer2.Panel1.Controls.Add(this.recipientsTB);
            this.splitContainer2.Panel1.Controls.Add(this.recipientsL);
            this.splitContainer2.Panel1.Controls.Add(this.datablobTB);
            this.splitContainer2.Panel1.Controls.Add(this.datablobL);
            this.splitContainer2.Panel1.Controls.Add(this.getBtn);
            this.splitContainer2.Panel1.Controls.Add(this.label3);
            this.splitContainer2.Panel1.Controls.Add(this.createFakeNtfnBtn);
            this.splitContainer2.Panel1.Controls.Add(this.usernameTB);
            this.splitContainer2.Panel1.Controls.Add(this.fromDisplayNameTB);
            this.splitContainer2.Panel1.Controls.Add(this.label1);
            this.splitContainer2.Panel1.Controls.Add(this.fromGamertagTB);
            this.splitContainer2.Panel1.Controls.Add(this.label2);
            this.splitContainer2.Panel1.Controls.Add(this.variantTB);
            this.splitContainer2.Panel1.Controls.Add(this.label4);
            this.splitContainer2.Panel1.Controls.Add(this.sessionIdTB);
            this.splitContainer2.Panel1.Controls.Add(this.label5);
            this.splitContainer2.Panel1.Controls.Add(this.gameIdTB);
            this.splitContainer2.Panel1.Controls.Add(this.label6);
            this.splitContainer2.Panel1.Controls.Add(this.notificationTypeCB);
            this.splitContainer2.Panel1.Controls.Add(this.sessionIdL);
            this.splitContainer2.Panel1.Controls.Add(this.envNameCB);
            this.splitContainer2.Panel1.Controls.Add(this.variantL);
            this.splitContainer2.Panel1.Controls.Add(this.operationCB);
            this.splitContainer2.Panel1.Controls.Add(this.fromGamertagL);
            this.splitContainer2.Panel1.Controls.Add(this.passwordTB);
            this.splitContainer2.Panel1.Controls.Add(this.fromDisplayNameL);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.statusL);
            this.splitContainer2.Panel2.Controls.Add(this.clearOutputBtn);
            this.splitContainer2.Panel2.Controls.Add(this.notificationIdList);
            this.splitContainer2.Panel2.Controls.Add(this.deleteBtn);
            this.splitContainer2.Panel2.Controls.Add(this.label8);
            this.splitContainer2.Panel2.Controls.Add(this.outputTB);
            this.splitContainer2.Size = new System.Drawing.Size(950, 558);
            this.splitContainer2.SplitterDistance = 259;
            this.splitContainer2.TabIndex = 0;
            // 
            // createNtfnBtn
            // 
            this.createNtfnBtn.Location = new System.Drawing.Point(88, 235);
            this.createNtfnBtn.Name = "createNtfnBtn";
            this.createNtfnBtn.Size = new System.Drawing.Size(130, 23);
            this.createNtfnBtn.TabIndex = 27;
            this.createNtfnBtn.Text = "Create Notification";
            this.createNtfnBtn.UseVisualStyleBackColor = true;
            this.createNtfnBtn.Visible = false;
            this.createNtfnBtn.Click += new System.EventHandler(this.createNtfnBtn_Click_1);
            // 
            // sendInviteBtn
            // 
            this.sendInviteBtn.Location = new System.Drawing.Point(88, 294);
            this.sendInviteBtn.Name = "sendInviteBtn";
            this.sendInviteBtn.Size = new System.Drawing.Size(130, 23);
            this.sendInviteBtn.TabIndex = 26;
            this.sendInviteBtn.Text = "Send Invite";
            this.sendInviteBtn.UseVisualStyleBackColor = true;
            this.sendInviteBtn.Visible = false;
            this.sendInviteBtn.Click += new System.EventHandler(this.sendInviteBtn_Click);
            // 
            // recipientsTB
            // 
            this.recipientsTB.Location = new System.Drawing.Point(119, 257);
            this.recipientsTB.Name = "recipientsTB";
            this.recipientsTB.Size = new System.Drawing.Size(139, 20);
            this.recipientsTB.TabIndex = 25;
            this.recipientsTB.Visible = false;
            // 
            // recipientsL
            // 
            this.recipientsL.AutoSize = true;
            this.recipientsL.Location = new System.Drawing.Point(13, 260);
            this.recipientsL.Name = "recipientsL";
            this.recipientsL.Size = new System.Drawing.Size(57, 13);
            this.recipientsL.TabIndex = 24;
            this.recipientsL.Text = "Recipients";
            this.recipientsL.Visible = false;
            // 
            // datablobTB
            // 
            this.datablobTB.Location = new System.Drawing.Point(119, 228);
            this.datablobTB.Name = "datablobTB";
            this.datablobTB.Size = new System.Drawing.Size(139, 20);
            this.datablobTB.TabIndex = 23;
            this.datablobTB.Visible = false;
            // 
            // datablobL
            // 
            this.datablobL.AutoSize = true;
            this.datablobL.Location = new System.Drawing.Point(13, 235);
            this.datablobL.Name = "datablobL";
            this.datablobL.Size = new System.Drawing.Size(50, 13);
            this.datablobL.TabIndex = 22;
            this.datablobL.Text = "Datablob";
            this.datablobL.Visible = false;
            // 
            // getBtn
            // 
            this.getBtn.Location = new System.Drawing.Point(88, 211);
            this.getBtn.Name = "getBtn";
            this.getBtn.Size = new System.Drawing.Size(130, 23);
            this.getBtn.TabIndex = 21;
            this.getBtn.Text = "Get Notifications";
            this.getBtn.UseVisualStyleBackColor = true;
            this.getBtn.Click += new System.EventHandler(this.getBtn_Click_1);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(13, 80);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(58, 13);
            this.label3.TabIndex = 3;
            this.label3.Text = "User name";
            // 
            // createFakeNtfnBtn
            // 
            this.createFakeNtfnBtn.Location = new System.Drawing.Point(88, 323);
            this.createFakeNtfnBtn.Name = "createFakeNtfnBtn";
            this.createFakeNtfnBtn.Size = new System.Drawing.Size(130, 23);
            this.createFakeNtfnBtn.TabIndex = 20;
            this.createFakeNtfnBtn.Text = "Create Fake Notification";
            this.createFakeNtfnBtn.UseVisualStyleBackColor = true;
            this.createFakeNtfnBtn.Visible = false;
            this.createFakeNtfnBtn.Click += new System.EventHandler(this.createFakeNtfnBtn_Click_1);
            // 
            // usernameTB
            // 
            this.usernameTB.Location = new System.Drawing.Point(119, 73);
            this.usernameTB.Name = "usernameTB";
            this.usernameTB.Size = new System.Drawing.Size(139, 20);
            this.usernameTB.TabIndex = 0;
            // 
            // fromDisplayNameTB
            // 
            this.fromDisplayNameTB.Location = new System.Drawing.Point(119, 288);
            this.fromDisplayNameTB.Name = "fromDisplayNameTB";
            this.fromDisplayNameTB.Size = new System.Drawing.Size(139, 20);
            this.fromDisplayNameTB.TabIndex = 19;
            this.fromDisplayNameTB.Visible = false;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(13, 27);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(90, 13);
            this.label1.TabIndex = 1;
            this.label1.Text = "Type of operation";
            // 
            // fromGamertagTB
            // 
            this.fromGamertagTB.Location = new System.Drawing.Point(119, 257);
            this.fromGamertagTB.Name = "fromGamertagTB";
            this.fromGamertagTB.Size = new System.Drawing.Size(139, 20);
            this.fromGamertagTB.TabIndex = 18;
            this.fromGamertagTB.Visible = false;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(13, 54);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(66, 13);
            this.label2.TabIndex = 2;
            this.label2.Text = "Environment";
            // 
            // variantTB
            // 
            this.variantTB.Location = new System.Drawing.Point(119, 204);
            this.variantTB.Name = "variantTB";
            this.variantTB.Size = new System.Drawing.Size(139, 20);
            this.variantTB.TabIndex = 17;
            this.variantTB.Visible = false;
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(13, 106);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(53, 13);
            this.label4.TabIndex = 4;
            this.label4.Text = "Password";
            // 
            // sessionIdTB
            // 
            this.sessionIdTB.Location = new System.Drawing.Point(119, 178);
            this.sessionIdTB.Name = "sessionIdTB";
            this.sessionIdTB.Size = new System.Drawing.Size(139, 20);
            this.sessionIdTB.TabIndex = 16;
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(13, 133);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(87, 13);
            this.label5.TabIndex = 5;
            this.label5.Text = "Notification Type";
            // 
            // gameIdTB
            // 
            this.gameIdTB.Location = new System.Drawing.Point(119, 152);
            this.gameIdTB.Name = "gameIdTB";
            this.gameIdTB.Size = new System.Drawing.Size(139, 20);
            this.gameIdTB.TabIndex = 15;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(13, 159);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(44, 13);
            this.label6.TabIndex = 6;
            this.label6.Text = "GameId";
            // 
            // notificationTypeCB
            // 
            this.notificationTypeCB.FormattingEnabled = true;
            this.notificationTypeCB.Items.AddRange(new object[] {
            "all",
            "FriendRequest",
            "GameOver",
            "GameTie",
            "Invitation",
            "Message",
            "Nudge",
            "YouLose",
            "YourTurn",
            "YouWin"});
            this.notificationTypeCB.Location = new System.Drawing.Point(119, 125);
            this.notificationTypeCB.Name = "notificationTypeCB";
            this.notificationTypeCB.Size = new System.Drawing.Size(139, 21);
            this.notificationTypeCB.TabIndex = 14;
            this.notificationTypeCB.Text = "all";
            this.notificationTypeCB.SelectedIndexChanged += new System.EventHandler(this.notificationTypeCB_SelectedIndexChanged);
            // 
            // sessionIdL
            // 
            this.sessionIdL.AutoSize = true;
            this.sessionIdL.Location = new System.Drawing.Point(13, 185);
            this.sessionIdL.Name = "sessionIdL";
            this.sessionIdL.Size = new System.Drawing.Size(53, 13);
            this.sessionIdL.TabIndex = 7;
            this.sessionIdL.Text = "SessionId";
            // 
            // envNameCB
            // 
            this.envNameCB.FormattingEnabled = true;
            this.envNameCB.Items.AddRange(new object[] {
            "Dev",
            "TestNet",
            "Int2",
            "PartnerNet",
            "Production"});
            this.envNameCB.Location = new System.Drawing.Point(119, 46);
            this.envNameCB.Name = "envNameCB";
            this.envNameCB.Size = new System.Drawing.Size(139, 21);
            this.envNameCB.TabIndex = 13;
            this.envNameCB.Text = "Int2";
            this.envNameCB.SelectedIndexChanged += new System.EventHandler(this.envNameCB_SelectedIndexChanged_1);
            // 
            // variantL
            // 
            this.variantL.AutoSize = true;
            this.variantL.Location = new System.Drawing.Point(13, 211);
            this.variantL.Name = "variantL";
            this.variantL.Size = new System.Drawing.Size(40, 13);
            this.variantL.TabIndex = 8;
            this.variantL.Text = "Variant";
            this.variantL.Visible = false;
            // 
            // operationCB
            // 
            this.operationCB.FormattingEnabled = true;
            this.operationCB.Items.AddRange(new object[] {
            "Get Notifications",
            "Create Notification",
            "Send Invite",
            "Create Fake Notification"});
            this.operationCB.Location = new System.Drawing.Point(119, 19);
            this.operationCB.Name = "operationCB";
            this.operationCB.Size = new System.Drawing.Size(139, 21);
            this.operationCB.TabIndex = 12;
            this.operationCB.Text = "Get Notifications";
            this.operationCB.SelectedIndexChanged += new System.EventHandler(this.operationCB_SelectedIndexChanged);
            // 
            // fromGamertagL
            // 
            this.fromGamertagL.AutoSize = true;
            this.fromGamertagL.Location = new System.Drawing.Point(13, 264);
            this.fromGamertagL.Name = "fromGamertagL";
            this.fromGamertagL.Size = new System.Drawing.Size(79, 13);
            this.fromGamertagL.TabIndex = 9;
            this.fromGamertagL.Text = "From Gamertag";
            this.fromGamertagL.Visible = false;
            // 
            // passwordTB
            // 
            this.passwordTB.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.passwordTB.Location = new System.Drawing.Point(119, 99);
            this.passwordTB.Name = "passwordTB";
            this.passwordTB.PasswordChar = '*';
            this.passwordTB.Size = new System.Drawing.Size(139, 20);
            this.passwordTB.TabIndex = 11;
            // 
            // fromDisplayNameL
            // 
            this.fromDisplayNameL.AutoSize = true;
            this.fromDisplayNameL.Location = new System.Drawing.Point(13, 291);
            this.fromDisplayNameL.Name = "fromDisplayNameL";
            this.fromDisplayNameL.Size = new System.Drawing.Size(104, 13);
            this.fromDisplayNameL.TabIndex = 10;
            this.fromDisplayNameL.Text = "From Dispalay Name";
            this.fromDisplayNameL.Visible = false;
            // 
            // clearOutputBtn
            // 
            this.clearOutputBtn.Location = new System.Drawing.Point(519, 498);
            this.clearOutputBtn.Name = "clearOutputBtn";
            this.clearOutputBtn.Size = new System.Drawing.Size(165, 23);
            this.clearOutputBtn.TabIndex = 9;
            this.clearOutputBtn.Text = "Clear output box";
            this.clearOutputBtn.UseVisualStyleBackColor = true;
            this.clearOutputBtn.Click += new System.EventHandler(this.clearOutputBtn_Click_1);
            // 
            // notificationIdList
            // 
            this.notificationIdList.FormattingEnabled = true;
            this.notificationIdList.Location = new System.Drawing.Point(111, 495);
            this.notificationIdList.Name = "notificationIdList";
            this.notificationIdList.Size = new System.Drawing.Size(384, 21);
            this.notificationIdList.TabIndex = 8;
            // 
            // deleteBtn
            // 
            this.deleteBtn.Location = new System.Drawing.Point(435, 522);
            this.deleteBtn.Name = "deleteBtn";
            this.deleteBtn.Size = new System.Drawing.Size(60, 23);
            this.deleteBtn.TabIndex = 7;
            this.deleteBtn.Text = "Delete";
            this.deleteBtn.UseVisualStyleBackColor = true;
            this.deleteBtn.Click += new System.EventHandler(this.deleteBtn_Click);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(3, 498);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(93, 13);
            this.label8.TabIndex = 6;
            this.label8.Text = "Select Notification";
            // 
            // outputTB
            // 
            this.outputTB.BackColor = System.Drawing.SystemColors.Control;
            this.outputTB.Location = new System.Drawing.Point(3, 1);
            this.outputTB.Multiline = true;
            this.outputTB.Name = "outputTB";
            this.outputTB.ReadOnly = true;
            this.outputTB.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.outputTB.Size = new System.Drawing.Size(678, 488);
            this.outputTB.TabIndex = 5;
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.clearVerboseOutputBtn);
            this.tabPage2.Controls.Add(this.verboseOutpuTB);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(956, 564);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Verbose output";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // clearVerboseOutputBtn
            // 
            this.clearVerboseOutputBtn.Location = new System.Drawing.Point(815, 535);
            this.clearVerboseOutputBtn.Name = "clearVerboseOutputBtn";
            this.clearVerboseOutputBtn.Size = new System.Drawing.Size(135, 23);
            this.clearVerboseOutputBtn.TabIndex = 7;
            this.clearVerboseOutputBtn.Text = "Clear verbose output box";
            this.clearVerboseOutputBtn.UseVisualStyleBackColor = true;
            this.clearVerboseOutputBtn.Click += new System.EventHandler(this.clearVerboseOutputBtn_Click);
            // 
            // verboseOutpuTB
            // 
            this.verboseOutpuTB.BackColor = System.Drawing.SystemColors.Control;
            this.verboseOutpuTB.Location = new System.Drawing.Point(0, 0);
            this.verboseOutpuTB.Multiline = true;
            this.verboseOutpuTB.Name = "verboseOutpuTB";
            this.verboseOutpuTB.ReadOnly = true;
            this.verboseOutpuTB.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.verboseOutpuTB.Size = new System.Drawing.Size(950, 529);
            this.verboseOutpuTB.TabIndex = 6;
            // 
            // helpBtn
            // 
            this.helpBtn.Location = new System.Drawing.Point(12, 517);
            this.helpBtn.Name = "helpBtn";
            this.helpBtn.Size = new System.Drawing.Size(91, 28);
            this.helpBtn.TabIndex = 28;
            this.helpBtn.Text = "Help";
            this.helpBtn.UseVisualStyleBackColor = true;
            this.helpBtn.Click += new System.EventHandler(this.helpBtn_Click);
            // 
            // statusL
            // 
            this.statusL.AutoSize = true;
            this.statusL.BackColor = System.Drawing.SystemColors.GradientActiveCaption;
            this.statusL.Location = new System.Drawing.Point(5, 473);
            this.statusL.Name = "statusL";
            this.statusL.Size = new System.Drawing.Size(35, 13);
            this.statusL.TabIndex = 29;
            this.statusL.Text = "label7";
            this.statusL.Visible = false;
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(962, 587);
            this.Controls.Add(this.tabControl1);
            this.Name = "Form1";
            this.Text = "NotificationsTool";
            this.tabControl1.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel1.PerformLayout();
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.Panel2.PerformLayout();
            this.splitContainer2.ResumeLayout(false);
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.TabControl tabControl1;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.Button getBtn;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Button createFakeNtfnBtn;
        private System.Windows.Forms.TextBox usernameTB;
        private System.Windows.Forms.TextBox fromDisplayNameTB;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox fromGamertagTB;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox variantTB;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.TextBox sessionIdTB;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.TextBox gameIdTB;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.ComboBox notificationTypeCB;
        private System.Windows.Forms.Label sessionIdL;
        private System.Windows.Forms.ComboBox envNameCB;
        private System.Windows.Forms.Label variantL;
        private System.Windows.Forms.ComboBox operationCB;
        private System.Windows.Forms.Label fromGamertagL;
        private System.Windows.Forms.TextBox passwordTB;
        private System.Windows.Forms.Label fromDisplayNameL;
        private System.Windows.Forms.Button clearOutputBtn;
        private System.Windows.Forms.ComboBox notificationIdList;
        private System.Windows.Forms.Button deleteBtn;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TextBox outputTB;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.TextBox verboseOutpuTB;
        private System.Windows.Forms.Button clearVerboseOutputBtn;
        private System.Windows.Forms.TextBox datablobTB;
        private System.Windows.Forms.Label datablobL;
        private System.Windows.Forms.TextBox recipientsTB;
        private System.Windows.Forms.Label recipientsL;
        private System.Windows.Forms.Button sendInviteBtn;
        private System.Windows.Forms.Button createNtfnBtn;
        private System.Windows.Forms.Label statusL;
        private System.Windows.Forms.Button helpBtn;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\NotificationCreation\Notifications\Form1.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text; 
using System.Web;
using System.Xml;
using System.IO;
using System.Windows.Forms;
using System.Configuration;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Framework;
using LiveN.Test.Common;
using LiveN.Test.Common.Forms;
using System.Diagnostics;
using AsyncMultiplayer.NotificationService;
using Multiplayer.Test.Proxy;
using Multiplayer.Test.UserAccounts;
using System.Runtime.Serialization;
using AsyncMultiplayer.SessionCommon;
using Gds.Contracts;

namespace Notifications
{
    public partial class Form1 : Form
    {
        NotificationsServiceProxy ntfnClient;
        GameSessionProxy gameSessionClient;
        GameStateProxy gameStateClient;
        EnvironmentElement env;
        List<Notification> nList;
        string username;
        string password;
        string nType;
        string gameId;
        string sessionId;
        string variant;
        string fromGamertag;
        string fromDisplayName;
        Notification newNotification;
        List<Notification> newNotificationList = new List<Notification>();
        List<string> notificationTypeList;
        string datablob;
        string recipients;
        const uint XBOX_LIVE_EXTRAS_TITLE_ID = 1297287404;
        TestHooksService testHookClient;
        
        public Form1()
        {
            InitializeComponent();
            InitializeEnvSettings();
            (Trace.Listeners["textboxVerbose"] as TextBoxTraceListener).TextBox = this.verboseOutpuTB;
            (Trace.Listeners["textbox"] as TextBoxTraceListener).TextBox = this.verboseOutpuTB;
            gameIdTB.Text = "";
            sessionIdTB.Text = "";
        }

        private void operationCB_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedType = notificationTypeCB.Text;
            InitializeNotificationTypeList();
            if (operationCB.Text == "Create Fake Notification")
            {
                getBtn.Visible = false;
                datablobTB.Visible = true;
                datablobL.Visible = true;
                fromGamertagTB.Visible = true;
                fromDisplayNameTB.Visible = true;
                fromGamertagL.Visible = true;
                fromDisplayNameL.Visible = true;
                recipientsL.Visible = false;
                recipientsTB.Visible = false;
                variantTB.Visible = true;
                variantL.Visible = true;
                sessionIdTB.Visible = true;
                sessionIdL.Visible = true;
                sessionIdTB.ReadOnly = false;
                sendInviteBtn.Visible = false;
                createNtfnBtn.Visible = false;
                createFakeNtfnBtn.Visible = true;
                
                if (selectedType != "All")
                    notificationTypeCB.Text = selectedType;
            }
            else if (operationCB.Text == "Get Notifications")
            {
                createFakeNtfnBtn.Visible = false;
                datablobTB.Visible = false;
                datablobL.Visible = false; 
                fromGamertagTB.Visible = false;
                fromDisplayNameTB.Visible = false;
                fromGamertagL.Visible = false;
                fromDisplayNameL.Visible = false;
                recipientsL.Visible = false;
                recipientsTB.Visible = false;
                sessionIdTB.Visible = true;
                sessionIdL.Visible = true;
                sessionIdTB.ReadOnly = false;
                variantTB.Visible = false;
                variantL.Visible = false;
                sendInviteBtn.Visible = false;
                createNtfnBtn.Visible = false;
                getBtn.Visible = true;
                
                if(newNotificationList.Count == 0)
                {
                    gameIdTB.Text = "";
                    sessionIdTB.Text = "";
                }
                notificationTypeCB.Text = selectedType;
            }
            else if (operationCB.Text == "Create Notification")
            {
                getBtn.Visible = false;
                datablobTB.Visible = false;
                datablobL.Visible = false;
                fromGamertagTB.Visible = false;
                fromDisplayNameTB.Visible = false;
                fromGamertagL.Visible = false;
                fromDisplayNameL.Visible = false;
                recipientsL.Visible = false;
                recipientsTB.Visible = false;
                sessionIdTB.Visible = true;
                sessionIdL.Visible = true;
                sessionIdTB.ReadOnly = true;
                variantTB.Visible = true;
                
                variantL.Visible = true;
                sendInviteBtn.Visible = false;
                createFakeNtfnBtn.Visible = false;
                createNtfnBtn.Visible = true;
                
                if (selectedType != "All")
                    notificationTypeCB.Text = selectedType;

                gameIdTB.Text = env.StsSettings.TitleId;
                sessionIdTB.Text = "";
                variantTB.Text = "0";
            }
            else if (operationCB.Text == "Send Invite")
            {
                createFakeNtfnBtn.Visible = false; 
                getBtn.Visible = false;
                datablobTB.Visible = true;
                datablobL.Visible = true;
                fromGamertagTB.Visible = false;
                fromDisplayNameTB.Visible = false;
                fromGamertagL.Visible = false;
                fromDisplayNameL.Visible = false;
                recipientsL.Visible = true;
                recipientsTB.Visible = true;
                sessionIdTB.Visible = true;
                sessionIdL.Visible = true;
                sessionIdTB.ReadOnly = false;
                variantTB.Visible = true;
                variantL.Visible = true;
                createFakeNtfnBtn.Visible = false;
                createNtfnBtn.Visible = false;
                sendInviteBtn.Visible = true;
                
                if (selectedType != "All")
                    notificationTypeCB.Text = selectedType;

                gameIdTB.Text = env.StsSettings.TitleId;
                sessionIdTB.Text = Guid.NewGuid().ToString();
                variantTB.Text = "0";
            }
        }
         
        private void envNameCB_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            InitializeEnvSettings();
        }

        private void InitializeEnvSettings()
        {
            if (!string.IsNullOrEmpty(envNameCB.Text))
            {
                env = Config.EnvironmentSettings.Environments[envNameCB.Text];
                if (env != null)
                {
                    usernameTB.Text = env.UserSettings[1].Membername;
                    passwordTB.Text = env.UserSettings[1].Password;
                    Users.authCache = new AuthorizationCache(env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject);
                    ntfnClient = new NotificationsServiceProxy(env.UserSettings[1].Membername, env.UserSettings[1].Password, env);
                    gameSessionClient = new GameSessionProxy(env.UserSettings[1].Membername, env.UserSettings[1].Password, env);
                    gameStateClient = new GameStateProxy(env.UserSettings[1].Membername, env.UserSettings[1].Password, env);
                    testHookClient = new TestHooksService(env.MPTestHooksService);
                    if (!string.IsNullOrEmpty(gameId))
                        gameIdTB.Text = env.StsSettings.TitleId;
                    recipientsTB.Text = env.UserSettings[0].Membername + ";";

                }
                else
                {
                    outputTB.AppendText("Incorrect environment name.\n");
                    outputTB.AppendText("\n");
                }
            }
            else
            {
                outputTB.AppendText("Please enter environment name. \n");
                outputTB.AppendText("\n");
            }
            //if it is production -- can only create invite notification
            InitializeNotificationTypeList();
        }

        private bool ValidateInputs()
        {
            username = usernameTB.Text;
            password = passwordTB.Text;

            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
            {
                outputTB.AppendText("Please specify both user name and password.\n");
                return false;
            }

            gameId = gameIdTB.Text;
            sessionId = sessionIdTB.Text;

            if (!string.IsNullOrEmpty(sessionIdTB.Text))
            {
                if ((string.IsNullOrEmpty(gameId)) || (gameId == "0"))
                {
                    outputTB.AppendText("Please specify a game ID for the session you specified.\n");
                    return false;
                }
            }

            nType = notificationTypeCB.Text;
            if (nType == "All")
                nType = string.Empty;

            variant = variantTB.Text;
            fromGamertag = fromGamertagTB.Text;

            if (string.IsNullOrEmpty(fromDisplayNameTB.Text))
                fromDisplayName = null;
            else
                fromDisplayName = fromDisplayNameTB.Text;

            if (string.IsNullOrEmpty(datablobTB.Text))
                datablob = null;
            else
                datablob = datablobTB.Text;

            if (string.IsNullOrEmpty(recipientsTB.Text))
                recipients = null;
            else
                recipients = recipientsTB.Text;
            return true;
        }

        private void InitializeNotificationTypeList()
        {
            notificationTypeList = new List<string>();
            if (operationCB.Text == "Create Fake Notification" && envNameCB.Text == "Production")
            {
                notificationTypeList.Add("");
                fromDisplayNameTB.ReadOnly = true;
                fromGamertagTB.ReadOnly = true;
            }
            else if (operationCB.Text == "Create Notification")
            {
                notificationTypeList.Add("Invitation");
                notificationTypeList.Add("GameOver");
                notificationTypeList.Add("GameTie");
                notificationTypeList.Add("Nudge");
                notificationTypeList.Add("YouLose");
                notificationTypeList.Add("YourTurn");
                notificationTypeList.Add("YouWin");

                fromDisplayNameTB.ReadOnly = false;
                fromGamertagTB.ReadOnly = false;
            }
            else if (operationCB.Text == "Send Invite")
            {
                notificationTypeList.Add("Invitation");
            }
            else
            {
                if (operationCB.Text == "Get Notifications")
                {
                    notificationTypeList.Add("All");
                }
                notificationTypeList.Add("Invitation");
                notificationTypeList.Add("FriendRequest");
                notificationTypeList.Add("GameOver");
                notificationTypeList.Add("GameTie");
                notificationTypeList.Add("Message");
                notificationTypeList.Add("Nudge");
                notificationTypeList.Add("YouLose");
                notificationTypeList.Add("YourTurn");
                notificationTypeList.Add("YouWin");

                fromDisplayNameTB.ReadOnly = false;
                fromGamertagTB.ReadOnly = false;
            }
            notificationTypeCB.DataSource = notificationTypeList;
        }

         
        private void CreateSession(string uname, string pword)
        {
            ResetSessionCount(uname, pword); //to avoid failure due to session count limit

            CreationData creationData = new CreationData();
            creationData.GameID = uint.Parse(gameId);
            creationData.Variant = int.Parse(variant);
            creationData.TotalSeatsAvailable = 10;
            creationData.ReservedSeatsAvailable = 10;
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = new InactivityWarningBehavior();
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "NotificationToolGameSession";
            creationData.LeavePolicy = SessionLeavePolicy.None; 
            
            SessionState sessionState = gameSessionClient.CreateSession(creationData.GameID.ToString(), creationData, uname, pword);
            sessionId = sessionState.SessionID;
        }

        private void JoinSession(string uname, string pword, int seatIndex)
        {
            JoinData joinData = new JoinData();
            joinData.GameID = uint.Parse(gameId);
            joinData.SessionID = sessionId;
            joinData.SeatIndex = seatIndex;
            joinData.SeatParameters = new byte[] { 4, 5, 6 };

            SessionState joinSessionState = gameSessionClient.JoinSession(sessionId, joinData, uname, pword);
        }

        private void MakeAMove(string uname, string pword, int activeSeatIndex)
        {
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = activeSeatIndex;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            gameStateClient.PutGameState(sessionId, gameId, modifiableGameState, uname, pword);
        }

        private void SendUserNudge(string uname, string pword, byte receiverSeatIndex/*, int sequenceNumber*/)
        {
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { receiverSeatIndex };
            gameAction.ActionTime = DateTime.Now;
            //gameAction.SequenceNumber = sequenceNumber;

            gameStateClient.PostGameAction(sessionId, gameId, gameAction, uname, pword);
        }

        private void SendInvite(string uname, string pword, string receivers)
        {
            ResetInviteCount(uname, pword); //to avoid failure due to invite count limit
         
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = uint.Parse(gameId);
            inviteRequest.SessionId = sessionId + ":" + variant;
            inviteRequest.Data = "Invite sent by Notification Tool";
            inviteRequest.Recipients = receivers;

            ntfnClient.SendInvite(inviteRequest, uname, pword);
        }

        private void CreateSessionAndPostGameResult(string result)
        {
            CreateSession(username, password);
            GameResults gameResults = new GameResults();
            gameResults.Results = new Dictionary<int, GameResult>();
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(gameId),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = uint.Parse(variant)
            }; 

            switch (result)
            {
                case "GameOver":
                    gameResults.GameOverSeatIndexes = new int[] { 0 };
                    break;

                case "GameTie":
                    gameResults.TierSeatIndexes = new int[] { 0 };
                    gameResults.Results[0].Outcome = GameResultOutcome.Tie.ToString();
                    break;

                case "Win":
                    gameResults.WinningSeatIndexes = new int[] { 0 };
                    gameResults.Results[0].Outcome = GameResultOutcome.Win.ToString();
                    break;

                case "Loss":
                    gameResults.LosingSeatIndexes = new int[] { 0 };
                    gameResults.Results[0].Outcome = GameResultOutcome.Loss.ToString();
                    break;

                default:
                    throw new NotSupportedException("Incorrect result: " + result);
            }

            gameStateClient.PostGameEnd(sessionId, gameId, gameResults, username, password);
        }

        private void ResetInviteCount(string uname, string pword)
        {
            try
            {
                testHookClient.UpdateUserEntry(GetXuid(uname, pword), DateTime.UtcNow, DateTime.UtcNow, 0);
            }
            catch (Exception)
            {
                //just ignore and continue if failed to reset invite count
            }
        }

        private void ResetSessionCount(string uname, string pword)
        {
            try
            {
                testHookClient.ResetNumberOfSessions(new IdentityToken(ulong.Parse(GetXuid(uname, pword)), GetGamertag(uname, pword)));
            }
            catch (Exception)
            {
                //just ignore and continue if failed to reset session count
            }
        }

        private void MakeServiceCreateNotification()
        {
            switch (notificationTypeCB.Text)
            {
                case "GameOver":
                    CreateSessionAndPostGameResult("GameOver");
                    break;

                case "Invitation":
                    CreateSession(env.UserSettings[0].Membername, env.UserSettings[0].Password);
                    SendInvite(env.UserSettings[0].Membername, env.UserSettings[0].Password, username + ";");
                    break;

                //case "Message":
                //testHookClient = new TestHooksService(env.MPTestHooksService);
                //testHookClient.SendMessage();

                //    //verify message notification is created
                //    break;

                case "Nudge":
                    CreateSession(username, password);
                    JoinSession(env.UserSettings[0].Membername, env.UserSettings[0].Password, 1);
                    SendUserNudge(env.UserSettings[0].Membername, env.UserSettings[0].Password, 0);
                    break;

                case "YourTurn":
                    CreateSession(env.UserSettings[0].Membername, env.UserSettings[0].Password);
                    JoinSession(username, password, 1);
                    MakeAMove(env.UserSettings[0].Membername, env.UserSettings[0].Password, 1);
                    break;

                case "YouWin":
                    CreateSessionAndPostGameResult("Win");
                    break;

                case "YouLose":
                    CreateSessionAndPostGameResult("Loss");
                    break;

                case "GameTie":
                    CreateSessionAndPostGameResult("GameTie");
                    break;

                //case "FriendRequest":
                //    //Send a FR on XBL
                //    //verify friend request notification is created
                //    break;

                default:
                    throw new NotSupportedException("Requested Notification type not found: " + notificationTypeCB.Text);
            }
        }


        private void CreateNotification()
        {
            if (operationCB.Text == "Create Fake Notification")
            {
                switch (notificationTypeCB.Text)
                {
                    case "GameOver":
                        newNotification = new GameOverNotification();
                        break;

                    case "Invitation":
                        newNotification = new InvitationNotification();
                        break;

                    case "Message":
                        newNotification = new MessageNotification();
                        break;

                    case "Nudge":
                        newNotification = new NudgeNotification();
                        break;

                    case "YourTurn":
                        newNotification = new YourTurnNotification();
                        break;

                    case "YouWin":
                        newNotification = new YouWinNotification();
                        break;

                    case "YouLose":
                        newNotification = new YouLoseNotification();
                        break;

                    case "GameTie":
                        newNotification = new GameTieNotification();
                        break;

                    case "FriendRequest":
                        newNotification = new FriendRequestNotification();
                        break;

                    default:
                        throw new NotSupportedException("Requested Notification type not found: " + notificationTypeCB.Text);
                }
            }
        }


        private void notificationTypeCB_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (operationCB.Text == "Create Fake Notification") 
            {
                if(notificationTypeCB.Text == "FriendRequest" || notificationTypeCB.Text == "Message")
                    FilloutDefaultValuesOnTextBoxesForSpecialNotifications();
                else 
                    FilloutDefaultValuesOnTextBoxesForNormalNotifications();
            }
        }

        private void clearVerboseOutputBtn_Click(object sender, EventArgs e)
        {
            verboseOutpuTB.Text = null;
            verboseOutpuTB.Refresh();
        }

        private Notification SetValuesToNotification(Notification ntfn, uint nGameId, string nSessionId, string userId, uint nVariant, string fGamerTag, string fDisplayName)
        {
            ntfn.GameId = nGameId;
            ntfn.SessionId = nSessionId;
            ntfn.SupportedPlatform = 0;
            ntfn.UserId = userId;
            ntfn.Variant = nVariant;
            UserInfo creatorInfo = new UserInfo(0);
            creatorInfo.DisplayName = fDisplayName;
            creatorInfo.GamerTag = fGamerTag;
            creatorInfo.EmailAddress = "ztest01@microsoft.com";
            ntfn.From = Notification.SerializeToString(creatorInfo);
            return ntfn;
        }

        private void FilloutDefaultValuesOnTextBoxesForNormalNotifications()
        {
            gameIdTB.Text = env.StsSettings.TitleId;
            if (operationCB.Text != "Get Notifications")
                sessionIdTB.Text = Guid.NewGuid().ToString();
            FilloutDefaultValuesOnTextBoxes("0", "", "LoftyTurtle");
        }

        private void FilloutDefaultValuesOnTextBoxesForSpecialNotifications()
        {
            gameIdTB.Text = XBOX_LIVE_EXTRAS_TITLE_ID.ToString();
            sessionIdTB.Text = null;
            FilloutDefaultValuesOnTextBoxes("0", "", "Xbox LIVE");
        }

        private void FilloutDefaultValuesOnTextBoxes(string dVariant, string dFromDisplayName, string dFromGamertag)
        {
            variantTB.Text = dVariant;
            fromDisplayNameTB.Text = dFromDisplayName;
            fromGamertagTB.Text = dFromGamertag;
        }

        private string GetGamertag(string userID, string password)
        {
            return LiveN.Test.Framework.Authorization.Authorization.GetGamertag(
                Users.authCache.GetUserToken(
                    userID,
                    password,
                    env.WindowsLiveIDSettings.LiveIdServiceTarget,
                    env.WindowsLiveIDSettings.Policy,
                    env.WindowsLiveIDSettings.Environment,
                    env.StsSettings.PlatformType,
                    env.StsSettings.TitleId,
                    env.StsSettings.TitleVersion,
                    env.StsSettings.ClientVersion));
        }

        private string GetXuid(string userID, string password)
        {
            return LiveN.Test.Framework.Authorization.Authorization.GetXuid(
                Users.authCache.GetUserToken(
                    userID,
                    password,
                    env.WindowsLiveIDSettings.LiveIdServiceTarget,
                    env.WindowsLiveIDSettings.Policy,
                    env.WindowsLiveIDSettings.Environment,
                    env.StsSettings.PlatformType,
                    env.StsSettings.TitleId,
                    env.StsSettings.TitleVersion,
                    env.StsSettings.ClientVersion));
        }
        private bool ConfirmDelete()
        {
            return true;
        }

        private void clearOutputBtn_Click_1(object sender, EventArgs e)
        {
            outputTB.Text = null;
            outputTB.Refresh();
        }

        private void getBtn_Click_1(object sender, EventArgs e)
        {
            if (!ValidateInputs())
                return;

            nList = new List<Notification>();
            DataTable list = new DataTable();
            notificationIdList.DataSource = list;
            ShowInProgress("Getting notifications. Please wait ...");

            try
            {
                nList = ntfnClient.GetNotifications(gameId, sessionId, 0, string.Empty, 100, nType, false, username, password, null);
                list.Columns.Add(new DataColumn("Type", typeof(string)));
                list.Columns.Add(new DataColumn("Id", typeof(string)));
                if (nList == null)
                {
                    outputTB.AppendText("\n");
                    outputTB.AppendText("Error: Response is null from notification service\n");
                    outputTB.AppendText("\n");
                    notificationIdList.DataSource = list;
                    HidePasswordInVerboseOutput();
                    RemoveProgressIndicator();
                    return;
                }
                if (nList.Count == 0)
                {
                    outputTB.AppendText("\n");
                    outputTB.AppendText("You have no notifications.\n");
                    outputTB.AppendText("\n");
                    notificationIdList.DataSource = list;
                    HidePasswordInVerboseOutput();
                    RemoveProgressIndicator();
                    return;
                }
                else
                {
                    if (nList.Count == 100)
                    {
                        outputTB.AppendText("\n");
                        outputTB.AppendText("You have " + nList.Count + " or more notifications.\n");
                    }
                    else
                    {
                        outputTB.AppendText("\n");
                        outputTB.AppendText("You have " + nList.Count + " notifications.\n");
                    }
                    list.Rows.Add(list.NewRow());
                    list.Rows[0][0] = "All";
                    list.Rows[0][1] = "All";

                    for (int i = 0; i < nList.Count; i++)
                    {
                        UserInfo uinfo = new UserInfo();
                        string from = HttpUtility.HtmlDecode(nList[i].From);
                        DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
                        UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
                        string notificationFrom = userInfo.GamerTag;
                        if (!string.IsNullOrEmpty(userInfo.DisplayName))
                            notificationFrom += "(" + userInfo.DisplayName + ")";

                        list.Rows.Add(list.NewRow());
                        list.Rows[i + 1][0] = nList[i].TypeDisplayName + " notification with ID = " + nList[i].Id;
                        list.Rows[i + 1][1] = nList[i].Id;

                        outputTB.AppendText("\n");
                        outputTB.AppendText("\t" + nList[i].TypeDisplayName);
                        outputTB.AppendText("\n");
                        outputTB.AppendText("\t" + nList[i].GameDisplayName);
                        outputTB.AppendText("\n");
                        outputTB.AppendText("\t" + notificationFrom);
                        outputTB.AppendText("\n");
                        outputTB.AppendText("\turl : " + nList[i].Url);
                        outputTB.AppendText("\n");
                        outputTB.AppendText("\tNotification Id = " + nList[i].Id);
                        outputTB.AppendText("\n");
                        outputTB.AppendText("\n");
                    }
                    notificationIdList.DataSource = list;
                    notificationIdList.DisplayMember = "Type";
                    notificationIdList.ValueMember = "Id";
                }
            }
            catch (Exception ex)
            {
                outputTB.AppendText("\n");
                outputTB.AppendText("\n");
                outputTB.AppendText("Error occured!\n");
                outputTB.AppendText(ex.Message.Replace(password, "******") + "\n");
                outputTB.AppendText("Please see verbose output tab for detail.\n");
                outputTB.AppendText("\n");
                outputTB.Refresh();
            }
            HidePasswordInVerboseOutput();
            RemoveProgressIndicator();
        }

        private void createNtfnBtn_Click_1(object sender, EventArgs e)
        {
            if (!ValidateInputs())
                return;
            ShowInProgress("Creating notification. Please wait ...");
            newNotificationList = new List<Notification>();
            try
            {
                MakeServiceCreateNotification();
                newNotificationList = ntfnClient.GetNotifications(gameId, sessionId, 0, string.Empty, 100, nType, false, username, password, 6, 10000);
                newNotification = newNotificationList[0];
                outputTB.AppendText("\n");
                outputTB.AppendText("Successfully created  " + nType + " notification!\n");
                outputTB.AppendText("\tGameId = " + gameId + "\n");
                outputTB.AppendText("\tSessionId = " + sessionId + "\n");
                outputTB.AppendText("\tNotification ID = " + newNotification.Id + "\n");
                outputTB.AppendText("\n");
            }
            catch (Exception ex)
            {
                outputTB.AppendText("\n");
                outputTB.AppendText("\n");
                outputTB.AppendText("Error occured!\n");
                outputTB.AppendText(ex.Message.Replace(password, "******") + "\n");
                outputTB.AppendText("Please see verbose output tab for detail.\n");
                outputTB.AppendText("\n");
                outputTB.Refresh();
            }
            HidePasswordInVerboseOutput();
            RemoveProgressIndicator();
        }

        private void createFakeNtfnBtn_Click_1(object sender, EventArgs e)
        {
            if (!ValidateInputs())
                return;
            newNotificationList = new List<Notification>();
            if (envNameCB.Text == "Production")
            {
                outputTB.AppendText("\n");
                outputTB.AppendText("Cannot create fake notifications on production.\n");
                outputTB.AppendText("Please use 'Create Notification' from the 'Type of Operation' list.\n");
                outputTB.AppendText("\n");
                return;
            }

            ShowInProgress("Creating notification. Please wait ...");

            string xuid = "";
            try
            {
                xuid = GetXuid(username, password);
            }
            catch (Exception)
            {
                outputTB.AppendText("\n");
                outputTB.AppendText("\n");
                outputTB.AppendText("Error occured while trying to get xuid ... please double check your user name and password.\n");
                outputTB.AppendText("Please see verbose output tab for detail.\n");
                outputTB.AppendText("\n");
                outputTB.Refresh();
                HidePasswordInVerboseOutput();
                RemoveProgressIndicator();
                return;
            }
            CreateNotification();
            newNotification = SetValuesToNotification(newNotification, uint.Parse(gameId), sessionId, xuid, uint.Parse(variant), fromGamertag, fromDisplayName);
            newNotificationList.Add(newNotification);

            try
            {
                testHookClient.CreateNotifications(newNotificationList);
                outputTB.AppendText("\n");
                outputTB.AppendText("Successfully created " + newNotification.Type.ToString() + "!\n");
                outputTB.AppendText("\tGameId = " + gameId + "\n");
                outputTB.AppendText("\tSessionId = " + sessionId + "\n");
                outputTB.AppendText("\tNotificationId = " + newNotificationList[0].Id + "\n");
                sessionIdTB.Text = Guid.NewGuid().ToString();
                outputTB.AppendText("\n");
            }
            catch (Exception ex)
            {
                outputTB.AppendText("\n");
                outputTB.AppendText("\n");
                outputTB.AppendText("Error occured!\n");
                outputTB.AppendText(ex.Message.Replace(password, "******") + "\n");
                outputTB.AppendText("Please see verbose output tab for detail.\n");
                outputTB.AppendText("\n");
                outputTB.Refresh();
            }
            HidePasswordInVerboseOutput();
            RemoveProgressIndicator();
        }

        private void sendInviteBtn_Click(object sender, EventArgs e)
        {
            if (!ValidateInputs())
                return;
            if (string.IsNullOrEmpty(recipients))
            {
                outputTB.AppendText("Please specify recipients.\n");
                return;
            }
            ShowInProgress("Sending invite. Please wait...");
            if (operationCB.Text == "Send Invite")
            {
                InviteRequest inviteRequest = new InviteRequest();
                inviteRequest.GameId = uint.Parse(gameId);
                inviteRequest.SessionId = sessionId + ":" + variant;
                inviteRequest.Data = datablob;
                inviteRequest.Recipients = recipientsTB.Text;
                try
                {
                    ResetInviteCount(username, password); //to avoid failure due to invite count limit
                    ntfnClient.SendInvite(inviteRequest, username, password);
                    outputTB.AppendText("\n");
                    outputTB.AppendText("Successfully sent invite with GameId = " + gameId + " and sessionId = " + sessionId + "!\n");
                    sessionIdTB.Text = Guid.NewGuid().ToString();
                    outputTB.AppendText("\n");
                }
                catch (Exception ex)
                {
                    outputTB.AppendText("\n");
                    outputTB.AppendText("\n");
                    outputTB.AppendText("Error occured!\n");
                    outputTB.AppendText(ex.Message.Replace(password, "******") + "\n");
                    outputTB.AppendText("Please see verbose output tab for detail.\n");
                    outputTB.AppendText("\n");
                    outputTB.Refresh();
                }
            }
            HidePasswordInVerboseOutput();
            RemoveProgressIndicator();
        }

        private void deleteBtn_Click(object sender, EventArgs e)
        {
            ShowInProgress("Deleting. Please wait...");
            try
            {
                if (notificationIdList.SelectedValue.ToString() == "All")
                {
                    foreach (Notification n in nList)
                    {
                        ntfnClient.DeleteNotificationQuery(n.Id, username, password);
                    }
                    outputTB.AppendText("\n");
                    outputTB.AppendText("\n");
                    outputTB.AppendText("Deleted all of your notifications. \n");
                    outputTB.AppendText("\n");
                }
                else
                {
                    ntfnClient.DeleteNotificationQuery(notificationIdList.SelectedValue.ToString(), username, password);
                    outputTB.AppendText("\n");
                    outputTB.AppendText("\n");
                    outputTB.AppendText("Deleted " + notificationIdList.Text + ". \n");
                    outputTB.AppendText("\n");
                }
            }
            catch (Exception ex)
            {
                outputTB.AppendText("\n");
                outputTB.AppendText("\n");
                outputTB.AppendText("Error occured trying to delete notification!\n");
                outputTB.AppendText(ex.Message.Replace(password, "******") + "\n");
                outputTB.AppendText("Please see verbose output tab for details.\n");
                outputTB.AppendText("\n");
                outputTB.Refresh();
            }
            HidePasswordInVerboseOutput();
            RemoveProgressIndicator();
        }

        private void helpBtn_Click(object sender, EventArgs e)
        {
            outputTB.AppendText("\n");
            outputTB.AppendText("This tool can be used to create notifications, see notification list or to send invites.\n");
            outputTB.AppendText("\n");
            outputTB.AppendText("All the required fields are filled by default and can be modified.\n");
            outputTB.AppendText("Type of Operations:\n");
            outputTB.AppendText("\t Get Notifications:\n");
            outputTB.AppendText("\t\tTo see notifications. You can filter notifications by GameId, SessionId, and type.\n");
            outputTB.AppendText("\t\tLeave the GameId and SessionId empty and set the notification type to All to see all of your notifications.\n");
            outputTB.AppendText("\t Create Notification:\n");
            outputTB.AppendText("\t\tTo create notification. These are notifications associated with game sessions created by this tool.\n");
            outputTB.AppendText("\t\tIf you see notifications created this way on your mobile device and tap on them, they will take you to a real game.\n");
            outputTB.AppendText("\t Send Invite:\n");
            outputTB.AppendText("\t\tTo send invite. This calls SendInvite API from Notifications service. It will not create game sessions.\n");
            outputTB.AppendText("\t Create Fake Notification:\n");
            outputTB.AppendText("\t\tTo create notification - notifications created by this command will not be associated with game sessions.\n");
            outputTB.AppendText("\t\tTherefore, tapping on them will not take to a valid game session on mobile phone.\n");
            outputTB.AppendText("\t\tThis will be very useful if you want to change the sender information or any other field on the notification.\n");
            outputTB.AppendText("\t\tDoes not work on production since it utilized test hooks service.\n");
            outputTB.AppendText("Once you get the notification list, the dropdown in the bottom will be populated by the notifications and you can select one or 'All' to delete.\n");
            outputTB.AppendText("If you get notification list again you can see that the notification is gone.\n");
            outputTB.AppendText("This tool works in all environments including production. See the environment list.\n");
            outputTB.AppendText("The verbose output will show the detail response on each call from the service like the notification xml ...");
            outputTB.AppendText("\n");
            outputTB.Refresh();
        }

        private void ShowInProgress(string message)
        {
            statusL.Text = message;
            statusL.Visible = true;
            statusL.Refresh();
        }

        private void RemoveProgressIndicator()
        {
            statusL.Visible = false;
            statusL.Refresh();
        }

        private void HidePasswordInVerboseOutput()
        {
            string verboseLog = verboseOutpuTB.Text;
            verboseLog = verboseLog.Replace(password, "******");
            verboseOutpuTB.Text = verboseLog;
        }

        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\MPTestHooksProxy.cs ===
﻿using System.Linq;
//using Multiplayer.Test.API;
using System.Xml;
using System.Web;
//using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using System.IO;
using System.Runtime.Serialization;
//using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;
//////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Text;
using System.Configuration;
using System.Diagnostics;
using AsyncMultiplayer.SessionCommon;
using LiveN.Test.Common.Web;
using LiveN.Test.Framework.Web;

namespace ResetDispalySessionOrInvite
{
    public class MPTestHooksProxy : RestRequest
    {
        
        public string MPTestHooksServiceUrl
        {
            get;

            set;
        }

        public string TestSessionId
        {
            get;
            private set;
        }

        public MPTestHooksProxy()
        {
            CreateNewSessionId();
            Timeout = 60000;
        }



        /// <summary>
        /// Used when tests want to make sure to use a new global SessionID for their scenarios
        /// </summary>
        public void CreateNewSessionId()
        {
            TestSessionId = Guid.NewGuid().ToString();
        }


        ///// <summary>
        ///// Used to reset invite count per user to any other number.
        ///// </summary>
        public void UpdateUserEntry(
            string xuid,
            DateTime lastInviteResetTime,
            DateTime lastUpdateTime,
            int inviteCount)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}/user?Xuid={1}&LastInviteResetTime={2}&LastUpdateTime={3}&InviteCount={4}",
                MPTestHooksServiceUrl,
                xuid,
                lastInviteResetTime,
                lastUpdateTime,
                inviteCount);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Get(uri, customHeaders);

            TraceEx.TraceStart("Response: " + response, TraceEventType.Verbose);
        }

        /// <summary>
        /// Used to  get user entry, Invite count
        /// </summary>
        public string DisplayInviteCount(
           string xuid)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}/DisplayInviteCount/?XUID={1}",
                MPTestHooksServiceUrl,
                xuid);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse rr = Post(uri, customHeaders,SerializeObject(xuid));
            TraceEx.TraceVerbose("Response: " + rr.Body);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            } return GetResponseText(rr.Body);

        }


        ///// <summary>
        ///// Used to Create a single session.
        ///// </summary>
        public void CreateSession(SessionState sessionState)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}/createsession", MPTestHooksServiceUrl);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("Content-Type", "application/xml");

            string response = command.Post(uri, customHeaders, SerializeObject(sessionState));

            TraceEx.TraceStart("Response: " + response, TraceEventType.Verbose);
            TraceEx.TraceStart("Session created: " + response);
            TraceEx.TraceStart("Session Id: " + sessionState.SessionID);
        }


        ///// <summary>
        ///// Used to reset number of session to 0.
        ///// </summary>
        public void ResetNumberOfSessions(IdentityToken profile)
        {
            string uri = String.Format("{0}/resetnumberofsessions",
                MPTestHooksServiceUrl);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse rr = Post(uri, customHeaders, SerializeObject(profile));
            TraceEx.TraceStart("Response: " + rr, TraceEventType.Verbose);
        }

        ///// <summary>
        ///// Used to display number of session per user.
        ///// </summary>
        public string DisplaySessionCount(IdentityToken profile)
        {
            string uri = String.Format("{0}/DisplaySessionCount/?IdentityToken{1}",
                MPTestHooksServiceUrl,profile);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse rr = Post(uri, customHeaders,SerializeObject(profile));
            TraceEx.TraceVerbose("Response: " + rr.Body);

            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            } return GetResponseText(rr.Body);

        }

        ///// <summary>
        ///// Used as a helper method to get text in response body.
        ///// </summary>
        private string GetResponseText(string responseXml)
        {
            if (responseXml.Length == 0)
            {
                throw new InvalidOperationException("Response XML was empty - ");
            }

            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(responseXml);

            string responseText = xmlDocument.InnerText;
            return responseText.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace ResetDispalySessionOrInvite
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new ResetDisplaySessionOrInvite());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\ResetDisplaySessionOrInvite.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using LiveN.Test.Common.Forms;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.UserAccounts;
using AsyncMultiplayer.SessionCommon;

namespace ResetDispalySessionOrInvite
{
    public partial class ResetDisplaySessionOrInvite : Form
    {
        
        public ResetDisplaySessionOrInvite()
        {
            InitializeComponent();

            (Trace.Listeners["textboxVerbose"] as TextBoxTraceListener).TextBox = this.textBoxTrace;
            (Trace.Listeners["textbox"] as TextBoxTraceListener).TextBox = this.textBoxTrace;

        }

        MPTestHooksProxy testhook = new MPTestHooksProxy();
       
        
        //private void buttonSessionDisplay_Click(object sender, EventArgs e)
        //{
        //    textBoxLog.Text = "Started to display session counts for " + textBoxUserSession.Text.ToString() + "@live-int.com \n";
        //    EnvironmentElement env = Config.EnvironmentSettings.Environments[comboBox2.Text.ToString()];
        //    testhook.MPTestHooksServiceUrl = env.MPTestHooksService.ToString();
        //    textBoxLog.AppendText("Got environment settings from Config file \n");
        //    IdentityToken idToken = null;
        //    try
        //    {
        //        AuthorizationCache auth = new AuthorizationCache(env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject);
        //        ulong xuid = ulong.Parse(Authorization.GetXuid(auth.GetUserToken(
        //                                            textBoxUserSession.Text + "@live-int.com",
        //                                            textBoxPWsession.Text,
        //                                            env.WindowsLiveIDSettings.LiveIdServiceTarget,
        //                                            env.WindowsLiveIDSettings.Policy,
        //                                            env.WindowsLiveIDSettings.Environment,
        //                                            env.StsSettings.PlatformType,
        //                                            env.StsSettings.TitleId,
        //                                            env.StsSettings.TitleVersion,
        //                                            env.StsSettings.ClientVersion)));
        //        textBoxLog.AppendText("Found the xuid : " + xuid.ToString() + "\n");

        //        string gamertag = Authorization.GetGamertag(auth.GetUserToken(
        //                                            textBoxUserSession.Text + "@live-int.com",
        //                                            textBoxPWsession.Text,
        //                                            env.WindowsLiveIDSettings.LiveIdServiceTarget,
        //                                            env.WindowsLiveIDSettings.Policy,
        //                                            env.WindowsLiveIDSettings.Environment,
        //                                            env.StsSettings.PlatformType,
        //                                            env.StsSettings.TitleId,
        //                                            env.StsSettings.TitleVersion,
        //                                            env.StsSettings.ClientVersion));

        //        textBoxLog.AppendText("Found the gamertag : " + gamertag.ToString() + "\n");

        //        idToken = new IdentityToken(xuid, gamertag);
        //    }
        //    catch (Exception ex)
        //    {
        //        Trace.TraceWarning("Error: Unable to get Identity token \n");
        //        textBoxLog.AppendText("Error: Unable to get Identity token : " + ex.Message.ToString() + "\n");
        //    }

        //    try
        //    {
        //        string sessionCnt = testhook.DisplaySessionCount(idToken);
        //        if (!string.IsNullOrEmpty(sessionCnt))
        //        {
        //            textBoxLog.AppendText("The Session count for " + textBoxUserSession.Text.ToString() + "@live-int.com  , as of " +
        //                                   DateTime.UtcNow.ToString() + " , is " + sessionCnt.ToString() + "\n\n");
        //            textBoxLog.AppendText("Successfully returned the sesion count  \n");
        //        }
        //        else
        //        {
        //            textBoxLog.AppendText("Error: Unable to return session count as it is returning null or empty string\n");
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        Trace.TraceWarning("Error: Unable to return session count\n");
        //        textBoxLog.AppendText("Error: Unable to return session count " + ex.Message.ToString() + "\n");
        //    }


        //}

        private void buttonSessionReset_Click(object sender, EventArgs e)
        {
            textBoxLog.Text = "Started reseting session counts for " + textBoxUserSession.Text.ToString() + "@live-int.com \n";
            EnvironmentElement env = Config.EnvironmentSettings.Environments[comboBox2.Text.ToString()];
            testhook.MPTestHooksServiceUrl = env.MPTestHooksService.ToString();
            textBoxLog.AppendText("Got environment settings from Config file \n");
            IdentityToken idToken = null;
            try
            {
                AuthorizationCache auth = new AuthorizationCache(env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject);
                ulong xuid = ulong.Parse(Authorization.GetXuid(auth.GetUserToken(
                                                    textBoxUserSession.Text + "@live-int.com",
                                                    textBoxPWsession.Text,
                                                    env.WindowsLiveIDSettings.LiveIdServiceTarget,
                                                    env.WindowsLiveIDSettings.Policy,
                                                    env.WindowsLiveIDSettings.Environment,
                                                    env.StsSettings.PlatformType,
                                                    env.StsSettings.TitleId,
                                                    env.StsSettings.TitleVersion,
                                                    env.StsSettings.ClientVersion)));
                textBoxLog.AppendText("Found the xuid : " + xuid.ToString() + "\n");

                string gamertag = Authorization.GetGamertag(auth.GetUserToken(
                                                    textBoxUserSession.Text + "@live-int.com",
                                                    textBoxPWsession.Text,
                                                    env.WindowsLiveIDSettings.LiveIdServiceTarget,
                                                    env.WindowsLiveIDSettings.Policy,
                                                    env.WindowsLiveIDSettings.Environment,
                                                    env.StsSettings.PlatformType,
                                                    env.StsSettings.TitleId,
                                                    env.StsSettings.TitleVersion,
                                                    env.StsSettings.ClientVersion));

                textBoxLog.AppendText("Found the gamertag : " + gamertag.ToString()+"\n");

                idToken= new IdentityToken(xuid, gamertag);
            }
            catch (Exception ex)
            {
                Trace.TraceWarning("Error: Unable to get Identity token \n");
                textBoxLog.AppendText("Error: Unable to get Identity token : " +ex.Message.ToString()+ "\n");
            }

            try
            {
                testhook.ResetNumberOfSessions(idToken);
                textBoxLog.AppendText("Successfully reset the sesion count to 0 \n");
            }
            catch (Exception ex)
            {
                Trace.TraceWarning("Error: Unable to reset session \n");
                textBoxLog.AppendText("Error: Unable to reset session  "+ ex.Message.ToString() + "\n");
            }
        }

        ////private void buttonInviteDisplay_Click(object sender, EventArgs e)
        ////{
        ////    tBoxLogInvite.Text = "Started returning  Invite counts for " + tBoxUserInvite.Text.ToString() + "@live-int.com \n";

        ////    EnvironmentElement env = Config.EnvironmentSettings.Environments[comboBoxEnvInvite.Text.ToString()];
        ////    testhook.MPTestHooksServiceUrl = env.MPTestHooksService.ToString();

        ////    tBoxLogInvite.AppendText("Got environment settings from Config file \n");

        ////    string xuid = null;

        ////    try
        ////    {
        ////        AuthorizationCache auth = new AuthorizationCache(env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject);
        ////        xuid = Authorization.GetXuid(auth.GetUserToken(
        ////                                            tBoxUserInvite.Text + "@live-int.com",
        ////                                            tBoxPWInvite.Text,
        ////                                            env.WindowsLiveIDSettings.LiveIdServiceTarget,
        ////                                            env.WindowsLiveIDSettings.Policy,
        ////                                            env.WindowsLiveIDSettings.Environment,
        ////                                            env.StsSettings.PlatformType,
        ////                                            env.StsSettings.TitleId,
        ////                                            env.StsSettings.TitleVersion,
        ////                                            env.StsSettings.ClientVersion));

        ////        tBoxLogInvite.AppendText("Found the xuid : " + xuid.ToString() + "\n");

        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        Trace.TraceWarning("Error: Unable to get XUID for this user \n");
        ////        tBoxLogInvite.AppendText("Error: Unable to get XUID for this user : " + ex.Message.ToString() + "\n");
        ////    }

        ////    try
        ////    {
        ////        string InviteCnt = testhook.DisplayInviteCount(xuid);

        ////        if (!string.IsNullOrEmpty(InviteCnt))
        ////        {
        ////            tBoxLogInvite.AppendText("The Invite count for " + tBoxUserInvite.Text.ToString() + "@live-int.com  , as of " +
        ////                                   DateTime.UtcNow.ToString() + " , is " + InviteCnt.ToString() + "\n\n");
        ////            tBoxLogInvite.AppendText("Successfully returned  the Invite count  \n");
        ////        }
        ////        else
        ////        {
        ////            Trace.TraceWarning("Error: Unable to return invite count as XUID for this user is empty or null \n");
        ////            tBoxLogInvite.AppendText("Error: Unable to return invite count as XUID for this user is empty or null \n");
        ////        }
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        Trace.TraceWarning("Error: Unable to return Invite count \n");
        ////        tBoxLogInvite.AppendText("Error: Unable to return Invite count  " + ex.Message.ToString() + "\n");
        ////    }
  
        ////}

        private void buttonInviteReset_Click(object sender, EventArgs e)
        {
            tBoxLogInvite.Text = "Started reseting Invite counts for " + tBoxUserInvite.Text.ToString() + "@live-int.com \n";
           
            EnvironmentElement env = Config.EnvironmentSettings.Environments[comboBoxEnvInvite.Text.ToString()];
            testhook.MPTestHooksServiceUrl = env.MPTestHooksService.ToString();
            
            tBoxLogInvite.AppendText("Got environment settings from Config file \n");

            string xuid = null;

            try
            {
                AuthorizationCache auth = new AuthorizationCache(env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject);
                xuid = Authorization.GetXuid(auth.GetUserToken(
                                                    tBoxUserInvite.Text + "@live-int.com",
                                                    tBoxPWInvite.Text,
                                                    env.WindowsLiveIDSettings.LiveIdServiceTarget,
                                                    env.WindowsLiveIDSettings.Policy,
                                                    env.WindowsLiveIDSettings.Environment,
                                                    env.StsSettings.PlatformType,
                                                    env.StsSettings.TitleId,
                                                    env.StsSettings.TitleVersion,
                                                    env.StsSettings.ClientVersion));

                tBoxLogInvite.AppendText("Found the xuid : " + xuid.ToString() + "\n");
                               
            }
            catch (Exception ex)
            {
                Trace.TraceWarning("Error: Unable to get XUID for this user \n");
                tBoxLogInvite.AppendText("Error: Unable to get XUID for this user : " + ex.Message.ToString() + "\n");
            }

            try
            {
                if (!string.IsNullOrEmpty(xuid))
                {
                    testhook.UpdateUserEntry(xuid, DateTime.UtcNow, DateTime.UtcNow, 0);
                    tBoxLogInvite.AppendText("Successfully reset the Invite count to 0 \n");
                }
                else
                {
                    Trace.TraceWarning("Error: Unable to reset invite count as XUID for this user is empty or null \n");
                    tBoxLogInvite.AppendText("Error: Unable to reset invite count as XUID for this user is empty or null \n");
                }
            }
            catch (Exception ex)
            {
                Trace.TraceWarning("Error: Unable to reset Invite count \n");
                tBoxLogInvite.AppendText("Error: Unable to reset Invite count  " + ex.Message.ToString() + "\n");
            }
        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {

        }

        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {

        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\RestCommand.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Collections;
using System.IO;

namespace ResetDispalySessionOrInvite
{
    class RestCommand
    {
        WebClient webClient = new WebClient();
        
        public RestCommand()
        {
         
        }

        WebHeaderCollection _headers;

        public string Get(string uri, Dictionary<string, string> customHeaders)
        {
            return MakeRequest(uri,customHeaders,"GET");
        }

        private string MakeRequest(string uri, Dictionary<string, string> customHeaders, string verb)
        {
            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }
            webRequest.Method = verb;

            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                if (kvp.Key.Equals("Content-Type"))
                {
                    webRequest.ContentType = kvp.Value;
                    continue;
                }
                webRequest.Headers[kvp.Key] = kvp.Value;
            }
            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;

            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::MakeRequest");
            }

            _headers = webResponse.Headers;

            using (Stream responseStream = webResponse.GetResponseStream())
            {
                using (StreamReader responseStreamReader = new StreamReader(responseStream))
                {
                    return responseStreamReader.ReadToEnd();
                }
            }
        }

        public string GetResponseHeader(string headerItem)
        {
            return _headers[headerItem];
        }

        public string Put(string uri, string data)
        {
            return webClient.UploadString(uri, "PUT", data);
        }

        public string Put(string uri, Dictionary<string, string> customHeaders, string data)
        {
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                webClient.Headers[kvp.Key] = kvp.Value;
            }

            return webClient.UploadString(uri, "PUT", data);
        }

        public string Post(string uri, string data)
        {
            return webClient.UploadString(uri, "POST", data);
        }

        public string Post(string uri, Dictionary<string, string> customHeaders, string data)
        {
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                webClient.Headers[kvp.Key] = kvp.Value;
            }

            return webClient.UploadString(uri, "POST", data);
        }

        public string Delete(string uri)
        {
            
            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }

            
            webRequest.Method = "DELETE";
            webRequest.ContentType = "application/xml";
            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;
            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::Delete");
            }

            Stream responseStream = webResponse.GetResponseStream();
            StreamReader responseStreamReader = new StreamReader(responseStream);
            string responseString = responseStreamReader.ReadToEnd();
            responseStream.Close();
            webResponse.Close();

            return responseString;
        }

        public string Delete(string uri, Dictionary<string, string> customHeaders)
        {

            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }


            webRequest.Method = "DELETE";
            
            //Set Headers
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                //don't set the content type on deletes for some reason
                if (kvp.Key.Equals("Content-Type"))
                {
                    //webRequest.ContentType = kvp.Value;
                    continue;
                }
                webRequest.Headers[kvp.Key] = kvp.Value;
            }

            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;
            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::Delete");
            }

            Stream responseStream = webResponse.GetResponseStream();
            StreamReader responseStreamReader = new StreamReader(responseStream);
            string responseString = responseStreamReader.ReadToEnd();
            responseStream.Close();
            webResponse.Close();

            return responseString;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ResetDispalySessionOrInvite")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ResetDispalySessionOrInvite")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("8dd22284-8e0a-4d01-b001-95096508a913")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResetDispalySessionOrInvite.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResetDispalySessionOrInvite.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ResetDispalySessionOrInvite.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Reflection;
using System.Linq;
using Leet.Utils;
using LIVEN.Common.Diagnostics;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;
using Microsoft.WindowsLive.Test.PassportInterface;
using LiveN.Test.Common;
using LiveN.Test.Framework;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Forms;
using LiveN.Test.Services;
using LiveN.Test.Services.Multiplayer;

namespace LiveN.ServicesVerifier
{
    /// <summary>
    /// 
    /// </summary>
    public partial class MainForm : Form
    {  
        /// <summary>
        /// 
        /// </summary>
        private enum Icons
        {
            Warning,
            Pass,
            Fail,
            Aborted,
            Running,
        }

        private MultiplayerUtil multiplayerUtil;
        private EnvironmentElement currentEnvironment;
        private Thread worker;
        private List<Thread> workerThreads = new List<Thread>();
        private static System.Threading.Timer timer;
        private static TimeSpan elapsedTime;

        private delegate void UpdateListViewItemHandler(ListView lv, string id, string toolTip, int imageIndex, double latency);

        /// <summary>
        /// 
        /// </summary>
        public MainForm()
        {
            InitializeComponent();

            this.Text += String.Format(" - v{0}", Assembly.GetExecutingAssembly().GetName().Version.ToString()); 

            (Trace.Listeners["textbox"] as TextBoxTraceListener).TextBox = this.output;
            (Trace.Listeners["textboxVerbose"] as TextBoxTraceListener).TextBox = this.outputVerbose;
            this.iNT2ToolStripMenuItem.Checked = true;

            BuildUI();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void EnvironmentMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem menuItem = sender as ToolStripMenuItem;
            foreach (ToolStripMenuItem child in this.environmentToolStripMenuItem.DropDownItems)
                child.Checked = child == menuItem;            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void EnvironmentToolStripMenuItem_CheckedChanged(object sender, EventArgs e)
        {
            ToolStripMenuItem menuItem = sender as ToolStripMenuItem;
            if (menuItem.Checked)
            {
                string environmentName = menuItem.Tag.ToString();
                this.currentEnvironment = Config.EnvironmentSettings.Environments[environmentName];                

                if (this.currentEnvironment == null)
                {
                    MessageBox.Show(
                       this,
                       String.Format("Selected environment '{0}' was not found in the configuration file.  Environment names are case sensitive; ensure that the configuration file matches the menu item.", environmentName),
                       "Environment Not Found",
                       MessageBoxButtons.OK,
                       MessageBoxIcon.Error);
                    return;
                }

                this.toolStripStatusLabelEnvironment.Text = String.Format("Environment: {0}", environmentName);
                this.multiplayerUtil = new MultiplayerUtil(
                    this.currentEnvironment.GameSessionService.ToString(),
                    this.currentEnvironment.GameStateService.ToString(),
                    this.currentEnvironment.NotificationsService.ToString(),
                    this.currentEnvironment.StsSettings.StsUrl,
                    this.currentEnvironment.StsSettings.ClientCertSubject,
                    this.currentEnvironment.WindowsLiveIDSettings.LiveIdServiceTarget,
                    this.currentEnvironment.WindowsLiveIDSettings.Policy,
                    this.currentEnvironment.WindowsLiveIDSettings.Environment,
                    this.currentEnvironment.StsSettings.TitleId,
                    this.currentEnvironment.StsSettings.TitleVersion,
                    this.currentEnvironment.StsSettings.PlatformType,
                    this.currentEnvironment.StsSettings.ClientVersion,
                    this.currentEnvironment.StsSettings.AudienceUri_MultiPlayer);

                //clear the auth cache
                AuthorizationCache.ClearCache();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void BuildUI()
        {
            MonitoringBlock monitoringBlock;

            Trace.TraceInformation("Loading Monitoring Blocks from {0}...", Path.Combine(Utility.CurrentDirectory, "LiveN.Test.Services.dll"));
            Assembly assembly = Assembly.LoadFrom("LiveN.Test.Services.dll");
            Type[] types = assembly.GetTypes();
            IntPtr temp = this.tabControl.Handle;   //Note: the tab control's handle needs to be created for Insert() to work
            
            //select all types from the assembly that derive from MonitoringBlock
            IEnumerable<Type> monitoringBlockTypes = assembly.GetTypes().Where<Type>(n => n.IsSubclassOf(typeof(MonitoringBlock)));
            Trace.TraceInformation("Found {0} Monitoring Blocks to load.", monitoringBlockTypes.Count<Type>());
            List<MonitoringBlock> monitoringBlocks = new List<MonitoringBlock>();

            foreach (Type type in monitoringBlockTypes)
            {
                // AvatarServicesMonitoringBlock avatar = new AvatarServicesMonitoringBlock(this.currentEnvironment.Name);

                try
                {
                    monitoringBlock = Activator.CreateInstance(type, this.currentEnvironment.Name) as MonitoringBlock;
                }
                catch (Exception exc)
                {
                    throw new Exception("If this happens, the error message it worthless as the exception it masked. Try creating the object with a new in order to see what's really going on here. \r\nExample: AvatarServicesMonitoringBlock avatar = new AvatarServicesMonitoringBlock(this.currentEnvironment.Name); \r\n\r\nException:\r\n" + exc.ToString());
                }

                monitoringBlocks.Add(monitoringBlock);
            }

            //sort the UI according to Priority, from left to right
            monitoringBlocks.Sort((x, y) => x.Priority.CompareTo(y.Priority));

            for(int i=0; i<monitoringBlocks.Count; i++)
            {
                CreateTab(monitoringBlocks[i], i);
            }

            this.tabControl.SelectedIndex = 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="monitoringType"></param>
        private void CreateTab(MonitoringBlock monitoringBlock, int tabIndex)
        {
            //setup the listview for the monitoring area
            ListViewGroup group = new ListViewGroup(monitoringBlock.FullName);
            
            ListView newListView = new ListView();
            newListView.Columns.Add(String.Empty, 534);
            newListView.Groups.Add(group);
            newListView.Dock = DockStyle.Fill;
            newListView.View = View.Details;
            newListView.GridLines = true;
            newListView.SmallImageList = this.imageList;
            newListView.ShowItemToolTips = true;

            List<TestInfo> tests = monitoringBlock.GetTestNames();
            for (int i = 0; i < tests.Count; i++)
            {
                ListViewItem item = new ListViewItem(tests[i].Name, 0, group);
                item.Name = tests[i].Id;
                item.IndentCount = 2;
                newListView.Items.Add(item);
            }

            Type monitoringType = monitoringBlock.GetType();
            TabPage newPage = new TabPage(monitoringBlock.Name);
            newPage.Name = monitoringType.FullName;
            newPage.UseVisualStyleBackColor = true;
            newPage.Controls.Add(newListView);
            newPage.Tag = monitoringType;

            this.tabControl.TabPages.Insert(tabIndex, newPage);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void toolStripPlayButton_Click(object sender, EventArgs e)
        {
            if (this.currentEnvironment == null || this.multiplayerUtil == null)
            {
                MessageBox.Show(
                    this,
                    "No environment is currently selected; a valid environment is required to run tests.  Select a valid environment from Options -> Environment.",
                    "No Environment Selected",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            Type monitoringType = this.tabControl.SelectedTab.Tag as Type;
            ListView selectedTests = this.tabControl.SelectedTab.Controls[0] as ListView;
            if (monitoringType == null || selectedTests == null)
                return; //we're on a tab that isn't a monitoring block - just bail

            this.toolStripPlayButton.Enabled = false;
            this.toolStripButtonRunAll.Enabled = false;
            this.toolStripStopButton.Enabled = true;
            ResetImages(selectedTests);

            this.toolStripStatusTimeElapsed.Text = "00:00:00";
            this.output.Clear();
            this.outputVerbose.Clear();

            //clear the auth cache
            AuthorizationCache.ClearCache();

            elapsedTime = new TimeSpan(0, 0, 0);
            timer = new System.Threading.Timer(TimerCallback, null, 1000, 1000);

            this.worker = new Thread(new ParameterizedThreadStart(RunTestsWorker));
            this.worker.Start(
                new RunTestsThreadState()
                { 
                    Environment = this.currentEnvironment,
                    ListView = selectedTests,
                    MonitoringType = monitoringType
                });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void TimerCallback(object state)
        {
            elapsedTime = elapsedTime.Add(TimeSpan.FromSeconds(1));
            UpdateElapsedTime(elapsedTime);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="duration"></param>
        private void UpdateElapsedTime(TimeSpan duration)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<TimeSpan>(UpdateElapsedTime), duration);
            }
            else
            {
                this.toolStripStatusTimeElapsed.Text = String.Format("{0}:{1}:{2}", duration.Hours.ToString("D2"), duration.Minutes.ToString("D2"), duration.Seconds.ToString("D2"));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void RunTestsWorker(object state)
        {
            RunTestsThreadState runTestsState = state as RunTestsThreadState;
            string listenerName = "ItemListener" + Thread.CurrentThread.ManagedThreadId.ToString();

            try
            {
                MonitoringBlock monitoringBlock = Activator.CreateInstance(runTestsState.MonitoringType, runTestsState.Environment.Name) as MonitoringBlock;

                //add a per-test trace listener, to provide more tooltip context
                StringBuilderTraceListener itemListener = new StringBuilderTraceListener(false);
                itemListener.Filter = new EventTypeFilter(SourceLevels.Information);
                itemListener.Name = listenerName;
                Trace.Listeners.Add(itemListener);

                monitoringBlock.TestStarted += (testInfo, sender) =>
                    {
                        UpdateIcon(runTestsState.ListView, testInfo.Id, (int)Icons.Running);
                        itemListener.TraceString.Length = 0;    //effectively clear the buffer before each test
                    };

                monitoringBlock.TestCompleted += (testInfo, result, sender) =>
                    {
                        if (result.Passed)
                        {
                            string verboseText = itemListener.TraceString.ToString();

                            UpdateItem(
                               runTestsState.ListView,
                               testInfo.Id,
                               verboseText,
                               (int)Icons.Pass,
                               result.Latency.TotalMilliseconds);
                        }
                        else
                        {
                            UpdateItem(
                               runTestsState.ListView,
                               testInfo.Id,
                               (result.Error != null ? result.Error.ToString() : "No exception information is available."),
                               (int)Icons.Fail,
                               result.Latency.TotalMilliseconds);
                        }
                    };

                List<IResult> results = monitoringBlock.RunTests();
            }
            catch (ThreadAbortException)
            {
                //user cancelled the tests; just eat it
            }
            catch (Exception e)
            {
                ShowError(e, "Unexpected Exception", "An unexpected error occurred. View the exception details for more information.");
            }
            finally
            {
                //remove the per-test trace listener
                StringBuilderTraceListener itemListener = Trace.Listeners[listenerName] as StringBuilderTraceListener;
                if (itemListener != null)
                    Trace.Listeners.Remove(itemListener);

                MarkAborted(runTestsState.ListView);
                ResetUI();  //<-- this disposes (stops) the elapsed time...
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="listView"></param>
        /// <param name="id"></param>
        /// <param name="imageIndex"></param>
        private void UpdateIcon(ListView listView, string id, int imageIndex)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<ListView, string, int>(UpdateIcon), listView, id, imageIndex); 
            }
            else
            {
                ListViewItem item = listView.Items.Find(id, true)[0];
                item.ImageIndex = imageIndex;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="groupIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="imageIndex"></param>
        private void UpdateItem(ListView listView, string id, string toolTip, int imageIndex, double latency)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UpdateListViewItemHandler(UpdateItem), listView, id, toolTip, imageIndex, latency);
            }
            else
            {
                ListViewItem item = listView.Items.Find(id, true)[0];
                item.ImageIndex = imageIndex;
                item.ToolTipText = toolTip;

                Regex latencyText = new Regex(@"\(\d+\.{0,1}\d*ms\)");
                if (latencyText.IsMatch(item.Text))
                    item.Text = latencyText.Replace(item.Text, "(" + latency + "ms)");
                else
                    item.Text += " (" + latency + "ms)";
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void MarkAborted(ListView listView)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<ListView>(MarkAborted), listView);
            }
            else
            {
                for (int i = 0; i < listView.Items.Count; i++)
                {
                    if (listView.Items[i].ImageIndex == (int)Icons.Warning)
                    {
                        listView.Items[i].ImageIndex = (int)Icons.Aborted;
                        listView.Items[i].ToolTipText = "Test aborted due to previous failure(s).";
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void ResetImages(ListView listView)
        {
            for (int i = 0; i < listView.Items.Count; i++)
            {
                listView.Items[i].ImageIndex = (int)Icons.Warning;
                listView.Items[i].ToolTipText = String.Empty;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void ResetUI()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(ResetUI));
            }
            else
            {
                bool anyActiveThreads = this.workerThreads.Any<Thread>(t => t.IsAlive);                
                if (!anyActiveThreads)  //are they any remaining worker threads for 'Play All'?  If so, don't reset the UI...
                {
                    timer.Dispose();
                    timer = null;

                    this.toolStripStopButton.Enabled = false;
                    this.toolStripPlayButton.Enabled = true;
                    this.toolStripButtonRunAll.Enabled = true;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void toolStripStopButton_Click(object sender, EventArgs e)
        {
            if (this.worker != null)
            {
                if (!this.worker.Join(500) && this.worker.IsAlive)
                    this.worker.Abort();
                this.worker = null;
            }

            if (this.workerThreads.Count > 0)
            {
                foreach (Thread thread in this.workerThreads)
                {
                    if (!thread.Join(100) && thread.IsAlive)
                        thread.Abort();
                }

                this.workerThreads.Clear();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            toolStripStopButton_Click(this.toolStripStopButton, EventArgs.Empty);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ignoreServerSSLErrorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Net.ServicePointManager.ServerCertificateValidationCallback = (caller, certificate, chain, sslPolicyErrors) => true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void output_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.A)
            {
                (sender as TextBox).SelectAll();
                e.Handled = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (AboutForm about = new AboutForm("LiveN Services Verifier", "LIVE Engagement Services - Test", "livensta", this.Icon.ToBitmap()))
            {
                about.ShowDialog(this);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        /// <param name="caption"></param>
        /// <param name="message"></param>
        private void ShowError(Exception e, string caption, string message)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<Exception, string, string>(ShowError), e, caption, message);
            }
            else
            {
                using (ErrorBox errorMessage = new ErrorBox(e, caption, message))
                {
                    errorMessage.ShowDialog(this);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void toolStripButtonRunAll_Click(object sender, EventArgs e)
        {
            if (this.currentEnvironment == null || this.multiplayerUtil == null)
            {
                MessageBox.Show(
                    this,
                    "No environment is currently selected; a valid environment is required to run tests.  Select a valid environment from Options -> Environment.",
                    "No Environment Selected",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            this.toolStripPlayButton.Enabled = false;
            this.toolStripButtonRunAll.Enabled = false;
            this.toolStripStopButton.Enabled = true;
            this.toolStripStatusTimeElapsed.Text = "00:00:00";
            this.output.Clear();
            this.outputVerbose.Clear();

            //clear the auth cache
            AuthorizationCache.ClearCache();

            //clear the thread list and start the elapsed time...
            this.workerThreads.Clear();
            elapsedTime = new TimeSpan(0, 0, 0);
            timer = new System.Threading.Timer(TimerCallback, null, 1000, 1000);

            foreach (TabPage tab in this.tabControl.TabPages)
            {
                Type monitoringType = tab.Tag as Type;
                ListView selectedTests = tab.Controls[0] as ListView;
                if (monitoringType == null || selectedTests == null)
                    continue; //we're on a tab that isn't a monitoring block - just bail

                ResetImages(selectedTests);
                
                Thread worker = new Thread(new ParameterizedThreadStart(RunTestsWorker));
                this.workerThreads.Add(worker);
                worker.Start(
                    new RunTestsThreadState()
                    {
                        Environment = this.currentEnvironment,
                        ListView = selectedTests,
                        MonitoringType = monitoringType
                    });
            }
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ResetSessionInviteCount\ResetDispalySessionOrInvite\ResetDisplaySessionOrInvite.Designer.cs ===
﻿namespace ResetDispalySessionOrInvite
{
    partial class ResetDisplaySessionOrInvite
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.labelDomain = new System.Windows.Forms.Label();
            this.buttonDisplay = new System.Windows.Forms.Button();
            this.buttonReset = new System.Windows.Forms.Button();
            this.textBoxPassword = new System.Windows.Forms.TextBox();
            this.textBoxUser = new System.Windows.Forms.TextBox();
            this.comboBoxEnv = new System.Windows.Forms.ComboBox();
            this.labelPasword = new System.Windows.Forms.Label();
            this.labelUser = new System.Windows.Forms.Label();
            this.labelEnv = new System.Windows.Forms.Label();
            this.button1 = new System.Windows.Forms.Button();
            this.button2 = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.tabControlReset = new System.Windows.Forms.TabControl();
            this.tabPage3 = new System.Windows.Forms.TabPage();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.textBoxTraces = new System.Windows.Forms.TextBox();
            this.button3 = new System.Windows.Forms.Button();
            this.button4 = new System.Windows.Forms.Button();
            this.label5 = new System.Windows.Forms.Label();
            this.tabPage4 = new System.Windows.Forms.TabPage();
            this.textBoxLog = new System.Windows.Forms.TextBox();
            this.textBoxPWsession = new System.Windows.Forms.TextBox();
            this.textBoxUserSession = new System.Windows.Forms.TextBox();
            this.comboBox2 = new System.Windows.Forms.ComboBox();
            this.label6 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.label8 = new System.Windows.Forms.Label();
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage5 = new System.Windows.Forms.TabPage();
            this.tBoxLogInvite = new System.Windows.Forms.TextBox();
            this.label9 = new System.Windows.Forms.Label();
            this.button5 = new System.Windows.Forms.Button();
            this.btnResetInvite = new System.Windows.Forms.Button();
            this.tBoxPWInvite = new System.Windows.Forms.TextBox();
            this.tBoxUserInvite = new System.Windows.Forms.TextBox();
            this.comboBoxEnvInvite = new System.Windows.Forms.ComboBox();
            this.label10 = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.label12 = new System.Windows.Forms.Label();
            this.tabPage6 = new System.Windows.Forms.TabPage();
            this.textBoxTrace = new System.Windows.Forms.TextBox();
            this.labelDomainInvite = new System.Windows.Forms.Label();
            this.buttonDispayInvite = new System.Windows.Forms.Button();
            this.buttonResetInvite = new System.Windows.Forms.Button();
            this.textBoxPasswordInvite = new System.Windows.Forms.TextBox();
            this.textBoxUserInvite = new System.Windows.Forms.TextBox();
            this.comboBoxInvite = new System.Windows.Forms.ComboBox();
            this.labelPasswordInvite = new System.Windows.Forms.Label();
            this.labelUserInvite = new System.Windows.Forms.Label();
            this.labelEnvInvite = new System.Windows.Forms.Label();
            this.tabPage1.SuspendLayout();
            this.tabControlReset.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.tabPage4.SuspendLayout();
            this.tabControl1.SuspendLayout();
            this.tabPage5.SuspendLayout();
            this.tabPage6.SuspendLayout();
            this.SuspendLayout();
            // 
            // labelDomain
            // 
            this.labelDomain.AutoSize = true;
            this.labelDomain.Location = new System.Drawing.Point(235, 68);
            this.labelDomain.Name = "labelDomain";
            this.labelDomain.Size = new System.Drawing.Size(71, 13);
            this.labelDomain.TabIndex = 8;
            this.labelDomain.Text = "@live-int.com";
            // 
            // buttonDisplay
            // 
            this.buttonDisplay.Location = new System.Drawing.Point(64, 360);
            this.buttonDisplay.Name = "buttonDisplay";
            this.buttonDisplay.Size = new System.Drawing.Size(136, 48);
            this.buttonDisplay.TabIndex = 7;
            this.buttonDisplay.Text = "Display Session Count";
            this.buttonDisplay.UseVisualStyleBackColor = true;
            // 
            // buttonReset
            // 
            this.buttonReset.Location = new System.Drawing.Point(396, 360);
            this.buttonReset.Name = "buttonReset";
            this.buttonReset.Size = new System.Drawing.Size(124, 49);
            this.buttonReset.TabIndex = 6;
            this.buttonReset.Text = "Reset Session Count";
            this.buttonReset.UseVisualStyleBackColor = true;
            // 
            // textBoxPassword
            // 
            this.textBoxPassword.Location = new System.Drawing.Point(91, 100);
            this.textBoxPassword.Name = "textBoxPassword";
            this.textBoxPassword.Size = new System.Drawing.Size(141, 20);
            this.textBoxPassword.TabIndex = 5;
            // 
            // textBoxUser
            // 
            this.textBoxUser.Location = new System.Drawing.Point(91, 67);
            this.textBoxUser.Name = "textBoxUser";
            this.textBoxUser.Size = new System.Drawing.Size(143, 20);
            this.textBoxUser.TabIndex = 4;
            // 
            // comboBoxEnv
            // 
            this.comboBoxEnv.FormattingEnabled = true;
            this.comboBoxEnv.Items.AddRange(new object[] {
            "dev",
            "storax",
            "testnet",
            "int2",
            "PartnerNet",
            "Airlock_LEST",
            "Airlock_LEET"});
            this.comboBoxEnv.Location = new System.Drawing.Point(91, 21);
            this.comboBoxEnv.Name = "comboBoxEnv";
            this.comboBoxEnv.Size = new System.Drawing.Size(110, 21);
            this.comboBoxEnv.TabIndex = 3;
            this.comboBoxEnv.Text = "dev";
            // 
            // labelPasword
            // 
            this.labelPasword.AutoSize = true;
            this.labelPasword.Location = new System.Drawing.Point(13, 103);
            this.labelPasword.Name = "labelPasword";
            this.labelPasword.Size = new System.Drawing.Size(68, 13);
            this.labelPasword.TabIndex = 2;
            this.labelPasword.Text = "Password   : ";
            // 
            // labelUser
            // 
            this.labelUser.AutoSize = true;
            this.labelUser.Location = new System.Drawing.Point(10, 67);
            this.labelUser.Name = "labelUser";
            this.labelUser.Size = new System.Drawing.Size(69, 13);
            this.labelUser.TabIndex = 1;
            this.labelUser.Text = "User Name : ";
            // 
            // labelEnv
            // 
            this.labelEnv.AutoSize = true;
            this.labelEnv.Location = new System.Drawing.Point(10, 24);
            this.labelEnv.Name = "labelEnv";
            this.labelEnv.Size = new System.Drawing.Size(75, 13);
            this.labelEnv.TabIndex = 0;
            this.labelEnv.Text = "Environment : ";
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(64, 360);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(136, 48);
            this.button1.TabIndex = 7;
            this.button1.Text = "Display Session Count";
            this.button1.UseVisualStyleBackColor = true;
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(396, 360);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(124, 49);
            this.button2.TabIndex = 6;
            this.button2.Text = "Reset Session Count";
            this.button2.UseVisualStyleBackColor = true;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(235, 68);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(71, 13);
            this.label1.TabIndex = 8;
            this.label1.Text = "@live-int.com";
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.label1);
            this.tabPage1.Controls.Add(this.button1);
            this.tabPage1.Controls.Add(this.button2);
            this.tabPage1.Controls.Add(this.textBox1);
            this.tabPage1.Controls.Add(this.textBox2);
            this.tabPage1.Controls.Add(this.comboBox1);
            this.tabPage1.Controls.Add(this.label2);
            this.tabPage1.Controls.Add(this.label3);
            this.tabPage1.Controls.Add(this.label4);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(691, 484);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Reset Session Count";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(91, 100);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(141, 20);
            this.textBox1.TabIndex = 5;
            // 
            // textBox2
            // 
            this.textBox2.Location = new System.Drawing.Point(91, 67);
            this.textBox2.Name = "textBox2";
            this.textBox2.Size = new System.Drawing.Size(143, 20);
            this.textBox2.TabIndex = 4;
            // 
            // comboBox1
            // 
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Items.AddRange(new object[] {
            "dev",
            "storax",
            "testnet",
            "int2",
            "PartnerNet",
            "Airlock_LEST",
            "Airlock_LEET"});
            this.comboBox1.Location = new System.Drawing.Point(91, 21);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(110, 21);
            this.comboBox1.TabIndex = 3;
            this.comboBox1.Text = "dev";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(13, 103);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(68, 13);
            this.label2.TabIndex = 2;
            this.label2.Text = "Password   : ";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(10, 67);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(69, 13);
            this.label3.TabIndex = 1;
            this.label3.Text = "User Name : ";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(10, 24);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(75, 13);
            this.label4.TabIndex = 0;
            this.label4.Text = "Environment : ";
            // 
            // tabControlReset
            // 
            this.tabControlReset.Controls.Add(this.tabPage1);
            this.tabControlReset.Controls.Add(this.tabPage3);
            this.tabControlReset.Controls.Add(this.tabPage2);
            this.tabControlReset.Location = new System.Drawing.Point(12, 3);
            this.tabControlReset.Name = "tabControlReset";
            this.tabControlReset.SelectedIndex = 0;
            this.tabControlReset.Size = new System.Drawing.Size(699, 510);
            this.tabControlReset.TabIndex = 0;
            // 
            // tabPage3
            // 
            this.tabPage3.Location = new System.Drawing.Point(4, 22);
            this.tabPage3.Name = "tabPage3";
            this.tabPage3.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage3.Size = new System.Drawing.Size(691, 484);
            this.tabPage3.TabIndex = 2;
            this.tabPage3.Text = "Reset Invite Count";
            this.tabPage3.UseVisualStyleBackColor = true;
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.textBoxTraces);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(691, 484);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Traces and Debug Outputs";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // textBoxTraces
            // 
            this.textBoxTraces.Location = new System.Drawing.Point(4, 6);
            this.textBoxTraces.Multiline = true;
            this.textBoxTraces.Name = "textBoxTraces";
            this.textBoxTraces.Size = new System.Drawing.Size(679, 489);
            this.textBoxTraces.TabIndex = 0;
            // 
            // button3
            // 
            this.button3.Enabled = false;
            this.button3.Location = new System.Drawing.Point(423, 354);
            this.button3.Name = "button3";
            this.button3.Size = new System.Drawing.Size(136, 48);
            this.button3.TabIndex = 7;
            this.button3.Text = "Display Session Count";
            this.button3.UseVisualStyleBackColor = true;
            this.button3.Visible = false;
            // 
            // button4
            // 
            this.button4.Location = new System.Drawing.Point(60, 353);
            this.button4.Name = "button4";
            this.button4.Size = new System.Drawing.Size(147, 65);
            this.button4.TabIndex = 6;
            this.button4.Text = "Reset Session Count";
            this.button4.UseVisualStyleBackColor = true;
            this.button4.Click += new System.EventHandler(this.buttonSessionReset_Click);
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(235, 68);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(71, 13);
            this.label5.TabIndex = 8;
            this.label5.Text = "@live-int.com";
            // 
            // tabPage4
            // 
            this.tabPage4.Controls.Add(this.textBoxLog);
            this.tabPage4.Controls.Add(this.label5);
            this.tabPage4.Controls.Add(this.button3);
            this.tabPage4.Controls.Add(this.button4);
            this.tabPage4.Controls.Add(this.textBoxPWsession);
            this.tabPage4.Controls.Add(this.textBoxUserSession);
            this.tabPage4.Controls.Add(this.comboBox2);
            this.tabPage4.Controls.Add(this.label6);
            this.tabPage4.Controls.Add(this.label7);
            this.tabPage4.Controls.Add(this.label8);
            this.tabPage4.Location = new System.Drawing.Point(4, 22);
            this.tabPage4.Name = "tabPage4";
            this.tabPage4.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage4.Size = new System.Drawing.Size(691, 484);
            this.tabPage4.TabIndex = 0;
            this.tabPage4.Text = "Reset Session Count";
            this.tabPage4.UseVisualStyleBackColor = true;
            // 
            // textBoxLog
            // 
            this.textBoxLog.Location = new System.Drawing.Point(60, 150);
            this.textBoxLog.Multiline = true;
            this.textBoxLog.Name = "textBoxLog";
            this.textBoxLog.Size = new System.Drawing.Size(586, 184);
            this.textBoxLog.TabIndex = 9;
            // 
            // textBoxPWsession
            // 
            this.textBoxPWsession.Location = new System.Drawing.Point(91, 100);
            this.textBoxPWsession.Name = "textBoxPWsession";
            this.textBoxPWsession.Size = new System.Drawing.Size(141, 20);
            this.textBoxPWsession.TabIndex = 5;
            // 
            // textBoxUserSession
            // 
            this.textBoxUserSession.Location = new System.Drawing.Point(91, 67);
            this.textBoxUserSession.Name = "textBoxUserSession";
            this.textBoxUserSession.Size = new System.Drawing.Size(143, 20);
            this.textBoxUserSession.TabIndex = 4;
            // 
            // comboBox2
            // 
            this.comboBox2.FormattingEnabled = true;
            this.comboBox2.Items.AddRange(new object[] {
            "dev",
            "storax",
            "testnet",
            "int2",
            "PartnerNet",
            "Airlock_LEST",
            "Airlock_LEET"});
            this.comboBox2.Location = new System.Drawing.Point(91, 21);
            this.comboBox2.Name = "comboBox2";
            this.comboBox2.Size = new System.Drawing.Size(110, 21);
            this.comboBox2.TabIndex = 3;
            this.comboBox2.Text = "dev";
            this.comboBox2.SelectedIndexChanged += new System.EventHandler(this.comboBox2_SelectedIndexChanged);
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(13, 103);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(68, 13);
            this.label6.TabIndex = 2;
            this.label6.Text = "Password   : ";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(10, 67);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(69, 13);
            this.label7.TabIndex = 1;
            this.label7.Text = "User Name : ";
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(10, 24);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(75, 13);
            this.label8.TabIndex = 0;
            this.label8.Text = "Environment : ";
            // 
            // tabControl1
            // 
            this.tabControl1.Controls.Add(this.tabPage4);
            this.tabControl1.Controls.Add(this.tabPage5);
            this.tabControl1.Controls.Add(this.tabPage6);
            this.tabControl1.Location = new System.Drawing.Point(-1, -3);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(699, 510);
            this.tabControl1.TabIndex = 1;
            // 
            // tabPage5
            // 
            this.tabPage5.Controls.Add(this.tBoxLogInvite);
            this.tabPage5.Controls.Add(this.label9);
            this.tabPage5.Controls.Add(this.button5);
            this.tabPage5.Controls.Add(this.btnResetInvite);
            this.tabPage5.Controls.Add(this.tBoxPWInvite);
            this.tabPage5.Controls.Add(this.tBoxUserInvite);
            this.tabPage5.Controls.Add(this.comboBoxEnvInvite);
            this.tabPage5.Controls.Add(this.label10);
            this.tabPage5.Controls.Add(this.label11);
            this.tabPage5.Controls.Add(this.label12);
            this.tabPage5.Location = new System.Drawing.Point(4, 22);
            this.tabPage5.Name = "tabPage5";
            this.tabPage5.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage5.Size = new System.Drawing.Size(691, 484);
            this.tabPage5.TabIndex = 2;
            this.tabPage5.Text = "Reset Invite Count";
            this.tabPage5.UseVisualStyleBackColor = true;
            // 
            // tBoxLogInvite
            // 
            this.tBoxLogInvite.Location = new System.Drawing.Point(27, 164);
            this.tBoxLogInvite.Multiline = true;
            this.tBoxLogInvite.Name = "tBoxLogInvite";
            this.tBoxLogInvite.Size = new System.Drawing.Size(632, 199);
            this.tBoxLogInvite.TabIndex = 27;
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(303, 93);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(71, 13);
            this.label9.TabIndex = 26;
            this.label9.Text = "@live-int.com";
            // 
            // button5
            // 
            this.button5.Enabled = false;
            this.button5.Location = new System.Drawing.Point(503, 411);
            this.button5.Name = "button5";
            this.button5.Size = new System.Drawing.Size(136, 48);
            this.button5.TabIndex = 25;
            this.button5.Text = "Display Invite Count";
            this.button5.UseVisualStyleBackColor = true;
            this.button5.Visible = false;
            // 
            // btnResetInvite
            // 
            this.btnResetInvite.Location = new System.Drawing.Point(60, 388);
            this.btnResetInvite.Name = "btnResetInvite";
            this.btnResetInvite.Size = new System.Drawing.Size(159, 60);
            this.btnResetInvite.TabIndex = 24;
            this.btnResetInvite.Text = "Reset Invite Count";
            this.btnResetInvite.UseVisualStyleBackColor = true;
            this.btnResetInvite.Click += new System.EventHandler(this.buttonInviteReset_Click);
            // 
            // tBoxPWInvite
            // 
            this.tBoxPWInvite.Location = new System.Drawing.Point(159, 125);
            this.tBoxPWInvite.Name = "tBoxPWInvite";
            this.tBoxPWInvite.Size = new System.Drawing.Size(141, 20);
            this.tBoxPWInvite.TabIndex = 23;
            // 
            // tBoxUserInvite
            // 
            this.tBoxUserInvite.Location = new System.Drawing.Point(159, 92);
            this.tBoxUserInvite.Name = "tBoxUserInvite";
            this.tBoxUserInvite.Size = new System.Drawing.Size(143, 20);
            this.tBoxUserInvite.TabIndex = 22;
            // 
            // comboBoxEnvInvite
            // 
            this.comboBoxEnvInvite.FormattingEnabled = true;
            this.comboBoxEnvInvite.Items.AddRange(new object[] {
            "dev",
            "storax",
            "testnet",
            "int2",
            "PartnerNet",
            "Airlock_LEST",
            "Airlock_LEET"});
            this.comboBoxEnvInvite.Location = new System.Drawing.Point(159, 46);
            this.comboBoxEnvInvite.Name = "comboBoxEnvInvite";
            this.comboBoxEnvInvite.Size = new System.Drawing.Size(110, 21);
            this.comboBoxEnvInvite.TabIndex = 21;
            this.comboBoxEnvInvite.Text = "dev";
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(81, 128);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(68, 13);
            this.label10.TabIndex = 20;
            this.label10.Text = "Password   : ";
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(78, 92);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(69, 13);
            this.label11.TabIndex = 19;
            this.label11.Text = "User Name : ";
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(78, 49);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(75, 13);
            this.label12.TabIndex = 18;
            this.label12.Text = "Environment : ";
            // 
            // tabPage6
            // 
            this.tabPage6.Controls.Add(this.textBoxTrace);
            this.tabPage6.Location = new System.Drawing.Point(4, 22);
            this.tabPage6.Name = "tabPage6";
            this.tabPage6.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage6.Size = new System.Drawing.Size(691, 484);
            this.tabPage6.TabIndex = 1;
            this.tabPage6.Text = "Traces and Debug Outputs";
            this.tabPage6.UseVisualStyleBackColor = true;
            // 
            // textBoxTrace
            // 
            this.textBoxTrace.Location = new System.Drawing.Point(5, 4);
            this.textBoxTrace.Multiline = true;
            this.textBoxTrace.Name = "textBoxTrace";
            this.textBoxTrace.ScrollBars = System.Windows.Forms.ScrollBars.Horizontal;
            this.textBoxTrace.Size = new System.Drawing.Size(676, 470);
            this.textBoxTrace.TabIndex = 0;
            // 
            // labelDomainInvite
            // 
            this.labelDomainInvite.AutoSize = true;
            this.labelDomainInvite.Location = new System.Drawing.Point(240, 98);
            this.labelDomainInvite.Name = "labelDomainInvite";
            this.labelDomainInvite.Size = new System.Drawing.Size(71, 13);
            this.labelDomainInvite.TabIndex = 17;
            this.labelDomainInvite.Text = "@live-int.com";
            // 
            // buttonDispayInvite
            // 
            this.buttonDispayInvite.Location = new System.Drawing.Point(93, 394);
            this.buttonDispayInvite.Name = "buttonDispayInvite";
            this.buttonDispayInvite.Size = new System.Drawing.Size(136, 48);
            this.buttonDispayInvite.TabIndex = 16;
            this.buttonDispayInvite.Text = "Display Invite Count";
            this.buttonDispayInvite.UseVisualStyleBackColor = true;
            // 
            // buttonResetInvite
            // 
            this.buttonResetInvite.Location = new System.Drawing.Point(425, 394);
            this.buttonResetInvite.Name = "buttonResetInvite";
            this.buttonResetInvite.Size = new System.Drawing.Size(124, 49);
            this.buttonResetInvite.TabIndex = 15;
            this.buttonResetInvite.Text = "Reset Invite Count";
            this.buttonResetInvite.UseVisualStyleBackColor = true;
            // 
            // textBoxPasswordInvite
            // 
            this.textBoxPasswordInvite.Location = new System.Drawing.Point(96, 130);
            this.textBoxPasswordInvite.Name = "textBoxPasswordInvite";
            this.textBoxPasswordInvite.Size = new System.Drawing.Size(141, 20);
            this.textBoxPasswordInvite.TabIndex = 14;
            // 
            // textBoxUserInvite
            // 
            this.textBoxUserInvite.Location = new System.Drawing.Point(96, 97);
            this.textBoxUserInvite.Name = "textBoxUserInvite";
            this.textBoxUserInvite.Size = new System.Drawing.Size(143, 20);
            this.textBoxUserInvite.TabIndex = 13;
            // 
            // comboBoxInvite
            // 
            this.comboBoxInvite.FormattingEnabled = true;
            this.comboBoxInvite.Items.AddRange(new object[] {
            "dev",
            "storax",
            "testnet",
            "int2",
            "PartnerNet",
            "Airlock_LEST",
            "Airlock_LEET"});
            this.comboBoxInvite.Location = new System.Drawing.Point(96, 51);
            this.comboBoxInvite.Name = "comboBoxInvite";
            this.comboBoxInvite.Size = new System.Drawing.Size(110, 21);
            this.comboBoxInvite.TabIndex = 12;
            this.comboBoxInvite.Text = "dev";
            // 
            // labelPasswordInvite
            // 
            this.labelPasswordInvite.AutoSize = true;
            this.labelPasswordInvite.Location = new System.Drawing.Point(18, 133);
            this.labelPasswordInvite.Name = "labelPasswordInvite";
            this.labelPasswordInvite.Size = new System.Drawing.Size(68, 13);
            this.labelPasswordInvite.TabIndex = 11;
            this.labelPasswordInvite.Text = "Password   : ";
            // 
            // labelUserInvite
            // 
            this.labelUserInvite.AutoSize = true;
            this.labelUserInvite.Location = new System.Drawing.Point(15, 97);
            this.labelUserInvite.Name = "labelUserInvite";
            this.labelUserInvite.Size = new System.Drawing.Size(69, 13);
            this.labelUserInvite.TabIndex = 10;
            this.labelUserInvite.Text = "User Name : ";
            // 
            // labelEnvInvite
            // 
            this.labelEnvInvite.AutoSize = true;
            this.labelEnvInvite.Location = new System.Drawing.Point(15, 54);
            this.labelEnvInvite.Name = "labelEnvInvite";
            this.labelEnvInvite.Size = new System.Drawing.Size(75, 13);
            this.labelEnvInvite.TabIndex = 9;
            this.labelEnvInvite.Text = "Environment : ";
            // 
            // ResetDisplaySessionOrInvite
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(696, 504);
            this.Controls.Add(this.tabControl1);
            this.Name = "ResetDisplaySessionOrInvite";
            this.Text = "ResetDisplaySessionOrInvite";
            this.tabPage1.ResumeLayout(false);
            this.tabPage1.PerformLayout();
            this.tabControlReset.ResumeLayout(false);
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.tabPage4.ResumeLayout(false);
            this.tabPage4.PerformLayout();
            this.tabControl1.ResumeLayout(false);
            this.tabPage5.ResumeLayout(false);
            this.tabPage5.PerformLayout();
            this.tabPage6.ResumeLayout(false);
            this.tabPage6.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.Label labelDomain;
        private System.Windows.Forms.Button buttonDisplay;
        private System.Windows.Forms.Button buttonReset;
        private System.Windows.Forms.TextBox textBoxPassword;
        private System.Windows.Forms.TextBox textBoxUser;
        private System.Windows.Forms.ComboBox comboBoxEnv;
        private System.Windows.Forms.Label labelPasword;
        private System.Windows.Forms.Label labelUser;
        private System.Windows.Forms.Label labelEnv;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.TextBox textBox2;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.TabControl tabControlReset;
        private System.Windows.Forms.TabPage tabPage3;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.TextBox textBoxTraces;
        private System.Windows.Forms.Button button3;
        private System.Windows.Forms.Button button4;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.TabPage tabPage4;
        private System.Windows.Forms.TextBox textBoxPWsession;
        private System.Windows.Forms.TextBox textBoxUserSession;
        private System.Windows.Forms.ComboBox comboBox2;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TabControl tabControl1;
        private System.Windows.Forms.TabPage tabPage5;
        private System.Windows.Forms.TabPage tabPage6;
        private System.Windows.Forms.Label labelDomainInvite;
        private System.Windows.Forms.Button buttonDispayInvite;
        private System.Windows.Forms.Button buttonResetInvite;
        private System.Windows.Forms.TextBox textBoxPasswordInvite;
        private System.Windows.Forms.TextBox textBoxUserInvite;
        private System.Windows.Forms.ComboBox comboBoxInvite;
        private System.Windows.Forms.Label labelPasswordInvite;
        private System.Windows.Forms.Label labelUserInvite;
        private System.Windows.Forms.Label labelEnvInvite;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.Button button5;
        private System.Windows.Forms.Button btnResetInvite;
        private System.Windows.Forms.TextBox tBoxPWInvite;
        private System.Windows.Forms.TextBox tBoxUserInvite;
        private System.Windows.Forms.ComboBox comboBoxEnvInvite;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.TextBox textBoxLog;
        private System.Windows.Forms.TextBox textBoxTrace;
        private System.Windows.Forms.TextBox tBoxLogInvite;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\MainForm.Designer.cs ===
﻿namespace LiveN.ServicesVerifier
{
    partial class MainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm));
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabelEnvironment = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripStatusLabel2 = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripStatusLabel3 = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripStatusTimeElapsed = new System.Windows.Forms.ToolStripStatusLabel();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.environmentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.devToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.testNetToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.iNT2ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.partnerNetToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.certNetToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.productionToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ignoreServerSSLErrorsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripContainer1 = new System.Windows.Forms.ToolStripContainer();
            this.tabControl = new System.Windows.Forms.TabControl();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.output = new System.Windows.Forms.TextBox();
            this.tabPage3 = new System.Windows.Forms.TabPage();
            this.outputVerbose = new System.Windows.Forms.TextBox();
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.toolStripPlayButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonRunAll = new System.Windows.Forms.ToolStripButton();
            this.toolStripStopButton = new System.Windows.Forms.ToolStripButton();
            this.imageList = new System.Windows.Forms.ImageList(this.components);
            this.statusStrip1.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            this.toolStripContainer1.ContentPanel.SuspendLayout();
            this.toolStripContainer1.TopToolStripPanel.SuspendLayout();
            this.toolStripContainer1.SuspendLayout();
            this.tabControl.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.tabPage3.SuspendLayout();
            this.toolStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabelEnvironment,
            this.toolStripStatusLabel2,
            this.toolStripStatusLabel3,
            this.toolStripStatusTimeElapsed});
            this.statusStrip1.Location = new System.Drawing.Point(0, 507);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(921, 22);
            this.statusStrip1.TabIndex = 2;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // toolStripStatusLabelEnvironment
            // 
            this.toolStripStatusLabelEnvironment.Name = "toolStripStatusLabelEnvironment";
            this.toolStripStatusLabelEnvironment.Size = new System.Drawing.Size(97, 17);
            this.toolStripStatusLabelEnvironment.Text = "Environment: INT2";
            // 
            // toolStripStatusLabel2
            // 
            this.toolStripStatusLabel2.Name = "toolStripStatusLabel2";
            this.toolStripStatusLabel2.Size = new System.Drawing.Size(685, 17);
            this.toolStripStatusLabel2.Spring = true;
            // 
            // toolStripStatusLabel3
            // 
            this.toolStripStatusLabel3.Name = "toolStripStatusLabel3";
            this.toolStripStatusLabel3.Size = new System.Drawing.Size(73, 17);
            this.toolStripStatusLabel3.Text = "Time Elapsed:";
            // 
            // toolStripStatusTimeElapsed
            // 
            this.toolStripStatusTimeElapsed.Name = "toolStripStatusTimeElapsed";
            this.toolStripStatusTimeElapsed.Size = new System.Drawing.Size(51, 17);
            this.toolStripStatusTimeElapsed.Text = "00:00:00";
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(921, 24);
            this.menuStrip1.TabIndex = 9;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(35, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(92, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.environmentToolStripMenuItem,
            this.ignoreServerSSLErrorsToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(56, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // environmentToolStripMenuItem
            // 
            this.environmentToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.devToolStripMenuItem,
            this.testNetToolStripMenuItem,
            this.iNT2ToolStripMenuItem,
            this.partnerNetToolStripMenuItem,
            this.certNetToolStripMenuItem,
            this.productionToolStripMenuItem});
            this.environmentToolStripMenuItem.Name = "environmentToolStripMenuItem";
            this.environmentToolStripMenuItem.Size = new System.Drawing.Size(193, 22);
            this.environmentToolStripMenuItem.Text = "&Environment";
            // 
            // devToolStripMenuItem
            // 
            this.devToolStripMenuItem.Name = "devToolStripMenuItem";
            this.devToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.devToolStripMenuItem.Tag = "Dev";
            this.devToolStripMenuItem.Text = "&Dev";
            this.devToolStripMenuItem.CheckedChanged += new System.EventHandler(this.EnvironmentToolStripMenuItem_CheckedChanged);
            this.devToolStripMenuItem.Click += new System.EventHandler(this.EnvironmentMenuItem_Click);
            // 
            // testNetToolStripMenuItem
            // 
            this.testNetToolStripMenuItem.Name = "testNetToolStripMenuItem";
            this.testNetToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.testNetToolStripMenuItem.Tag = "TestNet";
            this.testNetToolStripMenuItem.Text = "&TestNet";
            this.testNetToolStripMenuItem.CheckedChanged += new System.EventHandler(this.EnvironmentToolStripMenuItem_CheckedChanged);
            this.testNetToolStripMenuItem.Click += new System.EventHandler(this.EnvironmentMenuItem_Click);
            // 
            // iNT2ToolStripMenuItem
            // 
            this.iNT2ToolStripMenuItem.Name = "iNT2ToolStripMenuItem";
            this.iNT2ToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.iNT2ToolStripMenuItem.Tag = "INT2";
            this.iNT2ToolStripMenuItem.Text = "&INT2";
            this.iNT2ToolStripMenuItem.CheckedChanged += new System.EventHandler(this.EnvironmentToolStripMenuItem_CheckedChanged);
            this.iNT2ToolStripMenuItem.Click += new System.EventHandler(this.EnvironmentMenuItem_Click);
            // 
            // partnerNetToolStripMenuItem
            // 
            this.partnerNetToolStripMenuItem.Name = "partnerNetToolStripMenuItem";
            this.partnerNetToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.partnerNetToolStripMenuItem.Tag = "PartnerNet";
            this.partnerNetToolStripMenuItem.Text = "P&artnerNet";
            this.partnerNetToolStripMenuItem.CheckedChanged += new System.EventHandler(this.EnvironmentToolStripMenuItem_CheckedChanged);
            this.partnerNetToolStripMenuItem.Click += new System.EventHandler(this.EnvironmentMenuItem_Click);
            // 
            // certNetToolStripMenuItem
            // 
            this.certNetToolStripMenuItem.Name = "certNetToolStripMenuItem";
            this.certNetToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.certNetToolStripMenuItem.Tag = "CertNet";
            this.certNetToolStripMenuItem.Text = "&CertNet";
            this.certNetToolStripMenuItem.CheckedChanged += new System.EventHandler(this.EnvironmentToolStripMenuItem_CheckedChanged);
            this.certNetToolStripMenuItem.Click += new System.EventHandler(this.EnvironmentMenuItem_Click);
            // 
            // productionToolStripMenuItem
            // 
            this.productionToolStripMenuItem.Name = "productionToolStripMenuItem";
            this.productionToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.productionToolStripMenuItem.Tag = "Production";
            this.productionToolStripMenuItem.Text = "&Production";
            this.productionToolStripMenuItem.CheckedChanged += new System.EventHandler(this.EnvironmentToolStripMenuItem_CheckedChanged);
            this.productionToolStripMenuItem.Click += new System.EventHandler(this.EnvironmentMenuItem_Click);
            // 
            // ignoreServerSSLErrorsToolStripMenuItem
            // 
            this.ignoreServerSSLErrorsToolStripMenuItem.CheckOnClick = true;
            this.ignoreServerSSLErrorsToolStripMenuItem.Name = "ignoreServerSSLErrorsToolStripMenuItem";
            this.ignoreServerSSLErrorsToolStripMenuItem.Size = new System.Drawing.Size(193, 22);
            this.ignoreServerSSLErrorsToolStripMenuItem.Text = "&Ignore Server SSL Errors";
            this.ignoreServerSSLErrorsToolStripMenuItem.Click += new System.EventHandler(this.ignoreServerSSLErrorsToolStripMenuItem_Click);
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.aboutToolStripMenuItem});
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(40, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(115, 22);
            this.aboutToolStripMenuItem.Text = "&About...";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStripContainer1
            // 
            // 
            // toolStripContainer1.ContentPanel
            // 
            this.toolStripContainer1.ContentPanel.Controls.Add(this.tabControl);
            this.toolStripContainer1.ContentPanel.Size = new System.Drawing.Size(921, 458);
            this.toolStripContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.toolStripContainer1.Location = new System.Drawing.Point(0, 24);
            this.toolStripContainer1.Name = "toolStripContainer1";
            this.toolStripContainer1.Size = new System.Drawing.Size(921, 483);
            this.toolStripContainer1.TabIndex = 10;
            this.toolStripContainer1.Text = "toolStripContainer1";
            // 
            // toolStripContainer1.TopToolStripPanel
            // 
            this.toolStripContainer1.TopToolStripPanel.Controls.Add(this.toolStrip1);
            // 
            // tabControl
            // 
            this.tabControl.Controls.Add(this.tabPage2);
            this.tabControl.Controls.Add(this.tabPage3);
            this.tabControl.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabControl.Location = new System.Drawing.Point(0, 0);
            this.tabControl.Name = "tabControl";
            this.tabControl.SelectedIndex = 0;
            this.tabControl.Size = new System.Drawing.Size(921, 458);
            this.tabControl.TabIndex = 9;
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.output);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(913, 432);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Output";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // output
            // 
            this.output.Dock = System.Windows.Forms.DockStyle.Fill;
            this.output.Location = new System.Drawing.Point(3, 3);
            this.output.Multiline = true;
            this.output.Name = "output";
            this.output.ReadOnly = true;
            this.output.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.output.Size = new System.Drawing.Size(907, 426);
            this.output.TabIndex = 0;
            this.output.WordWrap = false;
            this.output.KeyDown += new System.Windows.Forms.KeyEventHandler(this.output_KeyDown);
            // 
            // tabPage3
            // 
            this.tabPage3.Controls.Add(this.outputVerbose);
            this.tabPage3.Location = new System.Drawing.Point(4, 22);
            this.tabPage3.Name = "tabPage3";
            this.tabPage3.Size = new System.Drawing.Size(816, 432);
            this.tabPage3.TabIndex = 2;
            this.tabPage3.Text = "Output - Verbose";
            this.tabPage3.UseVisualStyleBackColor = true;
            // 
            // outputVerbose
            // 
            this.outputVerbose.Dock = System.Windows.Forms.DockStyle.Fill;
            this.outputVerbose.Location = new System.Drawing.Point(0, 0);
            this.outputVerbose.Multiline = true;
            this.outputVerbose.Name = "outputVerbose";
            this.outputVerbose.ReadOnly = true;
            this.outputVerbose.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.outputVerbose.Size = new System.Drawing.Size(816, 432);
            this.outputVerbose.TabIndex = 1;
            this.outputVerbose.WordWrap = false;
            this.outputVerbose.KeyDown += new System.Windows.Forms.KeyEventHandler(this.output_KeyDown);
            // 
            // toolStrip1
            // 
            this.toolStrip1.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripPlayButton,
            this.toolStripButtonRunAll,
            this.toolStripStopButton});
            this.toolStrip1.Location = new System.Drawing.Point(3, 0);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Size = new System.Drawing.Size(79, 25);
            this.toolStrip1.TabIndex = 0;
            // 
            // toolStripPlayButton
            // 
            this.toolStripPlayButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripPlayButton.Image = ((System.Drawing.Image)(resources.GetObject("toolStripPlayButton.Image")));
            this.toolStripPlayButton.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripPlayButton.Name = "toolStripPlayButton";
            this.toolStripPlayButton.Size = new System.Drawing.Size(23, 22);
            this.toolStripPlayButton.Text = "Run test(s) on current tab";
            this.toolStripPlayButton.ToolTipText = "Run test(s) on current tab";
            this.toolStripPlayButton.Click += new System.EventHandler(this.toolStripPlayButton_Click);
            // 
            // toolStripButtonRunAll
            // 
            this.toolStripButtonRunAll.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonRunAll.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonRunAll.Image")));
            this.toolStripButtonRunAll.ImageTransparentColor = System.Drawing.Color.Black;
            this.toolStripButtonRunAll.Name = "toolStripButtonRunAll";
            this.toolStripButtonRunAll.Size = new System.Drawing.Size(23, 22);
            this.toolStripButtonRunAll.Text = "Run all tests";
            this.toolStripButtonRunAll.ToolTipText = "Run all tests";
            this.toolStripButtonRunAll.Click += new System.EventHandler(this.toolStripButtonRunAll_Click);
            // 
            // toolStripStopButton
            // 
            this.toolStripStopButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripStopButton.Enabled = false;
            this.toolStripStopButton.Image = ((System.Drawing.Image)(resources.GetObject("toolStripStopButton.Image")));
            this.toolStripStopButton.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripStopButton.Name = "toolStripStopButton";
            this.toolStripStopButton.Size = new System.Drawing.Size(23, 22);
            this.toolStripStopButton.Text = "Stop Tests";
            this.toolStripStopButton.Click += new System.EventHandler(this.toolStripStopButton_Click);
            // 
            // imageList
            // 
            this.imageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageList.ImageStream")));
            this.imageList.TransparentColor = System.Drawing.Color.Transparent;
            this.imageList.Images.SetKeyName(0, "109_AllAnnotations_Warning_16x16_72.png");
            this.imageList.Images.SetKeyName(1, "112_Tick_Green_32x32_72.png");
            this.imageList.Images.SetKeyName(2, "1385_Disable_24x24_72.png");
            this.imageList.Images.SetKeyName(3, "109_AllAnnotations_donotenter.png");
            this.imageList.Images.SetKeyName(4, "GoToNextHS.png");
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(921, 529);
            this.Controls.Add(this.toolStripContainer1);
            this.Controls.Add(this.menuStrip1);
            this.Controls.Add(this.statusStrip1);
            this.Name = "MainForm";
            this.Text = "Xbox Live Engagement Services Verifier";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.MainForm_FormClosing);
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.toolStripContainer1.ContentPanel.ResumeLayout(false);
            this.toolStripContainer1.TopToolStripPanel.ResumeLayout(false);
            this.toolStripContainer1.TopToolStripPanel.PerformLayout();
            this.toolStripContainer1.ResumeLayout(false);
            this.toolStripContainer1.PerformLayout();
            this.tabControl.ResumeLayout(false);
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.tabPage3.ResumeLayout(false);
            this.tabPage3.PerformLayout();
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem environmentToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem testNetToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem iNT2ToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem certNetToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem productionToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ignoreServerSSLErrorsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripContainer toolStripContainer1;
        private System.Windows.Forms.TabControl tabControl;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.TabPage tabPage3;
        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.ImageList imageList;
        private System.Windows.Forms.ToolStripButton toolStripPlayButton;
        private System.Windows.Forms.ToolStripButton toolStripStopButton;
        private System.Windows.Forms.TextBox output;
        private System.Windows.Forms.TextBox outputVerbose;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabelEnvironment;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel2;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel3;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusTimeElapsed;
        private System.Windows.Forms.ToolStripMenuItem partnerNetToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem devToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton toolStripButtonRunAll;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\RunTestsThreadState.cs ===
﻿using System;
using System.Windows.Forms;
using LiveN.Test.Framework.Configuration;

namespace LiveN.ServicesVerifier
{
    /// <summary>
    /// 
    /// </summary>
    public class RunTestsThreadState
    {
        /// <summary>
        /// 
        /// </summary>
        public EnvironmentElement Environment
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public ListView ListView
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public Type MonitoringType
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace LiveN.ServicesVerifier
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\StringBuilderTraceListener.cs ===
﻿using System;
using System.Collections;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;

namespace LiveN.ServicesVerifier
{
    /// <summary>
    /// 
    /// </summary>
    public class StringBuilderTraceListener : TraceListener
    {
        private object syncLock = new object();

        /// <summary>
        /// 
        /// </summary>
        public StringBuilderTraceListener()
            : this(true)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="showSource"></param>
        public StringBuilderTraceListener(bool showSource)
        {
            this.TraceString = new StringBuilder();
        }

        /// <summary>
        /// 
        /// </summary>
        public StringBuilder TraceString
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ShowSource
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="eventCache"></param>
        /// <param name="source"></param>
        /// <param name="eventType"></param>
        /// <param name="id"></param>
        /// <param name="message"></param>
        public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message)
        {
            if ((this.Filter != null) && !this.Filter.ShouldTrace(eventCache, source, eventType, id, message, null, null, null))
                return;

            this.WriteHeader(source, eventType, id);
            WriteLine(message);
            this.WriteFooter(eventCache);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="eventCache"></param>
        /// <param name="source"></param>
        /// <param name="eventType"></param>
        /// <param name="id"></param>
        /// <param name="format"></param>
        /// <param name="args"></param>
        public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, params object[] args)
        {
            TraceEvent(eventCache, source, eventType, id, String.Format(format, args));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override void WriteIndent()
        {
            this.NeedIndent = false;
            for (int i = 0; i < this.IndentLevel; i++)
            {
                for (int j = 0; j < this.IndentSize; j++)
                    this.Write("\t");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="source"></param>
        /// <param name="type"></param>
        /// <param name="id"></param>
        protected virtual void WriteHeader(string source, TraceEventType type, int id)
        {
            StringBuilder header = new StringBuilder();
            if (this.ShowSource)
                header.AppendFormat("{0} ", source);
            //header.AppendFormat("{0}: ", type);
            if (id != 0)
                header.AppendFormat("{0}: ", id);
            
            if(header.Length > 0)
                this.Write(header.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cache"></param>
        protected virtual void WriteFooter(TraceEventCache eventCache)
        {
            if (eventCache != null)
            {
                base.IndentLevel++;
                if (this.IsEnabled(TraceOptions.ProcessId))
                {
                    this.WriteLine("ProcessId=" + eventCache.ProcessId);
                }
                if (this.IsEnabled(TraceOptions.LogicalOperationStack))
                {
                    this.Write("LogicalOperationStack=");
                    Stack logicalOperationStack = eventCache.LogicalOperationStack;
                    bool flag = true;
                    foreach (object obj2 in logicalOperationStack)
                    {
                        if (!flag)
                        {
                            this.Write(", ");
                        }
                        else
                        {
                            flag = false;
                        }
                        this.Write(obj2.ToString());
                    }
                    this.WriteLine(string.Empty);
                }
                if (this.IsEnabled(TraceOptions.ThreadId))
                {
                    this.WriteLine("ThreadId=" + eventCache.ThreadId);
                }
                if (this.IsEnabled(TraceOptions.DateTime))
                {
                    //this POS is in UTC; convert to local
                    DateTime local = TimeZoneInfo.ConvertTimeFromUtc(eventCache.DateTime, TimeZoneInfo.Local);
                    this.WriteLine("DateTime=" + local.ToString("MM/dd/yyyy hh:mm:ss.ffff tt"));
                }
                if (this.IsEnabled(TraceOptions.Timestamp))
                {
                    this.WriteLine("Timestamp=" + eventCache.Timestamp);
                }
                if (this.IsEnabled(TraceOptions.Callstack))
                {
                    this.WriteLine("Callstack=" + eventCache.Callstack);
                }
                base.IndentLevel--;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="opts"></param>
        /// <returns></returns>
        protected bool IsEnabled(TraceOptions opts)
        {
            return ((opts & this.TraceOutputOptions) != TraceOptions.None);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public override void Write(string message)
        {
            WriteText(message);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public override void WriteLine(string message)
        {
            WriteText(message + Environment.NewLine);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        private void WriteText(string message)
        {
            lock (this.syncLock)
            {
                this.TraceString.Append(message + Environment.NewLine);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Xbox Live Engagement Services Verifier")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("LiveN Services Verifier")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("b3c2ffd4-79bb-4ea4-9716-c9c3aa6b1439")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.6.0.0")]
[assembly: AssemblyFileVersion("1.6.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\CertificateStoreInfo.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography.X509Certificates;

namespace StsGenerator
{
    /// <summary>
    ///  Class to hold Certificate Store information and related operations
    /// </summary>
    public class CertificateStoreInfo
    {
        private X509Store certStore;
        private StoreLocation selectedLocation;
        private string selectedName;
        private X509Certificate2 selectedCertificate;

        /// <summary>
        /// default Constructor
        /// </summary>
        public CertificateStoreInfo()
        {
            certStore = new X509Store(StoreName.My, StoreLocation.LocalMachine);
            selectedLocation = certStore.Location;
            selectedName = certStore.Name;
            selectedCertificate = null;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public CertificateStoreInfo(string storeLocation, string storeName)
        {
            if(string.Compare(storeLocation, "CurrentUser") == 0)
                certStore = new X509Store(storeName, StoreLocation.CurrentUser);
            else if(string.Compare(storeLocation, "LocalMachine") == 0)
                certStore = new X509Store(storeName, StoreLocation.LocalMachine);

            selectedLocation = certStore.Location;
            selectedName = certStore.Name;
            selectedCertificate = null;
        }

        /// <summary>
        /// 
        /// </summary>
        public X509Store CertStore
        {
            get
            {
                return certStore;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public StoreLocation SelectedLocation
        {
            get
            {
                return selectedLocation;
            }
            set
            {
                selectedLocation = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SelectedName
        {
            get
            {
                return selectedName;
            }
            set
            {
                selectedName = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public X509Certificate2 SelectedCertificate
        {
            get
            {
                return selectedCertificate;
            }
            set
            {
                selectedCertificate = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveN.ServicesVerifier.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LiveN.ServicesVerifier.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\Form1.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.IO;
using System.Security.Cryptography.X509Certificates;

using LiveN.Test.Common;
using LiveN.Test.Framework.Authorization;

namespace StsGenerator
{
    /// <summary>
    /// 
    /// </summary>
    public partial class Form1 : Form
    {
        private UserRequest userRequest;
        private PartnerRequest partnerRequest;
        private X509Certificate2 selectedCertificate;

        /// <summary>
        /// 
        /// </summary>
        public Form1()
        {
            InitializeComponent();
            this.StartPosition = FormStartPosition.CenterScreen;

            userRequest = new UserRequest();
            partnerRequest = new PartnerRequest();
            selectedCertificate = null;
            this.propertyGrid1.SelectedObject = userRequest;
        }

        /// <summary>
        /// 
        /// </summary>
        public X509Certificate2 SelectedCertificate
        {
            get
            {
                return selectedCertificate;
            }
            set
            {
                selectedCertificate = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        /// <summary>
        /// 
        /// </summary>
        private void button_generateToken_Click(object sender, EventArgs e)
        {
            string token = null;
            bool omitSignature = false;
            string exceptionMessage = null;
            string fileName = @Utility.CurrentDirectory + @"\data.xml";

            //delete data.xml file if it exists
            FileInfo fi = new FileInfo(fileName);
            fi.Delete();
            webBrowser_output.Visible = true;
            textBox_output.Visible = true;
            Type t = this.propertyGrid1.SelectedObject.GetType();
            if (t == typeof(UserRequest))
            {
                if (userRequest.OmittedItem == OmittedUserTokenItems.Signature)
                    omitSignature = true;
                try
                {
                    token = userRequest.GetUserToken(selectedCertificate);
                }
                catch (Exception ex)
                {
                    exceptionMessage = ex.Message;
                }

                label_textOutput.Text = "Output - User Token";
                label_xmlOutput.Text = "Output - User Token";
            }
            else
            {
                if (partnerRequest.OmittedItem == OmittedPartnerTokenItems.Signature)
                    omitSignature = true;
                try
                {
                    token = partnerRequest.GetPartnerToken(selectedCertificate);
                }
                catch (Exception ex)
                {
                    exceptionMessage = ex.Message;
                }
                
                label_textOutput.Text = "Output - Partner Token";
                label_xmlOutput.Text = "Output - Partner Token";
            }
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(token);
            xmlDoc.Save(fileName);
            webBrowser_output.Url = new Uri(fileName);
            textBox_output.Text = token;

            if (exceptionMessage == null)
            {
                if (omitSignature)
                {
                    label_CertInfo.Text = null;
                }
                else
                {
                    if (selectedCertificate == null)
                    {
                        label_CertInfo.Text = "Token signed with certificate having subject as \"sts.test.xboxlive.com\"";
                    }
                    else
                    {
                        if (!String.IsNullOrEmpty(selectedCertificate.Subject))
                            label_CertInfo.Text = "Token signed with certificate having subject as \"" + selectedCertificate.Subject + "\"";
                        else
                            label_CertInfo.Text = "Token signed with certificate having issuer as \"" + selectedCertificate.Issuer + "\"";
                    }
                }
            }
            else
            {
                // when there is an exception signing with the selected cert
                label_CertInfo.Text = null;
                MessageBox.Show("Exception when signing with selected certificate.\n" + exceptionMessage, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void userTokenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (userTokenToolStripMenuItem.Checked == false && partnerTokenToolStripMenuItem.Checked == false)
                userTokenToolStripMenuItem.Checked = true;

            if (userTokenToolStripMenuItem.Checked)
            {
                if (partnerTokenToolStripMenuItem.Checked)
                {
                    partnerTokenToolStripMenuItem.Checked = false;
                    webBrowser_output.Visible = false;
                    textBox_output.Visible = false;
                    userRequest.SetDefaultParameters();
                    label_textOutput.Text = "";
                    label_xmlOutput.Text = "";
                    label_CertInfo.Text = null;
                }
                this.propertyGrid1.SelectedObject = userRequest;

            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void partnerTokenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (userTokenToolStripMenuItem.Checked == false && partnerTokenToolStripMenuItem.Checked == false)
                partnerTokenToolStripMenuItem.Checked = true;

            if (partnerTokenToolStripMenuItem.Checked)
            {
                if (userTokenToolStripMenuItem.Checked)
                {
                    userTokenToolStripMenuItem.Checked = false;
                    webBrowser_output.Visible = false;
                    textBox_output.Visible = false;
                    partnerRequest.SetDefaultParameters();
                    label_textOutput.Text = "";
                    label_xmlOutput.Text = "";
                    label_CertInfo.Text = null;
                }
                this.propertyGrid1.SelectedObject = partnerRequest;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void aboutStsGeneratorToolToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Sts Generator\n\nTool to Generate User Token and Partner Token.\n\nAuthor: Sudha Shah",
                                "About StsGenerator Tool", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        /// <summary>
        /// 
        /// </summary>
        private void viewHelpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Sts Generator tool enables you to create User and Partner Tokens\n\nSteps to create user token:\n\t" +
                                "a) Under \"Options\" menu item click on \"User Token\"\n\tb) Enter user token parameters\n\tc) Click on the \"Generate" +
                                " Token\" button.\n\nSteps to create partner token:\n\ta) Under \"Options\" menu item click on \"Partner Token\".\n\tb) Enter" +
                                " partner token parameters\n\tc) Click on the \"Generate Token\" button.\n\nTip: To pass in null value for any parameter type \"null\"" +
                                "\n\nTo select a certificate to sign the token with, under \"Options\" menu item click on \"Select Signing Certificate\" and select the " +
                                "certificate from the cert store.",
                                "StsGenerator Help", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        /// <summary>
        /// 
        /// </summary>
        private void textBox_output_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.A)
            {
                this.textBox_output.SelectAll();
                e.Handled = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void certificateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SubForm subForm = new SubForm();
            subForm.ShowDialog(this);
        }
  
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\NullParameters.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace StsGenerator
{
    /// <summary>
    ///
    /// </summary>
    public static class NullParameters
    {
        /// <summary>
        /// Checks for null parameters
        /// </summary>
        /// <param name="parameter"></param>
        /// <returns></returns>
        public static void checkForNullParameter(ref string parameter)
        {
            if (parameter != null)
            {
                if (String.Equals(parameter.Trim(), "null", StringComparison.InvariantCultureIgnoreCase))
                    parameter = null;
            }
        }

        /// <summary>
        /// Gets back the "null" string for a null parameter
        /// </summary>
        /// <param name="nullParameter"></param>
        /// <returns></returns>
        public static void getBackNullString(ref string nullParameter)
        {
            if (nullParameter == null)
                nullParameter = "null";
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\ServicesVerifier\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveN.ServicesVerifier.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\OmittedItems.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using LiveN.Test.Framework.Authorization;

namespace StsGenerator
{
    public enum OmittedUserTokenItems
    {
        None,
        Issuer,
        NotBefore,
        NotOnOrAfter,
        NotBeforeNotOnOrAfter,
        Signature,
        PlatformType,
        DeviceId,
        ClientVersion,
        TitleId,
        TitleVersion,
        Xuid,
        Gamertag,
        Tier
    };

    public enum OmittedPartnerTokenItems
    {
        None,
        MajorVersion,
        MinorVersion,
        Issuer,
        NotBefore,
        NotOnOrAfter,
        NotBeforeNotOnOrAfter,
        Subject,
        Audience,
        Signature
    }

    public static class OmittedTokenItemsOperations
    {
        public static OmittedTokenItems GetOmittedTokenItems(OmittedPartnerTokenItems omittedPartnerTokenItem)
        {
            switch (omittedPartnerTokenItem)
            {
                case OmittedPartnerTokenItems.None:
                    return OmittedTokenItems.None;
                case OmittedPartnerTokenItems.MajorVersion:
                    return OmittedTokenItems.MajorVersion;
                case OmittedPartnerTokenItems.MinorVersion:
                    return OmittedTokenItems.MinorVersion;
                case OmittedPartnerTokenItems.Issuer:
                    return OmittedTokenItems.Issuer;
                case OmittedPartnerTokenItems.NotBefore:
                    return OmittedTokenItems.NotBefore;
                case OmittedPartnerTokenItems.NotOnOrAfter:
                    return OmittedTokenItems.NotOnOrAfter;
                case OmittedPartnerTokenItems.NotBeforeNotOnOrAfter:
                    return OmittedTokenItems.NotBeforeNotOnOrAfter;
                case OmittedPartnerTokenItems.Subject:
                    return OmittedTokenItems.Subject;
                case OmittedPartnerTokenItems.Audience:
                    return OmittedTokenItems.Audience;
                case OmittedPartnerTokenItems.Signature:
                    return OmittedTokenItems.Signature;
            }
            return OmittedTokenItems.None;
        }

        public static OmittedTokenItems GetOmittedTokenItems(OmittedUserTokenItems omittedUserTokenItem)
        {
            switch (omittedUserTokenItem)
            {
                case OmittedUserTokenItems.None:
                    return OmittedTokenItems.None;
                case OmittedUserTokenItems.Issuer:
                    return OmittedTokenItems.Issuer;
                case OmittedUserTokenItems.NotBefore:
                    return OmittedTokenItems.NotBefore;
                case OmittedUserTokenItems.NotOnOrAfter:
                    return OmittedTokenItems.NotOnOrAfter;
                case OmittedUserTokenItems.NotBeforeNotOnOrAfter:
                    return OmittedTokenItems.NotBeforeNotOnOrAfter;
                case OmittedUserTokenItems.Signature:
                    return OmittedTokenItems.Signature;
                case OmittedUserTokenItems.PlatformType:
                    return OmittedTokenItems.PlatformType;
                case OmittedUserTokenItems.DeviceId:
                    return OmittedTokenItems.DeviceId;
                case OmittedUserTokenItems.ClientVersion:
                    return OmittedTokenItems.ClientVersion;
                case OmittedUserTokenItems.TitleId:
                    return OmittedTokenItems.TitleId;
                case OmittedUserTokenItems.TitleVersion:
                    return OmittedTokenItems.TitleVersion;
                case OmittedUserTokenItems.Xuid:
                    return OmittedTokenItems.Xuid;
                case OmittedUserTokenItems.Gamertag:
                    return OmittedTokenItems.Gamertag;
                case OmittedUserTokenItems.Tier:
                    return OmittedTokenItems.Tier;
            }
            return OmittedTokenItems.None;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\Form1.Designer.cs ===
﻿namespace StsGenerator
{
    partial class Form1
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.propertyGrid1 = new System.Windows.Forms.PropertyGrid();
            this.splitter1 = new System.Windows.Forms.Splitter();
            this.panel1 = new System.Windows.Forms.Panel();
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.label_textOutput = new System.Windows.Forms.Label();
            this.textBox_output = new System.Windows.Forms.TextBox();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.webBrowser_output = new System.Windows.Forms.WebBrowser();
            this.label_xmlOutput = new System.Windows.Forms.Label();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tokenTypeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.certificateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutStsGeneratorToolToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewHelpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.button_generateToken = new System.Windows.Forms.Button();
            this.label_CertInfo = new System.Windows.Forms.Label();
            this.userTokenToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.partnerTokenToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.panel1.SuspendLayout();
            this.tabControl1.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // propertyGrid1
            // 
            this.propertyGrid1.Dock = System.Windows.Forms.DockStyle.Left;
            this.propertyGrid1.Location = new System.Drawing.Point(3, 24);
            this.propertyGrid1.Name = "propertyGrid1";
            this.propertyGrid1.Size = new System.Drawing.Size(311, 556);
            this.propertyGrid1.TabIndex = 0;
            // 
            // splitter1
            // 
            this.splitter1.Location = new System.Drawing.Point(0, 24);
            this.splitter1.Name = "splitter1";
            this.splitter1.Size = new System.Drawing.Size(3, 556);
            this.splitter1.TabIndex = 1;
            this.splitter1.TabStop = false;
            // 
            // panel1
            // 
            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.panel1.BackColor = System.Drawing.Color.Transparent;
            this.panel1.Controls.Add(this.tabControl1);
            this.panel1.Location = new System.Drawing.Point(311, 0);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(391, 522);
            this.panel1.TabIndex = 2;
            // 
            // tabControl1
            // 
            this.tabControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.tabControl1.Controls.Add(this.tabPage1);
            this.tabControl1.Controls.Add(this.tabPage2);
            this.tabControl1.Location = new System.Drawing.Point(6, 3);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(382, 519);
            this.tabControl1.TabIndex = 2;
            // 
            // tabPage1
            // 
            this.tabPage1.BackColor = System.Drawing.Color.White;
            this.tabPage1.Controls.Add(this.label_textOutput);
            this.tabPage1.Controls.Add(this.textBox_output);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(374, 493);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Text";
            // 
            // label_textOutput
            // 
            this.label_textOutput.AutoSize = true;
            this.label_textOutput.BackColor = System.Drawing.Color.Transparent;
            this.label_textOutput.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label_textOutput.Location = new System.Drawing.Point(6, 8);
            this.label_textOutput.Name = "label_textOutput";
            this.label_textOutput.Size = new System.Drawing.Size(0, 17);
            this.label_textOutput.TabIndex = 1;
            // 
            // textBox_output
            // 
            this.textBox_output.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.textBox_output.BackColor = System.Drawing.Color.White;
            this.textBox_output.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.textBox_output.Location = new System.Drawing.Point(3, 42);
            this.textBox_output.Multiline = true;
            this.textBox_output.Name = "textBox_output";
            this.textBox_output.ReadOnly = true;
            this.textBox_output.Size = new System.Drawing.Size(369, 451);
            this.textBox_output.TabIndex = 0;
            this.textBox_output.KeyDown += new System.Windows.Forms.KeyEventHandler(this.textBox_output_KeyDown);
            // 
            // tabPage2
            // 
            this.tabPage2.BackColor = System.Drawing.Color.White;
            this.tabPage2.Controls.Add(this.webBrowser_output);
            this.tabPage2.Controls.Add(this.label_xmlOutput);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(374, 493);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Xml";
            // 
            // webBrowser_output
            // 
            this.webBrowser_output.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.webBrowser_output.Location = new System.Drawing.Point(2, 40);
            this.webBrowser_output.MinimumSize = new System.Drawing.Size(20, 20);
            this.webBrowser_output.Name = "webBrowser_output";
            this.webBrowser_output.Size = new System.Drawing.Size(369, 454);
            this.webBrowser_output.TabIndex = 1;
            // 
            // label_xmlOutput
            // 
            this.label_xmlOutput.AutoSize = true;
            this.label_xmlOutput.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label_xmlOutput.Location = new System.Drawing.Point(2, 7);
            this.label_xmlOutput.Name = "label_xmlOutput";
            this.label_xmlOutput.Size = new System.Drawing.Size(0, 17);
            this.label_xmlOutput.TabIndex = 0;
            // 
            // menuStrip1
            // 
            this.menuStrip1.BackColor = System.Drawing.Color.Transparent;
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(732, 24);
            this.menuStrip1.TabIndex = 3;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "File";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.E)));
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
            this.exitToolStripMenuItem.Text = "Exit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.tokenTypeToolStripMenuItem,
            this.certificateToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.optionsToolStripMenuItem.Text = "Options";
            // 
            // tokenTypeToolStripMenuItem
            // 
            this.tokenTypeToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.userTokenToolStripMenuItem,
            this.partnerTokenToolStripMenuItem});
            this.tokenTypeToolStripMenuItem.Name = "tokenTypeToolStripMenuItem";
            this.tokenTypeToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.T)));
            this.tokenTypeToolStripMenuItem.Size = new System.Drawing.Size(211, 22);
            this.tokenTypeToolStripMenuItem.Text = "Select Token Type";
            // 
            // certificateToolStripMenuItem
            // 
            this.certificateToolStripMenuItem.Name = "certificateToolStripMenuItem";
            this.certificateToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S)));
            this.certificateToolStripMenuItem.Size = new System.Drawing.Size(245, 22);
            this.certificateToolStripMenuItem.Text = "Select Signing Certificate";
            this.certificateToolStripMenuItem.Click += new System.EventHandler(this.certificateToolStripMenuItem_Click);
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.aboutStsGeneratorToolToolStripMenuItem,
            this.viewHelpToolStripMenuItem});
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.helpToolStripMenuItem.Text = "Help";
            // 
            // aboutStsGeneratorToolToolStripMenuItem
            // 
            this.aboutStsGeneratorToolToolStripMenuItem.Name = "aboutStsGeneratorToolToolStripMenuItem";
            this.aboutStsGeneratorToolToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.I)));
            this.aboutStsGeneratorToolToolStripMenuItem.Size = new System.Drawing.Size(241, 22);
            this.aboutStsGeneratorToolToolStripMenuItem.Text = "About StsGenerator Tool";
            this.aboutStsGeneratorToolToolStripMenuItem.Click += new System.EventHandler(this.aboutStsGeneratorToolToolStripMenuItem_Click);
            // 
            // viewHelpToolStripMenuItem
            // 
            this.viewHelpToolStripMenuItem.Name = "viewHelpToolStripMenuItem";
            this.viewHelpToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.H)));
            this.viewHelpToolStripMenuItem.Size = new System.Drawing.Size(241, 22);
            this.viewHelpToolStripMenuItem.Text = "View Help";
            this.viewHelpToolStripMenuItem.Click += new System.EventHandler(this.viewHelpToolStripMenuItem_Click);
            // 
            // button_generateToken
            // 
            this.button_generateToken.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.button_generateToken.Location = new System.Drawing.Point(598, 545);
            this.button_generateToken.Name = "button_generateToken";
            this.button_generateToken.Size = new System.Drawing.Size(97, 23);
            this.button_generateToken.TabIndex = 4;
            this.button_generateToken.Text = "Generate Token";
            this.button_generateToken.UseVisualStyleBackColor = true;
            this.button_generateToken.Click += new System.EventHandler(this.button_generateToken_Click);
            // 
            // label_CertInfo
            // 
            this.label_CertInfo.Anchor = System.Windows.Forms.AnchorStyles.Bottom;
            this.label_CertInfo.AutoSize = true;
            this.label_CertInfo.Location = new System.Drawing.Point(324, 524);
            this.label_CertInfo.Name = "label_CertInfo";
            this.label_CertInfo.Size = new System.Drawing.Size(0, 13);
            this.label_CertInfo.TabIndex = 5;
            // 
            // userTokenToolStripMenuItem
            // 
            this.userTokenToolStripMenuItem.Checked = true;
            this.userTokenToolStripMenuItem.CheckOnClick = true;
            this.userTokenToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.userTokenToolStripMenuItem.Name = "userTokenToolStripMenuItem";
            this.userTokenToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.U)));
            this.userTokenToolStripMenuItem.Size = new System.Drawing.Size(175, 22);
            this.userTokenToolStripMenuItem.Text = "User Token";
            this.userTokenToolStripMenuItem.Click += new System.EventHandler(this.userTokenToolStripMenuItem_Click);
            // 
            // partnerTokenToolStripMenuItem
            // 
            this.partnerTokenToolStripMenuItem.CheckOnClick = true;
            this.partnerTokenToolStripMenuItem.Name = "partnerTokenToolStripMenuItem";
            this.partnerTokenToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.P)));
            this.partnerTokenToolStripMenuItem.Size = new System.Drawing.Size(189, 22);
            this.partnerTokenToolStripMenuItem.Text = "Partner Token";
            this.partnerTokenToolStripMenuItem.Click += new System.EventHandler(this.partnerTokenToolStripMenuItem_Click);
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(732, 580);
            this.Controls.Add(this.label_CertInfo);
            this.Controls.Add(this.propertyGrid1);
            this.Controls.Add(this.button_generateToken);
            this.Controls.Add(this.splitter1);
            this.Controls.Add(this.panel1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "Form1";
            this.Text = "StsGenerator tool";
            this.panel1.ResumeLayout(false);
            this.tabControl1.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage1.PerformLayout();
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.PropertyGrid propertyGrid1;
        private System.Windows.Forms.Splitter splitter1;
        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tokenTypeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem aboutStsGeneratorToolToolStripMenuItem;
        private System.Windows.Forms.Button button_generateToken;
        private System.Windows.Forms.ToolStripMenuItem viewHelpToolStripMenuItem;
        private System.Windows.Forms.TabControl tabControl1;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.TextBox textBox_output;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.Label label_textOutput;
        private System.Windows.Forms.WebBrowser webBrowser_output;
        private System.Windows.Forms.Label label_xmlOutput;
        private System.Windows.Forms.ToolStripMenuItem certificateToolStripMenuItem;
        private System.Windows.Forms.Label label_CertInfo;
        private System.Windows.Forms.ToolStripMenuItem userTokenToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem partnerTokenToolStripMenuItem;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\PartnerRequest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Security.Cryptography.X509Certificates;

using LiveN.Test.Framework;
using LiveN.Test.Framework.Authorization;

namespace StsGenerator
{
    /// <summary>
    /// Class to hold partner token parameters and provide partner token related operations
    /// </summary>
    [DefaultPropertyAttribute("Audience")]
    public class PartnerRequest
    {
        private string majorVersion;
        private string minorVersion;
        private string issuer;
        private string notBefore;
        private string notOnOrAfter;
        private string audience;
        private string subject;
        private OmittedPartnerTokenItems omittedItem;
        private StsToken stsToken;

        /// <summary>
        /// 
        /// </summary>
        public PartnerRequest()
        {
            SetDefaultParameters();
            stsToken = new StsToken(System.Configuration.ConfigurationManager.AppSettings["TestCertificateSubject"]);
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("Major Version to be included in Partner Token"), DisplayName("Major Version")]
        public string MajorVersion
        {
            get
            {
                return majorVersion;
            }
            set
            {
                majorVersion = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("Minor Version to be included in Partner Token"), DisplayName("Minor Version")]
        public string MinorVersion
        {
            get
            {
                return minorVersion;
            }
            set
            {
                minorVersion = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("Issuer to be included in Partner Token"), DisplayName("Issuer")]
        public string Issuer
        {
            get
            {
                return issuer;
            }
            set
            {
                issuer = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("NotBefore to be included in Partner Token"), DisplayName("NotBefore")]
        public string NotBefore
        {
            get
            {
                return notBefore;
            }
            set
            {
                notBefore = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("NotOnOrAfter to be included in Partner Token"), DisplayName("NotOnOrAfter")]
        public string NotOnOrAfter
        {
            get
            {
                return notOnOrAfter;
            }
            set
            {
                notOnOrAfter = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("Audience to be included in Partner Token"), DisplayName("Audience")]
        public string Audience
        {
            get
            {
                return audience;
            }
            set
            {
                audience = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("Subject to be included in Partner Token"), DisplayName("Subject")]
        public string Subject
        {
            get
            {
                return subject;
            }
            set
            {
                subject = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("Partner Token Parameters"), DescriptionAttribute("Node/Attribute to be omitted from Partner Token"), DisplayName("Omitted Token Item")]
        public OmittedPartnerTokenItems OmittedItem
        {
            get
            {
                return omittedItem;
            }
            set
            {
                omittedItem = value;
            }
        }

        /// <summary>
        /// Generates partner token
        /// </summary>
        public string GetPartnerToken(X509Certificate2 cert)
        {
            string token = null;
            checkForNullPartnerParameters();
            if (cert == null)
                stsToken.CertificateSubject = System.Configuration.ConfigurationManager.AppSettings["TestCertificateSubject"];

            OmittedTokenItems omittedTokenItem = OmittedTokenItemsOperations.GetOmittedTokenItems(omittedItem);

            token = stsToken.GeneratePartnerToken(majorVersion, minorVersion, issuer, notBefore, notOnOrAfter,
                                                   audience, subject, omittedTokenItem, cert);
            getBackNullPartnerParameterStrings();
            return token;
        }

        /// <summary>
        /// Sets default partner token parameters in GUI
        /// </summary>
        public void SetDefaultParameters()
        {
            DateTime currentTime = DateTime.UtcNow;

            majorVersion = "1";
            minorVersion = "1";
            issuer = "http://sts.xboxlive.com";
            notBefore = currentTime.ToString("o");
            notOnOrAfter = currentTime.AddHours(4).ToString("o");
            audience = "http://xboxlive.com/avatar";
            subject = "XboxLive Partner security ticket";
            omittedItem = OmittedPartnerTokenItems.None;
        }

        /// <summary>
        /// Checks for null parameters
        /// </summary>
        private void checkForNullPartnerParameters()
        {
            NullParameters.checkForNullParameter(ref majorVersion);
            NullParameters.checkForNullParameter(ref minorVersion);
            NullParameters.checkForNullParameter(ref issuer);
            NullParameters.checkForNullParameter(ref notBefore);
            NullParameters.checkForNullParameter(ref notOnOrAfter);
            NullParameters.checkForNullParameter(ref audience);
            NullParameters.checkForNullParameter(ref subject);
        }

        /// <summary>
        /// Gets the "null" string back for null parameters
        /// </summary>
        private void getBackNullPartnerParameterStrings()
        {
            NullParameters.getBackNullString(ref majorVersion);
            NullParameters.getBackNullString(ref minorVersion);
            NullParameters.getBackNullString(ref issuer);
            NullParameters.getBackNullString(ref notBefore);
            NullParameters.getBackNullString(ref notOnOrAfter);
            NullParameters.getBackNullString(ref audience);
            NullParameters.getBackNullString(ref subject);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace StsGenerator
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\UserRequest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Security.Cryptography.X509Certificates;

using LiveN.Test.Framework;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Common;

namespace StsGenerator
{
    /// <summary>
    ///  Class to hold User Token parameters and provides user token related operations
    /// </summary>
    [DefaultPropertyAttribute("Client Version")]
    public class UserRequest
    {
        private string issuer;
        private string notBefore;
        private string notOnOrAfter;
        private string platformType;
        private string deviceId;
        private string clientVersion;
        private string titleId;
        private string titleVersion;
        private string xuid;
        private string gamertag;
        private string tier;
        private OmittedUserTokenItems omittedItem;
        private StsToken stsToken;

        /// <summary>
        /// 
        /// </summary>
        public UserRequest()
        {
            SetDefaultParameters();
            stsToken = new StsToken(System.Configuration.ConfigurationManager.AppSettings["TestCertificateSubject"]);
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Issuer to be included in User Token"), DisplayName("Issuer")]
        public string Issuer
        {
            get
            {
                return issuer;
            }
            set
            {
                issuer = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("NotBefore value to be included in User Token"), DisplayName("NotBefore")]
        public string NotBefore
        {
            get
            {
                return notBefore;
            }
            set
            {
                notBefore = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("NotOnOrAfter value to be included in User Token"), DisplayName("NotOnOrAfter")]
        public string NotOnOrAfter
        {
            get
            {
                return notOnOrAfter;
            }
            set
            {
                notOnOrAfter = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Platform Type to be included in User Token"), DisplayName("Platform Type")]
        public string PlatformType
        {
            get
            {
                return platformType;
            }
            set
            {
                platformType = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Device Id to be included in User Token"), DisplayName("Device Id")]
        public string DeviceId
        {
            get
            {
                return deviceId;
            }
            set
            {
                deviceId = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Client Version to be included in User Token"), DisplayName("Client Version")]
        public string ClientVersion
        {
            get
            {
                return clientVersion;
            }
            set
            {
                clientVersion = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Title Id to be included in User Token"), DisplayName("Title Id")]
        public string TitleId
        {
            get
            {
                return titleId;
            }
            set
            {
                titleId = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Title Version to be included in User Token"), DisplayName("Title Version")]
        public string TitleVersion
        {
            get
            {
                return titleVersion;
            }
            set
            {
                titleVersion = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Xuid to be included in User Token"), DisplayName("Xuid")]
        public string Xuid
        {
            get
            {
                return xuid;
            }
            set
            {
                xuid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Gamer Tag to be included in User Token"), DisplayName("Gamer Tag")]
        public string Gamertag
        {
            get
            {
                return gamertag;
            }
            set
            {
                gamertag = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Tier to be included in User Token"), DisplayName("Tier")]
        public string Tier
        {
            get
            {
                return tier;
            }
            set
            {
                tier = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [CategoryAttribute("User Token Parameters"), DescriptionAttribute("Node/Attribute to be omitted from User Token"), DisplayName("Omitted Token Item")]
        public OmittedUserTokenItems OmittedItem
        {
            get
            {
                return omittedItem;
            }
            set
            {
                omittedItem = value;
            }
        }

        /// <summary>
        /// Generates user token
        /// </summary>
        public string GetUserToken(X509Certificate2 cert)
        {
            string token = null;
            checkForNullUserParameters();
            if (cert == null)
                stsToken.CertificateSubject = System.Configuration.ConfigurationManager.AppSettings["TestCertificateSubject"];

            OmittedTokenItems omittedTokenItem = OmittedTokenItemsOperations.GetOmittedTokenItems(omittedItem);

            token = stsToken.GenerateUserToken(issuer, notBefore, notOnOrAfter, platformType, deviceId, clientVersion, titleId, titleVersion,
                                                xuid, gamertag, tier, omittedTokenItem, cert);
            getBackNullUserParameterStrings();
            return token;
        }

        /// <summary>
        /// Sets default user token parameters in GUI
        /// </summary>
        public void SetDefaultParameters()
        {
            DateTime currentTime = DateTime.UtcNow;

            issuer = "http://sts.xboxlive.com/";
            notBefore = currentTime.ToString("o");
            notOnOrAfter = currentTime.AddHours(4).ToString("o");
            platformType = "15";
            deviceId = "2CVIfNWSzOr-aVLGLnunBFyLF8mNiR6DOUqYbxcXDr4";
            clientVersion = "1";
            titleId = "4D5308E2";
            titleVersion = "1";
            tier = "3";
            omittedItem = OmittedUserTokenItems.None;

            xuid = Utility.GenerateRandomUInt64().ToString();
            gamertag = XboxLiveAccount.GenerateRandomGamerTag();
        }

        /// <summary>
        /// Checks for null parameters
        /// </summary>
        private void checkForNullUserParameters()
        {
            NullParameters.checkForNullParameter(ref issuer);
            NullParameters.checkForNullParameter(ref notBefore);
            NullParameters.checkForNullParameter(ref notOnOrAfter);
            NullParameters.checkForNullParameter(ref platformType);
            NullParameters.checkForNullParameter(ref deviceId);
            NullParameters.checkForNullParameter(ref clientVersion);
            NullParameters.checkForNullParameter(ref titleId);
            NullParameters.checkForNullParameter(ref titleVersion);
            NullParameters.checkForNullParameter(ref xuid);
            NullParameters.checkForNullParameter(ref gamertag);
            NullParameters.checkForNullParameter(ref tier);
        }

        /// <summary>
        /// Gets the "null" string back for null parameters
        /// </summary>
        private void getBackNullUserParameterStrings()
        {
            NullParameters.getBackNullString(ref issuer);
            NullParameters.getBackNullString(ref notBefore);
            NullParameters.getBackNullString(ref notOnOrAfter);
            NullParameters.getBackNullString(ref platformType);
            NullParameters.getBackNullString(ref deviceId);
            NullParameters.getBackNullString(ref clientVersion);
            NullParameters.getBackNullString(ref titleId);
            NullParameters.getBackNullString(ref titleVersion);
            NullParameters.getBackNullString(ref xuid);
            NullParameters.getBackNullString(ref gamertag);
            NullParameters.getBackNullString(ref tier);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\SubForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Security.Cryptography.X509Certificates;

using LiveConnect.Test.Common;

namespace StsGenerator
{
    /// <summary>
    /// 
    /// </summary>
    public partial class SubForm : Form
    {
        CertificateStoreInfo certStoreInfo;

        /// <summary>
        /// 
        /// </summary>
        public SubForm()
        {
            InitializeComponent();
            this.StartPosition = FormStartPosition.CenterScreen;

            comboBox_StoreLocation.DataSource = Enum.GetValues(typeof(StoreLocation));
            comboBox_StoreName.DataSource = Enum.GetValues(typeof(StoreName));
            comboBox_StoreLocation.SelectedItem = StoreLocation.LocalMachine;
            comboBox_StoreName.SelectedItem = StoreName.My;

            // install the certificates
            LiveConnectUtil.InstallCertificate(false);
            LiveConnectUtil.InstallCertificate(true);
        }

        /// <summary>
        /// 
        /// </summary>
        public CertificateStoreInfo CertStoreInfo
        {
            get
            {
                return certStoreInfo;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void button_BrowseCertificates_Click(object sender, EventArgs e)
        {
            certStoreInfo = new CertificateStoreInfo(comboBox_StoreLocation.SelectedItem.ToString(),
                                                            comboBox_StoreName.SelectedItem.ToString());
            using (SubSubForm subSubForm = new SubSubForm(certStoreInfo))
            {
                subSubForm.ShowDialog(this);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void button_Ok_Click(object sender, EventArgs e)
        {
            Form1 form1 = (Form1)this.Owner;
            if (listView2.Items.Count > 0)
            {
                form1.SelectedCertificate = certStoreInfo.SelectedCertificate;
            }
            else
                form1.SelectedCertificate = null;
            this.Close();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\SubSubForm.Designer.cs ===
﻿namespace StsGenerator
{
    partial class SubSubForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.listView1 = new System.Windows.Forms.ListView();
            this.columnHeader_Subject = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_Issuer = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_EKU = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_ValidFrom = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_ValidTo = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_PrivateKey = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_KU = new System.Windows.Forms.ColumnHeader();
            this.button_Ok = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // listView1
            // 
            this.listView1.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader_Subject,
            this.columnHeader_Issuer,
            this.columnHeader_EKU,
            this.columnHeader_ValidFrom,
            this.columnHeader_ValidTo,
            this.columnHeader_PrivateKey,
            this.columnHeader_KU});
            this.listView1.Dock = System.Windows.Forms.DockStyle.Top;
            this.listView1.FullRowSelect = true;
            this.listView1.GridLines = true;
            this.listView1.Location = new System.Drawing.Point(0, 0);
            this.listView1.MultiSelect = false;
            this.listView1.Name = "listView1";
            this.listView1.Size = new System.Drawing.Size(642, 240);
            this.listView1.TabIndex = 2;
            this.listView1.UseCompatibleStateImageBehavior = false;
            this.listView1.View = System.Windows.Forms.View.Details;
            this.listView1.Visible = false;
            this.listView1.SelectedIndexChanged += new System.EventHandler(this.ListView1_SelectedIndexChanged);
            // 
            // columnHeader_Subject
            // 
            this.columnHeader_Subject.Text = "Subject";
            this.columnHeader_Subject.Width = 128;
            // 
            // columnHeader_Issuer
            // 
            this.columnHeader_Issuer.Text = "Issuer";
            this.columnHeader_Issuer.Width = 112;
            // 
            // columnHeader_EKU
            // 
            this.columnHeader_EKU.Text = "Enhanced Key Usage";
            this.columnHeader_EKU.Width = 126;
            // 
            // columnHeader_ValidFrom
            // 
            this.columnHeader_ValidFrom.Text = "Valid From";
            this.columnHeader_ValidFrom.Width = 102;
            // 
            // columnHeader_ValidTo
            // 
            this.columnHeader_ValidTo.Text = "Valid To";
            this.columnHeader_ValidTo.Width = 97;
            // 
            // columnHeader_PrivateKey
            // 
            this.columnHeader_PrivateKey.Text = "Has Private Key";
            this.columnHeader_PrivateKey.Width = 93;
            // 
            // columnHeader_KU
            // 
            this.columnHeader_KU.Text = "Key Usage";
            this.columnHeader_KU.Width = 103;
            // 
            // button_Ok
            // 
            this.button_Ok.Location = new System.Drawing.Point(277, 269);
            this.button_Ok.Name = "button_Ok";
            this.button_Ok.Size = new System.Drawing.Size(96, 30);
            this.button_Ok.TabIndex = 3;
            this.button_Ok.Text = "OK";
            this.button_Ok.UseVisualStyleBackColor = true;
            this.button_Ok.Click += new System.EventHandler(this.button_Ok_Click);
            // 
            // SubSubForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(642, 327);
            this.Controls.Add(this.button_Ok);
            this.Controls.Add(this.listView1);
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "SubSubForm";
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.ListView listView1;
        private System.Windows.Forms.ColumnHeader columnHeader_Subject;
        private System.Windows.Forms.ColumnHeader columnHeader_Issuer;
        private System.Windows.Forms.ColumnHeader columnHeader_EKU;
        private System.Windows.Forms.ColumnHeader columnHeader_ValidFrom;
        private System.Windows.Forms.ColumnHeader columnHeader_ValidTo;
        private System.Windows.Forms.ColumnHeader columnHeader_PrivateKey;
        private System.Windows.Forms.ColumnHeader columnHeader_KU;
        private System.Windows.Forms.Button button_Ok;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\SubForm.Designer.cs ===
﻿namespace StsGenerator
{
    partial class SubForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupBox_CertStore = new System.Windows.Forms.GroupBox();
            this.button_BrowseCertificates = new System.Windows.Forms.Button();
            this.comboBox_StoreName = new System.Windows.Forms.ComboBox();
            this.comboBox_StoreLocation = new System.Windows.Forms.ComboBox();
            this.label_StoreName = new System.Windows.Forms.Label();
            this.label_StoreLocation = new System.Windows.Forms.Label();
            this.button_Ok = new System.Windows.Forms.Button();
            this.listView2 = new System.Windows.Forms.ListView();
            this.columnHeader_Subject = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_Issuer = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_EKU = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_ValidFrom = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_ValidTo = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_PrivateKey = new System.Windows.Forms.ColumnHeader();
            this.columnHeader_KU = new System.Windows.Forms.ColumnHeader();
            this.groupBox_CertStore.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupBox_CertStore
            // 
            this.groupBox_CertStore.Controls.Add(this.button_BrowseCertificates);
            this.groupBox_CertStore.Controls.Add(this.comboBox_StoreName);
            this.groupBox_CertStore.Controls.Add(this.comboBox_StoreLocation);
            this.groupBox_CertStore.Controls.Add(this.label_StoreName);
            this.groupBox_CertStore.Controls.Add(this.label_StoreLocation);
            this.groupBox_CertStore.Location = new System.Drawing.Point(148, 58);
            this.groupBox_CertStore.Name = "groupBox_CertStore";
            this.groupBox_CertStore.Size = new System.Drawing.Size(343, 164);
            this.groupBox_CertStore.TabIndex = 0;
            this.groupBox_CertStore.TabStop = false;
            this.groupBox_CertStore.Text = "From Certificate Store";
            // 
            // button_BrowseCertificates
            // 
            this.button_BrowseCertificates.Location = new System.Drawing.Point(139, 109);
            this.button_BrowseCertificates.Name = "button_BrowseCertificates";
            this.button_BrowseCertificates.Size = new System.Drawing.Size(119, 21);
            this.button_BrowseCertificates.TabIndex = 4;
            this.button_BrowseCertificates.Text = "Browse Certificates";
            this.button_BrowseCertificates.UseVisualStyleBackColor = true;
            this.button_BrowseCertificates.Click += new System.EventHandler(this.button_BrowseCertificates_Click);
            // 
            // comboBox_StoreName
            // 
            this.comboBox_StoreName.FormattingEnabled = true;
            this.comboBox_StoreName.Location = new System.Drawing.Point(139, 71);
            this.comboBox_StoreName.Name = "comboBox_StoreName";
            this.comboBox_StoreName.Size = new System.Drawing.Size(158, 21);
            this.comboBox_StoreName.TabIndex = 3;
            // 
            // comboBox_StoreLocation
            // 
            this.comboBox_StoreLocation.FormattingEnabled = true;
            this.comboBox_StoreLocation.Location = new System.Drawing.Point(139, 29);
            this.comboBox_StoreLocation.Name = "comboBox_StoreLocation";
            this.comboBox_StoreLocation.Size = new System.Drawing.Size(158, 21);
            this.comboBox_StoreLocation.TabIndex = 2;
            // 
            // label_StoreName
            // 
            this.label_StoreName.AutoSize = true;
            this.label_StoreName.Location = new System.Drawing.Point(37, 76);
            this.label_StoreName.Name = "label_StoreName";
            this.label_StoreName.Size = new System.Drawing.Size(66, 13);
            this.label_StoreName.TabIndex = 1;
            this.label_StoreName.Text = "Store Name:";
            // 
            // label_StoreLocation
            // 
            this.label_StoreLocation.AutoSize = true;
            this.label_StoreLocation.Location = new System.Drawing.Point(37, 37);
            this.label_StoreLocation.Name = "label_StoreLocation";
            this.label_StoreLocation.Size = new System.Drawing.Size(79, 13);
            this.label_StoreLocation.TabIndex = 0;
            this.label_StoreLocation.Text = "Store Location:";
            // 
            // button_Ok
            // 
            this.button_Ok.Location = new System.Drawing.Point(272, 366);
            this.button_Ok.Name = "button_Ok";
            this.button_Ok.Size = new System.Drawing.Size(102, 25);
            this.button_Ok.TabIndex = 1;
            this.button_Ok.Text = "OK";
            this.button_Ok.UseVisualStyleBackColor = true;
            this.button_Ok.Click += new System.EventHandler(this.button_Ok_Click);
            // 
            // listView2
            // 
            this.listView2.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader_Subject,
            this.columnHeader_Issuer,
            this.columnHeader_EKU,
            this.columnHeader_ValidFrom,
            this.columnHeader_ValidTo,
            this.columnHeader_PrivateKey,
            this.columnHeader_KU});
            this.listView2.Location = new System.Drawing.Point(0, 254);
            this.listView2.Name = "listView2";
            this.listView2.Size = new System.Drawing.Size(633, 90);
            this.listView2.TabIndex = 2;
            this.listView2.UseCompatibleStateImageBehavior = false;
            this.listView2.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader_Subject
            // 
            this.columnHeader_Subject.Text = "Subject";
            this.columnHeader_Subject.Width = 134;
            // 
            // columnHeader_Issuer
            // 
            this.columnHeader_Issuer.Text = "Issuer";
            this.columnHeader_Issuer.Width = 123;
            // 
            // columnHeader_EKU
            // 
            this.columnHeader_EKU.Text = "Enhanced Key Usage";
            this.columnHeader_EKU.Width = 127;
            // 
            // columnHeader_ValidFrom
            // 
            this.columnHeader_ValidFrom.Text = "Valid From";
            this.columnHeader_ValidFrom.Width = 99;
            // 
            // columnHeader_ValidTo
            // 
            this.columnHeader_ValidTo.Text = "Valid To";
            this.columnHeader_ValidTo.Width = 97;
            // 
            // columnHeader_PrivateKey
            // 
            this.columnHeader_PrivateKey.Text = "Has Private Key";
            this.columnHeader_PrivateKey.Width = 80;
            // 
            // columnHeader_KU
            // 
            this.columnHeader_KU.Text = "KeyUsage";
            this.columnHeader_KU.Width = 211;
            // 
            // SubForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(634, 417);
            this.Controls.Add(this.listView2);
            this.Controls.Add(this.button_Ok);
            this.Controls.Add(this.groupBox_CertStore);
            this.Location = new System.Drawing.Point(15, -15);
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "SubForm";
            this.Text = "Certificate Store";
            this.groupBox_CertStore.ResumeLayout(false);
            this.groupBox_CertStore.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.GroupBox groupBox_CertStore;
        private System.Windows.Forms.ComboBox comboBox_StoreName;
        private System.Windows.Forms.ComboBox comboBox_StoreLocation;
        private System.Windows.Forms.Label label_StoreName;
        private System.Windows.Forms.Label label_StoreLocation;
        private System.Windows.Forms.Button button_BrowseCertificates;
        private System.Windows.Forms.Button button_Ok;
        private System.Windows.Forms.ListView listView2;
        private System.Windows.Forms.ColumnHeader columnHeader_Subject;
        private System.Windows.Forms.ColumnHeader columnHeader_Issuer;
        private System.Windows.Forms.ColumnHeader columnHeader_EKU;
        private System.Windows.Forms.ColumnHeader columnHeader_ValidFrom;
        private System.Windows.Forms.ColumnHeader columnHeader_ValidTo;
        private System.Windows.Forms.ColumnHeader columnHeader_PrivateKey;
        private System.Windows.Forms.ColumnHeader columnHeader_KU;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\SubSubForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Security.Cryptography.X509Certificates;

namespace StsGenerator
{
    /// <summary>
    /// 
    /// </summary>
    public partial class SubSubForm : Form
    {
        CertificateStoreInfo certStoreInfo;

        /// <summary>
        /// 
        /// </summary>
        public SubSubForm(CertificateStoreInfo paramCertStoreInfo)
        {
            InitializeComponent();
            certStoreInfo = paramCertStoreInfo;
            this.StartPosition = FormStartPosition.CenterScreen;
            this.Text = "Certificates in \'" + certStoreInfo.SelectedName + "\' from \'" + certStoreInfo.SelectedLocation + "\'";

            ListViewItem item;
            X509EnhancedKeyUsageExtension enhancedKeyUsage;
            X509KeyUsageExtension keyUsage;
            listView1.Visible = true;

            certStoreInfo.CertStore.Open(OpenFlags.ReadWrite);
            X509Certificate2Collection storeCollection = (X509Certificate2Collection)certStoreInfo.CertStore.Certificates;

            // add cert info to listview
            foreach (X509Certificate2 cert in storeCollection)
            {
                if (cert.HasPrivateKey)
                {
                    item = new ListViewItem(cert.SubjectName.Name);
                    item.SubItems.Add(cert.Issuer);

                    enhancedKeyUsage = (X509EnhancedKeyUsageExtension)cert.Extensions["Enhanced Key Usage"];
                    if (enhancedKeyUsage != null)
                        item.SubItems.Add(enhancedKeyUsage.EnhancedKeyUsages[0].FriendlyName);
                    else
                        item.SubItems.Add("None");

                    item.SubItems.Add(cert.NotBefore.ToString());
                    item.SubItems.Add(cert.NotAfter.ToString());
                    item.SubItems.Add(cert.HasPrivateKey.ToString());

                    keyUsage = (X509KeyUsageExtension)cert.Extensions["Key Usage"];
                    if (keyUsage != null)
                        item.SubItems.Add(keyUsage.KeyUsages.ToString());
                    else
                        item.SubItems.Add("None");

                    listView1.Items.Add(item);
                }
            }

            // close sert store
            if (certStoreInfo.CertStore != null)
                certStoreInfo.CertStore.Close();
        }

        /// <summary>
        /// 
        /// </summary>
        private void button_Ok_Click(object sender, EventArgs e)
        {
            this.Close();   
        }

        /// <summary>
        /// 
        /// </summary>
        protected override void OnClosed(EventArgs e)
        {
            ListView listView;

            listView = (ListView)this.Owner.Controls["listview2"];

            // display selected cert in owner form's listview
            if (listView1.SelectedItems.Count > 0)
            {
                string subject = listView1.SelectedItems[0].SubItems[0].ToString();
                removeUnwantedChars(ref subject);

                ListViewItem listViewItem = new ListViewItem(subject);

                for (int i = 1; i < listView1.SelectedItems[0].SubItems.Count; i++)
                {
                    listViewItem.SubItems.Add(listView1.SelectedItems[0].SubItems[i]);
                }
                listView.Items.Add(listViewItem);

                //get the selected certificate
                certStoreInfo.CertStore.Open(OpenFlags.ReadWrite);
                X509Certificate2Collection matches;
                if (!String.IsNullOrEmpty(subject))
                    matches = (X509Certificate2Collection)certStoreInfo.CertStore.Certificates.Find(X509FindType.FindBySubjectDistinguishedName,
                                                                subject, false);
                else
                {
                    string issuer = listView1.SelectedItems[0].SubItems[1].ToString();
                    removeUnwantedChars(ref issuer);
                    matches = (X509Certificate2Collection)certStoreInfo.CertStore.Certificates.Find(X509FindType.FindByIssuerDistinguishedName,
                                                                issuer, false);
                }
                
                if (matches != null && matches.Count == 1)
                {
                    certStoreInfo.SelectedCertificate = matches[0];
                }
                if (certStoreInfo.CertStore != null)
                    certStoreInfo.CertStore.Close();
            }
            else
                certStoreInfo.SelectedCertificate = null;
        }

        /// <summary>
        /// 
        /// </summary>
        private void ListView1_SelectedIndexChanged(object sender, EventArgs e)
        {
            ListView listView = (ListView)this.Owner.Controls["listview2"];
            listView.Items.Clear();
        }

        /// <summary>
        /// Removes unwanted characters from subitems to be displayed in listview
        /// <param name="subItem"></param>
        /// <returns></returns>
        /// </summary>
        private void removeUnwantedChars(ref string subItem)
        {
            subItem = subItem.Remove(0, subItem.IndexOf('{') + 1);
            subItem = subItem.Remove(subItem.LastIndexOf('}'));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\WebSTS.Test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("StsGenerator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("StsGenerator")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("15cd0472-6bbe-4760-b53d-3dbf502e7875")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\UserTermsAccepter\MainProgram.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using System.Diagnostics;

using LiveN.Test.Common;
using LiveN.Test.Framework;
using LiveN.Test.Framework.Configuration;

namespace UserTermsAccepter
{
    class MainProgram
    {
        static int Main(string[] args)
        {
            bool success = true;

            UserTermsAccepterArguments utaArgs = new UserTermsAccepterArguments();
            if (!Parser.ParseArgumentsWithUsage(args, utaArgs))
            {
                TraceEx.TraceError("Invalid argument(s) provided: {0}", Environment.CommandLine);
                return 1;
            }

            if (Config.EnvironmentSettings.Environments[utaArgs.Environment.ToLower()] == null)
            {
                TraceEx.TraceError("\r\nPlease enter a valid environment.\r\nValid environments include TestNet, INT2, PartnerNet, CertNet and Production.");
                return 1;
            }
            
            EnvironmentElement env = Config.EnvironmentSettings.Environments[utaArgs.Environment.ToLower()];
            XboxLive xboxLive = new XboxLive(env.XuacsSettings.XuacsUrl, env.XuacsSettings.ClientCertSubject,
                                                env.XuacsSettings.Timeout, env.StsSettings.StsUrl, env.StsSettings.ClientCertSubject,
                                                env.WindowsLiveIDSettings.LiveIdServiceTarget, env.WindowsLiveIDSettings.Policy,
                                                env.WindowsLiveIDSettings.Environment, env.StsSettings.PlatformType,
                                                env.StsSettings.TitleId, env.StsSettings.TitleVersion, env.StsSettings.ClientVersion);

            if (String.IsNullOrEmpty(utaArgs.Username) || String.IsNullOrEmpty(utaArgs.Password))
            {
                if (!File.Exists(utaArgs.PreexistingUsersXmlFile))
                {
                    TraceEx.TraceError("\r\nThe specified pre-existing users xml file ('{0}') does not exist. Please enter a valid file path.", utaArgs.PreexistingUsersXmlFile);
                    return 1;
                }

                // get user accounts
                Dictionary<string, string> usersAndPasswords = GetUserNamesAndPasswords(utaArgs.PreexistingUsersXmlFile);
                if (usersAndPasswords != null && usersAndPasswords.Count > 0)
                {
                    // accept terms of use for each account
                    foreach (KeyValuePair<string, string> item in usersAndPasswords)
                    {
                        try
                        {
                            xboxLive.AcceptTermsOfUse(item.Key, item.Value);
                            Trace.TraceInformation("Successfully accepted terms for: {0}", item.Key);
                        }
                        catch (Exception e)
                        {
                            success = false;
                            TraceEx.TraceError("\r\nError accepting terms of use for {0}: {1}", item.Key, e.Message);
                        }
                    }

                }
                else
                {
                    Trace.TraceInformation("\r\nNo usernames and passwords found in the file.");
                    return 1;
                }
            }
            else
            {
                try
                {
                    xboxLive.AcceptTermsOfUse(utaArgs.Username, utaArgs.Password);
                    Trace.TraceInformation("Successfully accepted terms for: {0}", utaArgs.Username);
                }
                catch (Exception e)
                {
                    success = false;
                    TraceEx.TraceError("\r\nError accepting terms of use for {0}: {1}", utaArgs.Username, e.Message);
                }
            }

            if (success)
            {
                Trace.TraceInformation("\r\nAccepting terms of use, for all user(s), completed with no errors.");
                return 0;
            }
            else
                return 1;
        }

        /// <summary>
        /// Gets a list of usernames and password from the file
        /// </summary>
        /// <param name="filePath"></param>
        /// <returns></returns>
        public static Dictionary<string, string> GetUserNamesAndPasswords(string filePath)
        {
            if(string.IsNullOrEmpty(filePath) || (!File.Exists(filePath)))
                return null;

            using(FileStream fs = File.OpenRead(filePath))
            {
                Dictionary<string, string> usersAndPasswords = new Dictionary<string,string>();
                XmlDocument xmlDoc = new XmlDocument();

                try
                {
                    xmlDoc.Load(fs);
                    XmlNodeList elemList = xmlDoc.GetElementsByTagName("add");
                    for (int i = 0; i < elemList.Count; i++)
                    {
                        XmlAttributeCollection attribCollection = elemList[i].Attributes;
                        usersAndPasswords.Add(attribCollection["membername"].Value, attribCollection["password"].Value);
                    }

                }
                catch(Exception e)
                {
                    Console.WriteLine(string.Format("\nInvalid Xml format. Please enter data in the file in the following format\n" +
                                        "<preExistingUsers>\n\t<add membername=<username> password=<password>/>\n\t" +
                                        "<add membername=<username> password=<password>/>\n</preExistingUsers>\n", e.Message));
                }

                return usersAndPasswords;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StsGenerator.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\StsGenerator\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StsGenerator.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("StsGenerator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\UserTermsAccepter\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("UserTermsAccepter")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("UserTermsAccepter")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f660045e-73f9-4c38-a263-41d36f8bd86a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\WebSTS.Test\Common\SecurityTokensResponse.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test.Common;

namespace WebSTS.Test.Common
{
    public enum TokenType : byte { UserToken = 1, PartnerToken };

    /// <summary>
    /// 
    /// </summary>
    public class SecurityTokensResponse
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="response"></param>
        /// <param name="tokenType"></param>
        public SecurityTokensResponse(string response, TokenType tokenType)
        {
            ParseTokens(response, tokenType);
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserToken
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string PartnerToken
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="response"></param>
        /// <param name="tokenType"></param>
        protected void ParseTokens(string response, TokenType tokenType)
        {
            try
            {
                XmlDocumentEx xmlResponse = new XmlDocumentEx(response, true);

                switch (tokenType)
                {
                    case TokenType.UserToken:
                        ParseUserTokens(response, xmlResponse);
                        break;
                    case TokenType.PartnerToken:
                        ParsePartnerTokens(response, xmlResponse);
                        break;
                }
            }
            catch (XmlException)
            {
                throw new ApplicationException(String.Format("Invalid Xml returned by WebSTS service:\r\n\r\n{0}", response));
            }
        }

        /// <summary>
        /// Gets the user token and asserts that partner token is null
        /// </summary>
        /// <param name="response"></param>
        /// <param name="xmlResponse"></param>
        protected void ParseUserTokens(string response, XmlDocumentEx xmlResponse)
        {
            // get user token
            XmlNode temp = xmlResponse.SelectSingleNode("dfltns:Tokens/dfltns:User", xmlResponse.NamespaceManager);
            if (temp == null)
                throw new ApplicationException(String.Format("User token (Tokens/User) not found in WebSTS response:\r\n\r\n{0}", response));
            this.UserToken = temp.InnerText;

            // assert that the partner token is null
            temp = xmlResponse.SelectSingleNode("dfltns:Tokens/dfltns:Partner", xmlResponse.NamespaceManager);
            Assert.AreEqual(temp.InnerText, "", String.Format("GetUserTokensXml API should not return partner token in WebSTS response. Partner Token: \"{0}\" returned ", temp.InnerText));
            Assert.AreEqual(temp.Attributes["i:nil"].Value, "true");
        }

        /// <summary>
        /// Gets the partner token and asserts that the user token is null
        /// </summary>
        /// <param name="response"></param>
        /// <param name="xmlResponse"></param>
        protected void ParsePartnerTokens(string response, XmlDocumentEx xmlResponse)
        {
            // get the partner token
            XmlNode temp = xmlResponse.SelectSingleNode("dfltns:Tokens/dfltns:Partner", xmlResponse.NamespaceManager);
            if (temp == null)
                throw new ApplicationException(String.Format("Partner token (Tokens/Partner) not found in WebSTS response:\r\n\r\n{0}", response));
            this.PartnerToken = temp.InnerText;

            // assert that the user token is null
            temp = xmlResponse.SelectSingleNode("dfltns:Tokens/dfltns:User", xmlResponse.NamespaceManager);
            Assert.AreEqual(temp.InnerText, "", String.Format("GetPartnerTokensXml API should not return user token in WebSTS response. User Token: \"{0}\" returned ", temp.InnerText));
            Assert.AreEqual(temp.Attributes["i:nil"].Value, "true");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Tools\UserTermsAccepter\UserTermsAccepterArguments.cs ===
﻿using System;
using LiveN.Test.Common;

namespace UserTermsAccepter
{
    internal class UserTermsAccepterArguments
    {
        /// <summary>
        /// 
        /// </summary>
        [Argument(ArgumentType.Required, LongName = "environment", ShortName = "env", HelpText = "Specifies the environment the run against (TestNet, INT2, PartnerNet, CertNet and Production).")]
        public string Environment = String.Empty;

        /// <summary>
        /// 
        /// </summary>
        [Argument(ArgumentType.AtMostOnce, LongName = "xml", HelpText = "Specifies the full path to an xml file containing pre-existing usernames and passwords.")]
        public string PreexistingUsersXmlFile;

        /// <summary>
        /// 
        /// </summary>
        [Argument(ArgumentType.AtMostOnce, LongName = "username", ShortName = "u", HelpText = "Specifies a username to accept the terms of use for.")]
        public string Username;

        /// <summary>
        /// 
        /// </summary>
        [Argument(ArgumentType.AtMostOnce, LongName = "password", ShortName = "p", HelpText = "Specifies the password of the previously provided username.")]
        public string Password;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\WebSTS.Test\Common\TestAreaBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common;
using LiveN.Test.Framework;

namespace WebSTS.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class TestAreaBase
    {
        private TestContext testContextInstance;
        protected WebStsService sts;
        private const string defaultAudienceUri = "http://xboxlive.com/";
        private const string defaultTitleVersion = "0";

        /// <summary>
        /// 
        /// </summary>
        public TestAreaBase()
        {
            this.sts = new WebStsService(CurrentEnvironmentSettings.StsSettings.WebStsUrl);

            this.sts.AuthorizationDelegateWithCookieName = (string cookieName) =>
            {
                string username = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
                string password = CurrentEnvironmentSettings.UserSettings[0].Password;
                TraceEx.TraceVerbose("Attempting to retrieve {0} cookie for {1} / {2}", cookieName, username, password);
                string rpsTicket = LiveID.GetRpsAuthCookie(CurrentEnvironmentSettings.StsSettings.WebStsLiveIdUrl, username, password, cookieName);
                TraceEx.TraceVerbose("Successfully retrieved RPS ticket: {0}", rpsTicket);

                KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("Cookie", String.Format("{0}={1}", cookieName, rpsTicket));

                return authzHeader;
            };

            if (Trace.Listeners.Count > 1)
            {
                Trace.Listeners[1].Filter = Trace.Listeners[0].Filter;
                Trace.Listeners[1].IndentLevel = Trace.Listeners[0].IndentLevel;
                Trace.Listeners[1].IndentSize = Trace.Listeners[0].IndentSize;
                Trace.Listeners[1].TraceOutputOptions = Trace.Listeners[0].TraceOutputOptions;
            }
            else
                Trace.TraceWarning("Unable to configure custom trace listening.");

            if (bool.Parse(System.Configuration.ConfigurationManager.AppSettings["IgnoreServerSSLErrors"]))
                System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;

            StringBuilder trace = new StringBuilder();
            trace.AppendFormat("Running against the {0} environment.\r\n", CurrentEnvironmentSettings.SelectedEnvironmentName);
            trace.AppendFormat("\tWebSTS Url:\t{0}\r\n", CurrentEnvironmentSettings.StsSettings.StsUrl);
            Trace.TraceInformation(trace.ToString());
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContextInstance;
            }
            set
            {
                this.testContextInstance = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestInitialize]
        public void Start()
        {
            TraceEx.TraceStart("Starting test: {0}", this.testContextInstance.TestName);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCleanup]
        public void Finish()
        {
            TraceEx.TraceStop("Finished test: {0}", this.testContextInstance.TestName);
            if (this.testContextInstance.CurrentTestOutcome == UnitTestOutcome.Passed)
                Trace.TraceInformation("{0} Passed!", this.testContextInstance.TestName);
        }

        /// <summary>
        /// Verifies the audience uri in the Saml token
        /// </summary>
        /// <param name="response"></param>
        /// <param name="audienceUri"></param>
        protected static void VerifyAudienceUri(SecurityTokensResponse response, string audienceUri)
        {
            XmlDocumentEx xmlPartnerToken = new XmlDocumentEx(response.PartnerToken, true);

            XmlNode node = xmlPartnerToken.SelectSingleNode("saml:Assertion/saml:Conditions/saml:AudienceRestrictionCondition/saml:Audience", xmlPartnerToken.NamespaceManager);

            // verify when audience uri is null or has spaces, Saml token contains a default audience uri
            if (audienceUri == null || String.IsNullOrEmpty(audienceUri.Trim()))
            {
                if (!node.InnerText.Equals(defaultAudienceUri))
                {
                    throw new AssertFailedException(String.Format("Invalid Audience Uri returned in Saml token. Expected: {0}, Actual: {1}", defaultAudienceUri, node.InnerText));
                }
            }
            else
            {
                node.InnerText = node.InnerText.Trim('/');
                if (!audienceUri.Contains(node.InnerText))
                {
                    throw new AssertFailedException(String.Format("Invalid Audience Uri returned in Saml token. Expected: {0}, Actual: {1}", audienceUri, node.InnerText));
                }
            }
        }

        /// <summary>
        /// Verifies the title version in the Saml token
        /// </summary>
        /// <param name="response"></param>
        /// <param name="titleVersion"></param>
        protected static void VerifyTitleVersion(SecurityTokensResponse response, string titleVersion, TokenType tokenType)
        {
            XmlDocumentEx xmlToken;
            
            if(tokenType == TokenType.UserToken)
                xmlToken = new XmlDocumentEx(response.UserToken, true);
            else
                xmlToken = new XmlDocumentEx(response.PartnerToken, true);

            XmlNode node = xmlToken.SelectSingleNode("saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='TitleVersion']/saml:AttributeValue", xmlToken.NamespaceManager);

            // verify when title version is null, Saml token contains a default title version
            if (titleVersion == null)
            {
                if (!node.InnerText.Equals(defaultTitleVersion))
                {
                    throw new AssertFailedException(String.Format("Invalid Title Version returned in Saml token. Expected: {0}, Actual: {1}", defaultTitleVersion, node.InnerText));
                }
            }
        }

        /// <summary>
        /// Gets http headers for banned user account
        /// </summary>
        protected Dictionary<string,string> GetHttpHeadersForBannedUser()
        {
            // banned username/password
            string username = "stsdevblocked@xbltest.com";
            string password = "supersecret";
            TraceEx.TraceVerbose("Attempting to retrieve RPSSecAuth cookie for {0} / {1}", username, password);
            string rpsTicket = LiveID.GetRpsAuthCookie(CurrentEnvironmentSettings.StsSettings.WebStsLiveIdUrl, username, password);
            TraceEx.TraceVerbose("Successfully retrieved RPS ticket: {0}", rpsTicket);

            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            httpHeaders.Add("Cookie", String.Format("RPSSecAuth={0}", rpsTicket));
            return httpHeaders;
        }

        /// <summary>
        /// Changes case of a letter in the RPS ticket
        /// </summary>
        /// <param name="RpsCookieValue"></param>
        protected void ChangeCaseOfRpsTicket(ref string RpsCookieValue)
        {
            if (RpsCookieValue == null || RpsCookieValue == String.Empty)
                return;

            char[] charArray = RpsCookieValue.ToCharArray();
            for (int i = 11; i < charArray.Length; i++)
            {
                if (Char.IsLetter(charArray[i]) && Char.IsLower(charArray[i]))
                {
                    charArray[i] = Char.ToUpper(charArray[i]);
                    break;
                }
            }
            RpsCookieValue = new string(charArray);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\WebSTS.Test\Common\WebStsService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.IO;
using System.Net;

using LiveN.Test.Common.Web;

namespace WebSTS.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class WebStsService : RestRequest
    {
        public const string GetUserTokensUrlFormat = "/usertoken?gameId={gameId}&gameVersion={gameVersion}";
        public const string GetPartnerTokensUrlFormat = "/partnertoken?gameId={gameId}&gameVersion={gameVersion}&audienceUri={audienceUri}";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="baseUri"></param>
        public WebStsService(string baseUri)
        {
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUri
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="url"></param>
        /// <param name="gameId"></param>
        /// <param name="gameVersion"></param>
        /// <param name="audienceUri"></param>
        /// <returns></returns>
        public string FormatGameStateUrl(string url, string gameId, string gameVersion, string audienceUri)
        {
            return this.BaseUri + url.Replace("{gameId}", gameId).Replace("{gameVersion}", gameVersion).Replace("{audienceUri}", audienceUri);
        }

        /// <summary>
        /// Formats part of the url when there are multiple game ids
        /// </summary>
        /// <param name="url"></param>
        /// <param name="gameIds"></param>
        public string FormatMultipleGameIdsUrl(string url, params string[] gameIds)
        {
            for (int i = 0; i < gameIds.Length; i++)
            {
                url = url.Replace("gameId" + i.ToString(), gameIds[i]);
            }
            return url;
        }

        /// <summary>
        /// Formats part of the url when there are multiple audience uris
        /// </summary>
        /// <param name="url"></param>
        /// <param name="audienceUris"></param>
        public string FormatMultipleAudienceUrisUrl(string url, params string[] audienceUris)
        {
            for (int i = 0; i < audienceUris.Length; i++)
            {
                url = url.Replace("audienceUri" + i.ToString(), audienceUris[i]);
            }
            return url;
        }

        /// <summary>
        /// Gets the Saml token
        /// </summary>
        /// <param name="formatUrl"></param>
        /// <param name="gameId"></param>
        /// <param name="gameVersion"></param>
        /// <param name="audienceUri"></param>
        /// <param name="headers"></param>
        /// <param name="tokenType"></param>
        /// <param name="cookieName"></param>
        /// <returns></returns>
        public SecurityTokensResponse GetSamlTokensXml(string formatUrl, string gameId, string gameVersion, string audienceUri,
                                                            Dictionary<string, string> headers, TokenType tokenType, string cookieName)
        {
            string url;
            url = FormatGameStateUrl(formatUrl, gameId, gameVersion, audienceUri);

            SecurityTokensResponse tokens = GetSamlTokensXML(url, headers, tokenType, cookieName);
            return tokens;
        }

        /// <summary>
        /// Gets the Saml token
        /// </summary>
        /// <param name="url"></param>
        /// <param name="headers"></param>
        /// <param name="tokenType"></param>
        /// <param name="cookieName"></param>
        /// <returns></returns>
        public SecurityTokensResponse GetSamlTokensXML(string url, Dictionary<string, string> headers, TokenType tokenType, string cookieName)
        {
            Dictionary<string, string> httpHeaders;

            if (headers == null)
                httpHeaders = GetHttpHeaders(null, cookieName);
            else
                httpHeaders = headers;

            RestResponse response = Get(url, httpHeaders);
            //HandleResponse(response);
            SecurityTokensResponse tokens = new SecurityTokensResponse(response.Body, tokenType);
            return tokens;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\WebSTS.Test\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WebSTS.Test")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("WebSTS.Test")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f31c03b5-4d58-477e-98c1-db694e630c99")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\WebSTS.Test\Tests\GetPartnerTokenXml.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using WebSTS.Test.Common;
using LiveN.Test.Common.Web;
using LiveN.Test.Framework.Configuration;

namespace WebSTS.Test.Tests
{

    /// <summary>
    /// Summary description for UnitTest1
    /// </summary>
    [TestClass]
    public class GetPartnerTokensXml : TestAreaBase
    {
        private const string AudienceUri = "http://xboxlive.com/multiplayer/async";

        #region BVT

        /// <summary>
        /// Test GetPartnerTokenXml API BVT
        /// </summary>
        [TestMethod]
        public void BVT_GetPartnerTokensXml()
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetPartnerTokensUrlFormat, CurrentEnvironmentSettings.Titles[0].Id,
                                                    CurrentEnvironmentSettings.Titles[0].Version, AudienceUri, null, TokenType.PartnerToken, WebStsService.RpsCookieName);

                // verify the audience uri in the saml token
                VerifyAudienceUri(response, AudienceUri);
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.OK, e.Response.Status);
            }
        }

        #endregion

        #region Positive Tests

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space before title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding space before title id")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceBeforeTitleId()
        {
            string titleId = " " + CurrentEnvironmentSettings.Titles[0].Id;
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space after title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Adding space after title id")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceAfterTitleId()
        {
            string titleId = CurrentEnvironmentSettings.Titles[0].Id + " ";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space before title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding space before title version")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceBeforeTitleVersion()
        {
            string titleVersion = " " + CurrentEnvironmentSettings.Titles[0].Version;
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space after title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Adding space after title version")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceAfterTitleVersion()
        {
            string titleVersion = CurrentEnvironmentSettings.Titles[0].Version + "    ";
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space before audience uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding space before audience uri")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceBeforeAudienceUri()
        {
            string audienceUri = " " + AudienceUri;
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space after audience uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Adding space after audience uri")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceAfterAudienceUri()
        {
            string audienceUri = AudienceUri + "  ";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is a zero before the title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding zero before title id")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_ZeroBeforeTitleId()
        {
            string titleId = "0" + CurrentEnvironmentSettings.Titles[0].Id;
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is a zero before the title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding zero before title version")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_ZeroBeforeTitleVersion()
        {
            string titleVersion = "00000" + CurrentEnvironmentSettings.Titles[0].Version;
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with max value for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing max value for title Version")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_MaxValueTitleVersion()
        {
            string titleVersion = UInt16.MaxValue.ToString();
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with min value for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing min value for title Version")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_MinValueTitleVersion()
        {
            string titleVersion = UInt16.MinValue.ToString();
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no title version in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title version in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NoTitleVersionInUrl()
        {
            string formatUrl = "/partnertoken?gameId={gameId}&audienceUri={audienceUri}";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK, true, false);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no audience uri in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No audience uri in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NoAudienceUriInUrl()
        {
            string formatUrl = "/partnertoken?gameId={gameId}&gameVersion={gameVersion}";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK, false, true);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no title version and audience uri in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title version and audience uri in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NoTitleVersionAudienceUriInUrl()
        {
            string formatUrl = "/partnertoken?gameId={gameId}";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK, true, true);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass a non-existing host name in audience uri 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing non-existing host name in audience uri")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NonExistingHostNameInAudienceUri()
        {
            string audienceUri = "http://foo.hotmail.com/";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass a non-existing domain name in audience uri 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing non-existing domain name in audience uri")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NonExistingDomainNameInAudienceUri()
        {
            string audienceUri = "http://www.nonexistinguri.com";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with a non-existing scheme name
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with a non-existing scheme name")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NonExistingSchemeInAudienceUri()
        {
            string audienceUri = "foo://www.hotmail.com/";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with a non-existing path
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with a non-existing path")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NonExistingPathInAudienceUri()
        {
            string audienceUri = "http://www.google.com/servghgfhices/";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with 'ftp' scheme name
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with 'ftp' scheme name")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_FtpSchemeNameInAudienceUri()
        {
            string audienceUri = "ftp://aeneas.mit.edu/";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with 'https' scheme name
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with 'https' scheme name")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_HttpsSchemeNameInAudienceUri()
        {
            string audienceUri = "https://www.paypal.com/";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// without path
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing audience uri without path")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_AudienceUriWithoutPath()
        {
            string audienceUri = "http://www.google.com/";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with path
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing audience uri with path")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_AudienceUriWithPath()
        {
            string audienceUri = "http://en.wikipedia.org/wiki/Uniform_Resource_Identifier";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with port number
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing audience uri with port number")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_AudienceUriWithPort()
        {
            string audienceUri = "http://www.w3schools.com:80";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with query string
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing audience uri with query string")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_AudienceUriWithQueryString()
        {
            string audienceUri = "http://mail.google.com/support/bin/topic.py?hl=en&topic=12867";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with anchor
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing audience uri with anchor")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_AudienceUriWithAnchor()
        {
            string audienceUri = "http://en.wikipedia.org/wiki/Uniform_Resource_Name#Resolvers";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with valid ip address for domain
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with valid ip address for domain")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_AudienceUriWithIpAddress()
        {
            string audienceUri = "http://208.80.152.2/";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when audience uri is null
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null audience uri")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_NullAudienceUri()
        {
            string audienceUri = null;
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing space for audience uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for audience uri")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceForAudienceUri()
        {
            string audienceUri = " ";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there are multiple valid game ids in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Multiple valid game ids in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_MultipleValidTitleIdsInUrl()
        {
            string formatUrl = "/partnertoken?gameId=gameId0&gameId=gameId1&gameId=gameId2&gameId=gameId3&gameId=gameId4&gameId=gameId5&gameVersion={gameVersion}&audienceUri={audienceUri}";
            string[] gameIds = { "1297287392", "1297287394", "1297287395", "1297287400", "1297287401", "1297287408" };
            formatUrl = this.sts.FormatMultipleGameIdsUrl(formatUrl, gameIds);
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there are multiple valid audience uri in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Multiple valid audience uris in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_MultipleValidAudienceUrisInUrl()
        {
            string formatUrl = "/partnertoken?gameId={gameId}&gameVersion={gameVersion}&audienceUri=audienceUri0&audienceUri=audienceUri1&audienceUri=audienceUri2&audienceUri=audienceUri3";
            string[] audienceUris = { AudienceUri, "http://www.hotmail.com", "http://www.bing.com", "http://www.google.com" };
            formatUrl = this.sts.FormatMultipleAudienceUrisUrl(formatUrl, audienceUris);
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there are multiple valid title ids and audience uri in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Multiple valid title ids, audience uris in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_MultipleValidTitleIdsAudienceUrisInUrl()
        {
            string formatUrl = "/partnertoken?gameId=gameId0&gameId=gameId1&gameId=gameId2&gameId=gameId3&gameVersion={gameVersion}&audienceUri=audienceUri0&audienceUri=audienceUri1&audienceUri=audienceUri2&audienceUri=audienceUri3";
            string[] gameIds = { "1297287392", "1297287394", "1297287395", "1297287400" };
            formatUrl = this.sts.FormatMultipleGameIdsUrl(formatUrl, gameIds);
            string[] audienceUris = { AudienceUri, "http://www.hotmail.com", "http://www.bing.com", "http://www.google.com" };
            formatUrl = this.sts.FormatMultipleAudienceUrisUrl(formatUrl, audienceUris);
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space after url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Space after request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceAfterUrl()
        {
            string formatUrl = "/partnertoken?gameId={gameId}&gameVersion={gameVersion}&audienceUri={audienceUri}      ";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Space in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceInUrl()
        {
            string formatUrl = "/partnertoken?gameId={gameId}&gameVersion={gameVersion}&   audienceUri={audienceUri}";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space before the RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space before RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceBeforeRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Insert(11, "     ");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is space after the RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space after RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void P_GetPartnerTokensXml_SpaceAfterRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Insert(httpHeaders["Cookie"].Length, "      ");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.OK);
        }

        #endregion

        #region Negative tests

        /// <summary>
        /// Test GetPartnerTokenXml API with Live App's title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing Live App's title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_LiveAppTitleId()
        {
            string titleId = "1297287404";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with banned username/password
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing banned username/password")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_BannedUser()
        {
            if (CurrentEnvironmentSettings.SelectedEnvironmentName == "Dev")
            {
                Dictionary<string, string> httpHeaders = GetHttpHeadersForBannedUser();
                GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.Unauthorized);
            }
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title id is null
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NullTitleId()
        {
            string titleId = null;
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title version is null
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NullTitleVersion()
        {
            string titleVersion = null;
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with zero for title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing zero for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_ZeroForTitleId()
        {
            string titleId = "0";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing space for title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SpaceForTitleId()
        {
            string titleId = " ";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing space for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SpaceForTitleVersion()
        {
            string titleVersion = "  ";
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title id is negative
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing negative title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NegativeTitleId()
        {
            string titleId = "-" + CurrentEnvironmentSettings.Titles[0].Id;
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title version is negative
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing negative title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NegativeTitleVersion()
        {
            string titleVersion = "-" + CurrentEnvironmentSettings.Titles[0].Version;
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title id is a decimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing decimal value for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_DecimalTitleId()
        {
            string titleId = CurrentEnvironmentSettings.Titles[0].Id + ".0";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title version is a decimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing decimal value for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_DecimalTitleVersion()
        {
            string titleVersion = CurrentEnvironmentSettings.Titles[0].Version + ".00";
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title id is a hexadecimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_HexTitleId()
        {
            string titleId = "0xABFF45";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title version is a hexadecimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_HexTitleVersion()
        {
            string titleVersion = "0x2";
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when audience uri has hexadecimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value in audience uri")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_HexAudienceUri()
        {
            string audienceUri = "0x123ABCDE";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title id is a string containing alphabets
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing alpha characters for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_AlphaTitleId()
        {
            string titleId = "fgfgtrrtgewfg";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title version is a string containing alphabets
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing alpha characters for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_AlphaTitleVersion()
        {
            string titleVersion = "a";
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with greater than max value for title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing greater than max value for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_GreaterThanMaxTitleId()
        {
            ulong longTitleId = UInt32.MaxValue + 10000000000;
            string titleId = longTitleId.ToString();
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with greater than max value for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing greater than max value for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_GreaterThanMaxTitleVersion()
        {
            uint intTitleVersion = UInt16.MaxValue + 10000;
            string titleVersion = intTitleVersion.ToString();
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with a large title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing a large title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_LargeTitleId()
        {
            string titleId = "97777777777777777777754444444444444444444448777777777777777777777777772333333339999999999991111111111000000000000000004444444444448888888888888888888822222222222222229854758576490578034957867856758745879867586748570945784975867485748357489675876845748578475867586745748574857878999999945555555555555555537897485748574857857558457485748484848484848484848484848484848484857485748574444444444444444444447543945798457489" +
                                "76598783496378564578456892346786578684563879463785656565656565656565656565656567454556748567834567834567435454665767878998979878678678879844562444444444444444444444444655555555555657688798977756756766666666666666666666666666666666666666666666333657687878798908564563453454656788796477856754767687989867546444444444444444445657687777777777778796765655555555555555555555555555655555555555555555555555555555555555555" +
                                "58777777777777799999344444444444444444444444444444444444444444444444444444444444444444444444444444444444447899999999999999999999999999999999999999999999999999999999999999999999995444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444448999999999999999999999999999999999999999990898989898989898989898989898989898989555555555555555555555" +
                                "69358000000000000000000000000000000000000000000000000000000000000000000000000078923333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333898989898989898989898989898989898989898989898989898989893434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434565";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with a large title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing a large title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_LargeTitleVersion()
        {
            string titleVersion = "7890675865719675757575757575757575757575757575757568763844444444444444444444446754676879546237896547567877777777777777722222222222222222222888888888888888888888644444444444444444444487989564756389789478566890000000000000000000000000000000003545444444444444444444444444444444444444441789367826432788888888888888888888566666666666666666666666666666645879809999999999999999999999999999999999999999999999999999999999999" +
                                    "76598783496378564578456892346786578684563879463785656565656565656565656565656567454556748567834567834567435454665767878998979878678678879844562444444444444444444444444655555555555657688798977756756766666666666666666666666666666666666666666666333657687878798908564563453454656788796477856754767687989867546444444444444444445657687777777777778796765655555555555555555555555555655555555555555555555555555555555555555" +
                                    "58777777777777799999344444444444444444444444444444444444444444444444444444444444444444444444444444444444447899999999999999999999999999999999999999999999999999999999999999999999995444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444448999999999999999999999999999999999999999990898989898989898989898989898989898989555555555555555555555" +
                                    "69358000000000000000000000000859678957777777777777777777777777342222222222222222222222222222222222222222222222222222222222222228999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999";
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API with a large audience uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing a large audience uri")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_LargeAudienceUri()
        {
            string audienceUri = "jkllllllllllllllllllllllhhjjjjjjjjjjjjgvvvvjkhvkdgggggggggdvshhhhhhhhhhhhhdssssssssssssssssssssssssbbbbbbbbbbbbbbbbbbbbbdssssssssssssssshhhhhhhhhhhhhhhhhhhhhhdsssssssssssssssssssshjjjjjjjjjjjjjjjjjjjjwqqqqqqqqqqqqqqqqjhhhhhhhhhhhhhhhhhhhhcxxxxxxxxxxxxxxhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhdddddddddddddddddddddddjhjkgggggggggggggggggggggggggyyyyyyyyyyyyyfffffffffffffffffggggggggggggggggggggggcvvvvvvvvvvvvvvvvvghhhhhhhhhhhhhhhhhhhhhhvcbnnnnnnnnnnnnnnnnnnnnnnnnnnnnvvcghhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhcvgggggggggggggggggggggggggggggcvvvvvvvvvvvvvvvvvvvvvvvvsdwwrferewr" +
                                    "hjdgfre7tyrhgrghtjhyhgggggggggggggggggggggfdrret4ryyyyyyyyyyyyyyyyyyyyyyyyyjttghfdgreaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaatuyjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjrt456grfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfrfdyjhyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyygfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffg" +
                                    "rgfreit987gubjhgfihjadkjhgfhghjnhggggggggggggggggggggggggggggggggggggggggggfgyht6ythhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhbngjghhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhfgdfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffgtyhtttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title id has unicode characters
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Unicode characters in title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_UnicodeTitleId()
        {
            string titleId = "\u0641\u0648\u279e\u04fa";
            GetPartnerTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when title version has unicode characters
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Unicode characters in title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_UnicodeTitleVersion()
        {
            string titleVersion = "\u04e3";
            GetPartnerTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when audience uri has unicode characters
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Unicode characters in audience uri")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_UnicodeAudienceUri()
        {
            string audienceUri = "\u00d2\u00de\u00ca";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no title id in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title id in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NoTitleIdInUrl()
        {
            string formatUrl = "/partnertoken?gameVersion={gameVersion}&audienceUri={audienceUri}";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no title id and audience uri in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title id and audience uri in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NoTitleIdAudienceUriInUrl()
        {
            string formatUrl = "/partnertoken?gameVersion={gameVersion}";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no title id and title version in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title id and title version in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NoTitleIdTitleVersionInUrl()
        {
            string formatUrl = "/partnertoken?audienceUri={audienceUri}";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no title id, title version and audience uri in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title id, title version and audience uri in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NoQueryStringInUrl()
        {
            string formatUrl = "/partnertoken";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is invalid string in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Invalid string in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidStringInUrl()
        {
            string formatUrl = "/partnertoken?dsfshfsiladuiodu";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is A large invalid string in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Large invalid string in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_LargeInvalidStringInUrl()
        {
            string formatUrl = "dfjikbhkjbnnuwehuivbfvefefrggrgrggtthgjhdfgfeeeeeffffffffffffffefrejkhfjhjjjjjjjjjjjjjdfffffffffffffffnnnnnnnnnnnsfjfheuhufvujhweuhvfdu8397u98vfduvhfjhnfjvhfjvdfdsssssssfnnnnnnnnnnnnnndddddddddddddddddddddjhhhhhhhhhhhhhhhhhhhhhhdfffffffffffffffjnjnjnjnjnjnjnjnjnjnjnjnjnjnjnjnjnjndfffffffffffffffffhjjjfenbfdshfbhfbebedbhfbhbfhfbhefbehfbehfbhefbhhhhhhhhhhhdffffffffffffffffhghgehfjfdheheghhhhhhhhhhhhhhhhhhdferfehjjjjjjjjjdf";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.BadRequest);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when format url is empty
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Empty format url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_EmptyFormatUrl()
        {
            string formatUrl = "";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.NotFound);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing space for format url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space for format url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SpaceForFormatUrl()
        {
            string formatUrl = "   ";
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.NotFound);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there are multiple valid game ids in the url with one invalid game id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Single invalid game id in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SingleInvalidTitleIdInUrl()
        {
            string formatUrl = "/partnertoken?gameId=gameId0&gameId=gameId1&gameId=gameId2&gameId=gameId3&gameId=gameId4&gameId=gameId5&gameVersion={gameVersion}&audienceUri={audienceUri}";
            string[] gameIds = { "dcfdkjsd", "1297287394", "1297287395", "1297287400", "1297287401", "1297287408" };
            formatUrl = this.sts.FormatMultipleGameIdsUrl(formatUrl, gameIds);
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.BadRequest);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there are multiple valid audience uri in the url with one invalid uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Single invalid audience uris in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SingleInvalidAudienceUriInUrl()
        {
            string formatUrl = "/partnertoken?gameId={gameId}&gameVersion={gameVersion}&audienceUri=audienceUri0&audienceUri=audienceUri1&audienceUri=audienceUri2&audienceUri=audienceUri3";
            string[] audienceUris = { "shdgdhkiswud", "http://www.hotmail.com", "http://www.bing.com", "http://www.google.com" };
            formatUrl = this.sts.FormatMultipleAudienceUrisUrl(formatUrl, audienceUris);
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.BadRequest);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when characters are removed from the end of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Remove characters from the end of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_ModifiedRpsTicket_RemoveFromEnd()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].ToString().Remove(httpHeaders["Cookie"].ToString().Length - 7, 7);
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when characters are added at the start of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Add characters at the start of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_ModifiedRpsTicket_AddToStart()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].ToString().Insert(11, "w");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when characters are removed from the middle of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Remove characters from the middle of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_ModifiedRpsTicket_RemoveFromMiddle()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].ToString().Remove(30, 1);
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when characters are added in the middle of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Add characters in the middle of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_ModifiedRpsTicket_AddInMiddle()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].ToString().Insert(25, "4");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API there is space in the middle of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Space in the middle of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SpaceInMiddleOfRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].ToString().Insert(40, " ");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when changing case of a letter in the RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Changing case of a letter in the RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_ChangeCaseOfRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            string cookieValue = httpHeaders["Cookie"];
            ChangeCaseOfRpsTicket(ref cookieValue);
            httpHeaders["Cookie"] = cookieValue;
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when RPS ticket is empty
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing empty string for 'Cookie' header in http request")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_EmptyRpsTicket()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            httpHeaders.Add("Cookie", "");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing space for RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SpaceForRpsTicket()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            httpHeaders.Add("Cookie", "  ");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when there is no cookie header in request
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No 'Cookie' header in http request")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NoCookieHeaderInRequest()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when RPS ticket sent to WebSTS is invalid
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidRpsTicket()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            httpHeaders.Add("Cookie", "RPSSecAuth=fvdsfhuuuuuuuuuewdfwqe892we289yedudhyugdsdeewdwedcdsdsfdscdscd90d9wdjnbsjcbsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdcdddchdvbdgyedgshbcsdcfddddddddddddddddddddddddddddddddddddddddddddddddddddddddddcvasdgf5rt54t65467958tygruhfrufh45746y5r74hrf4euyfhr437ry7ry478rfh7fy47r489r475r435rt5t5t5gf5rggggggggggggggggfdgfdg444444444443145454rrgtrg5t454rfffffffrgthyjhfughufvrgioruvrfrrfvfgtgrerererrrrrrrrgttyhuykikjngbgb");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when RPSAuth ticket is sent instead of RPSSecAuth in the request
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing RPSAuth ticket in http request instead of RPSSecAuth")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SendRpsAuthTicket()
        {
            string cookieName = "RPSAuth";
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, cookieName);
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when RPSAuth ticket is sent with RPSSecAuth cookie name in the request
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing RPSAuth ticket in http request with RPSSecAuth cookie name")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_SendRpsAuthValueWithRpsSecAuthCookieName()
        {
            string cookieName = "RPSAuth";
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, cookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Replace(cookieName, "RPSSecAuth");
            GetPartnerTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with an incorrect uri syntax in the request
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing audience uri with incorrect syntax")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidSyntaxAudienceUri()
        {
            string audienceUri = "gfytuiyj7y70uhcxsajhsasuhsus";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when omitting colon after schemename in audience uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Omit colon after scheme name in audience uri")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidSyntaxAudienceUri_OmitColon()
        {
            string audienceUri = "http//www.hotmail.com";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when omitting slash after schemename in audience uri
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Omit slash after scheme name in audience uri")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidSyntaxAudienceUri_OmitSlash()
        {
            string audienceUri = "http:/www.hotmail.com";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing an audience uri with an invalid
        /// syntax in hostname
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with invalid syntax in hostname")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidSyntaxAudienceUri_InvalidHostname()
        {
            string audienceUri = "http://www;hotmail.com";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing an audience uri with two port numbers
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with two port numbers")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidSyntaxAudienceUri_TwoPorts()
        {
            string audienceUri = "http://www.hotmail.com:80:90";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when passing an audience uri with an invalid
        /// syntax in path
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with invalid syntax in path")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_InvalidSyntaxAudienceUri_BackSlashInPath()
        {
            string audienceUri = "http://en.wikipedia.org\\wiki\\Uniform_Resource_Identifier";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass an audience uri 
        /// with no scheme name
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing audience uri with no scheme name")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_NoSchemeNameInAudienceUri()
        {
            string audienceUri = "www.hotmail.com";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetPartnerTokenXml API when you pass relative path for audience uri 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing audience uri with relative path")]
        [TestProperty("Type", "Feature")]
        public void N_GetPartnerTokensXml_RelativeAudienceUri()
        {
            string audienceUri = "//wikipedia.org/wiki/Uniform_Resource_Identifier";
            GetPartnerTokenApi_AudienceUri_Tests(audienceUri, HttpStatusCode.BadRequest);
        }

        #endregion

        #region Helper Methods

        /// <summary>
        /// Takes the modified title id as parameter and passes that to GetSamlTokenXml()  to get the token
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetPartnerTokenApi_TitleId_Tests(string titleId, HttpStatusCode httpStatus)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetPartnerTokensUrlFormat, titleId, CurrentEnvironmentSettings.Titles[0].Version,
                                                                                AudienceUri, null, TokenType.PartnerToken, WebStsService.RpsCookieName);
                if (httpStatus.ToString().Equals("OK"))
                    // verify the audience uri in the saml token
                    VerifyAudienceUri(response, AudienceUri);
                else
                    //verify that the partner token is null
                    Assert.AreEqual<string>(null, response.PartnerToken, "Error: Partner token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        /// <summary>
        /// Takes the modified title version as parameter and passes that to GetSamlTokenXml()  to get the token
        /// </summary>
        /// <param name="titleVersion"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetPartnerTokenApi_TitleVersion_Tests(string titleVersion, HttpStatusCode httpStatus)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetPartnerTokensUrlFormat, CurrentEnvironmentSettings.Titles[0].Id, titleVersion,
                                                                                AudienceUri, null, TokenType.PartnerToken, WebStsService.RpsCookieName);
                if (httpStatus.ToString().Equals("OK"))
                    // verify the audience uri in the saml token
                    VerifyAudienceUri(response, AudienceUri);
                else
                    // verify that partner token is null
                    Assert.AreEqual<string>(null, response.PartnerToken, "Error: Partner token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        /// <summary>
        /// Takes the modified audience uri as parameter and passes that to GetSamlTokenXml()  to get the token
        /// </summary>
        /// <param name="audienceUri"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetPartnerTokenApi_AudienceUri_Tests(string audienceUri, HttpStatusCode httpStatus)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetPartnerTokensUrlFormat, CurrentEnvironmentSettings.Titles[0].Id, CurrentEnvironmentSettings.Titles[0].Version,
                                                                                audienceUri, null, TokenType.PartnerToken, WebStsService.RpsCookieName);
                if (httpStatus.ToString().Equals("OK"))
                    // verify the audience uri in the saml token
                    VerifyAudienceUri(response, audienceUri);
                else
                    // verify that the partner token is null
                    Assert.AreEqual<string>(null, response.PartnerToken, "Error: Partner token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        /// <summary>
        /// Takes the modified httpHeaders as parameter and passes that to GetSamlTokenXml()  to get the token
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetPartnerTokenApi_HttpHeaders_Tests(Dictionary<string, string> httpHeaders, HttpStatusCode httpStatus)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetPartnerTokensUrlFormat, CurrentEnvironmentSettings.Titles[0].Id,
                                                                                CurrentEnvironmentSettings.Titles[0].Version, AudienceUri, httpHeaders, TokenType.PartnerToken, null);
                if (httpStatus.ToString().Equals("OK"))
                    // verify the audience uri in the saml token
                    VerifyAudienceUri(response, AudienceUri);
                else
                    // verify that the partner token is null
                    Assert.AreEqual<string>(null, response.PartnerToken, "Error: Partner token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        /// <summary>
        /// Takes the modified format url as parameter and passes that to GetSamlTokenXml()  to get the token
        /// </summary>
        /// <param name="formatUrl"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetPartnerTokenApi_FormatUrl_Tests(string formatUrl, HttpStatusCode httpStatus)
        {
            GetPartnerTokenApi_FormatUrl_Tests(formatUrl, httpStatus, false, false);
        }

        /// <summary>
        /// Takes the modified format url as parameter and passes that to GetSamlTokenXml()  to get the token
        /// </summary>
        /// <param name="formatUrl"></param>
        /// <param name="httpStatus"></param>
        /// <param name="noTitleVersionInUrl"></param>
        /// <param name="noAudienceUriInUrl"></param>
        /// <returns></returns>
        private void GetPartnerTokenApi_FormatUrl_Tests(string formatUrl, HttpStatusCode httpStatus, bool noTitleVersionInUrl, bool noAudienceUriInUrl)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(formatUrl, CurrentEnvironmentSettings.Titles[0].Id, CurrentEnvironmentSettings.Titles[0].Version,
                                                                                AudienceUri, null, TokenType.PartnerToken, WebStsService.RpsCookieName);
                if (httpStatus.ToString().Equals("OK"))
                {
                    // verify the audience uri in the saml token
                    if(noAudienceUriInUrl)
                        VerifyAudienceUri(response, null);
                    else
                        VerifyAudienceUri(response, AudienceUri);

                    if (noTitleVersionInUrl)
                        VerifyTitleVersion(response, null, TokenType.PartnerToken);
                }
                else
                    // verify that the partner token is null
                    Assert.AreEqual<string>(null, response.PartnerToken, "Error: Partner token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Contoso Bookmark Page\Default.aspx.cs ===
// AntiXssLibrary V1.5 Tutorial - Contoso Bookmark Page
//
// IMPORTANT: This tutorial should never be used in production environments!
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;
using Microsoft.Security.Application;   // Directive for the Anti-Cross Site Scripting Library
using System.Text.RegularExpressions;

public partial class _Default : System.Web.UI.Page 
{
    protected String HR_TAG = "<hr width=600/>";
    protected String BR_TAG = "<br />";
    static protected String BOOKMARK_DIRECTORY = @"~/App_Data/";
    static protected String BOOKMARK_FILE = HttpContext.Current.Server.MapPath(BOOKMARK_DIRECTORY+"bookmarks.txt");
    protected String DELIMITER = "::::";
    protected String LoadingMessage = "Loading ...";
    protected String BOLD_TAG_START = "<b>";
    protected String BOLD_TAG_END = "</b>";
    protected String TABLE_ROW_START = "<tr>";
    protected String TABLE_ROW_END = "</tr>";
    protected String TABLE_DIV_START = "<td width=200>";
    protected String TABLE_DIV_END = "</td>";
    protected String TABLE_START = "<table>";
    protected String TABLE_END = "</table>";
    protected String URL_REGEX = @"^(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+=&amp;%\$#_]*)?$";

    protected void Page_Load(object sender, EventArgs e)
    {
        // Load bookmarks
        LoadBookmarks();
    }


    protected void LoadBookmarks()
    {
        LiteralBookmarks.Text = LoadingMessage;

        // Open the bookmarks file, it's a simple flat file in the following format:
        // 
        //      <Bookmark Title>::::<Description>::::<Bookmark Link>
        bool AtLeastOneEntry = false;
        if (File.Exists(BOOKMARK_FILE))
        {
            LiteralBookmarks.Text = TABLE_START;        // Start Table
            LiteralBookmarks.Text += TABLE_ROW_START + TABLE_DIV_START + BOLD_TAG_START + "Contributed By" + BOLD_TAG_END + TABLE_DIV_END +
                TABLE_DIV_START + BOLD_TAG_START + "Link" + BOLD_TAG_END + TABLE_DIV_END + TABLE_ROW_END;

            using (StreamReader sr = new StreamReader(BOOKMARK_FILE))
            {
                String line;
                // Read and display lines from the file until the end of 
                // the file is reached.
                while ((line = sr.ReadLine()) != null)
                {
                    // Add new bookmark table row
                    AtLeastOneEntry = true;
                    LiteralBookmarks.Text = LiteralBookmarks.Text + ParseEntry(line);
                }
            }

            LiteralBookmarks.Text += TABLE_END;        // Start Table
        }

        // If LiteralBookmarks.Text wasn't changed, then there weren't any entries
        if (!AtLeastOneEntry)
        {
            LiteralBookmarks.Text = BOLD_TAG_START + "No bookmarks yet ... :(" + BOLD_TAG_END;
        }
        
        // Format the bookmarks
        LiteralBookmarks.Text = HR_TAG + LiteralBookmarks.Text + BR_TAG + HR_TAG;
    }

    protected String ParseEntry(String Entry)
    {
        // Input validation
        if (String.IsNullOrEmpty(Entry))
        {
            return(String.Empty);     // Do nothing and return
        }

        // Tokenize the entry and split it
        // Also encode all tokens with the proper context encoding to avoid nasty XSS bugs!
        String[] StringSeparators = new String[] {DELIMITER};
        String[] Tokens = Entry.Split(StringSeparators, StringSplitOptions.None);
        String Name = AntiXss.HtmlEncode(Tokens[0]);
        String Description = AntiXss.HtmlEncode(Tokens[1]);
        String Bookmark = Tokens[2];

        // Remember we can't used URLEncode since this is used when un-trusted data is used inside a URL
        // context such as a value in a querystring so we resort to input validation.
        if (!Regex.IsMatch(Bookmark, URL_REGEX))
        {
            Bookmark = "INVALID URL";
        }

        // Create the table row entry
        String TableRow = TABLE_ROW_START;
        TableRow += "<td>" + Name + "</td>";
        TableRow += "<td><a href=" + Bookmark + ">"+Description+"</a></td>";
        TableRow += TABLE_ROW_END;

        return (TableRow);
    }

    protected void Button1_Click(object sender, EventArgs e)
    {
        // Get the Name and Bookmarks to add
        String NameStr = Name.Text.Trim();
        String DescriptionStr = Description.Text.Trim();
        String BookmarkStr = Bookmark.Text.Trim();

        // Create the entry to add
        String Entry = NameStr + DELIMITER + DescriptionStr + DELIMITER + BookmarkStr;

        // Input validation: if any of the 

        // Add the bookmark
        AddBookMark(Entry);

        // Thank the user
        Response.Redirect("ThankYou.aspx?Name=" + NameStr);
    }


    private void AddBookMark(String Entry)
    {
        // Input validation
        if ( String.IsNullOrEmpty(Entry) ) 
        {
            return;     // Do nothing since the entry was empty
        }

        // If file doesn't exist, create it.
        if (!File.Exists(BOOKMARK_FILE))
        {
            
            // Create file
            StreamWriter cw = File.CreateText(BOOKMARK_FILE);
            cw.Close();
        }

        // Look for duplicate entries
        bool DuplicateExists = false;
        using (StreamReader sr = new StreamReader(BOOKMARK_FILE))
        {
            String line;
            // Read and display lines from the file until the end of 
            // the file is reached.
            while ((line = sr.ReadLine()) != null)
            {
                if (line.Equals(Entry))
                {
                    DuplicateExists = true;
                    break;
                }
            }
            sr.Close();
        }
        
        // If no duplicate entries, then add the entry
        if (!DuplicateExists)
        {
            StreamWriter sw = File.AppendText(BOOKMARK_FILE);
            sw.WriteLine(Entry);
            sw.Close();
        }
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        // Check if file exists, if it does then delete it.
        if (File.Exists(BOOKMARK_FILE))
        {
            File.Delete(BOOKMARK_FILE);

            // Reload the bookmarks file
            LoadBookmarks();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\HtmlEncode_Example1.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class HtmlEncode : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        Literal1.Text = "Hello " + TextBox1.Text + "!  Welcome to the examples!";
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        Literal1.Text = "Hello " + Microsoft.Security.Application.AntiXss.HtmlEncode(TextBox1.Text) + "! Welcome to the examples!";
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\HtmlAttributeEncode_Example1.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class HtmlAttributeEncode_Example1 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }

    protected void TextBox1_TextChanged(object sender, EventArgs e)
    {

    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        Literal1.Text = "<hr noshade size="+TextBox1.Text+">";
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        Literal1.Text = "<hr noshade size="+Microsoft.Security.Application.AntiXss.HtmlAttributeEncode(TextBox1.Text)+">";
    }
    protected void TextBox1_TextChanged1(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\Default.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class _Default : System.Web.UI.Page 
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Contoso Bookmark Page\ThankYou.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Security.Application;

public partial class ThankYou : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        // Get the query string parameter 'Name', if it wasn't specified don't write anything
        String Name = AntiXss.HtmlEncode(Request.QueryString["Name"]);
        if ((Name != null) && (Name.Length != 0))
        {
            
            LiteralThankYou.Text = "Thank you " + Name + " for your submission!";
            LiteralThankYou.Text += "<br><br>";
            LiteralThankYou.Text += "<a href=Default.aspx>Click here to return to the bookmark page</a>";
        }
        else
        {
            // No Name parameter was specified so redirect back to the main page
            Response.Redirect("Default.aspx");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\WebSTS.Test\Tests\GetUserTokenXml.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using WebSTS.Test.Common;
using LiveN.Test.Common.Web;
using LiveN.Test.Framework.Configuration;

namespace WebSTS.Test.Tests
{
    /// <summary>
    /// Summary description for UnitTest1
    /// </summary>
    [TestClass]
    public class GetUserTokensXml : TestAreaBase
    {
        #region BVT
        /// <summary>
        /// Test GetUserTokenXml API BVT
        /// </summary>
        [TestMethod]
        public void BVT_GetUserTokensXml()
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetUserTokensUrlFormat, CurrentEnvironmentSettings.Titles[0].Id,
                                                    CurrentEnvironmentSettings.Titles[0].Version, null, null, TokenType.UserToken, WebStsService.RpsCookieName);
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.OK, e.Response.Status);
            }
        }

        #endregion

        #region Positive tests

        /// <summary>
        /// Test GetUserTokenXml API when there is space after title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding space after title id")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceAfterTitleId()
        {
            string titleId = CurrentEnvironmentSettings.Titles[0].Id + "       ";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space before title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Adding space before title id")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceBeforeTitleId()
        {
            string titleId = " " + CurrentEnvironmentSettings.Titles[0].Id;
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space after title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding space after title version")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceAfterTitleVersion()
        {
            string titleVersion = CurrentEnvironmentSettings.Titles[0].Version + "  ";
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space before title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Adding space before title version")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceBeforeTitleVersion()
        {
            string titleVersion = "   " + CurrentEnvironmentSettings.Titles[0].Version;
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is a zero before the title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding zero before title id")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_ZeroBeforeTitleId()
        {
            string titleId = "0" + CurrentEnvironmentSettings.Titles[0].Id;
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is a zero before the title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding zero before title version")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_ZeroBeforeTitleVersion()
        {
            string titleVersion = "000" + CurrentEnvironmentSettings.Titles[0].Version;
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API with max value for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing max value for title Version")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_MaxValueTitleVersion()
        {
            string titleVersion = UInt16.MaxValue.ToString();
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API with min value for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing min value for title Version")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_MinValueTitleVersion()
        {
            string titleVersion = UInt16.MinValue.ToString();
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is no title version in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title version in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_NoTitleVersionInUrl()
        {
            string formatUrl = "/usertoken?gameId={gameId}";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK, true);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there are multiple valid game ids in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Multiple game ids in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_MultipleValidGameIdsInUrl()
        {
            string formatUrl = "/usertoken?gameId=gameId0&gameId=gameId1&gameId=gameId2&gameId=gameId3&gameId=gameId4&gameVersion={gameVersion}";
            string[] gameIds = { "1297287391", "1297287392", "1297287394", "1297287395", "1297287400" };
            formatUrl = this.sts.FormatMultipleGameIdsUrl(formatUrl, gameIds);
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space after the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Space after request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceAfterUrl()
        {
            string formatUrl = "/usertoken?gameId={gameId}&gameVersion={gameVersion}        ";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Space in request url")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceInUrl()
        {
            string formatUrl = "/usertoken?gameId={gameId}  &gameVersion={gameVersion}";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space before RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Space before RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceBeforeRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Insert(11, "    ");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.OK);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space after RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Space after RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void P_GetUserTokensXml_SpaceAfterRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Insert(httpHeaders["Cookie"].Length, "  ");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.OK);
        }

        #endregion

        #region Negative Tests
        /// <summary>
        /// Test GetUserTokenXml API with Live App's title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing Live App's title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_LiveAppTitleId()
        {
            string titleId = "1297287404";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Test GetUserTokenXml API with banned username/password
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing banned username/password")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_BannedUser()
        {
            if (CurrentEnvironmentSettings.SelectedEnvironmentName == "Dev")
            {
                Dictionary<string, string> httpHeaders = GetHttpHeadersForBannedUser();
                GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.Unauthorized);
            }
            
        }

        /// <summary>
        /// Test GetUserTokenXml API when title id is null
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_NullTitleId()
        {
            string titleId = null;
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title version is null
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing null title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_NullTitleVersion()
        {
            string titleVersion = null;
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API with zero for title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing zero for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_ZeroForTitleId()
        {
            string titleId = "0";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when you pass space for title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SpaceForTitleId()
        {
            string titleId = "  ";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when you pass space for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SpaceForTitleVersion()
        {
            string titleVersion = "   ";
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title id is negative
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing negative title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_NegativeTitleId()
        {
            string titleId = "-" + CurrentEnvironmentSettings.Titles[0].Id;
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title version is negative
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing negative title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_NegativeTitleVersion()
        {
            string titleVersion = "-" + CurrentEnvironmentSettings.Titles[0].Version;
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title id is a decimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing decimal value for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_DecimalTitleId()
        {
            string titleId = CurrentEnvironmentSettings.Titles[0].Id + ".00";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title version is a decimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing decimal value for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_DecimalTitleVersion()
        {
            string titleVersion = CurrentEnvironmentSettings.Titles[0].Version + ".0000000";
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title id is a hexadecimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_HexTitleId()
        {
            string titleId = "0x15ABCD";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title version is a hexadecimal value
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing hexadecimal value for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_HexTitleVersion()
        {
            string titleVersion = "0x1";
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title id is a string containing alphabets
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing alpha characters for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_AlphaTitleId()
        {
            string titleId = "dfdhgjhjdafsadas";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title version is a string containing alphabets
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing alpha characters for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_AlphaTitleVersion()
        {
            string titleVersion = "s";
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API with greater than max value for title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing greater than max value for title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_GreaterThanMaxTitleId()
        {
            ulong longTitleId = UInt32.MaxValue + 20000000000;
            string titleId = longTitleId.ToString();
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API with greater than max value for title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing greater than max value for title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_GreaterThanMaxTitleVersion()
        {
            uint intTitleVersion = UInt16.MaxValue + 1; 
            string titleVersion = intTitleVersion.ToString();
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API with large title id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing a large title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_LargeTitleId()
        {
            string titleId = "24875845750932743985789034545555555555543333333333333355555555555555555555558888888888888888888881111111111111000048567856565878964756478999999999999999999999997666666666666666666667876786548574895701984000033333333333333333999999999999991111111111111878454785684957389758900000000000000000000000000000000000000000000322222222222222222222228900754876486456746574657456666666666666666666666666666666666666666666646565767" +
                                "97777777777777777777754444444444444444444448777777777777777777777777772333333339999999999991111111111000000000000000004444444444448888888888888888888822222222222222229854758576490578034957867856758745879867586748570945784975867485748357489675876845748578475867586745748574857878999999945555555555555555537897485748574857857558457485748484848484848484848484848484848484857485748574444444444444444444447543945798457489" +
                                "76598783496378564578456892346786578684563879463785656565656565656565656565656567454556748567834567834567435454665767878998979878678678879844562444444444444444444444444655555555555657688798977756756766666666666666666666666666666666666666666666333657687878798908564563453454656788796477856754767687989867546444444444444444445657687777777777778796765655555555555555555555555555655555555555555555555555555555555555555" +
                                "58777777777777799999344444444444444444444444444444444444444444444444444444444444444444444444444444444444447899999999999999999999999999999999999999999999999999999999999999999999995444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444448999999999999999999999999999999999999999990898989898989898989898989898989898989555555555555555555555" +
                                "693580000000000000000000000000000";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API with large title version
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing a large title Version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_LargeTitleVersion()
        {
            string titleVersion = "3478896546576856666666663254667709896787845728357867672364350999999999237544444444444444444444478967617644444444444447777777777777777777717364444444444444444444444876578444444444444489999999999999999999999977777777777777777646786217645674586789576865811111111111111111111111111111119555555555555555558888888888888885555555555555555899999999999999999999222222254444444444444444444444444444444444444466666666666666666666" +
                                    "97777777777777777777754444444444444444444448777777777777777777777777772333333339999999999991111111111000000000000000004444444444448888888888888888888822222222222222229854758576490578034957867856758745879867586748570945784975867485748357489675876845748578475867586745748574857878999999945555555555555555537897485748574857857558457485748484848484848484848484848484848484857485748574444444444444444444447543945798457489" +
                                    "76598783496378564578456892346786578684563879463785656565656565656565656565656567454556748567834567834567435454665767878998979878678678879844562444444444444444444444444655555555555657688798977756756766666666666666666666666666666666666666666666333657687878798908564563453454656788796477856754767687989867546444444444444444445657687777777777778796765655555555555555555555555555655555555555555555555555555555555555555" +
                                    "58777777777777799999344444444444444444444444444444444444444444444444444444444444444444444444444444444444447899999999999999999999999999999999999999999999999999999999999999999999995444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444448999999999999999999999999999999999999999990898989898989898989898989898989898989555555555555555555555" +
                                    "693580000000000000000000000000000";
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title id has unicode characters
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Unicode characters in title id")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_UnicodeTitleId()
        {
            string titleId = "\u0641\u0648\u279e\u04fa";
            GetUserTokenApi_TitleId_Tests(titleId, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when title version has unicode characters
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Unicode characters in title version")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_UnicodeTitleVersion()
        {
            string titleVersion = "\u04e3";
            GetUserTokenApi_TitleVersion_Tests(titleVersion, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is no title id in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title id in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_NoTitleIdInUrl()
        {
            string formatUrl = "/usertoken?gameVersion={gameVersion}";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is no title id and title version in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No title id and title version in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_NoTitleIdTitleVersionInUrl()
        {
            string formatUrl = "/usertoken";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is invalid string in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Invalid string in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_InvalidStringInUrl()
        {
            string formatUrl = "/usertoken?hjgdcfedtfewy87";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is large invalid string in the url
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Large Invalid string in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_LargeInvalidStringInUrl()
        {
            string formatUrl = "hdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfgdjhwdwerrrrrrrrrrewfefffffffffffffffffssSSSSSSSSSSSSSSCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCSSSSSSSSSSSSSSFDFERFERFGRBFJHGGFSDJHBDHBFVHDGBRJHFBDHJDBFHFJGJHDBDHCBDHFBDHFGEJHDFGDHFGDJHFGDHFDFDFDFDFDFBGGHGDFDFGFGFGRGRGJKJJHDFHJDFFFEFERFHUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUYFDREFREFFGFDGDHGYFUETFEYGDYFGETFGEYRFIUYTR6RYFTFIIJVDFKVNKVHUFHUFGVFMNDUYEUHDDFH";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.BadRequest);
        }


        /// <summary>
        /// Test GetUserTokenXml API when format url is empty
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Empty format url")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_EmptyFormatUrl()
        {
            string formatUrl = "";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.NotFound);
        }

        /// <summary>
        /// Test GetUserTokenXml API when format url consists of spaces
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Passing space for format url")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SpaceForFormatUrl()
        {
            string formatUrl = "   ";
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.NotFound);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there are multiple valid game ids in the url, with one invalid game id
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("One invalid game id in request url")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SingleInvalidGameIdInUrl()
        {
            string formatUrl = "/usertoken?gameId=gameId0&gameId=gameId1&gameId=gameId2&gameId=gameId3&gameId=gameId4&gameVersion={gameVersion}";
            string[] gameIds = { "asdsfg", "1297287392", "1297287394", "1297287395", "1297287400" };
            formatUrl = this.sts.FormatMultipleGameIdsUrl(formatUrl, gameIds);
            GetUserTokenApi_FormatUrl_Tests(formatUrl, HttpStatusCode.BadRequest);
        }

        /// <summary>
        /// Test GetUserTokenXml API when the character are added to the end of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Adding character at end of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_ModifiedRpsTicket_AddAtEnd()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Insert(httpHeaders["Cookie"].Length, "abcghfgbhfdzgbfdgrgewFRGTHBGTHBGVBFDGGHFDGSDFGFBHGJSFERE4RT5R6Y5Y7THFGGTF345R4TYTJHFDGAERT4565T5TERTGRY54645TRGTGFHTYH");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when the character are removed from start of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Remove characters from start of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_ModifiedRpsTicket_RemoveFromStart()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Remove(11, 1);
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when the character are added in the middle of the RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Adding character in the middle of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_ModifiedRpsTicket_AddInMiddle()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Insert(30, "f");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when the character are removed from middle of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Remove characters from middle of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_ModifiedRpsTicket_RemoveFromMiddle()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Remove(35, 1);
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is space in the middle of RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(2)]
        [Description("Space in middle of RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SpaceInMiddleOfRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Insert(httpHeaders["Cookie"].Length - 2, "                                                                            ");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when changing case of a letter in the RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Changing case of a letter in RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_ChangeCaseOfRpsTicket()
        {
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, WebStsService.RpsCookieName);
            string cookieValue = httpHeaders["Cookie"];
            ChangeCaseOfRpsTicket(ref cookieValue);
            httpHeaders["Cookie"] = cookieValue;
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when RPS ticket is empty
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing empty string for 'Cookie' header in http request")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_EmptyRpsTicket()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            httpHeaders.Add("Cookie", "");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when passing space for RPS ticket
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing space for RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SpaceForRpsTicket()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            httpHeaders.Add("Cookie", "     ");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when there is no cookie header in request
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("No 'Cookie' header in http request")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_NoCookieHeaderInRequest()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when RPS ticket sent to WebSTS is invalid
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing invalid RPS ticket")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_InvalidRpsTicket()
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            httpHeaders.Add("Cookie", "RPSSecAuth=utdwe7t621343dewyudyeuirdyheury37373737373737373737efedsfcjhbzmncbedshshshshshshshshshshshshshshshshshshf3786r78edfydchxd7888888888dfsdfuerh3u223h3eujdhueghduyfgedyfg327e83ey378wduhsudhei7u238e237e637yghsudhsaidhg37ety237e63wsssssdds7yf7386e27287yushduwy77777777777wewqjheucuwdw");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        /// <summary>
        /// Test GetUserTokenXml API when RPSAuth ticket is sent instead of RPSSecAuth in the request
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing RPSAuth ticket in http request instead of RPSSecAuth")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SendRpsAuthTicket()
        {
            string cookieName = "RPSAuth";
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, cookieName);
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.Unauthorized);
        }

        /// <summary>
        /// Test GetUserTokenXml API when RPSAuth ticket is sent with RPSSecAuth cookie name in the request
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1)]
        [Description("Passing RPSAuth ticket in http request with RPSSecAuth cookie name")]
        [TestProperty("Type", "Feature")]
        public void N_GetUserTokensXml_SendRpsAuthValueWithRpsSecAuthCookieName()
        {
            string cookieName = "RPSAuth";
            Dictionary<string, string> httpHeaders = this.sts.GetHttpHeaders(null, cookieName);
            httpHeaders["Cookie"] = httpHeaders["Cookie"].Replace(cookieName, "RPSSecAuth");
            GetUserTokenApi_HttpHeaders_Tests(httpHeaders, HttpStatusCode.InternalServerError);
        }

        #endregion

        #region Helper Methods

        /// <summary>
        /// Takes the modified title id as parameter and passes that to GetSamlTokenXml() to get the token
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetUserTokenApi_TitleId_Tests(string titleId, HttpStatusCode httpStatus)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = sts.GetSamlTokensXml(WebStsService.GetUserTokensUrlFormat, titleId, CurrentEnvironmentSettings.Titles[0].Version,
                                                                            null, null, TokenType.UserToken, WebStsService.RpsCookieName);

                // verify that the user token is null
                if (!httpStatus.ToString().Equals("OK"))
                    Assert.AreEqual<string>(null, response.UserToken, "Error: User token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        /// <summary>
        /// Takes the modified title version as parameter and passes that to GetSamlTokenXml() to get the token
        /// </summary>
        /// <param name="titleVersion"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetUserTokenApi_TitleVersion_Tests(string titleVersion, HttpStatusCode httpStatus)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetUserTokensUrlFormat, CurrentEnvironmentSettings.Titles[0].Id, titleVersion,
                                                                                null, null, TokenType.UserToken, WebStsService.RpsCookieName);

                // verify that the user token is null
                if (!httpStatus.ToString().Equals("OK"))
                    Assert.AreEqual<string>(null, response.UserToken, "Error: User token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        /// <summary>
        /// Takes the modified httpHeaders as parameter and passes that to GetSamlTokenXml() to get the token
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetUserTokenApi_HttpHeaders_Tests(Dictionary<string, string> httpHeaders, HttpStatusCode httpStatus)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(WebStsService.GetUserTokensUrlFormat, CurrentEnvironmentSettings.Titles[0].Id, CurrentEnvironmentSettings.Titles[0].Version,
                                                                                null, httpHeaders, TokenType.UserToken, null);

                // verify that the user token is null
                if (!httpStatus.ToString().Equals("OK"))
                    Assert.AreEqual<string>(null, response.UserToken, "Error: User token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        /// <summary>
        /// Takes the modified format url as parameter and passes that to GetSamlTokenXml() to get the token
        /// </summary>
        /// <param name="formatUrl"></param>
        /// <param name="httpStatus"></param>
        /// <returns></returns>
        private void GetUserTokenApi_FormatUrl_Tests(string formatUrl, HttpStatusCode httpStatus)
        {
            GetUserTokenApi_FormatUrl_Tests(formatUrl, httpStatus, false);
        }

        /// <summary>
        /// Takes the modified format url as parameter and passes that to GetSamlTokenXml() to get the token
        /// </summary>
        /// <param name="formatUrl"></param>
        /// <param name="httpStatus"></param>
        /// <param name="noTitleVersionInUrl"></param>
        /// <returns></returns>
        private void GetUserTokenApi_FormatUrl_Tests(string formatUrl, HttpStatusCode httpStatus, bool noTitleVersionInUrl)
        {
            try
            {
                //TODO: add more tracing to WebSTSService class
                SecurityTokensResponse response = this.sts.GetSamlTokensXml(formatUrl, CurrentEnvironmentSettings.Titles[0].Id, CurrentEnvironmentSettings.Titles[0].Version,
                                                                                null, null, TokenType.UserToken, WebStsService.RpsCookieName);

                if (noTitleVersionInUrl)
                {
                    VerifyTitleVersion(response, null, TokenType.UserToken);
                }

                // verify that the user token is null
                if (!httpStatus.ToString().Equals("OK"))
                    Assert.AreEqual<string>(null, response.UserToken, "Error: User token is not null");

                //TODO: do validation of the SAML token
            }
            catch (WebException e)
            {
                Assert.AreEqual(WebExceptionStatus.Success, e.Status);
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(httpStatus, e.Response.Status);
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\HtmlEncode_Example3.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class HtmlEncode_Example3 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        LinkButton1.Text = "Click here " + TextBox1.Text + "!";
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        LinkButton1.Text = "Click here " + Microsoft.Security.Application.AntiXss.HtmlEncode(TextBox1.Text) + "!";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\UrlEncode_Example1.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class UrlEncode_Example1 : System.Web.UI.Page
{


    protected void Page_Load(object sender, EventArgs e)
    {
        
    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        String SearchUrl = "http://search.msn.com/results.aspx?q=";
        Literal1.Text = "<a href=\"" + SearchUrl + TextBox1.Text + "\">Example Link</a>";
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        String SearchUrl = "http://search.msn.com/results.aspx?q=";
        Literal1.Text = "<a href=\"" + SearchUrl + Microsoft.Security.Application.AntiXss.UrlEncode(TextBox1.Text) + "\">Example Link</a>";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\VisualBasicScriptEncode_Example1.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Text;

public partial class VisualBasicScriptEncode_Example1 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        Literal1.Text = "dim listBoxItems(0)\n";
    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        StringBuilder Str = new StringBuilder();
        StringArrayConverter StrArrayConv = new StringArrayConverter();
        string[] ItemsArray = (string[])StrArrayConv.ConvertFrom(TextBox1.Text);    
        Str.Append("dim listboxItems(" + ItemsArray.Length + ")\n");
        for (int i = 0; i < ItemsArray.Length; i++)
        {
            Str.Append("listboxItems(" + i + ") = \"" + ItemsArray[i] + "\"\n\n");
        }

        Literal1.Text = Str.ToString();
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        StringBuilder Str = new StringBuilder();
        StringArrayConverter StrArrayConv = new StringArrayConverter();
        string[] ItemsArray = (string[])StrArrayConv.ConvertFrom(TextBox1.Text);
        Str.Append("dim listboxItems(" + ItemsArray.Length + ")\n");
        for (int i = 0; i < ItemsArray.Length; i++)
        {
            Str.Append("listboxItems(" + i + ") = " + Microsoft.Security.Application.AntiXss.VisualBasicScriptEncode(ItemsArray[i]) + "\n\n");
        }

        Literal1.Text = Str.ToString();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\HtmlEncode_Example2.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class HtmlEncode_Example2 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\XmlAttributeEncode_Example1.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class XmlAttributeEncode_Example1 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        // Create XML template
        string Xml =    
            "<xml id=\"data\">\n<data>\n" +
            "<item name=\"Item1\" value=\"{0}\">\n" +
            "</data>\n</xml>\n";

        // Fill template with data provided by user
        Literal1.Text = String.Format(Xml, TextBox1.Text);
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        // Create XML template
        string Xml =
            "<xml id=\"data\">\n<data>\n" +
            "<item name=\"Item1\" value=\"{0}\">\n" +
            "</data>\n</xml>\n";

        // Fill template with data provided by user
        Literal1.Text = String.Format(Xml, Microsoft.Security.Application.AntiXss.XmlAttributeEncode(TextBox1.Text));
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\XmlEncode_Example1.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class XmlEncode_Example1 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }

    protected void Button1_Click(object sender, EventArgs e)
    {
        // Create XML template
        String Xml = "<xml id=\"data\">\n<data>\n<name>{0}</name>\n" +
            "<company>{1}</company>\n<email>{2}</email>\n" +
            "</data>\n</xml>\n";

        // Fill template with data provided by user
        Literal1.Text = String.Format(Xml, new string[] {
            TextBox1.Text,TextBox2.Text,TextBox3.Text});
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        // Create XML template
        String Xml = "<xml id=\"data\">\n<data>\n<name>{0}</name>\n" +
            "<company>{1}</company>\n<email>{2}</email>\n" +
            "</data>\n</xml>\n";

        // Fill template with data provided by user
        Literal1.Text = String.Format(Xml, new string[] {
            Microsoft.Security.Application.AntiXss.XmlEncode(TextBox1.Text),
            Microsoft.Security.Application.AntiXss.XmlEncode(TextBox2.Text),
            Microsoft.Security.Application.AntiXss.XmlEncode(TextBox3.Text)
        });
    }
    protected void TextBox2_TextChanged(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\antixss\1.5\Samples\Sample Application\JavaScriptEncode_Example1.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Text;

public partial class JavaScriptEncode_Example1 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
    protected void Button1_Click(object sender, EventArgs e)
    {

        StringBuilder Str = new StringBuilder();
        Str.Append("<script type=\"text/javascript\">\n");
        StringArrayConverter StrArrayConv = new StringArrayConverter();
        string[] ItemsArray = (string[])StrArrayConv.ConvertFrom(TextBox1.Text);
        foreach (string item in ItemsArray)
        {
            Str.Append("listboxItems.push('" + item + "');\n");
        }
        
        Str.Append("FillListBox();\n");
        Str.Append("</script>");

        Literal1.Text = Str.ToString();
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        StringBuilder Str = new StringBuilder();
        Str.Append("<script type=\"text/javascript\">\n");
        StringArrayConverter StrArrayConv = new StringArrayConverter();
        string[] ItemsArray = (string[])StrArrayConv.ConvertFrom(TextBox1.Text);
        foreach (string item in ItemsArray)
        {
            // Note that JavaScriptEncode adds the starting and end ' so we don't need to include them in the code
            Str.Append("listboxItems.push(" + Microsoft.Security.Application.AntiXss.JavaScriptEncode(item) + ");\n");
        }

        Str.Append("FillListBox();\n");
        Str.Append("</script>");

        Literal1.Text = Str.ToString();
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\discoverpath\makefile.inc ===
discoverpath.cpp:
    ..\buildtools\flex -i -o$(OBJ_PATH)\$O\discoverpath.cpp discoverpath.lex
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\discoverpath\stub.cpp ===
#include <discoverpath.cpp>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\discoverpath\unistd.h ===
/*

   Needed for flex workaround

*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\filelist\makefile.inc ===
filelist.txt:
!if exist($(BASEDIR)\bbt\bbtcountsgen\client\$(_BUILDARCH)fre\filelist.txt)
   cat $(BASEDIR)\bbt\bbtcountsgen\client\$(_BUILDARCH)fre\filelist.txt > $(OBJ_PATH)\$O\filelist.txt
!endif
!if exist($(BASEDIR)\bbt\bbtcountsgen\server\$(_BUILDARCH)fre\filelist.txt)
   cat $(BASEDIR)\bbt\bbtcountsgen\server\$(_BUILDARCH)fre\filelist.txt >> $(OBJ_PATH)\$O\filelist.txt
!endif
!if exist($(OBJ_PATH)\$O\filelist.txt)
   perl remove_duplicates.pl $(OBJ_PATH)\$O\filelist.txt
   del $(OBJ_PATH)\$O\filelist.txt
   move $(OBJ_PATH)\$O\filelist.txt.new $(OBJ_PATH)\$O\filelist.txt
!else
   echo No files > $(OBJ_PATH)\$O\filelist.txt
!endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\loaddlls_wrapper\unistd.h ===
/*

   Needed for flex workaround

*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\loaddlls_wrapper\stub.cpp ===
#include <bbtlddlls.cpp>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\loaddlls_wrapper\makefile.inc ===
bbtlddlls.cpp:
    ..\buildtools\flex -o$(OBJ_PATH)\$O\bbtlddlls.cpp bbtlddlls.lex
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\loaddlls\bbtlddll.c ===
/***********************************************************************
* Microsoft BBT
*
* Microsoft Confidential.  Copyright 1992-1997 Microsoft Corporation.
*
* Component:
*
* File: bbtlddll.c
*
* File Comments:
*       
*       Loads dlls specified in a file [using just LoadLibrary]. Never
*       exits except in error. The dll file contains one dll per
*       line, full path may be specified, the path is passed on to
*       LoadLibrary as it is. Don't make the paths longer than 500
*       or so characters! When done loading all dlls, *deletes* a done file.
*
***********************************************************************/

#include <nt.h>
#include <ntrtl.h>
#include <nturtl.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#define LDDLL_MAX_PATH 500

int __cdecl main(int argc, __in_ecount(argc) char *argv[])
{
    char *szDllListPath, *szLogFilePath, *szDoneFilePath;
    FILE *fpDllList = NULL, *fpLogFile = NULL;
    char szDllPath[LDDLL_MAX_PATH] = {0};
    size_t stDllPathLen = 0;
    unsigned long ulLoadFailures = 0;
    char *pchCarriageReturn = 0;
    char *pchEndOfString = 0;
    HINSTANCE hLoadedDll = NULL;
    BOOL fLogToStdOut = FALSE;
    UINT iuOldErrorMode;
    int lasterror;

    if (argc != 4)
    {
	printf("Usage: bbtlddll dlllist logfile donefile\n"
	       "  Loads dlls specified in dlllist [may contain path/name]  \n"
	       "  Logs status to logfile [overwrites the file]. Last line  \n"
	       "   contains only number of failed LoadLibrary's            \n"
	       "   If logfile name is '-' outputs to standard out          \n" 
	       "  When done, *deletes* donefile.                          \n");
	exit(-1);
    }

    szDllListPath = argv[1];
    szLogFilePath = argv[2];
    szDoneFilePath = argv[3];

    fpDllList = fopen(szDllListPath, "rt");
    if (fpDllList == NULL)
    {
	printf("ERR: Could not open dll list! [%s]\n", szDllListPath);
	exit(-1);
    }

    if (!strcmp(szLogFilePath, "-"))
    {
	fLogToStdOut = TRUE;
	fpLogFile = stdout;
    }
    else
    {
	fpLogFile = fopen(szLogFilePath, "wt");
	if (fpLogFile == NULL)
	{
	    printf("ERR: Could not open output log! [%s]\n", szLogFilePath);
	    exit(-1);
	}
    }

    fprintf(fpLogFile, "Loading dlls in %s:\n", szDllListPath);
    while (fgets(szDllPath, MAX_PATH, fpDllList)) 
    {
	// remove the carriage return from szDllPath
	pchCarriageReturn = strstr(szDllPath, "\n");
	if (NULL == pchCarriageReturn)
	{
	    // if we did not find an EOL, it is either EOF and 
	    // we have the last line, or it is a line longer than
	    // MAX_PATH... 
	    if (!feof(fpDllList))
	    {
		// find the end of long line!
		while (fgets(szDllPath, MAX_PATH, fpDllList))
		{
		    pchCarriageReturn = strstr(szDllPath, "\n");
		    if (!pchCarriageReturn) continue; else break;
		}

		// skip long line
		continue;
	    }
	}

	// terminate the path at the carriage return
	if (pchCarriageReturn) 
	{
	    *pchCarriageReturn = 0;
	    pchEndOfString = pchCarriageReturn;
	}
	else
	{
	    pchEndOfString = szDllPath + strlen(szDllPath);
	}
	
	// remove the spaces and tab characters at the end of the string
	while (pchEndOfString > szDllPath)
	{
	    pchEndOfString--;
	    if (*pchEndOfString == ' ' ||
		*pchEndOfString == '\t')
	    {
		*pchEndOfString = 0;
	    }
	    else break;
	}
	
	// if we have an empty line, skip it
	if (strlen(szDllPath) == 0) continue;

	// try to load the library with the path passed in
	iuOldErrorMode = GetErrorMode();
	SetErrorMode(SEM_FAILCRITICALERRORS);
	hLoadedDll = LoadLibrary(szDllPath);
	SetErrorMode(iuOldErrorMode);
	if (NULL == hLoadedDll)
	{
	    ulLoadFailures++;
            lasterror = GetLastError();
	    fprintf(fpLogFile, "FAILED : %s   GetLastError(): %d\n", szDllPath, lasterror);
	}
	else
	{
	    fprintf(fpLogFile, "SUCCESS: %s\n", szDllPath);
	}
    }
    
    // print the number of failures in the last line
    fprintf(fpLogFile, "%u\n", ulLoadFailures);

    // close output if outputting to a logfile
    if (!fLogToStdOut) fclose(fpLogFile);

    // close the dll list file
    fclose(fpDllList);

    // attempt to delete the Done file
    DeleteFile(szDoneFilePath);

    // hang around for ever...
    for (;;) Sleep(10000000);

    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bbt\3.52.6526\install\noconsole\noconsole.c ===
#include <windows.h>
#include <stdlib.h>
#include <strsafe.h>

char *g_szUsage = 
"Usage:\n"
" noconsole ExeName Parameters\n"
"\n"
" Runs the program 'ExeName' with given list of parameters and without a console window\n"
"  ExeName - Supplies the executable to start.\n"
"  Parameters - Supplies a string of arguments to the exe.\n"
"\n"
;

/*
 *
 * PerfLaunch -
 *
 */
HANDLE
__stdcall
PerfLaunch (
    __in_ecount(count1) char* pszExeName,
    __in_ecount(count2) char* pszParamaters
    )

/*++

Routine Description:

    Launch process.

Arguments:

    pszExeName - Supplies the file to start.

    pszParamaters - Supplies the arguments to the exe.

Return Value:

    HANDLE - The handle to the process we've created or NULL if the routine
        failed.

--*/

{
    CHAR             dbgStr[80];
    FLONG            errorMode;

    dbgStr[0] = '\0';

    // errorMode = 0;

    //
    //  If the FileName or the pointer to it is NULL, we can't start it.
    //

    if (!(pszExeName && *pszExeName)) {

	StringCbPrintfA(dbgStr, sizeof(dbgStr), "Error: Not valid file name!");
        goto PerfLaunchError;

    }

    //
    //  Start the file.
    //

    {
        STARTUPINFO StartupInfo;
        PROCESS_INFORMATION ProcessInfo;

        ZeroMemory(&ProcessInfo, sizeof(PROCESS_INFORMATION));
        ZeroMemory(&StartupInfo, sizeof(STARTUPINFO));
        StartupInfo.cb = sizeof(STARTUPINFO);

        errorMode = (SetErrorMode(0));

        if (!CreateProcess(
                    pszExeName,       // ApplicationName
                    pszParamaters,    // Command line
                    NULL,       // Process security attributes
                    NULL,       // Primary thread security attributes
                    TRUE,       // Handles are inherited
                    CREATE_NO_WINDOW,          // creation flags
                    NULL,       // Use parent's environment
                    NULL,       // Use parent's current directory
                    &StartupInfo,
                    &ProcessInfo
                    )) {
            StringCbPrintfA(dbgStr, sizeof(dbgStr), "Error: (%lu) Unable to execute file", GetLastError() );
            goto PerfLaunchError;
        }

        SetErrorMode(errorMode);

        //
        //  Return a handle to the process we've created, or NULL if we've failed.
        //

        return ProcessInfo.hProcess;
    }

    PerfLaunchError:
        SetErrorMode( errorMode );
	MessageBox(NULL, dbgStr, "NOCONSOLE ERROR", MB_OK);
        return INVALID_HANDLE_VALUE;
}

int
__cdecl
main(int argc, __in_ecount(argc) char *argv[])
{
    int index;
    int paramSize;
    char *Parameters;

    paramSize = (32 * 1024) * sizeof(char);
    Parameters = (char *) malloc(paramSize);

    if(Parameters == NULL ){
       printf("Out of memory.\n");
       exit(1);
    }

    if (argc < 2)
    {
        MessageBox(NULL, g_szUsage, "NOCONSOLE INVALID PARAMETERS", MB_OK);
	exit(-1);
    }

    StringCbPrintfA(Parameters, paramSize, "\"%s\"", argv[1]);

    for (index = 2; index < argc; ++index) {
        StringCbCatA(Parameters, paramSize, " ");
        StringCbCatA(Parameters, paramSize, argv[index]);
    }

    PerfLaunch(argv[1], Parameters);

    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\CLRSDK\v2.0.50727\include\cor.h ===
// ==++==
// 
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// 
// ==--==
/*****************************************************************************
 **                                                                         **
 ** Cor.h - general header for the Runtime.                                 **
 **                                                                         **
 *****************************************************************************/


#ifndef _COR_H_
#define _COR_H_

//*****************************************************************************
// Required includes
#include <ole2.h>                       // Definitions of OLE types.
#include <specstrings.h>
#include "corerror.h"

//*****************************************************************************

#ifdef __cplusplus
extern "C" {
#endif

// {BED7F4EA-1A96-11d2-8F08-00A0C9A6186D}
EXTERN_GUID(LIBID_ComPlusRuntime, 0xbed7f4ea, 0x1a96, 0x11d2, 0x8f, 0x8, 0x0, 0xa0, 0xc9, 0xa6, 0x18, 0x6d);

// {90883F05-3D28-11D2-8F17-00A0C9A6186D}
EXTERN_GUID(GUID_ExportedFromComPlus, 0x90883f05, 0x3d28, 0x11d2, 0x8f, 0x17, 0x0, 0xa0, 0xc9, 0xa6, 0x18, 0x6d);

// {0F21F359-AB84-41e8-9A78-36D110E6D2F9}
EXTERN_GUID(GUID_ManagedName, 0xf21f359, 0xab84, 0x41e8, 0x9a, 0x78, 0x36, 0xd1, 0x10, 0xe6, 0xd2, 0xf9);

// {54FC8F55-38DE-4703-9C4E-250351302B1C}
EXTERN_GUID(GUID_Function2Getter, 0x54fc8f55, 0x38de, 0x4703, 0x9c, 0x4e, 0x25, 0x3, 0x51, 0x30, 0x2b, 0x1c);

// CLSID_CorMetaDataDispenserRuntime: {1EC2DE53-75CC-11d2-9775-00A0C9B4D50C}
//  Dispenser coclass for version 1.5 and 2.0 meta data.  To get the "latest" bind
//  to CLSID_MetaDataDispenser.
EXTERN_GUID(CLSID_CorMetaDataDispenserRuntime, 0x1ec2de53, 0x75cc, 0x11d2, 0x97, 0x75, 0x0, 0xa0, 0xc9, 0xb4, 0xd5, 0xc);

// {CD2BC5C9-F452-4326-B714-F9C539D4DA58}
EXTERN_GUID(GUID_DispIdOverride, 0xcd2bc5c9, 0xf452, 0x4326, 0xb7, 0x14, 0xf9, 0xc5, 0x39, 0xd4, 0xda, 0x58);

// {B64784EB-D8D4-4d9b-9ACD-0E30806426F7}
EXTERN_GUID(GUID_ForceIEnumerable, 0xb64784eb, 0xd8d4, 0x4d9b, 0x9a, 0xcd, 0x0e, 0x30, 0x80, 0x64, 0x26, 0xf7);

// {2941FF83-88D8-4F73-B6A9-BDF8712D000D}
EXTERN_GUID(GUID_PropGetCA, 0x2941ff83, 0x88d8, 0x4f73, 0xb6, 0xa9, 0xbd, 0xf8, 0x71, 0x2d, 0x00, 0x0d);

// {29533527-3683-4364-ABC0-DB1ADD822FA2}
EXTERN_GUID(GUID_PropPutCA, 0x29533527, 0x3683, 0x4364, 0xab, 0xc0, 0xdb, 0x1a, 0xdd, 0x82, 0x2f, 0xa2);

// CLSID_CLR_v1_MetaData: {005023CA-72B1-11D3-9FC4-00C04F79A0A3}
//  Used to generate v1 metadata (for v1.0 and v1.1 CLR compatibility).
EXTERN_GUID(CLSID_CLR_v1_MetaData, 0x005023ca, 0x72b1, 0x11d3, 0x9f, 0xc4, 0x0, 0xc0, 0x4f, 0x79, 0xa0, 0xa3);

// CLSID_CLR_v2_MetaData: {EFEA471A-44FD-4862-9292-0C58D46E1F3A}
//  Used to generate v1 metadata (for v1.0 and v1.1 CLR compatibility).
EXTERN_GUID(CLSID_CLR_v2_MetaData, 0xefea471a, 0x44fd, 0x4862, 0x92, 0x92, 0xc, 0x58, 0xd4, 0x6e, 0x1f, 0x3a);


// CLSID_CorMetaDataRuntime:
// This will can always be used to generate the "latest" metadata available.
#define CLSID_CorMetaDataRuntime CLSID_CLR_v2_MetaData


// {30FE7BE8-D7D9-11D2-9F80-00C04F79A0A3}
EXTERN_GUID(MetaDataCheckDuplicatesFor, 0x30fe7be8, 0xd7d9, 0x11d2, 0x9f, 0x80, 0x0, 0xc0, 0x4f, 0x79, 0xa0, 0xa3);

// {DE3856F8-D7D9-11D2-9F80-00C04F79A0A3}
EXTERN_GUID(MetaDataRefToDefCheck, 0xde3856f8, 0xd7d9, 0x11d2, 0x9f, 0x80, 0x0, 0xc0, 0x4f, 0x79, 0xa0, 0xa3);

// {E5D71A4C-D7DA-11D2-9F80-00C04F79A0A3}
EXTERN_GUID(MetaDataNotificationForTokenMovement, 0xe5d71a4c, 0xd7da, 0x11d2, 0x9f, 0x80, 0x0, 0xc0, 0x4f, 0x79, 0xa0, 0xa3);

// {2eee315c-d7db-11d2-9f80-00c04f79a0a3}
EXTERN_GUID(MetaDataSetUpdate, 0x2eee315c, 0xd7db, 0x11d2, 0x9f, 0x80, 0x0, 0xc0, 0x4f, 0x79, 0xa0, 0xa3);
#define MetaDataSetENC MetaDataSetUpdate

// Use this guid in SetOption to indicate if the import enumerator should skip over
// delete items or not. The default is yes.
//
// {79700F36-4AAC-11d3-84C3-009027868CB1}
EXTERN_GUID(MetaDataImportOption, 0x79700f36, 0x4aac, 0x11d3, 0x84, 0xc3, 0x0, 0x90, 0x27, 0x86, 0x8c, 0xb1);

// Use this guid in the SetOption if compiler wants to have MetaData API to take reader/writer lock
//
// {F7559806-F266-42ea-8C63-0ADB45E8B234}
EXTERN_GUID(MetaDataThreadSafetyOptions, 0xf7559806, 0xf266, 0x42ea, 0x8c, 0x63, 0xa, 0xdb, 0x45, 0xe8, 0xb2, 0x34);

// Use this guid in the SetOption if compiler wants error when some tokens are emitted out of order
// {1547872D-DC03-11d2-9420-0000F8083460}
EXTERN_GUID(MetaDataErrorIfEmitOutOfOrder, 0x1547872d, 0xdc03, 0x11d2, 0x94, 0x20, 0x0, 0x0, 0xf8, 0x8, 0x34, 0x60);

// Use this guid in the SetOption to indicate if the tlbimporter should generate the
// TCE adapters for COM connection point containers.
// {DCC9DE90-4151-11d3-88D6-00902754C43A}
EXTERN_GUID(MetaDataGenerateTCEAdapters, 0xdcc9de90, 0x4151, 0x11d3, 0x88, 0xd6, 0x0, 0x90, 0x27, 0x54, 0xc4, 0x3a);

// Use this guid in the SetOption to specifiy a non-default namespace for typelib import.
// {F17FF889-5A63-11d3-9FF2-00C04FF7431A}
EXTERN_GUID(MetaDataTypeLibImportNamespace, 0xf17ff889, 0x5a63, 0x11d3, 0x9f, 0xf2, 0x0, 0xc0, 0x4f, 0xf7, 0x43, 0x1a);

// Use this guid in the SetOption to specify the behavior of UnmarkAll. See CorLinkerOptions.
// {47E099B6-AE7C-4797-8317-B48AA645B8F9}
EXTERN_GUID(MetaDataLinkerOptions, 0x47e099b6, 0xae7c, 0x4797, 0x83, 0x17, 0xb4, 0x8a, 0xa6, 0x45, 0xb8, 0xf9);

// Use this guid in the SetOption to specify the runtime version stored in the CLR metadata.
// {47E099B7-AE7C-4797-8317-B48AA645B8F9}
EXTERN_GUID(MetaDataRuntimeVersion, 0x47e099b7, 0xae7c, 0x4797, 0x83, 0x17, 0xb4, 0x8a, 0xa6, 0x45, 0xb8, 0xf9);

// Use this guid in the SetOption to specify the behavior of the merger.
// {132D3A6E-B35D-464e-951A-42EFB9FB6601}
EXTERN_GUID(MetaDataMergerOptions, 0x132d3a6e, 0xb35d, 0x464e, 0x95, 0x1a, 0x42, 0xef, 0xb9, 0xfb, 0x66, 0x1);


interface IMetaDataImport;
interface IMetaDataAssemblyEmit;
interface IMetaDataAssemblyImport;
interface IMetaDataEmit;
interface ICeeGen;


typedef UNALIGNED void const *UVCP_CONSTANT;


// Constant for connection id and task id
#define INVALID_CONNECTION_ID   0x0
#define INVALID_TASK_ID         0x0 
#define MAX_CONNECTION_NAME     MAX_PATH

//*****************************************************************************
//*****************************************************************************
//
// D L L   P U B L I C   E N T R Y    P O I N T   D E C L A R A T I O N S
//
//*****************************************************************************
//*****************************************************************************

BOOL STDMETHODCALLTYPE _CorDllMain(HINSTANCE hInst, DWORD dwReason, LPVOID lpReserved);
__int32 STDMETHODCALLTYPE _CorExeMain();
__int32 STDMETHODCALLTYPE _CorExeMain2( // Executable exit code.
    PBYTE   pUnmappedPE,                // -> memory mapped code
    DWORD   cUnmappedPE,                // Size of memory mapped code
    __in LPWSTR  pImageNameIn,          // -> Executable Name
    __in LPWSTR  pLoadersFileName,      // -> Loaders Name
    __in LPWSTR  pCmdLine);             // -> Command Line

STDAPI _CorValidateImage(PVOID *ImageBase, LPCWSTR FileName);
STDAPI_(VOID) _CorImageUnloading(PVOID ImageBase);

STDAPI          CoInitializeEE(DWORD fFlags);   
STDAPI_(void)   CoUninitializeEE(BOOL fFlags);  
STDAPI_(void)   CoEEShutDownCOM(void);

#ifndef FEATURE_PAL

#define MSCOREE_SHIM_W                L"mscoree.dll"
#define MSCOREE_SHIM_A                "mscoree.dll"

#else // !FEATURE_PAL

#define MSCOREE_SHIM_W                MAKEDLLNAME_W(L"sscoree")
#define MSCOREE_SHIM_A                MAKEDLLNAME_A("sscoree")

#endif // !FEATURE_PAL

#define SWITCHOUT_HANDLE_VALUE ((HANDLE)(LONG_PTR)-2)


//
// CoInitializeCor flags.
//
typedef enum tagCOINITCOR
{
    COINITCOR_DEFAULT       = 0x0           // Default initialization mode. 
} COINITICOR;

//
// CoInitializeEE flags.
//
typedef enum tagCOINITEE
{
    COINITEE_DEFAULT        = 0x0,          // Default initialization mode. 
    COINITEE_DLL            = 0x1,          // Initialization mode for loading DLL. 
    COINITEE_MAIN           = 0x2           // Initialize prior to entering the main routine 
} COINITIEE;

//
// CoInitializeEE flags.
//
typedef enum tagCOUNINITEE
{
    COUNINITEE_DEFAULT      = 0x0,          // Default uninitialization mode.   
    COUNINITEE_DLL          = 0x1           // Uninitialization mode for unloading DLL. 
} COUNINITIEE;

//*****************************************************************************
//*****************************************************************************
//
// I L   &   F I L E   F O R M A T   D E C L A R A T I O N S    
//
//*****************************************************************************
//*****************************************************************************


// <STRIP>The following definitions will get moved into <windows.h> by RTM but are
// kept here for the Alpha's and Beta's.</STRIP>
#ifndef _WINDOWS_UPDATES_
#include <corhdr.h>
#endif // <windows.h> updates

//*****************************************************************************
//*****************************************************************************
//
// D L L   P U B L I C   E N T R Y    P O I N T   D E C L A R A T I O N S
//
//*****************************************************************************
//*****************************************************************************

STDAPI          CoInitializeCor(DWORD fFlags);
STDAPI_(void)   CoUninitializeCor(void);

typedef void (* TDestructorCallback)(EXCEPTION_RECORD*);
STDAPI_(void) AddDestructorCallback(int code, TDestructorCallback callback);

//
//*****************************************************************************
//*****************************************************************************

// CLSID_Cor: {bee00000-ee77-11d0-a015-00c04fbbb884}
EXTERN_GUID(CLSID_Cor, 0xbee00010, 0xee77, 0x11d0, 0xa0, 0x15, 0x00, 0xc0, 0x4f, 0xbb, 0xb8, 0x84);

// CLSID_CorMetaDataDispenser: {E5CB7A31-7512-11d2-89CE-0080C792E5D8}
//  This is the "Master Dispenser", always guaranteed to be the most recent
//  dispenser on the machine.
EXTERN_GUID(CLSID_CorMetaDataDispenser, 0xe5cb7a31, 0x7512, 0x11d2, 0x89, 0xce, 0x0, 0x80, 0xc7, 0x92, 0xe5, 0xd8);


// CLSID_CorMetaDataDispenserReg: {435755FF-7397-11d2-9771-00A0C9B4D50C}
//  Dispenser coclass for version 1.0 meta data.  To get the "latest" bind
//  to CLSID_CorMetaDataDispenser.
EXTERN_GUID(CLSID_CorMetaDataDispenserReg, 0x435755ff, 0x7397, 0x11d2, 0x97, 0x71, 0x0, 0xa0, 0xc9, 0xb4, 0xd5, 0xc);


// CLSID_CorMetaDataReg: {87F3A1F5-7397-11d2-9771-00A0C9B4D50C}
// For COM+ Meta Data, Data Driven Registration
EXTERN_GUID(CLSID_CorMetaDataReg, 0x87f3a1f5, 0x7397, 0x11d2, 0x97, 0x71, 0x0, 0xa0, 0xc9, 0xb4, 0xd5, 0xc);

// IID_IMetaDataInternal {39EE28B3-0181-4d48-B53C-2FFAFFD5FEC1}
EXTERN_GUID(IID_IMetaDataInternal, 0x39ee28b3, 0x181, 0x4d48, 0xb5, 0x3c, 0x2f, 0xfa, 0xff, 0xd5, 0xfe, 0xc1);


interface IMetaDataDispenser;

//-------------------------------------
//--- IMetaDataError
//-------------------------------------
// {B81FF171-20F3-11d2-8DCC-00A0C9B09C19}
EXTERN_GUID(IID_IMetaDataError, 0xb81ff171, 0x20f3, 0x11d2, 0x8d, 0xcc, 0x0, 0xa0, 0xc9, 0xb0, 0x9c, 0x19);

//---
#undef  INTERFACE
#define INTERFACE IMetaDataError
DECLARE_INTERFACE_(IMetaDataError, IUnknown)
{
    STDMETHOD(OnError)(HRESULT hrError, mdToken token) PURE;
};

//-------------------------------------
//--- IMapToken
//-------------------------------------
// IID_IMapToken: {06A3EA8B-0225-11d1-BF72-00C04FC31E12}
EXTERN_GUID(IID_IMapToken, 0x6a3ea8b, 0x225, 0x11d1, 0xbf, 0x72, 0x0, 0xc0, 0x4f, 0xc3, 0x1e, 0x12);

//---
#undef  INTERFACE
#define INTERFACE IMapToken
DECLARE_INTERFACE_(IMapToken, IUnknown)
{
    STDMETHOD(Map)(mdToken tkImp, mdToken tkEmit) PURE;
};

//-------------------------------------
//--- IMetaDataDispenser
//-------------------------------------
// {B81FF171-20F3-11d2-8DCC-00A0C9B09C19}
EXTERN_GUID(IID_IMetaDataDispenser, 0x809c652e, 0x7396, 0x11d2, 0x97, 0x71, 0x0, 0xa0, 0xc9, 0xb4, 0xd5, 0xc);

//---
#undef  INTERFACE
#define INTERFACE IMetaDataDispenser
DECLARE_INTERFACE_(IMetaDataDispenser, IUnknown)
{
    STDMETHOD(DefineScope)(                 // Return code.
        REFCLSID    rclsid,                 // [in] What version to create.
        DWORD       dwCreateFlags,          // [in] Flags on the create.
        REFIID      riid,                   // [in] The interface desired.
        IUnknown    **ppIUnk) PURE;         // [out] Return interface on success.

    STDMETHOD(OpenScope)(                   // Return code.
        LPCWSTR     szScope,                // [in] The scope to open.
        DWORD       dwOpenFlags,            // [in] Open mode flags.
        REFIID      riid,                   // [in] The interface desired.
        IUnknown    **ppIUnk) PURE;         // [out] Return interface on success.

    STDMETHOD(OpenScopeOnMemory)(           // Return code.
        LPCVOID     pData,                  // [in] Location of scope data.
        ULONG       cbData,                 // [in] Size of the data pointed to by pData.
        DWORD       dwOpenFlags,            // [in] Open mode flags.
        REFIID      riid,                   // [in] The interface desired.
        IUnknown    **ppIUnk) PURE;         // [out] Return interface on success.
};

//-------------------------------------
//--- IMetaDataEmit
//-------------------------------------
// {BA3FEE4C-ECB9-4e41-83B7-183FA41CD859}
EXTERN_GUID(IID_IMetaDataEmit, 0xba3fee4c, 0xecb9, 0x4e41, 0x83, 0xb7, 0x18, 0x3f, 0xa4, 0x1c, 0xd8, 0x59);

//---
#undef  INTERFACE   
#define INTERFACE IMetaDataEmit
DECLARE_INTERFACE_(IMetaDataEmit, IUnknown)
{
    STDMETHOD(SetModuleProps)(              // S_OK or error.
        LPCWSTR     szName) PURE;           // [IN] If not NULL, the name of the module to set.

    STDMETHOD(Save)(                        // S_OK or error.
        LPCWSTR     szFile,                 // [IN] The filename to save to.
        DWORD       dwSaveFlags) PURE;      // [IN] Flags for the save.

    STDMETHOD(SaveToStream)(                // S_OK or error.
        IStream     *pIStream,              // [IN] A writable stream to save to.
        DWORD       dwSaveFlags) PURE;      // [IN] Flags for the save.

    STDMETHOD(GetSaveSize)(                 // S_OK or error.
        CorSaveSize fSave,                  // [IN] cssAccurate or cssQuick.
        DWORD       *pdwSaveSize) PURE;     // [OUT] Put the size here.

    STDMETHOD(DefineTypeDef)(               // S_OK or error.
        LPCWSTR     szTypeDef,              // [IN] Name of TypeDef
        DWORD       dwTypeDefFlags,         // [IN] CustomAttribute flags
        mdToken     tkExtends,              // [IN] extends this TypeDef or typeref 
        mdToken     rtkImplements[],        // [IN] Implements interfaces
        mdTypeDef   *ptd) PURE;             // [OUT] Put TypeDef token here

    STDMETHOD(DefineNestedType)(            // S_OK or error.
        LPCWSTR     szTypeDef,              // [IN] Name of TypeDef
        DWORD       dwTypeDefFlags,         // [IN] CustomAttribute flags
        mdToken     tkExtends,              // [IN] extends this TypeDef or typeref 
        mdToken     rtkImplements[],        // [IN] Implements interfaces
        mdTypeDef   tdEncloser,             // [IN] TypeDef token of the enclosing type.
        mdTypeDef   *ptd) PURE;             // [OUT] Put TypeDef token here

    STDMETHOD(SetHandler)(                  // S_OK.
        IUnknown    *pUnk) PURE;            // [IN] The new error handler.

    STDMETHOD(DefineMethod)(                // S_OK or error. 
        mdTypeDef   td,                     // Parent TypeDef   
        LPCWSTR     szName,                 // Name of member   
        DWORD       dwMethodFlags,          // Member attributes    
        PCCOR_SIGNATURE pvSigBlob,          // [IN] point to a blob value of CLR signature 
        ULONG       cbSigBlob,              // [IN] count of bytes in the signature blob
        ULONG       ulCodeRVA,  
        DWORD       dwImplFlags,    
        mdMethodDef *pmd) PURE;             // Put member token here     

    STDMETHOD(DefineMethodImpl)(            // S_OK or error.   
        mdTypeDef   td,                     // [IN] The class implementing the method   
        mdToken     tkBody,                 // [IN] Method body - MethodDef or MethodRef
        mdToken     tkDecl) PURE;           // [IN] Method declaration - MethodDef or MethodRef

    STDMETHOD(DefineTypeRefByName)(         // S_OK or error.   
        mdToken     tkResolutionScope,      // [IN] ModuleRef, AssemblyRef or TypeRef.
        LPCWSTR     szName,                 // [IN] Name of the TypeRef.
        mdTypeRef   *ptr) PURE;             // [OUT] Put TypeRef token here.    

    STDMETHOD(DefineImportType)(            // S_OK or error.   
        IMetaDataAssemblyImport *pAssemImport,  // [IN] Assembly containing the TypeDef.
        const void  *pbHashValue,           // [IN] Hash Blob for Assembly.
        ULONG       cbHashValue,            // [IN] Count of bytes.
        IMetaDataImport *pImport,           // [IN] Scope containing the TypeDef.   
        mdTypeDef   tdImport,               // [IN] The imported TypeDef.   
        IMetaDataAssemblyEmit *pAssemEmit,  // [IN] Assembly into which the TypeDef is imported.
        mdTypeRef   *ptr) PURE;             // [OUT] Put TypeRef token here.

    STDMETHOD(DefineMemberRef)(             // S_OK or error    
        mdToken     tkImport,               // [IN] ClassRef or ClassDef importing a member.    
        LPCWSTR     szName,                 // [IN] member's name   
        PCCOR_SIGNATURE pvSigBlob,          // [IN] point to a blob value of CLR signature 
        ULONG       cbSigBlob,              // [IN] count of bytes in the signature blob    
        mdMemberRef *pmr) PURE;             // [OUT] memberref token    

    STDMETHOD(DefineImportMember)(          // S_OK or error.   
        IMetaDataAssemblyImport *pAssemImport,  // [IN] Assembly containing the Member.
        const void  *pbHashValue,           // [IN] Hash Blob for Assembly.
        ULONG       cbHashValue,            // [IN] Count of bytes.
        IMetaDataImport *pImport,           // [IN] Import scope, with member.  
        mdToken     mbMember,               // [IN] Member in import scope.   
        IMetaDataAssemblyEmit *pAssemEmit,  // [IN] Assembly into which the Member is imported.
        mdToken     tkParent,               // [IN] Classref or classdef in emit scope.    
        mdMemberRef *pmr) PURE;             // [OUT] Put member ref here.   

    STDMETHOD(DefineEvent) (    
        mdTypeDef   td,                     // [IN] the class/interface on which the event is being defined 
        LPCWSTR     szEvent,                // [IN] Name of the event   
        DWORD       dwEventFlags,           // [IN] CorEventAttr    
        mdToken     tkEventType,            // [IN] a reference (mdTypeRef or mdTypeRef) to the Event class 
        mdMethodDef mdAddOn,                // [IN] required add method 
        mdMethodDef mdRemoveOn,             // [IN] required remove method  
        mdMethodDef mdFire,                 // [IN] optional fire method    
        mdMethodDef rmdOtherMethods[],      // [IN] optional array of other methods associate with the event    
        mdEvent     *pmdEvent) PURE;        // [OUT] output event token 

    STDMETHOD(SetClassLayout) (   
        mdTypeDef   td,                     // [IN] typedef 
        DWORD       dwPackSize,             // [IN] packing size specified as 1, 2, 4, 8, or 16 
        COR_FIELD_OFFSET rFieldOffsets[],   // [IN] array of layout specification   
        ULONG       ulClassSize) PURE;      // [IN] size of the class   

    STDMETHOD(DeleteClassLayout) (
        mdTypeDef   td) PURE;               // [IN] typedef whose layout is to be deleted.

    STDMETHOD(SetFieldMarshal) (    
        mdToken     tk,                     // [IN] given a fieldDef or paramDef token  
        PCCOR_SIGNATURE pvNativeType,       // [IN] native type specification   
        ULONG       cbNativeType) PURE;     // [IN] count of bytes of pvNativeType  

    STDMETHOD(DeleteFieldMarshal) (
        mdToken     tk) PURE;               // [IN] given a fieldDef or paramDef token

    STDMETHOD(DefinePermissionSet) (    
        mdToken     tk,                     // [IN] the object to be decorated. 
        DWORD       dwAction,               // [IN] CorDeclSecurity.    
        void const  *pvPermission,          // [IN] permission blob.    
        ULONG       cbPermission,           // [IN] count of bytes of pvPermission. 
        mdPermission *ppm) PURE;            // [OUT] returned permission token. 

    STDMETHOD(SetRVA)(                      // S_OK or error.   
        mdMethodDef md,                     // [IN] Method for which to set offset  
        ULONG       ulRVA) PURE;            // [IN] The offset    

    STDMETHOD(GetTokenFromSig)(             // S_OK or error.   
        PCCOR_SIGNATURE pvSig,              // [IN] Signature to define.    
        ULONG       cbSig,                  // [IN] Size of signature data. 
        mdSignature *pmsig) PURE;           // [OUT] returned signature token.  

    STDMETHOD(DefineModuleRef)(             // S_OK or error.   
        LPCWSTR     szName,                 // [IN] DLL name    
        mdModuleRef *pmur) PURE;            // [OUT] returned   

    // <TODO>@FUTURE:  This should go away once everyone starts using SetMemberRefProps.</TODO>
    STDMETHOD(SetParent)(                   // S_OK or error.   
        mdMemberRef mr,                     // [IN] Token for the ref to be fixed up.   
        mdToken     tk) PURE;               // [IN] The ref parent. 

    STDMETHOD(GetTokenFromTypeSpec)(        // S_OK or error.   
        PCCOR_SIGNATURE pvSig,              // [IN] TypeSpec Signature to define.  
        ULONG       cbSig,                  // [IN] Size of signature data. 
        mdTypeSpec *ptypespec) PURE;        // [OUT] returned TypeSpec token.  

    STDMETHOD(SaveToMemory)(                // S_OK or error.
        void        *pbData,                // [OUT] Location to write data.
        ULONG       cbData) PURE;           // [IN] Max size of data buffer.

    STDMETHOD(DefineUserString)(            // Return code.
        LPCWSTR szString,                   // [IN] User literal string.
        ULONG       cchString,              // [IN] Length of string.
        mdString    *pstk) PURE;            // [OUT] String token.

    STDMETHOD(DeleteToken)(                 // Return code.
        mdToken     tkObj) PURE;            // [IN] The token to be deleted

    STDMETHOD(SetMethodProps)(              // S_OK or error.
        mdMethodDef md,                     // [IN] The MethodDef.
        DWORD       dwMethodFlags,          // [IN] Method attributes.
        ULONG       ulCodeRVA,              // [IN] Code RVA.
        DWORD       dwImplFlags) PURE;      // [IN] Impl flags.

    STDMETHOD(SetTypeDefProps)(             // S_OK or error.
        mdTypeDef   td,                     // [IN] The TypeDef.
        DWORD       dwTypeDefFlags,         // [IN] TypeDef flags.
        mdToken     tkExtends,              // [IN] Base TypeDef or TypeRef.
        mdToken     rtkImplements[]) PURE;  // [IN] Implemented interfaces.

    STDMETHOD(SetEventProps)(               // S_OK or error.
        mdEvent     ev,                     // [IN] The event token.
        DWORD       dwEventFlags,           // [IN] CorEventAttr.
        mdToken     tkEventType,            // [IN] A reference (mdTypeRef or mdTypeRef) to the Event class.
        mdMethodDef mdAddOn,                // [IN] Add method.
        mdMethodDef mdRemoveOn,             // [IN] Remove method.
        mdMethodDef mdFire,                 // [IN] Fire method.
        mdMethodDef rmdOtherMethods[]) PURE;// [IN] Array of other methods associate with the event.

    STDMETHOD(SetPermissionSetProps)(       // S_OK or error.
        mdToken     tk,                     // [IN] The object to be decorated.
        DWORD       dwAction,               // [IN] CorDeclSecurity.
        void const  *pvPermission,          // [IN] Permission blob.
        ULONG       cbPermission,           // [IN] Count of bytes of pvPermission.
        mdPermission *ppm) PURE;            // [OUT] Permission token.

    STDMETHOD(DefinePinvokeMap)(            // Return code.
        mdToken     tk,                     // [IN] FieldDef or MethodDef.
        DWORD       dwMappingFlags,         // [IN] Flags used for mapping.
        LPCWSTR     szImportName,           // [IN] Import name.
        mdModuleRef mrImportDLL) PURE;      // [IN] ModuleRef token for the target DLL.

    STDMETHOD(SetPinvokeMap)(               // Return code.
        mdToken     tk,                     // [IN] FieldDef or MethodDef.
        DWORD       dwMappingFlags,         // [IN] Flags used for mapping.
        LPCWSTR     szImportName,           // [IN] Import name.
        mdModuleRef mrImportDLL) PURE;      // [IN] ModuleRef token for the target DLL.

    STDMETHOD(DeletePinvokeMap)(            // Return code.
        mdToken     tk) PURE;               // [IN] FieldDef or MethodDef.

    // New CustomAttribute functions.
    STDMETHOD(DefineCustomAttribute)(       // Return code.
        mdToken     tkObj,                  // [IN] The object to put the value on.
        mdToken     tkType,                 // [IN] Type of the CustomAttribute (TypeRef/TypeDef).
        void const  *pCustomAttribute,      // [IN] The custom value data.
        ULONG       cbCustomAttribute,      // [IN] The custom value data length.
        mdCustomAttribute *pcv) PURE;       // [OUT] The custom value token value on return.

    STDMETHOD(SetCustomAttributeValue)(     // Return code.
        mdCustomAttribute pcv,              // [IN] The custom value token whose value to replace.
        void const  *pCustomAttribute,      // [IN] The custom value data.
        ULONG       cbCustomAttribute) PURE;// [IN] The custom value data length.

    STDMETHOD(DefineField)(                 // S_OK or error. 
        mdTypeDef   td,                     // Parent TypeDef   
        LPCWSTR     szName,                 // Name of member   
        DWORD       dwFieldFlags,           // Member attributes    
        PCCOR_SIGNATURE pvSigBlob,          // [IN] point to a blob value of CLR signature 
        ULONG       cbSigBlob,              // [IN] count of bytes in the signature blob    
        DWORD       dwCPlusTypeFlag,        // [IN] flag for value type. selected ELEMENT_TYPE_*    
        void const  *pValue,                // [IN] constant value  
        ULONG       cchValue,               // [IN] size of constant value (string, in wide chars).
        mdFieldDef  *pmd) PURE;             // [OUT] Put member token here    

    STDMETHOD(DefineProperty)( 
        mdTypeDef   td,                     // [IN] the class/interface on which the property is being defined  
        LPCWSTR     szProperty,             // [IN] Name of the property    
        DWORD       dwPropFlags,            // [IN] CorPropertyAttr 
        PCCOR_SIGNATURE pvSig,              // [IN] the required type signature 
        ULONG       cbSig,                  // [IN] the size of the type signature blob 
        DWORD       dwCPlusTypeFlag,        // [IN] flag for value type. selected ELEMENT_TYPE_*    
        void const  *pValue,                // [IN] constant value  
        ULONG       cchValue,               // [IN] size of constant value (string, in wide chars).
        mdMethodDef mdSetter,               // [IN] optional setter of the property 
        mdMethodDef mdGetter,               // [IN] optional getter of the property 
        mdMethodDef rmdOtherMethods[],      // [IN] an optional array of other methods  
        mdProperty  *pmdProp) PURE;         // [OUT] output prop