 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 250 */	NdrFcShort( 0x18 ),	/* 24 */
/* 252 */	NdrFcShort( 0x8 ),	/* 8 */
/* 254 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 256 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 258 */	NdrFcShort( 0x0 ),	/* 0 */
/* 260 */	NdrFcShort( 0x0 ),	/* 0 */
/* 262 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter libOffset */

/* 264 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 266 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 268 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter cb */

/* 270 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 272 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 274 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter dwLockType */

/* 276 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 278 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 280 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 282 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 284 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 286 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Read */

/* 288 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 290 */	NdrFcLong( 0x0 ),	/* 0 */
/* 294 */	NdrFcShort( 0xe ),	/* 14 */
#ifndef _ALPHA_
/* 296 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 298 */	NdrFcShort( 0x15 ),	/* 21 */
/* 300 */	NdrFcShort( 0x15 ),	/* 21 */
/* 302 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 304 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 306 */	NdrFcShort( 0x0 ),	/* 0 */
/* 308 */	NdrFcShort( 0x0 ),	/* 0 */
/* 310 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pByte */

/* 312 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
#ifndef _ALPHA_
/* 314 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 316 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter cb */

/* 318 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 320 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 322 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pcbRead */

/* 324 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
#ifndef _ALPHA_
/* 326 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 328 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 330 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 332 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 334 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure LockSCard */


	/* Procedure Revert */

/* 336 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 338 */	NdrFcLong( 0x0 ),	/* 0 */
/* 342 */	NdrFcShort( 0xf ),	/* 15 */
#ifndef _ALPHA_
/* 344 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 346 */	NdrFcShort( 0x0 ),	/* 0 */
/* 348 */	NdrFcShort( 0x8 ),	/* 8 */
/* 350 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x1,		/* 1 */
/* 352 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 354 */	NdrFcShort( 0x0 ),	/* 0 */
/* 356 */	NdrFcShort( 0x0 ),	/* 0 */
/* 358 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Return value */


	/* Return value */

/* 360 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 362 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 364 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Seek */

/* 366 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 368 */	NdrFcLong( 0x0 ),	/* 0 */
/* 372 */	NdrFcShort( 0x10 ),	/* 16 */
#ifndef _ALPHA_
/* 374 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 376 */	NdrFcShort( 0x18 ),	/* 24 */
/* 378 */	NdrFcShort( 0x10 ),	/* 16 */
/* 380 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 382 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 384 */	NdrFcShort( 0x0 ),	/* 0 */
/* 386 */	NdrFcShort( 0x0 ),	/* 0 */
/* 388 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter dLibMove */

/* 390 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 392 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 394 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter dwOrigin */

/* 396 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 398 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 400 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pLibnewPosition */

/* 402 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
#ifndef _ALPHA_
/* 404 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 406 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 408 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 410 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 412 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SetSize */

/* 414 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 416 */	NdrFcLong( 0x0 ),	/* 0 */
/* 420 */	NdrFcShort( 0x11 ),	/* 17 */
#ifndef _ALPHA_
/* 422 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 424 */	NdrFcShort( 0x8 ),	/* 8 */
/* 426 */	NdrFcShort( 0x8 ),	/* 8 */
/* 428 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 430 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 432 */	NdrFcShort( 0x0 ),	/* 0 */
/* 434 */	NdrFcShort( 0x0 ),	/* 0 */
/* 436 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter libNewSize */

/* 438 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 440 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 442 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 444 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 446 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 448 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Stat */

/* 450 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 452 */	NdrFcLong( 0x0 ),	/* 0 */
/* 456 */	NdrFcShort( 0x12 ),	/* 18 */
#ifndef _ALPHA_
/* 458 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 460 */	NdrFcShort( 0x24 ),	/* 36 */
/* 462 */	NdrFcShort( 0x24 ),	/* 36 */
/* 464 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 466 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 468 */	NdrFcShort( 0x0 ),	/* 0 */
/* 470 */	NdrFcShort( 0x0 ),	/* 0 */
/* 472 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pstatstg */

/* 474 */	NdrFcShort( 0x11a ),	/* Flags:  must free, in, out, simple ref, */
#ifndef _ALPHA_
/* 476 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 478 */	NdrFcShort( 0x3a ),	/* Type Offset=58 */

	/* Parameter grfStatFlag */

/* 480 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 482 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 484 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 486 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 488 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 490 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UnlockRegion */

/* 492 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 494 */	NdrFcLong( 0x0 ),	/* 0 */
/* 498 */	NdrFcShort( 0x13 ),	/* 19 */
#ifndef _ALPHA_
/* 500 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 502 */	NdrFcShort( 0x18 ),	/* 24 */
/* 504 */	NdrFcShort( 0x8 ),	/* 8 */
/* 506 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 508 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 510 */	NdrFcShort( 0x0 ),	/* 0 */
/* 512 */	NdrFcShort( 0x0 ),	/* 0 */
/* 514 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter libOffset */

/* 516 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 518 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 520 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter cb */

/* 522 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 524 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 526 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter dwLockType */

/* 528 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 530 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 532 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 534 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 536 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 538 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Write */

/* 540 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 542 */	NdrFcLong( 0x0 ),	/* 0 */
/* 546 */	NdrFcShort( 0x14 ),	/* 20 */
#ifndef _ALPHA_
/* 548 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 550 */	NdrFcShort( 0x15 ),	/* 21 */
/* 552 */	NdrFcShort( 0x15 ),	/* 21 */
/* 554 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 556 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 558 */	NdrFcShort( 0x0 ),	/* 0 */
/* 560 */	NdrFcShort( 0x0 ),	/* 0 */
/* 562 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pByte */

/* 564 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
#ifndef _ALPHA_
/* 566 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 568 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter cb */

/* 570 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 572 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 574 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pcbWritten */

/* 576 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
#ifndef _ALPHA_
/* 578 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 580 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 582 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 584 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 586 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertByteArrayToByteBuffer */

/* 588 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 590 */	NdrFcLong( 0x0 ),	/* 0 */
/* 594 */	NdrFcShort( 0x7 ),	/* 7 */
#ifndef _ALPHA_
/* 596 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 598 */	NdrFcShort( 0xd ),	/* 13 */
/* 600 */	NdrFcShort( 0x8 ),	/* 8 */
/* 602 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 604 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 606 */	NdrFcShort( 0x0 ),	/* 0 */
/* 608 */	NdrFcShort( 0x0 ),	/* 0 */
/* 610 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyArray */

/* 612 */	NdrFcShort( 0x148 ),	/* Flags:  in, base type, simple ref, */
#ifndef _ALPHA_
/* 614 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 616 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter dwArraySize */

/* 618 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 620 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 622 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppbyBuffer */

/* 624 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
#ifndef _ALPHA_
/* 626 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 628 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 630 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 632 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 634 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertByteBufferToByteArray */

/* 636 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 638 */	NdrFcLong( 0x0 ),	/* 0 */
/* 642 */	NdrFcShort( 0x8 ),	/* 8 */
#ifndef _ALPHA_
/* 644 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 646 */	NdrFcShort( 0x0 ),	/* 0 */
/* 648 */	NdrFcShort( 0x8 ),	/* 8 */
/* 650 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 652 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 654 */	NdrFcShort( 0x3 ),	/* 3 */
/* 656 */	NdrFcShort( 0x0 ),	/* 0 */
/* 658 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyBuffer */

/* 660 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 662 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 664 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppArray */

/* 666 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 668 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 670 */	NdrFcShort( 0x48 ),	/* Type Offset=72 */

	/* Return value */

/* 672 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 674 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 676 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertByteBufferToSafeArray */

/* 678 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 680 */	NdrFcLong( 0x0 ),	/* 0 */
/* 684 */	NdrFcShort( 0x9 ),	/* 9 */
#ifndef _ALPHA_
/* 686 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 688 */	NdrFcShort( 0x0 ),	/* 0 */
/* 690 */	NdrFcShort( 0x8 ),	/* 8 */
/* 692 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 694 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 696 */	NdrFcShort( 0x12 ),	/* 18 */
/* 698 */	NdrFcShort( 0x0 ),	/* 0 */
/* 700 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyBuffer */

/* 702 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 704 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 706 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppbyArray */

/* 708 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 710 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 712 */	NdrFcShort( 0x4a6 ),	/* Type Offset=1190 */

	/* Return value */

/* 714 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 716 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 718 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertSafeArrayToByteBuffer */

/* 720 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 722 */	NdrFcLong( 0x0 ),	/* 0 */
/* 726 */	NdrFcShort( 0xa ),	/* 10 */
#ifndef _ALPHA_
/* 728 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 730 */	NdrFcShort( 0x0 ),	/* 0 */
/* 732 */	NdrFcShort( 0x8 ),	/* 8 */
/* 734 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 736 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 738 */	NdrFcShort( 0x0 ),	/* 0 */
/* 740 */	NdrFcShort( 0x12 ),	/* 18 */
/* 742 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyArray */

/* 744 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 746 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 748 */	NdrFcShort( 0x4b8 ),	/* Type Offset=1208 */

	/* Parameter ppbyBuff */

/* 750 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
#ifndef _ALPHA_
/* 752 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 754 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 756 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 758 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 760 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure CreateByteArray */

/* 762 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 764 */	NdrFcLong( 0x0 ),	/* 0 */
/* 768 */	NdrFcShort( 0xb ),	/* 11 */
#ifndef _ALPHA_
/* 770 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 772 */	NdrFcShort( 0x8 ),	/* 8 */
/* 774 */	NdrFcShort( 0x15 ),	/* 21 */
/* 776 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 778 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 780 */	NdrFcShort( 0x0 ),	/* 0 */
/* 782 */	NdrFcShort( 0x0 ),	/* 0 */
/* 784 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter dwAllocSize */

/* 786 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 788 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 790 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppbyArray */

/* 792 */	NdrFcShort( 0x2012 ),	/* Flags:  must free, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 794 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 796 */	NdrFcShort( 0x4c2 ),	/* Type Offset=1218 */

	/* Return value */

/* 798 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 800 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 802 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure CreateByteBuffer */

/* 804 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 806 */	NdrFcLong( 0x0 ),	/* 0 */
/* 810 */	NdrFcShort( 0xc ),	/* 12 */
#ifndef _ALPHA_
/* 812 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 814 */	NdrFcShort( 0x8 ),	/* 8 */
/* 816 */	NdrFcShort( 0x8 ),	/* 8 */
/* 818 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 820 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 822 */	NdrFcShort( 0x0 ),	/* 0 */
/* 824 */	NdrFcShort( 0x0 ),	/* 0 */
/* 826 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter dwAllocSize */

/* 828 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 830 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 832 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppbyBuff */

/* 834 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
#ifndef _ALPHA_
/* 836 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 838 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 840 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 842 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 844 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure CreateSafeArray */

/* 846 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 848 */	NdrFcLong( 0x0 ),	/* 0 */
/* 852 */	NdrFcShort( 0xd ),	/* 13 */
#ifndef _ALPHA_
/* 854 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 856 */	NdrFcShort( 0x8 ),	/* 8 */
/* 858 */	NdrFcShort( 0x8 ),	/* 8 */
/* 860 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 862 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 864 */	NdrFcShort( 0x12 ),	/* 18 */
/* 866 */	NdrFcShort( 0x0 ),	/* 0 */
/* 868 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter nAllocSize */

/* 870 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 872 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 874 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppArray */

/* 876 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 878 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 880 */	NdrFcShort( 0x4a6 ),	/* Type Offset=1190 */

	/* Return value */

/* 882 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 884 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 886 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure FreeIStreamMemoryPtr */

/* 888 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 890 */	NdrFcLong( 0x0 ),	/* 0 */
/* 894 */	NdrFcShort( 0xe ),	/* 14 */
#ifndef _ALPHA_
/* 896 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 898 */	NdrFcShort( 0x5 ),	/* 5 */
/* 900 */	NdrFcShort( 0x8 ),	/* 8 */
/* 902 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 904 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 906 */	NdrFcShort( 0x0 ),	/* 0 */
/* 908 */	NdrFcShort( 0x0 ),	/* 0 */
/* 910 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStrm */

/* 912 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 914 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 916 */	NdrFcShort( 0x6 ),	/* Type Offset=6 */

	/* Parameter pMem */

/* 918 */	NdrFcShort( 0x148 ),	/* Flags:  in, base type, simple ref, */
#ifndef _ALPHA_
/* 920 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 922 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 924 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 926 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 928 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetAtIStreamMemory */

/* 930 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 932 */	NdrFcLong( 0x0 ),	/* 0 */
/* 936 */	NdrFcShort( 0xf ),	/* 15 */
#ifndef _ALPHA_
/* 938 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 940 */	NdrFcShort( 0x0 ),	/* 0 */
/* 942 */	NdrFcShort( 0x8 ),	/* 8 */
/* 944 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 946 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 948 */	NdrFcShort( 0x3 ),	/* 3 */
/* 950 */	NdrFcShort( 0x0 ),	/* 0 */
/* 952 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStrm */

/* 954 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 956 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 958 */	NdrFcShort( 0x6 ),	/* Type Offset=6 */

	/* Parameter ppMem */

/* 960 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 962 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 964 */	NdrFcShort( 0x48 ),	/* Type Offset=72 */

	/* Return value */

/* 966 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 968 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 970 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SizeOfIStream */

/* 972 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 974 */	NdrFcLong( 0x0 ),	/* 0 */
/* 978 */	NdrFcShort( 0x10 ),	/* 16 */
#ifndef _ALPHA_
/* 980 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 982 */	NdrFcShort( 0x0 ),	/* 0 */
/* 984 */	NdrFcShort( 0x18 ),	/* 24 */
/* 986 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 988 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 990 */	NdrFcShort( 0x0 ),	/* 0 */
/* 992 */	NdrFcShort( 0x0 ),	/* 0 */
/* 994 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStrm */

/* 996 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 998 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1000 */	NdrFcShort( 0x6 ),	/* Type Offset=6 */

	/* Parameter puliSize */

/* 1002 */	NdrFcShort( 0x2112 ),	/* Flags:  must free, out, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1004 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1006 */	NdrFcShort( 0x2ce ),	/* Type Offset=718 */

	/* Return value */

/* 1008 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1010 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1012 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Atr */


	/* Procedure get_Apdu */

/* 1014 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1016 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1020 */	NdrFcShort( 0x7 ),	/* 7 */
#ifndef _ALPHA_
/* 1022 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1024 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1026 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1028 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x2,		/* 2 */
/* 1030 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1032 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1034 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1036 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppAtr */


	/* Parameter ppApdu */

/* 1038 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
#ifndef _ALPHA_
/* 1040 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1042 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */


	/* Return value */

/* 1044 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1046 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1048 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_Apdu */

/* 1050 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1052 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1056 */	NdrFcShort( 0x8 ),	/* 8 */
#ifndef _ALPHA_
/* 1058 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1060 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1062 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1064 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 1066 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1068 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1070 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1072 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pApdu */

/* 1074 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 1076 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1078 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Return value */

/* 1080 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1082 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1084 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Context */


	/* Procedure get_ApduLength */

/* 1086 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1088 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1092 */	NdrFcShort( 0x9 ),	/* 9 */
#ifndef _ALPHA_
/* 1094 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1096 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1098 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1100 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1102 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1104 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1106 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1108 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pContext */


	/* Parameter plSize */

/* 1110 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1112 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1114 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */


	/* Return value */

/* 1116 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1118 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1120 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ApduReply */

/* 1122 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1124 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1128 */	NdrFcShort( 0xa ),	/* 10 */
#ifndef _ALPHA_
/* 1130 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1132 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1134 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1136 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x2,		/* 2 */
/* 1138 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1140 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1142 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1144 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppReplyApdu */

/* 1146 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
#ifndef _ALPHA_
/* 1148 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1150 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 1152 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1154 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1156 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ApduReply */

/* 1158 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1160 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1164 */	NdrFcShort( 0xb ),	/* 11 */
#ifndef _ALPHA_
/* 1166 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1168 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1170 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1172 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 1174 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1176 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1178 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1180 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pReplyApdu */

/* 1182 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 1184 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1186 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Return value */

/* 1188 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1190 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1192 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ApduReplyLength */

/* 1194 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1196 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1200 */	NdrFcShort( 0xc ),	/* 12 */
#ifndef _ALPHA_
/* 1202 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1204 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1206 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1208 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1210 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1212 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1214 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1216 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter plSize */

/* 1218 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1220 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1222 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1224 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1226 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1228 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ApduReplyLength */

/* 1230 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1232 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1236 */	NdrFcShort( 0xd ),	/* 13 */
#ifndef _ALPHA_
/* 1238 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1240 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1242 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1244 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1246 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1248 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1250 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1252 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter lSize */

/* 1254 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 1256 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1258 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1260 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1262 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1264 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ClassId */

/* 1266 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1268 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1272 */	NdrFcShort( 0xe ),	/* 14 */
#ifndef _ALPHA_
/* 1274 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1276 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1278 */	NdrFcShort( 0xd ),	/* 13 */
/* 1280 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1282 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1284 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1286 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1288 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyClass */

/* 1290 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1292 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1294 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1296 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1298 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1300 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ClassId */

/* 1302 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1304 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1308 */	NdrFcShort( 0xf ),	/* 15 */
#ifndef _ALPHA_
/* 1310 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1312 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1314 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1316 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1318 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1320 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1322 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1324 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClass */

/* 1326 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 1328 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1330 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1332 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1334 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1336 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Data */

/* 1338 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1340 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1344 */	NdrFcShort( 0x10 ),	/* 16 */
#ifndef _ALPHA_
/* 1346 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1348 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1350 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1352 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x2,		/* 2 */
/* 1354 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1356 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1358 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1360 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppData */

/* 1362 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
#ifndef _ALPHA_
/* 1364 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1366 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 1368 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1370 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1372 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_Data */

/* 1374 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1376 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1380 */	NdrFcShort( 0x11 ),	/* 17 */
#ifndef _ALPHA_
/* 1382 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1384 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1386 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1388 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 1390 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1392 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1394 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1396 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pData */

/* 1398 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 1400 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1402 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Return value */

/* 1404 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1406 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1408 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_InstructionId */

/* 1410 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1412 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1416 */	NdrFcShort( 0x12 ),	/* 18 */
#ifndef _ALPHA_
/* 1418 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1420 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1422 */	NdrFcShort( 0xd ),	/* 13 */
/* 1424 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1426 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1428 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1430 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1432 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyIns */

/* 1434 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1436 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1438 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1440 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1442 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1444 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SetDefaultClassId */


	/* Procedure put_InstructionId */

/* 1446 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1448 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1452 */	NdrFcShort( 0x13 ),	/* 19 */
#ifndef _ALPHA_
/* 1454 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1456 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1458 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1460 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1462 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1464 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1466 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1468 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClass */


	/* Parameter byIns */

/* 1470 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 1472 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1474 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */


	/* Return value */

/* 1476 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1478 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1480 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_LeField */

/* 1482 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1484 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1488 */	NdrFcShort( 0x14 ),	/* 20 */
#ifndef _ALPHA_
/* 1490 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1492 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1494 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1496 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1498 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1500 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1502 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1504 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter plSize */

/* 1506 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1508 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1510 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1512 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1514 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1516 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_P1 */

/* 1518 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1520 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1524 */	NdrFcShort( 0x15 ),	/* 21 */
#ifndef _ALPHA_
/* 1526 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1528 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1530 */	NdrFcShort( 0xd ),	/* 13 */
/* 1532 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1534 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1536 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1538 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1540 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyP1 */

/* 1542 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1544 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1546 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1548 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1550 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1552 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_P1 */

/* 1554 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1556 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1560 */	NdrFcShort( 0x16 ),	/* 22 */
#ifndef _ALPHA_
/* 1562 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1564 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1566 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1568 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1570 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1572 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1574 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1576 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 1578 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 1580 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1582 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1584 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1586 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1588 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_P2 */

/* 1590 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1592 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1596 */	NdrFcShort( 0x17 ),	/* 23 */
#ifndef _ALPHA_
/* 1598 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1600 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1602 */	NdrFcShort( 0xd ),	/* 13 */
/* 1604 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1606 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1608 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1610 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1612 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyP2 */

/* 1614 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1616 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1618 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1620 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1622 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1624 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_P2 */

/* 1626 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1628 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1632 */	NdrFcShort( 0x18 ),	/* 24 */
#ifndef _ALPHA_
/* 1634 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1636 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1638 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1640 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1642 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1644 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1646 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1648 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP2 */

/* 1650 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 1652 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1654 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1656 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1658 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1660 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_P3 */

/* 1662 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1664 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1668 */	NdrFcShort( 0x19 ),	/* 25 */
#ifndef _ALPHA_
/* 1670 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1672 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1674 */	NdrFcShort( 0xd ),	/* 13 */
/* 1676 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1678 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1680 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1682 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1684 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyP3 */

/* 1686 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1688 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1690 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1692 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1694 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1696 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyStatus */

/* 1698 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1700 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1704 */	NdrFcShort( 0x1a ),	/* 26 */
#ifndef _ALPHA_
/* 1706 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1708 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1710 */	NdrFcShort( 0xe ),	/* 14 */
/* 1712 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1714 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1716 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1718 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1720 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pwStatus */

/* 1722 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1724 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1726 */	0x6,		/* FC_SHORT */
			0x0,		/* 0 */

	/* Return value */

/* 1728 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1730 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1732 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ReplyStatus */

/* 1734 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1736 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1740 */	NdrFcShort( 0x1b ),	/* 27 */
#ifndef _ALPHA_
/* 1742 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1744 */	NdrFcShort( 0x6 ),	/* 6 */
/* 1746 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1748 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1750 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1752 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1754 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1756 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter wStatus */

/* 1758 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 1760 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1762 */	0x6,		/* FC_SHORT */
			0x0,		/* 0 */

	/* Return value */

/* 1764 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1766 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1768 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyStatusSW1 */

/* 1770 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1772 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1776 */	NdrFcShort( 0x1c ),	/* 28 */
#ifndef _ALPHA_
/* 1778 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1780 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1782 */	NdrFcShort( 0xd ),	/* 13 */
/* 1784 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1786 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1788 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1790 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1792 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbySW1 */

/* 1794 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1796 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1798 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1800 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1802 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1804 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyStatusSW2 */

/* 1806 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1808 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1812 */	NdrFcShort( 0x1d ),	/* 29 */
#ifndef _ALPHA_
/* 1814 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1816 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1818 */	NdrFcShort( 0xd ),	/* 13 */
/* 1820 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1822 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1824 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1826 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1828 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbySW2 */

/* 1830 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1832 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1834 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1836 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1838 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1840 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Type */

/* 1842 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1844 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1848 */	NdrFcShort( 0x1e ),	/* 30 */
#ifndef _ALPHA_
/* 1850 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1852 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1854 */	NdrFcShort( 0xe ),	/* 14 */
/* 1856 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1858 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1860 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1862 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1864 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pType */

/* 1866 */	NdrFcShort( 0x2010 ),	/* Flags:  out, srv alloc size=8 */
#ifndef _ALPHA_
/* 1868 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1870 */	NdrFcShort( 0x4d6 ),	/* Type Offset=1238 */

	/* Return value */

/* 1872 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1874 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1876 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Nad */

/* 1878 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1880 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1884 */	NdrFcShort( 0x1f ),	/* 31 */
#ifndef _ALPHA_
/* 1886 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1888 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1890 */	NdrFcShort( 0xd ),	/* 13 */
/* 1892 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1894 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1896 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1898 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1900 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbNad */

/* 1902 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1904 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1906 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1908 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1910 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1912 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_Nad */

/* 1914 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1916 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1920 */	NdrFcShort( 0x20 ),	/* 32 */
#ifndef _ALPHA_
/* 1922 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1924 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1926 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1928 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1930 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1932 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1934 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1936 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bNad */

/* 1938 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 1940 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1942 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1944 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1946 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1948 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyNad */

/* 1950 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1952 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1956 */	NdrFcShort( 0x21 ),	/* 33 */
#ifndef _ALPHA_
/* 1958 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1960 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1962 */	NdrFcShort( 0xd ),	/* 13 */
/* 1964 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1966 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1968 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1970 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1972 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbNad */

/* 1974 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 1976 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 1978 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1980 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 1982 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 1984 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ReplyNad */

/* 1986 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1988 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1992 */	NdrFcShort( 0x22 ),	/* 34 */
#ifndef _ALPHA_
/* 1994 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 1996 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1998 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2000 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2002 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2004 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2006 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2008 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bNad */

/* 2010 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2012 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2014 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2016 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2018 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2020 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure BuildCmd */

/* 2022 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2024 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2028 */	NdrFcShort( 0x23 ),	/* 35 */
#ifndef _ALPHA_
/* 2030 */	NdrFcShort( 0x20 ),	/* x86, MIPS, PPC Stack size/offset = 32 */
#else
			NdrFcShort( 0x40 ),	/* Alpha Stack size/offset = 64 */
#endif
/* 2032 */	NdrFcShort( 0x1c ),	/* 28 */
/* 2034 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2036 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x7,		/* 7 */
/* 2038 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2040 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2042 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2044 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClassId */

/* 2046 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2048 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2050 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byInsId */

/* 2052 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2054 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2056 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP1 */

/* 2058 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2060 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2062 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2064 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2066 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2068 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pbyData */

/* 2070 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2072 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2074 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter plLe */

/* 2076 */	NdrFcShort( 0x148 ),	/* Flags:  in, base type, simple ref, */
#ifndef _ALPHA_
/* 2078 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2080 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2082 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2084 */	NdrFcShort( 0x1c ),	/* x86, MIPS, PPC Stack size/offset = 28 */
#else
			NdrFcShort( 0x38 ),	/* Alpha Stack size/offset = 56 */
#endif
/* 2086 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Clear */

/* 2088 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2090 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2094 */	NdrFcShort( 0x24 ),	/* 36 */
#ifndef _ALPHA_
/* 2096 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2098 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2100 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2102 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x1,		/* 1 */
/* 2104 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2106 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2108 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2110 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Return value */

/* 2112 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2114 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2116 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Encapsulate */

/* 2118 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2120 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2124 */	NdrFcShort( 0x25 ),	/* 37 */
#ifndef _ALPHA_
/* 2126 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2128 */	NdrFcShort( 0x6 ),	/* 6 */
/* 2130 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2132 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 2134 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2136 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2138 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2140 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pApdu */

/* 2142 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2144 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2146 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ApduType */

/* 2148 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2150 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2152 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Return value */

/* 2154 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2156 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2158 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_AlternateClassId */

/* 2160 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2162 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2166 */	NdrFcShort( 0x26 ),	/* 38 */
#ifndef _ALPHA_
/* 2168 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2170 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2172 */	NdrFcShort( 0xd ),	/* 13 */
/* 2174 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2176 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2178 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2180 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2182 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyClass */

/* 2184 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 2186 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2188 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2190 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2192 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2194 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_AlternateClassId */

/* 2196 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2198 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2202 */	NdrFcShort( 0x27 ),	/* 39 */
#ifndef _ALPHA_
/* 2204 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2206 */	NdrFcShort( 0x5 ),	/* 5 */
/* 2208 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2210 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2212 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2214 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2216 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2218 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClass */

/* 2220 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2222 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2224 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2226 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2228 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2230 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure AppendRecord */

/* 2232 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2234 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2238 */	NdrFcShort( 0x7 ),	/* 7 */
#ifndef _ALPHA_
/* 2240 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2242 */	NdrFcShort( 0x5 ),	/* 5 */
/* 2244 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2246 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 2248 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2250 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2252 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2254 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRefCtrl */

/* 2256 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2258 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2260 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2262 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2264 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2266 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2268 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2270 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2272 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2274 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2276 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2278 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure EraseBinary */

/* 2280 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2282 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2286 */	NdrFcShort( 0x8 ),	/* 8 */
#ifndef _ALPHA_
/* 2288 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2290 */	NdrFcShort( 0xa ),	/* 10 */
/* 2292 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2294 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2296 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2298 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2300 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2302 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2304 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2306 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2308 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2310 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2312 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2314 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2316 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2318 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2320 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2322 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2324 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2326 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2328 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2330 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2332 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ExternalAuthenticate */

/* 2334 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2336 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2340 */	NdrFcShort( 0x9 ),	/* 9 */
#ifndef _ALPHA_
/* 2342 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2344 */	NdrFcShort( 0xa ),	/* 10 */
/* 2346 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2348 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2350 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2352 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2354 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2356 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byAlgorithmRef */

/* 2358 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2360 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2362 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter bySecretRef */

/* 2364 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2366 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2368 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pChallenge */

/* 2370 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2372 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2374 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2376 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2378 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2380 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2382 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2384 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2386 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetChallenge */

/* 2388 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2390 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2394 */	NdrFcShort( 0xa ),	/* 10 */
#ifndef _ALPHA_
/* 2396 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2398 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2400 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2402 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 2404 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2406 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2408 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2410 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter lBytesExpected */

/* 2412 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2414 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2416 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2418 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2420 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2422 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2424 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2426 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2428 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetData */

/* 2430 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2432 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2436 */	NdrFcShort( 0xb ),	/* 11 */
#ifndef _ALPHA_
/* 2438 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2440 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2442 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2444 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2446 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2448 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2450 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2452 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2454 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2456 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2458 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2460 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2462 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2464 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lBytesToGet */

/* 2466 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2468 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2470 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2472 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2474 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2476 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2478 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2480 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2482 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetResponse */

/* 2484 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2486 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2490 */	NdrFcShort( 0xc ),	/* 12 */
#ifndef _ALPHA_
/* 2492 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2494 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2496 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2498 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2500 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2502 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2504 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2506 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2508 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2510 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2512 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2514 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2516 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2518 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lDataLength */

/* 2520 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2522 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2524 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2526 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2528 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2530 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2532 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2534 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2536 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure InternalAuthenticate */

/* 2538 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2540 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2544 */	NdrFcShort( 0xd ),	/* 13 */
#ifndef _ALPHA_
/* 2546 */	NdrFcShort( 0x1c ),	/* x86, MIPS, PPC Stack size/offset = 28 */
#else
			NdrFcShort( 0x38 ),	/* Alpha Stack size/offset = 56 */
#endif
/* 2548 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2550 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2552 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 2554 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2556 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2558 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2560 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byAlgorithmRef */

/* 2562 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2564 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2566 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter bySecretRef */

/* 2568 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2570 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2572 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pChallenge */

/* 2574 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2576 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2578 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter lReplyBytes */

/* 2580 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2582 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2584 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2586 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2588 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2590 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2592 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2594 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2596 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ManageChannel */

/* 2598 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2600 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2604 */	NdrFcShort( 0xe ),	/* 14 */
#ifndef _ALPHA_
/* 2606 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2608 */	NdrFcShort( 0xa ),	/* 10 */
/* 2610 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2612 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 2614 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2616 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2618 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2620 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byChannelState */

/* 2622 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2624 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2626 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byChannel */

/* 2628 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2630 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2632 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2634 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2636 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2638 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2640 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2642 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2644 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure PutData */

/* 2646 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2648 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2652 */	NdrFcShort( 0xf ),	/* 15 */
#ifndef _ALPHA_
/* 2654 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2656 */	NdrFcShort( 0xa ),	/* 10 */
/* 2658 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2660 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2662 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2664 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2666 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2668 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2670 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2672 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2674 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2676 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2678 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2680 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2682 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2684 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2686 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2688 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2690 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2692 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2694 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2696 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2698 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ReadBinary */

/* 2700 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2702 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2706 */	NdrFcShort( 0x10 ),	/* 16 */
#ifndef _ALPHA_
/* 2708 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2710 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2712 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2714 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2716 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2718 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2720 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2722 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2724 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2726 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2728 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2730 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2732 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2734 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lBytesToRead */

/* 2736 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2738 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2740 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2742 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2744 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2746 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2748 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2750 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2752 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ReadRecord */

/* 2754 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2756 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2760 */	NdrFcShort( 0x11 ),	/* 17 */
#ifndef _ALPHA_
/* 2762 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2764 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2766 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2768 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2770 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2772 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2774 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2776 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRecordId */

/* 2778 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2780 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2782 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byRefCtrl */

/* 2784 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2786 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2788 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lBytesToRead */

/* 2790 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2792 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2794 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2796 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2798 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2800 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2802 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2804 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2806 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SelectFile */

/* 2808 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2810 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2814 */	NdrFcShort( 0x12 ),	/* 18 */
#ifndef _ALPHA_
/* 2816 */	NdrFcShort( 0x1c ),	/* x86, MIPS, PPC Stack size/offset = 28 */
#else
			NdrFcShort( 0x38 ),	/* Alpha Stack size/offset = 56 */
#endif
/* 2818 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2820 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2822 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 2824 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2826 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2828 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2830 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2832 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2834 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2836 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2838 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2840 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2842 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2844 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2846 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2848 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter lBytesToRead */

/* 2850 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2852 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2854 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2856 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2858 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2860 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2862 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2864 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2866 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UpdateBinary */

/* 2868 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2870 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2874 */	NdrFcShort( 0x14 ),	/* 20 */
#ifndef _ALPHA_
/* 2876 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2878 */	NdrFcShort( 0xa ),	/* 10 */
/* 2880 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2882 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2884 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2886 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2888 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2890 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2892 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2894 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2896 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2898 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2900 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2902 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2904 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2906 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2908 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2910 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2912 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2914 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2916 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2918 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2920 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UpdateRecord */

/* 2922 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2924 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2928 */	NdrFcShort( 0x15 ),	/* 21 */
#ifndef _ALPHA_
/* 2930 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 2932 */	NdrFcShort( 0xa ),	/* 10 */
/* 2934 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2936 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2938 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2940 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2942 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2944 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRecordId */

/* 2946 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2948 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 2950 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byRefCtrl */

/* 2952 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 2954 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 2956 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2958 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 2960 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 2962 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2964 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 2966 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 2968 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 2970 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 2972 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2974 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Verify */

/* 2976 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2978 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2982 */	NdrFcShort( 0x16 ),	/* 22 */
#ifndef _ALPHA_
/* 2984 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 2986 */	NdrFcShort( 0x5 ),	/* 5 */
/* 2988 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2990 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 2992 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2994 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2996 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2998 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRefCtrl */

/* 3000 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3002 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3004 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3006 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 3008 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3010 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3012 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 3014 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3016 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 3018 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3020 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3022 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure WriteBinary */

/* 3024 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3026 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3030 */	NdrFcShort( 0x17 ),	/* 23 */
#ifndef _ALPHA_
/* 3032 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 3034 */	NdrFcShort( 0xa ),	/* 10 */
/* 3036 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3038 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3040 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3042 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3044 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3046 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 3048 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3050 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3052 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 3054 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3056 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3058 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3060 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 3062 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3064 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3066 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 3068 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3070 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 3072 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3074 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 3076 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure WriteRecord */

/* 3078 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3080 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3084 */	NdrFcShort( 0x18 ),	/* 24 */
#ifndef _ALPHA_
/* 3086 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 3088 */	NdrFcShort( 0xa ),	/* 10 */
/* 3090 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3092 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3094 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3096 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3098 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3100 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRecordId */

/* 3102 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3104 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3106 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byRefCtrl */

/* 3108 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3110 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3112 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3114 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 3116 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3118 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3120 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 3122 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3124 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 3126 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3128 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 3130 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_CardHandle */

/* 3132 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3134 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3138 */	NdrFcShort( 0x8 ),	/* 8 */
#ifndef _ALPHA_
/* 3140 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3142 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3144 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3146 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3148 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3150 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3152 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3154 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pHandle */

/* 3156 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 3158 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3160 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3162 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3164 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3166 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Protocol */

/* 3168 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3170 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3174 */	NdrFcShort( 0xa ),	/* 10 */
#ifndef _ALPHA_
/* 3176 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3178 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3180 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3182 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3184 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3186 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3188 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3190 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pProtocol */

/* 3192 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 3194 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3196 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3198 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3200 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3202 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Status */

/* 3204 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3206 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3210 */	NdrFcShort( 0xb ),	/* 11 */
#ifndef _ALPHA_
/* 3212 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3214 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3216 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3218 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3220 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3222 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3224 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3226 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStatus */

/* 3228 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 3230 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3232 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3234 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3236 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3238 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure AttachByHandle */

/* 3240 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3242 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3246 */	NdrFcShort( 0xc ),	/* 12 */
#ifndef _ALPHA_
/* 3248 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3250 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3252 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3254 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3256 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3258 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3260 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3262 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter hCard */

/* 3264 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3266 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3268 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3270 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3272 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3274 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure AttachByReader */

/* 3276 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3278 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3282 */	NdrFcShort( 0xd ),	/* 13 */
#ifndef _ALPHA_
/* 3284 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 3286 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3288 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3290 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3292 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3294 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3296 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3298 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bstrReaderName */

/* 3300 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3302 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3304 */	NdrFcShort( 0x4f8 ),	/* Type Offset=1272 */

	/* Parameter ShareMode */

/* 3306 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3308 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3310 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter PrefProtocol */

/* 3312 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3314 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3316 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3318 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3320 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3322 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Detach */

/* 3324 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3326 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3330 */	NdrFcShort( 0xe ),	/* 14 */
#ifndef _ALPHA_
/* 3332 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3334 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3336 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3338 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3340 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3342 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3344 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3346 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter Disposition */

/* 3348 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3350 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3352 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3354 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3356 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3358 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ReAttach */

/* 3360 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3362 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3366 */	NdrFcShort( 0x10 ),	/* 16 */
#ifndef _ALPHA_
/* 3368 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3370 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3372 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3374 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 3376 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3378 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3380 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3382 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ShareMode */

/* 3384 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3386 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3388 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter InitState */

/* 3390 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3392 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3394 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3396 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3398 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3400 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Transaction */

/* 3402 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3404 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3408 */	NdrFcShort( 0x11 ),	/* 17 */
#ifndef _ALPHA_
/* 3410 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3412 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3414 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3416 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 3418 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3420 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3422 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3424 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppCmd */

/* 3426 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 3428 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3430 */	NdrFcShort( 0x4da ),	/* Type Offset=1242 */

	/* Return value */

/* 3432 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3434 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3436 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UnlockSCard */

/* 3438 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3440 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3444 */	NdrFcShort( 0x12 ),	/* 18 */
#ifndef _ALPHA_
/* 3446 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3448 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3450 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3452 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3454 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3456 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3458 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3460 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter Disposition */

/* 3462 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3464 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3466 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3468 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3470 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3472 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetProviderCardId */

/* 3474 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3476 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3480 */	NdrFcShort( 0x7 ),	/* 7 */
#ifndef _ALPHA_
/* 3482 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3484 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3486 */	NdrFcShort( 0x30 ),	/* 48 */
/* 3488 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3490 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3492 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3494 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3496 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bstrCardName */

/* 3498 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3500 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3502 */	NdrFcShort( 0x4f8 ),	/* Type Offset=1272 */

	/* Parameter ppguidProviderId */

/* 3504 */	NdrFcShort( 0x2012 ),	/* Flags:  must free, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 3506 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3508 */	NdrFcShort( 0x502 ),	/* Type Offset=1282 */

	/* Return value */

/* 3510 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3512 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3514 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListCardInterfaces */

/* 3516 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3518 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3522 */	NdrFcShort( 0x8 ),	/* 8 */
#ifndef _ALPHA_
/* 3524 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3526 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3528 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3530 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3532 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3534 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3536 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3538 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bstrCardName */

/* 3540 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3542 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3544 */	NdrFcShort( 0x4f8 ),	/* Type Offset=1272 */

	/* Parameter ppInterfaceGuids */

/* 3546 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 3548 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3550 */	NdrFcShort( 0x4a6 ),	/* Type Offset=1190 */

	/* Return value */

/* 3552 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3554 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3556 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListCards */

/* 3558 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3560 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3564 */	NdrFcShort( 0x9 ),	/* 9 */
#ifndef _ALPHA_
/* 3566 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 3568 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3570 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3572 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3574 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3576 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3578 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3580 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pAtr */

/* 3582 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
#ifndef _ALPHA_
/* 3584 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3586 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter pInterfaceGuids */

/* 3588 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3590 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3592 */	NdrFcShort( 0x4b8 ),	/* Type Offset=1208 */

	/* Parameter localeId */

/* 3594 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3596 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3598 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCardNames */

/* 3600 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 3602 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3604 */	NdrFcShort( 0x4a6 ),	/* Type Offset=1190 */

	/* Return value */

/* 3606 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3608 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 3610 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListReaderGroups */

/* 3612 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3614 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3618 */	NdrFcShort( 0xa ),	/* 10 */
#ifndef _ALPHA_
/* 3620 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3622 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3624 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3626 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 3628 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 3630 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3632 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3634 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter localeId */

/* 3636 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3638 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3640 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppReaderGroups */

/* 3642 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 3644 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3646 */	NdrFcShort( 0x4a6 ),	/* Type Offset=1190 */

	/* Return value */

/* 3648 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3650 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3652 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListReaders */

/* 3654 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3656 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3660 */	NdrFcShort( 0xb ),	/* 11 */
#ifndef _ALPHA_
/* 3662 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3664 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3666 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3668 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 3670 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 3672 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3674 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3676 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter localeId */

/* 3678 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3680 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3682 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppReaders */

/* 3684 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
#ifndef _ALPHA_
/* 3686 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3688 */	NdrFcShort( 0x4a6 ),	/* Type Offset=1190 */

	/* Return value */

/* 3690 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3692 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3694 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConfigureCardGuidSearch */

/* 3696 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3698 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3702 */	NdrFcShort( 0x7 ),	/* 7 */
#ifndef _ALPHA_
/* 3704 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 3706 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3708 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3710 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3712 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3714 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3716 */	NdrFcShort( 0x25 ),	/* 37 */
/* 3718 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pCardGuids */

/* 3720 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3722 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3724 */	NdrFcShort( 0x4b8 ),	/* Type Offset=1208 */

	/* Parameter pGroupNames */

/* 3726 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3728 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3730 */	NdrFcShort( 0x4b8 ),	/* Type Offset=1208 */

	/* Parameter bstrTitle */

/* 3732 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3734 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3736 */	NdrFcShort( 0x4f8 ),	/* Type Offset=1272 */

	/* Parameter lFlags */

/* 3738 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3740 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3742 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3744 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3746 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 3748 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConfigureCardNameSearch */

/* 3750 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3752 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3756 */	NdrFcShort( 0x8 ),	/* 8 */
#ifndef _ALPHA_
/* 3758 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 3760 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3762 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3764 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3766 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3768 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3770 */	NdrFcShort( 0x25 ),	/* 37 */
/* 3772 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pCardNames */

/* 3774 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3776 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3778 */	NdrFcShort( 0x4b8 ),	/* Type Offset=1208 */

	/* Parameter pGroupNames */

/* 3780 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3782 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3784 */	NdrFcShort( 0x4b8 ),	/* Type Offset=1208 */

	/* Parameter bstrTitle */

/* 3786 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
#ifndef _ALPHA_
/* 3788 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3790 */	NdrFcShort( 0x4f8 ),	/* Type Offset=1272 */

	/* Parameter lFlags */

/* 3792 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3794 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3796 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3798 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3800 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 3802 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure FindCard */

/* 3804 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3806 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3810 */	NdrFcShort( 0x9 ),	/* 9 */
#ifndef _ALPHA_
/* 3812 */	NdrFcShort( 0x18 ),	/* x86, MIPS, PPC Stack size/offset = 24 */
#else
			NdrFcShort( 0x30 ),	/* Alpha Stack size/offset = 48 */
#endif
/* 3814 */	NdrFcShort( 0x18 ),	/* 24 */
/* 3816 */	NdrFcShort( 0x38 ),	/* 56 */
/* 3818 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x5,		/* 5 */
/* 3820 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3822 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3824 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3826 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ShareMode */

/* 3828 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3830 */	NdrFcShort( 0x4 ),	/* x86, MIPS, PPC Stack size/offset = 4 */
#else
			NdrFcShort( 0x8 ),	/* Alpha Stack size/offset = 8 */
#endif
/* 3832 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter Protocols */

/* 3834 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3836 */	NdrFcShort( 0x8 ),	/* x86, MIPS, PPC Stack size/offset = 8 */
#else
			NdrFcShort( 0x10 ),	/* Alpha Stack size/offset = 16 */
#endif
/* 3838 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter lFlags */

/* 3840 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
#ifndef _ALPHA_
/* 3842 */	NdrFcShort( 0xc ),	/* x86, MIPS, PPC Stack size/offset = 12 */
#else
			NdrFcShort( 0x18 ),	/* Alpha Stack size/offset = 24 */
#endif
/* 3844 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCardInfo */

/* 3846 */	NdrFcShort( 0x2012 ),	/* Flags:  must free, out, srv alloc size=8 */
#ifndef _ALPHA_
/* 3848 */	NdrFcShort( 0x10 ),	/* x86, MIPS, PPC Stack size/offset = 16 */
#else
			NdrFcShort( 0x20 ),	/* Alpha Stack size/offset = 32 */
#endif
/* 3850 */	NdrFcShort( 0x50a ),	/* Type Offset=1290 */

	/* Return value */

/* 3852 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
#ifndef _ALPHA_
/* 3854 */	NdrFcShort( 0x14 ),	/* x86, MIPS, PPC Stack size/offset = 20 */
#else
			NdrFcShort( 0x28 ),	/* Alpha Stack size/offset = 40 */
#endif
/* 3856 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

			0x0
        }
    };

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
    {
        0,
        {
			NdrFcShort( 0x0 ),	/* 0 */
/*  2 */	
			0x11, 0x10,	/* FC_RP [pointer_deref] */
/*  4 */	NdrFcShort( 0x2 ),	/* Offset= 2 (6) */
/*  6 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/*  8 */	NdrFcLong( 0xc ),	/* 12 */
/* 12 */	NdrFcShort( 0x0 ),	/* 0 */
/* 14 */	NdrFcShort( 0x0 ),	/* 0 */
/* 16 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 18 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 20 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 22 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 24 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 26 */	NdrFcShort( 0x2 ),	/* Offset= 2 (28) */
/* 28 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 30 */	NdrFcLong( 0xe126f8fe ),	/* -517539586 */
/* 34 */	NdrFcShort( 0xa7af ),	/* -22609 */
/* 36 */	NdrFcShort( 0x11d0 ),	/* 4560 */
/* 38 */	0xb8,		/* 184 */
			0x8a,		/* 138 */
/* 40 */	0x0,		/* 0 */
			0xc0,		/* 192 */
/* 42 */	0x4f,		/* 79 */
			0xd4,		/* 212 */
/* 44 */	0x24,		/* 36 */
			0xb9,		/* 185 */
/* 46 */	
			0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 48 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 50 */	
			0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 52 */	0x2,		/* FC_CHAR */
			0x5c,		/* FC_PAD */
/* 54 */	
			0x11, 0x0,	/* FC_RP */
/* 56 */	NdrFcShort( 0x2 ),	/* Offset= 2 (58) */
/* 58 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 60 */	NdrFcShort( 0x14 ),	/* 20 */
/* 62 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 64 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 66 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 68 */	
			0x11, 0x10,	/* FC_RP [pointer_deref] */
/* 70 */	NdrFcShort( 0xffffffd6 ),	/* Offset= -42 (28) */
/* 72 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 74 */	NdrFcShort( 0x2 ),	/* Offset= 2 (76) */
/* 76 */	
			0x13, 0x0,	/* FC_OP */
/* 78 */	NdrFcShort( 0x50 ),	/* Offset= 80 (158) */
/* 80 */	
			0x13, 0x0,	/* FC_OP */
/* 82 */	NdrFcShort( 0x2 ),	/* Offset= 2 (84) */
/* 84 */	
			0x2a,		/* FC_ENCAPSULATED_UNION */
			0x88,		/* 136 */
/* 86 */	NdrFcShort( 0x8 ),	/* 8 */
/* 88 */	NdrFcShort( 0x3 ),	/* 3 */
/* 90 */	NdrFcLong( 0x48746457 ),	/* 1215587415 */
/* 94 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 96 */	NdrFcLong( 0x52746457 ),	/* 1383359575 */
/* 100 */	NdrFcShort( 0xa ),	/* Offset= 10 (110) */
/* 102 */	NdrFcLong( 0x50746457 ),	/* 1349805143 */
/* 106 */	NdrFcShort( 0x800b ),	/* Simple arm type: FC_HYPER */
/* 108 */	NdrFcShort( 0xffffffff ),	/* Offset= -1 (107) */
/* 110 */	
			0x13, 0x0,	/* FC_OP */
/* 112 */	NdrFcShort( 0xe ),	/* Offset= 14 (126) */
/* 114 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 116 */	NdrFcShort( 0x1 ),	/* 1 */
/* 118 */	0x9,		/* Corr desc: FC_ULONG */
			0x0,		/*  */
/* 120 */	NdrFcShort( 0xfffc ),	/* -4 */
/* 122 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 124 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 126 */	
			0x17,		/* FC_CSTRUCT */
			0x3,		/* 3 */
/* 128 */	NdrFcShort( 0x8 ),	/* 8 */
/* 130 */	NdrFcShort( 0xfffffff0 ),	/* Offset= -16 (114) */
/* 132 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 134 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 136 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 138 */	NdrFcShort( 0x0 ),	/* 0 */
/* 140 */	NdrFcShort( 0x4 ),	/* 4 */
/* 142 */	NdrFcShort( 0x0 ),	/* 0 */
/* 144 */	NdrFcShort( 0xffffffc0 ),	/* Offset= -64 (80) */
/* 146 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 148 */	NdrFcShort( 0x1 ),	/* 1 */
/* 150 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 152 */	NdrFcShort( 0x4 ),	/* 4 */
/* 154 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 156 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 158 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 160 */	NdrFcShort( 0xc ),	/* 12 */
/* 162 */	NdrFcShort( 0x0 ),	/* 0 */
/* 164 */	NdrFcShort( 0xa ),	/* Offset= 10 (174) */
/* 166 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 168 */	NdrFcShort( 0xffffffe0 ),	/* Offset= -32 (136) */
/* 170 */	0x8,		/* FC_LONG */
			0x36,		/* FC_POINTER */
/* 172 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 174 */	
			0x13, 0x0,	/* FC_OP */
/* 176 */	NdrFcShort( 0xffffffe2 ),	/* Offset= -30 (146) */
/* 178 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 180 */	NdrFcShort( 0x3f2 ),	/* Offset= 1010 (1190) */
/* 182 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 184 */	NdrFcShort( 0x2 ),	/* Offset= 2 (186) */
/* 186 */	
			0x13, 0x0,	/* FC_OP */
/* 188 */	NdrFcShort( 0x3d8 ),	/* Offset= 984 (1172) */
/* 190 */	
			0x2a,		/* FC_ENCAPSULATED_UNION */
			0x49,		/* 73 */
/* 192 */	NdrFcShort( 0x18 ),	/* 24 */
/* 194 */	NdrFcShort( 0xa ),	/* 10 */
/* 196 */	NdrFcLong( 0x8 ),	/* 8 */
/* 200 */	NdrFcShort( 0x70 ),	/* Offset= 112 (312) */
/* 202 */	NdrFcLong( 0xd ),	/* 13 */
/* 206 */	NdrFcShort( 0xa6 ),	/* Offset= 166 (372) */
/* 208 */	NdrFcLong( 0x9 ),	/* 9 */
/* 212 */	NdrFcShort( 0xd8 ),	/* Offset= 216 (428) */
/* 214 */	NdrFcLong( 0xc ),	/* 12 */
/* 218 */	NdrFcShort( 0x2bc ),	/* Offset= 700 (918) */
/* 220 */	NdrFcLong( 0x24 ),	/* 36 */
/* 224 */	NdrFcShort( 0x2e6 ),	/* Offset= 742 (966) */
/* 226 */	NdrFcLong( 0x800d ),	/* 32781 */
/* 230 */	NdrFcShort( 0x302 ),	/* Offset= 770 (1000) */
/* 232 */	NdrFcLong( 0x10 ),	/* 16 */
/* 236 */	NdrFcShort( 0x31c ),	/* Offset= 796 (1032) */
/* 238 */	NdrFcLong( 0x2 ),	/* 2 */
/* 242 */	NdrFcShort( 0x336 ),	/* Offset= 822 (1064) */
/* 244 */	NdrFcLong( 0x3 ),	/* 3 */
/* 248 */	NdrFcShort( 0x350 ),	/* Offset= 848 (1096) */
/* 250 */	NdrFcLong( 0x14 ),	/* 20 */
/* 254 */	NdrFcShort( 0x36a ),	/* Offset= 874 (1128) */
/* 256 */	NdrFcShort( 0xffffffff ),	/* Offset= -1 (255) */
/* 258 */	
			0x1b,		/* FC_CARRAY */
			0x1,		/* 1 */
/* 260 */	NdrFcShort( 0x2 ),	/* 2 */
/* 262 */	0x9,		/* Corr desc: FC_ULONG */
			0x0,		/*  */
/* 264 */	NdrFcShort( 0xfffc ),	/* -4 */
/* 266 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 268 */	0x6,		/* FC_SHORT */
			0x5b,		/* FC_END */
/* 270 */	
			0x17,		/* FC_CSTRUCT */
			0x3,		/* 3 */
/* 272 */	NdrFcShort( 0x8 ),	/* 8 */
/* 274 */	NdrFcShort( 0xfffffff0 ),	/* Offset= -16 (258) */
/* 276 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 278 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 280 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 282 */	NdrFcShort( 0x4 ),	/* 4 */
/* 284 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 286 */	NdrFcShort( 0x0 ),	/* 0 */
/* 288 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 290 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 292 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 294 */	NdrFcShort( 0x4 ),	/* 4 */
/* 296 */	NdrFcShort( 0x0 ),	/* 0 */
/* 298 */	NdrFcShort( 0x1 ),	/* 1 */
/* 300 */	NdrFcShort( 0x0 ),	/* 0 */
/* 302 */	NdrFcShort( 0x0 ),	/* 0 */
/* 304 */	0x13, 0x0,	/* FC_OP */
/* 306 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (270) */
/* 308 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 310 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 312 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 314 */	NdrFcShort( 0x8 ),	/* 8 */
/* 316 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 318 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 320 */	NdrFcShort( 0x4 ),	/* 4 */
/* 322 */	NdrFcShort( 0x4 ),	/* 4 */
/* 324 */	0x11, 0x0,	/* FC_RP */
/* 326 */	NdrFcShort( 0xffffffd2 ),	/* Offset= -46 (280) */
/* 328 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 330 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 332 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 334 */	NdrFcLong( 0x0 ),	/* 0 */
/* 338 */	NdrFcShort( 0x0 ),	/* 0 */
/* 340 */	NdrFcShort( 0x0 ),	/* 0 */
/* 342 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 344 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 346 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 348 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 350 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 352 */	NdrFcShort( 0x0 ),	/* 0 */
/* 354 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 356 */	NdrFcShort( 0x0 ),	/* 0 */
/* 358 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 360 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 364 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 366 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 368 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (332) */
/* 370 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 372 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 374 */	NdrFcShort( 0x8 ),	/* 8 */
/* 376 */	NdrFcShort( 0x0 ),	/* 0 */
/* 378 */	NdrFcShort( 0x6 ),	/* Offset= 6 (384) */
/* 380 */	0x8,		/* FC_LONG */
			0x36,		/* FC_POINTER */
/* 382 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 384 */	
			0x11, 0x0,	/* FC_RP */
/* 386 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (350) */
/* 388 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 390 */	NdrFcLong( 0x20400 ),	/* 132096 */
/* 394 */	NdrFcShort( 0x0 ),	/* 0 */
/* 396 */	NdrFcShort( 0x0 ),	/* 0 */
/* 398 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 400 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 402 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 404 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 406 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 408 */	NdrFcShort( 0x0 ),	/* 0 */
/* 410 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 412 */	NdrFcShort( 0x0 ),	/* 0 */
/* 414 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 416 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 420 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 422 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 424 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (388) */
/* 426 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 428 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 430 */	NdrFcShort( 0x8 ),	/* 8 */
/* 432 */	NdrFcShort( 0x0 ),	/* 0 */
/* 434 */	NdrFcShort( 0x6 ),	/* Offset= 6 (440) */
/* 436 */	0x8,		/* FC_LONG */
			0x36,		/* FC_POINTER */
/* 438 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 440 */	
			0x11, 0x0,	/* FC_RP */
/* 442 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (406) */
/* 444 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0x9,		/* FC_ULONG */
/* 446 */	0x7,		/* Corr desc: FC_USHORT */
			0x0,		/*  */
/* 448 */	NdrFcShort( 0xfff8 ),	/* -8 */
/* 450 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 452 */	NdrFcShort( 0x2 ),	/* Offset= 2 (454) */
/* 454 */	NdrFcShort( 0x10 ),	/* 16 */
/* 456 */	NdrFcShort( 0x2b ),	/* 43 */
/* 458 */	NdrFcLong( 0x3 ),	/* 3 */
/* 462 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 464 */	NdrFcLong( 0x11 ),	/* 17 */
/* 468 */	NdrFcShort( 0x8001 ),	/* Simple arm type: FC_BYTE */
/* 470 */	NdrFcLong( 0x2 ),	/* 2 */
/* 474 */	NdrFcShort( 0x8006 ),	/* Simple arm type: FC_SHORT */
/* 476 */	NdrFcLong( 0x4 ),	/* 4 */
/* 480 */	NdrFcShort( 0x800a ),	/* Simple arm type: FC_FLOAT */
/* 482 */	NdrFcLong( 0x5 ),	/* 5 */
/* 486 */	NdrFcShort( 0x800c ),	/* Simple arm type: FC_DOUBLE */
/* 488 */	NdrFcLong( 0xb ),	/* 11 */
/* 492 */	NdrFcShort( 0x8006 ),	/* Simple arm type: FC_SHORT */
/* 494 */	NdrFcLong( 0xa ),	/* 10 */
/* 498 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 500 */	NdrFcLong( 0x6 ),	/* 6 */
/* 504 */	NdrFcShort( 0xd6 ),	/* Offset= 214 (718) */
/* 506 */	NdrFcLong( 0x7 ),	/* 7 */
/* 510 */	NdrFcShort( 0x800c ),	/* Simple arm type: FC_DOUBLE */
/* 512 */	NdrFcLong( 0x8 ),	/* 8 */
/* 516 */	NdrFcShort( 0xd0 ),	/* Offset= 208 (724) */
/* 518 */	NdrFcLong( 0xd ),	/* 13 */
/* 522 */	NdrFcShort( 0xffffff42 ),	/* Offset= -190 (332) */
/* 524 */	NdrFcLong( 0x9 ),	/* 9 */
/* 528 */	NdrFcShort( 0xffffff74 ),	/* Offset= -140 (388) */
/* 530 */	NdrFcLong( 0x2000 ),	/* 8192 */
/* 534 */	NdrFcShort( 0xc2 ),	/* Offset= 194 (728) */
/* 536 */	NdrFcLong( 0x24 ),	/* 36 */
/* 540 */	NdrFcShort( 0xc4 ),	/* Offset= 196 (736) */
/* 542 */	NdrFcLong( 0x4024 ),	/* 16420 */
/* 546 */	NdrFcShort( 0xbe ),	/* Offset= 190 (736) */
/* 548 */	NdrFcLong( 0x4011 ),	/* 16401 */
/* 552 */	NdrFcShort( 0xee ),	/* Offset= 238 (790) */
/* 554 */	NdrFcLong( 0x4002 ),	/* 16386 */
/* 558 */	NdrFcShort( 0xec ),	/* Offset= 236 (794) */
/* 560 */	NdrFcLong( 0x4003 ),	/* 16387 */
/* 564 */	NdrFcShort( 0xea ),	/* Offset= 234 (798) */
/* 566 */	NdrFcLong( 0x4004 ),	/* 16388 */
/* 570 */	NdrFcShort( 0xe8 ),	/* Offset= 232 (802) */
/* 572 */	NdrFcLong( 0x4005 ),	/* 16389 */
/* 576 */	NdrFcShort( 0xe6 ),	/* Offset= 230 (806) */
/* 578 */	NdrFcLong( 0x400b ),	/* 16395 */
/* 582 */	NdrFcShort( 0xd4 ),	/* Offset= 212 (794) */
/* 584 */	NdrFcLong( 0x400a ),	/* 16394 */
/* 588 */	NdrFcShort( 0xd2 ),	/* Offset= 210 (798) */
/* 590 */	NdrFcLong( 0x4006 ),	/* 16390 */
/* 594 */	NdrFcShort( 0xd8 ),	/* Offset= 216 (810) */
/* 596 */	NdrFcLong( 0x4007 ),	/* 16391 */
/* 600 */	NdrFcShort( 0xce ),	/* Offset= 206 (806) */
/* 602 */	NdrFcLong( 0x4008 ),	/* 16392 */
/* 606 */	NdrFcShort( 0xd0 ),	/* Offset= 208 (814) */
/* 608 */	NdrFcLong( 0x400d ),	/* 16397 */
/* 612 */	NdrFcShort( 0xce ),	/* Offset= 206 (818) */
/* 614 */	NdrFcLong( 0x4009 ),	/* 16393 */
/* 618 */	NdrFcShort( 0xcc ),	/* Offset= 204 (822) */
/* 620 */	NdrFcLong( 0x6000 ),	/* 24576 */
/* 624 */	NdrFcShort( 0xca ),	/* Offset= 202 (826) */
/* 626 */	NdrFcLong( 0x400c ),	/* 16396 */
/* 630 */	NdrFcShort( 0xd0 ),	/* Offset= 208 (838) */
/* 632 */	NdrFcLong( 0x10 ),	/* 16 */
/* 636 */	NdrFcShort( 0x8002 ),	/* Simple arm type: FC_CHAR */
/* 638 */	NdrFcLong( 0x12 ),	/* 18 */
/* 642 */	NdrFcShort( 0x8006 ),	/* Simple arm type: FC_SHORT */
/* 644 */	NdrFcLong( 0x13 ),	/* 19 */
/* 648 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 650 */	NdrFcLong( 0x16 ),	/* 22 */
/* 654 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 656 */	NdrFcLong( 0x17 ),	/* 23 */
/* 660 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 662 */	NdrFcLong( 0xe ),	/* 14 */
/* 666 */	NdrFcShort( 0xb4 ),	/* Offset= 180 (846) */
/* 668 */	NdrFcLong( 0x400e ),	/* 16398 */
/* 672 */	NdrFcShort( 0xba ),	/* Offset= 186 (858) */
/* 674 */	NdrFcLong( 0x4010 ),	/* 16400 */
/* 678 */	NdrFcShort( 0xb8 ),	/* Offset= 184 (862) */
/* 680 */	NdrFcLong( 0x4012 ),	/* 16402 */
/* 684 */	NdrFcShort( 0x6e ),	/* Offset= 110 (794) */
/* 686 */	NdrFcLong( 0x4013 ),	/* 16403 */
/* 690 */	NdrFcShort( 0x6c ),	/* Offset= 108 (798) */
/* 692 */	NdrFcLong( 0x4016 ),	/* 16406 */
/* 696 */	NdrFcShort( 0x66 ),	/* Offset= 102 (798) */
/* 698 */	NdrFcLong( 0x4017 ),	/* 16407 */
/* 702 */	NdrFcShort( 0x60 ),	/* Offset= 96 (798) */
/* 704 */	NdrFcLong( 0x0 ),	/* 0 */
/* 708 */	NdrFcShort( 0x0 ),	/* Offset= 0 (708) */
/* 710 */	NdrFcLong( 0x1 ),	/* 1 */
/* 714 */	NdrFcShort( 0x0 ),	/* Offset= 0 (714) */
/* 716 */	NdrFcShort( 0xffffffff ),	/* Offset= -1 (715) */
/* 718 */	
			0x15,		/* FC_STRUCT */
			0x7,		/* 7 */
/* 720 */	NdrFcShort( 0x8 ),	/* 8 */
/* 722 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 724 */	
			0x13, 0x0,	/* FC_OP */
/* 726 */	NdrFcShort( 0xfffffe38 ),	/* Offset= -456 (270) */
/* 728 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 730 */	NdrFcShort( 0x2 ),	/* Offset= 2 (732) */
/* 732 */	
			0x13, 0x0,	/* FC_OP */
/* 734 */	NdrFcShort( 0x1b6 ),	/* Offset= 438 (1172) */
/* 736 */	
			0x13, 0x0,	/* FC_OP */
/* 738 */	NdrFcShort( 0x20 ),	/* Offset= 32 (770) */
/* 740 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 742 */	NdrFcLong( 0x2f ),	/* 47 */
/* 746 */	NdrFcShort( 0x0 ),	/* 0 */
/* 748 */	NdrFcShort( 0x0 ),	/* 0 */
/* 750 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 752 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 754 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 756 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 758 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 760 */	NdrFcShort( 0x1 ),	/* 1 */
/* 762 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 764 */	NdrFcShort( 0x4 ),	/* 4 */
/* 766 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 768 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 770 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 772 */	NdrFcShort( 0x10 ),	/* 16 */
/* 774 */	NdrFcShort( 0x0 ),	/* 0 */
/* 776 */	NdrFcShort( 0xa ),	/* Offset= 10 (786) */
/* 778 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 780 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 782 */	NdrFcShort( 0xffffffd6 ),	/* Offset= -42 (740) */
/* 784 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 786 */	
			0x13, 0x0,	/* FC_OP */
/* 788 */	NdrFcShort( 0xffffffe2 ),	/* Offset= -30 (758) */
/* 790 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 792 */	0x1,		/* FC_BYTE */
			0x5c,		/* FC_PAD */
/* 794 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 796 */	0x6,		/* FC_SHORT */
			0x5c,		/* FC_PAD */
/* 798 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 800 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 802 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 804 */	0xa,		/* FC_FLOAT */
			0x5c,		/* FC_PAD */
/* 806 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 808 */	0xc,		/* FC_DOUBLE */
			0x5c,		/* FC_PAD */
/* 810 */	
			0x13, 0x0,	/* FC_OP */
/* 812 */	NdrFcShort( 0xffffffa2 ),	/* Offset= -94 (718) */
/* 814 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 816 */	NdrFcShort( 0xffffffa4 ),	/* Offset= -92 (724) */
/* 818 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 820 */	NdrFcShort( 0xfffffe18 ),	/* Offset= -488 (332) */
/* 822 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 824 */	NdrFcShort( 0xfffffe4c ),	/* Offset= -436 (388) */
/* 826 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 828 */	NdrFcShort( 0x2 ),	/* Offset= 2 (830) */
/* 830 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 832 */	NdrFcShort( 0x2 ),	/* Offset= 2 (834) */
/* 834 */	
			0x13, 0x0,	/* FC_OP */
/* 836 */	NdrFcShort( 0x150 ),	/* Offset= 336 (1172) */
/* 838 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 840 */	NdrFcShort( 0x2 ),	/* Offset= 2 (842) */
/* 842 */	
			0x13, 0x0,	/* FC_OP */
/* 844 */	NdrFcShort( 0x16 ),	/* Offset= 22 (866) */
/* 846 */	
			0x15,		/* FC_STRUCT */
			0x7,		/* 7 */
/* 848 */	NdrFcShort( 0x10 ),	/* 16 */
/* 850 */	0x6,		/* FC_SHORT */
			0x1,		/* FC_BYTE */
/* 852 */	0x1,		/* FC_BYTE */
			0x38,		/* FC_ALIGNM4 */
/* 854 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 856 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 858 */	
			0x13, 0x0,	/* FC_OP */
/* 860 */	NdrFcShort( 0xfffffff2 ),	/* Offset= -14 (846) */
/* 862 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 864 */	0x2,		/* FC_CHAR */
			0x5c,		/* FC_PAD */
/* 866 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 868 */	NdrFcShort( 0x20 ),	/* 32 */
/* 870 */	NdrFcShort( 0x0 ),	/* 0 */
/* 872 */	NdrFcShort( 0x0 ),	/* Offset= 0 (872) */
/* 874 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 876 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 878 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 880 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 882 */	NdrFcShort( 0xfffffe4a ),	/* Offset= -438 (444) */
/* 884 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 886 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 888 */	NdrFcShort( 0x4 ),	/* 4 */
/* 890 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 892 */	NdrFcShort( 0x0 ),	/* 0 */
/* 894 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 896 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 898 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 900 */	NdrFcShort( 0x4 ),	/* 4 */
/* 902 */	NdrFcShort( 0x0 ),	/* 0 */
/* 904 */	NdrFcShort( 0x1 ),	/* 1 */
/* 906 */	NdrFcShort( 0x0 ),	/* 0 */
/* 908 */	NdrFcShort( 0x0 ),	/* 0 */
/* 910 */	0x13, 0x0,	/* FC_OP */
/* 912 */	NdrFcShort( 0xffffffd2 ),	/* Offset= -46 (866) */
/* 914 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 916 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 918 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 920 */	NdrFcShort( 0x8 ),	/* 8 */
/* 922 */	NdrFcShort( 0x0 ),	/* 0 */
/* 924 */	NdrFcShort( 0x6 ),	/* Offset= 6 (930) */
/* 926 */	0x8,		/* FC_LONG */
			0x36,		/* FC_POINTER */
/* 928 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 930 */	
			0x11, 0x0,	/* FC_RP */
/* 932 */	NdrFcShort( 0xffffffd2 ),	/* Offset= -46 (886) */
/* 934 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 936 */	NdrFcShort( 0x4 ),	/* 4 */
/* 938 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 940 */	NdrFcShort( 0x0 ),	/* 0 */
/* 942 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 944 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 946 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 948 */	NdrFcShort( 0x4 ),	/* 4 */
/* 950 */	NdrFcShort( 0x0 ),	/* 0 */
/* 952 */	NdrFcShort( 0x1 ),	/* 1 */
/* 954 */	NdrFcShort( 0x0 ),	/* 0 */
/* 956 */	NdrFcShort( 0x0 ),	/* 0 */
/* 958 */	0x13, 0x0,	/* FC_OP */
/* 960 */	NdrFcShort( 0xffffff42 ),	/* Offset= -190 (770) */
/* 962 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 964 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 966 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 968 */	NdrFcShort( 0x8 ),	/* 8 */
/* 970 */	NdrFcShort( 0x0 ),	/* 0 */
/* 972 */	NdrFcShort( 0x6 ),	/* Offset= 6 (978) */
/* 974 */	0x8,		/* FC_LONG */
			0x36,		/* FC_POINTER */
/* 976 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 978 */	
			0x11, 0x0,	/* FC_RP */
/* 980 */	NdrFcShort( 0xffffffd2 ),	/* Offset= -46 (934) */
/* 982 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 984 */	NdrFcShort( 0x8 ),	/* 8 */
/* 986 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 988 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 990 */	NdrFcShort( 0x10 ),	/* 16 */
/* 992 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 994 */	0x6,		/* FC_SHORT */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 996 */	0x0,		/* 0 */
			NdrFcShort( 0xfffffff1 ),	/* Offset= -15 (982) */
			0x5b,		/* FC_END */
/* 1000 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1002 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1004 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1006 */	NdrFcShort( 0xa ),	/* Offset= 10 (1016) */
/* 1008 */	0x8,		/* FC_LONG */
			0x36,		/* FC_POINTER */
/* 1010 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1012 */	NdrFcShort( 0xffffffe8 ),	/* Offset= -24 (988) */
/* 1014 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1016 */	
			0x11, 0x0,	/* FC_RP */
/* 1018 */	NdrFcShort( 0xfffffd64 ),	/* Offset= -668 (350) */
/* 1020 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 1022 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1024 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1026 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1028 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1030 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 1032 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1034 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1036 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1038 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1040 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1042 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1044 */	0x13, 0x0,	/* FC_OP */
/* 1046 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (1020) */
/* 1048 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 1050 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1052 */	
			0x1b,		/* FC_CARRAY */
			0x1,		/* 1 */
/* 1054 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1056 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1058 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1060 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1062 */	0x6,		/* FC_SHORT */
			0x5b,		/* FC_END */
/* 1064 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1066 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1068 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1070 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1072 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1074 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1076 */	0x13, 0x0,	/* FC_OP */
/* 1078 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (1052) */
/* 1080 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 1082 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1084 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 1086 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1088 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1090 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1092 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1094 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1096 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1098 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1100 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1102 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1104 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1106 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1108 */	0x13, 0x0,	/* FC_OP */
/* 1110 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (1084) */
/* 1112 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 1114 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1116 */	
			0x1b,		/* FC_CARRAY */
			0x7,		/* 7 */
/* 1118 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1120 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1122 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1124 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1126 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 1128 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1130 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1132 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1134 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1136 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1138 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1140 */	0x13, 0x0,	/* FC_OP */
/* 1142 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (1116) */
/* 1144 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 1146 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1148 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 1150 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1152 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1154 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1156 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 1158 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1160 */	0x7,		/* Corr desc: FC_USHORT */
			0x0,		/*  */
/* 1162 */	NdrFcShort( 0xffd8 ),	/* -40 */
/* 1164 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1166 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1168 */	NdrFcShort( 0xffffffec ),	/* Offset= -20 (1148) */
/* 1170 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1172 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1174 */	NdrFcShort( 0x28 ),	/* 40 */
/* 1176 */	NdrFcShort( 0xffffffec ),	/* Offset= -20 (1156) */
/* 1178 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1178) */
/* 1180 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1182 */	0x38,		/* FC_ALIGNM4 */
			0x8,		/* FC_LONG */
/* 1184 */	0x8,		/* FC_LONG */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 1186 */	0x0,		/* 0 */
			NdrFcShort( 0xfffffc1b ),	/* Offset= -997 (190) */
			0x5b,		/* FC_END */
/* 1190 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 1192 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1194 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1196 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1198 */	NdrFcShort( 0xfffffc08 ),	/* Offset= -1016 (182) */
/* 1200 */	
			0x12, 0x10,	/* FC_UP [pointer_deref] */
/* 1202 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1204) */
/* 1204 */	
			0x12, 0x0,	/* FC_UP */
/* 1206 */	NdrFcShort( 0xffffffde ),	/* Offset= -34 (1172) */
/* 1208 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 1210 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1212 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1214 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1216 */	NdrFcShort( 0xfffffff0 ),	/* Offset= -16 (1200) */
/* 1218 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1220 */	NdrFcShort( 0xfffffe9a ),	/* Offset= -358 (862) */
/* 1222 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 1224 */	NdrFcShort( 0xfffffe06 ),	/* Offset= -506 (718) */
/* 1226 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1228 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 1230 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1232 */	0x2,		/* FC_CHAR */
			0x5c,		/* FC_PAD */
/* 1234 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1236 */	0x6,		/* FC_SHORT */
			0x5c,		/* FC_PAD */
/* 1238 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1240 */	0xd,		/* FC_ENUM16 */
			0x5c,		/* FC_PAD */
/* 1242 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1244 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1246) */
/* 1246 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 1248 */	NdrFcLong( 0xd5778ae3 ),	/* -713585949 */
/* 1252 */	NdrFcShort( 0x43de ),	/* 17374 */
/* 1254 */	NdrFcShort( 0x11d0 ),	/* 4560 */
/* 1256 */	0x91,		/* 145 */
			0x71,		/* 113 */
/* 1258 */	0x0,		/* 0 */
			0xaa,		/* 170 */
/* 1260 */	0x0,		/* 0 */
			0xc1,		/* 193 */
/* 1262 */	0x80,		/* 128 */
			0x68,		/* 104 */
/* 1264 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1266 */	0xe,		/* FC_ENUM32 */
			0x5c,		/* FC_PAD */
/* 1268 */	
			0x12, 0x0,	/* FC_UP */
/* 1270 */	NdrFcShort( 0xfffffc18 ),	/* Offset= -1000 (270) */
/* 1272 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 1274 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1276 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1278 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1280 */	NdrFcShort( 0xfffffff4 ),	/* Offset= -12 (1268) */
/* 1282 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1284 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1286) */
/* 1286 */	
			0x13, 0x0,	/* FC_OP */
/* 1288 */	NdrFcShort( 0xfffffed4 ),	/* Offset= -300 (988) */
/* 1290 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1292 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1294) */
/* 1294 */	
			0x13, 0x0,	/* FC_OP */
/* 1296 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1298) */
/* 1298 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 1300 */	NdrFcShort( 0x20 ),	/* 32 */
/* 1302 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1304 */	0xe,		/* FC_ENUM32 */
			0xe,		/* FC_ENUM32 */
/* 1306 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1308 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1310 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */

			0x0
        }
    };

const CInterfaceProxyVtbl * _scardssp_ProxyVtblList[] = 
{
    ( CInterfaceProxyVtbl *) &_ISCardTypeConvProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardISO7816ProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardDatabaseProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardLocateProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardCmdProxyVtbl,
    ( CInterfaceProxyVtbl *) &_IByteBufferProxyVtbl,
    0
};

const CInterfaceStubVtbl * _scardssp_StubVtblList[] = 
{
    ( CInterfaceStubVtbl *) &_ISCardTypeConvStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardISO7816StubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardDatabaseStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardLocateStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardCmdStubVtbl,
    ( CInterfaceStubVtbl *) &_IByteBufferStubVtbl,
    0
};

PCInterfaceName const _scardssp_InterfaceNamesList[] = 
{
    "ISCardTypeConv",
    "ISCardISO7816",
    "ISCard",
    "ISCardDatabase",
    "ISCardLocate",
    "ISCardCmd",
    "IByteBuffer",
    0
};

const IID *  _scardssp_BaseIIDList[] = 
{
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    0
};


#define _scardssp_CHECK_IID(n)	IID_GENERIC_CHECK_IID( _scardssp, pIID, n)

int __stdcall _scardssp_IID_Lookup( const IID * pIID, int * pIndex )
{
    IID_BS_LOOKUP_SETUP

    IID_BS_LOOKUP_INITIAL_TEST( _scardssp, 7, 4 )
    IID_BS_LOOKUP_NEXT_TEST( _scardssp, 2 )
    IID_BS_LOOKUP_NEXT_TEST( _scardssp, 1 )
    IID_BS_LOOKUP_RETURN_RESULT( _scardssp, 7, *pIndex )
    
}

const ExtendedProxyFileInfo scardssp_ProxyFileInfo = 
{
    (PCInterfaceProxyVtblList *) & _scardssp_ProxyVtblList,
    (PCInterfaceStubVtblList *) & _scardssp_StubVtblList,
    (const PCInterfaceName * ) & _scardssp_InterfaceNamesList,
    (const IID ** ) & _scardssp_BaseIIDList,
    & _scardssp_IID_Lookup, 
    7,
    2,
    0, /* table of [async_uuid] interfaces */
    0, /* Filler1 */
    0, /* Filler2 */
    0  /* Filler3 */
};


#endif /* !defined(_M_IA64) && !defined(_M_AXP64)*/


#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the proxy stub code */


 /* File created by MIDL compiler version 5.03.0279 */
/* at Fri Oct 01 16:58:17 1999
 */
/* Compiler settings for scardssp.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win64 (32b run,appending), ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if defined(_M_IA64) || defined(_M_AXP64)
#define USE_STUBLESS_PROXY


/* verify that the <rpcproxy.h> version is high enough to compile this file*/
#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 475
#endif


#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error this stub requires an updated version of <rpcproxy.h>
#endif // __RPCPROXY_H_VERSION__


#include "scardssp.h"

#define TYPE_FORMAT_STRING_SIZE   1273                              
#define PROC_FORMAT_STRING_SIZE   4079                              
#define TRANSMIT_AS_TABLE_SIZE    0            
#define WIRE_MARSHAL_TABLE_SIZE   3            

typedef struct _MIDL_TYPE_FORMAT_STRING
    {
    short          Pad;
    unsigned char  Format[ TYPE_FORMAT_STRING_SIZE ];
    } MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
    {
    short          Pad;
    unsigned char  Format[ PROC_FORMAT_STRING_SIZE ];
    } MIDL_PROC_FORMAT_STRING;


extern const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
extern const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;


/* Standard interface: __MIDL_itf_scardssp_0000, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */


/* Object interface: IUnknown, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}} */


/* Object interface: IDispatch, ver. 0.0,
   GUID={0x00020400,0x0000,0x0000,{0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}} */


/* Object interface: IByteBuffer, ver. 0.0,
   GUID={0xE126F8FE,0xA7AF,0x11D0,{0xB8,0x8A,0x00,0xC0,0x4F,0xD4,0x24,0xB9}} */


extern const MIDL_STUB_DESC Object_StubDesc;


extern const MIDL_SERVER_INFO IByteBuffer_ServerInfo;

#pragma code_seg(".orpc")
static const unsigned short IByteBuffer_FormatStringOffsetTable[] = 
    {
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    0,
    38,
    76,
    114,
    152,
    208,
    252,
    302,
    352,
    384,
    434,
    472,
    516,
    566
    };

static const MIDL_SERVER_INFO IByteBuffer_ServerInfo = 
    {
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IByteBuffer_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
    };

static const MIDL_STUBLESS_PROXY_INFO IByteBuffer_ProxyInfo =
    {
    &Object_StubDesc,
    __MIDL_ProcFormatString.Format,
    &IByteBuffer_FormatStringOffsetTable[-3],
    0,
    0,
    0
    };

CINTERFACE_PROXY_VTABLE(21) _IByteBufferProxyVtbl = 
{
    &IByteBuffer_ProxyInfo,
    &IID_IByteBuffer,
    IUnknown_QueryInterface_Proxy,
    IUnknown_AddRef_Proxy,
    IUnknown_Release_Proxy ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ ,
    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ ,
    0 /* IDispatch_Invoke_Proxy */ ,
    (void *)-1 /* IByteBuffer::get_Stream */ ,
    (void *)-1 /* IByteBuffer::put_Stream */ ,
    (void *)-1 /* IByteBuffer::Clone */ ,
    (void *)-1 /* IByteBuffer::Commit */ ,
    (void *)-1 /* IByteBuffer::CopyTo */ ,
    (void *)-1 /* IByteBuffer::Initialize */ ,
    (void *)-1 /* IByteBuffer::LockRegion */ ,
    (void *)-1 /* IByteBuffer::Read */ ,
    (void *)-1 /* IByteBuffer::Revert */ ,
    (void *)-1 /* IByteBuffer::Seek */ ,
    (void *)-1 /* IByteBuffer::SetSize */ ,
    (void *)-1 /* IByteBuffer::Stat */ ,
    (void *)-1 /* IByteBuffer::UnlockRegion */ ,
    (void *)-1 /* IByteBuffer::Write */
};


static const PRPC_STUB_FUNCTION IByteBuffer_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2
};

CInterfaceStubVtbl _IByteBufferStubVtbl =
{
    &IID_IByteBuffer,
    &IByteBuffer_ServerInfo,
    21,
    &IByteBuffer_table[-3],
    CStdStubBuffer_DELEGATING_METHODS
};


/* Standard interface: __MIDL_itf_scardssp_0244, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */


/* Object interface: ISCardTypeConv, ver. 0.0,
   GUID={0x53B6AA63,0x3F56,0x11D0,{0x91,0x6B,0x00,0xAA,0x00,0xC1,0x80,0x68}} */


extern const MIDL_STUB_DESC Object_StubDesc;


extern const MIDL_SERVER_INFO ISCardTypeConv_ServerInfo;

#pragma code_seg(".orpc")
static const unsigned short ISCardTypeConv_FormatStringOffsetTable[] = 
    {
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    616,
    666,
    710,
    754,
    798,
    842,
    886,
    930,
    974,
    1018
    };

static const MIDL_SERVER_INFO ISCardTypeConv_ServerInfo = 
    {
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISCardTypeConv_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
    };

static const MIDL_STUBLESS_PROXY_INFO ISCardTypeConv_ProxyInfo =
    {
    &Object_StubDesc,
    __MIDL_ProcFormatString.Format,
    &ISCardTypeConv_FormatStringOffsetTable[-3],
    0,
    0,
    0
    };

CINTERFACE_PROXY_VTABLE(17) _ISCardTypeConvProxyVtbl = 
{
    &ISCardTypeConv_ProxyInfo,
    &IID_ISCardTypeConv,
    IUnknown_QueryInterface_Proxy,
    IUnknown_AddRef_Proxy,
    IUnknown_Release_Proxy ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ ,
    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ ,
    0 /* IDispatch_Invoke_Proxy */ ,
    (void *)-1 /* ISCardTypeConv::ConvertByteArrayToByteBuffer */ ,
    (void *)-1 /* ISCardTypeConv::ConvertByteBufferToByteArray */ ,
    (void *)-1 /* ISCardTypeConv::ConvertByteBufferToSafeArray */ ,
    (void *)-1 /* ISCardTypeConv::ConvertSafeArrayToByteBuffer */ ,
    (void *)-1 /* ISCardTypeConv::CreateByteArray */ ,
    (void *)-1 /* ISCardTypeConv::CreateByteBuffer */ ,
    (void *)-1 /* ISCardTypeConv::CreateSafeArray */ ,
    (void *)-1 /* ISCardTypeConv::FreeIStreamMemoryPtr */ ,
    (void *)-1 /* ISCardTypeConv::GetAtIStreamMemory */ ,
    (void *)-1 /* ISCardTypeConv::SizeOfIStream */
};


static const PRPC_STUB_FUNCTION ISCardTypeConv_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2
};

CInterfaceStubVtbl _ISCardTypeConvStubVtbl =
{
    &IID_ISCardTypeConv,
    &ISCardTypeConv_ServerInfo,
    17,
    &ISCardTypeConv_table[-3],
    CStdStubBuffer_DELEGATING_METHODS
};


/* Standard interface: __MIDL_itf_scardssp_0245, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */


/* Object interface: ISCardCmd, ver. 0.0,
   GUID={0xD5778AE3,0x43DE,0x11D0,{0x91,0x71,0x00,0xAA,0x00,0xC1,0x80,0x68}} */


extern const MIDL_STUB_DESC Object_StubDesc;


extern const MIDL_SERVER_INFO ISCardCmd_ServerInfo;

#pragma code_seg(".orpc")
static const unsigned short ISCardCmd_FormatStringOffsetTable[] = 
    {
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    1062,
    1100,
    1138,
    1176,
    1214,
    1252,
    1290,
    1328,
    1366,
    1404,
    1442,
    1480,
    1518,
    1556,
    1594,
    1632,
    1670,
    1708,
    1746,
    1784,
    1822,
    1860,
    1898,
    1936,
    1974,
    2012,
    2050,
    2088,
    2126,
    2194,
    2226,
    2270,
    2308
    };

static const MIDL_SERVER_INFO ISCardCmd_ServerInfo = 
    {
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISCardCmd_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
    };

static const MIDL_STUBLESS_PROXY_INFO ISCardCmd_ProxyInfo =
    {
    &Object_StubDesc,
    __MIDL_ProcFormatString.Format,
    &ISCardCmd_FormatStringOffsetTable[-3],
    0,
    0,
    0
    };

CINTERFACE_PROXY_VTABLE(40) _ISCardCmdProxyVtbl = 
{
    &ISCardCmd_ProxyInfo,
    &IID_ISCardCmd,
    IUnknown_QueryInterface_Proxy,
    IUnknown_AddRef_Proxy,
    IUnknown_Release_Proxy ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ ,
    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ ,
    0 /* IDispatch_Invoke_Proxy */ ,
    (void *)-1 /* ISCardCmd::get_Apdu */ ,
    (void *)-1 /* ISCardCmd::put_Apdu */ ,
    (void *)-1 /* ISCardCmd::get_ApduLength */ ,
    (void *)-1 /* ISCardCmd::get_ApduReply */ ,
    (void *)-1 /* ISCardCmd::put_ApduReply */ ,
    (void *)-1 /* ISCardCmd::get_ApduReplyLength */ ,
    (void *)-1 /* ISCardCmd::put_ApduReplyLength */ ,
    (void *)-1 /* ISCardCmd::get_ClassId */ ,
    (void *)-1 /* ISCardCmd::put_ClassId */ ,
    (void *)-1 /* ISCardCmd::get_Data */ ,
    (void *)-1 /* ISCardCmd::put_Data */ ,
    (void *)-1 /* ISCardCmd::get_InstructionId */ ,
    (void *)-1 /* ISCardCmd::put_InstructionId */ ,
    (void *)-1 /* ISCardCmd::get_LeField */ ,
    (void *)-1 /* ISCardCmd::get_P1 */ ,
    (void *)-1 /* ISCardCmd::put_P1 */ ,
    (void *)-1 /* ISCardCmd::get_P2 */ ,
    (void *)-1 /* ISCardCmd::put_P2 */ ,
    (void *)-1 /* ISCardCmd::get_P3 */ ,
    (void *)-1 /* ISCardCmd::get_ReplyStatus */ ,
    (void *)-1 /* ISCardCmd::put_ReplyStatus */ ,
    (void *)-1 /* ISCardCmd::get_ReplyStatusSW1 */ ,
    (void *)-1 /* ISCardCmd::get_ReplyStatusSW2 */ ,
    (void *)-1 /* ISCardCmd::get_Type */ ,
    (void *)-1 /* ISCardCmd::get_Nad */ ,
    (void *)-1 /* ISCardCmd::put_Nad */ ,
    (void *)-1 /* ISCardCmd::get_ReplyNad */ ,
    (void *)-1 /* ISCardCmd::put_ReplyNad */ ,
    (void *)-1 /* ISCardCmd::BuildCmd */ ,
    (void *)-1 /* ISCardCmd::Clear */ ,
    (void *)-1 /* ISCardCmd::Encapsulate */ ,
    (void *)-1 /* ISCardCmd::get_AlternateClassId */ ,
    (void *)-1 /* ISCardCmd::put_AlternateClassId */
};


static const PRPC_STUB_FUNCTION ISCardCmd_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2
};

CInterfaceStubVtbl _ISCardCmdStubVtbl =
{
    &IID_ISCardCmd,
    &ISCardCmd_ServerInfo,
    40,
    &ISCardCmd_table[-3],
    CStdStubBuffer_DELEGATING_METHODS
};


/* Standard interface: __MIDL_itf_scardssp_0246, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */


/* Object interface: ISCardISO7816, ver. 0.0,
   GUID={0x53B6AA68,0x3F56,0x11D0,{0x91,0x6B,0x00,0xAA,0x00,0xC1,0x80,0x68}} */


extern const MIDL_STUB_DESC Object_StubDesc;


extern const MIDL_SERVER_INFO ISCardISO7816_ServerInfo;

#pragma code_seg(".orpc")
static const unsigned short ISCardISO7816_FormatStringOffsetTable[] = 
    {
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    2346,
    2396,
    2452,
    2508,
    2552,
    2608,
    2664,
    2726,
    2776,
    2832,
    2888,
    2944,
    1518,
    3006,
    3062,
    3118,
    3168,
    3224
    };

static const MIDL_SERVER_INFO ISCardISO7816_ServerInfo = 
    {
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISCardISO7816_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
    };

static const MIDL_STUBLESS_PROXY_INFO ISCardISO7816_ProxyInfo =
    {
    &Object_StubDesc,
    __MIDL_ProcFormatString.Format,
    &ISCardISO7816_FormatStringOffsetTable[-3],
    0,
    0,
    0
    };

CINTERFACE_PROXY_VTABLE(25) _ISCardISO7816ProxyVtbl = 
{
    &ISCardISO7816_ProxyInfo,
    &IID_ISCardISO7816,
    IUnknown_QueryInterface_Proxy,
    IUnknown_AddRef_Proxy,
    IUnknown_Release_Proxy ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ ,
    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ ,
    0 /* IDispatch_Invoke_Proxy */ ,
    (void *)-1 /* ISCardISO7816::AppendRecord */ ,
    (void *)-1 /* ISCardISO7816::EraseBinary */ ,
    (void *)-1 /* ISCardISO7816::ExternalAuthenticate */ ,
    (void *)-1 /* ISCardISO7816::GetChallenge */ ,
    (void *)-1 /* ISCardISO7816::GetData */ ,
    (void *)-1 /* ISCardISO7816::GetResponse */ ,
    (void *)-1 /* ISCardISO7816::InternalAuthenticate */ ,
    (void *)-1 /* ISCardISO7816::ManageChannel */ ,
    (void *)-1 /* ISCardISO7816::PutData */ ,
    (void *)-1 /* ISCardISO7816::ReadBinary */ ,
    (void *)-1 /* ISCardISO7816::ReadRecord */ ,
    (void *)-1 /* ISCardISO7816::SelectFile */ ,
    (void *)-1 /* ISCardISO7816::SetDefaultClassId */ ,
    (void *)-1 /* ISCardISO7816::UpdateBinary */ ,
    (void *)-1 /* ISCardISO7816::UpdateRecord */ ,
    (void *)-1 /* ISCardISO7816::Verify */ ,
    (void *)-1 /* ISCardISO7816::WriteBinary */ ,
    (void *)-1 /* ISCardISO7816::WriteRecord */
};


static const PRPC_STUB_FUNCTION ISCardISO7816_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2
};

CInterfaceStubVtbl _ISCardISO7816StubVtbl =
{
    &IID_ISCardISO7816,
    &ISCardISO7816_ServerInfo,
    25,
    &ISCardISO7816_table[-3],
    CStdStubBuffer_DELEGATING_METHODS
};


/* Standard interface: __MIDL_itf_scardssp_0247, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */


/* Object interface: ISCard, ver. 0.0,
   GUID={0x1461AAC3,0x6810,0x11D0,{0x91,0x8F,0x00,0xAA,0x00,0xC1,0x80,0x68}} */


extern const MIDL_STUB_DESC Object_StubDesc;


extern const MIDL_SERVER_INFO ISCard_ServerInfo;

#pragma code_seg(".orpc")
static const unsigned short ISCard_FormatStringOffsetTable[] = 
    {
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    1062,
    3280,
    3318,
    3356,
    3394,
    3432,
    3470,
    3520,
    352,
    3558,
    3602,
    3640
    };

static const MIDL_SERVER_INFO ISCard_ServerInfo = 
    {
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISCard_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
    };

static const MIDL_STUBLESS_PROXY_INFO ISCard_ProxyInfo =
    {
    &Object_StubDesc,
    __MIDL_ProcFormatString.Format,
    &ISCard_FormatStringOffsetTable[-3],
    0,
    0,
    0
    };

CINTERFACE_PROXY_VTABLE(19) _ISCardProxyVtbl = 
{
    &ISCard_ProxyInfo,
    &IID_ISCard,
    IUnknown_QueryInterface_Proxy,
    IUnknown_AddRef_Proxy,
    IUnknown_Release_Proxy ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ ,
    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ ,
    0 /* IDispatch_Invoke_Proxy */ ,
    (void *)-1 /* ISCard::get_Atr */ ,
    (void *)-1 /* ISCard::get_CardHandle */ ,
    (void *)-1 /* ISCard::get_Context */ ,
    (void *)-1 /* ISCard::get_Protocol */ ,
    (void *)-1 /* ISCard::get_Status */ ,
    (void *)-1 /* ISCard::AttachByHandle */ ,
    (void *)-1 /* ISCard::AttachByReader */ ,
    (void *)-1 /* ISCard::Detach */ ,
    (void *)-1 /* ISCard::LockSCard */ ,
    (void *)-1 /* ISCard::ReAttach */ ,
    (void *)-1 /* ISCard::Transaction */ ,
    (void *)-1 /* ISCard::UnlockSCard */
};


static const PRPC_STUB_FUNCTION ISCard_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2
};

CInterfaceStubVtbl _ISCardStubVtbl =
{
    &IID_ISCard,
    &ISCard_ServerInfo,
    19,
    &ISCard_table[-3],
    CStdStubBuffer_DELEGATING_METHODS
};


/* Standard interface: __MIDL_itf_scardssp_0248, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */


/* Object interface: ISCardDatabase, ver. 0.0,
   GUID={0x1461AAC8,0x6810,0x11D0,{0x91,0x8F,0x00,0xAA,0x00,0xC1,0x80,0x68}} */


extern const MIDL_STUB_DESC Object_StubDesc;


extern const MIDL_SERVER_INFO ISCardDatabase_ServerInfo;

#pragma code_seg(".orpc")
static const unsigned short ISCardDatabase_FormatStringOffsetTable[] = 
    {
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    3678,
    3722,
    3766,
    3822,
    3866
    };

static const MIDL_SERVER_INFO ISCardDatabase_ServerInfo = 
    {
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISCardDatabase_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
    };

static const MIDL_STUBLESS_PROXY_INFO ISCardDatabase_ProxyInfo =
    {
    &Object_StubDesc,
    __MIDL_ProcFormatString.Format,
    &ISCardDatabase_FormatStringOffsetTable[-3],
    0,
    0,
    0
    };

CINTERFACE_PROXY_VTABLE(12) _ISCardDatabaseProxyVtbl = 
{
    &ISCardDatabase_ProxyInfo,
    &IID_ISCardDatabase,
    IUnknown_QueryInterface_Proxy,
    IUnknown_AddRef_Proxy,
    IUnknown_Release_Proxy ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ ,
    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ ,
    0 /* IDispatch_Invoke_Proxy */ ,
    (void *)-1 /* ISCardDatabase::GetProviderCardId */ ,
    (void *)-1 /* ISCardDatabase::ListCardInterfaces */ ,
    (void *)-1 /* ISCardDatabase::ListCards */ ,
    (void *)-1 /* ISCardDatabase::ListReaderGroups */ ,
    (void *)-1 /* ISCardDatabase::ListReaders */
};


static const PRPC_STUB_FUNCTION ISCardDatabase_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2
};

CInterfaceStubVtbl _ISCardDatabaseStubVtbl =
{
    &IID_ISCardDatabase,
    &ISCardDatabase_ServerInfo,
    12,
    &ISCardDatabase_table[-3],
    CStdStubBuffer_DELEGATING_METHODS
};


/* Standard interface: __MIDL_itf_scardssp_0249, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */


/* Object interface: ISCardLocate, ver. 0.0,
   GUID={0x1461AACD,0x6810,0x11D0,{0x91,0x8F,0x00,0xAA,0x00,0xC1,0x80,0x68}} */


extern const MIDL_STUB_DESC Object_StubDesc;


extern const MIDL_SERVER_INFO ISCardLocate_ServerInfo;

#pragma code_seg(".orpc")
static const unsigned short ISCardLocate_FormatStringOffsetTable[] = 
    {
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    (unsigned short) -1,
    3910,
    3966,
    4022
    };

static const MIDL_SERVER_INFO ISCardLocate_ServerInfo = 
    {
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISCardLocate_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
    };

static const MIDL_STUBLESS_PROXY_INFO ISCardLocate_ProxyInfo =
    {
    &Object_StubDesc,
    __MIDL_ProcFormatString.Format,
    &ISCardLocate_FormatStringOffsetTable[-3],
    0,
    0,
    0
    };

CINTERFACE_PROXY_VTABLE(10) _ISCardLocateProxyVtbl = 
{
    &ISCardLocate_ProxyInfo,
    &IID_ISCardLocate,
    IUnknown_QueryInterface_Proxy,
    IUnknown_AddRef_Proxy,
    IUnknown_Release_Proxy ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ ,
    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ ,
    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ ,
    0 /* IDispatch_Invoke_Proxy */ ,
    (void *)-1 /* ISCardLocate::ConfigureCardGuidSearch */ ,
    (void *)-1 /* ISCardLocate::ConfigureCardNameSearch */ ,
    (void *)-1 /* ISCardLocate::FindCard */
};


static const PRPC_STUB_FUNCTION ISCardLocate_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    NdrStubCall2,
    NdrStubCall2,
    NdrStubCall2
};

CInterfaceStubVtbl _ISCardLocateStubVtbl =
{
    &IID_ISCardLocate,
    &ISCardLocate_ServerInfo,
    10,
    &ISCardLocate_table[-3],
    CStdStubBuffer_DELEGATING_METHODS
};


/* Standard interface: __MIDL_itf_scardssp_0250, ver. 0.0,
   GUID={0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}} */

extern const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[ WIRE_MARSHAL_TABLE_SIZE ];

static const MIDL_STUB_DESC Object_StubDesc = 
    {
    0,
    NdrOleAllocate,
    NdrOleFree,
    0,
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x50002, /* Ndr library version */
    0,
    0x5030117, /* MIDL Version 5.3.279 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    0x1, /* MIDL flag */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
    };

#pragma data_seg(".rdata")

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[ WIRE_MARSHAL_TABLE_SIZE ] = 
        {
            
            {
            HGLOBAL_UserSize
            ,HGLOBAL_UserMarshal
            ,HGLOBAL_UserUnmarshal
            ,HGLOBAL_UserFree
            },
            {
            LPSAFEARRAY_UserSize
            ,LPSAFEARRAY_UserMarshal
            ,LPSAFEARRAY_UserUnmarshal
            ,LPSAFEARRAY_UserFree
            },
            {
            BSTR_UserSize
            ,BSTR_UserMarshal
            ,BSTR_UserUnmarshal
            ,BSTR_UserFree
            }

        };


#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
    {
        0,
        {

	/* Procedure get_Stream */

			0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/*  2 */	NdrFcLong( 0x0 ),	/* 0 */
/*  6 */	NdrFcShort( 0x7 ),	/* 7 */
/*  8 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 10 */	NdrFcShort( 0x0 ),	/* 0 */
/* 12 */	NdrFcShort( 0x8 ),	/* 8 */
/* 14 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x2,		/* 2 */
/* 16 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 18 */	NdrFcShort( 0x0 ),	/* 0 */
/* 20 */	NdrFcShort( 0x0 ),	/* 0 */
/* 22 */	NdrFcShort( 0x0 ),	/* 0 */
/* 24 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppStream */

/* 26 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
/* 28 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 30 */	NdrFcShort( 0x2 ),	/* Type Offset=2 */

	/* Return value */

/* 32 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 34 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 36 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_Stream */

/* 38 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 40 */	NdrFcLong( 0x0 ),	/* 0 */
/* 44 */	NdrFcShort( 0x8 ),	/* 8 */
/* 46 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 48 */	NdrFcShort( 0x0 ),	/* 0 */
/* 50 */	NdrFcShort( 0x8 ),	/* 8 */
/* 52 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 54 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 56 */	NdrFcShort( 0x0 ),	/* 0 */
/* 58 */	NdrFcShort( 0x0 ),	/* 0 */
/* 60 */	NdrFcShort( 0x0 ),	/* 0 */
/* 62 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStream */

/* 64 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 66 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 68 */	NdrFcShort( 0x6 ),	/* Type Offset=6 */

	/* Return value */

/* 70 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 72 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 74 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Clone */

/* 76 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 78 */	NdrFcLong( 0x0 ),	/* 0 */
/* 82 */	NdrFcShort( 0x9 ),	/* 9 */
/* 84 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 86 */	NdrFcShort( 0x0 ),	/* 0 */
/* 88 */	NdrFcShort( 0x8 ),	/* 8 */
/* 90 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 92 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 94 */	NdrFcShort( 0x0 ),	/* 0 */
/* 96 */	NdrFcShort( 0x0 ),	/* 0 */
/* 98 */	NdrFcShort( 0x0 ),	/* 0 */
/* 100 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppByteBuffer */

/* 102 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 104 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 106 */	NdrFcShort( 0x18 ),	/* Type Offset=24 */

	/* Return value */

/* 108 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 110 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 112 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Commit */

/* 114 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 116 */	NdrFcLong( 0x0 ),	/* 0 */
/* 120 */	NdrFcShort( 0xa ),	/* 10 */
/* 122 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 124 */	NdrFcShort( 0x8 ),	/* 8 */
/* 126 */	NdrFcShort( 0x8 ),	/* 8 */
/* 128 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 130 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 132 */	NdrFcShort( 0x0 ),	/* 0 */
/* 134 */	NdrFcShort( 0x0 ),	/* 0 */
/* 136 */	NdrFcShort( 0x0 ),	/* 0 */
/* 138 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter grfCommitFlags */

/* 140 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 142 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 144 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 146 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 148 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 150 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure CopyTo */

/* 152 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 154 */	NdrFcLong( 0x0 ),	/* 0 */
/* 158 */	NdrFcShort( 0xb ),	/* 11 */
/* 160 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 162 */	NdrFcShort( 0x18 ),	/* 24 */
/* 164 */	NdrFcShort( 0x18 ),	/* 24 */
/* 166 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 168 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 170 */	NdrFcShort( 0x0 ),	/* 0 */
/* 172 */	NdrFcShort( 0x0 ),	/* 0 */
/* 174 */	NdrFcShort( 0x0 ),	/* 0 */
/* 176 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppByteBuffer */

/* 178 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 180 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 182 */	NdrFcShort( 0x18 ),	/* Type Offset=24 */

	/* Parameter cb */

/* 184 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 186 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 188 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pcbRead */

/* 190 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 192 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 194 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pcbWritten */

/* 196 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 198 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 200 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 202 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 204 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 206 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Initialize */

/* 208 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 210 */	NdrFcLong( 0x0 ),	/* 0 */
/* 214 */	NdrFcShort( 0xc ),	/* 12 */
/* 216 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 218 */	NdrFcShort( 0xd ),	/* 13 */
/* 220 */	NdrFcShort( 0x8 ),	/* 8 */
/* 222 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 224 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 226 */	NdrFcShort( 0x0 ),	/* 0 */
/* 228 */	NdrFcShort( 0x0 ),	/* 0 */
/* 230 */	NdrFcShort( 0x0 ),	/* 0 */
/* 232 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter lSize */

/* 234 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 236 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 238 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pData */

/* 240 */	NdrFcShort( 0x148 ),	/* Flags:  in, base type, simple ref, */
/* 242 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 244 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 246 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 248 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 250 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure LockRegion */

/* 252 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 254 */	NdrFcLong( 0x0 ),	/* 0 */
/* 258 */	NdrFcShort( 0xd ),	/* 13 */
/* 260 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 262 */	NdrFcShort( 0x18 ),	/* 24 */
/* 264 */	NdrFcShort( 0x8 ),	/* 8 */
/* 266 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 268 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 270 */	NdrFcShort( 0x0 ),	/* 0 */
/* 272 */	NdrFcShort( 0x0 ),	/* 0 */
/* 274 */	NdrFcShort( 0x0 ),	/* 0 */
/* 276 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter libOffset */

/* 278 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 280 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 282 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter cb */

/* 284 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 286 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 288 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter dwLockType */

/* 290 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 292 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 294 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 296 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 298 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 300 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Read */

/* 302 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 304 */	NdrFcLong( 0x0 ),	/* 0 */
/* 308 */	NdrFcShort( 0xe ),	/* 14 */
/* 310 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 312 */	NdrFcShort( 0x15 ),	/* 21 */
/* 314 */	NdrFcShort( 0x15 ),	/* 21 */
/* 316 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 318 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 320 */	NdrFcShort( 0x0 ),	/* 0 */
/* 322 */	NdrFcShort( 0x0 ),	/* 0 */
/* 324 */	NdrFcShort( 0x0 ),	/* 0 */
/* 326 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pByte */

/* 328 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 330 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 332 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter cb */

/* 334 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 336 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 338 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pcbRead */

/* 340 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 342 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 344 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 346 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 348 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 350 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure LockSCard */


	/* Procedure Revert */

/* 352 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 354 */	NdrFcLong( 0x0 ),	/* 0 */
/* 358 */	NdrFcShort( 0xf ),	/* 15 */
/* 360 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 362 */	NdrFcShort( 0x0 ),	/* 0 */
/* 364 */	NdrFcShort( 0x8 ),	/* 8 */
/* 366 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x1,		/* 1 */
/* 368 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 370 */	NdrFcShort( 0x0 ),	/* 0 */
/* 372 */	NdrFcShort( 0x0 ),	/* 0 */
/* 374 */	NdrFcShort( 0x0 ),	/* 0 */
/* 376 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Return value */


	/* Return value */

/* 378 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 380 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 382 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Seek */

/* 384 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 386 */	NdrFcLong( 0x0 ),	/* 0 */
/* 390 */	NdrFcShort( 0x10 ),	/* 16 */
/* 392 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 394 */	NdrFcShort( 0x18 ),	/* 24 */
/* 396 */	NdrFcShort( 0x10 ),	/* 16 */
/* 398 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 400 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 402 */	NdrFcShort( 0x0 ),	/* 0 */
/* 404 */	NdrFcShort( 0x0 ),	/* 0 */
/* 406 */	NdrFcShort( 0x0 ),	/* 0 */
/* 408 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter dLibMove */

/* 410 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 412 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 414 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter dwOrigin */

/* 416 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 418 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 420 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pLibnewPosition */

/* 422 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 424 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 426 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 428 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 430 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 432 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SetSize */

/* 434 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 436 */	NdrFcLong( 0x0 ),	/* 0 */
/* 440 */	NdrFcShort( 0x11 ),	/* 17 */
/* 442 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 444 */	NdrFcShort( 0x8 ),	/* 8 */
/* 446 */	NdrFcShort( 0x8 ),	/* 8 */
/* 448 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 450 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 452 */	NdrFcShort( 0x0 ),	/* 0 */
/* 454 */	NdrFcShort( 0x0 ),	/* 0 */
/* 456 */	NdrFcShort( 0x0 ),	/* 0 */
/* 458 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter libNewSize */

/* 460 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 462 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 464 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 466 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 468 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 470 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Stat */

/* 472 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 474 */	NdrFcLong( 0x0 ),	/* 0 */
/* 478 */	NdrFcShort( 0x12 ),	/* 18 */
/* 480 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 482 */	NdrFcShort( 0x24 ),	/* 36 */
/* 484 */	NdrFcShort( 0x24 ),	/* 36 */
/* 486 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 488 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 490 */	NdrFcShort( 0x0 ),	/* 0 */
/* 492 */	NdrFcShort( 0x0 ),	/* 0 */
/* 494 */	NdrFcShort( 0x0 ),	/* 0 */
/* 496 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pstatstg */

/* 498 */	NdrFcShort( 0x11a ),	/* Flags:  must free, in, out, simple ref, */
/* 500 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 502 */	NdrFcShort( 0x3a ),	/* Type Offset=58 */

	/* Parameter grfStatFlag */

/* 504 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 506 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 508 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 510 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 512 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 514 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UnlockRegion */

/* 516 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 518 */	NdrFcLong( 0x0 ),	/* 0 */
/* 522 */	NdrFcShort( 0x13 ),	/* 19 */
/* 524 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 526 */	NdrFcShort( 0x18 ),	/* 24 */
/* 528 */	NdrFcShort( 0x8 ),	/* 8 */
/* 530 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 532 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 534 */	NdrFcShort( 0x0 ),	/* 0 */
/* 536 */	NdrFcShort( 0x0 ),	/* 0 */
/* 538 */	NdrFcShort( 0x0 ),	/* 0 */
/* 540 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter libOffset */

/* 542 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 544 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 546 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter cb */

/* 548 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 550 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 552 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter dwLockType */

/* 554 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 556 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 558 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 560 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 562 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 564 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Write */

/* 566 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 568 */	NdrFcLong( 0x0 ),	/* 0 */
/* 572 */	NdrFcShort( 0x14 ),	/* 20 */
/* 574 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 576 */	NdrFcShort( 0x15 ),	/* 21 */
/* 578 */	NdrFcShort( 0x15 ),	/* 21 */
/* 580 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 582 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 584 */	NdrFcShort( 0x0 ),	/* 0 */
/* 586 */	NdrFcShort( 0x0 ),	/* 0 */
/* 588 */	NdrFcShort( 0x0 ),	/* 0 */
/* 590 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pByte */

/* 592 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 594 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 596 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter cb */

/* 598 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 600 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 602 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter pcbWritten */

/* 604 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 606 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 608 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 610 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 612 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 614 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertByteArrayToByteBuffer */

/* 616 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 618 */	NdrFcLong( 0x0 ),	/* 0 */
/* 622 */	NdrFcShort( 0x7 ),	/* 7 */
/* 624 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 626 */	NdrFcShort( 0xd ),	/* 13 */
/* 628 */	NdrFcShort( 0x8 ),	/* 8 */
/* 630 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 632 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 634 */	NdrFcShort( 0x0 ),	/* 0 */
/* 636 */	NdrFcShort( 0x0 ),	/* 0 */
/* 638 */	NdrFcShort( 0x0 ),	/* 0 */
/* 640 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyArray */

/* 642 */	NdrFcShort( 0x148 ),	/* Flags:  in, base type, simple ref, */
/* 644 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 646 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter dwArraySize */

/* 648 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 650 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 652 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppbyBuffer */

/* 654 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
/* 656 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 658 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 660 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 662 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 664 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertByteBufferToByteArray */

/* 666 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 668 */	NdrFcLong( 0x0 ),	/* 0 */
/* 672 */	NdrFcShort( 0x8 ),	/* 8 */
/* 674 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 676 */	NdrFcShort( 0x0 ),	/* 0 */
/* 678 */	NdrFcShort( 0x8 ),	/* 8 */
/* 680 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 682 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 684 */	NdrFcShort( 0x3 ),	/* 3 */
/* 686 */	NdrFcShort( 0x0 ),	/* 0 */
/* 688 */	NdrFcShort( 0x0 ),	/* 0 */
/* 690 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyBuffer */

/* 692 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 694 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 696 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppArray */

/* 698 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 700 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 702 */	NdrFcShort( 0x48 ),	/* Type Offset=72 */

	/* Return value */

/* 704 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 706 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 708 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertByteBufferToSafeArray */

/* 710 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 712 */	NdrFcLong( 0x0 ),	/* 0 */
/* 716 */	NdrFcShort( 0x9 ),	/* 9 */
/* 718 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 720 */	NdrFcShort( 0x0 ),	/* 0 */
/* 722 */	NdrFcShort( 0x8 ),	/* 8 */
/* 724 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 726 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 728 */	NdrFcShort( 0x12 ),	/* 18 */
/* 730 */	NdrFcShort( 0x0 ),	/* 0 */
/* 732 */	NdrFcShort( 0x0 ),	/* 0 */
/* 734 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyBuffer */

/* 736 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 738 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 740 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppbyArray */

/* 742 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 744 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 746 */	NdrFcShort( 0x476 ),	/* Type Offset=1142 */

	/* Return value */

/* 748 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 750 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 752 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConvertSafeArrayToByteBuffer */

/* 754 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 756 */	NdrFcLong( 0x0 ),	/* 0 */
/* 760 */	NdrFcShort( 0xa ),	/* 10 */
/* 762 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 764 */	NdrFcShort( 0x0 ),	/* 0 */
/* 766 */	NdrFcShort( 0x8 ),	/* 8 */
/* 768 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 770 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 772 */	NdrFcShort( 0x0 ),	/* 0 */
/* 774 */	NdrFcShort( 0x12 ),	/* 18 */
/* 776 */	NdrFcShort( 0x0 ),	/* 0 */
/* 778 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyArray */

/* 780 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 782 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 784 */	NdrFcShort( 0x488 ),	/* Type Offset=1160 */

	/* Parameter ppbyBuff */

/* 786 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
/* 788 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 790 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 792 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 794 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 796 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure CreateByteArray */

/* 798 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 800 */	NdrFcLong( 0x0 ),	/* 0 */
/* 804 */	NdrFcShort( 0xb ),	/* 11 */
/* 806 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 808 */	NdrFcShort( 0x8 ),	/* 8 */
/* 810 */	NdrFcShort( 0x15 ),	/* 21 */
/* 812 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 814 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 816 */	NdrFcShort( 0x0 ),	/* 0 */
/* 818 */	NdrFcShort( 0x0 ),	/* 0 */
/* 820 */	NdrFcShort( 0x0 ),	/* 0 */
/* 822 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter dwAllocSize */

/* 824 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 826 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 828 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppbyArray */

/* 830 */	NdrFcShort( 0x2012 ),	/* Flags:  must free, out, srv alloc size=8 */
/* 832 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 834 */	NdrFcShort( 0x492 ),	/* Type Offset=1170 */

	/* Return value */

/* 836 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 838 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 840 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure CreateByteBuffer */

/* 842 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 844 */	NdrFcLong( 0x0 ),	/* 0 */
/* 848 */	NdrFcShort( 0xc ),	/* 12 */
/* 850 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 852 */	NdrFcShort( 0x8 ),	/* 8 */
/* 854 */	NdrFcShort( 0x8 ),	/* 8 */
/* 856 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 858 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 860 */	NdrFcShort( 0x0 ),	/* 0 */
/* 862 */	NdrFcShort( 0x0 ),	/* 0 */
/* 864 */	NdrFcShort( 0x0 ),	/* 0 */
/* 866 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter dwAllocSize */

/* 868 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 870 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 872 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppbyBuff */

/* 874 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
/* 876 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 878 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 880 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 882 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 884 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure CreateSafeArray */

/* 886 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 888 */	NdrFcLong( 0x0 ),	/* 0 */
/* 892 */	NdrFcShort( 0xd ),	/* 13 */
/* 894 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 896 */	NdrFcShort( 0x8 ),	/* 8 */
/* 898 */	NdrFcShort( 0x8 ),	/* 8 */
/* 900 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 902 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 904 */	NdrFcShort( 0x12 ),	/* 18 */
/* 906 */	NdrFcShort( 0x0 ),	/* 0 */
/* 908 */	NdrFcShort( 0x0 ),	/* 0 */
/* 910 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter nAllocSize */

/* 912 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 914 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 916 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppArray */

/* 918 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 920 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 922 */	NdrFcShort( 0x476 ),	/* Type Offset=1142 */

	/* Return value */

/* 924 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 926 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 928 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure FreeIStreamMemoryPtr */

/* 930 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 932 */	NdrFcLong( 0x0 ),	/* 0 */
/* 936 */	NdrFcShort( 0xe ),	/* 14 */
/* 938 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 940 */	NdrFcShort( 0x5 ),	/* 5 */
/* 942 */	NdrFcShort( 0x8 ),	/* 8 */
/* 944 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 946 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 948 */	NdrFcShort( 0x0 ),	/* 0 */
/* 950 */	NdrFcShort( 0x0 ),	/* 0 */
/* 952 */	NdrFcShort( 0x0 ),	/* 0 */
/* 954 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStrm */

/* 956 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 958 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 960 */	NdrFcShort( 0x6 ),	/* Type Offset=6 */

	/* Parameter pMem */

/* 962 */	NdrFcShort( 0x148 ),	/* Flags:  in, base type, simple ref, */
/* 964 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 966 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 968 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 970 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 972 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetAtIStreamMemory */

/* 974 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 976 */	NdrFcLong( 0x0 ),	/* 0 */
/* 980 */	NdrFcShort( 0xf ),	/* 15 */
/* 982 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 984 */	NdrFcShort( 0x0 ),	/* 0 */
/* 986 */	NdrFcShort( 0x8 ),	/* 8 */
/* 988 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 990 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 992 */	NdrFcShort( 0x3 ),	/* 3 */
/* 994 */	NdrFcShort( 0x0 ),	/* 0 */
/* 996 */	NdrFcShort( 0x0 ),	/* 0 */
/* 998 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStrm */

/* 1000 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 1002 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1004 */	NdrFcShort( 0x6 ),	/* Type Offset=6 */

	/* Parameter ppMem */

/* 1006 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 1008 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1010 */	NdrFcShort( 0x48 ),	/* Type Offset=72 */

	/* Return value */

/* 1012 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1014 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1016 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SizeOfIStream */

/* 1018 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1020 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1024 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1026 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 1028 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1030 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1032 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 1034 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1036 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1038 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1040 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1042 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStrm */

/* 1044 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 1046 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1048 */	NdrFcShort( 0x6 ),	/* Type Offset=6 */

	/* Parameter puliSize */

/* 1050 */	NdrFcShort( 0x2112 ),	/* Flags:  must free, out, simple ref, srv alloc size=8 */
/* 1052 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1054 */	NdrFcShort( 0x2c0 ),	/* Type Offset=704 */

	/* Return value */

/* 1056 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1058 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1060 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Atr */


	/* Procedure get_Apdu */

/* 1062 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1064 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1068 */	NdrFcShort( 0x7 ),	/* 7 */
/* 1070 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1072 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1074 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1076 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x2,		/* 2 */
/* 1078 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1080 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1082 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1084 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1086 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppAtr */


	/* Parameter ppApdu */

/* 1088 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
/* 1090 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1092 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */


	/* Return value */

/* 1094 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1096 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1098 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_Apdu */

/* 1100 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1102 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1106 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1108 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1110 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1112 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1114 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 1116 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1118 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1120 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1122 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1124 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pApdu */

/* 1126 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 1128 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1130 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Return value */

/* 1132 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1134 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1136 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ApduLength */

/* 1138 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1140 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1144 */	NdrFcShort( 0x9 ),	/* 9 */
/* 1146 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1148 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1150 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1152 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1154 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1156 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1158 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1160 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1162 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter plSize */

/* 1164 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1166 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1168 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1170 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1172 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1174 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ApduReply */

/* 1176 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1178 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1182 */	NdrFcShort( 0xa ),	/* 10 */
/* 1184 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1186 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1188 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1190 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x2,		/* 2 */
/* 1192 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1194 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1196 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1198 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1200 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppReplyApdu */

/* 1202 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
/* 1204 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1206 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 1208 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1210 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1212 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ApduReply */

/* 1214 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1216 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1220 */	NdrFcShort( 0xb ),	/* 11 */
/* 1222 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1224 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1226 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1228 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 1230 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1232 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1234 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1236 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1238 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pReplyApdu */

/* 1240 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 1242 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1244 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Return value */

/* 1246 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1248 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1250 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ApduReplyLength */

/* 1252 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1254 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1258 */	NdrFcShort( 0xc ),	/* 12 */
/* 1260 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1262 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1264 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1266 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1268 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1270 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1272 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1274 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1276 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter plSize */

/* 1278 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1280 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1282 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1284 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1286 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1288 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ApduReplyLength */

/* 1290 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1292 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1296 */	NdrFcShort( 0xd ),	/* 13 */
/* 1298 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1300 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1302 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1304 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1306 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1308 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1310 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1312 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1314 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter lSize */

/* 1316 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1318 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1320 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1322 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1324 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1326 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ClassId */

/* 1328 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1330 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1334 */	NdrFcShort( 0xe ),	/* 14 */
/* 1336 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1338 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1340 */	NdrFcShort( 0xd ),	/* 13 */
/* 1342 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1344 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1346 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1348 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1350 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1352 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyClass */

/* 1354 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1356 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1358 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1360 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1362 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1364 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ClassId */

/* 1366 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1368 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1372 */	NdrFcShort( 0xf ),	/* 15 */
/* 1374 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1376 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1378 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1380 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1382 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1384 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1386 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1388 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1390 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClass */

/* 1392 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1394 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1396 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1398 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1400 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1402 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Data */

/* 1404 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1406 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1410 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1412 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1414 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1416 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1418 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x2,		/* 2 */
/* 1420 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1422 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1424 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1426 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1428 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppData */

/* 1430 */	NdrFcShort( 0x13 ),	/* Flags:  must size, must free, out, */
/* 1432 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1434 */	NdrFcShort( 0x44 ),	/* Type Offset=68 */

	/* Return value */

/* 1436 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1438 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1440 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_Data */

/* 1442 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1444 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1448 */	NdrFcShort( 0x11 ),	/* 17 */
/* 1450 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1452 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1454 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1456 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 1458 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1460 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1462 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1464 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1466 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pData */

/* 1468 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 1470 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1472 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Return value */

/* 1474 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1476 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1478 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_InstructionId */

/* 1480 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1482 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1486 */	NdrFcShort( 0x12 ),	/* 18 */
/* 1488 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1490 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1492 */	NdrFcShort( 0xd ),	/* 13 */
/* 1494 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1496 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1498 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1500 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1502 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1504 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyIns */

/* 1506 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1508 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1510 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1512 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1514 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1516 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SetDefaultClassId */


	/* Procedure put_InstructionId */

/* 1518 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1520 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1524 */	NdrFcShort( 0x13 ),	/* 19 */
/* 1526 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1528 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1530 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1532 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1534 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1536 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1538 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1540 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1542 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClass */


	/* Parameter byIns */

/* 1544 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1546 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1548 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */


	/* Return value */

/* 1550 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1552 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1554 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_LeField */

/* 1556 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1558 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1562 */	NdrFcShort( 0x14 ),	/* 20 */
/* 1564 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1566 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1568 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1570 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1572 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1574 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1576 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1578 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1580 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter plSize */

/* 1582 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1584 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1586 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1588 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1590 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1592 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_P1 */

/* 1594 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1596 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1600 */	NdrFcShort( 0x15 ),	/* 21 */
/* 1602 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1604 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1606 */	NdrFcShort( 0xd ),	/* 13 */
/* 1608 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1610 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1612 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1614 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1616 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1618 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyP1 */

/* 1620 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1622 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1624 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1626 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1628 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1630 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_P1 */

/* 1632 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1634 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1638 */	NdrFcShort( 0x16 ),	/* 22 */
/* 1640 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1642 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1644 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1646 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1648 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1650 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1652 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1654 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1656 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 1658 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1660 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1662 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1664 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1666 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1668 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_P2 */

/* 1670 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1672 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1676 */	NdrFcShort( 0x17 ),	/* 23 */
/* 1678 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1680 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1682 */	NdrFcShort( 0xd ),	/* 13 */
/* 1684 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1686 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1688 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1690 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1692 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1694 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyP2 */

/* 1696 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1698 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1700 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1702 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1704 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1706 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_P2 */

/* 1708 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1710 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1714 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1716 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1718 */	NdrFcShort( 0x5 ),	/* 5 */
/* 1720 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1722 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1724 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1726 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1728 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1730 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1732 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP2 */

/* 1734 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1736 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1738 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1740 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1742 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1744 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_P3 */

/* 1746 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1748 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1752 */	NdrFcShort( 0x19 ),	/* 25 */
/* 1754 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1756 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1758 */	NdrFcShort( 0xd ),	/* 13 */
/* 1760 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1762 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1764 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1766 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1768 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1770 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyP3 */

/* 1772 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1774 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1776 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1778 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1780 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1782 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyStatus */

/* 1784 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1786 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1790 */	NdrFcShort( 0x1a ),	/* 26 */
/* 1792 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1794 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1796 */	NdrFcShort( 0xe ),	/* 14 */
/* 1798 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1800 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1802 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1804 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1806 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1808 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pwStatus */

/* 1810 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1812 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1814 */	0x6,		/* FC_SHORT */
			0x0,		/* 0 */

	/* Return value */

/* 1816 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1818 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1820 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ReplyStatus */

/* 1822 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1824 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1828 */	NdrFcShort( 0x1b ),	/* 27 */
/* 1830 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1832 */	NdrFcShort( 0x6 ),	/* 6 */
/* 1834 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1836 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1838 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1840 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1842 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1844 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1846 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter wStatus */

/* 1848 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1850 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1852 */	0x6,		/* FC_SHORT */
			0x0,		/* 0 */

	/* Return value */

/* 1854 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1856 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1858 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyStatusSW1 */

/* 1860 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1862 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1866 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1868 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1870 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1872 */	NdrFcShort( 0xd ),	/* 13 */
/* 1874 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1876 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1878 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1880 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1882 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1884 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbySW1 */

/* 1886 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1888 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1890 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1892 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1894 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1896 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyStatusSW2 */

/* 1898 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1900 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1904 */	NdrFcShort( 0x1d ),	/* 29 */
/* 1906 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1908 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1910 */	NdrFcShort( 0xd ),	/* 13 */
/* 1912 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1914 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1916 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1918 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1920 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1922 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbySW2 */

/* 1924 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 1926 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1928 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 1930 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1932 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1934 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Type */

/* 1936 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1938 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1942 */	NdrFcShort( 0x1e ),	/* 30 */
/* 1944 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1946 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1948 */	NdrFcShort( 0xe ),	/* 14 */
/* 1950 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1952 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1954 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1956 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1958 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1960 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pType */

/* 1962 */	NdrFcShort( 0x2010 ),	/* Flags:  out, srv alloc size=8 */
/* 1964 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 1966 */	NdrFcShort( 0x4a6 ),	/* Type Offset=1190 */

	/* Return value */

/* 1968 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1970 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 1972 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Nad */

/* 1974 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 1976 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1980 */	NdrFcShort( 0x1f ),	/* 31 */
/* 1982 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 1984 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1986 */	NdrFcShort( 0xd ),	/* 13 */
/* 1988 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1990 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1992 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1994 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1996 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1998 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbNad */

/* 2000 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2002 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2004 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2006 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2008 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2010 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_Nad */

/* 2012 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2014 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2018 */	NdrFcShort( 0x20 ),	/* 32 */
/* 2020 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2022 */	NdrFcShort( 0x5 ),	/* 5 */
/* 2024 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2026 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2028 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2030 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2032 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2034 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2036 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bNad */

/* 2038 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2040 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2042 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2044 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2046 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2048 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_ReplyNad */

/* 2050 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2052 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2056 */	NdrFcShort( 0x21 ),	/* 33 */
/* 2058 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2060 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2062 */	NdrFcShort( 0xd ),	/* 13 */
/* 2064 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2066 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2068 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2070 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2072 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2074 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbNad */

/* 2076 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2078 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2080 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2082 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2084 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2086 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_ReplyNad */

/* 2088 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2090 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2094 */	NdrFcShort( 0x22 ),	/* 34 */
/* 2096 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2098 */	NdrFcShort( 0x5 ),	/* 5 */
/* 2100 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2102 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2104 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2106 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2108 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2110 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2112 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bNad */

/* 2114 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2116 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2118 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2120 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2122 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2124 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure BuildCmd */

/* 2126 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2128 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2132 */	NdrFcShort( 0x23 ),	/* 35 */
/* 2134 */	NdrFcShort( 0x40 ),	/* ia64, axp64 Stack size/offset = 64 */
/* 2136 */	NdrFcShort( 0x1c ),	/* 28 */
/* 2138 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2140 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x7,		/* 7 */
/* 2142 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2144 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2146 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2148 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2150 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClassId */

/* 2152 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2154 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2156 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byInsId */

/* 2158 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2160 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2162 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP1 */

/* 2164 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2166 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2168 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2170 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2172 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2174 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pbyData */

/* 2176 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2178 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2180 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter plLe */

/* 2182 */	NdrFcShort( 0x148 ),	/* Flags:  in, base type, simple ref, */
/* 2184 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2186 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2188 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2190 */	NdrFcShort( 0x38 ),	/* ia64, axp64 Stack size/offset = 56 */
/* 2192 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Clear */

/* 2194 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2196 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2200 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2202 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2204 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2206 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2208 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x1,		/* 1 */
/* 2210 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2212 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2214 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2216 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2218 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Return value */

/* 2220 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2222 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2224 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Encapsulate */

/* 2226 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2228 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2232 */	NdrFcShort( 0x25 ),	/* 37 */
/* 2234 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2236 */	NdrFcShort( 0x6 ),	/* 6 */
/* 2238 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2240 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 2242 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2244 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2246 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2248 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2250 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pApdu */

/* 2252 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2254 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2256 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ApduType */

/* 2258 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2260 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2262 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Return value */

/* 2264 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2266 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2268 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_AlternateClassId */

/* 2270 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2272 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2276 */	NdrFcShort( 0x26 ),	/* 38 */
/* 2278 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2280 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2282 */	NdrFcShort( 0xd ),	/* 13 */
/* 2284 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2286 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2288 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2290 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2292 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2294 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pbyClass */

/* 2296 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2298 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2300 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2302 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2304 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2306 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure put_AlternateClassId */

/* 2308 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2310 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2314 */	NdrFcShort( 0x27 ),	/* 39 */
/* 2316 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2318 */	NdrFcShort( 0x5 ),	/* 5 */
/* 2320 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2322 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2324 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2326 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2328 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2330 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2332 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byClass */

/* 2334 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2336 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2338 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Return value */

/* 2340 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2342 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2344 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure AppendRecord */

/* 2346 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2348 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2352 */	NdrFcShort( 0x7 ),	/* 7 */
/* 2354 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2356 */	NdrFcShort( 0x5 ),	/* 5 */
/* 2358 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2360 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 2362 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2364 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2366 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2368 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2370 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRefCtrl */

/* 2372 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2374 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2376 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2378 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2380 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2382 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2384 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2386 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2388 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2390 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2392 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2394 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure EraseBinary */

/* 2396 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2398 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2402 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2404 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2406 */	NdrFcShort( 0xa ),	/* 10 */
/* 2408 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2410 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2412 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2414 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2416 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2418 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2420 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2422 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2424 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2426 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2428 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2430 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2432 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2434 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2436 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2438 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2440 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2442 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2444 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2446 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2448 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2450 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ExternalAuthenticate */

/* 2452 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2454 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2458 */	NdrFcShort( 0x9 ),	/* 9 */
/* 2460 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2462 */	NdrFcShort( 0xa ),	/* 10 */
/* 2464 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2466 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2468 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2470 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2472 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2474 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2476 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byAlgorithmRef */

/* 2478 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2480 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2482 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter bySecretRef */

/* 2484 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2486 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2488 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pChallenge */

/* 2490 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2492 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2494 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2496 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2498 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2500 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2502 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2504 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2506 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetChallenge */

/* 2508 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2510 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2514 */	NdrFcShort( 0xa ),	/* 10 */
/* 2516 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2518 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2520 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2522 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 2524 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2526 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2528 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2530 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2532 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter lBytesExpected */

/* 2534 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2536 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2538 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2540 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2542 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2544 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2546 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2548 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2550 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetData */

/* 2552 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2554 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2558 */	NdrFcShort( 0xb ),	/* 11 */
/* 2560 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2562 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2564 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2566 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2568 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2570 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2572 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2574 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2576 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2578 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2580 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2582 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2584 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2586 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2588 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lBytesToGet */

/* 2590 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2592 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2594 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2596 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2598 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2600 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2602 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2604 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2606 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetResponse */

/* 2608 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2610 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2614 */	NdrFcShort( 0xc ),	/* 12 */
/* 2616 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2618 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2620 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2622 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2624 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2626 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2628 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2630 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2632 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2634 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2636 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2638 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2640 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2642 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2644 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lDataLength */

/* 2646 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2648 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2650 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2652 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2654 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2656 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2658 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2660 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2662 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure InternalAuthenticate */

/* 2664 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2666 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2670 */	NdrFcShort( 0xd ),	/* 13 */
/* 2672 */	NdrFcShort( 0x38 ),	/* ia64, axp64 Stack size/offset = 56 */
/* 2674 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2676 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2678 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 2680 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2682 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2684 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2686 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2688 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byAlgorithmRef */

/* 2690 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2692 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2694 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter bySecretRef */

/* 2696 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2698 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2700 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pChallenge */

/* 2702 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2704 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2706 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter lReplyBytes */

/* 2708 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2710 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2712 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2714 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2716 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2718 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2720 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2722 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2724 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ManageChannel */

/* 2726 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2728 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2732 */	NdrFcShort( 0xe ),	/* 14 */
/* 2734 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2736 */	NdrFcShort( 0xa ),	/* 10 */
/* 2738 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2740 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 2742 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2744 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2746 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2748 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2750 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byChannelState */

/* 2752 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2754 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2756 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byChannel */

/* 2758 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2760 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2762 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2764 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2766 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2768 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2770 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2772 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2774 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure PutData */

/* 2776 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2778 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2782 */	NdrFcShort( 0xf ),	/* 15 */
/* 2784 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2786 */	NdrFcShort( 0xa ),	/* 10 */
/* 2788 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2790 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2792 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2794 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2796 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2798 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2800 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2802 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2804 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2806 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2808 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2810 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2812 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2814 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2816 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2818 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 2820 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2822 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2824 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2826 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2828 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2830 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ReadBinary */

/* 2832 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2834 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2838 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2840 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2842 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2844 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2846 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2848 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2850 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2852 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2854 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2856 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2858 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2860 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2862 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2864 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2866 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2868 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lBytesToRead */

/* 2870 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2872 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2874 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2876 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2878 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2880 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2882 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2884 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2886 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ReadRecord */

/* 2888 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2890 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2894 */	NdrFcShort( 0x11 ),	/* 17 */
/* 2896 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 2898 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2900 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2902 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2904 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2906 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2908 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2910 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2912 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRecordId */

/* 2914 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2916 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2918 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byRefCtrl */

/* 2920 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2922 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2924 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter lBytesToRead */

/* 2926 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2928 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2930 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2932 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2934 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2936 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 2938 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2940 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2942 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SelectFile */

/* 2944 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 2946 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2950 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2952 */	NdrFcShort( 0x38 ),	/* ia64, axp64 Stack size/offset = 56 */
/* 2954 */	NdrFcShort( 0x12 ),	/* 18 */
/* 2956 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2958 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 2960 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2962 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2964 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2966 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2968 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 2970 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2972 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 2974 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 2976 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2978 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 2980 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 2982 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 2984 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 2986 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter lBytesToRead */

/* 2988 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2990 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 2992 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCmd */

/* 2994 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 2996 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 2998 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 3000 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3002 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3004 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UpdateBinary */

/* 3006 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3008 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3012 */	NdrFcShort( 0x14 ),	/* 20 */
/* 3014 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3016 */	NdrFcShort( 0xa ),	/* 10 */
/* 3018 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3020 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3022 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3024 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3026 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3028 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3030 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 3032 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3034 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3036 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 3038 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3040 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3042 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3044 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3046 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3048 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3050 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 3052 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3054 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 3056 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3058 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3060 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UpdateRecord */

/* 3062 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3064 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3068 */	NdrFcShort( 0x15 ),	/* 21 */
/* 3070 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3072 */	NdrFcShort( 0xa ),	/* 10 */
/* 3074 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3076 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3078 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3080 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3082 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3084 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3086 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRecordId */

/* 3088 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3090 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3092 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byRefCtrl */

/* 3094 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3096 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3098 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3100 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3102 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3104 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3106 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 3108 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3110 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 3112 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3114 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3116 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Verify */

/* 3118 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3120 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3124 */	NdrFcShort( 0x16 ),	/* 22 */
/* 3126 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3128 */	NdrFcShort( 0x5 ),	/* 5 */
/* 3130 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3132 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3134 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3136 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3138 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3140 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3142 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRefCtrl */

/* 3144 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3146 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3148 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3150 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3152 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3154 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3156 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 3158 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3160 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 3162 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3164 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3166 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure WriteBinary */

/* 3168 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3170 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3174 */	NdrFcShort( 0x17 ),	/* 23 */
/* 3176 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3178 */	NdrFcShort( 0xa ),	/* 10 */
/* 3180 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3182 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3184 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3186 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3188 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3190 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3192 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byP1 */

/* 3194 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3196 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3198 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byP2 */

/* 3200 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3202 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3204 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3206 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3208 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3210 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3212 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 3214 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3216 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 3218 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3220 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3222 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure WriteRecord */

/* 3224 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3226 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3230 */	NdrFcShort( 0x18 ),	/* 24 */
/* 3232 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3234 */	NdrFcShort( 0xa ),	/* 10 */
/* 3236 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3238 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3240 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3242 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3244 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3246 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3248 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter byRecordId */

/* 3250 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3252 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3254 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter byRefCtrl */

/* 3256 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3258 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3260 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter pData */

/* 3262 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3264 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3266 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter ppCmd */

/* 3268 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 3270 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3272 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 3274 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3276 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3278 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_CardHandle */

/* 3280 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3282 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3286 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3288 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3290 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3292 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3294 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3296 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3298 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3300 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3302 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3304 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pHandle */

/* 3306 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3308 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3310 */	0xb9,		/* FC_UINT3264 */
			0x0,		/* 0 */

	/* Return value */

/* 3312 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3314 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3316 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Context */

/* 3318 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3320 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3324 */	NdrFcShort( 0x9 ),	/* 9 */
/* 3326 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3328 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3330 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3332 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3334 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3336 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3338 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3340 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3342 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pContext */

/* 3344 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3346 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3348 */	0xb9,		/* FC_UINT3264 */
			0x0,		/* 0 */

	/* Return value */

/* 3350 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3352 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3354 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Protocol */

/* 3356 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3358 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3362 */	NdrFcShort( 0xa ),	/* 10 */
/* 3364 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3366 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3368 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3370 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3372 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3374 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3376 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3378 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3380 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pProtocol */

/* 3382 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3384 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3386 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3388 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3390 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3392 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure get_Status */

/* 3394 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3396 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3400 */	NdrFcShort( 0xb ),	/* 11 */
/* 3402 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3404 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3406 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3408 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3410 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3412 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3414 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3416 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3418 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pStatus */

/* 3420 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3422 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3424 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3426 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3428 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3430 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure AttachByHandle */

/* 3432 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3434 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3438 */	NdrFcShort( 0xc ),	/* 12 */
/* 3440 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3442 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3444 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3446 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3448 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3450 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3452 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3454 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3456 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter hCard */

/* 3458 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3460 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3462 */	0xb9,		/* FC_UINT3264 */
			0x0,		/* 0 */

	/* Return value */

/* 3464 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3466 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3468 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure AttachByReader */

/* 3470 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3472 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3476 */	NdrFcShort( 0xd ),	/* 13 */
/* 3478 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3480 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3482 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3484 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3486 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3488 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3490 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3492 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3494 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bstrReaderName */

/* 3496 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3498 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3500 */	NdrFcShort( 0x4cc ),	/* Type Offset=1228 */

	/* Parameter ShareMode */

/* 3502 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3504 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3506 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter PrefProtocol */

/* 3508 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3510 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3512 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3514 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3516 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3518 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Detach */

/* 3520 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3522 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3526 */	NdrFcShort( 0xe ),	/* 14 */
/* 3528 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3530 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3532 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3534 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3536 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3538 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3540 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3542 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3544 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter Disposition */

/* 3546 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3548 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3550 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3552 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3554 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3556 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ReAttach */

/* 3558 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3560 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3564 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3566 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3568 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3570 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3572 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 3574 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3576 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3578 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3580 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3582 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ShareMode */

/* 3584 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3586 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3588 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter InitState */

/* 3590 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3592 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3594 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3596 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3598 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3600 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Transaction */

/* 3602 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3604 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3608 */	NdrFcShort( 0x11 ),	/* 17 */
/* 3610 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3612 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3614 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3616 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x2,		/* 2 */
/* 3618 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3620 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3622 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3624 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3626 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ppCmd */

/* 3628 */	NdrFcShort( 0x201b ),	/* Flags:  must size, must free, in, out, srv alloc size=8 */
/* 3630 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3632 */	NdrFcShort( 0x4aa ),	/* Type Offset=1194 */

	/* Return value */

/* 3634 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3636 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3638 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure UnlockSCard */

/* 3640 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3642 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3646 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3648 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3650 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3652 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3654 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 3656 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3658 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3660 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3662 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3664 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter Disposition */

/* 3666 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3668 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3670 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Return value */

/* 3672 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3674 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3676 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure GetProviderCardId */

/* 3678 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3680 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3684 */	NdrFcShort( 0x7 ),	/* 7 */
/* 3686 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3688 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3690 */	NdrFcShort( 0x30 ),	/* 48 */
/* 3692 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3694 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3696 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3698 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3700 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3702 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bstrCardName */

/* 3704 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3706 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3708 */	NdrFcShort( 0x4cc ),	/* Type Offset=1228 */

	/* Parameter ppguidProviderId */

/* 3710 */	NdrFcShort( 0x2012 ),	/* Flags:  must free, out, srv alloc size=8 */
/* 3712 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3714 */	NdrFcShort( 0x4d6 ),	/* Type Offset=1238 */

	/* Return value */

/* 3716 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3718 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3720 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListCardInterfaces */

/* 3722 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3724 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3728 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3730 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3732 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3734 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3736 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3738 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3740 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3742 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3744 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3746 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter bstrCardName */

/* 3748 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3750 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3752 */	NdrFcShort( 0x4cc ),	/* Type Offset=1228 */

	/* Parameter ppInterfaceGuids */

/* 3754 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 3756 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3758 */	NdrFcShort( 0x476 ),	/* Type Offset=1142 */

	/* Return value */

/* 3760 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3762 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3764 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListCards */

/* 3766 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3768 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3772 */	NdrFcShort( 0x9 ),	/* 9 */
/* 3774 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3776 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3778 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3780 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3782 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3784 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3786 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3788 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3790 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pAtr */

/* 3792 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3794 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3796 */	NdrFcShort( 0x1c ),	/* Type Offset=28 */

	/* Parameter pInterfaceGuids */

/* 3798 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3800 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3802 */	NdrFcShort( 0x488 ),	/* Type Offset=1160 */

	/* Parameter localeId */

/* 3804 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3806 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3808 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCardNames */

/* 3810 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 3812 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3814 */	NdrFcShort( 0x476 ),	/* Type Offset=1142 */

	/* Return value */

/* 3816 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3818 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3820 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListReaderGroups */

/* 3822 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3824 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3828 */	NdrFcShort( 0xa ),	/* 10 */
/* 3830 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3832 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3834 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3836 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 3838 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 3840 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3842 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3844 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3846 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter localeId */

/* 3848 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3850 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3852 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppReaderGroups */

/* 3854 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 3856 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3858 */	NdrFcShort( 0x476 ),	/* Type Offset=1142 */

	/* Return value */

/* 3860 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3862 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3864 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ListReaders */

/* 3866 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3868 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3872 */	NdrFcShort( 0xb ),	/* 11 */
/* 3874 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3876 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3878 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3880 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 3882 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 3884 */	NdrFcShort( 0x12 ),	/* 18 */
/* 3886 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3888 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3890 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter localeId */

/* 3892 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3894 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3896 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppReaders */

/* 3898 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 3900 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3902 */	NdrFcShort( 0x476 ),	/* Type Offset=1142 */

	/* Return value */

/* 3904 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3906 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3908 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConfigureCardGuidSearch */

/* 3910 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3912 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3916 */	NdrFcShort( 0x7 ),	/* 7 */
/* 3918 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3920 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3922 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3924 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3926 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3928 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3930 */	NdrFcShort( 0x25 ),	/* 37 */
/* 3932 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3934 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pCardGuids */

/* 3936 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3938 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3940 */	NdrFcShort( 0x488 ),	/* Type Offset=1160 */

	/* Parameter pGroupNames */

/* 3942 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3944 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 3946 */	NdrFcShort( 0x488 ),	/* Type Offset=1160 */

	/* Parameter bstrTitle */

/* 3948 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3950 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 3952 */	NdrFcShort( 0x4cc ),	/* Type Offset=1228 */

	/* Parameter lFlags */

/* 3954 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3956 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 3958 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3960 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3962 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 3964 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure ConfigureCardNameSearch */

/* 3966 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 3968 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3972 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3974 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 3976 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3978 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3980 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3982 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3984 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3986 */	NdrFcShort( 0x25 ),	/* 37 */
/* 3988 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3990 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter pCardNames */

/* 3992 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 3994 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 3996 */	NdrFcShort( 0x488 ),	/* Type Offset=1160 */

	/* Parameter pGroupNames */

/* 3998 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 4000 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 4002 */	NdrFcShort( 0x488 ),	/* Type Offset=1160 */

	/* Parameter bstrTitle */

/* 4004 */	NdrFcShort( 0x8b ),	/* Flags:  must size, must free, in, by val, */
/* 4006 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 4008 */	NdrFcShort( 0x4cc ),	/* Type Offset=1228 */

	/* Parameter lFlags */

/* 4010 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 4012 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 4014 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 4016 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 4018 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 4020 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure FindCard */

/* 4022 */	0x33,		/* FC_AUTO_HANDLE */
			0x6c,		/* Old Flags:  object, Oi2 */
/* 4024 */	NdrFcLong( 0x0 ),	/* 0 */
/* 4028 */	NdrFcShort( 0x9 ),	/* 9 */
/* 4030 */	NdrFcShort( 0x30 ),	/* ia64, axp64 Stack size/offset = 48 */
/* 4032 */	NdrFcShort( 0x18 ),	/* 24 */
/* 4034 */	NdrFcShort( 0x8 ),	/* 8 */
/* 4036 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x5,		/* 5 */
/* 4038 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 4040 */	NdrFcShort( 0x0 ),	/* 0 */
/* 4042 */	NdrFcShort( 0x0 ),	/* 0 */
/* 4044 */	NdrFcShort( 0x0 ),	/* 0 */
/* 4046 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ShareMode */

/* 4048 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 4050 */	NdrFcShort( 0x8 ),	/* ia64, axp64 Stack size/offset = 8 */
/* 4052 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter Protocols */

/* 4054 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 4056 */	NdrFcShort( 0x10 ),	/* ia64, axp64 Stack size/offset = 16 */
/* 4058 */	0xe,		/* FC_ENUM32 */
			0x0,		/* 0 */

	/* Parameter lFlags */

/* 4060 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 4062 */	NdrFcShort( 0x18 ),	/* ia64, axp64 Stack size/offset = 24 */
/* 4064 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter ppCardInfo */

/* 4066 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 4068 */	NdrFcShort( 0x20 ),	/* ia64, axp64 Stack size/offset = 32 */
/* 4070 */	NdrFcShort( 0x4de ),	/* Type Offset=1246 */

	/* Return value */

/* 4072 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 4074 */	NdrFcShort( 0x28 ),	/* ia64, axp64 Stack size/offset = 40 */
/* 4076 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

			0x0
        }
    };

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
    {
        0,
        {
			NdrFcShort( 0x0 ),	/* 0 */
/*  2 */	
			0x11, 0x10,	/* FC_RP [pointer_deref] */
/*  4 */	NdrFcShort( 0x2 ),	/* Offset= 2 (6) */
/*  6 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/*  8 */	NdrFcLong( 0xc ),	/* 12 */
/* 12 */	NdrFcShort( 0x0 ),	/* 0 */
/* 14 */	NdrFcShort( 0x0 ),	/* 0 */
/* 16 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 18 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 20 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 22 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 24 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 26 */	NdrFcShort( 0x2 ),	/* Offset= 2 (28) */
/* 28 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 30 */	NdrFcLong( 0xe126f8fe ),	/* -517539586 */
/* 34 */	NdrFcShort( 0xa7af ),	/* -22609 */
/* 36 */	NdrFcShort( 0x11d0 ),	/* 4560 */
/* 38 */	0xb8,		/* 184 */
			0x8a,		/* 138 */
/* 40 */	0x0,		/* 0 */
			0xc0,		/* 192 */
/* 42 */	0x4f,		/* 79 */
			0xd4,		/* 212 */
/* 44 */	0x24,		/* 36 */
			0xb9,		/* 185 */
/* 46 */	
			0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 48 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 50 */	
			0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 52 */	0x2,		/* FC_CHAR */
			0x5c,		/* FC_PAD */
/* 54 */	
			0x11, 0x0,	/* FC_RP */
/* 56 */	NdrFcShort( 0x2 ),	/* Offset= 2 (58) */
/* 58 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 60 */	NdrFcShort( 0x14 ),	/* 20 */
/* 62 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 64 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 66 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 68 */	
			0x11, 0x10,	/* FC_RP [pointer_deref] */
/* 70 */	NdrFcShort( 0xffffffd6 ),	/* Offset= -42 (28) */
/* 72 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 74 */	NdrFcShort( 0x2 ),	/* Offset= 2 (76) */
/* 76 */	
			0x13, 0x0,	/* FC_OP */
/* 78 */	NdrFcShort( 0x50 ),	/* Offset= 80 (158) */
/* 80 */	
			0x13, 0x0,	/* FC_OP */
/* 82 */	NdrFcShort( 0x2 ),	/* Offset= 2 (84) */
/* 84 */	
			0x2a,		/* FC_ENCAPSULATED_UNION */
			0x88,		/* 136 */
/* 86 */	NdrFcShort( 0x8 ),	/* 8 */
/* 88 */	NdrFcShort( 0x3 ),	/* 3 */
/* 90 */	NdrFcLong( 0x48746457 ),	/* 1215587415 */
/* 94 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 96 */	NdrFcLong( 0x52746457 ),	/* 1383359575 */
/* 100 */	NdrFcShort( 0xa ),	/* Offset= 10 (110) */
/* 102 */	NdrFcLong( 0x50746457 ),	/* 1349805143 */
/* 106 */	NdrFcShort( 0x800b ),	/* Simple arm type: FC_HYPER */
/* 108 */	NdrFcShort( 0xffffffff ),	/* Offset= -1 (107) */
/* 110 */	
			0x13, 0x0,	/* FC_OP */
/* 112 */	NdrFcShort( 0xe ),	/* Offset= 14 (126) */
/* 114 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 116 */	NdrFcShort( 0x1 ),	/* 1 */
/* 118 */	0x9,		/* Corr desc: FC_ULONG */
			0x0,		/*  */
/* 120 */	NdrFcShort( 0xfffc ),	/* -4 */
/* 122 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 124 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 126 */	
			0x17,		/* FC_CSTRUCT */
			0x3,		/* 3 */
/* 128 */	NdrFcShort( 0x8 ),	/* 8 */
/* 130 */	NdrFcShort( 0xfffffff0 ),	/* Offset= -16 (114) */
/* 132 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 134 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 136 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 138 */	NdrFcShort( 0x0 ),	/* 0 */
/* 140 */	NdrFcShort( 0x8 ),	/* 8 */
/* 142 */	NdrFcShort( 0x0 ),	/* 0 */
/* 144 */	NdrFcShort( 0xffffffc0 ),	/* Offset= -64 (80) */
/* 146 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 148 */	NdrFcShort( 0x1 ),	/* 1 */
/* 150 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 152 */	NdrFcShort( 0x8 ),	/* 8 */
/* 154 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 156 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 158 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 160 */	NdrFcShort( 0x18 ),	/* 24 */
/* 162 */	NdrFcShort( 0x0 ),	/* 0 */
/* 164 */	NdrFcShort( 0xa ),	/* Offset= 10 (174) */
/* 166 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 168 */	NdrFcShort( 0xffffffe0 ),	/* Offset= -32 (136) */
/* 170 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 172 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 174 */	
			0x13, 0x0,	/* FC_OP */
/* 176 */	NdrFcShort( 0xffffffe2 ),	/* Offset= -30 (146) */
/* 178 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 180 */	NdrFcShort( 0x3c2 ),	/* Offset= 962 (1142) */
/* 182 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 184 */	NdrFcShort( 0x2 ),	/* Offset= 2 (186) */
/* 186 */	
			0x13, 0x0,	/* FC_OP */
/* 188 */	NdrFcShort( 0x3a8 ),	/* Offset= 936 (1124) */
/* 190 */	
			0x2a,		/* FC_ENCAPSULATED_UNION */
			0x89,		/* 137 */
/* 192 */	NdrFcShort( 0x20 ),	/* 32 */
/* 194 */	NdrFcShort( 0xa ),	/* 10 */
/* 196 */	NdrFcLong( 0x8 ),	/* 8 */
/* 200 */	NdrFcShort( 0x66 ),	/* Offset= 102 (302) */
/* 202 */	NdrFcLong( 0xd ),	/* 13 */
/* 206 */	NdrFcShort( 0x98 ),	/* Offset= 152 (358) */
/* 208 */	NdrFcLong( 0x9 ),	/* 9 */
/* 212 */	NdrFcShort( 0xca ),	/* Offset= 202 (414) */
/* 214 */	NdrFcLong( 0xc ),	/* 12 */
/* 218 */	NdrFcShort( 0x2a6 ),	/* Offset= 678 (896) */
/* 220 */	NdrFcLong( 0x24 ),	/* 36 */
/* 224 */	NdrFcShort( 0x2c6 ),	/* Offset= 710 (934) */
/* 226 */	NdrFcLong( 0x800d ),	/* 32781 */
/* 230 */	NdrFcShort( 0x2e2 ),	/* Offset= 738 (968) */
/* 232 */	NdrFcLong( 0x10 ),	/* 16 */
/* 236 */	NdrFcShort( 0x2fc ),	/* Offset= 764 (1000) */
/* 238 */	NdrFcLong( 0x2 ),	/* 2 */
/* 242 */	NdrFcShort( 0x312 ),	/* Offset= 786 (1028) */
/* 244 */	NdrFcLong( 0x3 ),	/* 3 */
/* 248 */	NdrFcShort( 0x328 ),	/* Offset= 808 (1056) */
/* 250 */	NdrFcLong( 0x14 ),	/* 20 */
/* 254 */	NdrFcShort( 0x33e ),	/* Offset= 830 (1084) */
/* 256 */	NdrFcShort( 0xffffffff ),	/* Offset= -1 (255) */
/* 258 */	
			0x1b,		/* FC_CARRAY */
			0x1,		/* 1 */
/* 260 */	NdrFcShort( 0x2 ),	/* 2 */
/* 262 */	0x9,		/* Corr desc: FC_ULONG */
			0x0,		/*  */
/* 264 */	NdrFcShort( 0xfffc ),	/* -4 */
/* 266 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 268 */	0x6,		/* FC_SHORT */
			0x5b,		/* FC_END */
/* 270 */	
			0x17,		/* FC_CSTRUCT */
			0x3,		/* 3 */
/* 272 */	NdrFcShort( 0x8 ),	/* 8 */
/* 274 */	NdrFcShort( 0xfffffff0 ),	/* Offset= -16 (258) */
/* 276 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 278 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 280 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 282 */	NdrFcShort( 0x0 ),	/* 0 */
/* 284 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 286 */	NdrFcShort( 0x0 ),	/* 0 */
/* 288 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 290 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 294 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 296 */	
			0x13, 0x0,	/* FC_OP */
/* 298 */	NdrFcShort( 0xffffffe4 ),	/* Offset= -28 (270) */
/* 300 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 302 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 304 */	NdrFcShort( 0x10 ),	/* 16 */
/* 306 */	NdrFcShort( 0x0 ),	/* 0 */
/* 308 */	NdrFcShort( 0x6 ),	/* Offset= 6 (314) */
/* 310 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 312 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 314 */	
			0x11, 0x0,	/* FC_RP */
/* 316 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (280) */
/* 318 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 320 */	NdrFcLong( 0x0 ),	/* 0 */
/* 324 */	NdrFcShort( 0x0 ),	/* 0 */
/* 326 */	NdrFcShort( 0x0 ),	/* 0 */
/* 328 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 330 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 332 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 334 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 336 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 338 */	NdrFcShort( 0x0 ),	/* 0 */
/* 340 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 342 */	NdrFcShort( 0x0 ),	/* 0 */
/* 344 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 346 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 350 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 352 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 354 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (318) */
/* 356 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 358 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 360 */	NdrFcShort( 0x10 ),	/* 16 */
/* 362 */	NdrFcShort( 0x0 ),	/* 0 */
/* 364 */	NdrFcShort( 0x6 ),	/* Offset= 6 (370) */
/* 366 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 368 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 370 */	
			0x11, 0x0,	/* FC_RP */
/* 372 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (336) */
/* 374 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 376 */	NdrFcLong( 0x20400 ),	/* 132096 */
/* 380 */	NdrFcShort( 0x0 ),	/* 0 */
/* 382 */	NdrFcShort( 0x0 ),	/* 0 */
/* 384 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 386 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 388 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 390 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 392 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 394 */	NdrFcShort( 0x0 ),	/* 0 */
/* 396 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 398 */	NdrFcShort( 0x0 ),	/* 0 */
/* 400 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 402 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 406 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 408 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 410 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (374) */
/* 412 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 414 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 416 */	NdrFcShort( 0x10 ),	/* 16 */
/* 418 */	NdrFcShort( 0x0 ),	/* 0 */
/* 420 */	NdrFcShort( 0x6 ),	/* Offset= 6 (426) */
/* 422 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 424 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 426 */	
			0x11, 0x0,	/* FC_RP */
/* 428 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (392) */
/* 430 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0x9,		/* FC_ULONG */
/* 432 */	0x7,		/* Corr desc: FC_USHORT */
			0x0,		/*  */
/* 434 */	NdrFcShort( 0xfff8 ),	/* -8 */
/* 436 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 438 */	NdrFcShort( 0x2 ),	/* Offset= 2 (440) */
/* 440 */	NdrFcShort( 0x10 ),	/* 16 */
/* 442 */	NdrFcShort( 0x2b ),	/* 43 */
/* 444 */	NdrFcLong( 0x3 ),	/* 3 */
/* 448 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 450 */	NdrFcLong( 0x11 ),	/* 17 */
/* 454 */	NdrFcShort( 0x8001 ),	/* Simple arm type: FC_BYTE */
/* 456 */	NdrFcLong( 0x2 ),	/* 2 */
/* 460 */	NdrFcShort( 0x8006 ),	/* Simple arm type: FC_SHORT */
/* 462 */	NdrFcLong( 0x4 ),	/* 4 */
/* 466 */	NdrFcShort( 0x800a ),	/* Simple arm type: FC_FLOAT */
/* 468 */	NdrFcLong( 0x5 ),	/* 5 */
/* 472 */	NdrFcShort( 0x800c ),	/* Simple arm type: FC_DOUBLE */
/* 474 */	NdrFcLong( 0xb ),	/* 11 */
/* 478 */	NdrFcShort( 0x8006 ),	/* Simple arm type: FC_SHORT */
/* 480 */	NdrFcLong( 0xa ),	/* 10 */
/* 484 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 486 */	NdrFcLong( 0x6 ),	/* 6 */
/* 490 */	NdrFcShort( 0xd6 ),	/* Offset= 214 (704) */
/* 492 */	NdrFcLong( 0x7 ),	/* 7 */
/* 496 */	NdrFcShort( 0x800c ),	/* Simple arm type: FC_DOUBLE */
/* 498 */	NdrFcLong( 0x8 ),	/* 8 */
/* 502 */	NdrFcShort( 0xd0 ),	/* Offset= 208 (710) */
/* 504 */	NdrFcLong( 0xd ),	/* 13 */
/* 508 */	NdrFcShort( 0xffffff42 ),	/* Offset= -190 (318) */
/* 510 */	NdrFcLong( 0x9 ),	/* 9 */
/* 514 */	NdrFcShort( 0xffffff74 ),	/* Offset= -140 (374) */
/* 516 */	NdrFcLong( 0x2000 ),	/* 8192 */
/* 520 */	NdrFcShort( 0xc2 ),	/* Offset= 194 (714) */
/* 522 */	NdrFcLong( 0x24 ),	/* 36 */
/* 526 */	NdrFcShort( 0xc4 ),	/* Offset= 196 (722) */
/* 528 */	NdrFcLong( 0x4024 ),	/* 16420 */
/* 532 */	NdrFcShort( 0xbe ),	/* Offset= 190 (722) */
/* 534 */	NdrFcLong( 0x4011 ),	/* 16401 */
/* 538 */	NdrFcShort( 0xf0 ),	/* Offset= 240 (778) */
/* 540 */	NdrFcLong( 0x4002 ),	/* 16386 */
/* 544 */	NdrFcShort( 0xee ),	/* Offset= 238 (782) */
/* 546 */	NdrFcLong( 0x4003 ),	/* 16387 */
/* 550 */	NdrFcShort( 0xec ),	/* Offset= 236 (786) */
/* 552 */	NdrFcLong( 0x4004 ),	/* 16388 */
/* 556 */	NdrFcShort( 0xea ),	/* Offset= 234 (790) */
/* 558 */	NdrFcLong( 0x4005 ),	/* 16389 */
/* 562 */	NdrFcShort( 0xe8 ),	/* Offset= 232 (794) */
/* 564 */	NdrFcLong( 0x400b ),	/* 16395 */
/* 568 */	NdrFcShort( 0xd6 ),	/* Offset= 214 (782) */
/* 570 */	NdrFcLong( 0x400a ),	/* 16394 */
/* 574 */	NdrFcShort( 0xd4 ),	/* Offset= 212 (786) */
/* 576 */	NdrFcLong( 0x4006 ),	/* 16390 */
/* 580 */	NdrFcShort( 0xda ),	/* Offset= 218 (798) */
/* 582 */	NdrFcLong( 0x4007 ),	/* 16391 */
/* 586 */	NdrFcShort( 0xd0 ),	/* Offset= 208 (794) */
/* 588 */	NdrFcLong( 0x4008 ),	/* 16392 */
/* 592 */	NdrFcShort( 0xd2 ),	/* Offset= 210 (802) */
/* 594 */	NdrFcLong( 0x400d ),	/* 16397 */
/* 598 */	NdrFcShort( 0xd0 ),	/* Offset= 208 (806) */
/* 600 */	NdrFcLong( 0x4009 ),	/* 16393 */
/* 604 */	NdrFcShort( 0xce ),	/* Offset= 206 (810) */
/* 606 */	NdrFcLong( 0x6000 ),	/* 24576 */
/* 610 */	NdrFcShort( 0xcc ),	/* Offset= 204 (814) */
/* 612 */	NdrFcLong( 0x400c ),	/* 16396 */
/* 616 */	NdrFcShort( 0xd2 ),	/* Offset= 210 (826) */
/* 618 */	NdrFcLong( 0x10 ),	/* 16 */
/* 622 */	NdrFcShort( 0x8002 ),	/* Simple arm type: FC_CHAR */
/* 624 */	NdrFcLong( 0x12 ),	/* 18 */
/* 628 */	NdrFcShort( 0x8006 ),	/* Simple arm type: FC_SHORT */
/* 630 */	NdrFcLong( 0x13 ),	/* 19 */
/* 634 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 636 */	NdrFcLong( 0x16 ),	/* 22 */
/* 640 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 642 */	NdrFcLong( 0x17 ),	/* 23 */
/* 646 */	NdrFcShort( 0x8008 ),	/* Simple arm type: FC_LONG */
/* 648 */	NdrFcLong( 0xe ),	/* 14 */
/* 652 */	NdrFcShort( 0xb6 ),	/* Offset= 182 (834) */
/* 654 */	NdrFcLong( 0x400e ),	/* 16398 */
/* 658 */	NdrFcShort( 0xbc ),	/* Offset= 188 (846) */
/* 660 */	NdrFcLong( 0x4010 ),	/* 16400 */
/* 664 */	NdrFcShort( 0xba ),	/* Offset= 186 (850) */
/* 666 */	NdrFcLong( 0x4012 ),	/* 16402 */
/* 670 */	NdrFcShort( 0x70 ),	/* Offset= 112 (782) */
/* 672 */	NdrFcLong( 0x4013 ),	/* 16403 */
/* 676 */	NdrFcShort( 0x6e ),	/* Offset= 110 (786) */
/* 678 */	NdrFcLong( 0x4016 ),	/* 16406 */
/* 682 */	NdrFcShort( 0x68 ),	/* Offset= 104 (786) */
/* 684 */	NdrFcLong( 0x4017 ),	/* 16407 */
/* 688 */	NdrFcShort( 0x62 ),	/* Offset= 98 (786) */
/* 690 */	NdrFcLong( 0x0 ),	/* 0 */
/* 694 */	NdrFcShort( 0x0 ),	/* Offset= 0 (694) */
/* 696 */	NdrFcLong( 0x1 ),	/* 1 */
/* 700 */	NdrFcShort( 0x0 ),	/* Offset= 0 (700) */
/* 702 */	NdrFcShort( 0xffffffff ),	/* Offset= -1 (701) */
/* 704 */	
			0x15,		/* FC_STRUCT */
			0x7,		/* 7 */
/* 706 */	NdrFcShort( 0x8 ),	/* 8 */
/* 708 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 710 */	
			0x13, 0x0,	/* FC_OP */
/* 712 */	NdrFcShort( 0xfffffe46 ),	/* Offset= -442 (270) */
/* 714 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 716 */	NdrFcShort( 0x2 ),	/* Offset= 2 (718) */
/* 718 */	
			0x13, 0x0,	/* FC_OP */
/* 720 */	NdrFcShort( 0x194 ),	/* Offset= 404 (1124) */
/* 722 */	
			0x13, 0x0,	/* FC_OP */
/* 724 */	NdrFcShort( 0x20 ),	/* Offset= 32 (756) */
/* 726 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 728 */	NdrFcLong( 0x2f ),	/* 47 */
/* 732 */	NdrFcShort( 0x0 ),	/* 0 */
/* 734 */	NdrFcShort( 0x0 ),	/* 0 */
/* 736 */	0xc0,		/* 192 */
			0x0,		/* 0 */
/* 738 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 740 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 742 */	0x0,		/* 0 */
			0x46,		/* 70 */
/* 744 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 746 */	NdrFcShort( 0x1 ),	/* 1 */
/* 748 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 750 */	NdrFcShort( 0x4 ),	/* 4 */
/* 752 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 754 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 756 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 758 */	NdrFcShort( 0x18 ),	/* 24 */
/* 760 */	NdrFcShort( 0x0 ),	/* 0 */
/* 762 */	NdrFcShort( 0xc ),	/* Offset= 12 (774) */
/* 764 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 766 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 768 */	NdrFcShort( 0xffffffd6 ),	/* Offset= -42 (726) */
/* 770 */	0x39,		/* FC_ALIGNM8 */
			0x36,		/* FC_POINTER */
/* 772 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 774 */	
			0x13, 0x0,	/* FC_OP */
/* 776 */	NdrFcShort( 0xffffffe0 ),	/* Offset= -32 (744) */
/* 778 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 780 */	0x1,		/* FC_BYTE */
			0x5c,		/* FC_PAD */
/* 782 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 784 */	0x6,		/* FC_SHORT */
			0x5c,		/* FC_PAD */
/* 786 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 788 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 790 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 792 */	0xa,		/* FC_FLOAT */
			0x5c,		/* FC_PAD */
/* 794 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 796 */	0xc,		/* FC_DOUBLE */
			0x5c,		/* FC_PAD */
/* 798 */	
			0x13, 0x0,	/* FC_OP */
/* 800 */	NdrFcShort( 0xffffffa0 ),	/* Offset= -96 (704) */
/* 802 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 804 */	NdrFcShort( 0xffffffa2 ),	/* Offset= -94 (710) */
/* 806 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 808 */	NdrFcShort( 0xfffffe16 ),	/* Offset= -490 (318) */
/* 810 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 812 */	NdrFcShort( 0xfffffe4a ),	/* Offset= -438 (374) */
/* 814 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 816 */	NdrFcShort( 0x2 ),	/* Offset= 2 (818) */
/* 818 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 820 */	NdrFcShort( 0x2 ),	/* Offset= 2 (822) */
/* 822 */	
			0x13, 0x0,	/* FC_OP */
/* 824 */	NdrFcShort( 0x12c ),	/* Offset= 300 (1124) */
/* 826 */	
			0x13, 0x10,	/* FC_OP [pointer_deref] */
/* 828 */	NdrFcShort( 0x2 ),	/* Offset= 2 (830) */
/* 830 */	
			0x13, 0x0,	/* FC_OP */
/* 832 */	NdrFcShort( 0x16 ),	/* Offset= 22 (854) */
/* 834 */	
			0x15,		/* FC_STRUCT */
			0x7,		/* 7 */
/* 836 */	NdrFcShort( 0x10 ),	/* 16 */
/* 838 */	0x6,		/* FC_SHORT */
			0x1,		/* FC_BYTE */
/* 840 */	0x1,		/* FC_BYTE */
			0x38,		/* FC_ALIGNM4 */
/* 842 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 844 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 846 */	
			0x13, 0x0,	/* FC_OP */
/* 848 */	NdrFcShort( 0xfffffff2 ),	/* Offset= -14 (834) */
/* 850 */	
			0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 852 */	0x2,		/* FC_CHAR */
			0x5c,		/* FC_PAD */
/* 854 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 856 */	NdrFcShort( 0x20 ),	/* 32 */
/* 858 */	NdrFcShort( 0x0 ),	/* 0 */
/* 860 */	NdrFcShort( 0x0 ),	/* Offset= 0 (860) */
/* 862 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 864 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 866 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 868 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 870 */	NdrFcShort( 0xfffffe48 ),	/* Offset= -440 (430) */
/* 872 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 874 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 876 */	NdrFcShort( 0x0 ),	/* 0 */
/* 878 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 880 */	NdrFcShort( 0x0 ),	/* 0 */
/* 882 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 884 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 888 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 890 */	
			0x13, 0x0,	/* FC_OP */
/* 892 */	NdrFcShort( 0xffffffda ),	/* Offset= -38 (854) */
/* 894 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 896 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 898 */	NdrFcShort( 0x10 ),	/* 16 */
/* 900 */	NdrFcShort( 0x0 ),	/* 0 */
/* 902 */	NdrFcShort( 0x6 ),	/* Offset= 6 (908) */
/* 904 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 906 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 908 */	
			0x11, 0x0,	/* FC_RP */
/* 910 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (874) */
/* 912 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 914 */	NdrFcShort( 0x0 ),	/* 0 */
/* 916 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 918 */	NdrFcShort( 0x0 ),	/* 0 */
/* 920 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 922 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 926 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 928 */	
			0x13, 0x0,	/* FC_OP */
/* 930 */	NdrFcShort( 0xffffff52 ),	/* Offset= -174 (756) */
/* 932 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 934 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 936 */	NdrFcShort( 0x10 ),	/* 16 */
/* 938 */	NdrFcShort( 0x0 ),	/* 0 */
/* 940 */	NdrFcShort( 0x6 ),	/* Offset= 6 (946) */
/* 942 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 944 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 946 */	
			0x11, 0x0,	/* FC_RP */
/* 948 */	NdrFcShort( 0xffffffdc ),	/* Offset= -36 (912) */
/* 950 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 952 */	NdrFcShort( 0x8 ),	/* 8 */
/* 954 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 956 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 958 */	NdrFcShort( 0x10 ),	/* 16 */
/* 960 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 962 */	0x6,		/* FC_SHORT */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 964 */	0x0,		/* 0 */
			NdrFcShort( 0xfffffff1 ),	/* Offset= -15 (950) */
			0x5b,		/* FC_END */
/* 968 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 970 */	NdrFcShort( 0x20 ),	/* 32 */
/* 972 */	NdrFcShort( 0x0 ),	/* 0 */
/* 974 */	NdrFcShort( 0xa ),	/* Offset= 10 (984) */
/* 976 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 978 */	0x36,		/* FC_POINTER */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 980 */	0x0,		/* 0 */
			NdrFcShort( 0xffffffe7 ),	/* Offset= -25 (956) */
			0x5b,		/* FC_END */
/* 984 */	
			0x11, 0x0,	/* FC_RP */
/* 986 */	NdrFcShort( 0xfffffd76 ),	/* Offset= -650 (336) */
/* 988 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 990 */	NdrFcShort( 0x1 ),	/* 1 */
/* 992 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 994 */	NdrFcShort( 0x0 ),	/* 0 */
/* 996 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 998 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 1000 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1002 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1004 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1006 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1012) */
/* 1008 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 1010 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1012 */	
			0x13, 0x0,	/* FC_OP */
/* 1014 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (988) */
/* 1016 */	
			0x1b,		/* FC_CARRAY */
			0x1,		/* 1 */
/* 1018 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1020 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1022 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1024 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1026 */	0x6,		/* FC_SHORT */
			0x5b,		/* FC_END */
/* 1028 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1030 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1032 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1034 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1040) */
/* 1036 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 1038 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1040 */	
			0x13, 0x0,	/* FC_OP */
/* 1042 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (1016) */
/* 1044 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 1046 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1048 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1050 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1052 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1054 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1056 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1058 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1060 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1062 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1068) */
/* 1064 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 1066 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1068 */	
			0x13, 0x0,	/* FC_OP */
/* 1070 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (1044) */
/* 1072 */	
			0x1b,		/* FC_CARRAY */
			0x7,		/* 7 */
/* 1074 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1076 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1078 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1080 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1082 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 1084 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1086 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1088 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1090 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1096) */
/* 1092 */	0x8,		/* FC_LONG */
			0x39,		/* FC_ALIGNM8 */
/* 1094 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1096 */	
			0x13, 0x0,	/* FC_OP */
/* 1098 */	NdrFcShort( 0xffffffe6 ),	/* Offset= -26 (1072) */
/* 1100 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 1102 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1104 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1106 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1108 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 1110 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1112 */	0x7,		/* Corr desc: FC_USHORT */
			0x0,		/*  */
/* 1114 */	NdrFcShort( 0xffc8 ),	/* -56 */
/* 1116 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1118 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1120 */	NdrFcShort( 0xffffffec ),	/* Offset= -20 (1100) */
/* 1122 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1124 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1126 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1128 */	NdrFcShort( 0xffffffec ),	/* Offset= -20 (1108) */
/* 1130 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1130) */
/* 1132 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1134 */	0x38,		/* FC_ALIGNM4 */
			0x8,		/* FC_LONG */
/* 1136 */	0x8,		/* FC_LONG */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 1138 */	0x4,		/* 4 */
			NdrFcShort( 0xfffffc4b ),	/* Offset= -949 (190) */
			0x5b,		/* FC_END */
/* 1142 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 1144 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1146 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1148 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1150 */	NdrFcShort( 0xfffffc38 ),	/* Offset= -968 (182) */
/* 1152 */	
			0x12, 0x10,	/* FC_UP [pointer_deref] */
/* 1154 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1156) */
/* 1156 */	
			0x12, 0x0,	/* FC_UP */
/* 1158 */	NdrFcShort( 0xffffffde ),	/* Offset= -34 (1124) */
/* 1160 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 1162 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1164 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1166 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1168 */	NdrFcShort( 0xfffffff0 ),	/* Offset= -16 (1152) */
/* 1170 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1172 */	NdrFcShort( 0xfffffebe ),	/* Offset= -322 (850) */
/* 1174 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 1176 */	NdrFcShort( 0xfffffe28 ),	/* Offset= -472 (704) */
/* 1178 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1180 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 1182 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1184 */	0x2,		/* FC_CHAR */
			0x5c,		/* FC_PAD */
/* 1186 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1188 */	0x6,		/* FC_SHORT */
			0x5c,		/* FC_PAD */
/* 1190 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1192 */	0xd,		/* FC_ENUM16 */
			0x5c,		/* FC_PAD */
/* 1194 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1196 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1198) */
/* 1198 */	
			0x2f,		/* FC_IP */
			0x5a,		/* FC_CONSTANT_IID */
/* 1200 */	NdrFcLong( 0xd5778ae3 ),	/* -713585949 */
/* 1204 */	NdrFcShort( 0x43de ),	/* 17374 */
/* 1206 */	NdrFcShort( 0x11d0 ),	/* 4560 */
/* 1208 */	0x91,		/* 145 */
			0x71,		/* 113 */
/* 1210 */	0x0,		/* 0 */
			0xaa,		/* 170 */
/* 1212 */	0x0,		/* 0 */
			0xc1,		/* 193 */
/* 1214 */	0x80,		/* 128 */
			0x68,		/* 104 */
/* 1216 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1218 */	0xb9,		/* FC_UINT3264 */
			0x5c,		/* FC_PAD */
/* 1220 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 1222 */	0xe,		/* FC_ENUM32 */
			0x5c,		/* FC_PAD */
/* 1224 */	
			0x12, 0x0,	/* FC_UP */
/* 1226 */	NdrFcShort( 0xfffffc44 ),	/* Offset= -956 (270) */
/* 1228 */	0xb4,		/* FC_USER_MARSHAL */
			0x83,		/* 131 */
/* 1230 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1232 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1234 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1236 */	NdrFcShort( 0xfffffff4 ),	/* Offset= -12 (1224) */
/* 1238 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1240 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1242) */
/* 1242 */	
			0x13, 0x0,	/* FC_OP */
/* 1244 */	NdrFcShort( 0xfffffee0 ),	/* Offset= -288 (956) */
/* 1246 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1248 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1250) */
/* 1250 */	
			0x13, 0x0,	/* FC_OP */
/* 1252 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1254) */
/* 1254 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1256 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1258 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1260 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1260) */
/* 1262 */	0xb9,		/* FC_UINT3264 */
			0xb9,		/* FC_UINT3264 */
/* 1264 */	0xe,		/* FC_ENUM32 */
			0xe,		/* FC_ENUM32 */
/* 1266 */	0x39,		/* FC_ALIGNM8 */
			0xb8,		/* FC_INT3264 */
/* 1268 */	0xb8,		/* FC_INT3264 */
			0xb8,		/* FC_INT3264 */
/* 1270 */	0xb8,		/* FC_INT3264 */
			0x5b,		/* FC_END */

			0x0
        }
    };

const CInterfaceProxyVtbl * _scardssp_ProxyVtblList[] = 
{
    ( CInterfaceProxyVtbl *) &_ISCardTypeConvProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardISO7816ProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardDatabaseProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardLocateProxyVtbl,
    ( CInterfaceProxyVtbl *) &_ISCardCmdProxyVtbl,
    ( CInterfaceProxyVtbl *) &_IByteBufferProxyVtbl,
    0
};

const CInterfaceStubVtbl * _scardssp_StubVtblList[] = 
{
    ( CInterfaceStubVtbl *) &_ISCardTypeConvStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardISO7816StubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardDatabaseStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardLocateStubVtbl,
    ( CInterfaceStubVtbl *) &_ISCardCmdStubVtbl,
    ( CInterfaceStubVtbl *) &_IByteBufferStubVtbl,
    0
};

PCInterfaceName const _scardssp_InterfaceNamesList[] = 
{
    "ISCardTypeConv",
    "ISCardISO7816",
    "ISCard",
    "ISCardDatabase",
    "ISCardLocate",
    "ISCardCmd",
    "IByteBuffer",
    0
};

const IID *  _scardssp_BaseIIDList[] = 
{
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    &IID_IDispatch,
    0
};


#define _scardssp_CHECK_IID(n)	IID_GENERIC_CHECK_IID( _scardssp, pIID, n)

int __stdcall _scardssp_IID_Lookup( const IID * pIID, int * pIndex )
{
    IID_BS_LOOKUP_SETUP

    IID_BS_LOOKUP_INITIAL_TEST( _scardssp, 7, 4 )
    IID_BS_LOOKUP_NEXT_TEST( _scardssp, 2 )
    IID_BS_LOOKUP_NEXT_TEST( _scardssp, 1 )
    IID_BS_LOOKUP_RETURN_RESULT( _scardssp, 7, *pIndex )
    
}

const ExtendedProxyFileInfo scardssp_ProxyFileInfo = 
{
    (PCInterfaceProxyVtblList *) & _scardssp_ProxyVtblList,
    (PCInterfaceStubVtblList *) & _scardssp_StubVtblList,
    (const PCInterfaceName * ) & _scardssp_InterfaceNamesList,
    (const IID ** ) & _scardssp_BaseIIDList,
    & _scardssp_IID_Lookup, 
    7,
    2,
    0, /* table of [async_uuid] interfaces */
    0, /* Filler1 */
    0, /* Filler2 */
    0  /* Filler3 */
};


#endif /* defined(_M_IA64) || defined(_M_AXP64)*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\schannel.h ===
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1992-1999.
//
//  File:       schannel.h
//
//  Contents:   Public Definitions for SCHANNEL Security Provider
//
//  Classes:
//
//  Functions:
//
//----------------------------------------------------------------------------



#ifndef __SCHANNEL_H__
#define __SCHANNEL_H__

#if _MSC_VER > 1000
#pragma once
#endif

#include <wincrypt.h>


//
// Security package names.
//

#define UNISP_NAME_A    "Microsoft Unified Security Protocol Provider"
#define UNISP_NAME_W    L"Microsoft Unified Security Protocol Provider"

#define SSL2SP_NAME_A    "Microsoft SSL 2.0"
#define SSL2SP_NAME_W    L"Microsoft SSL 2.0"

#define SSL3SP_NAME_A    "Microsoft SSL 3.0"
#define SSL3SP_NAME_W    L"Microsoft SSL 3.0"

#define TLS1SP_NAME_A    "Microsoft TLS 1.0"
#define TLS1SP_NAME_W    L"Microsoft TLS 1.0"

#define PCT1SP_NAME_A    "Microsoft PCT 1.0"
#define PCT1SP_NAME_W    L"Microsoft PCT 1.0"

#define SCHANNEL_NAME_A  "Schannel"
#define SCHANNEL_NAME_W  L"Schannel"


#ifdef UNICODE

#define UNISP_NAME  UNISP_NAME_W
#define PCT1SP_NAME  PCT1SP_NAME_W
#define SSL2SP_NAME  SSL2SP_NAME_W
#define SSL3SP_NAME  SSL3SP_NAME_W
#define TLS1SP_NAME  TLS1SP_NAME_W
#define SCHANNEL_NAME  SCHANNEL_NAME_W

#else

#define UNISP_NAME  UNISP_NAME_A
#define PCT1SP_NAME  PCT1SP_NAME_A
#define SSL2SP_NAME  SSL2SP_NAME_A
#define SSL3SP_NAME  SSL3SP_NAME_A
#define TLS1SP_NAME  TLS1SP_NAME_A
#define SCHANNEL_NAME  SCHANNEL_NAME_A

#endif


//
// RPC constants.
//

#define UNISP_RPC_ID    14


//
// QueryContextAttributes/QueryCredentialsAttribute extensions
//

#define SECPKG_ATTR_ISSUER_LIST          0x50   // (OBSOLETE) returns SecPkgContext_IssuerListInfo
#define SECPKG_ATTR_REMOTE_CRED          0x51   // (OBSOLETE) returns SecPkgContext_RemoteCredentialInfo
#define SECPKG_ATTR_LOCAL_CRED           0x52   // (OBSOLETE) returns SecPkgContext_LocalCredentialInfo
#define SECPKG_ATTR_REMOTE_CERT_CONTEXT  0x53   // returns PCCERT_CONTEXT
#define SECPKG_ATTR_LOCAL_CERT_CONTEXT   0x54   // returns PCCERT_CONTEXT
#define SECPKG_ATTR_ROOT_STORE           0x55   // returns HCERTCONTEXT to the root store
#define SECPKG_ATTR_SUPPORTED_ALGS       0x56   // returns SecPkgCred_SupportedAlgs
#define SECPKG_ATTR_CIPHER_STRENGTHS     0x57   // returns SecPkgCred_CipherStrengths
#define SECPKG_ATTR_SUPPORTED_PROTOCOLS  0x58   // returns SecPkgCred_SupportedProtocols
#define SECPKG_ATTR_ISSUER_LIST_EX       0x59   // returns SecPkgContext_IssuerListInfoEx
#define SECPKG_ATTR_CONNECTION_INFO      0x5a   // returns SecPkgContext_ConnectionInfo
#define SECPKG_ATTR_EAP_KEY_BLOCK        0x5b   // returns SecPkgContext_EapKeyBlock
#define SECPKG_ATTR_MAPPED_CRED_ATTR     0x5c   // returns SecPkgContext_MappedCredAttr
#define SECPKG_ATTR_SESSION_INFO         0x5d   // returns SecPkgContext_SessionInfo
#define SECPKG_ATTR_APP_DATA             0x5e   // sets/returns SecPkgContext_SessionAppData
#define SECPKG_ATTR_REMOTE_CERTIFICATES  0x5F   // returns SecPkgContext_Certificates
#define SECPKG_ATTR_CLIENT_CERT_POLICY   0x60   // sets    SecPkgCred_ClientCertCtlPolicy
#define SECPKG_ATTR_CC_POLICY_RESULT     0x61   // returns SecPkgContext_ClientCertPolicyResult
#define SECPKG_ATTR_USE_NCRYPT           0x62   // Sets the CRED_FLAG_USE_NCRYPT_PROVIDER FLAG on cred group
#define SECPKG_ATTR_LOCAL_CERT_INFO      0x63   // returns SecPkgContext_CertInfo
#define SECPKG_ATTR_CIPHER_INFO          0x64   // returns new CNG SecPkgContext_CipherInfo
#define SECPKG_ATTR_EAP_PRF_INFO         0x65   // sets    SecPkgContext_EapPrfInfo


// OBSOLETE - included here for backward compatibility only
typedef struct _SecPkgContext_RemoteCredentialInfo
{
    DWORD   cbCertificateChain;
    PBYTE   pbCertificateChain;
    DWORD   cCertificates;
    DWORD   fFlags;
    DWORD   dwBits;
} SecPkgContext_RemoteCredentialInfo, *PSecPkgContext_RemoteCredentialInfo;

typedef SecPkgContext_RemoteCredentialInfo SecPkgContext_RemoteCredenitalInfo, *PSecPkgContext_RemoteCredenitalInfo;

#define RCRED_STATUS_NOCRED          0x00000000
#define RCRED_CRED_EXISTS            0x00000001
#define RCRED_STATUS_UNKNOWN_ISSUER  0x00000002


// OBSOLETE - included here for backward compatibility only
typedef struct _SecPkgContext_LocalCredentialInfo
{
    DWORD   cbCertificateChain;
    PBYTE   pbCertificateChain;
    DWORD   cCertificates;
    DWORD   fFlags;
    DWORD   dwBits;
} SecPkgContext_LocalCredentialInfo, *PSecPkgContext_LocalCredentialInfo;

typedef SecPkgContext_LocalCredentialInfo SecPkgContext_LocalCredenitalInfo, *PSecPkgContext_LocalCredenitalInfo;

#define LCRED_STATUS_NOCRED          0x00000000
#define LCRED_CRED_EXISTS            0x00000001
#define LCRED_STATUS_UNKNOWN_ISSUER  0x00000002


typedef struct _SecPkgCred_SupportedAlgs
{
    DWORD		cSupportedAlgs;
    ALG_ID		*palgSupportedAlgs;
} SecPkgCred_SupportedAlgs, *PSecPkgCred_SupportedAlgs;


typedef struct _SecPkgCred_CipherStrengths
{
    DWORD       dwMinimumCipherStrength;
    DWORD       dwMaximumCipherStrength;
} SecPkgCred_CipherStrengths, *PSecPkgCred_CipherStrengths;


typedef struct _SecPkgCred_SupportedProtocols
{
    DWORD      	grbitProtocol;
} SecPkgCred_SupportedProtocols, *PSecPkgCred_SupportedProtocols;


typedef struct _SecPkgCred_ClientCertPolicy
{
    DWORD   dwFlags;
    GUID    guidPolicyId;
    DWORD   dwCertFlags;
    DWORD   dwUrlRetrievalTimeout;
    BOOL    fCheckRevocationFreshnessTime;
    DWORD   dwRevocationFreshnessTime;
    BOOL    fOmitUsageCheck;
    LPWSTR  pwszSslCtlStoreName;
    LPWSTR  pwszSslCtlIdentifier;
} SecPkgCred_ClientCertPolicy, *PSecPkgCred_ClientCertPolicy;


typedef struct _SecPkgContext_ClientCertPolicyResult
{
    HRESULT dwPolicyResult;
    GUID    guidPolicyId;
} SecPkgContext_ClientCertPolicyResult, *PSecPkgContext_ClientCertPolicyResult;


typedef struct _SecPkgContext_IssuerListInfoEx
{
    PCERT_NAME_BLOB   	aIssuers;
    DWORD           	cIssuers;
} SecPkgContext_IssuerListInfoEx, *PSecPkgContext_IssuerListInfoEx;


typedef struct _SecPkgContext_ConnectionInfo
{
    DWORD   dwProtocol;
    ALG_ID  aiCipher;
    DWORD   dwCipherStrength;
    ALG_ID  aiHash;
    DWORD   dwHashStrength;
    ALG_ID  aiExch;
    DWORD   dwExchStrength;
} SecPkgContext_ConnectionInfo, *PSecPkgContext_ConnectionInfo;

#define SZ_ALG_MAX_SIZE 64
#define SECPKGCONTEXT_CIPHERINFO_V1 1

typedef struct _SecPkgContext_CipherInfo
{

    DWORD dwVersion;
    DWORD dwProtocol;
    DWORD dwCipherSuite;
    DWORD dwBaseCipherSuite;
    WCHAR szCipherSuite[SZ_ALG_MAX_SIZE];
    WCHAR szCipher[SZ_ALG_MAX_SIZE];
    DWORD dwCipherLen;
    DWORD dwCipherBlockLen;    // in bytes
    WCHAR szHash[SZ_ALG_MAX_SIZE];
    DWORD dwHashLen;
    WCHAR szExchange[SZ_ALG_MAX_SIZE];
    DWORD dwMinExchangeLen;
    DWORD dwMaxExchangeLen;
    WCHAR szCertificate[SZ_ALG_MAX_SIZE];
    DWORD dwKeyType;
} SecPkgContext_CipherInfo, *PSecPkgContext_CipherInfo;



typedef struct _SecPkgContext_EapKeyBlock
{
    BYTE    rgbKeys[128];
    BYTE    rgbIVs[64];
} SecPkgContext_EapKeyBlock, *PSecPkgContext_EapKeyBlock;


typedef struct _SecPkgContext_MappedCredAttr
{
    DWORD   dwAttribute;
    PVOID   pvBuffer;
} SecPkgContext_MappedCredAttr, *PSecPkgContext_MappedCredAttr;


// Flag values for SecPkgContext_SessionInfo
#define SSL_SESSION_RECONNECT   1

typedef struct _SecPkgContext_SessionInfo
{
    DWORD dwFlags;
    DWORD cbSessionId;
    BYTE  rgbSessionId[32];
} SecPkgContext_SessionInfo, *PSecPkgContext_SessionInfo;


typedef struct _SecPkgContext_SessionAppData
{
    DWORD dwFlags;
    DWORD cbAppData;
    __field_bcount(cbAppData) PBYTE pbAppData;
} SecPkgContext_SessionAppData, *PSecPkgContext_SessionAppData;

typedef struct _SecPkgContext_EapPrfInfo
{
    DWORD dwVersion;
    DWORD cbPrfData;
    __field_bcount(cbPrfData) PBYTE pbPrfData;
} SecPkgContext_EapPrfInfo, *PSecPkgContext_EapPrfInfo;


//
// This property returns the raw binary certificates that were received 
// from the remote party. The format of the buffer that's returned is as 
// follows.
// 
//     <4 bytes> length of certificate #1
//     <n bytes> certificate #1
//     <4 bytes> length of certificate #2
//     <n bytes> certificate #2
//     ...
//
// After this data is processed, the caller of QueryContextAttributes 
// must free the pbCertificateChain buffer using FreeContextBuffer.
//
typedef struct _SecPkgContext_Certificates
{
    DWORD   cCertificates;
    DWORD   cbCertificateChain;
    PBYTE   pbCertificateChain;
} SecPkgContext_Certificates, *PSecPkgContext_Certificates;


//
// This property returns information about a certificate. In particular 
// it is useful (and only available) in the kernel where CAPI2 is not
// available.
//
typedef struct _SecPkgContext_CertInfo
{
    DWORD   dwVersion;
    DWORD   cbSubjectName;
    LPWSTR  pwszSubjectName;
    DWORD   cbIssuerName;
    LPWSTR  pwszIssuerName;
    DWORD   dwKeySize;
} SecPkgContext_CertInfo, *PSecPkgContext_CertInfo;

#define KERN_CONTEXT_CERT_INFO_V1 0x00000000

//
// Schannel credentials data structure.
//

#define SCH_CRED_V1              0x00000001
#define SCH_CRED_V2              0x00000002  // for legacy code
#define SCH_CRED_VERSION         0x00000002  // for legacy code
#define SCH_CRED_V3              0x00000003  // for legacy code
#define SCHANNEL_CRED_VERSION    0x00000004


struct _HMAPPER;

typedef struct _SCHANNEL_CRED
{
    DWORD           dwVersion;      // always SCHANNEL_CRED_VERSION
    DWORD           cCreds;
    PCCERT_CONTEXT *paCred;
    HCERTSTORE      hRootStore;

    DWORD           cMappers;
    struct _HMAPPER **aphMappers;

    DWORD           cSupportedAlgs;
    ALG_ID *        palgSupportedAlgs;

    DWORD           grbitEnabledProtocols;
    DWORD           dwMinimumCipherStrength;
    DWORD           dwMaximumCipherStrength;
    DWORD           dwSessionLifespan;
    DWORD           dwFlags;
    DWORD           dwCredFormat;
} SCHANNEL_CRED, *PSCHANNEL_CRED;


// Values for SCHANNEL_CRED dwCredFormat field.
#define SCH_CRED_FORMAT_CERT_CONTEXT    0x00000000
#define SCH_CRED_FORMAT_CERT_HASH       0x00000001
#define SCH_CRED_FORMAT_CERT_HASH_STORE 0x00000002

#define SCH_CRED_MAX_STORE_NAME_SIZE    128
#define SCH_CRED_MAX_SUPPORTED_ALGS     256
#define SCH_CRED_MAX_SUPPORTED_CERTS    100

typedef struct _SCHANNEL_CERT_HASH
{
    DWORD           dwLength;
    DWORD           dwFlags;
    HCRYPTPROV      hProv;
    BYTE            ShaHash[20];
} SCHANNEL_CERT_HASH, *PSCHANNEL_CERT_HASH;

typedef struct _SCHANNEL_CERT_HASH_STORE
{
    DWORD           dwLength;
    DWORD           dwFlags;
    HCRYPTPROV      hProv;
    BYTE            ShaHash[20];
    WCHAR           pwszStoreName[SCH_CRED_MAX_STORE_NAME_SIZE];
} SCHANNEL_CERT_HASH_STORE, *PSCHANNEL_CERT_HASH_STORE;

// Values for SCHANNEL_CERT_HASH dwFlags field.
#define SCH_MACHINE_CERT_HASH           0x00000001


//+-------------------------------------------------------------------------
// Flags for use with SCHANNEL_CRED
//
// SCH_CRED_NO_SYSTEM_MAPPER
//      This flag is intended for use by server applications only. If this
//      flag is set, then schannel does *not* attempt to map received client
//      certificate chains to an NT user account using the built-in system
//      certificate mapper.This flag is ignored by non-NT5 versions of
//      schannel.
//
// SCH_CRED_NO_SERVERNAME_CHECK
//      This flag is intended for use by client applications only. If this
//      flag is set, then when schannel validates the received server
//      certificate chain, is does *not* compare the passed in target name
//      with the subject name embedded in the certificate. This flag is
//      ignored by non-NT5 versions of schannel. This flag is also ignored
//      if the SCH_CRED_MANUAL_CRED_VALIDATION flag is set.
//
// SCH_CRED_MANUAL_CRED_VALIDATION
//      This flag is intended for use by client applications only. If this
//      flag is set, then schannel will *not* automatically attempt to
//      validate the received server certificate chain. This flag is
//      ignored by non-NT5 versions of schannel, but all client applications
//      that wish to validate the certificate chain themselves should
//      specify this flag, so that there's at least a chance they'll run
//      correctly on NT5.
//
// SCH_CRED_NO_DEFAULT_CREDS
//      This flag is intended for use by client applications only. If this
//      flag is set, and the server requests client authentication, then
//      schannel will *not* attempt to automatically acquire a suitable
//      default client certificate chain. This flag is ignored by non-NT5
//      versions of schannel, but all client applications that wish to
//      manually specify their certicate chains should specify this flag,
//      so that there's at least a chance they'll run correctly on NT5.
//
// SCH_CRED_AUTO_CRED_VALIDATION
//      This flag is the opposite of SCH_CRED_MANUAL_CRED_VALIDATION.
//      Conservatively written client applications will always specify one
//      flag or the other.
//
// SCH_CRED_USE_DEFAULT_CREDS
//      This flag is the opposite of SCH_CRED_NO_DEFAULT_CREDS.
//      Conservatively written client applications will always specify one
//      flag or the other.
//
// SCH_CRED_DISABLE_RECONNECTS
//      This flag is intended for use by server applications only. If this 
//      flag is set, then full handshakes performed with this credential 
//      will not be marked suitable for reconnects. A cache entry will still 
//      be created, however, so the session can be made resumable later
//      via a call to ApplyControlToken.
//      
//
// SCH_CRED_REVOCATION_CHECK_END_CERT
// SCH_CRED_REVOCATION_CHECK_CHAIN
// SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT
//      These flags specify that when schannel automatically validates a
//      received certificate chain, some or all of the certificates are to
//      be checked for revocation. Only one of these flags may be specified.
//      See the CertGetCertificateChain function. These flags are ignored by
//      non-NT5 versions of schannel.
//
// SCH_CRED_IGNORE_NO_REVOCATION_CHECK
// SCH_CRED_IGNORE_REVOCATION_OFFLINE
//      These flags instruct schannel to ignore the
//      CRYPT_E_NO_REVOCATION_CHECK and CRYPT_E_REVOCATION_OFFLINE errors
//      respectively if they are encountered when attempting to check the
//      revocation status of a received certificate chain. These flags are
//      ignored if none of the above flags are set.
//
// SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE
//      This flag instructs schannel to pass CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL
//      flags to CertGetCertificateChain when validating the specified
//      credentials during a call to AcquireCredentialsHandle. The default for 
//      vista is to not specify CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL. Use 
//      SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE to override this behavior.
//      NOTE: Prior to Vista, this flag(CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL) was
//      specified by default. 
//
//  SCH_SEND_ROOT_CERT
//      This flag instructs schannel to send the root cert as part of the 
//      certificate message.
//+-------------------------------------------------------------------------
#define SCH_CRED_NO_SYSTEM_MAPPER                    0x00000002
#define SCH_CRED_NO_SERVERNAME_CHECK                 0x00000004
#define SCH_CRED_MANUAL_CRED_VALIDATION              0x00000008
#define SCH_CRED_NO_DEFAULT_CREDS                    0x00000010
#define SCH_CRED_AUTO_CRED_VALIDATION                0x00000020
#define SCH_CRED_USE_DEFAULT_CREDS                   0x00000040
#define SCH_CRED_DISABLE_RECONNECTS                  0x00000080

#define SCH_CRED_REVOCATION_CHECK_END_CERT           0x00000100
#define SCH_CRED_REVOCATION_CHECK_CHAIN              0x00000200
#define SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x00000400
#define SCH_CRED_IGNORE_NO_REVOCATION_CHECK          0x00000800
#define SCH_CRED_IGNORE_REVOCATION_OFFLINE           0x00001000

#define SCH_CRED_RESTRICTED_ROOTS                    0x00002000
#define SCH_CRED_REVOCATION_CHECK_CACHE_ONLY         0x00004000
#define SCH_CRED_CACHE_ONLY_URL_RETRIEVAL            0x00008000

#define SCH_CRED_MEMORY_STORE_CERT                   0x00010000

#define SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE  0x00020000

#define SCH_SEND_ROOT_CERT                           0x00040000

//
//
// ApplyControlToken PkgParams types
//
// These identifiers are the DWORD types
// to be passed into ApplyControlToken
// through a PkgParams buffer.

#define SCHANNEL_RENEGOTIATE    0   // renegotiate a connection
#define SCHANNEL_SHUTDOWN       1   // gracefully close down a connection
#define SCHANNEL_ALERT          2   // build an error message
#define SCHANNEL_SESSION        3   // session control


// Alert token structure.
typedef struct _SCHANNEL_ALERT_TOKEN
{
    DWORD   dwTokenType;            // SCHANNEL_ALERT
    DWORD   dwAlertType;
    DWORD   dwAlertNumber;
} SCHANNEL_ALERT_TOKEN;

// Alert types.
#define TLS1_ALERT_WARNING              1
#define TLS1_ALERT_FATAL                2

// Alert messages.
#define TLS1_ALERT_CLOSE_NOTIFY         0       // warning
#define TLS1_ALERT_UNEXPECTED_MESSAGE   10      // error
#define TLS1_ALERT_BAD_RECORD_MAC       20      // error
#define TLS1_ALERT_DECRYPTION_FAILED    21      // error
#define TLS1_ALERT_RECORD_OVERFLOW      22      // error
#define TLS1_ALERT_DECOMPRESSION_FAIL   30      // error
#define TLS1_ALERT_HANDSHAKE_FAILURE    40      // error
#define TLS1_ALERT_BAD_CERTIFICATE      42      // warning or error
#define TLS1_ALERT_UNSUPPORTED_CERT     43      // warning or error
#define TLS1_ALERT_CERTIFICATE_REVOKED  44      // warning or error
#define TLS1_ALERT_CERTIFICATE_EXPIRED  45      // warning or error
#define TLS1_ALERT_CERTIFICATE_UNKNOWN  46      // warning or error
#define TLS1_ALERT_ILLEGAL_PARAMETER    47      // error
#define TLS1_ALERT_UNKNOWN_CA           48      // error
#define TLS1_ALERT_ACCESS_DENIED        49      // error
#define TLS1_ALERT_DECODE_ERROR         50      // error
#define TLS1_ALERT_DECRYPT_ERROR        51      // error
#define TLS1_ALERT_EXPORT_RESTRICTION   60      // error
#define TLS1_ALERT_PROTOCOL_VERSION     70      // error
#define TLS1_ALERT_INSUFFIENT_SECURITY  71      // error
#define TLS1_ALERT_INTERNAL_ERROR       80      // error
#define TLS1_ALERT_USER_CANCELED        90      // warning or error
#define TLS1_ALERT_NO_RENEGOTIATION    100      // warning


// Session control flags
#define SSL_SESSION_ENABLE_RECONNECTS   1
#define SSL_SESSION_DISABLE_RECONNECTS  2

// Session control token structure.
typedef struct _SCHANNEL_SESSION_TOKEN
{
    DWORD   dwTokenType;        // SCHANNEL_SESSION
    DWORD   dwFlags;
} SCHANNEL_SESSION_TOKEN;


typedef struct _SCHANNEL_CLIENT_SIGNATURE
{
    DWORD       cbLength;
    ALG_ID      aiHash;
    DWORD       cbHash;
    BYTE        HashValue[36];
    BYTE        CertThumbprint[20];
} SCHANNEL_CLIENT_SIGNATURE, *PSCHANNEL_CLIENT_SIGNATURE;


//
// Flags for identifying the various different protocols.
//

/* flag/identifiers for protocols we support */
#define SP_PROT_PCT1_SERVER             0x00000001
#define SP_PROT_PCT1_CLIENT             0x00000002
#define SP_PROT_PCT1                    (SP_PROT_PCT1_SERVER | SP_PROT_PCT1_CLIENT)

#define SP_PROT_SSL2_SERVER             0x00000004
#define SP_PROT_SSL2_CLIENT             0x00000008
#define SP_PROT_SSL2                    (SP_PROT_SSL2_SERVER | SP_PROT_SSL2_CLIENT)

#define SP_PROT_SSL3_SERVER             0x00000010
#define SP_PROT_SSL3_CLIENT             0x00000020
#define SP_PROT_SSL3                    (SP_PROT_SSL3_SERVER | SP_PROT_SSL3_CLIENT)

#define SP_PROT_TLS1_SERVER             0x00000040
#define SP_PROT_TLS1_CLIENT             0x00000080
#define SP_PROT_TLS1                    (SP_PROT_TLS1_SERVER | SP_PROT_TLS1_CLIENT)

#define SP_PROT_SSL3TLS1_CLIENTS        (SP_PROT_TLS1_CLIENT | SP_PROT_SSL3_CLIENT)
#define SP_PROT_SSL3TLS1_SERVERS        (SP_PROT_TLS1_SERVER | SP_PROT_SSL3_SERVER)
#define SP_PROT_SSL3TLS1                (SP_PROT_SSL3 | SP_PROT_TLS1)

#define SP_PROT_UNI_SERVER              0x40000000
#define SP_PROT_UNI_CLIENT              0x80000000
#define SP_PROT_UNI                     (SP_PROT_UNI_SERVER | SP_PROT_UNI_CLIENT)

#define SP_PROT_ALL                     0xffffffff
#define SP_PROT_NONE                    0
#define SP_PROT_CLIENTS                 (SP_PROT_PCT1_CLIENT | SP_PROT_SSL2_CLIENT | SP_PROT_SSL3_CLIENT | SP_PROT_UNI_CLIENT | SP_PROT_TLS1_CLIENT)
#define SP_PROT_SERVERS                 (SP_PROT_PCT1_SERVER | SP_PROT_SSL2_SERVER | SP_PROT_SSL3_SERVER | SP_PROT_UNI_SERVER | SP_PROT_TLS1_SERVER)


//
// Helper function used to flush the SSL session cache.
//

typedef BOOL
(WINAPI * SSL_EMPTY_CACHE_FN_A)(
    LPSTR  pszTargetName,
    DWORD  dwFlags);

BOOL 
WINAPI
SslEmptyCacheA(__in LPSTR  pszTargetName,
               __in DWORD  dwFlags);

typedef BOOL
(WINAPI * SSL_EMPTY_CACHE_FN_W)(
    LPWSTR pszTargetName,
    DWORD  dwFlags);

BOOL 
WINAPI
SslEmptyCacheW(__in LPWSTR pszTargetName,
               __in DWORD  dwFlags);

#ifdef UNICODE
#define SSL_EMPTY_CACHE_FN SSL_EMPTY_CACHE_FN_W
#define SslEmptyCache SslEmptyCacheW
#else
#define SSL_EMPTY_CACHE_FN SSL_EMPTY_CACHE_FN_A
#define SslEmptyCache SslEmptyCacheA
#endif



// Structures for compatability with the
// NT 4.0 SP2 / IE 3.0 schannel interface, do
// not use.

typedef struct _SSL_CREDENTIAL_CERTIFICATE {
    DWORD   cbPrivateKey;
    PBYTE   pPrivateKey;
    DWORD   cbCertificate;
    PBYTE   pCertificate;
    PSTR    pszPassword;
} SSL_CREDENTIAL_CERTIFICATE, * PSSL_CREDENTIAL_CERTIFICATE;




// Structures for use with the
// NT 4.0 SP3 Schannel interface,
// do not use.
#define SCHANNEL_SECRET_TYPE_CAPI   0x00000001
#define SCHANNEL_SECRET_PRIVKEY     0x00000002
#define SCH_CRED_X509_CERTCHAIN     0x00000001
#define SCH_CRED_X509_CAPI          0x00000002
#define SCH_CRED_CERT_CONTEXT       0x00000003

struct _HMAPPER;
typedef struct _SCH_CRED
{
    DWORD     dwVersion;                // always SCH_CRED_VERSION.
    DWORD     cCreds;                   // Number of credentials.
    PVOID     *paSecret;                // Array of SCH_CRED_SECRET_* pointers
    PVOID     *paPublic;                // Array of SCH_CRED_PUBLIC_* pointers
    DWORD     cMappers;                 // Number of credential mappers.
    struct _HMAPPER   **aphMappers;     // pointer to an array of pointers to credential mappers
} SCH_CRED, * PSCH_CRED;

// Structures for use with the
// NT 4.0 SP3 Schannel interface,
// do not use.
typedef struct _SCH_CRED_SECRET_CAPI
{
    DWORD           dwType;      // SCHANNEL_SECRET_TYPE_CAPI
    HCRYPTPROV      hProv;       // credential secret information.

} SCH_CRED_SECRET_CAPI, * PSCH_CRED_SECRET_CAPI;


// Structures for use with the
// NT 4.0 SP3 Schannel interface,
// do not use.
typedef struct _SCH_CRED_SECRET_PRIVKEY
{
    DWORD           dwType;       // SCHANNEL_SECRET_PRIVKEY
    PBYTE           pPrivateKey;   // Der encoded private key
    DWORD           cbPrivateKey;
    PSTR            pszPassword;  // Password to crack the private key.

} SCH_CRED_SECRET_PRIVKEY, * PSCH_CRED_SECRET_PRIVKEY;


// Structures for use with the
// NT 4.0 SP3 Schannel interface,
// do not use.
typedef struct _SCH_CRED_PUBLIC_CERTCHAIN
{
    DWORD       dwType;
    DWORD       cbCertChain;
    PBYTE       pCertChain;
} SCH_CRED_PUBLIC_CERTCHAIN, *PSCH_CRED_PUBLIC_CERTCHAIN;


// Structures needed for Pre NT4.0 SP2 calls.
typedef struct _PctPublicKey
{
    DWORD Type;
    DWORD cbKey;
    UCHAR pKey[1];
} PctPublicKey;

typedef struct _X509Certificate {
    DWORD           Version;
    DWORD           SerialNumber[4];
    ALG_ID          SignatureAlgorithm;
    FILETIME        ValidFrom;
    FILETIME        ValidUntil;
    PSTR            pszIssuer;
    PSTR            pszSubject;
    PctPublicKey    *pPublicKey;
} X509Certificate, * PX509Certificate;



// Pre NT4.0 SP2 calls.  Call CAPI1 or CAPI2
// to get the same functionality instead.
BOOL
WINAPI
SslGenerateKeyPair(
    PSSL_CREDENTIAL_CERTIFICATE pCerts,
    PSTR pszDN,
    PSTR pszPassword,
    DWORD Bits );

// Pre NT4.0 SP2 calls.  Call CAPI1 or CAPI2
// to get the same functionality instead.
VOID
WINAPI
SslGenerateRandomBits(
    PUCHAR      pRandomData,
    LONG        cRandomData
    );

// Pre NT4.0 SP2 calls.  Call CAPI1 or CAPI2
// to get the same functionality instead.
BOOL
WINAPI
SslCrackCertificate(
    PUCHAR              pbCertificate,
    DWORD               cbCertificate,
    DWORD               dwFlags,
    PX509Certificate *  ppCertificate
    );

// Pre NT4.0 SP2 calls.  Call CAPI1 or CAPI2
// to get the same functionality instead.
VOID
WINAPI
SslFreeCertificate(
    PX509Certificate    pCertificate
    );

DWORD
WINAPI
SslGetMaximumKeySize(
    DWORD   Reserved );

BOOL
WINAPI
SslGetDefaultIssuers(
    PBYTE pbIssuers,
    DWORD *pcbIssuers);

#define SSL_CRACK_CERTIFICATE_NAME  TEXT("SslCrackCertificate")
#define SSL_FREE_CERTIFICATE_NAME   TEXT("SslFreeCertificate")

// Pre NT4.0 SP2 calls.  Call CAPI1 or CAPI2
// to get the same functionality instead.
typedef BOOL
(WINAPI * SSL_CRACK_CERTIFICATE_FN)
(
    PUCHAR              pbCertificate,
    DWORD               cbCertificate,
    BOOL                VerifySignature,
    PX509Certificate *  ppCertificate
);


// Pre NT4.0 SP2 calls.  Call CAPI1 or CAPI2
// to get the same functionality instead.
typedef VOID
(WINAPI * SSL_FREE_CERTIFICATE_FN)
(
    PX509Certificate    pCertificate
);


#endif //__SCHANNEL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SCode.h ===
/*++

Copyright (c) 1992-1999 Microsoft Corporation

Module Name:

    scode.h

Abstract:

    Obsolete SCODE header file.  Use WINERROR.H

--*/

#if _MSC_VER > 1000
#pragma once
#endif

#ifndef  _WINERROR_
#include <winerror.h>
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SCardSsp.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0279 */
/* at Fri Oct 01 16:58:17 1999
 */
/* Compiler settings for scardssp.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __scardssp_h__
#define __scardssp_h__

/* Forward Declarations */ 

#ifndef __IByteBuffer_FWD_DEFINED__
#define __IByteBuffer_FWD_DEFINED__
typedef interface IByteBuffer IByteBuffer;
#endif 	/* __IByteBuffer_FWD_DEFINED__ */


#ifndef __ISCardTypeConv_FWD_DEFINED__
#define __ISCardTypeConv_FWD_DEFINED__
typedef interface ISCardTypeConv ISCardTypeConv;
#endif 	/* __ISCardTypeConv_FWD_DEFINED__ */


#ifndef __ISCardCmd_FWD_DEFINED__
#define __ISCardCmd_FWD_DEFINED__
typedef interface ISCardCmd ISCardCmd;
#endif 	/* __ISCardCmd_FWD_DEFINED__ */


#ifndef __ISCardISO7816_FWD_DEFINED__
#define __ISCardISO7816_FWD_DEFINED__
typedef interface ISCardISO7816 ISCardISO7816;
#endif 	/* __ISCardISO7816_FWD_DEFINED__ */


#ifndef __ISCard_FWD_DEFINED__
#define __ISCard_FWD_DEFINED__
typedef interface ISCard ISCard;
#endif 	/* __ISCard_FWD_DEFINED__ */


#ifndef __ISCardDatabase_FWD_DEFINED__
#define __ISCardDatabase_FWD_DEFINED__
typedef interface ISCardDatabase ISCardDatabase;
#endif 	/* __ISCardDatabase_FWD_DEFINED__ */


#ifndef __ISCardLocate_FWD_DEFINED__
#define __ISCardLocate_FWD_DEFINED__
typedef interface ISCardLocate ISCardLocate;
#endif 	/* __ISCardLocate_FWD_DEFINED__ */


#ifndef __CByteBuffer_FWD_DEFINED__
#define __CByteBuffer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CByteBuffer CByteBuffer;
#else
typedef struct CByteBuffer CByteBuffer;
#endif /* __cplusplus */

#endif 	/* __CByteBuffer_FWD_DEFINED__ */


#ifndef __CSCardTypeConv_FWD_DEFINED__
#define __CSCardTypeConv_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSCardTypeConv CSCardTypeConv;
#else
typedef struct CSCardTypeConv CSCardTypeConv;
#endif /* __cplusplus */

#endif 	/* __CSCardTypeConv_FWD_DEFINED__ */


#ifndef __CSCardCmd_FWD_DEFINED__
#define __CSCardCmd_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSCardCmd CSCardCmd;
#else
typedef struct CSCardCmd CSCardCmd;
#endif /* __cplusplus */

#endif 	/* __CSCardCmd_FWD_DEFINED__ */


#ifndef __CSCardISO7816_FWD_DEFINED__
#define __CSCardISO7816_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSCardISO7816 CSCardISO7816;
#else
typedef struct CSCardISO7816 CSCardISO7816;
#endif /* __cplusplus */

#endif 	/* __CSCardISO7816_FWD_DEFINED__ */


#ifndef __CSCard_FWD_DEFINED__
#define __CSCard_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSCard CSCard;
#else
typedef struct CSCard CSCard;
#endif /* __cplusplus */

#endif 	/* __CSCard_FWD_DEFINED__ */


#ifndef __CSCardDatabase_FWD_DEFINED__
#define __CSCardDatabase_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSCardDatabase CSCardDatabase;
#else
typedef struct CSCardDatabase CSCardDatabase;
#endif /* __cplusplus */

#endif 	/* __CSCardDatabase_FWD_DEFINED__ */


#ifndef __CSCardLocate_FWD_DEFINED__
#define __CSCardLocate_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSCardLocate CSCardLocate;
#else
typedef struct CSCardLocate CSCardLocate;
#endif /* __cplusplus */

#endif 	/* __CSCardLocate_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_scardssp_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Smart Card Support
//  Copyright (C) Microsoft Corporation, 1996 - 1999
//
//
// File: scardssp.h
//
//--------------------------------------------------------------------------

//////////////////////////////////////////////////////////////////
//
// Imports
//

//////////////////////////////////////////////////////////////////
//
// Interface declarations
//








//////////////////////////////////////////////////////////////////
//
// Types and Constants
//
#ifndef _NULL_DEFINED
#define _NULL_DEFINED
#endif // !_NULL_DEFINED
#ifndef _BYTE_DEFINED
#define _BYTE_DEFINED
typedef /* [public] */ unsigned char BYTE;

#endif // !_BYTE_DEFINED
#ifndef _LPBYTE_DEFINED
#define _LPBYTE_DEFINED
typedef /* [public] */ BYTE __RPC_FAR *LPBYTE;

#endif // !_LPBYTE_DEFINED
#ifndef _LPCBYTE_DEFINED
#define _LPCBYTE_DEFINED
typedef /* [public] */ const BYTE __RPC_FAR *LPCBYTE;

#endif // !_LPCBYTE_DEFINED
#ifndef _HSCARD_DEFINED
#define _HSCARD_DEFINED
typedef /* [public] */ ULONG_PTR HSCARD;

#endif // !_HSCARD_DEFINED
#ifndef _LPHSCARD_DEFINED
#define _LPHSCARD_DEFINED
typedef /* [unique] */ HSCARD __RPC_FAR *PHSCARD;

typedef /* [unique] */ HSCARD __RPC_FAR *LPHSCARD;

#endif // !_LPHSCARD_DEFINED
#ifndef _HSCARDCONTEXT_DEFINED
#define _HSCARDCONTEXT_DEFINED
typedef /* [public] */ ULONG_PTR HSCARDCONTEXT;

#endif // !_HSCARDCONTEXT_DEFINED
#ifndef _LPHSCARDCONTEXT_DEFINED
#define _LPHSCARDCONTEXT_DEFINED
typedef /* [unique] */ __RPC_FAR *PHSCARDCONTEXT;

typedef /* [unique] */ __RPC_FAR *LPHSCARDCONTEXT;

#endif // !_LPHSCARDCONTEXT_DEFINED
#ifndef _BYTEARRAY_DEFINED
#define _BYTEARRAY_DEFINED
typedef /* [version][helpstring] */ struct tagBYTEARRAY
    {
    HGLOBAL hMem;
    DWORD dwSize;
    /* [size_is] */ LPBYTE pbyData;
    }	BYTEARRAY;

#define _CB_BYTEARRAY_DEFINED
#define CB_BYTEARRAY (sizeof(BYTEARRAY))
#define _PBYTEARRAY_DEFINED
typedef /* [public] */ BYTEARRAY __RPC_FAR *PBYTEARRAY;

#define _PCBYTEARRAY_DEFINED
typedef /* [public] */ const BYTEARRAY __RPC_FAR *PCBYTEARRAY;

#define _LPBYTEARRAY_DEFINED
typedef /* [public] */ BYTEARRAY __RPC_FAR *LPBYTEARRAY;

#define _LPCBYTEARRAY_DEFINED
typedef /* [public] */ const BYTEARRAY __RPC_FAR *LPCBYTEARRAY;

#endif // _BYTEARRAY_DEFINED
#ifndef _STATSTRUCT
#define _STATSTRUCT
typedef /* [version][helpstring] */ struct tagSTATSTRUCT
    {
    LONG type;
    LONG cbSize;
    LONG grfMode;
    LONG grfLocksSupported;
    LONG grfStateBits;
    }	STATSTRUCT;

#define _CB_STATSTRUCT_DEFINED
#define CB_STATSTRUCT    (sizeof(STATSTRUCT))
#define _LPSTATSTRUCT_DEFINED
typedef /* [public] */ STATSTRUCT __RPC_FAR *LPSTATSTRUCT;

#endif // _STATSTRUCT_DEFINED
#ifndef _ISO_APDU_TYPE
#define _ISO_APDU_TYPE
typedef /* [version][helpstring] */ 
enum tagISO_APDU_TYPE
    {	ISO_CASE_1	= 1,
	ISO_CASE_2	= 2,
	ISO_CASE_3	= 3,
	ISO_CASE_4	= 4
    }	ISO_APDU_TYPE;

#endif // _ISO_APDU_TYPE
#ifndef _SCARD_SHARE_MODES_DEFINED
#define _SCARD_SHARE_MODES_DEFINED
typedef /* [version][v1_enum][helpstring] */ 
enum tagSCARD_SHARE_MODES
    {	EXCLUSIVE	= 1,
	SHARED	= 2
    }	SCARD_SHARE_MODES;

#endif // !_SCARD_SHARE_MODES_DEFINED
#ifndef _SCARD_DISPOSITIONS_DEFINED
#define _SCARD_DISPOSITIONS_DEFINED
typedef /* [version][v1_enum][helpstring] */ 
enum tagSCARD_DISPOSITIONS
    {	LEAVE	= 0,
	RESET	= 1,
	UNPOWER	= 2,
	EJECT	= 3
    }	SCARD_DISPOSITIONS;

#endif // !_SCARD_DISPOSITIONS_DEFINED
#ifndef _SCARD_STATES_DEFINED
#define _SCARD_STATES_DEFINED
typedef /* [version][v1_enum][helpstring] */ 
enum tagSCARD_STATES
    {	ABSENT	= 1,
	PRESENT	= 2,
	SWALLOWED	= 3,
	POWERED	= 4,
	NEGOTIABLEMODE	= 5,
	SPECIFICMODE	= 6
    }	SCARD_STATES;

#endif // !_SCARD_STATES_DEFINED
#ifndef _SCARD_PROTOCOLS_DEFINED
#define _SCARD_PROTOCOLS_DEFINED
typedef /* [version][v1_enum][helpstring] */ 
enum tagSCARD_PROTOCOLS
    {	T0	= 0x1,
	T1	= 0x2,
	RAW	= 0xff
    }	SCARD_PROTOCOLS;

#endif // !_SCARD_PROTOCOLS_DEFINED
#ifndef _SCARD_INFO
#define _SCARD_INFO
typedef /* [version][helpstring] */ struct tagSCARDINFO
    {
    HSCARD hCard;
    HSCARDCONTEXT hContext;
    SCARD_PROTOCOLS ActiveProtocol;
    SCARD_SHARE_MODES ShareMode;
    LONG_PTR hwndOwner;
    LONG_PTR lpfnConnectProc;
    LONG_PTR lpfnCheckProc;
    LONG_PTR lpfnDisconnectProc;
    }	SCARDINFO;

#define _LPSCARDINFO
typedef /* [unique] */ SCARDINFO __RPC_FAR *PSCARDINFO;

typedef /* [unique] */ SCARDINFO __RPC_FAR *LPSCARDINFO;

#endif //_SCARD_INFO

//////////////////////////////////////////////////////////////////
//
// IByteBuffer Interface
//
#ifndef _LPBYTEBUFFER_DEFINED
#define _LPBYTEBUFFER_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0000_v0_0_s_ifspec;

#ifndef __IByteBuffer_INTERFACE_DEFINED__
#define __IByteBuffer_INTERFACE_DEFINED__

/* interface IByteBuffer */
/* [unique][helpstring][uuid][object] */ 

typedef /* [unique] */ IByteBuffer __RPC_FAR *LPBYTEBUFFER;

typedef /* [unique] */ const IByteBuffer __RPC_FAR *LPCBYTEBUFFER;


EXTERN_C const IID IID_IByteBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E126F8FE-A7AF-11D0-B88A-00C04FD424B9")
    IByteBuffer : public IDispatch
    {
    public:
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Stream( 
            /* [retval][out] */ LPSTREAM __RPC_FAR *ppStream) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Stream( 
            /* [in] */ LPSTREAM pStream) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [out][in] */ LPBYTEBUFFER __RPC_FAR *ppByteBuffer) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Commit( 
            /* [in] */ LONG grfCommitFlags) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CopyTo( 
            /* [out][in] */ LPBYTEBUFFER __RPC_FAR *ppByteBuffer,
            /* [in] */ LONG cb,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbRead = 0,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbWritten = 0) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [defaultvalue][in] */ LONG lSize = 1,
            /* [defaultvalue][in] */ BYTE __RPC_FAR *pData = 0) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LockRegion( 
            /* [in] */ LONG libOffset,
            /* [in] */ LONG cb,
            /* [in] */ LONG dwLockType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Read( 
            /* [out][in] */ BYTE __RPC_FAR *pByte,
            /* [in] */ LONG cb,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbRead = 0) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Revert( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ LONG dLibMove,
            /* [in] */ LONG dwOrigin,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pLibnewPosition = 0) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetSize( 
            /* [in] */ LONG libNewSize) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Stat( 
            /* [out][in] */ LPSTATSTRUCT pstatstg,
            /* [in] */ LONG grfStatFlag) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnlockRegion( 
            /* [in] */ LONG libOffset,
            /* [in] */ LONG cb,
            /* [in] */ LONG dwLockType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Write( 
            /* [out][in] */ BYTE __RPC_FAR *pByte,
            /* [in] */ LONG cb,
            /* [out][in] */ LONG __RPC_FAR *pcbWritten) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IByteBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IByteBuffer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IByteBuffer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IByteBuffer __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Stream )( 
            IByteBuffer __RPC_FAR * This,
            /* [retval][out] */ LPSTREAM __RPC_FAR *ppStream);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Stream )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ LPSTREAM pStream);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IByteBuffer __RPC_FAR * This,
            /* [out][in] */ LPBYTEBUFFER __RPC_FAR *ppByteBuffer);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Commit )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ LONG grfCommitFlags);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CopyTo )( 
            IByteBuffer __RPC_FAR * This,
            /* [out][in] */ LPBYTEBUFFER __RPC_FAR *ppByteBuffer,
            /* [in] */ LONG cb,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbRead,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbWritten);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Initialize )( 
            IByteBuffer __RPC_FAR * This,
            /* [defaultvalue][in] */ LONG lSize,
            /* [defaultvalue][in] */ BYTE __RPC_FAR *pData);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockRegion )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ LONG libOffset,
            /* [in] */ LONG cb,
            /* [in] */ LONG dwLockType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Read )( 
            IByteBuffer __RPC_FAR * This,
            /* [out][in] */ BYTE __RPC_FAR *pByte,
            /* [in] */ LONG cb,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbRead);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Revert )( 
            IByteBuffer __RPC_FAR * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Seek )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ LONG dLibMove,
            /* [in] */ LONG dwOrigin,
            /* [defaultvalue][out][in] */ LONG __RPC_FAR *pLibnewPosition);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetSize )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ LONG libNewSize);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Stat )( 
            IByteBuffer __RPC_FAR * This,
            /* [out][in] */ LPSTATSTRUCT pstatstg,
            /* [in] */ LONG grfStatFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UnlockRegion )( 
            IByteBuffer __RPC_FAR * This,
            /* [in] */ LONG libOffset,
            /* [in] */ LONG cb,
            /* [in] */ LONG dwLockType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Write )( 
            IByteBuffer __RPC_FAR * This,
            /* [out][in] */ BYTE __RPC_FAR *pByte,
            /* [in] */ LONG cb,
            /* [out][in] */ LONG __RPC_FAR *pcbWritten);
        
        END_INTERFACE
    } IByteBufferVtbl;

    interface IByteBuffer
    {
        CONST_VTBL struct IByteBufferVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IByteBuffer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IByteBuffer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IByteBuffer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IByteBuffer_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IByteBuffer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IByteBuffer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IByteBuffer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IByteBuffer_get_Stream(This,ppStream)	\
    (This)->lpVtbl -> get_Stream(This,ppStream)

#define IByteBuffer_put_Stream(This,pStream)	\
    (This)->lpVtbl -> put_Stream(This,pStream)

#define IByteBuffer_Clone(This,ppByteBuffer)	\
    (This)->lpVtbl -> Clone(This,ppByteBuffer)

#define IByteBuffer_Commit(This,grfCommitFlags)	\
    (This)->lpVtbl -> Commit(This,grfCommitFlags)

#define IByteBuffer_CopyTo(This,ppByteBuffer,cb,pcbRead,pcbWritten)	\
    (This)->lpVtbl -> CopyTo(This,ppByteBuffer,cb,pcbRead,pcbWritten)

#define IByteBuffer_Initialize(This,lSize,pData)	\
    (This)->lpVtbl -> Initialize(This,lSize,pData)

#define IByteBuffer_LockRegion(This,libOffset,cb,dwLockType)	\
    (This)->lpVtbl -> LockRegion(This,libOffset,cb,dwLockType)

#define IByteBuffer_Read(This,pByte,cb,pcbRead)	\
    (This)->lpVtbl -> Read(This,pByte,cb,pcbRead)

#define IByteBuffer_Revert(This)	\
    (This)->lpVtbl -> Revert(This)

#define IByteBuffer_Seek(This,dLibMove,dwOrigin,pLibnewPosition)	\
    (This)->lpVtbl -> Seek(This,dLibMove,dwOrigin,pLibnewPosition)

#define IByteBuffer_SetSize(This,libNewSize)	\
    (This)->lpVtbl -> SetSize(This,libNewSize)

#define IByteBuffer_Stat(This,pstatstg,grfStatFlag)	\
    (This)->lpVtbl -> Stat(This,pstatstg,grfStatFlag)

#define IByteBuffer_UnlockRegion(This,libOffset,cb,dwLockType)	\
    (This)->lpVtbl -> UnlockRegion(This,libOffset,cb,dwLockType)

#define IByteBuffer_Write(This,pByte,cb,pcbWritten)	\
    (This)->lpVtbl -> Write(This,pByte,cb,pcbWritten)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_get_Stream_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [retval][out] */ LPSTREAM __RPC_FAR *ppStream);


void __RPC_STUB IByteBuffer_get_Stream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_put_Stream_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [in] */ LPSTREAM pStream);


void __RPC_STUB IByteBuffer_put_Stream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Clone_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [out][in] */ LPBYTEBUFFER __RPC_FAR *ppByteBuffer);


void __RPC_STUB IByteBuffer_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Commit_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [in] */ LONG grfCommitFlags);


void __RPC_STUB IByteBuffer_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_CopyTo_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [out][in] */ LPBYTEBUFFER __RPC_FAR *ppByteBuffer,
    /* [in] */ LONG cb,
    /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbRead,
    /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbWritten);


void __RPC_STUB IByteBuffer_CopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Initialize_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [defaultvalue][in] */ LONG lSize,
    /* [defaultvalue][in] */ BYTE __RPC_FAR *pData);


void __RPC_STUB IByteBuffer_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_LockRegion_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [in] */ LONG libOffset,
    /* [in] */ LONG cb,
    /* [in] */ LONG dwLockType);


void __RPC_STUB IByteBuffer_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Read_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [out][in] */ BYTE __RPC_FAR *pByte,
    /* [in] */ LONG cb,
    /* [defaultvalue][out][in] */ LONG __RPC_FAR *pcbRead);


void __RPC_STUB IByteBuffer_Read_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Revert_Proxy( 
    IByteBuffer __RPC_FAR * This);


void __RPC_STUB IByteBuffer_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Seek_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [in] */ LONG dLibMove,
    /* [in] */ LONG dwOrigin,
    /* [defaultvalue][out][in] */ LONG __RPC_FAR *pLibnewPosition);


void __RPC_STUB IByteBuffer_Seek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_SetSize_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [in] */ LONG libNewSize);


void __RPC_STUB IByteBuffer_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Stat_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [out][in] */ LPSTATSTRUCT pstatstg,
    /* [in] */ LONG grfStatFlag);


void __RPC_STUB IByteBuffer_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_UnlockRegion_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [in] */ LONG libOffset,
    /* [in] */ LONG cb,
    /* [in] */ LONG dwLockType);


void __RPC_STUB IByteBuffer_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IByteBuffer_Write_Proxy( 
    IByteBuffer __RPC_FAR * This,
    /* [out][in] */ BYTE __RPC_FAR *pByte,
    /* [in] */ LONG cb,
    /* [out][in] */ LONG __RPC_FAR *pcbWritten);


void __RPC_STUB IByteBuffer_Write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IByteBuffer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_scardssp_0244 */
/* [local] */ 

#endif //_LPBYTEBUFFER_DEFINED

//////////////////////////////////////////////////////////////////
//
// ISCardTypeConv Interface Definition
//
#ifndef _LPSCARDTYPECONV_DEFINED
#define _LPSCARDTYPECONV_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0244_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0244_v0_0_s_ifspec;

#ifndef __ISCardTypeConv_INTERFACE_DEFINED__
#define __ISCardTypeConv_INTERFACE_DEFINED__

/* interface ISCardTypeConv */
/* [unique][helpstring][uuid][object] */ 

typedef /* [unique] */ ISCardTypeConv __RPC_FAR *LPSCARDTYPECONV;


EXTERN_C const IID IID_ISCardTypeConv;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53B6AA63-3F56-11D0-916B-00AA00C18068")
    ISCardTypeConv : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertByteArrayToByteBuffer( 
            /* [in] */ LPBYTE pbyArray,
            /* [in] */ DWORD dwArraySize,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuffer) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertByteBufferToByteArray( 
            /* [in] */ LPBYTEBUFFER pbyBuffer,
            /* [retval][out] */ LPBYTEARRAY __RPC_FAR *ppArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertByteBufferToSafeArray( 
            /* [in] */ LPBYTEBUFFER pbyBuffer,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppbyArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertSafeArrayToByteBuffer( 
            /* [in] */ LPSAFEARRAY pbyArray,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuff) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateByteArray( 
            /* [in] */ DWORD dwAllocSize,
            /* [retval][out] */ LPBYTE __RPC_FAR *ppbyArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateByteBuffer( 
            /* [in] */ DWORD dwAllocSize,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuff) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateSafeArray( 
            /* [in] */ UINT nAllocSize,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE FreeIStreamMemoryPtr( 
            /* [in] */ LPSTREAM pStrm,
            /* [in] */ LPBYTE pMem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetAtIStreamMemory( 
            /* [in] */ LPSTREAM pStrm,
            /* [retval][out] */ LPBYTEARRAY __RPC_FAR *ppMem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SizeOfIStream( 
            /* [in] */ LPSTREAM pStrm,
            /* [retval][out] */ ULARGE_INTEGER __RPC_FAR *puliSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCardTypeConvVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISCardTypeConv __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISCardTypeConv __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ConvertByteArrayToByteBuffer )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ LPBYTE pbyArray,
            /* [in] */ DWORD dwArraySize,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuffer);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ConvertByteBufferToByteArray )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ LPBYTEBUFFER pbyBuffer,
            /* [retval][out] */ LPBYTEARRAY __RPC_FAR *ppArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ConvertByteBufferToSafeArray )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ LPBYTEBUFFER pbyBuffer,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppbyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ConvertSafeArrayToByteBuffer )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ LPSAFEARRAY pbyArray,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuff);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateByteArray )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ DWORD dwAllocSize,
            /* [retval][out] */ LPBYTE __RPC_FAR *ppbyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateByteBuffer )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ DWORD dwAllocSize,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuff);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateSafeArray )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ UINT nAllocSize,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FreeIStreamMemoryPtr )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ LPSTREAM pStrm,
            /* [in] */ LPBYTE pMem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAtIStreamMemory )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ LPSTREAM pStrm,
            /* [retval][out] */ LPBYTEARRAY __RPC_FAR *ppMem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SizeOfIStream )( 
            ISCardTypeConv __RPC_FAR * This,
            /* [in] */ LPSTREAM pStrm,
            /* [retval][out] */ ULARGE_INTEGER __RPC_FAR *puliSize);
        
        END_INTERFACE
    } ISCardTypeConvVtbl;

    interface ISCardTypeConv
    {
        CONST_VTBL struct ISCardTypeConvVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCardTypeConv_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISCardTypeConv_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISCardTypeConv_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISCardTypeConv_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISCardTypeConv_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISCardTypeConv_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISCardTypeConv_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISCardTypeConv_ConvertByteArrayToByteBuffer(This,pbyArray,dwArraySize,ppbyBuffer)	\
    (This)->lpVtbl -> ConvertByteArrayToByteBuffer(This,pbyArray,dwArraySize,ppbyBuffer)

#define ISCardTypeConv_ConvertByteBufferToByteArray(This,pbyBuffer,ppArray)	\
    (This)->lpVtbl -> ConvertByteBufferToByteArray(This,pbyBuffer,ppArray)

#define ISCardTypeConv_ConvertByteBufferToSafeArray(This,pbyBuffer,ppbyArray)	\
    (This)->lpVtbl -> ConvertByteBufferToSafeArray(This,pbyBuffer,ppbyArray)

#define ISCardTypeConv_ConvertSafeArrayToByteBuffer(This,pbyArray,ppbyBuff)	\
    (This)->lpVtbl -> ConvertSafeArrayToByteBuffer(This,pbyArray,ppbyBuff)

#define ISCardTypeConv_CreateByteArray(This,dwAllocSize,ppbyArray)	\
    (This)->lpVtbl -> CreateByteArray(This,dwAllocSize,ppbyArray)

#define ISCardTypeConv_CreateByteBuffer(This,dwAllocSize,ppbyBuff)	\
    (This)->lpVtbl -> CreateByteBuffer(This,dwAllocSize,ppbyBuff)

#define ISCardTypeConv_CreateSafeArray(This,nAllocSize,ppArray)	\
    (This)->lpVtbl -> CreateSafeArray(This,nAllocSize,ppArray)

#define ISCardTypeConv_FreeIStreamMemoryPtr(This,pStrm,pMem)	\
    (This)->lpVtbl -> FreeIStreamMemoryPtr(This,pStrm,pMem)

#define ISCardTypeConv_GetAtIStreamMemory(This,pStrm,ppMem)	\
    (This)->lpVtbl -> GetAtIStreamMemory(This,pStrm,ppMem)

#define ISCardTypeConv_SizeOfIStream(This,pStrm,puliSize)	\
    (This)->lpVtbl -> SizeOfIStream(This,pStrm,puliSize)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_ConvertByteArrayToByteBuffer_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ LPBYTE pbyArray,
    /* [in] */ DWORD dwArraySize,
    /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuffer);


void __RPC_STUB ISCardTypeConv_ConvertByteArrayToByteBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_ConvertByteBufferToByteArray_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ LPBYTEBUFFER pbyBuffer,
    /* [retval][out] */ LPBYTEARRAY __RPC_FAR *ppArray);


void __RPC_STUB ISCardTypeConv_ConvertByteBufferToByteArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_ConvertByteBufferToSafeArray_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ LPBYTEBUFFER pbyBuffer,
    /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppbyArray);


void __RPC_STUB ISCardTypeConv_ConvertByteBufferToSafeArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_ConvertSafeArrayToByteBuffer_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ LPSAFEARRAY pbyArray,
    /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuff);


void __RPC_STUB ISCardTypeConv_ConvertSafeArrayToByteBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_CreateByteArray_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ DWORD dwAllocSize,
    /* [retval][out] */ LPBYTE __RPC_FAR *ppbyArray);


void __RPC_STUB ISCardTypeConv_CreateByteArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_CreateByteBuffer_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ DWORD dwAllocSize,
    /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppbyBuff);


void __RPC_STUB ISCardTypeConv_CreateByteBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_CreateSafeArray_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ UINT nAllocSize,
    /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppArray);


void __RPC_STUB ISCardTypeConv_CreateSafeArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_FreeIStreamMemoryPtr_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ LPSTREAM pStrm,
    /* [in] */ LPBYTE pMem);


void __RPC_STUB ISCardTypeConv_FreeIStreamMemoryPtr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_GetAtIStreamMemory_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ LPSTREAM pStrm,
    /* [retval][out] */ LPBYTEARRAY __RPC_FAR *ppMem);


void __RPC_STUB ISCardTypeConv_GetAtIStreamMemory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardTypeConv_SizeOfIStream_Proxy( 
    ISCardTypeConv __RPC_FAR * This,
    /* [in] */ LPSTREAM pStrm,
    /* [retval][out] */ ULARGE_INTEGER __RPC_FAR *puliSize);


void __RPC_STUB ISCardTypeConv_SizeOfIStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISCardTypeConv_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_scardssp_0245 */
/* [local] */ 

#endif // _LPSCARDTYPECONV_DEFINED

//////////////////////////////////////////////////////////////////
//
// ISCardCmd Interface Definition
//
#ifndef _LPSCARDCMD_DEFINED
#define _LPSCARDCMD_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0245_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0245_v0_0_s_ifspec;

#ifndef __ISCardCmd_INTERFACE_DEFINED__
#define __ISCardCmd_INTERFACE_DEFINED__

/* interface ISCardCmd */
/* [unique][helpstring][uuid][object] */ 

typedef /* [unique] */ ISCardCmd __RPC_FAR *LPSCARDCMD;


EXTERN_C const IID IID_ISCardCmd;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D5778AE3-43DE-11D0-9171-00AA00C18068")
    ISCardCmd : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Apdu( 
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppApdu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Apdu( 
            /* [in] */ LPBYTEBUFFER pApdu) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApduLength( 
            /* [retval][out] */ LONG __RPC_FAR *plSize) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApduReply( 
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppReplyApdu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApduReply( 
            /* [in] */ LPBYTEBUFFER pReplyApdu) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApduReplyLength( 
            /* [retval][out] */ LONG __RPC_FAR *plSize) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApduReplyLength( 
            /* [in] */ LONG lSize) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClassId( 
            /* [retval][out] */ BYTE __RPC_FAR *pbyClass) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClassId( 
            /* [defaultvalue][in] */ BYTE byClass = 0) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppData) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Data( 
            /* [in] */ LPBYTEBUFFER pData) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InstructionId( 
            /* [retval][out] */ BYTE __RPC_FAR *pbyIns) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InstructionId( 
            /* [in] */ BYTE byIns) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeField( 
            /* [retval][out] */ LONG __RPC_FAR *plSize) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_P1( 
            /* [retval][out] */ BYTE __RPC_FAR *pbyP1) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_P1( 
            /* [in] */ BYTE byP1) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_P2( 
            /* [retval][out] */ BYTE __RPC_FAR *pbyP2) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_P2( 
            /* [in] */ BYTE byP2) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_P3( 
            /* [retval][out] */ BYTE __RPC_FAR *pbyP3) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplyStatus( 
            /* [retval][out] */ LPWORD pwStatus) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplyStatus( 
            /* [in] */ WORD wStatus) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplyStatusSW1( 
            /* [retval][out] */ BYTE __RPC_FAR *pbySW1) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplyStatusSW2( 
            /* [retval][out] */ BYTE __RPC_FAR *pbySW2) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ ISO_APDU_TYPE __RPC_FAR *pType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Nad( 
            /* [retval][out] */ BYTE __RPC_FAR *pbNad) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Nad( 
            /* [in] */ BYTE bNad) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplyNad( 
            /* [retval][out] */ BYTE __RPC_FAR *pbNad) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplyNad( 
            /* [in] */ BYTE bNad) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BuildCmd( 
            /* [in] */ BYTE byClassId,
            /* [in] */ BYTE byInsId,
            /* [defaultvalue][in] */ BYTE byP1 = 0,
            /* [defaultvalue][in] */ BYTE byP2 = 0,
            /* [defaultvalue][in] */ LPBYTEBUFFER pbyData = 0,
            /* [defaultvalue][in] */ LONG __RPC_FAR *plLe = 0) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Encapsulate( 
            /* [in] */ LPBYTEBUFFER pApdu,
            /* [in] */ ISO_APDU_TYPE ApduType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternateClassId( 
            /* [retval][out] */ BYTE __RPC_FAR *pbyClass) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternateClassId( 
            /* [in] */ BYTE byClass) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCardCmdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISCardCmd __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISCardCmd __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISCardCmd __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Apdu )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppApdu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Apdu )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ LPBYTEBUFFER pApdu);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ApduLength )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ LONG __RPC_FAR *plSize);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ApduReply )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppReplyApdu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ApduReply )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ LPBYTEBUFFER pReplyApdu);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ApduReplyLength )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ LONG __RPC_FAR *plSize);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ApduReplyLength )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ LONG lSize);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ClassId )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbyClass);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ClassId )( 
            ISCardCmd __RPC_FAR * This,
            /* [defaultvalue][in] */ BYTE byClass);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Data )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppData);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Data )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ LPBYTEBUFFER pData);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_InstructionId )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbyIns);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_InstructionId )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ BYTE byIns);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_LeField )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ LONG __RPC_FAR *plSize);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_P1 )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbyP1);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_P1 )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ BYTE byP1);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_P2 )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbyP2);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_P2 )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ BYTE byP2);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_P3 )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbyP3);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ReplyStatus )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ LPWORD pwStatus);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ReplyStatus )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ WORD wStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ReplyStatusSW1 )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbySW1);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ReplyStatusSW2 )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbySW2);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Type )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ ISO_APDU_TYPE __RPC_FAR *pType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Nad )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbNad);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Nad )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ BYTE bNad);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ReplyNad )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbNad);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ReplyNad )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ BYTE bNad);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *BuildCmd )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ BYTE byClassId,
            /* [in] */ BYTE byInsId,
            /* [defaultvalue][in] */ BYTE byP1,
            /* [defaultvalue][in] */ BYTE byP2,
            /* [defaultvalue][in] */ LPBYTEBUFFER pbyData,
            /* [defaultvalue][in] */ LONG __RPC_FAR *plLe);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clear )( 
            ISCardCmd __RPC_FAR * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Encapsulate )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ LPBYTEBUFFER pApdu,
            /* [in] */ ISO_APDU_TYPE ApduType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_AlternateClassId )( 
            ISCardCmd __RPC_FAR * This,
            /* [retval][out] */ BYTE __RPC_FAR *pbyClass);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_AlternateClassId )( 
            ISCardCmd __RPC_FAR * This,
            /* [in] */ BYTE byClass);
        
        END_INTERFACE
    } ISCardCmdVtbl;

    interface ISCardCmd
    {
        CONST_VTBL struct ISCardCmdVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCardCmd_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISCardCmd_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISCardCmd_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISCardCmd_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISCardCmd_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISCardCmd_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISCardCmd_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISCardCmd_get_Apdu(This,ppApdu)	\
    (This)->lpVtbl -> get_Apdu(This,ppApdu)

#define ISCardCmd_put_Apdu(This,pApdu)	\
    (This)->lpVtbl -> put_Apdu(This,pApdu)

#define ISCardCmd_get_ApduLength(This,plSize)	\
    (This)->lpVtbl -> get_ApduLength(This,plSize)

#define ISCardCmd_get_ApduReply(This,ppReplyApdu)	\
    (This)->lpVtbl -> get_ApduReply(This,ppReplyApdu)

#define ISCardCmd_put_ApduReply(This,pReplyApdu)	\
    (This)->lpVtbl -> put_ApduReply(This,pReplyApdu)

#define ISCardCmd_get_ApduReplyLength(This,plSize)	\
    (This)->lpVtbl -> get_ApduReplyLength(This,plSize)

#define ISCardCmd_put_ApduReplyLength(This,lSize)	\
    (This)->lpVtbl -> put_ApduReplyLength(This,lSize)

#define ISCardCmd_get_ClassId(This,pbyClass)	\
    (This)->lpVtbl -> get_ClassId(This,pbyClass)

#define ISCardCmd_put_ClassId(This,byClass)	\
    (This)->lpVtbl -> put_ClassId(This,byClass)

#define ISCardCmd_get_Data(This,ppData)	\
    (This)->lpVtbl -> get_Data(This,ppData)

#define ISCardCmd_put_Data(This,pData)	\
    (This)->lpVtbl -> put_Data(This,pData)

#define ISCardCmd_get_InstructionId(This,pbyIns)	\
    (This)->lpVtbl -> get_InstructionId(This,pbyIns)

#define ISCardCmd_put_InstructionId(This,byIns)	\
    (This)->lpVtbl -> put_InstructionId(This,byIns)

#define ISCardCmd_get_LeField(This,plSize)	\
    (This)->lpVtbl -> get_LeField(This,plSize)

#define ISCardCmd_get_P1(This,pbyP1)	\
    (This)->lpVtbl -> get_P1(This,pbyP1)

#define ISCardCmd_put_P1(This,byP1)	\
    (This)->lpVtbl -> put_P1(This,byP1)

#define ISCardCmd_get_P2(This,pbyP2)	\
    (This)->lpVtbl -> get_P2(This,pbyP2)

#define ISCardCmd_put_P2(This,byP2)	\
    (This)->lpVtbl -> put_P2(This,byP2)

#define ISCardCmd_get_P3(This,pbyP3)	\
    (This)->lpVtbl -> get_P3(This,pbyP3)

#define ISCardCmd_get_ReplyStatus(This,pwStatus)	\
    (This)->lpVtbl -> get_ReplyStatus(This,pwStatus)

#define ISCardCmd_put_ReplyStatus(This,wStatus)	\
    (This)->lpVtbl -> put_ReplyStatus(This,wStatus)

#define ISCardCmd_get_ReplyStatusSW1(This,pbySW1)	\
    (This)->lpVtbl -> get_ReplyStatusSW1(This,pbySW1)

#define ISCardCmd_get_ReplyStatusSW2(This,pbySW2)	\
    (This)->lpVtbl -> get_ReplyStatusSW2(This,pbySW2)

#define ISCardCmd_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#define ISCardCmd_get_Nad(This,pbNad)	\
    (This)->lpVtbl -> get_Nad(This,pbNad)

#define ISCardCmd_put_Nad(This,bNad)	\
    (This)->lpVtbl -> put_Nad(This,bNad)

#define ISCardCmd_get_ReplyNad(This,pbNad)	\
    (This)->lpVtbl -> get_ReplyNad(This,pbNad)

#define ISCardCmd_put_ReplyNad(This,bNad)	\
    (This)->lpVtbl -> put_ReplyNad(This,bNad)

#define ISCardCmd_BuildCmd(This,byClassId,byInsId,byP1,byP2,pbyData,plLe)	\
    (This)->lpVtbl -> BuildCmd(This,byClassId,byInsId,byP1,byP2,pbyData,plLe)

#define ISCardCmd_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define ISCardCmd_Encapsulate(This,pApdu,ApduType)	\
    (This)->lpVtbl -> Encapsulate(This,pApdu,ApduType)

#define ISCardCmd_get_AlternateClassId(This,pbyClass)	\
    (This)->lpVtbl -> get_AlternateClassId(This,pbyClass)

#define ISCardCmd_put_AlternateClassId(This,byClass)	\
    (This)->lpVtbl -> put_AlternateClassId(This,byClass)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_Apdu_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppApdu);


void __RPC_STUB ISCardCmd_get_Apdu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_Apdu_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ LPBYTEBUFFER pApdu);


void __RPC_STUB ISCardCmd_put_Apdu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ApduLength_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ LONG __RPC_FAR *plSize);


void __RPC_STUB ISCardCmd_get_ApduLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ApduReply_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppReplyApdu);


void __RPC_STUB ISCardCmd_get_ApduReply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_ApduReply_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ LPBYTEBUFFER pReplyApdu);


void __RPC_STUB ISCardCmd_put_ApduReply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ApduReplyLength_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ LONG __RPC_FAR *plSize);


void __RPC_STUB ISCardCmd_get_ApduReplyLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_ApduReplyLength_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ LONG lSize);


void __RPC_STUB ISCardCmd_put_ApduReplyLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ClassId_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbyClass);


void __RPC_STUB ISCardCmd_get_ClassId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_ClassId_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [defaultvalue][in] */ BYTE byClass);


void __RPC_STUB ISCardCmd_put_ClassId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_Data_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppData);


void __RPC_STUB ISCardCmd_get_Data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_Data_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ LPBYTEBUFFER pData);


void __RPC_STUB ISCardCmd_put_Data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_InstructionId_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbyIns);


void __RPC_STUB ISCardCmd_get_InstructionId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_InstructionId_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ BYTE byIns);


void __RPC_STUB ISCardCmd_put_InstructionId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_LeField_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ LONG __RPC_FAR *plSize);


void __RPC_STUB ISCardCmd_get_LeField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_P1_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbyP1);


void __RPC_STUB ISCardCmd_get_P1_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_P1_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ BYTE byP1);


void __RPC_STUB ISCardCmd_put_P1_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_P2_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbyP2);


void __RPC_STUB ISCardCmd_get_P2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_P2_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ BYTE byP2);


void __RPC_STUB ISCardCmd_put_P2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_P3_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbyP3);


void __RPC_STUB ISCardCmd_get_P3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ReplyStatus_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ LPWORD pwStatus);


void __RPC_STUB ISCardCmd_get_ReplyStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_ReplyStatus_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ WORD wStatus);


void __RPC_STUB ISCardCmd_put_ReplyStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ReplyStatusSW1_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbySW1);


void __RPC_STUB ISCardCmd_get_ReplyStatusSW1_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ReplyStatusSW2_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbySW2);


void __RPC_STUB ISCardCmd_get_ReplyStatusSW2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_Type_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ ISO_APDU_TYPE __RPC_FAR *pType);


void __RPC_STUB ISCardCmd_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_Nad_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbNad);


void __RPC_STUB ISCardCmd_get_Nad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_Nad_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ BYTE bNad);


void __RPC_STUB ISCardCmd_put_Nad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_ReplyNad_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbNad);


void __RPC_STUB ISCardCmd_get_ReplyNad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_ReplyNad_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ BYTE bNad);


void __RPC_STUB ISCardCmd_put_ReplyNad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_BuildCmd_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ BYTE byClassId,
    /* [in] */ BYTE byInsId,
    /* [defaultvalue][in] */ BYTE byP1,
    /* [defaultvalue][in] */ BYTE byP2,
    /* [defaultvalue][in] */ LPBYTEBUFFER pbyData,
    /* [defaultvalue][in] */ LONG __RPC_FAR *plLe);


void __RPC_STUB ISCardCmd_BuildCmd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_Clear_Proxy( 
    ISCardCmd __RPC_FAR * This);


void __RPC_STUB ISCardCmd_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_Encapsulate_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ LPBYTEBUFFER pApdu,
    /* [in] */ ISO_APDU_TYPE ApduType);


void __RPC_STUB ISCardCmd_Encapsulate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_get_AlternateClassId_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [retval][out] */ BYTE __RPC_FAR *pbyClass);


void __RPC_STUB ISCardCmd_get_AlternateClassId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISCardCmd_put_AlternateClassId_Proxy( 
    ISCardCmd __RPC_FAR * This,
    /* [in] */ BYTE byClass);


void __RPC_STUB ISCardCmd_put_AlternateClassId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISCardCmd_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_scardssp_0246 */
/* [local] */ 

#endif //!_LPSCARDCMD_DEFINED

//////////////////////////////////////////////////////////////////
//
// ISCardISO7816 Interface Definition
//
#ifndef _LPSCARDISO7816_DEFINED
#define _LPSCARDISO7816_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0246_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0246_v0_0_s_ifspec;

#ifndef __ISCardISO7816_INTERFACE_DEFINED__
#define __ISCardISO7816_INTERFACE_DEFINED__

/* interface ISCardISO7816 */
/* [unique][helpstring][uuid][object] */ 

typedef /* [unique] */ ISCardISO7816 __RPC_FAR *LPSCARDISO;

typedef /* [unique] */ LPSCARDISO LPSCARDISO7816;


EXTERN_C const IID IID_ISCardISO7816;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53B6AA68-3F56-11D0-916B-00AA00C18068")
    ISCardISO7816 : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AppendRecord( 
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EraseBinary( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ExternalAuthenticate( 
            /* [in] */ BYTE byAlgorithmRef,
            /* [in] */ BYTE bySecretRef,
            /* [in] */ LPBYTEBUFFER pChallenge,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetChallenge( 
            /* [in] */ LONG lBytesExpected,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetData( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LONG lBytesToGet,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetResponse( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LONG lDataLength,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE InternalAuthenticate( 
            /* [in] */ BYTE byAlgorithmRef,
            /* [in] */ BYTE bySecretRef,
            /* [in] */ LPBYTEBUFFER pChallenge,
            /* [in] */ LONG lReplyBytes,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ManageChannel( 
            /* [in] */ BYTE byChannelState,
            /* [in] */ BYTE byChannel,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PutData( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReadBinary( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LONG lBytesToRead,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReadRecord( 
            /* [in] */ BYTE byRecordId,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LONG lBytesToRead,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectFile( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [in] */ LONG lBytesToRead,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetDefaultClassId( 
            /* [in] */ BYTE byClass) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UpdateBinary( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UpdateRecord( 
            /* [in] */ BYTE byRecordId,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Verify( 
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE WriteBinary( 
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE WriteRecord( 
            /* [in] */ BYTE byRecordId,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCardISO7816Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISCardISO7816 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISCardISO7816 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AppendRecord )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EraseBinary )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ExternalAuthenticate )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byAlgorithmRef,
            /* [in] */ BYTE bySecretRef,
            /* [in] */ LPBYTEBUFFER pChallenge,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetChallenge )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ LONG lBytesExpected,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetData )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LONG lBytesToGet,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetResponse )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LONG lDataLength,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InternalAuthenticate )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byAlgorithmRef,
            /* [in] */ BYTE bySecretRef,
            /* [in] */ LPBYTEBUFFER pChallenge,
            /* [in] */ LONG lReplyBytes,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ManageChannel )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byChannelState,
            /* [in] */ BYTE byChannel,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *PutData )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReadBinary )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LONG lBytesToRead,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReadRecord )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byRecordId,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LONG lBytesToRead,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SelectFile )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [in] */ LONG lBytesToRead,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetDefaultClassId )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byClass);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UpdateBinary )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UpdateRecord )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byRecordId,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Verify )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *WriteBinary )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byP1,
            /* [in] */ BYTE byP2,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *WriteRecord )( 
            ISCardISO7816 __RPC_FAR * This,
            /* [in] */ BYTE byRecordId,
            /* [in] */ BYTE byRefCtrl,
            /* [in] */ LPBYTEBUFFER pData,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        END_INTERFACE
    } ISCardISO7816Vtbl;

    interface ISCardISO7816
    {
        CONST_VTBL struct ISCardISO7816Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCardISO7816_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISCardISO7816_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISCardISO7816_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISCardISO7816_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISCardISO7816_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISCardISO7816_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISCardISO7816_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISCardISO7816_AppendRecord(This,byRefCtrl,pData,ppCmd)	\
    (This)->lpVtbl -> AppendRecord(This,byRefCtrl,pData,ppCmd)

#define ISCardISO7816_EraseBinary(This,byP1,byP2,pData,ppCmd)	\
    (This)->lpVtbl -> EraseBinary(This,byP1,byP2,pData,ppCmd)

#define ISCardISO7816_ExternalAuthenticate(This,byAlgorithmRef,bySecretRef,pChallenge,ppCmd)	\
    (This)->lpVtbl -> ExternalAuthenticate(This,byAlgorithmRef,bySecretRef,pChallenge,ppCmd)

#define ISCardISO7816_GetChallenge(This,lBytesExpected,ppCmd)	\
    (This)->lpVtbl -> GetChallenge(This,lBytesExpected,ppCmd)

#define ISCardISO7816_GetData(This,byP1,byP2,lBytesToGet,ppCmd)	\
    (This)->lpVtbl -> GetData(This,byP1,byP2,lBytesToGet,ppCmd)

#define ISCardISO7816_GetResponse(This,byP1,byP2,lDataLength,ppCmd)	\
    (This)->lpVtbl -> GetResponse(This,byP1,byP2,lDataLength,ppCmd)

#define ISCardISO7816_InternalAuthenticate(This,byAlgorithmRef,bySecretRef,pChallenge,lReplyBytes,ppCmd)	\
    (This)->lpVtbl -> InternalAuthenticate(This,byAlgorithmRef,bySecretRef,pChallenge,lReplyBytes,ppCmd)

#define ISCardISO7816_ManageChannel(This,byChannelState,byChannel,ppCmd)	\
    (This)->lpVtbl -> ManageChannel(This,byChannelState,byChannel,ppCmd)

#define ISCardISO7816_PutData(This,byP1,byP2,pData,ppCmd)	\
    (This)->lpVtbl -> PutData(This,byP1,byP2,pData,ppCmd)

#define ISCardISO7816_ReadBinary(This,byP1,byP2,lBytesToRead,ppCmd)	\
    (This)->lpVtbl -> ReadBinary(This,byP1,byP2,lBytesToRead,ppCmd)

#define ISCardISO7816_ReadRecord(This,byRecordId,byRefCtrl,lBytesToRead,ppCmd)	\
    (This)->lpVtbl -> ReadRecord(This,byRecordId,byRefCtrl,lBytesToRead,ppCmd)

#define ISCardISO7816_SelectFile(This,byP1,byP2,pData,lBytesToRead,ppCmd)	\
    (This)->lpVtbl -> SelectFile(This,byP1,byP2,pData,lBytesToRead,ppCmd)

#define ISCardISO7816_SetDefaultClassId(This,byClass)	\
    (This)->lpVtbl -> SetDefaultClassId(This,byClass)

#define ISCardISO7816_UpdateBinary(This,byP1,byP2,pData,ppCmd)	\
    (This)->lpVtbl -> UpdateBinary(This,byP1,byP2,pData,ppCmd)

#define ISCardISO7816_UpdateRecord(This,byRecordId,byRefCtrl,pData,ppCmd)	\
    (This)->lpVtbl -> UpdateRecord(This,byRecordId,byRefCtrl,pData,ppCmd)

#define ISCardISO7816_Verify(This,byRefCtrl,pData,ppCmd)	\
    (This)->lpVtbl -> Verify(This,byRefCtrl,pData,ppCmd)

#define ISCardISO7816_WriteBinary(This,byP1,byP2,pData,ppCmd)	\
    (This)->lpVtbl -> WriteBinary(This,byP1,byP2,pData,ppCmd)

#define ISCardISO7816_WriteRecord(This,byRecordId,byRefCtrl,pData,ppCmd)	\
    (This)->lpVtbl -> WriteRecord(This,byRecordId,byRefCtrl,pData,ppCmd)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_AppendRecord_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byRefCtrl,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_AppendRecord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_EraseBinary_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_EraseBinary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_ExternalAuthenticate_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byAlgorithmRef,
    /* [in] */ BYTE bySecretRef,
    /* [in] */ LPBYTEBUFFER pChallenge,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_ExternalAuthenticate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_GetChallenge_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ LONG lBytesExpected,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_GetChallenge_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_GetData_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LONG lBytesToGet,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_GetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_GetResponse_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LONG lDataLength,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_GetResponse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_InternalAuthenticate_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byAlgorithmRef,
    /* [in] */ BYTE bySecretRef,
    /* [in] */ LPBYTEBUFFER pChallenge,
    /* [in] */ LONG lReplyBytes,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_InternalAuthenticate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_ManageChannel_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byChannelState,
    /* [in] */ BYTE byChannel,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_ManageChannel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_PutData_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_PutData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_ReadBinary_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LONG lBytesToRead,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_ReadBinary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_ReadRecord_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byRecordId,
    /* [in] */ BYTE byRefCtrl,
    /* [in] */ LONG lBytesToRead,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_ReadRecord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_SelectFile_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LPBYTEBUFFER pData,
    /* [in] */ LONG lBytesToRead,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_SelectFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_SetDefaultClassId_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byClass);


void __RPC_STUB ISCardISO7816_SetDefaultClassId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_UpdateBinary_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_UpdateBinary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_UpdateRecord_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byRecordId,
    /* [in] */ BYTE byRefCtrl,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_UpdateRecord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_Verify_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byRefCtrl,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_Verify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_WriteBinary_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byP1,
    /* [in] */ BYTE byP2,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_WriteBinary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardISO7816_WriteRecord_Proxy( 
    ISCardISO7816 __RPC_FAR * This,
    /* [in] */ BYTE byRecordId,
    /* [in] */ BYTE byRefCtrl,
    /* [in] */ LPBYTEBUFFER pData,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCardISO7816_WriteRecord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISCardISO7816_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_scardssp_0247 */
/* [local] */ 

#endif //!_LPSCARDISO7816_DEFINED

//////////////////////////////////////////////////////////////////
//
// ISCard Interface
//
#ifndef _LPSCARD_DEFINED
#define _LPSCARD_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0247_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0247_v0_0_s_ifspec;

#ifndef __ISCard_INTERFACE_DEFINED__
#define __ISCard_INTERFACE_DEFINED__

/* interface ISCard */
/* [unique][helpstring][uuid][object] */ 

typedef /* [unique] */ ISCard __RPC_FAR *LPSCARD;

typedef /* [unique] */ LPSCARD LPSMARTCARD;


EXTERN_C const IID IID_ISCard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1461AAC3-6810-11D0-918F-00AA00C18068")
    ISCard : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Atr( 
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppAtr) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CardHandle( 
            /* [retval][out] */ HSCARD __RPC_FAR *pHandle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Context( 
            /* [retval][out] */ HSCARDCONTEXT __RPC_FAR *pContext) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Protocol( 
            /* [retval][out] */ SCARD_PROTOCOLS __RPC_FAR *pProtocol) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ SCARD_STATES __RPC_FAR *pStatus) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AttachByHandle( 
            /* [in] */ HSCARD hCard) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AttachByReader( 
            /* [in] */ BSTR bstrReaderName,
            /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode = EXCLUSIVE,
            /* [defaultvalue][in] */ SCARD_PROTOCOLS PrefProtocol = T0) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Detach( 
            /* [defaultvalue][in] */ SCARD_DISPOSITIONS Disposition = LEAVE) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LockSCard( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReAttach( 
            /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode = EXCLUSIVE,
            /* [defaultvalue][in] */ SCARD_DISPOSITIONS InitState = LEAVE) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Transaction( 
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnlockSCard( 
            /* [defaultvalue][in] */ SCARD_DISPOSITIONS Disposition = LEAVE) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISCard __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISCard __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISCard __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISCard __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISCard __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISCard __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISCard __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Atr )( 
            ISCard __RPC_FAR * This,
            /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppAtr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_CardHandle )( 
            ISCard __RPC_FAR * This,
            /* [retval][out] */ HSCARD __RPC_FAR *pHandle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Context )( 
            ISCard __RPC_FAR * This,
            /* [retval][out] */ HSCARDCONTEXT __RPC_FAR *pContext);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Protocol )( 
            ISCard __RPC_FAR * This,
            /* [retval][out] */ SCARD_PROTOCOLS __RPC_FAR *pProtocol);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Status )( 
            ISCard __RPC_FAR * This,
            /* [retval][out] */ SCARD_STATES __RPC_FAR *pStatus);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AttachByHandle )( 
            ISCard __RPC_FAR * This,
            /* [in] */ HSCARD hCard);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AttachByReader )( 
            ISCard __RPC_FAR * This,
            /* [in] */ BSTR bstrReaderName,
            /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode,
            /* [defaultvalue][in] */ SCARD_PROTOCOLS PrefProtocol);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Detach )( 
            ISCard __RPC_FAR * This,
            /* [defaultvalue][in] */ SCARD_DISPOSITIONS Disposition);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockSCard )( 
            ISCard __RPC_FAR * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReAttach )( 
            ISCard __RPC_FAR * This,
            /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode,
            /* [defaultvalue][in] */ SCARD_DISPOSITIONS InitState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Transaction )( 
            ISCard __RPC_FAR * This,
            /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UnlockSCard )( 
            ISCard __RPC_FAR * This,
            /* [defaultvalue][in] */ SCARD_DISPOSITIONS Disposition);
        
        END_INTERFACE
    } ISCardVtbl;

    interface ISCard
    {
        CONST_VTBL struct ISCardVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCard_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISCard_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISCard_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISCard_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISCard_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISCard_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISCard_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISCard_get_Atr(This,ppAtr)	\
    (This)->lpVtbl -> get_Atr(This,ppAtr)

#define ISCard_get_CardHandle(This,pHandle)	\
    (This)->lpVtbl -> get_CardHandle(This,pHandle)

#define ISCard_get_Context(This,pContext)	\
    (This)->lpVtbl -> get_Context(This,pContext)

#define ISCard_get_Protocol(This,pProtocol)	\
    (This)->lpVtbl -> get_Protocol(This,pProtocol)

#define ISCard_get_Status(This,pStatus)	\
    (This)->lpVtbl -> get_Status(This,pStatus)

#define ISCard_AttachByHandle(This,hCard)	\
    (This)->lpVtbl -> AttachByHandle(This,hCard)

#define ISCard_AttachByReader(This,bstrReaderName,ShareMode,PrefProtocol)	\
    (This)->lpVtbl -> AttachByReader(This,bstrReaderName,ShareMode,PrefProtocol)

#define ISCard_Detach(This,Disposition)	\
    (This)->lpVtbl -> Detach(This,Disposition)

#define ISCard_LockSCard(This)	\
    (This)->lpVtbl -> LockSCard(This)

#define ISCard_ReAttach(This,ShareMode,InitState)	\
    (This)->lpVtbl -> ReAttach(This,ShareMode,InitState)

#define ISCard_Transaction(This,ppCmd)	\
    (This)->lpVtbl -> Transaction(This,ppCmd)

#define ISCard_UnlockSCard(This,Disposition)	\
    (This)->lpVtbl -> UnlockSCard(This,Disposition)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCard_get_Atr_Proxy( 
    ISCard __RPC_FAR * This,
    /* [retval][out] */ LPBYTEBUFFER __RPC_FAR *ppAtr);


void __RPC_STUB ISCard_get_Atr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCard_get_CardHandle_Proxy( 
    ISCard __RPC_FAR * This,
    /* [retval][out] */ HSCARD __RPC_FAR *pHandle);


void __RPC_STUB ISCard_get_CardHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCard_get_Context_Proxy( 
    ISCard __RPC_FAR * This,
    /* [retval][out] */ HSCARDCONTEXT __RPC_FAR *pContext);


void __RPC_STUB ISCard_get_Context_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCard_get_Protocol_Proxy( 
    ISCard __RPC_FAR * This,
    /* [retval][out] */ SCARD_PROTOCOLS __RPC_FAR *pProtocol);


void __RPC_STUB ISCard_get_Protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISCard_get_Status_Proxy( 
    ISCard __RPC_FAR * This,
    /* [retval][out] */ SCARD_STATES __RPC_FAR *pStatus);


void __RPC_STUB ISCard_get_Status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCard_AttachByHandle_Proxy( 
    ISCard __RPC_FAR * This,
    /* [in] */ HSCARD hCard);


void __RPC_STUB ISCard_AttachByHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCard_AttachByReader_Proxy( 
    ISCard __RPC_FAR * This,
    /* [in] */ BSTR bstrReaderName,
    /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode,
    /* [defaultvalue][in] */ SCARD_PROTOCOLS PrefProtocol);


void __RPC_STUB ISCard_AttachByReader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCard_Detach_Proxy( 
    ISCard __RPC_FAR * This,
    /* [defaultvalue][in] */ SCARD_DISPOSITIONS Disposition);


void __RPC_STUB ISCard_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCard_LockSCard_Proxy( 
    ISCard __RPC_FAR * This);


void __RPC_STUB ISCard_LockSCard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCard_ReAttach_Proxy( 
    ISCard __RPC_FAR * This,
    /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode,
    /* [defaultvalue][in] */ SCARD_DISPOSITIONS InitState);


void __RPC_STUB ISCard_ReAttach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCard_Transaction_Proxy( 
    ISCard __RPC_FAR * This,
    /* [out][in] */ LPSCARDCMD __RPC_FAR *ppCmd);


void __RPC_STUB ISCard_Transaction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCard_UnlockSCard_Proxy( 
    ISCard __RPC_FAR * This,
    /* [defaultvalue][in] */ SCARD_DISPOSITIONS Disposition);


void __RPC_STUB ISCard_UnlockSCard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISCard_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_scardssp_0248 */
/* [local] */ 

#endif // !_LPSCARD_DEFINED

//////////////////////////////////////////////////////////////////
//
// ISCardDatabase Interface
//
#ifndef _LPSCARDDATABASE_DEFINED
#define _LPSCARDDATABASE_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0248_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0248_v0_0_s_ifspec;

#ifndef __ISCardDatabase_INTERFACE_DEFINED__
#define __ISCardDatabase_INTERFACE_DEFINED__

/* interface ISCardDatabase */
/* [unique][helpstring][uuid][object] */ 

typedef /* [unique] */ ISCardDatabase __RPC_FAR *LPSCARDDATABASE;


EXTERN_C const IID IID_ISCardDatabase;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1461AAC8-6810-11D0-918F-00AA00C18068")
    ISCardDatabase : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetProviderCardId( 
            /* [in] */ BSTR bstrCardName,
            /* [retval][out] */ LPGUID __RPC_FAR *ppguidProviderId) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ListCardInterfaces( 
            /* [in] */ BSTR bstrCardName,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppInterfaceGuids) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ListCards( 
            /* [defaultvalue][in] */ LPBYTEBUFFER pAtr,
            /* [defaultvalue][in] */ LPSAFEARRAY pInterfaceGuids,
            /* [defaultvalue][lcid][in] */ long localeId,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppCardNames) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ListReaderGroups( 
            /* [defaultvalue][lcid][in] */ long localeId,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppReaderGroups) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ListReaders( 
            /* [defaultvalue][lcid][in] */ long localeId,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppReaders) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCardDatabaseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISCardDatabase __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISCardDatabase __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISCardDatabase __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISCardDatabase __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISCardDatabase __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISCardDatabase __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISCardDatabase __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetProviderCardId )( 
            ISCardDatabase __RPC_FAR * This,
            /* [in] */ BSTR bstrCardName,
            /* [retval][out] */ LPGUID __RPC_FAR *ppguidProviderId);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ListCardInterfaces )( 
            ISCardDatabase __RPC_FAR * This,
            /* [in] */ BSTR bstrCardName,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppInterfaceGuids);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ListCards )( 
            ISCardDatabase __RPC_FAR * This,
            /* [defaultvalue][in] */ LPBYTEBUFFER pAtr,
            /* [defaultvalue][in] */ LPSAFEARRAY pInterfaceGuids,
            /* [defaultvalue][lcid][in] */ long localeId,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppCardNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ListReaderGroups )( 
            ISCardDatabase __RPC_FAR * This,
            /* [defaultvalue][lcid][in] */ long localeId,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppReaderGroups);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ListReaders )( 
            ISCardDatabase __RPC_FAR * This,
            /* [defaultvalue][lcid][in] */ long localeId,
            /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppReaders);
        
        END_INTERFACE
    } ISCardDatabaseVtbl;

    interface ISCardDatabase
    {
        CONST_VTBL struct ISCardDatabaseVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCardDatabase_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISCardDatabase_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISCardDatabase_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISCardDatabase_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISCardDatabase_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISCardDatabase_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISCardDatabase_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISCardDatabase_GetProviderCardId(This,bstrCardName,ppguidProviderId)	\
    (This)->lpVtbl -> GetProviderCardId(This,bstrCardName,ppguidProviderId)

#define ISCardDatabase_ListCardInterfaces(This,bstrCardName,ppInterfaceGuids)	\
    (This)->lpVtbl -> ListCardInterfaces(This,bstrCardName,ppInterfaceGuids)

#define ISCardDatabase_ListCards(This,pAtr,pInterfaceGuids,localeId,ppCardNames)	\
    (This)->lpVtbl -> ListCards(This,pAtr,pInterfaceGuids,localeId,ppCardNames)

#define ISCardDatabase_ListReaderGroups(This,localeId,ppReaderGroups)	\
    (This)->lpVtbl -> ListReaderGroups(This,localeId,ppReaderGroups)

#define ISCardDatabase_ListReaders(This,localeId,ppReaders)	\
    (This)->lpVtbl -> ListReaders(This,localeId,ppReaders)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardDatabase_GetProviderCardId_Proxy( 
    ISCardDatabase __RPC_FAR * This,
    /* [in] */ BSTR bstrCardName,
    /* [retval][out] */ LPGUID __RPC_FAR *ppguidProviderId);


void __RPC_STUB ISCardDatabase_GetProviderCardId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardDatabase_ListCardInterfaces_Proxy( 
    ISCardDatabase __RPC_FAR * This,
    /* [in] */ BSTR bstrCardName,
    /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppInterfaceGuids);


void __RPC_STUB ISCardDatabase_ListCardInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardDatabase_ListCards_Proxy( 
    ISCardDatabase __RPC_FAR * This,
    /* [defaultvalue][in] */ LPBYTEBUFFER pAtr,
    /* [defaultvalue][in] */ LPSAFEARRAY pInterfaceGuids,
    /* [defaultvalue][lcid][in] */ long localeId,
    /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppCardNames);


void __RPC_STUB ISCardDatabase_ListCards_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardDatabase_ListReaderGroups_Proxy( 
    ISCardDatabase __RPC_FAR * This,
    /* [defaultvalue][lcid][in] */ long localeId,
    /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppReaderGroups);


void __RPC_STUB ISCardDatabase_ListReaderGroups_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardDatabase_ListReaders_Proxy( 
    ISCardDatabase __RPC_FAR * This,
    /* [defaultvalue][lcid][in] */ long localeId,
    /* [retval][out] */ LPSAFEARRAY __RPC_FAR *ppReaders);


void __RPC_STUB ISCardDatabase_ListReaders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISCardDatabase_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_scardssp_0249 */
/* [local] */ 

#endif // !_LPSCARDDATABASE_DEFINED

//////////////////////////////////////////////////////////////////
//
// ISCardLocate Interface
//
#ifndef _LPSCARDLOCATE_DEFINED
#define _LPSCARDLOCATE_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0249_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0249_v0_0_s_ifspec;

#ifndef __ISCardLocate_INTERFACE_DEFINED__
#define __ISCardLocate_INTERFACE_DEFINED__

/* interface ISCardLocate */
/* [unique][helpstring][uuid][object] */ 

typedef /* [unique] */ ISCardLocate __RPC_FAR *LPSCARDLOCATE;

typedef /* [unique] */ LPSCARDLOCATE LPSCARDLOC;


EXTERN_C const IID IID_ISCardLocate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1461AACD-6810-11D0-918F-00AA00C18068")
    ISCardLocate : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConfigureCardGuidSearch( 
            /* [in] */ LPSAFEARRAY pCardGuids,
            /* [defaultvalue][in] */ LPSAFEARRAY pGroupNames = 0,
            /* [defaultvalue][in] */ BSTR bstrTitle = L"",
            /* [defaultvalue][in] */ LONG lFlags = 1) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConfigureCardNameSearch( 
            /* [in] */ LPSAFEARRAY pCardNames,
            /* [defaultvalue][in] */ LPSAFEARRAY pGroupNames = 0,
            /* [defaultvalue][in] */ BSTR bstrTitle = L"",
            /* [defaultvalue][in] */ LONG lFlags = 1) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE FindCard( 
            /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode,
            /* [defaultvalue][in] */ SCARD_PROTOCOLS Protocols,
            /* [defaultvalue][in] */ LONG lFlags,
            /* [retval][out] */ LPSCARDINFO __RPC_FAR *ppCardInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCardLocateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISCardLocate __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISCardLocate __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISCardLocate __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISCardLocate __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISCardLocate __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISCardLocate __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISCardLocate __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ConfigureCardGuidSearch )( 
            ISCardLocate __RPC_FAR * This,
            /* [in] */ LPSAFEARRAY pCardGuids,
            /* [defaultvalue][in] */ LPSAFEARRAY pGroupNames,
            /* [defaultvalue][in] */ BSTR bstrTitle,
            /* [defaultvalue][in] */ LONG lFlags);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ConfigureCardNameSearch )( 
            ISCardLocate __RPC_FAR * This,
            /* [in] */ LPSAFEARRAY pCardNames,
            /* [defaultvalue][in] */ LPSAFEARRAY pGroupNames,
            /* [defaultvalue][in] */ BSTR bstrTitle,
            /* [defaultvalue][in] */ LONG lFlags);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FindCard )( 
            ISCardLocate __RPC_FAR * This,
            /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode,
            /* [defaultvalue][in] */ SCARD_PROTOCOLS Protocols,
            /* [defaultvalue][in] */ LONG lFlags,
            /* [retval][out] */ LPSCARDINFO __RPC_FAR *ppCardInfo);
        
        END_INTERFACE
    } ISCardLocateVtbl;

    interface ISCardLocate
    {
        CONST_VTBL struct ISCardLocateVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCardLocate_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISCardLocate_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISCardLocate_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISCardLocate_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISCardLocate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISCardLocate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISCardLocate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISCardLocate_ConfigureCardGuidSearch(This,pCardGuids,pGroupNames,bstrTitle,lFlags)	\
    (This)->lpVtbl -> ConfigureCardGuidSearch(This,pCardGuids,pGroupNames,bstrTitle,lFlags)

#define ISCardLocate_ConfigureCardNameSearch(This,pCardNames,pGroupNames,bstrTitle,lFlags)	\
    (This)->lpVtbl -> ConfigureCardNameSearch(This,pCardNames,pGroupNames,bstrTitle,lFlags)

#define ISCardLocate_FindCard(This,ShareMode,Protocols,lFlags,ppCardInfo)	\
    (This)->lpVtbl -> FindCard(This,ShareMode,Protocols,lFlags,ppCardInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardLocate_ConfigureCardGuidSearch_Proxy( 
    ISCardLocate __RPC_FAR * This,
    /* [in] */ LPSAFEARRAY pCardGuids,
    /* [defaultvalue][in] */ LPSAFEARRAY pGroupNames,
    /* [defaultvalue][in] */ BSTR bstrTitle,
    /* [defaultvalue][in] */ LONG lFlags);


void __RPC_STUB ISCardLocate_ConfigureCardGuidSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardLocate_ConfigureCardNameSearch_Proxy( 
    ISCardLocate __RPC_FAR * This,
    /* [in] */ LPSAFEARRAY pCardNames,
    /* [defaultvalue][in] */ LPSAFEARRAY pGroupNames,
    /* [defaultvalue][in] */ BSTR bstrTitle,
    /* [defaultvalue][in] */ LONG lFlags);


void __RPC_STUB ISCardLocate_ConfigureCardNameSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISCardLocate_FindCard_Proxy( 
    ISCardLocate __RPC_FAR * This,
    /* [defaultvalue][in] */ SCARD_SHARE_MODES ShareMode,
    /* [defaultvalue][in] */ SCARD_PROTOCOLS Protocols,
    /* [defaultvalue][in] */ LONG lFlags,
    /* [retval][out] */ LPSCARDINFO __RPC_FAR *ppCardInfo);


void __RPC_STUB ISCardLocate_FindCard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISCardLocate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_scardssp_0250 */
/* [local] */ 

#endif // !_LPSCARDLOCATE_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_scardssp_0250_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_scardssp_0250_v0_0_s_ifspec;


#ifndef __SCARDSSPLib_LIBRARY_DEFINED__
#define __SCARDSSPLib_LIBRARY_DEFINED__

/* library SCARDSSPLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_SCARDSSPLib;

EXTERN_C const CLSID CLSID_CByteBuffer;

#ifdef __cplusplus

class DECLSPEC_UUID("E126F8FF-A7AF-11D0-B88A-00C04FD424B9")
CByteBuffer;
#endif

EXTERN_C const CLSID CLSID_CSCardTypeConv;

#ifdef __cplusplus

class DECLSPEC_UUID("53B6AA67-3F56-11D0-916B-00AA00C18068")
CSCardTypeConv;
#endif

EXTERN_C const CLSID CLSID_CSCardCmd;

#ifdef __cplusplus

class DECLSPEC_UUID("D5778AE7-43DE-11D0-9171-00AA00C18068")
CSCardCmd;
#endif

EXTERN_C const CLSID CLSID_CSCardISO7816;

#ifdef __cplusplus

class DECLSPEC_UUID("53B6AA6C-3F56-11D0-916B-00AA00C18068")
CSCardISO7816;
#endif

EXTERN_C const CLSID CLSID_CSCard;

#ifdef __cplusplus

class DECLSPEC_UUID("1461AAC7-6810-11D0-918F-00AA00C18068")
CSCard;
#endif

EXTERN_C const CLSID CLSID_CSCardDatabase;

#ifdef __cplusplus

class DECLSPEC_UUID("1461AACC-6810-11D0-918F-00AA00C18068")
CSCardDatabase;
#endif

EXTERN_C const CLSID CLSID_CSCardLocate;

#ifdef __cplusplus

class DECLSPEC_UUID("1461AAD1-6810-11D0-918F-00AA00C18068")
CSCardLocate;
#endif
#endif /* __SCARDSSPLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long __RPC_FAR *, unsigned long            , BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long __RPC_FAR *, BSTR __RPC_FAR * ); 

unsigned long             __RPC_USER  HGLOBAL_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HGLOBAL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HGLOBAL_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HGLOBAL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HGLOBAL_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HGLOBAL __RPC_FAR * ); 
void                      __RPC_USER  HGLOBAL_UserFree(     unsigned long __RPC_FAR *, HGLOBAL __RPC_FAR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     unsigned long __RPC_FAR *, unsigned long            , LPSAFEARRAY __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  LPSAFEARRAY_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, LPSAFEARRAY __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  LPSAFEARRAY_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, LPSAFEARRAY __RPC_FAR * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     unsigned long __RPC_FAR *, LPSAFEARRAY __RPC_FAR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\ScrnSave.h ===
/*****************************************************************************\
*                                                                             *
* scrnsave.h    Windows NT 3.1 screensaver defines and definitions.           *
*                                                                             *
*               Version 1.0                                                   *
*                                                                             *
*               NOTE: windows.h must be #included first                       *
*                                                                             *
*  Windows NT NOTE:   (Differences from Win 3.1 Screensavers)                 *
*                                                                             *
*               All Screensavers are required to have a Description string    *
*               of no more than 25 chars for display by the Control Panel's   *
*               Desktop applet.  This is string 1 in the resource string      *
*               table of the Windows 32-bit screen saver .SCR (.EXE) file.    *
*                                                                             *
*               Passwords for Windows NT Screen Savers are handled by the     *
*               Winlogon process.  If the registry value:                     *
*                                                                             *
*               HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaverIsSecure   *
*                                                                             *
*               is nonzero, Winlogon will ask for the User's login password   *
*               before allowing the Screen Saver to exit.  All password data  *
*               and dialogs have been removed from individual Screensavers.   *
*                                                                             *
*                                                                             *
*          Copyright (c) 1992-1999, Microsoft Corp.  All rights reserved.     *
*                                                                             *
\*****************************************************************************/

#ifndef _INC_SCRNSAVE
#define _INC_SCRNSAVE

#if _MSC_VER > 1000
#pragma once
#endif

#include <pshpack1.h>   /* Assume byte packing throughout */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif	/* __cplusplus */


/* MANDATORY string required in .RC file
 * This string should contain a less than 25 char name/description of the
 * screen saver.  This string is what will be seen by the user in the Control
 * Panel's Desktop applet screen saver listbox.
 */

#define IDS_DESCRIPTION      1

/* Icon resource ID.
 *
 * This should be the first icon used and must have this resource number.
 * This is needed as the first icon in the file will be grabbed
 */
#define ID_APP      100
#define DLG_SCRNSAVECONFIGURE   2003

#define idsIsPassword           1000
#define idsIniFile              1001
#define idsScreenSaver          1002
#define idsPassword             1003
#define idsDifferentPW          1004
#define idsChangePW             1005
#define idsBadOldPW             1006
#define idsAppName              1007
#define idsNoHelpMemory         1008
#define idsHelpFile             1009
#define idsDefKeyword           1010

/* This function is the Window Procedure for the screen saver.  It is
 * up to the programmer to handle any of the messages that wish to be
 * interpretted.  Any unused messages are then passed back to
 * DefScreenSaverProc if desired which will take default action on any
 * unprocessed message...
 */
#ifdef UNICODE
LRESULT WINAPI ScreenSaverProcW (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
#   define  ScreenSaverProc ScreenSaverProcW
#else
LRESULT WINAPI ScreenSaverProc (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
#endif

/* This function performs default message processing.  Currently handles
 * the following messages:
 *
 * WM_SYSCOMMAND:   return FALSE if wParam is SC_SCREENSAVE or SC_CLOSE
 *
 * WM_DESTROY:      PostQuitMessage(0)
 *
 * WM_SETCURSOR:    By default, this will set the cursor to a null cursor,
 *                  thereby removing it from the screen.
 *
 * WM_LBUTTONDOWN:
 * WM_MBUTTONDOWN:
 * WM_RBUTTONDOWN:
 * WM_KEYDOWN:
 * WM_KEYUP:
 * WM_MOUSEMOVE:    By default, these will cause the program to terminate.
 *                  Unless the password option is enabled.  In that case
 *                  the DlgGetPassword() dialog box is brought up.
 *
 * WM_NCACTIVATE:
 * WM_ACTIVATEAPP:
 * WM_ACTIVATE:     By default, if the wParam parameter is FALSE (signifying
 *                  that transfer is being taken away from the application),
 *                  then the program will terminate.  Termination is
 *                  accomplished by generating a WM_CLOSE message.  This way,
 *                  if the user sets something up in the WM_CREATE, a
 *                  WM_DESTROY will be generated and it can be destroyed
 *                  properly.
 *                  This message is ignored, however is the password option
 *                  is enabled.
 */
LRESULT WINAPI DefScreenSaverProc (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

/* A function is also needed for configuring the screen saver.  The function
 * should be exactly like it is below and must be exported such that the
 * program can use MAKEPROCINSTANCE on it and call up a dialog box. Further-
 * more, the template used for the dialog must be called
 * ScreenSaverConfigure to allow the main function to access it...
 */
BOOL WINAPI ScreenSaverConfigureDialog (HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

/* To allow the programmer the ability to register child control windows, this
 * function is called prior to the creation of the dialog box.  Any
 * registering that is required should be done here, or return TRUE if none
 * is needed...
 */
BOOL WINAPI RegisterDialogClasses (HANDLE hInst);

/* The following functions are called by DefScreenSaverProc and must
 * be exported by all screensavers using this model.
 */

/*
 * There are only three other points that should be of notice:
 * 1) The screen saver must have a string declared as 'szAppName' contaning the
 *     name of the screen saver, and it must be declared as a global.
 * 2) The screen saver EXE file should be renamed to a file with a SCR
 *     extension so that the screen saver dialog from the control panel can
 *     find it when is searches for screen savers.
 */
#define WS_GT   (WS_GROUP | WS_TABSTOP)

#define MAXFILELEN         13
#define TITLEBARNAMELEN    40
#define APPNAMEBUFFERLEN   40
#define BUFFLEN           255

/* The following globals are defined in scrnsave.lib */
extern HINSTANCE hMainInstance;
extern HWND   hMainWindow;
extern BOOL   fChildPreview;
extern TCHAR  szName[TITLEBARNAMELEN];
extern TCHAR  szAppName[APPNAMEBUFFERLEN];
extern TCHAR  szIniFile[MAXFILELEN];
extern TCHAR  szScreenSaver[22];
extern TCHAR  szHelpFile[MAXFILELEN];
extern TCHAR  szNoHelpMemory[BUFFLEN];
extern UINT   MyHelpMessage;

/* OPTIONAL - Win95 Only */

#define SCRM_VERIFYPW   WM_APP
/*
 * This message is sent to the main screen saver window when password
 * protection is enabled and the user is trying to close the screen saver.  You
 * can process this message and provide your own validation technology.  If you
 * process this message, you should also support the ScreenSaverChangePassword
 * function, described below.  Return zero from this message if the password
 * check failed.  Return nonzero for success.  If you run out of memory or
 * encounter a similar class of error, return non-zero so the user isn't left
 * out in the cold.  The default action is to call the Windows Master
 * Password Router to validate the user's password.
 */

void WINAPI ScreenSaverChangePassword( HWND hParent );
/*
 * You supply this if you provide your own authentication.  Windows will call
 * it when the user wants to change the password.  An implementation of this
 * function should present password change UI to the user.
 * You should only supply this function if you also hook the SCRM_VERIFYPW
 * message to validate passwords.
 * The default action is to call the Windows Master Password Router.
 */


#ifdef __cplusplus
}
#endif	/* __cplusplus */

#include <poppack.h>

#endif  /* !_INC_SCRNSAVE */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\Security.h ===
//+-----------------------------------------------------------------------
//
// Microsoft Windows
//
// Copyright (c) Microsoft Corporation 1991-1999
//
// File:        Security.h
//
// Contents:    Toplevel include file for security aware components
//
//
//
//------------------------------------------------------------------------

#if _MSC_VER > 1000
#pragma once
#endif

// This file will go out and pull in all the header files that you need,
// based on defines that you issue.  The following macros are used.
//
// SECURITY_KERNEL      Use the kernel interface, not the usermode
//

//
// These are name that can be used to refer to the builtin packages
//

#ifndef NTLMSP_NAME_A
#define NTLMSP_NAME_A            "NTLM"
#define NTLMSP_NAME              L"NTLM"        // ntifs
#endif // NTLMSP_NAME

#ifndef MICROSOFT_KERBEROS_NAME_A
#define MICROSOFT_KERBEROS_NAME_A   "Kerberos"
#define MICROSOFT_KERBEROS_NAME_W   L"Kerberos"
#ifdef WIN32_CHICAGO
#define MICROSOFT_KERBEROS_NAME MICROSOFT_KERBEROS_NAME_A
#else
#define MICROSOFT_KERBEROS_NAME MICROSOFT_KERBEROS_NAME_W
#endif
#endif  // MICROSOFT_KERBEROS_NAME_A


#ifndef NEGOSSP_NAME
#define NEGOSSP_NAME_W  L"Negotiate"
#define NEGOSSP_NAME_A  "Negotiate"

#ifdef UNICODE
#define NEGOSSP_NAME    NEGOSSP_NAME_W
#else
#define NEGOSSP_NAME    NEGOSSP_NAME_A
#endif
#endif // NEGOSSP_NAME

//
// Include the master SSPI header file
//

#include <sspi.h>

#if defined(SECURITY_WIN32) || defined(SECURITY_KERNEL)
#include <secext.h>
#endif

//
// Include the error codes:
//

#if ISSP_LEVEL == 16
#include <issper16.h>
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\scserver.h ===
//
//  Microsoft Windows Media Technologies
//  Copyright (C) Microsoft Corporation, 1999 - 2001. All rights reserved.
//

#ifndef _CSECURECHANNELSERVER_H_2AD99357_6FD2_11d3_8497_00C04F79DBC0
#define _CSECURECHANNELSERVER_H_2AD99357_6FD2_11d3_8497_00C04F79DBC0

#include "wtypes.h"

#ifdef USE_X509
#include "rsa.h"
#endif

#ifdef USE_X509
#include "x509cert.h"
#endif

#include "sac.h"

class CSecureChannelServer
{
public:
	   CSecureChannelServer();
       ~CSecureChannelServer();
       HRESULT SetCertificate(DWORD dwFlags,
		                      BYTE *pbAppCert, 
                              DWORD dwCertLen, 
                              BYTE *pbAppPVK,
                              DWORD dwPVKLen);
       HRESULT SACAuth(DWORD dwProtocolID,
                       DWORD dwPass,
                       BYTE *pbDataIn,
                       DWORD dwDataInLen,
                       BYTE **ppbDataOut,
                       DWORD *pdwDataOutLen);
       HRESULT SACGetProtocols(DWORD **ppdwProtocols,
                               DWORD *pdwProtocolCount);
       HRESULT EncryptParam(BYTE *pbData,
                            DWORD dwDataLen);
       HRESULT DecryptParam(BYTE *pbData,
                           DWORD dwDataLen);
       HRESULT MACInit(HMAC *phMAC);
       HRESULT MACUpdate(HMAC hMAC,
                         BYTE *pbData,
                         DWORD dwDataLen);
       HRESULT MACFinal(HMAC hMAC,
                        BYTE abData[SAC_MAC_LEN]); 
	   HRESULT GetAppSec(DWORD *pdwLocalAppSec, DWORD *pdwRemoteAppSec);
	   HRESULT SetSessionKey(BYTE *pbSPSessionKey);
	   HRESULT GetSessionKey(BYTE *pbSPSessionKey);
       HRESULT GetRemoteAppCert(BYTE *pbAppCert, DWORD* pdwCertLen);
	   BOOL fIsAuthenticated();
private:
	   BOOL m_fAuthenticated;
       BYTE *m_pbAppCert;
       DWORD m_dwCertLen;
	   BYTE *m_pbRemoteCert;
	   DWORD m_dwRemoteCertLen;
       BYTE *m_pbAppPVK;
       DWORD m_dwPVKLen; 
       BYTE *m_pbSessionKey;
       DWORD m_dwSessionKeyLen;
       BYTE m_abCallerChallenge[4];
       BYTE m_abIssuedChallenge[4];
	   BOOL m_TableInit;
       unsigned long m_DesTable[32];

#ifdef USE_X509
       CX509Cert m_CertObj;
#endif
	   DWORD m_dwCertFlags;
	   MACINFO aMacInfo[20];
	   BYTE m_abMacKey[64];
	   BOOL m_fMacKeyInit;
       CRITICAL_SECTION m_CS;      
       HRESULT Protocol1(DWORD dwPass,
                         BYTE *pbDataIn,
                         DWORD dwDataInLen,
                         BYTE **ppbDataOut,
                         DWORD *pdwDataOutLen);

       HRESULT Protocol2(DWORD dwPass,
                         BYTE *pbDataIn,
                         DWORD dwDataInLen,
                         BYTE **ppbDataOut,
                         DWORD *pdwDataOutLen);
};

#endif // _CSECURECHANNELSERVER_H_2AD99357-6FD2-11d3-8497-00C04F79DBC0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SehMap.h ===
/*

  SEHMAP.H - Map old-style structured exception handling to correct names.

  The mapping of structured exception handling statements from {try, except,
  finally, leave} to their proper names (prefaced by "__") has been removed
  from win32.mak.  This header is provided solely for compatibility with
  source code that used the older convention.

*/


#ifndef __cplusplus
#undef try
#undef except
#undef finally
#undef leave
#define try     __try
#define except  __except
#define finally __finally
#define leave   __leave
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SensAPI.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    sensapi.h

Abstract:

    Public header file for the SENS Connectivity APIs.

Author:

    Gopal Parupudi    <GopalP>

[Notes:]

    optional-notes

Revision History:

    GopalP          10/12/1997         Start.

--*/


#ifndef __SENSAPI_H__
#define __SENSAPI_H__

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif


#define NETWORK_ALIVE_LAN   0x00000001
#define NETWORK_ALIVE_WAN   0x00000002
#define NETWORK_ALIVE_AOL   0x00000004


typedef struct tagQOCINFO
{
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwInSpeed;
    DWORD dwOutSpeed;
} QOCINFO, *LPQOCINFO;



#ifdef UNICODE
#define  IsDestinationReachable  IsDestinationReachableW
#else
#define  IsDestinationReachable  IsDestinationReachableA
#endif // UNICODE


#if !defined(__midl)

BOOL APIENTRY
IsDestinationReachableA(
    LPCSTR lpszDestination,
    LPQOCINFO lpQOCInfo
    );

BOOL APIENTRY
IsDestinationReachableW(
    LPCWSTR lpszDestination,
    LPQOCINFO lpQOCInfo
    );

BOOL APIENTRY
IsNetworkAlive(
    LPDWORD lpdwFlags
    );

#endif // !defined(__midl)


#ifdef __cplusplus
}
#endif

#endif // __SENSAPI_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\Sddl.h ===
/*++

Copyright (c) 1997-1998  Microsoft Corporation

Module Name:

    sddl.w

Abstract:

    This module defines the support and conversions routines necessary for SDDL.

Revision History:

--*/

#ifndef __SDDL_H__
#define __SDDL_H__


#ifdef __cplusplus
extern "C" {
#endif

//
// SDDL Version information
//
#define SDDL_REVISION_1     1
#define SDDL_REVISION       SDDL_REVISION_1

//
// SDDL Component tags
//
#define SDDL_OWNER                          TEXT("O")       // Owner tag
#define SDDL_GROUP                          TEXT("G")       // Group tag
#define SDDL_DACL                           TEXT("D")       // DACL tag
#define SDDL_SACL                           TEXT("S")       // SACL tag

//
// SDDL Security descriptor controls
//
#define SDDL_PROTECTED                      TEXT("P")       // DACL or SACL Protected
#define SDDL_AUTO_INHERIT_REQ               TEXT("AR")      // Auto inherit request
#define SDDL_AUTO_INHERITED                 TEXT("AI")      // DACL/SACL are auto inherited
#define SDDL_NULL_ACL                       TEXT("NO_ACCESS_CONTROL")    // Null ACL

//
// SDDL Ace types
//
#define SDDL_ACCESS_ALLOWED                 TEXT("A")   // Access allowed
#define SDDL_ACCESS_DENIED                  TEXT("D")   // Access denied
#define SDDL_OBJECT_ACCESS_ALLOWED          TEXT("OA")  // Object access allowed
#define SDDL_OBJECT_ACCESS_DENIED           TEXT("OD")  // Object access denied
#define SDDL_AUDIT                          TEXT("AU")  // Audit
#define SDDL_ALARM                          TEXT("AL")  // Alarm
#define SDDL_OBJECT_AUDIT                   TEXT("OU")  // Object audit
#define SDDL_OBJECT_ALARM                   TEXT("OL")  // Object alarm
#define SDDL_MANDATORY_LABEL                TEXT("ML")  // Integrity label

//
// SDDL Ace flags
//
#define SDDL_CONTAINER_INHERIT              TEXT("CI")  // Container inherit
#define SDDL_OBJECT_INHERIT                 TEXT("OI")  // Object inherit
#define SDDL_NO_PROPAGATE                   TEXT("NP")  // Inherit no propagate
#define SDDL_INHERIT_ONLY                   TEXT("IO")  // Inherit only
#define SDDL_INHERITED                      TEXT("ID")  // Inherited
#define SDDL_AUDIT_SUCCESS                  TEXT("SA")  // Audit success
#define SDDL_AUDIT_FAILURE                  TEXT("FA")  // Audit failure


//
// SDDL Rights
//
#define SDDL_READ_PROPERTY                  TEXT("RP")
#define SDDL_WRITE_PROPERTY                 TEXT("WP")
#define SDDL_CREATE_CHILD                   TEXT("CC")
#define SDDL_DELETE_CHILD                   TEXT("DC")
#define SDDL_LIST_CHILDREN                  TEXT("LC")
#define SDDL_SELF_WRITE                     TEXT("SW")
#define SDDL_LIST_OBJECT                    TEXT("LO")
#define SDDL_DELETE_TREE                    TEXT("DT")
#define SDDL_CONTROL_ACCESS                 TEXT("CR")
#define SDDL_READ_CONTROL                   TEXT("RC")
#define SDDL_WRITE_DAC                      TEXT("WD")
#define SDDL_WRITE_OWNER                    TEXT("WO")
#define SDDL_STANDARD_DELETE                TEXT("SD")
#define SDDL_GENERIC_ALL                    TEXT("GA")
#define SDDL_GENERIC_READ                   TEXT("GR")
#define SDDL_GENERIC_WRITE                  TEXT("GW")
#define SDDL_GENERIC_EXECUTE                TEXT("GX")
#define SDDL_FILE_ALL                       TEXT("FA")
#define SDDL_FILE_READ                      TEXT("FR")
#define SDDL_FILE_WRITE                     TEXT("FW")
#define SDDL_FILE_EXECUTE                   TEXT("FX")
#define SDDL_KEY_ALL                        TEXT("KA")
#define SDDL_KEY_READ                       TEXT("KR")
#define SDDL_KEY_WRITE                      TEXT("KW")
#define SDDL_KEY_EXECUTE                    TEXT("KX")
#define SDDL_NO_WRITE_UP                    TEXT("NW")
#define SDDL_NO_READ_UP                     TEXT("NR")
#define SDDL_NO_EXECUTE_UP                  TEXT("NX")


//
// SDDL User alias max size
//      - currently, upto two supported eg. "DA"
//      - modify this if more WCHARs need to be there in future e.g. "DAX"
//

#define SDDL_ALIAS_SIZE                     2

//
// SDDL User aliases
//
#define SDDL_DOMAIN_ADMINISTRATORS          TEXT("DA")      // Domain admins
#define SDDL_DOMAIN_GUESTS                  TEXT("DG")      // Domain guests
#define SDDL_DOMAIN_USERS                   TEXT("DU")      // Domain users
#define SDDL_ENTERPRISE_DOMAIN_CONTROLLERS  TEXT("ED")      // Enterprise domain controllers
#define SDDL_DOMAIN_DOMAIN_CONTROLLERS      TEXT("DD")      // Domain domain controllers
#define SDDL_DOMAIN_COMPUTERS               TEXT("DC")      // Domain computers
#define SDDL_BUILTIN_ADMINISTRATORS         TEXT("BA")      // Builtin (local ) administrators
#define SDDL_BUILTIN_GUESTS                 TEXT("BG")      // Builtin (local ) guests
#define SDDL_BUILTIN_USERS                  TEXT("BU")      // Builtin (local ) users
#define SDDL_LOCAL_ADMIN                    TEXT("LA")      // Local administrator account
#define SDDL_LOCAL_GUEST                    TEXT("LG")      // Local group account
#define SDDL_ACCOUNT_OPERATORS              TEXT("AO")      // Account operators
#define SDDL_BACKUP_OPERATORS               TEXT("BO")      // Backup operators
#define SDDL_PRINTER_OPERATORS              TEXT("PO")      // Printer operators
#define SDDL_SERVER_OPERATORS               TEXT("SO")      // Server operators
#define SDDL_AUTHENTICATED_USERS            TEXT("AU")      // Authenticated users
#define SDDL_PERSONAL_SELF                  TEXT("PS")      // Personal self
#define SDDL_CREATOR_OWNER                  TEXT("CO")      // Creator owner
#define SDDL_CREATOR_GROUP                  TEXT("CG")      // Creator group
#define SDDL_LOCAL_SYSTEM                   TEXT("SY")      // Local system
#define SDDL_POWER_USERS                    TEXT("PU")      // Power users
#define SDDL_EVERYONE                       TEXT("WD")      // Everyone ( World )
#define SDDL_REPLICATOR                     TEXT("RE")      // Replicator
#define SDDL_INTERACTIVE                    TEXT("IU")      // Interactive logon user
#define SDDL_NETWORK                        TEXT("NU")      // Nework logon user
#define SDDL_SERVICE                        TEXT("SU")      // Service logon user
#define SDDL_RESTRICTED_CODE                TEXT("RC")      // Restricted code
#define SDDL_WRITE_RESTRICTED_CODE          TEXT("WR")      // Write Restricted code
#define SDDL_ANONYMOUS                      TEXT("AN")      // Anonymous Logon
#define SDDL_SCHEMA_ADMINISTRATORS          TEXT("SA")      // Schema Administrators
#define SDDL_CERT_SERV_ADMINISTRATORS       TEXT("CA")      // Certificate Server Administrators
#define SDDL_RAS_SERVERS                    TEXT("RS")      // RAS servers group
#define SDDL_ENTERPRISE_ADMINS              TEXT("EA")      // Enterprise administrators
#define SDDL_GROUP_POLICY_ADMINS            TEXT("PA")      // Group Policy administrators
#define SDDL_ALIAS_PREW2KCOMPACC            TEXT("RU")      // alias to allow previous windows 2000
#define SDDL_LOCAL_SERVICE                  TEXT("LS")      // Local service account (for services)
#define SDDL_NETWORK_SERVICE                TEXT("NS")      // Network service account (for services)
#define SDDL_REMOTE_DESKTOP                 TEXT("RD")      // Remote desktop users (for terminal server)
#define SDDL_NETWORK_CONFIGURATION_OPS      TEXT("NO")      // Network configuration operators ( to manage configuration of networking features)
#define SDDL_PERFMON_USERS                  TEXT("MU")      // Performance Monitor Users
#define SDDL_PERFLOG_USERS                  TEXT("LU")      // Performance Log Users
#define SDDL_IIS_USERS                      TEXT("IS")      // Anonymous Internet Users
#define SDDL_CRYPTO_OPERATORS               TEXT("CY")      // Crypto Operators
#define SDDL_OWNER_RIGHTS                   TEXT("OW")      // Owner Rights SID
#define SDDL_EVENT_LOG_READERS              TEXT("ER")      // Event log readers
#define SDDL_ENTERPRISE_RO_DCs              TEXT("RO")      // Enterprise Read-only domain controllers
#define SDDL_CERTSVC_DCOM_ACCESS            TEXT("CD")      // Users who can connect to certification authorities using DCOM
//
// Integrity Labels
//
#define SDDL_ML_LOW                         TEXT("LW")      // Low mandatory level
#define SDDL_ML_MEDIUM                      TEXT("ME")      // Medium mandatory level
#define SDDL_ML_HIGH                        TEXT("HI")      // High mandatory level
#define SDDL_ML_SYSTEM                      TEXT("SI")      // System mandatory level

//
// SDDL Seperators - character version
//
#define SDDL_SEPERATORC                     TEXT(';')
#define SDDL_DELIMINATORC                   TEXT(':')
#define SDDL_ACE_BEGINC                     TEXT('(')
#define SDDL_ACE_ENDC                       TEXT(')')

//
// SDDL Seperators - string version
//
#define SDDL_SEPERATOR                     TEXT(";")
#define SDDL_DELIMINATOR                   TEXT(":")
#define SDDL_ACE_BEGIN                     TEXT("(")
#define SDDL_ACE_END                       TEXT(")")

#if !defined(_NTDDK_)

#if(_WIN32_WINNT >= 0x0500)

BOOL
WINAPI
ConvertSidToStringSidA(
    IN  PSID     Sid,
    __out_ecount(1) LPSTR  *StringSid
    );
BOOL
WINAPI
ConvertSidToStringSidW(
    IN  PSID     Sid,
    __out_ecount(1) LPWSTR  *StringSid
    );
#ifdef UNICODE
#define ConvertSidToStringSid  ConvertSidToStringSidW
#else
#define ConvertSidToStringSid  ConvertSidToStringSidA
#endif // !UNICODE

BOOL
WINAPI
ConvertStringSidToSidA(
    IN LPCSTR   StringSid,
    OUT PSID   *Sid
    );
BOOL
WINAPI
ConvertStringSidToSidW(
    IN LPCWSTR   StringSid,
    OUT PSID   *Sid
    );
#ifdef UNICODE
#define ConvertStringSidToSid  ConvertStringSidToSidW
#else
#define ConvertStringSidToSid  ConvertStringSidToSidA
#endif // !UNICODE

BOOL
WINAPI
ConvertStringSecurityDescriptorToSecurityDescriptorA(
    IN  LPCSTR StringSecurityDescriptor,
    IN  DWORD StringSDRevision,
    OUT PSECURITY_DESCRIPTOR  *SecurityDescriptor,
    OUT PULONG  SecurityDescriptorSize OPTIONAL
    );
BOOL
WINAPI
ConvertStringSecurityDescriptorToSecurityDescriptorW(
    IN  LPCWSTR StringSecurityDescriptor,
    IN  DWORD StringSDRevision,
    OUT PSECURITY_DESCRIPTOR  *SecurityDescriptor,
    OUT PULONG  SecurityDescriptorSize OPTIONAL
    );
#ifdef UNICODE
#define ConvertStringSecurityDescriptorToSecurityDescriptor  ConvertStringSecurityDescriptorToSecurityDescriptorW
#else
#define ConvertStringSecurityDescriptorToSecurityDescriptor  ConvertStringSecurityDescriptorToSecurityDescriptorA
#endif // !UNICODE


BOOL
WINAPI
ConvertSecurityDescriptorToStringSecurityDescriptorA(
    IN  PSECURITY_DESCRIPTOR  SecurityDescriptor,
    IN  DWORD RequestedStringSDRevision,
    IN  SECURITY_INFORMATION SecurityInformation,
    __out_ecount(1) LPSTR  *StringSecurityDescriptor,
    OUT PULONG StringSecurityDescriptorLen OPTIONAL
    );
BOOL
WINAPI
ConvertSecurityDescriptorToStringSecurityDescriptorW(
    IN  PSECURITY_DESCRIPTOR  SecurityDescriptor,
    IN  DWORD RequestedStringSDRevision,
    IN  SECURITY_INFORMATION SecurityInformation,
    __out_ecount(1) LPWSTR  *StringSecurityDescriptor,
    OUT PULONG StringSecurityDescriptorLen OPTIONAL
    );
#ifdef UNICODE
#define ConvertSecurityDescriptorToStringSecurityDescriptor  ConvertSecurityDescriptorToStringSecurityDescriptorW
#else
#define ConvertSecurityDescriptorToStringSecurityDescriptor  ConvertSecurityDescriptorToStringSecurityDescriptorA
#endif // !UNICODE

#endif /* _WIN32_WINNT >=  0x0500 */

#endif /* !defined(_NTDDK_) */


#ifdef __cplusplus
}
#endif

#endif  // endif __SDDL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\sdkddkver.h ===
/*

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    sdkddkver.h

Abstract:

    Master include file for versioning windows SDK/DDK.

*/

#ifndef _INC_SDKDDKVER
#define _INC_SDKDDKVER

#if (_MSC_VER >= 800)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif
#pragma warning(disable:4001) /* nonstandard extension : single line comment */
#endif

#pragma once

//
// _WIN32_WINNT version constants
//
#define _WIN32_WINNT_NT4                    0x0400
#define _WIN32_WINNT_WIN2K                  0x0500
#define _WIN32_WINNT_WINXP                  0x0501
#define _WIN32_WINNT_WS03                   0x0502
#define _WIN32_WINNT_WIN6                   0x0600
#define _WIN32_WINNT_VISTA                  0x0600
#define _WIN32_WINNT_WS08                   0x0600
#define _WIN32_WINNT_LONGHORN               0x0600

//
// _WIN32_IE_ version constants
//
#define _WIN32_IE_IE20                      0x0200
#define _WIN32_IE_IE30                      0x0300
#define _WIN32_IE_IE302                     0x0302
#define _WIN32_IE_IE40                      0x0400
#define _WIN32_IE_IE401                     0x0401
#define _WIN32_IE_IE50                      0x0500
#define _WIN32_IE_IE501                     0x0501
#define _WIN32_IE_IE55                      0x0550
#define _WIN32_IE_IE60                      0x0600
#define _WIN32_IE_IE60SP1                   0x0601
#define _WIN32_IE_IE60SP2                   0x0603
#define _WIN32_IE_IE70                      0x0700

//
// IE <-> OS version mapping
//
// NT4 supports IE versions 2.0 -> 6.0 SP1
#define _WIN32_IE_NT4                       _WIN32_IE_IE20
#define _WIN32_IE_NT4SP1                    _WIN32_IE_IE20
#define _WIN32_IE_NT4SP2                    _WIN32_IE_IE20
#define _WIN32_IE_NT4SP3                    _WIN32_IE_IE302
#define _WIN32_IE_NT4SP4                    _WIN32_IE_IE401
#define _WIN32_IE_NT4SP5                    _WIN32_IE_IE401
#define _WIN32_IE_NT4SP6                    _WIN32_IE_IE50
// Win98 supports IE versions 4.01 -> 6.0 SP1
#define _WIN32_IE_WIN98                     _WIN32_IE_IE401
// Win98SE supports IE versions 5.0 -> 6.0 SP1
#define _WIN32_IE_WIN98SE                   _WIN32_IE_IE50
// WinME supports IE versions 5.5 -> 6.0 SP1
#define _WIN32_IE_WINME                     _WIN32_IE_IE55
// Win2k supports IE versions 5.01 -> 6.0 SP1
#define _WIN32_IE_WIN2K                     _WIN32_IE_IE501
#define _WIN32_IE_WIN2KSP1                  _WIN32_IE_IE501
#define _WIN32_IE_WIN2KSP2                  _WIN32_IE_IE501
#define _WIN32_IE_WIN2KSP3                  _WIN32_IE_IE501
#define _WIN32_IE_WIN2KSP4                  _WIN32_IE_IE501
#define _WIN32_IE_XP                        _WIN32_IE_IE60
#define _WIN32_IE_XPSP1                     _WIN32_IE_IE60SP1
#define _WIN32_IE_XPSP2                     _WIN32_IE_IE60SP2
#define _WIN32_IE_WS03                      0x0602
#define _WIN32_IE_WS03SP1                   _WIN32_IE_IE60SP2
#define _WIN32_IE_WIN6                      _WIN32_IE_IE70
#define _WIN32_IE_LONGHORN                  _WIN32_IE_IE70


//
// NTDDI version constants
//
#define NTDDI_WIN2K                         0x05000000
#define NTDDI_WIN2KSP1                      0x05000100
#define NTDDI_WIN2KSP2                      0x05000200
#define NTDDI_WIN2KSP3                      0x05000300
#define NTDDI_WIN2KSP4                      0x05000400

#define NTDDI_WINXP                         0x05010000
#define NTDDI_WINXPSP1                      0x05010100
#define NTDDI_WINXPSP2                      0x05010200
#define NTDDI_WINXPSP3                      0x05010300
#define NTDDI_WINXPSP4                      0x05010400

#define NTDDI_WS03                          0x05020000
#define NTDDI_WS03SP1                       0x05020100
#define NTDDI_WS03SP2                       0x05020200
#define NTDDI_WS03SP3                       0x05020300
#define NTDDI_WS03SP4                       0x05020400

#define NTDDI_WIN6                          0x06000000
#define NTDDI_WIN6SP1                       0x06000100
#define NTDDI_WIN6SP2                       0x06000200
#define NTDDI_WIN6SP3                       0x06000300
#define NTDDI_WIN6SP4                       0x06000400

#define NTDDI_VISTA                         NTDDI_WIN6   
#define NTDDI_VISTASP1                      NTDDI_WIN6SP1
#define NTDDI_VISTASP2                      NTDDI_WIN6SP2
#define NTDDI_VISTASP3                      NTDDI_WIN6SP3
#define NTDDI_VISTASP4                      NTDDI_WIN6SP4
					    
#define NTDDI_WS08                          NTDDI_WIN6SP1
#define NTDDI_WS08SP2                       NTDDI_WIN6SP2
#define NTDDI_WS08SP3                       NTDDI_WIN6SP3
#define NTDDI_WS08SP4                       NTDDI_WIN6SP4

#define NTDDI_LONGHORN  NTDDI_VISTA

//
// masks for version macros
//
#define OSVERSION_MASK      0xFFFF0000
#define SPVERSION_MASK      0x0000FF00
#define SUBVERSION_MASK     0x000000FF


//
// macros to extract various version fields from the NTDDI version
//
#define OSVER(Version)  ((Version) & OSVERSION_MASK)
#define SPVER(Version)  (((Version) & SPVERSION_MASK) >> 8)
#define SUBVER(Version) (((Version) & SUBVERSION_MASK) )


#if defined(DECLSPEC_DEPRECATED_DDK)

// deprecate in 2k or later
#if (NTDDI_VERSION >= NTDDI_WIN2K)
#define DECLSPEC_DEPRECATED_DDK_WIN2K DECLSPEC_DEPRECATED_DDK
#else
#define DECLSPEC_DEPRECATED_DDK_WIN2K
#endif

// deprecate in XP or later
#if (NTDDI_VERSION >= NTDDI_WINXP)
#define DECLSPEC_DEPRECATED_DDK_WINXP DECLSPEC_DEPRECATED_DDK
#else
#define DECLSPEC_DEPRECATED_DDK_WINXP
#endif

// deprecate in WS03 or later
#if (NTDDI_VERSION >= NTDDI_WS03)
#define DECLSPEC_DEPRECATED_DDK_WIN2003 DECLSPEC_DEPRECATED_DDK
#else
#define DECLSPEC_DEPRECATED_DDK_WIN2003
#endif

// deprecate in WIN6 or later
#if (NTDDI_VERSION >= NTDDI_WIN6)
#define DECLSPEC_DEPRECATED_DDK_WIN6 DECLSPEC_DEPRECATED_DDK
#else
#define DECLSPEC_DEPRECATED_DDK_WIN6
#endif

#define DECLSPEC_DEPRECATED_DDK_LONGHORN DECLSPEC_DEPRECATED_DDK_WIN6

#endif // defined(DECLSPEC_DEPRECATED_DDK)


//
// if versions aren't already defined, default to most current
//

#define NTDDI_VERSION_FROM_WIN32_WINNT2(ver)    ver##0000
#define NTDDI_VERSION_FROM_WIN32_WINNT(ver)     NTDDI_VERSION_FROM_WIN32_WINNT2(ver)

#if !defined(_WIN32_WINNT) && !defined(_CHICAGO_)
#define  _WIN32_WINNT   0x0600
#endif

#ifndef NTDDI_VERSION
#ifdef _WIN32_WINNT
// set NTDDI_VERSION based on _WIN32_WINNT
#define NTDDI_VERSION   NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT)
#else
#define NTDDI_VERSION   0x06000100
#endif
#endif

#ifndef WINVER
#ifdef _WIN32_WINNT
// set WINVER based on _WIN32_WINNT
#define WINVER          _WIN32_WINNT
#else
#define WINVER          0x0600
#endif
#endif

#ifndef _WIN32_IE
#ifdef _WIN32_WINNT
// set _WIN32_IE based on _WIN32_WINNT
#if (_WIN32_WINNT <= _WIN32_WINNT_NT4)
#define _WIN32_IE       _WIN32_IE_IE50
#elif (_WIN32_WINNT <= _WIN32_WINNT_WIN2K)
#define _WIN32_IE       _WIN32_IE_IE501
#elif (_WIN32_WINNT <= _WIN32_WINNT_WINXP)
#define _WIN32_IE       _WIN32_IE_IE60
#elif (_WIN32_WINNT <= _WIN32_WINNT_WS03)
#define _WIN32_IE       0x0602
#else
#define _WIN32_IE       0x0700
#endif
#else
#define _WIN32_IE       0x0700
#endif
#endif

//
// Sanity check for compatible versions
//
#if defined(_WIN32_WINNT) && !defined(MIDL_PASS) && !defined(RC_INVOKED)

#if (defined(WINVER) && (WINVER < 0x0400) && (_WIN32_WINNT > 0x0400))
#error WINVER setting conflicts with _WIN32_WINNT setting
#endif

#if (((OSVERSION_MASK & NTDDI_VERSION) == NTDDI_WIN2K) && (_WIN32_WINNT != _WIN32_WINNT_WIN2K))
#error NTDDI_VERSION setting conflicts with _WIN32_WINNT setting
#endif

#if (((OSVERSION_MASK & NTDDI_VERSION) == NTDDI_WINXP) && (_WIN32_WINNT != _WIN32_WINNT_WINXP))
#error NTDDI_VERSION setting conflicts with _WIN32_WINNT setting
#endif

#if (((OSVERSION_MASK & NTDDI_VERSION) == NTDDI_WS03) && (_WIN32_WINNT != _WIN32_WINNT_WS03))
#error NTDDI_VERSION setting conflicts with _WIN32_WINNT setting
#endif

#if (((OSVERSION_MASK & NTDDI_VERSION) == NTDDI_VISTA) && (_WIN32_WINNT != _WIN32_WINNT_VISTA))
#error NTDDI_VERSION setting conflicts with _WIN32_WINNT setting
#endif

#if ((_WIN32_WINNT < _WIN32_WINNT_WIN2K) && (_WIN32_IE > _WIN32_IE_IE60SP1))
#error _WIN32_WINNT settings conflicts with _WIN32_IE setting
#endif

#endif  // defined(_WIN32_WINNT) && !defined(MIDL_PASS) && !defined(_WINRESRC_)

#if (_MSC_VER >= 800)
#if (_MSC_VER >= 1200)
#pragma warning(pop)
#else
#pragma warning(default:4001) /* nonstandard extension : single line comment */
#endif
#endif

#endif  /* !_INC_SDKDDKVER */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SearchAPI.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for searchapi.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __searchapi_h__
#define __searchapi_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IUrlAccessor_FWD_DEFINED__
#define __IUrlAccessor_FWD_DEFINED__
typedef interface IUrlAccessor IUrlAccessor;
#endif 	/* __IUrlAccessor_FWD_DEFINED__ */


#ifndef __IUrlAccessor2_FWD_DEFINED__
#define __IUrlAccessor2_FWD_DEFINED__
typedef interface IUrlAccessor2 IUrlAccessor2;
#endif 	/* __IUrlAccessor2_FWD_DEFINED__ */


#ifndef __IOpLockStatus_FWD_DEFINED__
#define __IOpLockStatus_FWD_DEFINED__
typedef interface IOpLockStatus IOpLockStatus;
#endif 	/* __IOpLockStatus_FWD_DEFINED__ */


#ifndef __ISearchProtocolThreadContext_FWD_DEFINED__
#define __ISearchProtocolThreadContext_FWD_DEFINED__
typedef interface ISearchProtocolThreadContext ISearchProtocolThreadContext;
#endif 	/* __ISearchProtocolThreadContext_FWD_DEFINED__ */


#ifndef __ISearchProtocol_FWD_DEFINED__
#define __ISearchProtocol_FWD_DEFINED__
typedef interface ISearchProtocol ISearchProtocol;
#endif 	/* __ISearchProtocol_FWD_DEFINED__ */


#ifndef __ISearchProtocol2_FWD_DEFINED__
#define __ISearchProtocol2_FWD_DEFINED__
typedef interface ISearchProtocol2 ISearchProtocol2;
#endif 	/* __ISearchProtocol2_FWD_DEFINED__ */


#ifndef __IProtocolHandlerSite_FWD_DEFINED__
#define __IProtocolHandlerSite_FWD_DEFINED__
typedef interface IProtocolHandlerSite IProtocolHandlerSite;
#endif 	/* __IProtocolHandlerSite_FWD_DEFINED__ */


#ifndef __IProtocolHandlerServices_FWD_DEFINED__
#define __IProtocolHandlerServices_FWD_DEFINED__
typedef interface IProtocolHandlerServices IProtocolHandlerServices;
#endif 	/* __IProtocolHandlerServices_FWD_DEFINED__ */


#ifndef __ISearchRoot_FWD_DEFINED__
#define __ISearchRoot_FWD_DEFINED__
typedef interface ISearchRoot ISearchRoot;
#endif 	/* __ISearchRoot_FWD_DEFINED__ */


#ifndef __IEnumSearchRoots_FWD_DEFINED__
#define __IEnumSearchRoots_FWD_DEFINED__
typedef interface IEnumSearchRoots IEnumSearchRoots;
#endif 	/* __IEnumSearchRoots_FWD_DEFINED__ */


#ifndef __ISearchScopeRule_FWD_DEFINED__
#define __ISearchScopeRule_FWD_DEFINED__
typedef interface ISearchScopeRule ISearchScopeRule;
#endif 	/* __ISearchScopeRule_FWD_DEFINED__ */


#ifndef __IEnumSearchScopeRules_FWD_DEFINED__
#define __IEnumSearchScopeRules_FWD_DEFINED__
typedef interface IEnumSearchScopeRules IEnumSearchScopeRules;
#endif 	/* __IEnumSearchScopeRules_FWD_DEFINED__ */


#ifndef __ISearchCrawlScopeManager_FWD_DEFINED__
#define __ISearchCrawlScopeManager_FWD_DEFINED__
typedef interface ISearchCrawlScopeManager ISearchCrawlScopeManager;
#endif 	/* __ISearchCrawlScopeManager_FWD_DEFINED__ */


#ifndef __ISearchItemsChangedSink_FWD_DEFINED__
#define __ISearchItemsChangedSink_FWD_DEFINED__
typedef interface ISearchItemsChangedSink ISearchItemsChangedSink;
#endif 	/* __ISearchItemsChangedSink_FWD_DEFINED__ */


#ifndef __ISearchPersistentItemsChangedSink_FWD_DEFINED__
#define __ISearchPersistentItemsChangedSink_FWD_DEFINED__
typedef interface ISearchPersistentItemsChangedSink ISearchPersistentItemsChangedSink;
#endif 	/* __ISearchPersistentItemsChangedSink_FWD_DEFINED__ */


#ifndef __ISearchViewChangedSink_FWD_DEFINED__
#define __ISearchViewChangedSink_FWD_DEFINED__
typedef interface ISearchViewChangedSink ISearchViewChangedSink;
#endif 	/* __ISearchViewChangedSink_FWD_DEFINED__ */


#ifndef __IGatherNotifyInline_FWD_DEFINED__
#define __IGatherNotifyInline_FWD_DEFINED__
typedef interface IGatherNotifyInline IGatherNotifyInline;
#endif 	/* __IGatherNotifyInline_FWD_DEFINED__ */


#ifndef __ISearchNotifyInlineSite_FWD_DEFINED__
#define __ISearchNotifyInlineSite_FWD_DEFINED__
typedef interface ISearchNotifyInlineSite ISearchNotifyInlineSite;
#endif 	/* __ISearchNotifyInlineSite_FWD_DEFINED__ */


#ifndef __IGatherNotifyInlineInternal_FWD_DEFINED__
#define __IGatherNotifyInlineInternal_FWD_DEFINED__
typedef interface IGatherNotifyInlineInternal IGatherNotifyInlineInternal;
#endif 	/* __IGatherNotifyInlineInternal_FWD_DEFINED__ */


#ifndef __IGatherInlineStatus_FWD_DEFINED__
#define __IGatherInlineStatus_FWD_DEFINED__
typedef interface IGatherInlineStatus IGatherInlineStatus;
#endif 	/* __IGatherInlineStatus_FWD_DEFINED__ */


#ifndef __ISearchCatalogManager_FWD_DEFINED__
#define __ISearchCatalogManager_FWD_DEFINED__
typedef interface ISearchCatalogManager ISearchCatalogManager;
#endif 	/* __ISearchCatalogManager_FWD_DEFINED__ */


#ifndef __ISearchQueryHelper_FWD_DEFINED__
#define __ISearchQueryHelper_FWD_DEFINED__
typedef interface ISearchQueryHelper ISearchQueryHelper;
#endif 	/* __ISearchQueryHelper_FWD_DEFINED__ */


#ifndef __ISearchManager_FWD_DEFINED__
#define __ISearchManager_FWD_DEFINED__
typedef interface ISearchManager ISearchManager;
#endif 	/* __ISearchManager_FWD_DEFINED__ */


#ifndef __ISearchLanguageSupport_FWD_DEFINED__
#define __ISearchLanguageSupport_FWD_DEFINED__
typedef interface ISearchLanguageSupport ISearchLanguageSupport;
#endif 	/* __ISearchLanguageSupport_FWD_DEFINED__ */


#ifndef __CSearchManager_FWD_DEFINED__
#define __CSearchManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchManager CSearchManager;
#else
typedef struct CSearchManager CSearchManager;
#endif /* __cplusplus */

#endif 	/* __CSearchManager_FWD_DEFINED__ */


#ifndef __CSearchCatalogManager_FWD_DEFINED__
#define __CSearchCatalogManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchCatalogManager CSearchCatalogManager;
#else
typedef struct CSearchCatalogManager CSearchCatalogManager;
#endif /* __cplusplus */

#endif 	/* __CSearchCatalogManager_FWD_DEFINED__ */


#ifndef __CSearchQueryHelper_FWD_DEFINED__
#define __CSearchQueryHelper_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchQueryHelper CSearchQueryHelper;
#else
typedef struct CSearchQueryHelper CSearchQueryHelper;
#endif /* __cplusplus */

#endif 	/* __CSearchQueryHelper_FWD_DEFINED__ */


#ifndef __CSearchItemsChangedSink_FWD_DEFINED__
#define __CSearchItemsChangedSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchItemsChangedSink CSearchItemsChangedSink;
#else
typedef struct CSearchItemsChangedSink CSearchItemsChangedSink;
#endif /* __cplusplus */

#endif 	/* __CSearchItemsChangedSink_FWD_DEFINED__ */


#ifndef __CSearchCrawlScopeManager_FWD_DEFINED__
#define __CSearchCrawlScopeManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchCrawlScopeManager CSearchCrawlScopeManager;
#else
typedef struct CSearchCrawlScopeManager CSearchCrawlScopeManager;
#endif /* __cplusplus */

#endif 	/* __CSearchCrawlScopeManager_FWD_DEFINED__ */


#ifndef __CEnumSearchRoots_FWD_DEFINED__
#define __CEnumSearchRoots_FWD_DEFINED__

#ifdef __cplusplus
typedef class CEnumSearchRoots CEnumSearchRoots;
#else
typedef struct CEnumSearchRoots CEnumSearchRoots;
#endif /* __cplusplus */

#endif 	/* __CEnumSearchRoots_FWD_DEFINED__ */


#ifndef __CEnumSearchScopeRules_FWD_DEFINED__
#define __CEnumSearchScopeRules_FWD_DEFINED__

#ifdef __cplusplus
typedef class CEnumSearchScopeRules CEnumSearchScopeRules;
#else
typedef struct CEnumSearchScopeRules CEnumSearchScopeRules;
#endif /* __cplusplus */

#endif 	/* __CEnumSearchScopeRules_FWD_DEFINED__ */


#ifndef __CSearchRoot_FWD_DEFINED__
#define __CSearchRoot_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchRoot CSearchRoot;
#else
typedef struct CSearchRoot CSearchRoot;
#endif /* __cplusplus */

#endif 	/* __CSearchRoot_FWD_DEFINED__ */


#ifndef __CSearchScopeRule_FWD_DEFINED__
#define __CSearchScopeRule_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchScopeRule CSearchScopeRule;
#else
typedef struct CSearchScopeRule CSearchScopeRule;
#endif /* __cplusplus */

#endif 	/* __CSearchScopeRule_FWD_DEFINED__ */


#ifndef __CSearchPersistentItemsChangedSink_FWD_DEFINED__
#define __CSearchPersistentItemsChangedSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class CSearchPersistentItemsChangedSink CSearchPersistentItemsChangedSink;
#else
typedef struct CSearchPersistentItemsChangedSink CSearchPersistentItemsChangedSink;
#endif /* __cplusplus */

#endif 	/* __CSearchPersistentItemsChangedSink_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "objidl.h"
#include "ocidl.h"
#include "propidl.h"
#include "filter.h"
#include "oledb.h"
#include "StructuredQuery.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_searchapi_0000_0000 */
/* [local] */ 

//+----------------------------------------------------------------------------
//
//    Copyright (c) 2005 Microsoft Corporation.
//    Search API Interface
//
//-----------------------------------------------------------------------------
typedef LONG ITEMID;



extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0000_v0_0_s_ifspec;

#ifndef __IUrlAccessor_INTERFACE_DEFINED__
#define __IUrlAccessor_INTERFACE_DEFINED__

/* interface IUrlAccessor */
/* [unique][public][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IUrlAccessor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0b63e318-9ccc-11d0-bcdb-00805fccce04")
    IUrlAccessor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddRequestParameter( 
            /* [in] */ __RPC__in PROPSPEC *pSpec,
            /* [in] */ __RPC__in PROPVARIANT *pVar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocFormat( 
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszDocFormat[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCLSID( 
            /* [out] */ __RPC__out CLSID *pClsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHost( 
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszHost[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsDirectory( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ __RPC__out ULONGLONG *pllSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastModified( 
            /* [out] */ __RPC__out FILETIME *pftLastModified) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFileName( 
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszFileName[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSecurityDescriptor( 
            /* [size_is][out] */ __RPC__out_ecount_full(dwSize) BYTE *pSD,
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRedirectedURL( 
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszRedirectedURL[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSecurityProvider( 
            /* [out] */ __RPC__out CLSID *pSPClsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BindToStream( 
            /* [out] */ __RPC__deref_out_opt IStream **ppStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BindToFilter( 
            /* [out] */ __RPC__deref_out_opt IFilter **ppFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUrlAccessorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUrlAccessor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUrlAccessor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUrlAccessor * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddRequestParameter )( 
            IUrlAccessor * This,
            /* [in] */ __RPC__in PROPSPEC *pSpec,
            /* [in] */ __RPC__in PROPVARIANT *pVar);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocFormat )( 
            IUrlAccessor * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszDocFormat[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetCLSID )( 
            IUrlAccessor * This,
            /* [out] */ __RPC__out CLSID *pClsid);
        
        HRESULT ( STDMETHODCALLTYPE *GetHost )( 
            IUrlAccessor * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszHost[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *IsDirectory )( 
            IUrlAccessor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IUrlAccessor * This,
            /* [out] */ __RPC__out ULONGLONG *pllSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastModified )( 
            IUrlAccessor * This,
            /* [out] */ __RPC__out FILETIME *pftLastModified);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileName )( 
            IUrlAccessor * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszFileName[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecurityDescriptor )( 
            IUrlAccessor * This,
            /* [size_is][out] */ __RPC__out_ecount_full(dwSize) BYTE *pSD,
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetRedirectedURL )( 
            IUrlAccessor * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszRedirectedURL[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecurityProvider )( 
            IUrlAccessor * This,
            /* [out] */ __RPC__out CLSID *pSPClsid);
        
        HRESULT ( STDMETHODCALLTYPE *BindToStream )( 
            IUrlAccessor * This,
            /* [out] */ __RPC__deref_out_opt IStream **ppStream);
        
        HRESULT ( STDMETHODCALLTYPE *BindToFilter )( 
            IUrlAccessor * This,
            /* [out] */ __RPC__deref_out_opt IFilter **ppFilter);
        
        END_INTERFACE
    } IUrlAccessorVtbl;

    interface IUrlAccessor
    {
        CONST_VTBL struct IUrlAccessorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUrlAccessor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUrlAccessor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUrlAccessor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUrlAccessor_AddRequestParameter(This,pSpec,pVar)	\
    ( (This)->lpVtbl -> AddRequestParameter(This,pSpec,pVar) ) 

#define IUrlAccessor_GetDocFormat(This,wszDocFormat,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetDocFormat(This,wszDocFormat,dwSize,pdwLength) ) 

#define IUrlAccessor_GetCLSID(This,pClsid)	\
    ( (This)->lpVtbl -> GetCLSID(This,pClsid) ) 

#define IUrlAccessor_GetHost(This,wszHost,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetHost(This,wszHost,dwSize,pdwLength) ) 

#define IUrlAccessor_IsDirectory(This)	\
    ( (This)->lpVtbl -> IsDirectory(This) ) 

#define IUrlAccessor_GetSize(This,pllSize)	\
    ( (This)->lpVtbl -> GetSize(This,pllSize) ) 

#define IUrlAccessor_GetLastModified(This,pftLastModified)	\
    ( (This)->lpVtbl -> GetLastModified(This,pftLastModified) ) 

#define IUrlAccessor_GetFileName(This,wszFileName,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetFileName(This,wszFileName,dwSize,pdwLength) ) 

#define IUrlAccessor_GetSecurityDescriptor(This,pSD,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetSecurityDescriptor(This,pSD,dwSize,pdwLength) ) 

#define IUrlAccessor_GetRedirectedURL(This,wszRedirectedURL,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetRedirectedURL(This,wszRedirectedURL,dwSize,pdwLength) ) 

#define IUrlAccessor_GetSecurityProvider(This,pSPClsid)	\
    ( (This)->lpVtbl -> GetSecurityProvider(This,pSPClsid) ) 

#define IUrlAccessor_BindToStream(This,ppStream)	\
    ( (This)->lpVtbl -> BindToStream(This,ppStream) ) 

#define IUrlAccessor_BindToFilter(This,ppFilter)	\
    ( (This)->lpVtbl -> BindToFilter(This,ppFilter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUrlAccessor_INTERFACE_DEFINED__ */


#ifndef __IUrlAccessor2_INTERFACE_DEFINED__
#define __IUrlAccessor2_INTERFACE_DEFINED__

/* interface IUrlAccessor2 */
/* [unique][public][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IUrlAccessor2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c7310734-ac80-11d1-8df3-00c04fb6ef4f")
    IUrlAccessor2 : public IUrlAccessor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDisplayUrl( 
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszDocUrl[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsDocument( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodePage( 
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszCodePage[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUrlAccessor2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUrlAccessor2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUrlAccessor2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUrlAccessor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddRequestParameter )( 
            IUrlAccessor2 * This,
            /* [in] */ __RPC__in PROPSPEC *pSpec,
            /* [in] */ __RPC__in PROPVARIANT *pVar);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocFormat )( 
            IUrlAccessor2 * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszDocFormat[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetCLSID )( 
            IUrlAccessor2 * This,
            /* [out] */ __RPC__out CLSID *pClsid);
        
        HRESULT ( STDMETHODCALLTYPE *GetHost )( 
            IUrlAccessor2 * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszHost[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *IsDirectory )( 
            IUrlAccessor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IUrlAccessor2 * This,
            /* [out] */ __RPC__out ULONGLONG *pllSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastModified )( 
            IUrlAccessor2 * This,
            /* [out] */ __RPC__out FILETIME *pftLastModified);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileName )( 
            IUrlAccessor2 * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszFileName[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecurityDescriptor )( 
            IUrlAccessor2 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(dwSize) BYTE *pSD,
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetRedirectedURL )( 
            IUrlAccessor2 * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszRedirectedURL[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecurityProvider )( 
            IUrlAccessor2 * This,
            /* [out] */ __RPC__out CLSID *pSPClsid);
        
        HRESULT ( STDMETHODCALLTYPE *BindToStream )( 
            IUrlAccessor2 * This,
            /* [out] */ __RPC__deref_out_opt IStream **ppStream);
        
        HRESULT ( STDMETHODCALLTYPE *BindToFilter )( 
            IUrlAccessor2 * This,
            /* [out] */ __RPC__deref_out_opt IFilter **ppFilter);
        
        HRESULT ( STDMETHODCALLTYPE *GetDisplayUrl )( 
            IUrlAccessor2 * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszDocUrl[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *IsDocument )( 
            IUrlAccessor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodePage )( 
            IUrlAccessor2 * This,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(dwSize, *pdwLength) WCHAR wszCodePage[  ],
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        END_INTERFACE
    } IUrlAccessor2Vtbl;

    interface IUrlAccessor2
    {
        CONST_VTBL struct IUrlAccessor2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUrlAccessor2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUrlAccessor2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUrlAccessor2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUrlAccessor2_AddRequestParameter(This,pSpec,pVar)	\
    ( (This)->lpVtbl -> AddRequestParameter(This,pSpec,pVar) ) 

#define IUrlAccessor2_GetDocFormat(This,wszDocFormat,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetDocFormat(This,wszDocFormat,dwSize,pdwLength) ) 

#define IUrlAccessor2_GetCLSID(This,pClsid)	\
    ( (This)->lpVtbl -> GetCLSID(This,pClsid) ) 

#define IUrlAccessor2_GetHost(This,wszHost,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetHost(This,wszHost,dwSize,pdwLength) ) 

#define IUrlAccessor2_IsDirectory(This)	\
    ( (This)->lpVtbl -> IsDirectory(This) ) 

#define IUrlAccessor2_GetSize(This,pllSize)	\
    ( (This)->lpVtbl -> GetSize(This,pllSize) ) 

#define IUrlAccessor2_GetLastModified(This,pftLastModified)	\
    ( (This)->lpVtbl -> GetLastModified(This,pftLastModified) ) 

#define IUrlAccessor2_GetFileName(This,wszFileName,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetFileName(This,wszFileName,dwSize,pdwLength) ) 

#define IUrlAccessor2_GetSecurityDescriptor(This,pSD,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetSecurityDescriptor(This,pSD,dwSize,pdwLength) ) 

#define IUrlAccessor2_GetRedirectedURL(This,wszRedirectedURL,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetRedirectedURL(This,wszRedirectedURL,dwSize,pdwLength) ) 

#define IUrlAccessor2_GetSecurityProvider(This,pSPClsid)	\
    ( (This)->lpVtbl -> GetSecurityProvider(This,pSPClsid) ) 

#define IUrlAccessor2_BindToStream(This,ppStream)	\
    ( (This)->lpVtbl -> BindToStream(This,ppStream) ) 

#define IUrlAccessor2_BindToFilter(This,ppFilter)	\
    ( (This)->lpVtbl -> BindToFilter(This,ppFilter) ) 


#define IUrlAccessor2_GetDisplayUrl(This,wszDocUrl,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetDisplayUrl(This,wszDocUrl,dwSize,pdwLength) ) 

#define IUrlAccessor2_IsDocument(This)	\
    ( (This)->lpVtbl -> IsDocument(This) ) 

#define IUrlAccessor2_GetCodePage(This,wszCodePage,dwSize,pdwLength)	\
    ( (This)->lpVtbl -> GetCodePage(This,wszCodePage,dwSize,pdwLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUrlAccessor2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0002 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0002_v0_0_s_ifspec;

#ifndef __IOpLockStatus_INTERFACE_DEFINED__
#define __IOpLockStatus_INTERFACE_DEFINED__

/* interface IOpLockStatus */
/* [unique][local][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IOpLockStatus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c731065d-ac80-11d1-8df3-00c04fb6ef4f")
    IOpLockStatus : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsOplockValid( 
            /* [out] */ 
            __out  BOOL *pfIsOplockValid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsOplockBroken( 
            /* [out] */ 
            __out  BOOL *pfIsOplockBroken) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOplockEventHandle( 
            /* [out] */ 
            __deref_out  HANDLE *phOplockEv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpLockStatusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOpLockStatus * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOpLockStatus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOpLockStatus * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsOplockValid )( 
            IOpLockStatus * This,
            /* [out] */ 
            __out  BOOL *pfIsOplockValid);
        
        HRESULT ( STDMETHODCALLTYPE *IsOplockBroken )( 
            IOpLockStatus * This,
            /* [out] */ 
            __out  BOOL *pfIsOplockBroken);
        
        HRESULT ( STDMETHODCALLTYPE *GetOplockEventHandle )( 
            IOpLockStatus * This,
            /* [out] */ 
            __deref_out  HANDLE *phOplockEv);
        
        END_INTERFACE
    } IOpLockStatusVtbl;

    interface IOpLockStatus
    {
        CONST_VTBL struct IOpLockStatusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpLockStatus_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpLockStatus_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpLockStatus_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpLockStatus_IsOplockValid(This,pfIsOplockValid)	\
    ( (This)->lpVtbl -> IsOplockValid(This,pfIsOplockValid) ) 

#define IOpLockStatus_IsOplockBroken(This,pfIsOplockBroken)	\
    ( (This)->lpVtbl -> IsOplockBroken(This,pfIsOplockBroken) ) 

#define IOpLockStatus_GetOplockEventHandle(This,phOplockEv)	\
    ( (This)->lpVtbl -> GetOplockEventHandle(This,phOplockEv) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpLockStatus_INTERFACE_DEFINED__ */


#ifndef __ISearchProtocolThreadContext_INTERFACE_DEFINED__
#define __ISearchProtocolThreadContext_INTERFACE_DEFINED__

/* interface ISearchProtocolThreadContext */
/* [unique][local][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ISearchProtocolThreadContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c73106e1-ac80-11d1-8df3-00c04fb6ef4f")
    ISearchProtocolThreadContext : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ThreadInit( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ThreadShutdown( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ThreadIdle( 
            /* [in] */ DWORD dwTimeElaspedSinceLastCallInMS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchProtocolThreadContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchProtocolThreadContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchProtocolThreadContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchProtocolThreadContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *ThreadInit )( 
            ISearchProtocolThreadContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *ThreadShutdown )( 
            ISearchProtocolThreadContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *ThreadIdle )( 
            ISearchProtocolThreadContext * This,
            /* [in] */ DWORD dwTimeElaspedSinceLastCallInMS);
        
        END_INTERFACE
    } ISearchProtocolThreadContextVtbl;

    interface ISearchProtocolThreadContext
    {
        CONST_VTBL struct ISearchProtocolThreadContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchProtocolThreadContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchProtocolThreadContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchProtocolThreadContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchProtocolThreadContext_ThreadInit(This)	\
    ( (This)->lpVtbl -> ThreadInit(This) ) 

#define ISearchProtocolThreadContext_ThreadShutdown(This)	\
    ( (This)->lpVtbl -> ThreadShutdown(This) ) 

#define ISearchProtocolThreadContext_ThreadIdle(This,dwTimeElaspedSinceLastCallInMS)	\
    ( (This)->lpVtbl -> ThreadIdle(This,dwTimeElaspedSinceLastCallInMS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchProtocolThreadContext_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0004 */
/* [local] */ 



#pragma pack(8)
typedef struct _TIMEOUT_INFO
    {
    DWORD dwSize;
    DWORD dwConnectTimeout;
    DWORD dwDataTimeout;
    } 	TIMEOUT_INFO;

typedef 
enum _PROXY_ACCESS
    {	PROXY_ACCESS_PRECONFIG	= 0,
	PROXY_ACCESS_DIRECT	= ( PROXY_ACCESS_PRECONFIG + 1 ) ,
	PROXY_ACCESS_PROXY	= ( PROXY_ACCESS_DIRECT + 1 ) 
    } 	PROXY_ACCESS;

typedef struct _PROXY_INFO
    {
    DWORD dwSize;
    LPCWSTR pcwszUserAgent;
    PROXY_ACCESS paUseProxy;
    BOOL fLocalBypass;
    DWORD dwPortNumber;
    LPCWSTR pcwszProxyName;
    LPCWSTR pcwszBypassList;
    } 	PROXY_INFO;

typedef 
enum _AUTH_TYPE
    {	eAUTH_TYPE_ANONYMOUS	= 0,
	eAUTH_TYPE_NTLM	= ( eAUTH_TYPE_ANONYMOUS + 1 ) ,
	eAUTH_TYPE_BASIC	= ( eAUTH_TYPE_NTLM + 1 ) 
    } 	AUTH_TYPE;

typedef struct _AUTHENTICATION_INFO
    {
    DWORD dwSize;
    AUTH_TYPE atAuthenticationType;
    LPCWSTR pcwszUser;
    LPCWSTR pcwszPassword;
    } 	AUTHENTICATION_INFO;

typedef struct _INCREMENTAL_ACCESS_INFO
    {
    DWORD dwSize;
    FILETIME ftLastModifiedTime;
    } 	INCREMENTAL_ACCESS_INFO;

typedef struct _ITEM_INFO
    {
    DWORD dwSize;
    LPCWSTR pcwszFromEMail;
    LPCWSTR pcwszApplicationName;
    LPCWSTR pcwszCatalogName;
    LPCWSTR pcwszContentClass;
    } 	ITEM_INFO;





extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0004_v0_0_s_ifspec;

#ifndef __ISearchProtocol_INTERFACE_DEFINED__
#define __ISearchProtocol_INTERFACE_DEFINED__

/* interface ISearchProtocol */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISearchProtocol;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c73106ba-ac80-11d1-8df3-00c04fb6ef4f")
    ISearchProtocol : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Init( 
            /* [in] */ TIMEOUT_INFO *pTimeoutInfo,
            /* [in] */ IProtocolHandlerSite *pProtocolHandlerSite,
            /* [in] */ PROXY_INFO *pProxyInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateAccessor( 
            /* [in] */ LPCWSTR pcwszURL,
            /* [in] */ AUTHENTICATION_INFO *pAuthenticationInfo,
            /* [in] */ INCREMENTAL_ACCESS_INFO *pIncrementalAccessInfo,
            /* [in] */ ITEM_INFO *pItemInfo,
            /* [out] */ IUrlAccessor **ppAccessor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloseAccessor( 
            /* [in] */ IUrlAccessor *pAccessor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShutDown( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchProtocolVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchProtocol * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchProtocol * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchProtocol * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ISearchProtocol * This,
            /* [in] */ TIMEOUT_INFO *pTimeoutInfo,
            /* [in] */ IProtocolHandlerSite *pProtocolHandlerSite,
            /* [in] */ PROXY_INFO *pProxyInfo);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAccessor )( 
            ISearchProtocol * This,
            /* [in] */ LPCWSTR pcwszURL,
            /* [in] */ AUTHENTICATION_INFO *pAuthenticationInfo,
            /* [in] */ INCREMENTAL_ACCESS_INFO *pIncrementalAccessInfo,
            /* [in] */ ITEM_INFO *pItemInfo,
            /* [out] */ IUrlAccessor **ppAccessor);
        
        HRESULT ( STDMETHODCALLTYPE *CloseAccessor )( 
            ISearchProtocol * This,
            /* [in] */ IUrlAccessor *pAccessor);
        
        HRESULT ( STDMETHODCALLTYPE *ShutDown )( 
            ISearchProtocol * This);
        
        END_INTERFACE
    } ISearchProtocolVtbl;

    interface ISearchProtocol
    {
        CONST_VTBL struct ISearchProtocolVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchProtocol_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchProtocol_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchProtocol_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchProtocol_Init(This,pTimeoutInfo,pProtocolHandlerSite,pProxyInfo)	\
    ( (This)->lpVtbl -> Init(This,pTimeoutInfo,pProtocolHandlerSite,pProxyInfo) ) 

#define ISearchProtocol_CreateAccessor(This,pcwszURL,pAuthenticationInfo,pIncrementalAccessInfo,pItemInfo,ppAccessor)	\
    ( (This)->lpVtbl -> CreateAccessor(This,pcwszURL,pAuthenticationInfo,pIncrementalAccessInfo,pItemInfo,ppAccessor) ) 

#define ISearchProtocol_CloseAccessor(This,pAccessor)	\
    ( (This)->lpVtbl -> CloseAccessor(This,pAccessor) ) 

#define ISearchProtocol_ShutDown(This)	\
    ( (This)->lpVtbl -> ShutDown(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchProtocol_INTERFACE_DEFINED__ */


#ifndef __ISearchProtocol2_INTERFACE_DEFINED__
#define __ISearchProtocol2_INTERFACE_DEFINED__

/* interface ISearchProtocol2 */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISearchProtocol2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7789F0B2-B5B2-4722-8B65-5DBD150697A9")
    ISearchProtocol2 : public ISearchProtocol
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateAccessorEx( 
            /* [in] */ LPCWSTR pcwszURL,
            /* [in] */ AUTHENTICATION_INFO *pAuthenticationInfo,
            /* [in] */ INCREMENTAL_ACCESS_INFO *pIncrementalAccessInfo,
            /* [in] */ ITEM_INFO *pItemInfo,
            /* [in] */ const BLOB *pUserData,
            /* [out] */ IUrlAccessor **ppAccessor) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchProtocol2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchProtocol2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchProtocol2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchProtocol2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ISearchProtocol2 * This,
            /* [in] */ TIMEOUT_INFO *pTimeoutInfo,
            /* [in] */ IProtocolHandlerSite *pProtocolHandlerSite,
            /* [in] */ PROXY_INFO *pProxyInfo);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAccessor )( 
            ISearchProtocol2 * This,
            /* [in] */ LPCWSTR pcwszURL,
            /* [in] */ AUTHENTICATION_INFO *pAuthenticationInfo,
            /* [in] */ INCREMENTAL_ACCESS_INFO *pIncrementalAccessInfo,
            /* [in] */ ITEM_INFO *pItemInfo,
            /* [out] */ IUrlAccessor **ppAccessor);
        
        HRESULT ( STDMETHODCALLTYPE *CloseAccessor )( 
            ISearchProtocol2 * This,
            /* [in] */ IUrlAccessor *pAccessor);
        
        HRESULT ( STDMETHODCALLTYPE *ShutDown )( 
            ISearchProtocol2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAccessorEx )( 
            ISearchProtocol2 * This,
            /* [in] */ LPCWSTR pcwszURL,
            /* [in] */ AUTHENTICATION_INFO *pAuthenticationInfo,
            /* [in] */ INCREMENTAL_ACCESS_INFO *pIncrementalAccessInfo,
            /* [in] */ ITEM_INFO *pItemInfo,
            /* [in] */ const BLOB *pUserData,
            /* [out] */ IUrlAccessor **ppAccessor);
        
        END_INTERFACE
    } ISearchProtocol2Vtbl;

    interface ISearchProtocol2
    {
        CONST_VTBL struct ISearchProtocol2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchProtocol2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchProtocol2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchProtocol2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchProtocol2_Init(This,pTimeoutInfo,pProtocolHandlerSite,pProxyInfo)	\
    ( (This)->lpVtbl -> Init(This,pTimeoutInfo,pProtocolHandlerSite,pProxyInfo) ) 

#define ISearchProtocol2_CreateAccessor(This,pcwszURL,pAuthenticationInfo,pIncrementalAccessInfo,pItemInfo,ppAccessor)	\
    ( (This)->lpVtbl -> CreateAccessor(This,pcwszURL,pAuthenticationInfo,pIncrementalAccessInfo,pItemInfo,ppAccessor) ) 

#define ISearchProtocol2_CloseAccessor(This,pAccessor)	\
    ( (This)->lpVtbl -> CloseAccessor(This,pAccessor) ) 

#define ISearchProtocol2_ShutDown(This)	\
    ( (This)->lpVtbl -> ShutDown(This) ) 


#define ISearchProtocol2_CreateAccessorEx(This,pcwszURL,pAuthenticationInfo,pIncrementalAccessInfo,pItemInfo,pUserData,ppAccessor)	\
    ( (This)->lpVtbl -> CreateAccessorEx(This,pcwszURL,pAuthenticationInfo,pIncrementalAccessInfo,pItemInfo,pUserData,ppAccessor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchProtocol2_INTERFACE_DEFINED__ */


#ifndef __IProtocolHandlerSite_INTERFACE_DEFINED__
#define __IProtocolHandlerSite_INTERFACE_DEFINED__

/* interface IProtocolHandlerSite */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IProtocolHandlerSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0b63e385-9ccc-11d0-bcdb-00805fccce04")
    IProtocolHandlerSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFilter( 
            /* [in] */ CLSID *pclsidObj,
            /* [in] */ LPCWSTR pcwszContentType,
            /* [in] */ LPCWSTR pcwszExtension,
            /* [out] */ IFilter **ppFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProtocolHandlerSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProtocolHandlerSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProtocolHandlerSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProtocolHandlerSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFilter )( 
            IProtocolHandlerSite * This,
            /* [in] */ CLSID *pclsidObj,
            /* [in] */ LPCWSTR pcwszContentType,
            /* [in] */ LPCWSTR pcwszExtension,
            /* [out] */ IFilter **ppFilter);
        
        END_INTERFACE
    } IProtocolHandlerSiteVtbl;

    interface IProtocolHandlerSite
    {
        CONST_VTBL struct IProtocolHandlerSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProtocolHandlerSite_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IProtocolHandlerSite_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IProtocolHandlerSite_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IProtocolHandlerSite_GetFilter(This,pclsidObj,pcwszContentType,pcwszExtension,ppFilter)	\
    ( (This)->lpVtbl -> GetFilter(This,pclsidObj,pcwszContentType,pcwszExtension,ppFilter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IProtocolHandlerSite_INTERFACE_DEFINED__ */


#ifndef __IProtocolHandlerServices_INTERFACE_DEFINED__
#define __IProtocolHandlerServices_INTERFACE_DEFINED__

/* interface IProtocolHandlerServices */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IProtocolHandlerServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C9FCD6B1-8B41-4D4D-8E65-4A33FBAD8DE0")
    IProtocolHandlerServices : public IProtocolHandlerSite
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateAccessor( 
            /* [in] */ LPWSTR url,
            /* [out] */ IUrlAccessor **ppAccessor) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProtocolHandlerServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProtocolHandlerServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProtocolHandlerServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProtocolHandlerServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFilter )( 
            IProtocolHandlerServices * This,
            /* [in] */ CLSID *pclsidObj,
            /* [in] */ LPCWSTR pcwszContentType,
            /* [in] */ LPCWSTR pcwszExtension,
            /* [out] */ IFilter **ppFilter);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAccessor )( 
            IProtocolHandlerServices * This,
            /* [in] */ LPWSTR url,
            /* [out] */ IUrlAccessor **ppAccessor);
        
        END_INTERFACE
    } IProtocolHandlerServicesVtbl;

    interface IProtocolHandlerServices
    {
        CONST_VTBL struct IProtocolHandlerServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProtocolHandlerServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IProtocolHandlerServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IProtocolHandlerServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IProtocolHandlerServices_GetFilter(This,pclsidObj,pcwszContentType,pcwszExtension,ppFilter)	\
    ( (This)->lpVtbl -> GetFilter(This,pclsidObj,pcwszContentType,pcwszExtension,ppFilter) ) 


#define IProtocolHandlerServices_CreateAccessor(This,url,ppAccessor)	\
    ( (This)->lpVtbl -> CreateAccessor(This,url,ppAccessor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IProtocolHandlerServices_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0008 */
/* [local] */ 


#pragma pack()


extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0008_v0_0_s_ifspec;

#ifndef __ISearchRoot_INTERFACE_DEFINED__
#define __ISearchRoot_INTERFACE_DEFINED__

/* interface ISearchRoot */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISearchRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04C18CCF-1F57-4CBD-88CC-3900F5195CE3")
    ISearchRoot : public IUnknown
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Schedule( 
            /* [string][in] */ __RPC__in LPCWSTR pszTaskArg) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Schedule( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszTaskArg) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RootURL( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RootURL( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszURL) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IsHierarchical( 
            /* [in] */ BOOL fIsHierarchical) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsHierarchical( 
            /* [retval][out] */ __RPC__out BOOL *pfIsHierarchical) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProvidesNotifications( 
            /* [in] */ BOOL fProvidesNotifications) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProvidesNotifications( 
            /* [retval][out] */ __RPC__out BOOL *pfProvidesNotifications) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseNotificationsOnly( 
            /* [in] */ BOOL fUseNotificationsOnly) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseNotificationsOnly( 
            /* [retval][out] */ __RPC__out BOOL *pfUseNotificationsOnly) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EnumerationDepth( 
            /* [in] */ DWORD dwDepth) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EnumerationDepth( 
            /* [retval][out] */ __RPC__out DWORD *pdwDepth) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HostDepth( 
            /* [in] */ DWORD dwDepth) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HostDepth( 
            /* [retval][out] */ __RPC__out DWORD *pdwDepth) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FollowDirectories( 
            /* [in] */ BOOL fFollowDirectories) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FollowDirectories( 
            /* [retval][out] */ __RPC__out BOOL *pfFollowDirectories) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AuthenticationType( 
            /* [in] */ AUTH_TYPE authType) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AuthenticationType( 
            /* [retval][out] */ __RPC__out AUTH_TYPE *pAuthType) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_User( 
            /* [string][in] */ __RPC__in LPCWSTR pszUser) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_User( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszUser) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Password( 
            /* [string][in] */ __RPC__in LPCWSTR pszPassword) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Password( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszPassword) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchRoot * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchRoot * This);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Schedule )( 
            ISearchRoot * This,
            /* [string][in] */ __RPC__in LPCWSTR pszTaskArg);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schedule )( 
            ISearchRoot * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszTaskArg);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RootURL )( 
            ISearchRoot * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RootURL )( 
            ISearchRoot * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszURL);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsHierarchical )( 
            ISearchRoot * This,
            /* [in] */ BOOL fIsHierarchical);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsHierarchical )( 
            ISearchRoot * This,
            /* [retval][out] */ __RPC__out BOOL *pfIsHierarchical);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProvidesNotifications )( 
            ISearchRoot * This,
            /* [in] */ BOOL fProvidesNotifications);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProvidesNotifications )( 
            ISearchRoot * This,
            /* [retval][out] */ __RPC__out BOOL *pfProvidesNotifications);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseNotificationsOnly )( 
            ISearchRoot * This,
            /* [in] */ BOOL fUseNotificationsOnly);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseNotificationsOnly )( 
            ISearchRoot * This,
            /* [retval][out] */ __RPC__out BOOL *pfUseNotificationsOnly);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnumerationDepth )( 
            ISearchRoot * This,
            /* [in] */ DWORD dwDepth);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnumerationDepth )( 
            ISearchRoot * This,
            /* [retval][out] */ __RPC__out DWORD *pdwDepth);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HostDepth )( 
            ISearchRoot * This,
            /* [in] */ DWORD dwDepth);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HostDepth )( 
            ISearchRoot * This,
            /* [retval][out] */ __RPC__out DWORD *pdwDepth);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FollowDirectories )( 
            ISearchRoot * This,
            /* [in] */ BOOL fFollowDirectories);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FollowDirectories )( 
            ISearchRoot * This,
            /* [retval][out] */ __RPC__out BOOL *pfFollowDirectories);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AuthenticationType )( 
            ISearchRoot * This,
            /* [in] */ AUTH_TYPE authType);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AuthenticationType )( 
            ISearchRoot * This,
            /* [retval][out] */ __RPC__out AUTH_TYPE *pAuthType);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_User )( 
            ISearchRoot * This,
            /* [string][in] */ __RPC__in LPCWSTR pszUser);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_User )( 
            ISearchRoot * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszUser);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Password )( 
            ISearchRoot * This,
            /* [string][in] */ __RPC__in LPCWSTR pszPassword);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Password )( 
            ISearchRoot * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszPassword);
        
        END_INTERFACE
    } ISearchRootVtbl;

    interface ISearchRoot
    {
        CONST_VTBL struct ISearchRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchRoot_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchRoot_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchRoot_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchRoot_put_Schedule(This,pszTaskArg)	\
    ( (This)->lpVtbl -> put_Schedule(This,pszTaskArg) ) 

#define ISearchRoot_get_Schedule(This,ppszTaskArg)	\
    ( (This)->lpVtbl -> get_Schedule(This,ppszTaskArg) ) 

#define ISearchRoot_put_RootURL(This,pszURL)	\
    ( (This)->lpVtbl -> put_RootURL(This,pszURL) ) 

#define ISearchRoot_get_RootURL(This,ppszURL)	\
    ( (This)->lpVtbl -> get_RootURL(This,ppszURL) ) 

#define ISearchRoot_put_IsHierarchical(This,fIsHierarchical)	\
    ( (This)->lpVtbl -> put_IsHierarchical(This,fIsHierarchical) ) 

#define ISearchRoot_get_IsHierarchical(This,pfIsHierarchical)	\
    ( (This)->lpVtbl -> get_IsHierarchical(This,pfIsHierarchical) ) 

#define ISearchRoot_put_ProvidesNotifications(This,fProvidesNotifications)	\
    ( (This)->lpVtbl -> put_ProvidesNotifications(This,fProvidesNotifications) ) 

#define ISearchRoot_get_ProvidesNotifications(This,pfProvidesNotifications)	\
    ( (This)->lpVtbl -> get_ProvidesNotifications(This,pfProvidesNotifications) ) 

#define ISearchRoot_put_UseNotificationsOnly(This,fUseNotificationsOnly)	\
    ( (This)->lpVtbl -> put_UseNotificationsOnly(This,fUseNotificationsOnly) ) 

#define ISearchRoot_get_UseNotificationsOnly(This,pfUseNotificationsOnly)	\
    ( (This)->lpVtbl -> get_UseNotificationsOnly(This,pfUseNotificationsOnly) ) 

#define ISearchRoot_put_EnumerationDepth(This,dwDepth)	\
    ( (This)->lpVtbl -> put_EnumerationDepth(This,dwDepth) ) 

#define ISearchRoot_get_EnumerationDepth(This,pdwDepth)	\
    ( (This)->lpVtbl -> get_EnumerationDepth(This,pdwDepth) ) 

#define ISearchRoot_put_HostDepth(This,dwDepth)	\
    ( (This)->lpVtbl -> put_HostDepth(This,dwDepth) ) 

#define ISearchRoot_get_HostDepth(This,pdwDepth)	\
    ( (This)->lpVtbl -> get_HostDepth(This,pdwDepth) ) 

#define ISearchRoot_put_FollowDirectories(This,fFollowDirectories)	\
    ( (This)->lpVtbl -> put_FollowDirectories(This,fFollowDirectories) ) 

#define ISearchRoot_get_FollowDirectories(This,pfFollowDirectories)	\
    ( (This)->lpVtbl -> get_FollowDirectories(This,pfFollowDirectories) ) 

#define ISearchRoot_put_AuthenticationType(This,authType)	\
    ( (This)->lpVtbl -> put_AuthenticationType(This,authType) ) 

#define ISearchRoot_get_AuthenticationType(This,pAuthType)	\
    ( (This)->lpVtbl -> get_AuthenticationType(This,pAuthType) ) 

#define ISearchRoot_put_User(This,pszUser)	\
    ( (This)->lpVtbl -> put_User(This,pszUser) ) 

#define ISearchRoot_get_User(This,ppszUser)	\
    ( (This)->lpVtbl -> get_User(This,ppszUser) ) 

#define ISearchRoot_put_Password(This,pszPassword)	\
    ( (This)->lpVtbl -> put_Password(This,pszPassword) ) 

#define ISearchRoot_get_Password(This,ppszPassword)	\
    ( (This)->lpVtbl -> get_Password(This,ppszPassword) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchRoot_INTERFACE_DEFINED__ */


#ifndef __IEnumSearchRoots_INTERFACE_DEFINED__
#define __IEnumSearchRoots_INTERFACE_DEFINED__

/* interface IEnumSearchRoots */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumSearchRoots;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef52")
    IEnumSearchRoots : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [size_is][out] */ __RPC__out_ecount_full(celt) ISearchRoot **rgelt,
            /* [unique][out][in] */ __RPC__inout_opt ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchRoots **ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumSearchRootsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumSearchRoots * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumSearchRoots * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumSearchRoots * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumSearchRoots * This,
            /* [in] */ ULONG celt,
            /* [size_is][out] */ __RPC__out_ecount_full(celt) ISearchRoot **rgelt,
            /* [unique][out][in] */ __RPC__inout_opt ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumSearchRoots * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumSearchRoots * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumSearchRoots * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchRoots **ppenum);
        
        END_INTERFACE
    } IEnumSearchRootsVtbl;

    interface IEnumSearchRoots
    {
        CONST_VTBL struct IEnumSearchRootsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumSearchRoots_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumSearchRoots_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumSearchRoots_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumSearchRoots_Next(This,celt,rgelt,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched) ) 

#define IEnumSearchRoots_Skip(This,celt)	\
    ( (This)->lpVtbl -> Skip(This,celt) ) 

#define IEnumSearchRoots_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumSearchRoots_Clone(This,ppenum)	\
    ( (This)->lpVtbl -> Clone(This,ppenum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumSearchRoots_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0010 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum _FOLLOW_FLAGS
    {	FF_INDEXCOMPLEXURLS	= 0x1,
	FF_SUPPRESSINDEXING	= 0x2
    } 	FOLLOW_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0010_v0_0_s_ifspec;

#ifndef __ISearchScopeRule_INTERFACE_DEFINED__
#define __ISearchScopeRule_INTERFACE_DEFINED__

/* interface ISearchScopeRule */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISearchScopeRule;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef53")
    ISearchScopeRule : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PatternOrURL( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszPatternOrURL) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsIncluded( 
            /* [retval][out] */ __RPC__out BOOL *pfIsIncluded) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsDefault( 
            /* [retval][out] */ __RPC__out BOOL *pfIsDefault) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FollowFlags( 
            /* [retval][out] */ __RPC__out DWORD *pFollowFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchScopeRuleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchScopeRule * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchScopeRule * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchScopeRule * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PatternOrURL )( 
            ISearchScopeRule * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszPatternOrURL);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsIncluded )( 
            ISearchScopeRule * This,
            /* [retval][out] */ __RPC__out BOOL *pfIsIncluded);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDefault )( 
            ISearchScopeRule * This,
            /* [retval][out] */ __RPC__out BOOL *pfIsDefault);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FollowFlags )( 
            ISearchScopeRule * This,
            /* [retval][out] */ __RPC__out DWORD *pFollowFlags);
        
        END_INTERFACE
    } ISearchScopeRuleVtbl;

    interface ISearchScopeRule
    {
        CONST_VTBL struct ISearchScopeRuleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchScopeRule_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchScopeRule_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchScopeRule_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchScopeRule_get_PatternOrURL(This,ppszPatternOrURL)	\
    ( (This)->lpVtbl -> get_PatternOrURL(This,ppszPatternOrURL) ) 

#define ISearchScopeRule_get_IsIncluded(This,pfIsIncluded)	\
    ( (This)->lpVtbl -> get_IsIncluded(This,pfIsIncluded) ) 

#define ISearchScopeRule_get_IsDefault(This,pfIsDefault)	\
    ( (This)->lpVtbl -> get_IsDefault(This,pfIsDefault) ) 

#define ISearchScopeRule_get_FollowFlags(This,pFollowFlags)	\
    ( (This)->lpVtbl -> get_FollowFlags(This,pFollowFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchScopeRule_INTERFACE_DEFINED__ */


#ifndef __IEnumSearchScopeRules_INTERFACE_DEFINED__
#define __IEnumSearchScopeRules_INTERFACE_DEFINED__

/* interface IEnumSearchScopeRules */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumSearchScopeRules;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef54")
    IEnumSearchScopeRules : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [size_is][out] */ __RPC__out_ecount_full(celt) ISearchScopeRule **pprgelt,
            /* [unique][out][in] */ __RPC__inout_opt ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchScopeRules **ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumSearchScopeRulesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumSearchScopeRules * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumSearchScopeRules * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumSearchScopeRules * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumSearchScopeRules * This,
            /* [in] */ ULONG celt,
            /* [size_is][out] */ __RPC__out_ecount_full(celt) ISearchScopeRule **pprgelt,
            /* [unique][out][in] */ __RPC__inout_opt ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumSearchScopeRules * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumSearchScopeRules * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumSearchScopeRules * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchScopeRules **ppenum);
        
        END_INTERFACE
    } IEnumSearchScopeRulesVtbl;

    interface IEnumSearchScopeRules
    {
        CONST_VTBL struct IEnumSearchScopeRulesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumSearchScopeRules_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumSearchScopeRules_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumSearchScopeRules_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumSearchScopeRules_Next(This,celt,pprgelt,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,pprgelt,pceltFetched) ) 

#define IEnumSearchScopeRules_Skip(This,celt)	\
    ( (This)->lpVtbl -> Skip(This,celt) ) 

#define IEnumSearchScopeRules_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumSearchScopeRules_Clone(This,ppenum)	\
    ( (This)->lpVtbl -> Clone(This,ppenum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumSearchScopeRules_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0012 */
/* [local] */ 

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_searchapi_0000_0012_0001
    {	CLUSIONREASON_UNKNOWNSCOPE	= 0,
	CLUSIONREASON_DEFAULT	= 1,
	CLUSIONREASON_USER	= 2,
	CLUSIONREASON_GROUPPOLICY	= 3
    } 	CLUSION_REASON;



extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0012_v0_0_s_ifspec;

#ifndef __ISearchCrawlScopeManager_INTERFACE_DEFINED__
#define __ISearchCrawlScopeManager_INTERFACE_DEFINED__

/* interface ISearchCrawlScopeManager */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISearchCrawlScopeManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef55")
    ISearchCrawlScopeManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddDefaultScopeRule( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [in] */ BOOL fInclude,
            /* [in] */ DWORD fFollowFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddRoot( 
            /* [in] */ __RPC__in_opt ISearchRoot *pSearchRoot) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveRoot( 
            /* [in] */ __RPC__in LPCWSTR pszURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumerateRoots( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchRoots **ppSearchRoots) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddHierarchicalScope( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [in] */ BOOL fInclude,
            /* [in] */ BOOL fDefault,
            /* [in] */ BOOL fOverrideChildren) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddUserScopeRule( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [in] */ BOOL fInclude,
            /* [in] */ BOOL fOverrideChildren,
            /* [in] */ DWORD fFollowFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveScopeRule( 
            /* [string][in] */ __RPC__in LPCWSTR pszRule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumerateScopeRules( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchScopeRules **ppSearchScopeRules) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HasParentScopeRule( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out BOOL *pfHasParentRule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HasChildScopeRule( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out BOOL *pfHasChildRule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IncludedInCrawlScope( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out BOOL *pfIsIncluded) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IncludedInCrawlScopeEx( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [out] */ __RPC__out BOOL *pfIsIncluded,
            /* [out] */ __RPC__out CLUSION_REASON *pReason) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevertToDefaultScopes( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveAll( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParentScopeVersionId( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out LONG *plScopeId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveDefaultScopeRule( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchCrawlScopeManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchCrawlScopeManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchCrawlScopeManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchCrawlScopeManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddDefaultScopeRule )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [in] */ BOOL fInclude,
            /* [in] */ DWORD fFollowFlags);
        
        HRESULT ( STDMETHODCALLTYPE *AddRoot )( 
            ISearchCrawlScopeManager * This,
            /* [in] */ __RPC__in_opt ISearchRoot *pSearchRoot);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRoot )( 
            ISearchCrawlScopeManager * This,
            /* [in] */ __RPC__in LPCWSTR pszURL);
        
        HRESULT ( STDMETHODCALLTYPE *EnumerateRoots )( 
            ISearchCrawlScopeManager * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchRoots **ppSearchRoots);
        
        HRESULT ( STDMETHODCALLTYPE *AddHierarchicalScope )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [in] */ BOOL fInclude,
            /* [in] */ BOOL fDefault,
            /* [in] */ BOOL fOverrideChildren);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserScopeRule )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [in] */ BOOL fInclude,
            /* [in] */ BOOL fOverrideChildren,
            /* [in] */ DWORD fFollowFlags);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveScopeRule )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszRule);
        
        HRESULT ( STDMETHODCALLTYPE *EnumerateScopeRules )( 
            ISearchCrawlScopeManager * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumSearchScopeRules **ppSearchScopeRules);
        
        HRESULT ( STDMETHODCALLTYPE *HasParentScopeRule )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out BOOL *pfHasParentRule);
        
        HRESULT ( STDMETHODCALLTYPE *HasChildScopeRule )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out BOOL *pfHasChildRule);
        
        HRESULT ( STDMETHODCALLTYPE *IncludedInCrawlScope )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out BOOL *pfIsIncluded);
        
        HRESULT ( STDMETHODCALLTYPE *IncludedInCrawlScopeEx )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [out] */ __RPC__out BOOL *pfIsIncluded,
            /* [out] */ __RPC__out CLUSION_REASON *pReason);
        
        HRESULT ( STDMETHODCALLTYPE *RevertToDefaultScopes )( 
            ISearchCrawlScopeManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            ISearchCrawlScopeManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetParentScopeVersionId )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out LONG *plScopeId);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveDefaultScopeRule )( 
            ISearchCrawlScopeManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL);
        
        END_INTERFACE
    } ISearchCrawlScopeManagerVtbl;

    interface ISearchCrawlScopeManager
    {
        CONST_VTBL struct ISearchCrawlScopeManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchCrawlScopeManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchCrawlScopeManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchCrawlScopeManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchCrawlScopeManager_AddDefaultScopeRule(This,pszURL,fInclude,fFollowFlags)	\
    ( (This)->lpVtbl -> AddDefaultScopeRule(This,pszURL,fInclude,fFollowFlags) ) 

#define ISearchCrawlScopeManager_AddRoot(This,pSearchRoot)	\
    ( (This)->lpVtbl -> AddRoot(This,pSearchRoot) ) 

#define ISearchCrawlScopeManager_RemoveRoot(This,pszURL)	\
    ( (This)->lpVtbl -> RemoveRoot(This,pszURL) ) 

#define ISearchCrawlScopeManager_EnumerateRoots(This,ppSearchRoots)	\
    ( (This)->lpVtbl -> EnumerateRoots(This,ppSearchRoots) ) 

#define ISearchCrawlScopeManager_AddHierarchicalScope(This,pszURL,fInclude,fDefault,fOverrideChildren)	\
    ( (This)->lpVtbl -> AddHierarchicalScope(This,pszURL,fInclude,fDefault,fOverrideChildren) ) 

#define ISearchCrawlScopeManager_AddUserScopeRule(This,pszURL,fInclude,fOverrideChildren,fFollowFlags)	\
    ( (This)->lpVtbl -> AddUserScopeRule(This,pszURL,fInclude,fOverrideChildren,fFollowFlags) ) 

#define ISearchCrawlScopeManager_RemoveScopeRule(This,pszRule)	\
    ( (This)->lpVtbl -> RemoveScopeRule(This,pszRule) ) 

#define ISearchCrawlScopeManager_EnumerateScopeRules(This,ppSearchScopeRules)	\
    ( (This)->lpVtbl -> EnumerateScopeRules(This,ppSearchScopeRules) ) 

#define ISearchCrawlScopeManager_HasParentScopeRule(This,pszURL,pfHasParentRule)	\
    ( (This)->lpVtbl -> HasParentScopeRule(This,pszURL,pfHasParentRule) ) 

#define ISearchCrawlScopeManager_HasChildScopeRule(This,pszURL,pfHasChildRule)	\
    ( (This)->lpVtbl -> HasChildScopeRule(This,pszURL,pfHasChildRule) ) 

#define ISearchCrawlScopeManager_IncludedInCrawlScope(This,pszURL,pfIsIncluded)	\
    ( (This)->lpVtbl -> IncludedInCrawlScope(This,pszURL,pfIsIncluded) ) 

#define ISearchCrawlScopeManager_IncludedInCrawlScopeEx(This,pszURL,pfIsIncluded,pReason)	\
    ( (This)->lpVtbl -> IncludedInCrawlScopeEx(This,pszURL,pfIsIncluded,pReason) ) 

#define ISearchCrawlScopeManager_RevertToDefaultScopes(This)	\
    ( (This)->lpVtbl -> RevertToDefaultScopes(This) ) 

#define ISearchCrawlScopeManager_SaveAll(This)	\
    ( (This)->lpVtbl -> SaveAll(This) ) 

#define ISearchCrawlScopeManager_GetParentScopeVersionId(This,pszURL,plScopeId)	\
    ( (This)->lpVtbl -> GetParentScopeVersionId(This,pszURL,plScopeId) ) 

#define ISearchCrawlScopeManager_RemoveDefaultScopeRule(This,pszURL)	\
    ( (This)->lpVtbl -> RemoveDefaultScopeRule(This,pszURL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchCrawlScopeManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0013 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum _SEARCH_KIND_OF_CHANGE
    {	SEARCH_CHANGE_ADD	= 0,
	SEARCH_CHANGE_DELETE	= 1,
	SEARCH_CHANGE_MODIFY	= 2,
	SEARCH_CHANGE_MOVE_RENAME	= 3,
	SEARCH_CHANGE_SEMANTICS_DIRECTORY	= 0x40000,
	SEARCH_CHANGE_SEMANTICS_SHALLOW	= 0x80000,
	SEARCH_CHANGE_SEMANTICS_UPDATE_SECURITY	= 0x400000
    } 	SEARCH_KIND_OF_CHANGE;

typedef 
enum _SEARCH_NOTIFICATION_PRIORITY
    {	SEARCH_NORMAL_PRIORITY	= 0,
	SEARCH_HIGH_PRIORITY	= 1
    } 	SEARCH_NOTIFICATION_PRIORITY;



extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0013_v0_0_s_ifspec;

#ifndef __ISearchItemsChangedSink_INTERFACE_DEFINED__
#define __ISearchItemsChangedSink_INTERFACE_DEFINED__

/* interface ISearchItemsChangedSink */
/* [unique][uuid][object] */ 

typedef struct _SEARCH_ITEM_CHANGE
    {
    SEARCH_KIND_OF_CHANGE Change;
    SEARCH_NOTIFICATION_PRIORITY Priority;
    BLOB *pUserData;
    LPWSTR lpwszURL;
    LPWSTR lpwszOldURL;
    } 	SEARCH_ITEM_CHANGE;


EXTERN_C const IID IID_ISearchItemsChangedSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef58")
    ISearchItemsChangedSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartedMonitoringScope( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StoppedMonitoringScope( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnItemsChanged( 
            /* [in] */ DWORD dwNumberOfChanges,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfChanges) SEARCH_ITEM_CHANGE rgDataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberOfChanges) DWORD rgdwDocIds[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberOfChanges) HRESULT rghrCompletionCodes[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchItemsChangedSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchItemsChangedSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchItemsChangedSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchItemsChangedSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartedMonitoringScope )( 
            ISearchItemsChangedSink * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL);
        
        HRESULT ( STDMETHODCALLTYPE *StoppedMonitoringScope )( 
            ISearchItemsChangedSink * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL);
        
        HRESULT ( STDMETHODCALLTYPE *OnItemsChanged )( 
            ISearchItemsChangedSink * This,
            /* [in] */ DWORD dwNumberOfChanges,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfChanges) SEARCH_ITEM_CHANGE rgDataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberOfChanges) DWORD rgdwDocIds[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberOfChanges) HRESULT rghrCompletionCodes[  ]);
        
        END_INTERFACE
    } ISearchItemsChangedSinkVtbl;

    interface ISearchItemsChangedSink
    {
        CONST_VTBL struct ISearchItemsChangedSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchItemsChangedSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchItemsChangedSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchItemsChangedSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchItemsChangedSink_StartedMonitoringScope(This,pszURL)	\
    ( (This)->lpVtbl -> StartedMonitoringScope(This,pszURL) ) 

#define ISearchItemsChangedSink_StoppedMonitoringScope(This,pszURL)	\
    ( (This)->lpVtbl -> StoppedMonitoringScope(This,pszURL) ) 

#define ISearchItemsChangedSink_OnItemsChanged(This,dwNumberOfChanges,rgDataChangeEntries,rgdwDocIds,rghrCompletionCodes)	\
    ( (This)->lpVtbl -> OnItemsChanged(This,dwNumberOfChanges,rgDataChangeEntries,rgdwDocIds,rghrCompletionCodes) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchItemsChangedSink_INTERFACE_DEFINED__ */


#ifndef __ISearchPersistentItemsChangedSink_INTERFACE_DEFINED__
#define __ISearchPersistentItemsChangedSink_INTERFACE_DEFINED__

/* interface ISearchPersistentItemsChangedSink */
/* [unique][uuid][object] */ 

typedef struct _SEARCH_ITEM_PERSISTENT_CHANGE
    {
    SEARCH_KIND_OF_CHANGE Change;
    LPWSTR URL;
    LPWSTR OldURL;
    SEARCH_NOTIFICATION_PRIORITY Priority;
    } 	SEARCH_ITEM_PERSISTENT_CHANGE;


EXTERN_C const IID IID_ISearchPersistentItemsChangedSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A2FFDF9B-4758-4F84-B729-DF81A1A0612F")
    ISearchPersistentItemsChangedSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartedMonitoringScope( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StoppedMonitoringScope( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnItemsChanged( 
            /* [in] */ DWORD dwNumberOfChanges,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfChanges) SEARCH_ITEM_PERSISTENT_CHANGE DataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberOfChanges) HRESULT hrCompletionCodes[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchPersistentItemsChangedSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchPersistentItemsChangedSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchPersistentItemsChangedSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchPersistentItemsChangedSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartedMonitoringScope )( 
            ISearchPersistentItemsChangedSink * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL);
        
        HRESULT ( STDMETHODCALLTYPE *StoppedMonitoringScope )( 
            ISearchPersistentItemsChangedSink * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL);
        
        HRESULT ( STDMETHODCALLTYPE *OnItemsChanged )( 
            ISearchPersistentItemsChangedSink * This,
            /* [in] */ DWORD dwNumberOfChanges,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfChanges) SEARCH_ITEM_PERSISTENT_CHANGE DataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberOfChanges) HRESULT hrCompletionCodes[  ]);
        
        END_INTERFACE
    } ISearchPersistentItemsChangedSinkVtbl;

    interface ISearchPersistentItemsChangedSink
    {
        CONST_VTBL struct ISearchPersistentItemsChangedSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchPersistentItemsChangedSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchPersistentItemsChangedSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchPersistentItemsChangedSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchPersistentItemsChangedSink_StartedMonitoringScope(This,pszURL)	\
    ( (This)->lpVtbl -> StartedMonitoringScope(This,pszURL) ) 

#define ISearchPersistentItemsChangedSink_StoppedMonitoringScope(This,pszURL)	\
    ( (This)->lpVtbl -> StoppedMonitoringScope(This,pszURL) ) 

#define ISearchPersistentItemsChangedSink_OnItemsChanged(This,dwNumberOfChanges,DataChangeEntries,hrCompletionCodes)	\
    ( (This)->lpVtbl -> OnItemsChanged(This,dwNumberOfChanges,DataChangeEntries,hrCompletionCodes) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchPersistentItemsChangedSink_INTERFACE_DEFINED__ */


#ifndef __ISearchViewChangedSink_INTERFACE_DEFINED__
#define __ISearchViewChangedSink_INTERFACE_DEFINED__

/* interface ISearchViewChangedSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISearchViewChangedSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef65")
    ISearchViewChangedSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnChange( 
            /* [in] */ __RPC__in ITEMID *pdwDocID,
            /* [in] */ __RPC__in SEARCH_ITEM_CHANGE *pChange,
            /* [in] */ __RPC__in BOOL *pfInView) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchViewChangedSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchViewChangedSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchViewChangedSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchViewChangedSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnChange )( 
            ISearchViewChangedSink * This,
            /* [in] */ __RPC__in ITEMID *pdwDocID,
            /* [in] */ __RPC__in SEARCH_ITEM_CHANGE *pChange,
            /* [in] */ __RPC__in BOOL *pfInView);
        
        END_INTERFACE
    } ISearchViewChangedSinkVtbl;

    interface ISearchViewChangedSink
    {
        CONST_VTBL struct ISearchViewChangedSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchViewChangedSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchViewChangedSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchViewChangedSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchViewChangedSink_OnChange(This,pdwDocID,pChange,pfInView)	\
    ( (This)->lpVtbl -> OnChange(This,pdwDocID,pChange,pfInView) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchViewChangedSink_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0016 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0016_v0_0_s_ifspec;

#ifndef __IGatherNotifyInline_INTERFACE_DEFINED__
#define __IGatherNotifyInline_INTERFACE_DEFINED__

/* interface IGatherNotifyInline */
/* [helpstring][unique][uuid][object] */ 

typedef struct _INLINE_NOTIFY_DATA_CHANGE_ENTRY
    {
    LONG eChangeAdviseCode;
    LPCWSTR pszPhysicalAddress;
    const BLOB *pUserData;
    } 	INLINE_NOTIFY_DATA_CHANGE_ENTRY;


EXTERN_C const IID IID_IGatherNotifyInline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7900F4F4-BA3F-4D53-8744-51626542351A")
    IGatherNotifyInline : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ __RPC__in LPCWSTR pszApplication,
            /* [in] */ __RPC__in LPCWSTR pszCatalog,
            /* [in] */ __RPC__in_opt ISearchNotifyInlineSite *pClientSite,
            /* [out] */ __RPC__out GUID *pGUIDCatalogResetSignature,
            /* [out] */ __RPC__out GUID *pGUIDCheckPointSignature,
            /* [out] */ __RPC__out DWORD *pdwLastCheckPointNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDataChange( 
            /* [in] */ DWORD dwNumberEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberEntries) INLINE_NOTIFY_DATA_CHANGE_ENTRY rgDataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) DWORD rgdwDocIDs[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) HRESULT rghrCompletionCodes[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IGatherNotifyInlineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGatherNotifyInline * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGatherNotifyInline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGatherNotifyInline * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IGatherNotifyInline * This,
            /* [in] */ __RPC__in LPCWSTR pszApplication,
            /* [in] */ __RPC__in LPCWSTR pszCatalog,
            /* [in] */ __RPC__in_opt ISearchNotifyInlineSite *pClientSite,
            /* [out] */ __RPC__out GUID *pGUIDCatalogResetSignature,
            /* [out] */ __RPC__out GUID *pGUIDCheckPointSignature,
            /* [out] */ __RPC__out DWORD *pdwLastCheckPointNumber);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataChange )( 
            IGatherNotifyInline * This,
            /* [in] */ DWORD dwNumberEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberEntries) INLINE_NOTIFY_DATA_CHANGE_ENTRY rgDataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) DWORD rgdwDocIDs[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) HRESULT rghrCompletionCodes[  ]);
        
        END_INTERFACE
    } IGatherNotifyInlineVtbl;

    interface IGatherNotifyInline
    {
        CONST_VTBL struct IGatherNotifyInlineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGatherNotifyInline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGatherNotifyInline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGatherNotifyInline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGatherNotifyInline_Initialize(This,pszApplication,pszCatalog,pClientSite,pGUIDCatalogResetSignature,pGUIDCheckPointSignature,pdwLastCheckPointNumber)	\
    ( (This)->lpVtbl -> Initialize(This,pszApplication,pszCatalog,pClientSite,pGUIDCatalogResetSignature,pGUIDCheckPointSignature,pdwLastCheckPointNumber) ) 

#define IGatherNotifyInline_OnDataChange(This,dwNumberEntries,rgDataChangeEntries,rgdwDocIDs,rghrCompletionCodes)	\
    ( (This)->lpVtbl -> OnDataChange(This,dwNumberEntries,rgDataChangeEntries,rgdwDocIDs,rghrCompletionCodes) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGatherNotifyInline_INTERFACE_DEFINED__ */


#ifndef __ISearchNotifyInlineSite_INTERFACE_DEFINED__
#define __ISearchNotifyInlineSite_INTERFACE_DEFINED__

/* interface ISearchNotifyInlineSite */
/* [helpstring][unique][uuid][object] */ 

typedef 
enum _SEARCH_INDEXING_PHASE
    {	SEARCH_INDEXING_PHASE_GATHERER	= 0,
	SEARCH_INDEXING_PHASE_QUERYABLE	= 1,
	SEARCH_INDEXING_PHASE_PERSISTED	= 2
    } 	SEARCH_INDEXING_PHASE;

typedef struct _SEARCH_ITEM_INDEXING_STATUS
    {
    DWORD dwDocID;
    HRESULT hrIndexingStatus;
    } 	SEARCH_ITEM_INDEXING_STATUS;


EXTERN_C const IID IID_ISearchNotifyInlineSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B5702E61-E75C-4B64-82A1-6CB4F832FCCF")
    ISearchNotifyInlineSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnItemIndexedStatusChange( 
            /* [in] */ SEARCH_INDEXING_PHASE sipStatus,
            /* [in] */ DWORD dwNumEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumEntries) SEARCH_ITEM_INDEXING_STATUS rgItemStatusEntries[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnCatalogStatusChange( 
            /* [in] */ __RPC__in REFGUID guidCatalogResetSignature,
            /* [in] */ __RPC__in REFGUID guidCheckPointSignature,
            /* [in] */ DWORD dwLastCheckPointNumber) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchNotifyInlineSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchNotifyInlineSite * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchNotifyInlineSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchNotifyInlineSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnItemIndexedStatusChange )( 
            ISearchNotifyInlineSite * This,
            /* [in] */ SEARCH_INDEXING_PHASE sipStatus,
            /* [in] */ DWORD dwNumEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumEntries) SEARCH_ITEM_INDEXING_STATUS rgItemStatusEntries[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *OnCatalogStatusChange )( 
            ISearchNotifyInlineSite * This,
            /* [in] */ __RPC__in REFGUID guidCatalogResetSignature,
            /* [in] */ __RPC__in REFGUID guidCheckPointSignature,
            /* [in] */ DWORD dwLastCheckPointNumber);
        
        END_INTERFACE
    } ISearchNotifyInlineSiteVtbl;

    interface ISearchNotifyInlineSite
    {
        CONST_VTBL struct ISearchNotifyInlineSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchNotifyInlineSite_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchNotifyInlineSite_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchNotifyInlineSite_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchNotifyInlineSite_OnItemIndexedStatusChange(This,sipStatus,dwNumEntries,rgItemStatusEntries)	\
    ( (This)->lpVtbl -> OnItemIndexedStatusChange(This,sipStatus,dwNumEntries,rgItemStatusEntries) ) 

#define ISearchNotifyInlineSite_OnCatalogStatusChange(This,guidCatalogResetSignature,guidCheckPointSignature,dwLastCheckPointNumber)	\
    ( (This)->lpVtbl -> OnCatalogStatusChange(This,guidCatalogResetSignature,guidCheckPointSignature,dwLastCheckPointNumber) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchNotifyInlineSite_INTERFACE_DEFINED__ */


#ifndef __IGatherNotifyInlineInternal_INTERFACE_DEFINED__
#define __IGatherNotifyInlineInternal_INTERFACE_DEFINED__

/* interface IGatherNotifyInlineInternal */
/* [helpstring][unique][uuid][object] */ 


EXTERN_C const IID IID_IGatherNotifyInlineInternal;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2E5C2EC6-4FF9-44B7-9869-6AF9A8D3FD67")
    IGatherNotifyInlineInternal : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterInlineNotificationClient( 
            /* [in] */ __RPC__in_opt ISearchNotifyInlineSite *pClientSite,
            /* [out] */ __RPC__out GUID *pGUIDCatalogResetSignature,
            /* [out] */ __RPC__out GUID *pGUIDCheckPointSignature,
            /* [out] */ __RPC__out DWORD *pdwLastCheckPointNumber,
            /* [out] */ __RPC__out DWORD *pdwClientID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDataChangeInline( 
            /* [in] */ DWORD dwClientID,
            /* [in] */ DWORD dwNumberEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberEntries) INLINE_NOTIFY_DATA_CHANGE_ENTRY rgDataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) DWORD rgdwDocIDs[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) HRESULT rghrCompletionCodes[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendItemIndexedStatusChange( 
            /* [in] */ DWORD dwClientID,
            /* [in] */ SEARCH_INDEXING_PHASE sipStatus,
            /* [in] */ DWORD dwNumEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumEntries) SEARCH_ITEM_INDEXING_STATUS rgItemStatusEntries[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseInlineNotificationClient( 
            /* [in] */ DWORD dwClientID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IGatherNotifyInlineInternalVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGatherNotifyInlineInternal * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGatherNotifyInlineInternal * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGatherNotifyInlineInternal * This);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterInlineNotificationClient )( 
            IGatherNotifyInlineInternal * This,
            /* [in] */ __RPC__in_opt ISearchNotifyInlineSite *pClientSite,
            /* [out] */ __RPC__out GUID *pGUIDCatalogResetSignature,
            /* [out] */ __RPC__out GUID *pGUIDCheckPointSignature,
            /* [out] */ __RPC__out DWORD *pdwLastCheckPointNumber,
            /* [out] */ __RPC__out DWORD *pdwClientID);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataChangeInline )( 
            IGatherNotifyInlineInternal * This,
            /* [in] */ DWORD dwClientID,
            /* [in] */ DWORD dwNumberEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberEntries) INLINE_NOTIFY_DATA_CHANGE_ENTRY rgDataChangeEntries[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) DWORD rgdwDocIDs[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(dwNumberEntries) HRESULT rghrCompletionCodes[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SendItemIndexedStatusChange )( 
            IGatherNotifyInlineInternal * This,
            /* [in] */ DWORD dwClientID,
            /* [in] */ SEARCH_INDEXING_PHASE sipStatus,
            /* [in] */ DWORD dwNumEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumEntries) SEARCH_ITEM_INDEXING_STATUS rgItemStatusEntries[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseInlineNotificationClient )( 
            IGatherNotifyInlineInternal * This,
            /* [in] */ DWORD dwClientID);
        
        END_INTERFACE
    } IGatherNotifyInlineInternalVtbl;

    interface IGatherNotifyInlineInternal
    {
        CONST_VTBL struct IGatherNotifyInlineInternalVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGatherNotifyInlineInternal_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGatherNotifyInlineInternal_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGatherNotifyInlineInternal_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGatherNotifyInlineInternal_RegisterInlineNotificationClient(This,pClientSite,pGUIDCatalogResetSignature,pGUIDCheckPointSignature,pdwLastCheckPointNumber,pdwClientID)	\
    ( (This)->lpVtbl -> RegisterInlineNotificationClient(This,pClientSite,pGUIDCatalogResetSignature,pGUIDCheckPointSignature,pdwLastCheckPointNumber,pdwClientID) ) 

#define IGatherNotifyInlineInternal_OnDataChangeInline(This,dwClientID,dwNumberEntries,rgDataChangeEntries,rgdwDocIDs,rghrCompletionCodes)	\
    ( (This)->lpVtbl -> OnDataChangeInline(This,dwClientID,dwNumberEntries,rgDataChangeEntries,rgdwDocIDs,rghrCompletionCodes) ) 

#define IGatherNotifyInlineInternal_SendItemIndexedStatusChange(This,dwClientID,sipStatus,dwNumEntries,rgItemStatusEntries)	\
    ( (This)->lpVtbl -> SendItemIndexedStatusChange(This,dwClientID,sipStatus,dwNumEntries,rgItemStatusEntries) ) 

#define IGatherNotifyInlineInternal_ReleaseInlineNotificationClient(This,dwClientID)	\
    ( (This)->lpVtbl -> ReleaseInlineNotificationClient(This,dwClientID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGatherNotifyInlineInternal_INTERFACE_DEFINED__ */


#ifndef __IGatherInlineStatus_INTERFACE_DEFINED__
#define __IGatherInlineStatus_INTERFACE_DEFINED__

/* interface IGatherInlineStatus */
/* [helpstring][unique][uuid][object] */ 


EXTERN_C const IID IID_IGatherInlineStatus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2137B63B-BBB0-4bee-94B3-4691CCEF389A")
    IGatherInlineStatus : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SendInlineStatusChange( 
            /* [in] */ DWORD dwClientID,
            /* [in] */ SEARCH_INDEXING_PHASE sipStatus,
            /* [in] */ DWORD dwNumEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumEntries) SEARCH_ITEM_INDEXING_STATUS rgItemStatusEntries[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IGatherInlineStatusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGatherInlineStatus * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGatherInlineStatus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGatherInlineStatus * This);
        
        HRESULT ( STDMETHODCALLTYPE *SendInlineStatusChange )( 
            IGatherInlineStatus * This,
            /* [in] */ DWORD dwClientID,
            /* [in] */ SEARCH_INDEXING_PHASE sipStatus,
            /* [in] */ DWORD dwNumEntries,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumEntries) SEARCH_ITEM_INDEXING_STATUS rgItemStatusEntries[  ]);
        
        END_INTERFACE
    } IGatherInlineStatusVtbl;

    interface IGatherInlineStatus
    {
        CONST_VTBL struct IGatherInlineStatusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGatherInlineStatus_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGatherInlineStatus_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGatherInlineStatus_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGatherInlineStatus_SendInlineStatusChange(This,dwClientID,sipStatus,dwNumEntries,rgItemStatusEntries)	\
    ( (This)->lpVtbl -> SendInlineStatusChange(This,dwClientID,sipStatus,dwNumEntries,rgItemStatusEntries) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGatherInlineStatus_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0020 */
/* [local] */ 


typedef 
enum _CatalogStatus
    {	CATALOG_STATUS_IDLE	= 0,
	CATALOG_STATUS_PAUSED	= 1,
	CATALOG_STATUS_RECOVERING	= 2,
	CATALOG_STATUS_FULL_CRAWL	= 3,
	CATALOG_STATUS_INCREMENTAL_CRAWL	= 4,
	CATALOG_STATUS_PROCESSING_NOTIFICATIONS	= 5,
	CATALOG_STATUS_SHUTTING_DOWN	= 6
    } 	CatalogStatus;

typedef 
enum _CatalogPausedReason
    {	CATALOG_PAUSED_REASON_NONE	= 0,
	CATALOG_PAUSED_REASON_HIGH_IO	= 1,
	CATALOG_PAUSED_REASON_HIGH_CPU	= 2,
	CATALOG_PAUSED_REASON_HIGH_NTF_RATE	= 3,
	CATALOG_PAUSED_REASON_LOW_BATTERY	= 4,
	CATALOG_PAUSED_REASON_LOW_MEMORY	= 5,
	CATALOG_PAUSED_REASON_LOW_DISK	= 6,
	CATALOG_PAUSED_REASON_DELAYED_RECOVERY	= 7,
	CATALOG_PAUSED_REASON_USER_ACTIVE	= 8,
	CATALOG_PAUSED_REASON_EXTERNAL	= 9,
	CATALOG_PAUSED_REASON_UPGRADING	= 10
    } 	CatalogPausedReason;



extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0020_v0_0_s_ifspec;

#ifndef __ISearchCatalogManager_INTERFACE_DEFINED__
#define __ISearchCatalogManager_INTERFACE_DEFINED__

/* interface ISearchCatalogManager */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISearchCatalogManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef50")
    ISearchCatalogManager : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *pszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParameter( 
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [retval][out] */ __RPC__deref_out_opt PROPVARIANT **ppValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetParameter( 
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [in] */ __RPC__in PROPVARIANT *pValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCatalogStatus( 
            /* [out] */ __RPC__out CatalogStatus *pStatus,
            /* [out] */ __RPC__out CatalogPausedReason *pPausedReason) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reindex( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReindexMatchingURLs( 
            /* [string][in] */ __RPC__in LPCWSTR pszPattern) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReindexSearchRoot( 
            /* [string][in] */ __RPC__in LPCWSTR pszRootURL) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ConnectTimeout( 
            /* [in] */ DWORD dwConnectTimeout) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ConnectTimeout( 
            /* [retval][out] */ __RPC__out DWORD *pdwConnectTimeout) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DataTimeout( 
            /* [in] */ DWORD dwDataTimeout) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataTimeout( 
            /* [retval][out] */ __RPC__out DWORD *pdwDataTimeout) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NumberOfItems( 
            /* [retval][out] */ __RPC__out LONG *plCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NumberOfItemsToIndex( 
            /* [out] */ __RPC__out LONG *plIncrementalCount,
            /* [out] */ __RPC__out LONG *plNotificationQueue,
            /* [out] */ __RPC__out LONG *plHighPriorityQueue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URLBeingIndexed( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *pszUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetURLIndexingState( 
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out DWORD *pdwState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPersistentItemsChangedSink( 
            /* [retval][out] */ __RPC__deref_out_opt ISearchPersistentItemsChangedSink **ppISearchPersistentItemsChangedSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterViewForNotification( 
            /* [string][in] */ __RPC__in LPCWSTR pszView,
            /* [in] */ __RPC__in_opt ISearchViewChangedSink *pViewChangedSink,
            /* [out] */ __RPC__out DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemsChangedSink( 
            /* [in] */ __RPC__in_opt ISearchNotifyInlineSite *pISearchNotifyInlineSite,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppv,
            /* [out] */ __RPC__out GUID *pGUIDCatalogResetSignature,
            /* [out] */ __RPC__out GUID *pGUIDCheckPointSignature,
            /* [out] */ __RPC__out DWORD *pdwLastCheckPointNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterViewForNotification( 
            /* [in] */ DWORD dwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExtensionClusion( 
            /* [string][in] */ __RPC__in LPCWSTR pszExtension,
            /* [in] */ BOOL fExclude) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumerateExcludedExtensions( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumString **ppExtensions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetQueryHelper( 
            /* [retval][out] */ __RPC__deref_out_opt ISearchQueryHelper **ppSearchQueryHelper) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiacriticSensitivity( 
            /* [in] */ BOOL fDiacriticSensitive) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiacriticSensitivity( 
            /* [retval][out] */ __RPC__out BOOL *pfDiacriticSensitive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCrawlScopeManager( 
            /* [retval][out] */ __RPC__deref_out_opt ISearchCrawlScopeManager **ppCrawlScopeManager) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchCatalogManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchCatalogManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchCatalogManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchCatalogManager * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISearchCatalogManager * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *pszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetParameter )( 
            ISearchCatalogManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [retval][out] */ __RPC__deref_out_opt PROPVARIANT **ppValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetParameter )( 
            ISearchCatalogManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [in] */ __RPC__in PROPVARIANT *pValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetCatalogStatus )( 
            ISearchCatalogManager * This,
            /* [out] */ __RPC__out CatalogStatus *pStatus,
            /* [out] */ __RPC__out CatalogPausedReason *pPausedReason);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISearchCatalogManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *Reindex )( 
            ISearchCatalogManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReindexMatchingURLs )( 
            ISearchCatalogManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszPattern);
        
        HRESULT ( STDMETHODCALLTYPE *ReindexSearchRoot )( 
            ISearchCatalogManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszRootURL);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectTimeout )( 
            ISearchCatalogManager * This,
            /* [in] */ DWORD dwConnectTimeout);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectTimeout )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__out DWORD *pdwConnectTimeout);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataTimeout )( 
            ISearchCatalogManager * This,
            /* [in] */ DWORD dwDataTimeout);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataTimeout )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__out DWORD *pdwDataTimeout);
        
        HRESULT ( STDMETHODCALLTYPE *NumberOfItems )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__out LONG *plCount);
        
        HRESULT ( STDMETHODCALLTYPE *NumberOfItemsToIndex )( 
            ISearchCatalogManager * This,
            /* [out] */ __RPC__out LONG *plIncrementalCount,
            /* [out] */ __RPC__out LONG *plNotificationQueue,
            /* [out] */ __RPC__out LONG *plHighPriorityQueue);
        
        HRESULT ( STDMETHODCALLTYPE *URLBeingIndexed )( 
            ISearchCatalogManager * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *pszUrl);
        
        HRESULT ( STDMETHODCALLTYPE *GetURLIndexingState )( 
            ISearchCatalogManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszURL,
            /* [retval][out] */ __RPC__out DWORD *pdwState);
        
        HRESULT ( STDMETHODCALLTYPE *GetPersistentItemsChangedSink )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__deref_out_opt ISearchPersistentItemsChangedSink **ppISearchPersistentItemsChangedSink);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterViewForNotification )( 
            ISearchCatalogManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszView,
            /* [in] */ __RPC__in_opt ISearchViewChangedSink *pViewChangedSink,
            /* [out] */ __RPC__out DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemsChangedSink )( 
            ISearchCatalogManager * This,
            /* [in] */ __RPC__in_opt ISearchNotifyInlineSite *pISearchNotifyInlineSite,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppv,
            /* [out] */ __RPC__out GUID *pGUIDCatalogResetSignature,
            /* [out] */ __RPC__out GUID *pGUIDCheckPointSignature,
            /* [out] */ __RPC__out DWORD *pdwLastCheckPointNumber);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterViewForNotification )( 
            ISearchCatalogManager * This,
            /* [in] */ DWORD dwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *SetExtensionClusion )( 
            ISearchCatalogManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszExtension,
            /* [in] */ BOOL fExclude);
        
        HRESULT ( STDMETHODCALLTYPE *EnumerateExcludedExtensions )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumString **ppExtensions);
        
        HRESULT ( STDMETHODCALLTYPE *GetQueryHelper )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__deref_out_opt ISearchQueryHelper **ppSearchQueryHelper);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiacriticSensitivity )( 
            ISearchCatalogManager * This,
            /* [in] */ BOOL fDiacriticSensitive);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiacriticSensitivity )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__out BOOL *pfDiacriticSensitive);
        
        HRESULT ( STDMETHODCALLTYPE *GetCrawlScopeManager )( 
            ISearchCatalogManager * This,
            /* [retval][out] */ __RPC__deref_out_opt ISearchCrawlScopeManager **ppCrawlScopeManager);
        
        END_INTERFACE
    } ISearchCatalogManagerVtbl;

    interface ISearchCatalogManager
    {
        CONST_VTBL struct ISearchCatalogManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchCatalogManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchCatalogManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchCatalogManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchCatalogManager_get_Name(This,pszName)	\
    ( (This)->lpVtbl -> get_Name(This,pszName) ) 

#define ISearchCatalogManager_GetParameter(This,pszName,ppValue)	\
    ( (This)->lpVtbl -> GetParameter(This,pszName,ppValue) ) 

#define ISearchCatalogManager_SetParameter(This,pszName,pValue)	\
    ( (This)->lpVtbl -> SetParameter(This,pszName,pValue) ) 

#define ISearchCatalogManager_GetCatalogStatus(This,pStatus,pPausedReason)	\
    ( (This)->lpVtbl -> GetCatalogStatus(This,pStatus,pPausedReason) ) 

#define ISearchCatalogManager_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define ISearchCatalogManager_Reindex(This)	\
    ( (This)->lpVtbl -> Reindex(This) ) 

#define ISearchCatalogManager_ReindexMatchingURLs(This,pszPattern)	\
    ( (This)->lpVtbl -> ReindexMatchingURLs(This,pszPattern) ) 

#define ISearchCatalogManager_ReindexSearchRoot(This,pszRootURL)	\
    ( (This)->lpVtbl -> ReindexSearchRoot(This,pszRootURL) ) 

#define ISearchCatalogManager_put_ConnectTimeout(This,dwConnectTimeout)	\
    ( (This)->lpVtbl -> put_ConnectTimeout(This,dwConnectTimeout) ) 

#define ISearchCatalogManager_get_ConnectTimeout(This,pdwConnectTimeout)	\
    ( (This)->lpVtbl -> get_ConnectTimeout(This,pdwConnectTimeout) ) 

#define ISearchCatalogManager_put_DataTimeout(This,dwDataTimeout)	\
    ( (This)->lpVtbl -> put_DataTimeout(This,dwDataTimeout) ) 

#define ISearchCatalogManager_get_DataTimeout(This,pdwDataTimeout)	\
    ( (This)->lpVtbl -> get_DataTimeout(This,pdwDataTimeout) ) 

#define ISearchCatalogManager_NumberOfItems(This,plCount)	\
    ( (This)->lpVtbl -> NumberOfItems(This,plCount) ) 

#define ISearchCatalogManager_NumberOfItemsToIndex(This,plIncrementalCount,plNotificationQueue,plHighPriorityQueue)	\
    ( (This)->lpVtbl -> NumberOfItemsToIndex(This,plIncrementalCount,plNotificationQueue,plHighPriorityQueue) ) 

#define ISearchCatalogManager_URLBeingIndexed(This,pszUrl)	\
    ( (This)->lpVtbl -> URLBeingIndexed(This,pszUrl) ) 

#define ISearchCatalogManager_GetURLIndexingState(This,pszURL,pdwState)	\
    ( (This)->lpVtbl -> GetURLIndexingState(This,pszURL,pdwState) ) 

#define ISearchCatalogManager_GetPersistentItemsChangedSink(This,ppISearchPersistentItemsChangedSink)	\
    ( (This)->lpVtbl -> GetPersistentItemsChangedSink(This,ppISearchPersistentItemsChangedSink) ) 

#define ISearchCatalogManager_RegisterViewForNotification(This,pszView,pViewChangedSink,pdwCookie)	\
    ( (This)->lpVtbl -> RegisterViewForNotification(This,pszView,pViewChangedSink,pdwCookie) ) 

#define ISearchCatalogManager_GetItemsChangedSink(This,pISearchNotifyInlineSite,riid,ppv,pGUIDCatalogResetSignature,pGUIDCheckPointSignature,pdwLastCheckPointNumber)	\
    ( (This)->lpVtbl -> GetItemsChangedSink(This,pISearchNotifyInlineSite,riid,ppv,pGUIDCatalogResetSignature,pGUIDCheckPointSignature,pdwLastCheckPointNumber) ) 

#define ISearchCatalogManager_UnregisterViewForNotification(This,dwCookie)	\
    ( (This)->lpVtbl -> UnregisterViewForNotification(This,dwCookie) ) 

#define ISearchCatalogManager_SetExtensionClusion(This,pszExtension,fExclude)	\
    ( (This)->lpVtbl -> SetExtensionClusion(This,pszExtension,fExclude) ) 

#define ISearchCatalogManager_EnumerateExcludedExtensions(This,ppExtensions)	\
    ( (This)->lpVtbl -> EnumerateExcludedExtensions(This,ppExtensions) ) 

#define ISearchCatalogManager_GetQueryHelper(This,ppSearchQueryHelper)	\
    ( (This)->lpVtbl -> GetQueryHelper(This,ppSearchQueryHelper) ) 

#define ISearchCatalogManager_put_DiacriticSensitivity(This,fDiacriticSensitive)	\
    ( (This)->lpVtbl -> put_DiacriticSensitivity(This,fDiacriticSensitive) ) 

#define ISearchCatalogManager_get_DiacriticSensitivity(This,pfDiacriticSensitive)	\
    ( (This)->lpVtbl -> get_DiacriticSensitivity(This,pfDiacriticSensitive) ) 

#define ISearchCatalogManager_GetCrawlScopeManager(This,ppCrawlScopeManager)	\
    ( (This)->lpVtbl -> GetCrawlScopeManager(This,ppCrawlScopeManager) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchCatalogManager_INTERFACE_DEFINED__ */


#ifndef __ISearchQueryHelper_INTERFACE_DEFINED__
#define __ISearchQueryHelper_INTERFACE_DEFINED__

/* interface ISearchQueryHelper */
/* [unique][uuid][object] */ 

typedef 
enum _SEARCH_TERM_EXPANSION
    {	SEARCH_TERM_NO_EXPANSION	= 0,
	SEARCH_TERM_PREFIX_ALL	= ( SEARCH_TERM_NO_EXPANSION + 1 ) ,
	SEARCH_TERM_STEM_ALL	= ( SEARCH_TERM_PREFIX_ALL + 1 ) 
    } 	SEARCH_TERM_EXPANSION;

typedef 
enum _SEARCH_QUERY_SYNTAX
    {	SEARCH_NO_QUERY_SYNTAX	= 0,
	SEARCH_ADVANCED_QUERY_SYNTAX	= ( SEARCH_NO_QUERY_SYNTAX + 1 ) ,
	SEARCH_NATURAL_QUERY_SYNTAX	= ( SEARCH_ADVANCED_QUERY_SYNTAX + 1 ) 
    } 	SEARCH_QUERY_SYNTAX;

typedef struct _SEARCH_COLUMN_PROPERTIES
    {
    PROPVARIANT Value;
    LCID lcid;
    } 	SEARCH_COLUMN_PROPERTIES;


EXTERN_C const IID IID_ISearchQueryHelper;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef63")
    ISearchQueryHelper : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ConnectionString( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *pszConnectionString) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QueryContentLocale( 
            /* [in] */ LCID lcid) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QueryContentLocale( 
            /* [retval][out] */ __RPC__out LCID *plcid) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QueryKeywordLocale( 
            /* [in] */ LCID lcid) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QueryKeywordLocale( 
            /* [retval][out] */ __RPC__out LCID *plcid) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QueryTermExpansion( 
            /* [in] */ SEARCH_TERM_EXPANSION expandTerms) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QueryTermExpansion( 
            /* [retval][out] */ __RPC__out SEARCH_TERM_EXPANSION *pExpandTerms) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuerySyntax( 
            /* [in] */ SEARCH_QUERY_SYNTAX querySyntax) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuerySyntax( 
            /* [retval][out] */ __RPC__out SEARCH_QUERY_SYNTAX *pQuerySyntax) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QueryContentProperties( 
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszContentProperties) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QueryContentProperties( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszContentProperties) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuerySelectColumns( 
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszSelectColumns) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuerySelectColumns( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszSelectColumns) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QueryWhereRestrictions( 
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszRestrictions) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QueryWhereRestrictions( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszRestrictions) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuerySorting( 
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszSorting) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuerySorting( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszSorting) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GenerateSQLFromUserQuery( 
            /* [string][in] */ __RPC__in LPCWSTR pszQuery,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszSQL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteProperties( 
            /* [in] */ ITEMID itemID,
            /* [in] */ DWORD dwNumberOfColumns,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfColumns) PROPERTYKEY *pColumns,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfColumns) SEARCH_COLUMN_PROPERTIES *pValues,
            /* [unique][in] */ __RPC__in_opt FILETIME *pftGatherModifiedTime) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QueryMaxResults( 
            /* [in] */ LONG cMaxResults) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QueryMaxResults( 
            /* [retval][out] */ __RPC__out LONG *pcMaxResults) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchQueryHelperVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchQueryHelper * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchQueryHelper * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchQueryHelper * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionString )( 
            ISearchQueryHelper * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *pszConnectionString);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QueryContentLocale )( 
            ISearchQueryHelper * This,
            /* [in] */ LCID lcid);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QueryContentLocale )( 
            ISearchQueryHelper * This,
            /* [retval][out] */ __RPC__out LCID *plcid);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QueryKeywordLocale )( 
            ISearchQueryHelper * This,
            /* [in] */ LCID lcid);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QueryKeywordLocale )( 
            ISearchQueryHelper * This,
            /* [retval][out] */ __RPC__out LCID *plcid);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QueryTermExpansion )( 
            ISearchQueryHelper * This,
            /* [in] */ SEARCH_TERM_EXPANSION expandTerms);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QueryTermExpansion )( 
            ISearchQueryHelper * This,
            /* [retval][out] */ __RPC__out SEARCH_TERM_EXPANSION *pExpandTerms);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuerySyntax )( 
            ISearchQueryHelper * This,
            /* [in] */ SEARCH_QUERY_SYNTAX querySyntax);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuerySyntax )( 
            ISearchQueryHelper * This,
            /* [retval][out] */ __RPC__out SEARCH_QUERY_SYNTAX *pQuerySyntax);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QueryContentProperties )( 
            ISearchQueryHelper * This,
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszContentProperties);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QueryContentProperties )( 
            ISearchQueryHelper * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszContentProperties);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuerySelectColumns )( 
            ISearchQueryHelper * This,
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszSelectColumns);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuerySelectColumns )( 
            ISearchQueryHelper * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszSelectColumns);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QueryWhereRestrictions )( 
            ISearchQueryHelper * This,
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszRestrictions);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QueryWhereRestrictions )( 
            ISearchQueryHelper * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszRestrictions);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuerySorting )( 
            ISearchQueryHelper * This,
            /* [unique][string][in] */ __RPC__in_opt LPCWSTR pszSorting);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuerySorting )( 
            ISearchQueryHelper * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszSorting);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateSQLFromUserQuery )( 
            ISearchQueryHelper * This,
            /* [string][in] */ __RPC__in LPCWSTR pszQuery,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszSQL);
        
        HRESULT ( STDMETHODCALLTYPE *WriteProperties )( 
            ISearchQueryHelper * This,
            /* [in] */ ITEMID itemID,
            /* [in] */ DWORD dwNumberOfColumns,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfColumns) PROPERTYKEY *pColumns,
            /* [size_is][in] */ __RPC__in_ecount_full(dwNumberOfColumns) SEARCH_COLUMN_PROPERTIES *pValues,
            /* [unique][in] */ __RPC__in_opt FILETIME *pftGatherModifiedTime);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QueryMaxResults )( 
            ISearchQueryHelper * This,
            /* [in] */ LONG cMaxResults);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QueryMaxResults )( 
            ISearchQueryHelper * This,
            /* [retval][out] */ __RPC__out LONG *pcMaxResults);
        
        END_INTERFACE
    } ISearchQueryHelperVtbl;

    interface ISearchQueryHelper
    {
        CONST_VTBL struct ISearchQueryHelperVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchQueryHelper_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchQueryHelper_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchQueryHelper_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchQueryHelper_get_ConnectionString(This,pszConnectionString)	\
    ( (This)->lpVtbl -> get_ConnectionString(This,pszConnectionString) ) 

#define ISearchQueryHelper_put_QueryContentLocale(This,lcid)	\
    ( (This)->lpVtbl -> put_QueryContentLocale(This,lcid) ) 

#define ISearchQueryHelper_get_QueryContentLocale(This,plcid)	\
    ( (This)->lpVtbl -> get_QueryContentLocale(This,plcid) ) 

#define ISearchQueryHelper_put_QueryKeywordLocale(This,lcid)	\
    ( (This)->lpVtbl -> put_QueryKeywordLocale(This,lcid) ) 

#define ISearchQueryHelper_get_QueryKeywordLocale(This,plcid)	\
    ( (This)->lpVtbl -> get_QueryKeywordLocale(This,plcid) ) 

#define ISearchQueryHelper_put_QueryTermExpansion(This,expandTerms)	\
    ( (This)->lpVtbl -> put_QueryTermExpansion(This,expandTerms) ) 

#define ISearchQueryHelper_get_QueryTermExpansion(This,pExpandTerms)	\
    ( (This)->lpVtbl -> get_QueryTermExpansion(This,pExpandTerms) ) 

#define ISearchQueryHelper_put_QuerySyntax(This,querySyntax)	\
    ( (This)->lpVtbl -> put_QuerySyntax(This,querySyntax) ) 

#define ISearchQueryHelper_get_QuerySyntax(This,pQuerySyntax)	\
    ( (This)->lpVtbl -> get_QuerySyntax(This,pQuerySyntax) ) 

#define ISearchQueryHelper_put_QueryContentProperties(This,pszContentProperties)	\
    ( (This)->lpVtbl -> put_QueryContentProperties(This,pszContentProperties) ) 

#define ISearchQueryHelper_get_QueryContentProperties(This,ppszContentProperties)	\
    ( (This)->lpVtbl -> get_QueryContentProperties(This,ppszContentProperties) ) 

#define ISearchQueryHelper_put_QuerySelectColumns(This,pszSelectColumns)	\
    ( (This)->lpVtbl -> put_QuerySelectColumns(This,pszSelectColumns) ) 

#define ISearchQueryHelper_get_QuerySelectColumns(This,ppszSelectColumns)	\
    ( (This)->lpVtbl -> get_QuerySelectColumns(This,ppszSelectColumns) ) 

#define ISearchQueryHelper_put_QueryWhereRestrictions(This,pszRestrictions)	\
    ( (This)->lpVtbl -> put_QueryWhereRestrictions(This,pszRestrictions) ) 

#define ISearchQueryHelper_get_QueryWhereRestrictions(This,ppszRestrictions)	\
    ( (This)->lpVtbl -> get_QueryWhereRestrictions(This,ppszRestrictions) ) 

#define ISearchQueryHelper_put_QuerySorting(This,pszSorting)	\
    ( (This)->lpVtbl -> put_QuerySorting(This,pszSorting) ) 

#define ISearchQueryHelper_get_QuerySorting(This,ppszSorting)	\
    ( (This)->lpVtbl -> get_QuerySorting(This,ppszSorting) ) 

#define ISearchQueryHelper_GenerateSQLFromUserQuery(This,pszQuery,ppszSQL)	\
    ( (This)->lpVtbl -> GenerateSQLFromUserQuery(This,pszQuery,ppszSQL) ) 

#define ISearchQueryHelper_WriteProperties(This,itemID,dwNumberOfColumns,pColumns,pValues,pftGatherModifiedTime)	\
    ( (This)->lpVtbl -> WriteProperties(This,itemID,dwNumberOfColumns,pColumns,pValues,pftGatherModifiedTime) ) 

#define ISearchQueryHelper_put_QueryMaxResults(This,cMaxResults)	\
    ( (This)->lpVtbl -> put_QueryMaxResults(This,cMaxResults) ) 

#define ISearchQueryHelper_get_QueryMaxResults(This,pcMaxResults)	\
    ( (This)->lpVtbl -> get_QueryMaxResults(This,pcMaxResults) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchQueryHelper_INTERFACE_DEFINED__ */


#ifndef __ISearchManager_INTERFACE_DEFINED__
#define __ISearchManager_INTERFACE_DEFINED__

/* interface ISearchManager */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISearchManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab310581-ac80-11d1-8df3-00c04fb6ef69")
    ISearchManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetIndexerVersionStr( 
            /* [string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszVersionString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIndexerVersion( 
            /* [out] */ __RPC__out DWORD *pdwMajor,
            /* [out] */ __RPC__out DWORD *pdwMinor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParameter( 
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [retval][out] */ __RPC__deref_out_opt PROPVARIANT **ppValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetParameter( 
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [in] */ __RPC__in const PROPVARIANT *pValue) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProxyName( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszProxyName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BypassList( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszBypassList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProxy( 
            /* [in] */ PROXY_ACCESS sUseProxy,
            /* [in] */ BOOL fLocalByPassProxy,
            /* [in] */ DWORD dwPortNumber,
            /* [string][in] */ __RPC__in LPCWSTR pszProxyName,
            /* [string][in] */ __RPC__in LPCWSTR pszByPassList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCatalog( 
            /* [string][in] */ __RPC__in LPCWSTR pszCatalog,
            /* [retval][out] */ __RPC__deref_out_opt ISearchCatalogManager **ppCatalogManager) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserAgent( 
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszUserAgent) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UserAgent( 
            /* [string][in] */ __RPC__in LPCWSTR pszUserAgent) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseProxy( 
            /* [retval][out] */ __RPC__out PROXY_ACCESS *pUseProxy) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocalBypass( 
            /* [retval][out] */ __RPC__out BOOL *pfLocalBypass) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PortNumber( 
            /* [retval][out] */ __RPC__out DWORD *pdwPortNumber) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIndexerVersionStr )( 
            ISearchManager * This,
            /* [string][out] */ __RPC__deref_out_opt_string LPWSTR *ppszVersionString);
        
        HRESULT ( STDMETHODCALLTYPE *GetIndexerVersion )( 
            ISearchManager * This,
            /* [out] */ __RPC__out DWORD *pdwMajor,
            /* [out] */ __RPC__out DWORD *pdwMinor);
        
        HRESULT ( STDMETHODCALLTYPE *GetParameter )( 
            ISearchManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [retval][out] */ __RPC__deref_out_opt PROPVARIANT **ppValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetParameter )( 
            ISearchManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszName,
            /* [in] */ __RPC__in const PROPVARIANT *pValue);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProxyName )( 
            ISearchManager * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszProxyName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BypassList )( 
            ISearchManager * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszBypassList);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxy )( 
            ISearchManager * This,
            /* [in] */ PROXY_ACCESS sUseProxy,
            /* [in] */ BOOL fLocalByPassProxy,
            /* [in] */ DWORD dwPortNumber,
            /* [string][in] */ __RPC__in LPCWSTR pszProxyName,
            /* [string][in] */ __RPC__in LPCWSTR pszByPassList);
        
        HRESULT ( STDMETHODCALLTYPE *GetCatalog )( 
            ISearchManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszCatalog,
            /* [retval][out] */ __RPC__deref_out_opt ISearchCatalogManager **ppCatalogManager);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserAgent )( 
            ISearchManager * This,
            /* [string][retval][out] */ __RPC__deref_out_opt_string LPWSTR *ppszUserAgent);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserAgent )( 
            ISearchManager * This,
            /* [string][in] */ __RPC__in LPCWSTR pszUserAgent);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseProxy )( 
            ISearchManager * This,
            /* [retval][out] */ __RPC__out PROXY_ACCESS *pUseProxy);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalBypass )( 
            ISearchManager * This,
            /* [retval][out] */ __RPC__out BOOL *pfLocalBypass);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PortNumber )( 
            ISearchManager * This,
            /* [retval][out] */ __RPC__out DWORD *pdwPortNumber);
        
        END_INTERFACE
    } ISearchManagerVtbl;

    interface ISearchManager
    {
        CONST_VTBL struct ISearchManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchManager_GetIndexerVersionStr(This,ppszVersionString)	\
    ( (This)->lpVtbl -> GetIndexerVersionStr(This,ppszVersionString) ) 

#define ISearchManager_GetIndexerVersion(This,pdwMajor,pdwMinor)	\
    ( (This)->lpVtbl -> GetIndexerVersion(This,pdwMajor,pdwMinor) ) 

#define ISearchManager_GetParameter(This,pszName,ppValue)	\
    ( (This)->lpVtbl -> GetParameter(This,pszName,ppValue) ) 

#define ISearchManager_SetParameter(This,pszName,pValue)	\
    ( (This)->lpVtbl -> SetParameter(This,pszName,pValue) ) 

#define ISearchManager_get_ProxyName(This,ppszProxyName)	\
    ( (This)->lpVtbl -> get_ProxyName(This,ppszProxyName) ) 

#define ISearchManager_get_BypassList(This,ppszBypassList)	\
    ( (This)->lpVtbl -> get_BypassList(This,ppszBypassList) ) 

#define ISearchManager_SetProxy(This,sUseProxy,fLocalByPassProxy,dwPortNumber,pszProxyName,pszByPassList)	\
    ( (This)->lpVtbl -> SetProxy(This,sUseProxy,fLocalByPassProxy,dwPortNumber,pszProxyName,pszByPassList) ) 

#define ISearchManager_GetCatalog(This,pszCatalog,ppCatalogManager)	\
    ( (This)->lpVtbl -> GetCatalog(This,pszCatalog,ppCatalogManager) ) 

#define ISearchManager_get_UserAgent(This,ppszUserAgent)	\
    ( (This)->lpVtbl -> get_UserAgent(This,ppszUserAgent) ) 

#define ISearchManager_put_UserAgent(This,pszUserAgent)	\
    ( (This)->lpVtbl -> put_UserAgent(This,pszUserAgent) ) 

#define ISearchManager_get_UseProxy(This,pUseProxy)	\
    ( (This)->lpVtbl -> get_UseProxy(This,pUseProxy) ) 

#define ISearchManager_get_LocalBypass(This,pfLocalBypass)	\
    ( (This)->lpVtbl -> get_LocalBypass(This,pfLocalBypass) ) 

#define ISearchManager_get_PortNumber(This,pdwPortNumber)	\
    ( (This)->lpVtbl -> get_PortNumber(This,pdwPortNumber) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_searchapi_0000_0023 */
/* [local] */ 

EXTERN_C const CLSID CLSID_CSearchLanguageSupport;
#ifdef __cplusplus
class DECLSPEC_UUID("6A68CC80-4337-4dbc-BD27-FBFB1053820B")
CSearchLanguageSupport;
#endif


extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_searchapi_0000_0023_v0_0_s_ifspec;

#ifndef __ISearchLanguageSupport_INTERFACE_DEFINED__
#define __ISearchLanguageSupport_INTERFACE_DEFINED__

/* interface ISearchLanguageSupport */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISearchLanguageSupport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("24C3CBAA-EBC1-491a-9EF1-9F6D8DEB1B8F")
    ISearchLanguageSupport : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetDiacriticSensitivity( 
            /* [in] */ BOOL fDiacriticSensitive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDiacriticSensitivity( 
            /* [retval][out] */ __RPC__out BOOL *pfDiacriticSensitive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadWordBreaker( 
            /* [in] */ LCID lcid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppWordBreaker,
            /* [out] */ __RPC__out LCID *pLcidUsed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadStemmer( 
            /* [in] */ LCID lcid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppStemmer,
            /* [out] */ __RPC__out LCID *pLcidUsed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsPrefixNormalized( 
            /* [size_is][in] */ __RPC__in_ecount_full(cwcQueryToken) LPCWSTR pwcsQueryToken,
            /* [in] */ ULONG cwcQueryToken,
            /* [size_is][in] */ __RPC__in_ecount_full(cwcDocumentToken) LPCWSTR pwcsDocumentToken,
            /* [in] */ ULONG cwcDocumentToken,
            /* [out] */ __RPC__out ULONG *pulPrefixLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchLanguageSupportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISearchLanguageSupport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISearchLanguageSupport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISearchLanguageSupport * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetDiacriticSensitivity )( 
            ISearchLanguageSupport * This,
            /* [in] */ BOOL fDiacriticSensitive);
        
        HRESULT ( STDMETHODCALLTYPE *GetDiacriticSensitivity )( 
            ISearchLanguageSupport * This,
            /* [retval][out] */ __RPC__out BOOL *pfDiacriticSensitive);
        
        HRESULT ( STDMETHODCALLTYPE *LoadWordBreaker )( 
            ISearchLanguageSupport * This,
            /* [in] */ LCID lcid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppWordBreaker,
            /* [out] */ __RPC__out LCID *pLcidUsed);
        
        HRESULT ( STDMETHODCALLTYPE *LoadStemmer )( 
            ISearchLanguageSupport * This,
            /* [in] */ LCID lcid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppStemmer,
            /* [out] */ __RPC__out LCID *pLcidUsed);
        
        HRESULT ( STDMETHODCALLTYPE *IsPrefixNormalized )( 
            ISearchLanguageSupport * This,
            /* [size_is][in] */ __RPC__in_ecount_full(cwcQueryToken) LPCWSTR pwcsQueryToken,
            /* [in] */ ULONG cwcQueryToken,
            /* [size_is][in] */ __RPC__in_ecount_full(cwcDocumentToken) LPCWSTR pwcsDocumentToken,
            /* [in] */ ULONG cwcDocumentToken,
            /* [out] */ __RPC__out ULONG *pulPrefixLength);
        
        END_INTERFACE
    } ISearchLanguageSupportVtbl;

    interface ISearchLanguageSupport
    {
        CONST_VTBL struct ISearchLanguageSupportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchLanguageSupport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchLanguageSupport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchLanguageSupport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchLanguageSupport_SetDiacriticSensitivity(This,fDiacriticSensitive)	\
    ( (This)->lpVtbl -> SetDiacriticSensitivity(This,fDiacriticSensitive) ) 

#define ISearchLanguageSupport_GetDiacriticSensitivity(This,pfDiacriticSensitive)	\
    ( (This)->lpVtbl -> GetDiacriticSensitivity(This,pfDiacriticSensitive) ) 

#define ISearchLanguageSupport_LoadWordBreaker(This,lcid,riid,ppWordBreaker,pLcidUsed)	\
    ( (This)->lpVtbl -> LoadWordBreaker(This,lcid,riid,ppWordBreaker,pLcidUsed) ) 

#define ISearchLanguageSupport_LoadStemmer(This,lcid,riid,ppStemmer,pLcidUsed)	\
    ( (This)->lpVtbl -> LoadStemmer(This,lcid,riid,ppStemmer,pLcidUsed) ) 

#define ISearchLanguageSupport_IsPrefixNormalized(This,pwcsQueryToken,cwcQueryToken,pwcsDocumentToken,cwcDocumentToken,pulPrefixLength)	\
    ( (This)->lpVtbl -> IsPrefixNormalized(This,pwcsQueryToken,cwcQueryToken,pwcsDocumentToken,cwcDocumentToken,pulPrefixLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchLanguageSupport_INTERFACE_DEFINED__ */



#ifndef __SearchAPILib_LIBRARY_DEFINED__
#define __SearchAPILib_LIBRARY_DEFINED__

/* library SearchAPILib */
/* [version][uuid] */ 


EXTERN_C const IID LIBID_SearchAPILib;

EXTERN_C const CLSID CLSID_CSearchManager;

#ifdef __cplusplus

class DECLSPEC_UUID("7D096C5F-AC08-4f1f-BEB7-5C22C517CE39")
CSearchManager;
#endif

EXTERN_C const CLSID CLSID_CSearchCatalogManager;

#ifdef __cplusplus

class DECLSPEC_UUID("AAB49DD5-AD0B-40AE-B654-AE8976BF6BD2")
CSearchCatalogManager;
#endif

EXTERN_C const CLSID CLSID_CSearchQueryHelper;

#ifdef __cplusplus

class DECLSPEC_UUID("B271E955-09E1-42E1-9B95-5994A534B613")
CSearchQueryHelper;
#endif

EXTERN_C const CLSID CLSID_CSearchItemsChangedSink;

#ifdef __cplusplus

class DECLSPEC_UUID("A5270F6C-19EC-4E17-9EA1-A7074276B9B9")
CSearchItemsChangedSink;
#endif

EXTERN_C const CLSID CLSID_CSearchCrawlScopeManager;

#ifdef __cplusplus

class DECLSPEC_UUID("321069D2-2D7A-4AA1-9DC3-BA97CDF9AFB4")
CSearchCrawlScopeManager;
#endif

EXTERN_C const CLSID CLSID_CEnumSearchRoots;

#ifdef __cplusplus

class DECLSPEC_UUID("C188CDBA-53E5-4767-9FFB-FAFBD8017DF0")
CEnumSearchRoots;
#endif

EXTERN_C const CLSID CLSID_CEnumSearchScopeRules;

#ifdef __cplusplus

class DECLSPEC_UUID("3379F9F7-F805-4827-9CF6-03DB41F297DA")
CEnumSearchScopeRules;
#endif

EXTERN_C const CLSID CLSID_CSearchRoot;

#ifdef __cplusplus

class DECLSPEC_UUID("30766BD2-EA1C-4F28-BF27-0B44E2F68DB7")
CSearchRoot;
#endif

EXTERN_C const CLSID CLSID_CSearchScopeRule;

#ifdef __cplusplus

class DECLSPEC_UUID("E63DE750-3BD7-4BE5-9C84-6B4281988C44")
CSearchScopeRule;
#endif

EXTERN_C const CLSID CLSID_CSearchPersistentItemsChangedSink;

#ifdef __cplusplus

class DECLSPEC_UUID("D0F268B5-EA7A-4B35-BF2F-E1A091B80D51")
CSearchPersistentItemsChangedSink;
#endif
#endif /* __SearchAPILib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     unsigned long *, LPSAFEARRAY * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\sdoias.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for sdoias.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __sdoias_h__
#define __sdoias_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ISdoMachine_FWD_DEFINED__
#define __ISdoMachine_FWD_DEFINED__
typedef interface ISdoMachine ISdoMachine;
#endif 	/* __ISdoMachine_FWD_DEFINED__ */


#ifndef __ISdoServiceControl_FWD_DEFINED__
#define __ISdoServiceControl_FWD_DEFINED__
typedef interface ISdoServiceControl ISdoServiceControl;
#endif 	/* __ISdoServiceControl_FWD_DEFINED__ */


#ifndef __ISdo_FWD_DEFINED__
#define __ISdo_FWD_DEFINED__
typedef interface ISdo ISdo;
#endif 	/* __ISdo_FWD_DEFINED__ */


#ifndef __ISdoCollection_FWD_DEFINED__
#define __ISdoCollection_FWD_DEFINED__
typedef interface ISdoCollection ISdoCollection;
#endif 	/* __ISdoCollection_FWD_DEFINED__ */


#ifndef __ISdoDictionaryOld_FWD_DEFINED__
#define __ISdoDictionaryOld_FWD_DEFINED__
typedef interface ISdoDictionaryOld ISdoDictionaryOld;
#endif 	/* __ISdoDictionaryOld_FWD_DEFINED__ */


#ifndef __SdoMachine_FWD_DEFINED__
#define __SdoMachine_FWD_DEFINED__

#ifdef __cplusplus
typedef class SdoMachine SdoMachine;
#else
typedef struct SdoMachine SdoMachine;
#endif /* __cplusplus */

#endif 	/* __SdoMachine_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __SDOIASLib_LIBRARY_DEFINED__
#define __SDOIASLib_LIBRARY_DEFINED__

/* library SDOIASLib */
/* [helpstring][version][uuid] */ 

typedef /* [public] */ 
enum _ATTRIBUTEID
    {	ATTRIBUTE_UNDEFINED	= 0,
	ATTRIBUTE_MIN_VALUE	= 1,
	RADIUS_ATTRIBUTE_USER_NAME	= ATTRIBUTE_MIN_VALUE,
	RADIUS_ATTRIBUTE_USER_PASSWORD	= ( RADIUS_ATTRIBUTE_USER_NAME + 1 ) ,
	RADIUS_ATTRIBUTE_CHAP_PASSWORD	= ( RADIUS_ATTRIBUTE_USER_PASSWORD + 1 ) ,
	RADIUS_ATTRIBUTE_NAS_IP_ADDRESS	= ( RADIUS_ATTRIBUTE_CHAP_PASSWORD + 1 ) ,
	RADIUS_ATTRIBUTE_NAS_PORT	= ( RADIUS_ATTRIBUTE_NAS_IP_ADDRESS + 1 ) ,
	RADIUS_ATTRIBUTE_SERVICE_TYPE	= ( RADIUS_ATTRIBUTE_NAS_PORT + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_PROTOCOL	= ( RADIUS_ATTRIBUTE_SERVICE_TYPE + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS	= ( RADIUS_ATTRIBUTE_FRAMED_PROTOCOL + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK	= ( RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_ROUTING	= 10,
	RADIUS_ATTRIBUTE_FILTER_ID	= ( RADIUS_ATTRIBUTE_FRAMED_ROUTING + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_MTU	= ( RADIUS_ATTRIBUTE_FILTER_ID + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_COMPRESSION	= ( RADIUS_ATTRIBUTE_FRAMED_MTU + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_IP_HOST	= ( RADIUS_ATTRIBUTE_FRAMED_COMPRESSION + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_SERVICE	= ( RADIUS_ATTRIBUTE_LOGIN_IP_HOST + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_TCP_PORT	= ( RADIUS_ATTRIBUTE_LOGIN_SERVICE + 1 ) ,
	RADIUS_ATTRIBUTE_UNASSIGNED1	= ( RADIUS_ATTRIBUTE_LOGIN_TCP_PORT + 1 ) ,
	RADIUS_ATTRIBUTE_REPLY_MESSAGE	= ( RADIUS_ATTRIBUTE_UNASSIGNED1 + 1 ) ,
	RADIUS_ATTRIBUTE_CALLBACK_NUMBER	= ( RADIUS_ATTRIBUTE_REPLY_MESSAGE + 1 ) ,
	RADIUS_ATTRIBUTE_CALLBACK_ID	= 20,
	RADIUS_ATTRIBUTE_UNASSIGNED2	= ( RADIUS_ATTRIBUTE_CALLBACK_ID + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_ROUTE	= ( RADIUS_ATTRIBUTE_UNASSIGNED2 + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK	= ( RADIUS_ATTRIBUTE_FRAMED_ROUTE + 1 ) ,
	RADIUS_ATTRIBUTE_STATE	= ( RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK + 1 ) ,
	RADIUS_ATTRIBUTE_CLASS	= ( RADIUS_ATTRIBUTE_STATE + 1 ) ,
	RADIUS_ATTRIBUTE_VENDOR_SPECIFIC	= ( RADIUS_ATTRIBUTE_CLASS + 1 ) ,
	RADIUS_ATTRIBUTE_SESSION_TIMEOUT	= ( RADIUS_ATTRIBUTE_VENDOR_SPECIFIC + 1 ) ,
	RADIUS_ATTRIBUTE_IDLE_TIMEOUT	= ( RADIUS_ATTRIBUTE_SESSION_TIMEOUT + 1 ) ,
	RADIUS_ATTRIBUTE_TERMINATION_ACTION	= ( RADIUS_ATTRIBUTE_IDLE_TIMEOUT + 1 ) ,
	RADIUS_ATTRIBUTE_CALLED_STATION_ID	= 30,
	RADIUS_ATTRIBUTE_CALLING_STATION_ID	= ( RADIUS_ATTRIBUTE_CALLED_STATION_ID + 1 ) ,
	RADIUS_ATTRIBUTE_NAS_IDENTIFIER	= ( RADIUS_ATTRIBUTE_CALLING_STATION_ID + 1 ) ,
	RADIUS_ATTRIBUTE_PROXY_STATE	= ( RADIUS_ATTRIBUTE_NAS_IDENTIFIER + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE	= ( RADIUS_ATTRIBUTE_PROXY_STATE + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_LAT_NODE	= ( RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP	= ( RADIUS_ATTRIBUTE_LOGIN_LAT_NODE + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK	= ( RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET	= ( RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE	= ( RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE	= 40,
	RADIUS_ATTRIBUTE_ACCT_DELAY_TIME	= ( RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS	= ( RADIUS_ATTRIBUTE_ACCT_DELAY_TIME + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS	= ( RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_SESSION_ID	= ( RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_AUTHENTIC	= ( RADIUS_ATTRIBUTE_ACCT_SESSION_ID + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_SESSION_TIME	= ( RADIUS_ATTRIBUTE_ACCT_AUTHENTIC + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS	= ( RADIUS_ATTRIBUTE_ACCT_SESSION_TIME + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS	= ( RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE	= ( RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID	= 50,
	RADIUS_ATTRIBUTE_ACCT_LINK_COUNT	= 51,
	RADIUS_ATTRIBUTE_CHAP_CHALLENGE	= 60,
	RADIUS_ATTRIBUTE_NAS_PORT_TYPE	= ( RADIUS_ATTRIBUTE_CHAP_CHALLENGE + 1 ) ,
	RADIUS_ATTRIBUTE_PORT_LIMIT	= ( RADIUS_ATTRIBUTE_NAS_PORT_TYPE + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_LAT_PORT	= ( RADIUS_ATTRIBUTE_PORT_LIMIT + 1 ) ,
	RADIUS_ATTRIBUTE_TUNNEL_TYPE	= ( RADIUS_ATTRIBUTE_LOGIN_LAT_PORT + 1 ) ,
	RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE	= ( RADIUS_ATTRIBUTE_TUNNEL_TYPE + 1 ) ,
	RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT	= ( RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE + 1 ) ,
	RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT	= ( RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN	= ( RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT + 1 ) ,
	RADIUS_ATTRIBUTE_TUNNEL_PASSWORD	= ( RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN + 1 ) ,
	RADIUS_ATTRIBUTE_ARAP_PASSWORD	= 70,
	RADIUS_ATTRIBUTE_ARAP_FEATURES	= ( RADIUS_ATTRIBUTE_ARAP_PASSWORD + 1 ) ,
	RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS	= ( RADIUS_ATTRIBUTE_ARAP_FEATURES + 1 ) ,
	RADIUS_ATTRIBUTE_ARAP_SECURITY	= ( RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS + 1 ) ,
	RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA	= ( RADIUS_ATTRIBUTE_ARAP_SECURITY + 1 ) ,
	RADIUS_ATTRIBUTE_PASSWORD_RETRY	= ( RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA + 1 ) ,
	RADIUS_ATTRIBUTE_PROMPT	= 76,
	RADIUS_ATTRIBUTE_CONNECT_INFO	= ( RADIUS_ATTRIBUTE_PROMPT + 1 ) ,
	RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN	= ( RADIUS_ATTRIBUTE_CONNECT_INFO + 1 ) ,
	RADIUS_ATTRIBUTE_EAP_MESSAGE	= ( RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN + 1 ) ,
	RADIUS_ATTRIBUTE_SIGNATURE	= 80,
	RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID	= ( RADIUS_ATTRIBUTE_SIGNATURE + 1 ) ,
	RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID	= ( RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID + 1 ) ,
	RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE	= ( RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID + 1 ) ,
	RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE	= ( RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE + 1 ) ,
	RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL	= 85,
	RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS	= 95,
	RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID	= ( RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX	= ( RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID + 1 ) ,
	RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST	= ( RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE	= ( RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST + 1 ) ,
	RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL	= 100,
	IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS	= 0x1000,
	IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER	= ( IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS + 1 ) ,
	IAS_ATTRIBUTE_NP_CALLING_STATION_ID	= ( IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER + 1 ) ,
	IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID	= ( IAS_ATTRIBUTE_NP_CALLING_STATION_ID + 1 ) ,
	IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE	= ( IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID + 1 ) ,
	IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES	= ( IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE + 1 ) ,
	IAS_ATTRIBUTE_NP_TIME_OF_DAY	= ( IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES + 1 ) ,
	IAS_ATTRIBUTE_NP_CALLED_STATION_ID	= ( IAS_ATTRIBUTE_NP_TIME_OF_DAY + 1 ) ,
	IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES	= 0x1008,
	IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE	= ( IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES + 1 ) ,
	IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE	= ( IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE + 1 ) ,
	IAS_ATTRIBUTE_SHARED_SECRET	= ( IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE + 1 ) ,
	IAS_ATTRIBUTE_CLIENT_IP_ADDRESS	= ( IAS_ATTRIBUTE_SHARED_SECRET + 1 ) ,
	IAS_ATTRIBUTE_CLIENT_PACKET_HEADER	= ( IAS_ATTRIBUTE_CLIENT_IP_ADDRESS + 1 ) ,
	IAS_ATTRIBUTE_TOKEN_GROUPS	= ( IAS_ATTRIBUTE_CLIENT_PACKET_HEADER + 1 ) ,
	IAS_ATTRIBUTE_ALLOW_DIALIN	= ( IAS_ATTRIBUTE_TOKEN_GROUPS + 1 ) ,
	IAS_ATTRIBUTE_REQUEST_ID	= 0x1010,
	IAS_ATTRIBUTE_MANIPULATION_TARGET	= ( IAS_ATTRIBUTE_REQUEST_ID + 1 ) ,
	IAS_ATTRIBUTE_MANIPULATION_RULE	= ( IAS_ATTRIBUTE_MANIPULATION_TARGET + 1 ) ,
	IAS_ATTRIBUTE_ORIGINAL_USER_NAME	= ( IAS_ATTRIBUTE_MANIPULATION_RULE + 1 ) ,
	IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE	= ( IAS_ATTRIBUTE_ORIGINAL_USER_NAME + 1 ) ,
	IAS_ATTRIBUTE_CLIENT_UDP_PORT	= ( IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE + 1 ) ,
	MS_ATTRIBUTE_CHAP_CHALLENGE	= ( IAS_ATTRIBUTE_CLIENT_UDP_PORT + 1 ) ,
	MS_ATTRIBUTE_CHAP_RESPONSE	= ( MS_ATTRIBUTE_CHAP_CHALLENGE + 1 ) ,
	MS_ATTRIBUTE_CHAP_DOMAIN	= 0x1018,
	MS_ATTRIBUTE_CHAP_ERROR	= ( MS_ATTRIBUTE_CHAP_DOMAIN + 1 ) ,
	MS_ATTRIBUTE_CHAP_CPW1	= ( MS_ATTRIBUTE_CHAP_ERROR + 1 ) ,
	MS_ATTRIBUTE_CHAP_CPW2	= ( MS_ATTRIBUTE_CHAP_CPW1 + 1 ) ,
	MS_ATTRIBUTE_CHAP_LM_ENC_PW	= ( MS_ATTRIBUTE_CHAP_CPW2 + 1 ) ,
	MS_ATTRIBUTE_CHAP_NT_ENC_PW	= ( MS_ATTRIBUTE_CHAP_LM_ENC_PW + 1 ) ,
	MS_ATTRIBUTE_CHAP_MPPE_KEYS	= ( MS_ATTRIBUTE_CHAP_NT_ENC_PW + 1 ) ,
	IAS_ATTRIBUTE_AUTHENTICATION_TYPE	= ( MS_ATTRIBUTE_CHAP_MPPE_KEYS + 1 ) ,
	IAS_ATTRIBUTE_CLIENT_NAME	= 0x1020,
	IAS_ATTRIBUTE_NT4_ACCOUNT_NAME	= ( IAS_ATTRIBUTE_CLIENT_NAME + 1 ) ,
	IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME	= ( IAS_ATTRIBUTE_NT4_ACCOUNT_NAME + 1 ) ,
	IAS_ATTRIBUTE_NTGROUPS	= ( IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME + 1 ) ,
	IAS_ATTRIBUTE_EAP_FRIENDLY_NAME	= ( IAS_ATTRIBUTE_NTGROUPS + 1 ) ,
	IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE	= ( IAS_ATTRIBUTE_EAP_FRIENDLY_NAME + 1 ) ,
	MS_ATTRIBUTE_ACCT_AUTH_TYPE	= ( IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE + 1 ) ,
	MS_ATTRIBUTE_ACCT_EAP_TYPE	= ( MS_ATTRIBUTE_ACCT_AUTH_TYPE + 1 ) ,
	IAS_ATTRIBUTE_PACKET_TYPE	= 0x1028,
	IAS_ATTRIBUTE_AUTH_PROVIDER_NAME	= ( IAS_ATTRIBUTE_PACKET_TYPE + 1 ) ,
	IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE	= ( IAS_ATTRIBUTE_AUTH_PROVIDER_NAME + 1 ) ,
	IAS_ATTRIBUTE_ACCT_PROVIDER_NAME	= ( IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE + 1 ) ,
	MS_ATTRIBUTE_MPPE_SEND_KEY	= ( IAS_ATTRIBUTE_ACCT_PROVIDER_NAME + 1 ) ,
	MS_ATTRIBUTE_MPPE_RECV_KEY	= ( MS_ATTRIBUTE_MPPE_SEND_KEY + 1 ) ,
	IAS_ATTRIBUTE_REASON_CODE	= ( MS_ATTRIBUTE_MPPE_RECV_KEY + 1 ) ,
	MS_ATTRIBUTE_FILTER	= ( IAS_ATTRIBUTE_REASON_CODE + 1 ) ,
	MS_ATTRIBUTE_CHAP2_RESPONSE	= 0x1030,
	MS_ATTRIBUTE_CHAP2_SUCCESS	= ( MS_ATTRIBUTE_CHAP2_RESPONSE + 1 ) ,
	MS_ATTRIBUTE_CHAP2_CPW	= ( MS_ATTRIBUTE_CHAP2_SUCCESS + 1 ) ,
	MS_ATTRIBUTE_RAS_VENDOR	= ( MS_ATTRIBUTE_CHAP2_CPW + 1 ) ,
	MS_ATTRIBUTE_RAS_VERSION	= ( MS_ATTRIBUTE_RAS_VENDOR + 1 ) ,
	IAS_ATTRIBUTE_NP_NAME	= ( MS_ATTRIBUTE_RAS_VERSION + 1 ) ,
	MS_ATTRIBUTE_PRIMARY_DNS_SERVER	= ( IAS_ATTRIBUTE_NP_NAME + 1 ) ,
	MS_ATTRIBUTE_SECONDARY_DNS_SERVER	= ( MS_ATTRIBUTE_PRIMARY_DNS_SERVER + 1 ) ,
	MS_ATTRIBUTE_PRIMARY_NBNS_SERVER	= 0x1038,
	MS_ATTRIBUTE_SECONDARY_NBNS_SERVER	= ( MS_ATTRIBUTE_PRIMARY_NBNS_SERVER + 1 ) ,
	IAS_ATTRIBUTE_PROXY_POLICY_NAME	= ( MS_ATTRIBUTE_SECONDARY_NBNS_SERVER + 1 ) ,
	IAS_ATTRIBUTE_PROVIDER_TYPE	= ( IAS_ATTRIBUTE_PROXY_POLICY_NAME + 1 ) ,
	IAS_ATTRIBUTE_PROVIDER_NAME	= ( IAS_ATTRIBUTE_PROVIDER_TYPE + 1 ) ,
	IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS	= ( IAS_ATTRIBUTE_PROVIDER_NAME + 1 ) ,
	IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE	= ( IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS + 1 ) ,
	MS_ATTRIBUTE_RAS_CLIENT_NAME	= ( IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE + 1 ) ,
	MS_ATTRIBUTE_RAS_CLIENT_VERSION	= 0x1040,
	IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU	= ( MS_ATTRIBUTE_RAS_CLIENT_VERSION + 1 ) ,
	IAS_ATTRIBUTE_EXTENSION_STATE	= ( IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU + 1 ) ,
	IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT	= ( IAS_ATTRIBUTE_EXTENSION_STATE + 1 ) ,
	MS_ATTRIBUTE_SESSION_TIMEOUT	= ( IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT + 1 ) ,
	MS_ATTRIBUTE_QUARANTINE_IPFILTER	= ( MS_ATTRIBUTE_SESSION_TIMEOUT + 1 ) ,
	MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT	= ( MS_ATTRIBUTE_QUARANTINE_IPFILTER + 1 ) ,
	MS_ATTRIBUTE_USER_SECURITY_IDENTITY	= ( MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT + 1 ) ,
	IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING	= 0x1048,
	IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX	= ( IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING + 1 ) ,
	IAS_ATTRIBUTE_TUNNEL_TAG	= ( IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX + 1 ) ,
	IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED	= ( IAS_ATTRIBUTE_TUNNEL_TAG + 1 ) ,
	IAS_ATTRIBUTE_CERTIFICATE_EKU	= 8097,
	IAS_ATTRIBUTE_EAP_CONFIG	= ( IAS_ATTRIBUTE_CERTIFICATE_EKU + 1 ) ,
	MS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID	= ( IAS_ATTRIBUTE_EAP_CONFIG + 1 ) ,
	MS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION	= 8100,
	IAS_ATTRIBUTE_EAP_TYPEID	= ( MS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION + 1 ) ,
	MS_ATTRIBUTE_EAP_TLV	= ( IAS_ATTRIBUTE_EAP_TYPEID + 1 ) ,
	IAS_ATTRIBUTE_REJECT_REASON_CODE	= ( MS_ATTRIBUTE_EAP_TLV + 1 ) ,
	IAS_ATTRIBUTE_PROXY_EAP_CONFIG	= ( IAS_ATTRIBUTE_REJECT_REASON_CODE + 1 ) ,
	IAS_ATTRIBUTE_EAP_SESSION	= ( IAS_ATTRIBUTE_PROXY_EAP_CONFIG + 1 ) ,
	IAS_ATTRIBUTE_IS_REPLAY	= ( IAS_ATTRIBUTE_EAP_SESSION + 1 ) ,
	IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD	= ( IAS_ATTRIBUTE_IS_REPLAY + 1 ) ,
	MS_ATTRIBUTE_IDENTITY_TYPE	= ( IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD + 1 ) ,
	MS_ATTRIBUTE_SERVICE_CLASS	= ( MS_ATTRIBUTE_IDENTITY_TYPE + 1 ) ,
	MS_ATTRIBUTE_QUARANTINE_USER_CLASS	= 8110,
	MS_ATTRIBUTE_QUARANTINE_STATE	= ( MS_ATTRIBUTE_QUARANTINE_USER_CLASS + 1 ) ,
	IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH	= ( MS_ATTRIBUTE_QUARANTINE_STATE + 1 ) ,
	IAS_ATTRIBUTE_PEAP_CHANNEL_UP	= ( IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH + 1 ) ,
	IAS_ATTRIBUTE_NAME_MAPPED	= ( IAS_ATTRIBUTE_PEAP_CHANNEL_UP + 1 ) ,
	IAS_ATTRIBUTE_POLICY_ENFORCED	= ( IAS_ATTRIBUTE_NAME_MAPPED + 1 ) ,
	IAS_ATTRIBUTE_MACHINE_NTGROUPS	= ( IAS_ATTRIBUTE_POLICY_ENFORCED + 1 ) ,
	IAS_ATTRIBUTE_USER_NTGROUPS	= ( IAS_ATTRIBUTE_MACHINE_NTGROUPS + 1 ) ,
	IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS	= ( IAS_ATTRIBUTE_USER_NTGROUPS + 1 ) ,
	IAS_ATTRIBUTE_USER_TOKEN_GROUPS	= ( IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS + 1 ) ,
	MS_ATTRIBUTE_QUARANTINE_GRACE_TIME	= 8120,
	IAS_ATTRIBUTE_QUARANTINE_URL	= ( MS_ATTRIBUTE_QUARANTINE_GRACE_TIME + 1 ) ,
	IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS	= ( IAS_ATTRIBUTE_QUARANTINE_URL + 1 ) ,
	MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE	= ( IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS + 1 ) ,
	IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT	= ( MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE + 1 ) ,
	IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS	= ( IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT + 1 ) ,
	IAS_ATTRIBUTE_MACHINE_NAME	= ( IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS + 1 ) ,
	IAS_ATTRIBUTE_NT4_MACHINE_NAME	= ( IAS_ATTRIBUTE_MACHINE_NAME + 1 ) ,
	IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE	= ( IAS_ATTRIBUTE_NT4_MACHINE_NAME + 1 ) ,
	IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME	= ( IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE + 1 ) ,
	IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION	= 8130,
	IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE	= ( IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION + 1 ) ,
	MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE	= ( IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE + 1 ) ,
	IAS_ATTRIBUTE_QUARANTINE_SESSION_ID	= ( MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE + 1 ) ,
	MS_ATTRIBUTE_AFW_QUARANTINE_ZONE	= ( IAS_ATTRIBUTE_QUARANTINE_SESSION_ID + 1 ) ,
	MS_ATTRIBUTE_AFW_PROTECTION_LEVEL	= ( MS_ATTRIBUTE_AFW_QUARANTINE_ZONE + 1 ) ,
	IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT	= ( MS_ATTRIBUTE_AFW_PROTECTION_LEVEL + 1 ) ,
	IAS_ATTRIBUTE_REQUEST_START_TIME	= ( IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT + 1 ) ,
	MS_ATTRIBUTE_MACHINE_NAME	= ( IAS_ATTRIBUTE_REQUEST_START_TIME + 1 ) ,
	IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS	= ( MS_ATTRIBUTE_MACHINE_NAME + 1 ) ,
	IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID	= 8140,
	IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX	= ( IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID + 1 ) ,
	IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE	= ( IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX + 1 ) ,
	MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION	= ( IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE + 1 ) ,
	MS_ATTRIBUTE_IPv6_FILTER	= 8144,
	MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS	= ( MS_ATTRIBUTE_IPv6_FILTER + 1 ) ,
	MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS	= ( MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS + 1 ) ,
	IAS_ATTRIBUTE_PROXY_RETRY_COUNT	= ( MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS + 1 ) ,
	IAS_ATTRIBUTE_MACHINE_INVENTORY	= ( IAS_ATTRIBUTE_PROXY_RETRY_COUNT + 1 ) ,
	IAS_ATTRIBUTE_ABSOLUTE_TIME	= ( IAS_ATTRIBUTE_MACHINE_INVENTORY + 1 ) ,
	MS_ATTRIBUTE_QUARANTINE_SOH	= 8150,
	IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY	= ( MS_ATTRIBUTE_QUARANTINE_SOH + 1 ) ,
	MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME	= ( IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY + 1 ) ,
	MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE	= ( MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME + 1 ) ,
	IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV	= ( MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE + 1 ) ,
	MS_ATTRIBUTE_HCAP_USER_GROUPS	= 8155,
	IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY	= ( MS_ATTRIBUTE_HCAP_USER_GROUPS + 1 ) ,
	IAS_ATTRIBUTE_POLICY_EVALUATED_SHV	= ( IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY + 1 ) ,
	MS_ATTRIBUTE_RAS_CORRELATION_ID	= ( IAS_ATTRIBUTE_POLICY_EVALUATED_SHV + 1 ) ,
	MS_ATTRIBUTE_HCAP_USER_NAME	= ( MS_ATTRIBUTE_RAS_CORRELATION_ID + 1 ) ,
	IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME	= 8160,
	IAS_ATTRIBUTE_USER_TOKEN_SID	= ( IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME + 1 ) ,
	IAS_ATTRIBUTE_MACHINE_TOKEN_SID	= ( IAS_ATTRIBUTE_USER_TOKEN_SID + 1 ) ,
	IAS_ATTRIBUTE_MACHINE_VALIDATED	= ( IAS_ATTRIBUTE_MACHINE_TOKEN_SID + 1 ) ,
	MS_ATTRIBUTE_USER_IPv4_ADDRESS	= ( IAS_ATTRIBUTE_MACHINE_VALIDATED + 1 ) ,
	MS_ATTRIBUTE_USER_IPv6_ADDRESS	= ( MS_ATTRIBUTE_USER_IPv4_ADDRESS + 1 ) ,
	MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION	= ( MS_ATTRIBUTE_USER_IPv6_ADDRESS + 1 ) ,
	IAS_ATTRIBUTE_ACCEPT_REASON_CODE	= ( MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION + 1 ) ,
	RAS_ATTRIBUTE_ENCRYPTION_TYPE	= ( 0xffffffff - 89 ) ,
	RAS_ATTRIBUTE_ENCRYPTION_POLICY	= ( RAS_ATTRIBUTE_ENCRYPTION_TYPE + 1 ) ,
	RAS_ATTRIBUTE_BAP_REQUIRED	= ( RAS_ATTRIBUTE_ENCRYPTION_POLICY + 1 ) ,
	RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME	= ( RAS_ATTRIBUTE_BAP_REQUIRED + 1 ) ,
	RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT	= ( RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME + 1 ) 
    } 	ATTRIBUTEID;

typedef /* [public] */ 
enum _NEW_LOG_FILE_FREQUENCY
    {	IAS_LOGGING_UNLIMITED_SIZE	= 0,
	IAS_LOGGING_DAILY	= ( IAS_LOGGING_UNLIMITED_SIZE + 1 ) ,
	IAS_LOGGING_WEEKLY	= ( IAS_LOGGING_DAILY + 1 ) ,
	IAS_LOGGING_MONTHLY	= ( IAS_LOGGING_WEEKLY + 1 ) ,
	IAS_LOGGING_WHEN_FILE_SIZE_REACHES	= ( IAS_LOGGING_MONTHLY + 1 ) 
    } 	NEW_LOG_FILE_FREQUENCY;

typedef /* [public] */ 
enum _AUTHENTICATION_TYPE
    {	IAS_AUTH_INVALID	= 0,
	IAS_AUTH_PAP	= ( IAS_AUTH_INVALID + 1 ) ,
	IAS_AUTH_MD5CHAP	= ( IAS_AUTH_PAP + 1 ) ,
	IAS_AUTH_MSCHAP	= ( IAS_AUTH_MD5CHAP + 1 ) ,
	IAS_AUTH_MSCHAP2	= ( IAS_AUTH_MSCHAP + 1 ) ,
	IAS_AUTH_EAP	= ( IAS_AUTH_MSCHAP2 + 1 ) ,
	IAS_AUTH_ARAP	= ( IAS_AUTH_EAP + 1 ) ,
	IAS_AUTH_NONE	= ( IAS_AUTH_ARAP + 1 ) ,
	IAS_AUTH_CUSTOM	= ( IAS_AUTH_NONE + 1 ) ,
	IAS_AUTH_MSCHAP_CPW	= ( IAS_AUTH_CUSTOM + 1 ) ,
	IAS_AUTH_MSCHAP2_CPW	= ( IAS_AUTH_MSCHAP_CPW + 1 ) ,
	IAS_AUTH_PEAP	= ( IAS_AUTH_MSCHAP2_CPW + 1 ) 
    } 	AUTHENTICATION_TYPE;

typedef /* [public] */ 
enum _IDENTITY_TYPE
    {	IAS_IDENTITY_NO_DEFAULT	= 0x1
    } 	IDENTITY_TYPE;

typedef /* [public] */ 
enum _ATTRIBUTESYNTAX
    {	IAS_SYNTAX_BOOLEAN	= 1,
	IAS_SYNTAX_INTEGER	= ( IAS_SYNTAX_BOOLEAN + 1 ) ,
	IAS_SYNTAX_ENUMERATOR	= ( IAS_SYNTAX_INTEGER + 1 ) ,
	IAS_SYNTAX_INETADDR	= ( IAS_SYNTAX_ENUMERATOR + 1 ) ,
	IAS_SYNTAX_STRING	= ( IAS_SYNTAX_INETADDR + 1 ) ,
	IAS_SYNTAX_OCTETSTRING	= ( IAS_SYNTAX_STRING + 1 ) ,
	IAS_SYNTAX_UTCTIME	= ( IAS_SYNTAX_OCTETSTRING + 1 ) ,
	IAS_SYNTAX_PROVIDERSPECIFIC	= ( IAS_SYNTAX_UTCTIME + 1 ) ,
	IAS_SYNTAX_UNSIGNEDINTEGER	= ( IAS_SYNTAX_PROVIDERSPECIFIC + 1 ) ,
	IAS_SYNTAX_INETADDR6	= ( IAS_SYNTAX_UNSIGNEDINTEGER + 1 ) 
    } 	ATTRIBUTESYNTAX;

typedef /* [public] */ 
enum _ATTRIBUTERESTRICTIONS
    {	MULTIVALUED	= 0x1,
	ALLOWEDINPROFILE	= 0x2,
	ALLOWEDINCONDITION	= 0x4,
	ALLOWEDINPROXYPROFILE	= 0x8,
	ALLOWEDINPROXYCONDITION	= 0x10,
	ALLOWEDINVPNDIALUP	= 0x20,
	ALLOWEDIN8021X	= 0x40
    } 	ATTRIBUTERESTRICTIONS;

typedef /* [public] */ 
enum _ATTRIBUTEFILTER
    {	ATTRIBUTE_FILTER_NONE	= 0,
	ATTRIBUTE_FILTER_VPN_DIALUP	= 0x1,
	ATTRIBUTE_FILTER_IEEE_802_1x	= 0x2
    } 	ATTRIBUTEFILTER;

typedef /* [public] */ 
enum _ATTRIBUTEINFO
    {	NAME	= 1,
	SYNTAX	= ( NAME + 1 ) ,
	RESTRICTIONS	= ( SYNTAX + 1 ) ,
	DESCRIPTION	= ( RESTRICTIONS + 1 ) ,
	VENDORID	= ( DESCRIPTION + 1 ) ,
	LDAPNAME	= ( VENDORID + 1 ) ,
	VENDORTYPE	= ( LDAPNAME + 1 ) 
    } 	ATTRIBUTEINFO;

typedef /* [public] */ 
enum _IASCOMMONPROPERTIES
    {	PROPERTY_SDO_RESERVED	= 0,
	PROPERTY_SDO_CLASS	= ( PROPERTY_SDO_RESERVED + 1 ) ,
	PROPERTY_SDO_NAME	= ( PROPERTY_SDO_CLASS + 1 ) ,
	PROPERTY_SDO_DESCRIPTION	= ( PROPERTY_SDO_NAME + 1 ) ,
	PROPERTY_SDO_ID	= ( PROPERTY_SDO_DESCRIPTION + 1 ) ,
	PROPERTY_SDO_DATASTORE_NAME	= ( PROPERTY_SDO_ID + 1 ) ,
	PROPERTY_SDO_START	= 0x400
    } 	IASCOMMONPROPERTIES;

typedef /* [public] */ 
enum _USERPROPERTIES
    {	PROPERTY_USER_CALLING_STATION_ID	= PROPERTY_SDO_START,
	PROPERTY_USER_SAVED_CALLING_STATION_ID	= ( PROPERTY_USER_CALLING_STATION_ID + 1 ) ,
	PROPERTY_USER_RADIUS_CALLBACK_NUMBER	= ( PROPERTY_USER_SAVED_CALLING_STATION_ID + 1 ) ,
	PROPERTY_USER_RADIUS_FRAMED_ROUTE	= ( PROPERTY_USER_RADIUS_CALLBACK_NUMBER + 1 ) ,
	PROPERTY_USER_RADIUS_FRAMED_IP_ADDRESS	= ( PROPERTY_USER_RADIUS_FRAMED_ROUTE + 1 ) ,
	PROPERTY_USER_SAVED_RADIUS_CALLBACK_NUMBER	= ( PROPERTY_USER_RADIUS_FRAMED_IP_ADDRESS + 1 ) ,
	PROPERTY_USER_SAVED_RADIUS_FRAMED_ROUTE	= ( PROPERTY_USER_SAVED_RADIUS_CALLBACK_NUMBER + 1 ) ,
	PROPERTY_USER_SAVED_RADIUS_FRAMED_IP_ADDRESS	= ( PROPERTY_USER_SAVED_RADIUS_FRAMED_ROUTE + 1 ) ,
	PROPERTY_USER_ALLOW_DIALIN	= ( PROPERTY_USER_SAVED_RADIUS_FRAMED_IP_ADDRESS + 1 ) ,
	PROPERTY_USER_SERVICE_TYPE	= ( PROPERTY_USER_ALLOW_DIALIN + 1 ) ,
	PROPERTY_USER_RADIUS_FRAMED_IPV6_ROUTE	= ( PROPERTY_USER_SERVICE_TYPE + 1 ) ,
	PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_ROUTE	= ( PROPERTY_USER_RADIUS_FRAMED_IPV6_ROUTE + 1 ) ,
	PROPERTY_USER_RADIUS_FRAMED_INTERFACE_ID	= ( PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_ROUTE + 1 ) ,
	PROPERTY_USER_SAVED_RADIUS_FRAMED_INTERFACE_ID	= ( PROPERTY_USER_RADIUS_FRAMED_INTERFACE_ID + 1 ) ,
	PROPERTY_USER_RADIUS_FRAMED_IPV6_PREFIX	= ( PROPERTY_USER_SAVED_RADIUS_FRAMED_INTERFACE_ID + 1 ) ,
	PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_PREFIX	= ( PROPERTY_USER_RADIUS_FRAMED_IPV6_PREFIX + 1 ) 
    } 	USERPROPERTIES;

typedef /* [public] */ 
enum _DICTIONARYPROPERTIES
    {	PROPERTY_DICTIONARY_ATTRIBUTES_COLLECTION	= PROPERTY_SDO_START,
	PROPERTY_DICTIONARY_LOCATION	= ( PROPERTY_DICTIONARY_ATTRIBUTES_COLLECTION + 1 ) 
    } 	DICTIONARYPROPERTIES;

typedef /* [public] */ 
enum _ATTRIBUTEPROPERTIES
    {	PROPERTY_ATTRIBUTE_ID	= PROPERTY_SDO_START,
	PROPERTY_ATTRIBUTE_VENDOR_ID	= ( PROPERTY_ATTRIBUTE_ID + 1 ) ,
	PROPERTY_ATTRIBUTE_VENDOR_TYPE_ID	= ( PROPERTY_ATTRIBUTE_VENDOR_ID + 1 ) ,
	PROPERTY_ATTRIBUTE_IS_ENUMERABLE	= ( PROPERTY_ATTRIBUTE_VENDOR_TYPE_ID + 1 ) ,
	PROPERTY_ATTRIBUTE_ENUM_NAMES	= ( PROPERTY_ATTRIBUTE_IS_ENUMERABLE + 1 ) ,
	PROPERTY_ATTRIBUTE_ENUM_VALUES	= ( PROPERTY_ATTRIBUTE_ENUM_NAMES + 1 ) ,
	PROPERTY_ATTRIBUTE_SYNTAX	= ( PROPERTY_ATTRIBUTE_ENUM_VALUES + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_MULTIPLE	= ( PROPERTY_ATTRIBUTE_SYNTAX + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_LOG_ORDINAL	= ( PROPERTY_ATTRIBUTE_ALLOW_MULTIPLE + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_IN_PROFILE	= ( PROPERTY_ATTRIBUTE_ALLOW_LOG_ORDINAL + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_IN_CONDITION	= ( PROPERTY_ATTRIBUTE_ALLOW_IN_PROFILE + 1 ) ,
	PROPERTY_ATTRIBUTE_DISPLAY_NAME	= ( PROPERTY_ATTRIBUTE_ALLOW_IN_CONDITION + 1 ) ,
	PROPERTY_ATTRIBUTE_VALUE	= ( PROPERTY_ATTRIBUTE_DISPLAY_NAME + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_PROFILE	= ( PROPERTY_ATTRIBUTE_VALUE + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_CONDITION	= ( PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_PROFILE + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_IN_VPNDIALUP	= ( PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_CONDITION + 1 ) ,
	PROPERTY_ATTRIBUTE_ALLOW_IN_8021X	= ( PROPERTY_ATTRIBUTE_ALLOW_IN_VPNDIALUP + 1 ) ,
	PROPERTY_ATTRIBUTE_ENUM_FILTERS	= ( PROPERTY_ATTRIBUTE_ALLOW_IN_8021X + 1 ) 
    } 	ATTRIBUTEPROPERTIES;

typedef /* [public] */ 
enum _IASPROPERTIES
    {	PROPERTY_IAS_RADIUSSERVERGROUPS_COLLECTION	= PROPERTY_SDO_START,
	PROPERTY_IAS_POLICIES_COLLECTION	= ( PROPERTY_IAS_RADIUSSERVERGROUPS_COLLECTION + 1 ) ,
	PROPERTY_IAS_PROFILES_COLLECTION	= ( PROPERTY_IAS_POLICIES_COLLECTION + 1 ) ,
	PROPERTY_IAS_PROTOCOLS_COLLECTION	= ( PROPERTY_IAS_PROFILES_COLLECTION + 1 ) ,
	PROPERTY_IAS_AUDITORS_COLLECTION	= ( PROPERTY_IAS_PROTOCOLS_COLLECTION + 1 ) ,
	PROPERTY_IAS_REQUESTHANDLERS_COLLECTION	= ( PROPERTY_IAS_AUDITORS_COLLECTION + 1 ) ,
	PROPERTY_IAS_PROXYPOLICIES_COLLECTION	= ( PROPERTY_IAS_REQUESTHANDLERS_COLLECTION + 1 ) ,
	PROPERTY_IAS_PROXYPROFILES_COLLECTION	= ( PROPERTY_IAS_PROXYPOLICIES_COLLECTION + 1 ) ,
	PROPERTY_IAS_REMEDIATIONSERVERGROUPS_COLLECTION	= ( PROPERTY_IAS_PROXYPROFILES_COLLECTION + 1 ) ,
	PROPERTY_IAS_SHVTEMPLATES_COLLECTION	= ( PROPERTY_IAS_REMEDIATIONSERVERGROUPS_COLLECTION + 1 ) 
    } 	IASPROPERTIES;

typedef /* [public] */ 
enum _CLIENTPROPERTIES
    {	PROPERTY_CLIENT_REQUIRE_SIGNATURE	= PROPERTY_SDO_START,
	PROPERTY_CLIENT_UNUSED	= ( PROPERTY_CLIENT_REQUIRE_SIGNATURE + 1 ) ,
	PROPERTY_CLIENT_SHARED_SECRET	= ( PROPERTY_CLIENT_UNUSED + 1 ) ,
	PROPERTY_CLIENT_NAS_MANUFACTURER	= ( PROPERTY_CLIENT_SHARED_SECRET + 1 ) ,
	PROPERTY_CLIENT_ADDRESS	= ( PROPERTY_CLIENT_NAS_MANUFACTURER + 1 ) ,
	PROPERTY_CLIENT_QUARANTINE_COMPATIBLE	= ( PROPERTY_CLIENT_ADDRESS + 1 ) ,
	PROPERTY_CLIENT_ENABLED	= ( PROPERTY_CLIENT_QUARANTINE_COMPATIBLE + 1 ) 
    } 	CLIENTPROPERTIES;

typedef /* [public] */ 
enum _VENDORPROPERTIES
    {	PROPERTY_NAS_VENDOR_ID	= PROPERTY_SDO_START
    } 	VENDORPROPERTIES;

typedef /* [public] */ 
enum _PROFILEPROPERTIES
    {	PROPERTY_PROFILE_ATTRIBUTES_COLLECTION	= PROPERTY_SDO_START
    } 	PROFILEPROPERTIES;

typedef /* [public] */ 
enum _POLICYPROPERTIES
    {	PROPERTY_POLICY_CONSTRAINT	= PROPERTY_SDO_START,
	PROPERTY_POLICY_MERIT	= ( PROPERTY_POLICY_CONSTRAINT + 1 ) ,
	PROPERTY_POLICY_UNUSED0	= ( PROPERTY_POLICY_MERIT + 1 ) ,
	PROPERTY_POLICY_UNUSED1	= ( PROPERTY_POLICY_UNUSED0 + 1 ) ,
	PROPERTY_POLICY_PROFILE_NAME	= ( PROPERTY_POLICY_UNUSED1 + 1 ) ,
	PROPERTY_POLICY_ACTION	= ( PROPERTY_POLICY_PROFILE_NAME + 1 ) ,
	PROPERTY_POLICY_CONDITIONS_COLLECTION	= ( PROPERTY_POLICY_ACTION + 1 ) ,
	PROPERTY_POLICY_ENABLED	= ( PROPERTY_POLICY_CONDITIONS_COLLECTION + 1 ) ,
	PROPERTY_POLICY_SOURCETAG	= ( PROPERTY_POLICY_ENABLED + 1 ) 
    } 	POLICYPROPERTIES;

typedef /* [public] */ 
enum _CONDITIONPROPERTIES
    {	PROPERTY_CONDITION_TEXT	= PROPERTY_SDO_START
    } 	CONDITIONPROPERTIES;

typedef /* [public] */ 
enum _RADIUSSERVERGROUPPROPERTIES
    {	PROPERTY_RADIUSSERVERGROUP_SERVERS_COLLECTION	= PROPERTY_SDO_START
    } 	RADIUSSERVERGROUPPROPERTIES;

typedef /* [public] */ 
enum _RADIUSSERVERPROPERTIES
    {	PROPERTY_RADIUSSERVER_AUTH_PORT	= PROPERTY_SDO_START,
	PROPERTY_RADIUSSERVER_AUTH_SECRET	= ( PROPERTY_RADIUSSERVER_AUTH_PORT + 1 ) ,
	PROPERTY_RADIUSSERVER_ACCT_PORT	= ( PROPERTY_RADIUSSERVER_AUTH_SECRET + 1 ) ,
	PROPERTY_RADIUSSERVER_ACCT_SECRET	= ( PROPERTY_RADIUSSERVER_ACCT_PORT + 1 ) ,
	PROPERTY_RADIUSSERVER_ADDRESS	= ( PROPERTY_RADIUSSERVER_ACCT_SECRET + 1 ) ,
	PROPERTY_RADIUSSERVER_FORWARD_ACCT_ONOFF	= ( PROPERTY_RADIUSSERVER_ADDRESS + 1 ) ,
	PROPERTY_RADIUSSERVER_PRIORITY	= ( PROPERTY_RADIUSSERVER_FORWARD_ACCT_ONOFF + 1 ) ,
	PROPERTY_RADIUSSERVER_WEIGHT	= ( PROPERTY_RADIUSSERVER_PRIORITY + 1 ) ,
	PROPERTY_RADIUSSERVER_TIMEOUT	= ( PROPERTY_RADIUSSERVER_WEIGHT + 1 ) ,
	PROPERTY_RADIUSSERVER_MAX_LOST	= ( PROPERTY_RADIUSSERVER_TIMEOUT + 1 ) ,
	PROPERTY_RADIUSSERVER_BLACKOUT	= ( PROPERTY_RADIUSSERVER_MAX_LOST + 1 ) ,
	PROPERTY_RADIUSSERVER_SEND_SIGNATURE	= ( PROPERTY_RADIUSSERVER_BLACKOUT + 1 ) 
    } 	RADIUSSERVERPROPERTIES;

typedef /* [public] */ 
enum _REMEDIATIONSERVERGROUPPROPERTIES
    {	PROPERTY_REMEDIATIONSERVERGROUP_SERVERS_COLLECTION	= PROPERTY_SDO_START
    } 	REMEDIATIONSERVERGROUPPROPERTIES;

typedef /* [public] */ 
enum _REMEDIATIONSERVERPROPERTIES
    {	PROPERTY_REMEDIATIONSERVER_ADDRESS	= PROPERTY_SDO_START,
	PROPERTY_REMEDIATIONSERVER_FRIENDLY_NAME	= ( PROPERTY_REMEDIATIONSERVER_ADDRESS + 1 ) 
    } 	REMEDIATIONSERVERPROPERTIES;

typedef /* [public] */ 
enum _SHVTEMPLATEPROPERTIES
    {	PROPERTY_SHV_COMBINATION_TYPE	= PROPERTY_SDO_START,
	PROPERTY_SHV_LIST	= ( PROPERTY_SHV_COMBINATION_TYPE + 1 ) 
    } 	SHVTEMPLATEPROPERTIES;

typedef /* [public] */ 
enum _IASCOMPONENTPROPERTIES
    {	PROPERTY_COMPONENT_ID	= PROPERTY_SDO_START,
	PROPERTY_COMPONENT_PROG_ID	= ( PROPERTY_COMPONENT_ID + 1 ) ,
	PROPERTY_COMPONENT_START	= ( PROPERTY_COMPONENT_PROG_ID + 1 ) 
    } 	IASCOMPONENTPROPERTIES;

typedef /* [public] */ 
enum _PROTOCOLPROPERTIES
    {	PROPERTY_PROTOCOL_REQUEST_HANDLER	= PROPERTY_COMPONENT_START,
	PROPERTY_PROTOCOL_START	= ( PROPERTY_PROTOCOL_REQUEST_HANDLER + 1 ) 
    } 	PROTOCOLPROPERTIES;

typedef /* [public] */ 
enum _RADIUSPROPERTIES
    {	PROPERTY_RADIUS_ACCOUNTING_PORT	= PROPERTY_PROTOCOL_START,
	PROPERTY_RADIUS_AUTHENTICATION_PORT	= ( PROPERTY_RADIUS_ACCOUNTING_PORT + 1 ) ,
	PROPERTY_RADIUS_CLIENTS_COLLECTION	= ( PROPERTY_RADIUS_AUTHENTICATION_PORT + 1 ) ,
	PROPERTY_RADIUS_VENDORS_COLLECTION	= ( PROPERTY_RADIUS_CLIENTS_COLLECTION + 1 ) 
    } 	RADIUSPROPERTIES;

typedef /* [public] */ 
enum _NTEVENTLOGPROPERTIES
    {	PROPERTY_EVENTLOG_LOG_APPLICATION_EVENTS	= PROPERTY_COMPONENT_START,
	PROPERTY_EVENTLOG_LOG_MALFORMED	= ( PROPERTY_EVENTLOG_LOG_APPLICATION_EVENTS + 1 ) ,
	PROPERTY_EVENTLOG_LOG_DEBUG	= ( PROPERTY_EVENTLOG_LOG_MALFORMED + 1 ) 
    } 	NTEVENTLOGPROPERTIES;

typedef /* [public] */ 
enum _NAMESPROPERTIES
    {	PROPERTY_NAMES_REALMS	= PROPERTY_COMPONENT_START
    } 	NAMESPROPERTIES;

typedef /* [public] */ 
enum _NTSAMPROPERTIES
    {	PROPERTY_NTSAM_ALLOW_LM_AUTHENTICATION	= PROPERTY_COMPONENT_START
    } 	NTSAMPROPERTIES;

typedef /* [public] */ 
enum _ACCOUNTINGPROPERTIES
    {	PROPERTY_ACCOUNTING_LOG_ACCOUNTING	= PROPERTY_COMPONENT_START,
	PROPERTY_ACCOUNTING_LOG_ACCOUNTING_INTERIM	= ( PROPERTY_ACCOUNTING_LOG_ACCOUNTING + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_AUTHENTICATION	= ( PROPERTY_ACCOUNTING_LOG_ACCOUNTING_INTERIM + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_OPEN_NEW_FREQUENCY	= ( PROPERTY_ACCOUNTING_LOG_AUTHENTICATION + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_OPEN_NEW_SIZE	= ( PROPERTY_ACCOUNTING_LOG_OPEN_NEW_FREQUENCY + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_FILE_DIRECTORY	= ( PROPERTY_ACCOUNTING_LOG_OPEN_NEW_SIZE + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_IAS1_FORMAT	= ( PROPERTY_ACCOUNTING_LOG_FILE_DIRECTORY + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_ENABLE_LOGGING	= ( PROPERTY_ACCOUNTING_LOG_IAS1_FORMAT + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_DELETE_IF_FULL	= ( PROPERTY_ACCOUNTING_LOG_ENABLE_LOGGING + 1 ) ,
	PROPERTY_ACCOUNTING_SQL_MAX_SESSIONS	= ( PROPERTY_ACCOUNTING_LOG_DELETE_IF_FULL + 1 ) ,
	PROPERTY_ACCOUNTING_LOG_AUTHENTICATION_INTERIM	= ( PROPERTY_ACCOUNTING_SQL_MAX_SESSIONS + 1 ) 
    } 	ACCOUNTINGPROPERTIES;

typedef /* [public] */ 
enum _EAPWRAPPROPERTIES
    {	PROPERTY_EAP_SESSION_TIMEOUT	= PROPERTY_COMPONENT_START,
	PROPERTY_EAP_MAX_SESSIONS	= ( PROPERTY_EAP_SESSION_TIMEOUT + 1 ) 
    } 	EAPWRAPPROPERTIES;

typedef /* [public] */ 
enum _NAPPROPERTIES
    {	PROPERTY_NAP_POLICIES_COLLECTION	= PROPERTY_COMPONENT_START,
	PROPERTY_SHV_TEMPLATES_COLLECTION	= ( PROPERTY_NAP_POLICIES_COLLECTION + 1 ) 
    } 	NAPPROPERTIES;

typedef /* [public] */ 
enum _RADIUSPROXYPROPERTIES
    {	PROPERTY_RADIUSPROXY_SERVERGROUPS	= PROPERTY_COMPONENT_START
    } 	RADIUSPROXYPROPERTIES;

typedef /* [public] */ 
enum _REMEDIATIONSERVERSPROPERTIES
    {	PROPERTY_REMEDIATIONSERVERS_SERVERGROUPS	= PROPERTY_COMPONENT_START
    } 	REMEDIATIONSERVERSPROPERTIES;

typedef /* [public] */ 
enum _SHV_COMBINATION_TYPE
    {	SHV_COMBINATION_TYPE_ALL_PASS	= 0,
	SHV_COMBINATION_TYPE_ALL_FAIL	= ( SHV_COMBINATION_TYPE_ALL_PASS + 1 ) ,
	SHV_COMBINATION_TYPE_ONE_OR_MORE_PASS	= ( SHV_COMBINATION_TYPE_ALL_FAIL + 1 ) ,
	SHV_COMBINATION_TYPE_ONE_OR_MORE_FAIL	= ( SHV_COMBINATION_TYPE_ONE_OR_MORE_PASS + 1 ) ,
	SHV_COMBINATION_TYPE_ONE_OR_MORE_INFECTED	= ( SHV_COMBINATION_TYPE_ONE_OR_MORE_FAIL + 1 ) ,
	SHV_COMBINATION_TYPE_ONE_OR_MORE_TRANSITIONAL	= ( SHV_COMBINATION_TYPE_ONE_OR_MORE_INFECTED + 1 ) ,
	SHV_COMBINATION_TYPE_ONE_OR_MORE_UNKNOWN	= ( SHV_COMBINATION_TYPE_ONE_OR_MORE_TRANSITIONAL + 1 ) ,
	SHV_COMBINATION_TYPE_MAX	= ( SHV_COMBINATION_TYPE_ONE_OR_MORE_UNKNOWN + 1 ) 
    } 	SHV_COMBINATION_TYPE;

typedef /* [public] */ 
enum _SERVICE_TYPE
    {	SERVICE_TYPE_IAS	= 0,
	SERVICE_TYPE_RAS	= ( SERVICE_TYPE_IAS + 1 ) ,
	SERVICE_TYPE_MAX	= ( SERVICE_TYPE_RAS + 1 ) 
    } 	SERVICE_TYPE;

typedef /* [public] */ 
enum _IASOSTYPE
    {	SYSTEM_TYPE_NT4_WORKSTATION	= 0,
	SYSTEM_TYPE_NT5_WORKSTATION	= ( SYSTEM_TYPE_NT4_WORKSTATION + 1 ) ,
	SYSTEM_TYPE_NT6_WORKSTATION	= ( SYSTEM_TYPE_NT5_WORKSTATION + 1 ) ,
	SYSTEM_TYPE_NT4_SERVER	= ( SYSTEM_TYPE_NT6_WORKSTATION + 1 ) ,
	SYSTEM_TYPE_NT5_SERVER	= ( SYSTEM_TYPE_NT4_SERVER + 1 ) ,
	SYSTEM_TYPE_NT6_SERVER	= ( SYSTEM_TYPE_NT5_SERVER + 1 ) 
    } 	IASOSTYPE;

typedef /* [public] */ enum _IASOSTYPE *PIASOSTYPE;

typedef /* [public] */ 
enum _DOMAINTYPE
    {	DOMAIN_TYPE_NONE	= 0,
	DOMAIN_TYPE_NT4	= ( DOMAIN_TYPE_NONE + 1 ) ,
	DOMAIN_TYPE_NT5	= ( DOMAIN_TYPE_NT4 + 1 ) ,
	DOMAIN_TYPE_MIXED	= ( DOMAIN_TYPE_NT5 + 1 ) 
    } 	IASDOMAINTYPE;

typedef /* [public] */ enum _DOMAINTYPE *PIASDOMAINTYPE;

typedef /* [public] */ 
enum _IASDATASTORE
    {	DATA_STORE_LOCAL	= 0,
	DATA_STORE_DIRECTORY	= ( DATA_STORE_LOCAL + 1 ) 
    } 	IASDATASTORE;

typedef /* [public] */ enum _IASDATASTORE *PIASDATASTORE;


EXTERN_C const IID LIBID_SDOIASLib;

#ifndef __ISdoMachine_INTERFACE_DEFINED__
#define __ISdoMachine_INTERFACE_DEFINED__

/* interface ISdoMachine */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ISdoMachine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("479F6E75-49A2-11d2-8ECA-00C04FC2F519")
    ISdoMachine : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Attach( 
            /* [in] */ __RPC__in BSTR bstrComputerName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetDictionarySDO( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppDictionarySDO) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetServiceSDO( 
            /* [in] */ IASDATASTORE eDataStore,
            /* [in] */ __RPC__in BSTR bstrServiceName,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppServiceSDO) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetUserSDO( 
            /* [in] */ IASDATASTORE eDataStore,
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUserSDO) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetOSType( 
            /* [retval][out] */ __RPC__out IASOSTYPE *eOSType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetDomainType( 
            /* [retval][out] */ __RPC__out IASDOMAINTYPE *eDomainType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsDirectoryAvailable( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *boolDirectoryAvailable) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetAttachedComputer( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *bstrComputerName) = 0;
        
        virtual /* [hidden][id] */ HRESULT STDMETHODCALLTYPE GetSDOSchema( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppSDOSchema) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISdoMachineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISdoMachine * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISdoMachine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISdoMachine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISdoMachine * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISdoMachine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISdoMachine * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISdoMachine * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Attach )( 
            ISdoMachine * This,
            /* [in] */ __RPC__in BSTR bstrComputerName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDictionarySDO )( 
            ISdoMachine * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppDictionarySDO);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetServiceSDO )( 
            ISdoMachine * This,
            /* [in] */ IASDATASTORE eDataStore,
            /* [in] */ __RPC__in BSTR bstrServiceName,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppServiceSDO);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUserSDO )( 
            ISdoMachine * This,
            /* [in] */ IASDATASTORE eDataStore,
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUserSDO);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetOSType )( 
            ISdoMachine * This,
            /* [retval][out] */ __RPC__out IASOSTYPE *eOSType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDomainType )( 
            ISdoMachine * This,
            /* [retval][out] */ __RPC__out IASDOMAINTYPE *eDomainType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsDirectoryAvailable )( 
            ISdoMachine * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *boolDirectoryAvailable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetAttachedComputer )( 
            ISdoMachine * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *bstrComputerName);
        
        /* [hidden][id] */ HRESULT ( STDMETHODCALLTYPE *GetSDOSchema )( 
            ISdoMachine * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppSDOSchema);
        
        END_INTERFACE
    } ISdoMachineVtbl;

    interface ISdoMachine
    {
        CONST_VTBL struct ISdoMachineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISdoMachine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISdoMachine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISdoMachine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISdoMachine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISdoMachine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISdoMachine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISdoMachine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISdoMachine_Attach(This,bstrComputerName)	\
    ( (This)->lpVtbl -> Attach(This,bstrComputerName) ) 

#define ISdoMachine_GetDictionarySDO(This,ppDictionarySDO)	\
    ( (This)->lpVtbl -> GetDictionarySDO(This,ppDictionarySDO) ) 

#define ISdoMachine_GetServiceSDO(This,eDataStore,bstrServiceName,ppServiceSDO)	\
    ( (This)->lpVtbl -> GetServiceSDO(This,eDataStore,bstrServiceName,ppServiceSDO) ) 

#define ISdoMachine_GetUserSDO(This,eDataStore,bstrUserName,ppUserSDO)	\
    ( (This)->lpVtbl -> GetUserSDO(This,eDataStore,bstrUserName,ppUserSDO) ) 

#define ISdoMachine_GetOSType(This,eOSType)	\
    ( (This)->lpVtbl -> GetOSType(This,eOSType) ) 

#define ISdoMachine_GetDomainType(This,eDomainType)	\
    ( (This)->lpVtbl -> GetDomainType(This,eDomainType) ) 

#define ISdoMachine_IsDirectoryAvailable(This,boolDirectoryAvailable)	\
    ( (This)->lpVtbl -> IsDirectoryAvailable(This,boolDirectoryAvailable) ) 

#define ISdoMachine_GetAttachedComputer(This,bstrComputerName)	\
    ( (This)->lpVtbl -> GetAttachedComputer(This,bstrComputerName) ) 

#define ISdoMachine_GetSDOSchema(This,ppSDOSchema)	\
    ( (This)->lpVtbl -> GetSDOSchema(This,ppSDOSchema) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISdoMachine_INTERFACE_DEFINED__ */


#ifndef __ISdoServiceControl_INTERFACE_DEFINED__
#define __ISdoServiceControl_INTERFACE_DEFINED__

/* interface ISdoServiceControl */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ISdoServiceControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("479F6E74-49A2-11d2-8ECA-00C04FC2F519")
    ISdoServiceControl : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartService( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StopService( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetServiceStatus( 
            /* [retval][out] */ __RPC__out LONG *status) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ResetService( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISdoServiceControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISdoServiceControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISdoServiceControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISdoServiceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISdoServiceControl * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISdoServiceControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISdoServiceControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISdoServiceControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartService )( 
            ISdoServiceControl * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopService )( 
            ISdoServiceControl * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetServiceStatus )( 
            ISdoServiceControl * This,
            /* [retval][out] */ __RPC__out LONG *status);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ResetService )( 
            ISdoServiceControl * This);
        
        END_INTERFACE
    } ISdoServiceControlVtbl;

    interface ISdoServiceControl
    {
        CONST_VTBL struct ISdoServiceControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISdoServiceControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISdoServiceControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISdoServiceControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISdoServiceControl_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISdoServiceControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISdoServiceControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISdoServiceControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISdoServiceControl_StartService(This)	\
    ( (This)->lpVtbl -> StartService(This) ) 

#define ISdoServiceControl_StopService(This)	\
    ( (This)->lpVtbl -> StopService(This) ) 

#define ISdoServiceControl_GetServiceStatus(This,status)	\
    ( (This)->lpVtbl -> GetServiceStatus(This,status) ) 

#define ISdoServiceControl_ResetService(This)	\
    ( (This)->lpVtbl -> ResetService(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISdoServiceControl_INTERFACE_DEFINED__ */


#ifndef __ISdo_INTERFACE_DEFINED__
#define __ISdo_INTERFACE_DEFINED__

/* interface ISdo */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ISdo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56BC53DE-96DB-11D1-BF3F-000000000000")
    ISdo : public IDispatch
    {
    public:
        virtual /* [hidden][id] */ HRESULT STDMETHODCALLTYPE GetPropertyInfo( 
            /* [in] */ LONG Id,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppPropertyInfo) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ LONG Id,
            /* [retval][out] */ __RPC__out VARIANT *pValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PutProperty( 
            /* [in] */ LONG Id,
            /* [in] */ __RPC__in VARIANT *pValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ResetProperty( 
            /* [in] */ LONG Id) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Apply( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Restore( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEnumVARIANT) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISdoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISdo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISdo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISdo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISdo * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISdo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISdo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISdo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyInfo )( 
            ISdo * This,
            /* [in] */ LONG Id,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppPropertyInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            ISdo * This,
            /* [in] */ LONG Id,
            /* [retval][out] */ __RPC__out VARIANT *pValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutProperty )( 
            ISdo * This,
            /* [in] */ LONG Id,
            /* [in] */ __RPC__in VARIANT *pValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ResetProperty )( 
            ISdo * This,
            /* [in] */ LONG Id);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            ISdo * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Restore )( 
            ISdo * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ISdo * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEnumVARIANT);
        
        END_INTERFACE
    } ISdoVtbl;

    interface ISdo
    {
        CONST_VTBL struct ISdoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISdo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISdo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISdo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISdo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISdo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISdo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISdo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISdo_GetPropertyInfo(This,Id,ppPropertyInfo)	\
    ( (This)->lpVtbl -> GetPropertyInfo(This,Id,ppPropertyInfo) ) 

#define ISdo_GetProperty(This,Id,pValue)	\
    ( (This)->lpVtbl -> GetProperty(This,Id,pValue) ) 

#define ISdo_PutProperty(This,Id,pValue)	\
    ( (This)->lpVtbl -> PutProperty(This,Id,pValue) ) 

#define ISdo_ResetProperty(This,Id)	\
    ( (This)->lpVtbl -> ResetProperty(This,Id) ) 

#define ISdo_Apply(This)	\
    ( (This)->lpVtbl -> Apply(This) ) 

#define ISdo_Restore(This)	\
    ( (This)->lpVtbl -> Restore(This) ) 

#define ISdo_get__NewEnum(This,ppEnumVARIANT)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumVARIANT) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISdo_INTERFACE_DEFINED__ */


#ifndef __ISdoCollection_INTERFACE_DEFINED__
#define __ISdoCollection_INTERFACE_DEFINED__

/* interface ISdoCollection */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ISdoCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56BC53E2-96DB-11D1-BF3F-000000000000")
    ISdoCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [out][in] */ __RPC__deref_inout_opt IDispatch **ppItem) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ __RPC__in_opt IDispatch *pItem) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Reload( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsNameUnique( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pBool) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ __RPC__in VARIANT *Name,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **pItem) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEnumVARIANT) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISdoCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISdoCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISdoCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISdoCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISdoCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISdoCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISdoCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISdoCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ISdoCollection * This,
            /* [retval][out] */ __RPC__out long *pCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ISdoCollection * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [out][in] */ __RPC__deref_inout_opt IDispatch **ppItem);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ISdoCollection * This,
            /* [in] */ __RPC__in_opt IDispatch *pItem);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ISdoCollection * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            ISdoCollection * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsNameUnique )( 
            ISdoCollection * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pBool);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ISdoCollection * This,
            /* [in] */ __RPC__in VARIANT *Name,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **pItem);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ISdoCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEnumVARIANT);
        
        END_INTERFACE
    } ISdoCollectionVtbl;

    interface ISdoCollection
    {
        CONST_VTBL struct ISdoCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISdoCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISdoCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISdoCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISdoCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISdoCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISdoCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISdoCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISdoCollection_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define ISdoCollection_Add(This,bstrName,ppItem)	\
    ( (This)->lpVtbl -> Add(This,bstrName,ppItem) ) 

#define ISdoCollection_Remove(This,pItem)	\
    ( (This)->lpVtbl -> Remove(This,pItem) ) 

#define ISdoCollection_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ISdoCollection_Reload(This)	\
    ( (This)->lpVtbl -> Reload(This) ) 

#define ISdoCollection_IsNameUnique(This,bstrName,pBool)	\
    ( (This)->lpVtbl -> IsNameUnique(This,bstrName,pBool) ) 

#define ISdoCollection_Item(This,Name,pItem)	\
    ( (This)->lpVtbl -> Item(This,Name,pItem) ) 

#define ISdoCollection_get__NewEnum(This,ppEnumVARIANT)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumVARIANT) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISdoCollection_INTERFACE_DEFINED__ */


#ifndef __ISdoDictionaryOld_INTERFACE_DEFINED__
#define __ISdoDictionaryOld_INTERFACE_DEFINED__

/* interface ISdoDictionaryOld */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ISdoDictionaryOld;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d432e5f4-53d8-11d2-9a3a-00c04fb998ac")
    ISdoDictionaryOld : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumAttributes( 
            /* [out][in] */ __RPC__inout VARIANT *Id,
            /* [retval][out] */ __RPC__out VARIANT *pValues) = 0;
        
        virtual /* [hidden][id] */ HRESULT STDMETHODCALLTYPE GetAttributeInfo( 
            /* [in] */ ATTRIBUTEID Id,
            /* [in] */ __RPC__in VARIANT *pInfoIDs,
            /* [retval][out] */ __RPC__out VARIANT *pInfoValues) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumAttributeValues( 
            /* [in] */ ATTRIBUTEID Id,
            /* [out] */ __RPC__out VARIANT *pValueIds,
            /* [retval][out] */ __RPC__out VARIANT *pValuesDesc) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateAttribute( 
            /* [in] */ ATTRIBUTEID Id,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppAttributeObject) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetAttributeID( 
            /* [in] */ __RPC__in BSTR bstrAttributeName,
            /* [retval][out] */ __RPC__out ATTRIBUTEID *pId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISdoDictionaryOldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISdoDictionaryOld * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISdoDictionaryOld * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISdoDictionaryOld * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISdoDictionaryOld * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISdoDictionaryOld * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISdoDictionaryOld * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISdoDictionaryOld * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumAttributes )( 
            ISdoDictionaryOld * This,
            /* [out][in] */ __RPC__inout VARIANT *Id,
            /* [retval][out] */ __RPC__out VARIANT *pValues);
        
        /* [hidden][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributeInfo )( 
            ISdoDictionaryOld * This,
            /* [in] */ ATTRIBUTEID Id,
            /* [in] */ __RPC__in VARIANT *pInfoIDs,
            /* [retval][out] */ __RPC__out VARIANT *pInfoValues);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumAttributeValues )( 
            ISdoDictionaryOld * This,
            /* [in] */ ATTRIBUTEID Id,
            /* [out] */ __RPC__out VARIANT *pValueIds,
            /* [retval][out] */ __RPC__out VARIANT *pValuesDesc);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateAttribute )( 
            ISdoDictionaryOld * This,
            /* [in] */ ATTRIBUTEID Id,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppAttributeObject);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributeID )( 
            ISdoDictionaryOld * This,
            /* [in] */ __RPC__in BSTR bstrAttributeName,
            /* [retval][out] */ __RPC__out ATTRIBUTEID *pId);
        
        END_INTERFACE
    } ISdoDictionaryOldVtbl;

    interface ISdoDictionaryOld
    {
        CONST_VTBL struct ISdoDictionaryOldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISdoDictionaryOld_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISdoDictionaryOld_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISdoDictionaryOld_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISdoDictionaryOld_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISdoDictionaryOld_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISdoDictionaryOld_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISdoDictionaryOld_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISdoDictionaryOld_EnumAttributes(This,Id,pValues)	\
    ( (This)->lpVtbl -> EnumAttributes(This,Id,pValues) ) 

#define ISdoDictionaryOld_GetAttributeInfo(This,Id,pInfoIDs,pInfoValues)	\
    ( (This)->lpVtbl -> GetAttributeInfo(This,Id,pInfoIDs,pInfoValues) ) 

#define ISdoDictionaryOld_EnumAttributeValues(This,Id,pValueIds,pValuesDesc)	\
    ( (This)->lpVtbl -> EnumAttributeValues(This,Id,pValueIds,pValuesDesc) ) 

#define ISdoDictionaryOld_CreateAttribute(This,Id,ppAttributeObject)	\
    ( (This)->lpVtbl -> CreateAttribute(This,Id,ppAttributeObject) ) 

#define ISdoDictionaryOld_GetAttributeID(This,bstrAttributeName,pId)	\
    ( (This)->lpVtbl -> GetAttributeID(This,bstrAttributeName,pId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISdoDictionaryOld_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SdoMachine;

#ifdef __cplusplus

class DECLSPEC_UUID("E9218AE7-9E91-11D1-BF60-0080C7846BC0")
SdoMachine;
#endif
#endif /* __SDOIASLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SecExt.h ===
//+-----------------------------------------------------------------------
//
// Microsoft Windows
//
// Copyright (c) Microsoft Corporation 1991-1999
//
// File:        secext.h
//
// Contents:    Security function prototypes for functions not part of
//              the SSPI interface. This file should not be directly
//              included - include security.h instead.
//
//
//
//------------------------------------------------------------------------



#ifndef __SECEXT_H__
#define __SECEXT_H__
#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif


//
// Extended Name APIs for ADS
//


typedef enum
{
    // Examples for the following formats assume a fictitous company
    // which hooks into the global X.500 and DNS name spaces as follows.
    //
    // Enterprise root domain in DNS is
    //
    //      widget.com
    //
    // Enterprise root domain in X.500 (RFC 1779 format) is
    //
    //      O=Widget, C=US
    //
    // There exists the child domain
    //
    //      engineering.widget.com
    //
    // equivalent to
    //
    //      OU=Engineering, O=Widget, C=US
    //
    // There exists a container within the Engineering domain
    //
    //      OU=Software, OU=Engineering, O=Widget, C=US
    //
    // There exists the user
    //
    //      CN=John Doe, OU=Software, OU=Engineering, O=Widget, C=US
    //
    // And this user's downlevel (pre-ADS) user name is
    //
    //      Engineering\JohnDoe

    // unknown name type
    NameUnknown = 0,

    // CN=John Doe, OU=Software, OU=Engineering, O=Widget, C=US
    NameFullyQualifiedDN = 1,

    // Engineering\JohnDoe
    NameSamCompatible = 2,

    // Probably "John Doe" but could be something else.  I.e. The
    // display name is not necessarily the defining RDN.
    NameDisplay = 3,


    // String-ized GUID as returned by IIDFromString().
    // eg: {4fa050f0-f561-11cf-bdd9-00aa003a77b6}
    NameUniqueId = 6,

    // engineering.widget.com/software/John Doe
    NameCanonical = 7,

    // someone@example.com
    NameUserPrincipal = 8,

    // Same as NameCanonical except that rightmost '/' is
    // replaced with '\n' - even in domain-only case.
    // eg: engineering.widget.com/software\nJohn Doe
    NameCanonicalEx = 9,

    // www/srv.engineering.com/engineering.com
    NameServicePrincipal = 10,

    // DNS domain name + SAM username
    // eg: engineering.widget.com\JohnDoe
    NameDnsDomain = 12

} EXTENDED_NAME_FORMAT, * PEXTENDED_NAME_FORMAT ;


BOOLEAN
SEC_ENTRY
GetUserNameExA(
    __in EXTENDED_NAME_FORMAT  NameFormat,
    __out_ecount(*nSize) LPSTR lpNameBuffer,
    __inout PULONG nSize
    );
BOOLEAN
SEC_ENTRY
GetUserNameExW(
    __in EXTENDED_NAME_FORMAT NameFormat,
    __out_ecount_opt(*nSize) LPWSTR lpNameBuffer,
    __inout PULONG nSize
    );

#ifdef UNICODE
#define GetUserNameEx   GetUserNameExW
#else
#define GetUserNameEx   GetUserNameExA
#endif

BOOLEAN
SEC_ENTRY
GetComputerObjectNameA(
    __in EXTENDED_NAME_FORMAT  NameFormat,
    __out_ecount(*nSize) LPSTR lpNameBuffer,
    __inout PULONG nSize
    );
BOOLEAN
SEC_ENTRY
GetComputerObjectNameW(
    __in EXTENDED_NAME_FORMAT NameFormat,
    __out_ecount(*nSize) LPWSTR lpNameBuffer,
    __inout PULONG nSize
    );

#ifdef UNICODE
#define GetComputerObjectName   GetComputerObjectNameW
#else
#define GetComputerObjectName   GetComputerObjectNameA
#endif

BOOLEAN
SEC_ENTRY
TranslateNameA(
    __in LPCSTR lpAccountName,
    __in EXTENDED_NAME_FORMAT AccountNameFormat,
    __in EXTENDED_NAME_FORMAT DesiredNameFormat,
    __out_ecount(*nSize) LPSTR lpTranslatedName,
    __inout PULONG nSize
    );
BOOLEAN
SEC_ENTRY
TranslateNameW(
    __in LPCWSTR lpAccountName,
    __in EXTENDED_NAME_FORMAT AccountNameFormat,
    __in EXTENDED_NAME_FORMAT DesiredNameFormat,
    __out_ecount(*nSize) LPWSTR lpTranslatedName,
    __inout PULONG nSize
    );
#ifdef UNICODE
#define TranslateName   TranslateNameW
#else
#define TranslateName   TranslateNameA
#endif

#ifdef __cplusplus
}
#endif

#endif // __SECEXT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\Sens.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    sens.h

Abstract:

    This file is the master header file for Event System events published
    and subscribed by the System Event Notification service (SENS).

Author:

    Gopal Parupudi    <GopalP>

[Notes:]

    optional-notes

Revision History:

    GopalP          12/8/1997         Start.

--*/


#ifndef __SENS_H__
#define __SENS_H__

#if _MSC_VER > 1000
#pragma once
#endif

//
// Constants
//

#define CONNECTION_LAN   0x00000001
#define CONNECTION_WAN   0x00000002
#define CONNECTION_AOL   0x00000004




//
// SENS Guids related to Event System
//


DEFINE_GUID(
    SENSGUID_PUBLISHER,             /* 5fee1bd6-5b9b-11d1-8dd2-00aa004abd5e */
    0x5fee1bd6,
    0x5b9b,
    0x11d1,
    0x8d, 0xd2, 0x00, 0xaa, 0x00, 0x4a, 0xbd, 0x5e
);

DEFINE_GUID(
    SENSGUID_SUBSCRIBER_LCE,        /* d3938ab0-5b9d-11d1-8dd2-00aa004abd5e */
    0xd3938ab0,
    0x5b9d,
    0x11d1,
    0x8d, 0xd2, 0x00, 0xaa, 0x00, 0x4a, 0xbd, 0x5e
);

DEFINE_GUID(
    SENSGUID_SUBSCRIBER_WININET,    /* d3938ab5-5b9d-11d1-8dd2-00aa004abd5e */
    0xd3938ab5,
    0x5b9d,
    0x11d1,
    0x8d, 0xd2, 0x00, 0xaa, 0x00, 0x4a, 0xbd, 0x5e
);





//
// Classes of Events published by SENS
//

DEFINE_GUID(
    SENSGUID_EVENTCLASS_NETWORK,        /* d5978620-5b9f-11d1-8dd2-00aa004abd5e */
    0xd5978620,
    0x5b9f,
    0x11d1,
    0x8d, 0xd2, 0x00, 0xaa, 0x00, 0x4a, 0xbd, 0x5e
);

DEFINE_GUID(
    SENSGUID_EVENTCLASS_LOGON,          /* d5978630-5b9f-11d1-8dd2-00aa004abd5e */
    0xd5978630,
    0x5b9f,
    0x11d1,
    0x8d, 0xd2, 0x00, 0xaa, 0x00, 0x4a, 0xbd, 0x5e
);

DEFINE_GUID(
    SENSGUID_EVENTCLASS_ONNOW,          /* d5978640-5b9f-11d1-8dd2-00aa004abd5e */
    0xd5978640,
    0x5b9f,
    0x11d1,
    0x8d, 0xd2, 0x00, 0xaa, 0x00, 0x4a, 0xbd, 0x5e
);

DEFINE_GUID(
    SENSGUID_EVENTCLASS_LOGON2,         /* d5978650-5b9f-11d1-8dd2-00aa004abd5e */
    0xd5978650,
    0x5b9f,
    0x11d1,
    0x8d, 0xd2, 0x00, 0xaa, 0x00, 0x4a, 0xbd, 0x5e
);


#endif // __SENS_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SetupDD.h ===
// setupdd.h - Public definitions for users of SETUPDD.DLL
//
//

#ifndef _SETUPDD_H_
#define _SETUPDD_H_

// NMInstallNTDisplayDriver
//
// The public entry point of SETUPDD.DLL.  Installs the NetMeeting display
// driver for Windows NT. 
// 
// Parameters:
//	HWND - Handle of the parent window used by the setup engine when 
//		displaying dialogs).
//
// Returns:
//	TRUE if the driver was successfully installed.  In this event,
//		the caller should prompt the user to restart the system for
//		the changes to take effect.
//  FALSE if this version of the OS does not support this driver
//		(NT 4.0 SP 3 or later, or NT 4.x, x > 0, is required) or if
//		an error occurs during installation.
//
// Limitations:
//	NetMeeting must already be installed on the system for this function
//		to work.
//	This function does not detect if the display driver is already
//		installed and enabled.

BOOL DECLSPEC_IMPORT WINAPI NMInstallNTDisplayDriver(HWND hWnd);

#endif // _SETUPDD_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\Sfc.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Module Name:

    sfc.h

Abstract:

    Header file for public SFC interfaces.

Author:

    Wesley Witt (wesw) 2-Feb-1999

Revision History:

--*/



#ifndef _SFC_
#define _SFC_


#ifdef __cplusplus
extern "C" {

#endif

#define SFC_DISABLE_NORMAL          0
#define SFC_DISABLE_ASK             1
#define SFC_DISABLE_ONCE            2
#define SFC_DISABLE_SETUP           3
#define SFC_DISABLE_NOPOPUPS        4

#define SFC_SCAN_NORMAL             0
#define SFC_SCAN_ALWAYS             1
#define SFC_SCAN_ONCE               2
#define SFC_SCAN_IMMEDIATE          3

#define SFC_QUOTA_DEFAULT           50
#define SFC_QUOTA_ALL_FILES         ((ULONG)-1)

#define SFC_IDLE_TRIGGER       L"WFP_IDLE_TRIGGER"

typedef struct _PROTECTED_FILE_DATA {
    WCHAR   FileName[MAX_PATH];
    DWORD   FileNumber;
} PROTECTED_FILE_DATA, *PPROTECTED_FILE_DATA;


BOOL
WINAPI
SfcGetNextProtectedFile(
    IN HANDLE RpcHandle, // must be NULL
    IN PPROTECTED_FILE_DATA ProtFileData
    );

BOOL
WINAPI
SfcIsFileProtected(
    IN HANDLE RpcHandle, // must be NULL
    IN LPCWSTR ProtFileName
    );

BOOL
WINAPI
SfcIsKeyProtected(
    IN HKEY KeyHandle,
    IN LPCWSTR SubKeyName OPTIONAL,
    IN REGSAM KeySam 
    ); 

//
// new APIs which are not currently supported, but are stubbed out
//
BOOL
WINAPI
SfpVerifyFile(
    IN LPCSTR pszFileName,
    IN LPSTR  pszError,
    IN DWORD   dwErrSize
    );    




#ifdef __cplusplus
}
#endif

#endif // _SFC_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\shdispid.h ===
#pragma once

#ifndef _SHDISPID_H_
#define _SHDISPID_H_

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//  File: shdispid.h
//
//--------------------------------------------------------------------------

// define the events for the shell folder view
#define DISPID_SELECTIONCHANGED      200    // The Selected Items Changed
#define DISPID_FILELISTENUMDONE      201    // Done enumerating the shell folder
#define DISPID_VERBINVOKED           202    // A verb (either from the main or context menu) was invoked in the folder view
#define DISPID_DEFAULTVERBINVOKED    203    // default verb (either from the main or context menu) was invoked in the folder view
#define DISPID_BEGINDRAG             204    // user clicked on an item
#define DISPID_VIEWMODECHANGED       205    // The ListViewMode Changed
#define DISPID_NOITEMSTATE_CHANGED   206    // We went from 0->some or some->0 items in the view
#define DISPID_CONTENTSCHANGED       207    // contents of the view have changed somehow
#define DISPID_FOCUSCHANGED          208    // The Focused Item Changed
#define DISPID_CHECKSTATECHANGED     209    // Checkbox state changed.
#define DISPID_ORDERCHANGED          210    // The order of items changed
#define DISPID_VIEWPAINTDONE         211    // The enumerated items have been inserted into the view and painted
#define DISPID_COLUMNSCHANGED        212    // The set of visible details columns changed
#define DISPID_CTRLMOUSEWHEEL        213    // The mousewheel has been moved while the CTRL key was down
#define DISPID_SORTDONE              214    // Done sorting the shell folder
#define DISPID_ICONSIZECHANGED       215    // The icon size changed in the view
#define DISPID_ITEMSETOPERATIONSDONE 216    // Completely done navigating.  This includes enum, sort, filter, all background tasks.
#define DISPID_FOLDERCHANGED         217    // The state of the folder has changed
#define DISPID_FILTERINVOKED         218    // Some filter changed
#define DISPID_WORDWHEELEDITED       219    // Text in WordWheel changed
#define DISPID_SELECTEDITEMCHANGED   220    // One of the selected items has changed (not the same as a selection change)
#define DISPID_EXPLORERWINDOWREADY   221    // Explorer window is open, been painted and is ready
#define DISPID_UPDATEIMAGE           222    // A SHCNE_UPDATEIMAGE notification was received

// define the events for the ComboBoxEx control
#define DISPID_ENTERPRESSED         200     // The user hit Enter or Return


// Define Events for search object
#define DISPID_SEARCHCOMMAND_START      1
#define DISPID_SEARCHCOMMAND_COMPLETE   2
#define DISPID_SEARCHCOMMAND_ABORT      3
#define DISPID_SEARCHCOMMAND_UPDATE     4
#define DISPID_SEARCHCOMMAND_PROGRESSTEXT 5
#define DISPID_SEARCHCOMMAND_ERROR      6
#define DISPID_SEARCHCOMMAND_RESTORE    7


// Shell Add/Remove Programs events
#define DISPID_IADCCTL_DIRTY            0x100
#define DISPID_IADCCTL_PUBCAT           0x101
#define DISPID_IADCCTL_SORT             0x102
#define DISPID_IADCCTL_FORCEX86         0x103
#define DISPID_IADCCTL_SHOWPOSTSETUP    0x104
#define DISPID_IADCCTL_ONDOMAIN         0x105
#define DISPID_IADCCTL_DEFAULTCAT       0x106

#endif // EXDISPID_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\segment.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for segment.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __segment_h__
#define __segment_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IMSVidRect_FWD_DEFINED__
#define __IMSVidRect_FWD_DEFINED__
typedef interface IMSVidRect IMSVidRect;
#endif 	/* __IMSVidRect_FWD_DEFINED__ */


#ifndef __IMSVidGraphSegmentContainer_FWD_DEFINED__
#define __IMSVidGraphSegmentContainer_FWD_DEFINED__
typedef interface IMSVidGraphSegmentContainer IMSVidGraphSegmentContainer;
#endif 	/* __IMSVidGraphSegmentContainer_FWD_DEFINED__ */


#ifndef __IMSVidGraphSegment_FWD_DEFINED__
#define __IMSVidGraphSegment_FWD_DEFINED__
typedef interface IMSVidGraphSegment IMSVidGraphSegment;
#endif 	/* __IMSVidGraphSegment_FWD_DEFINED__ */


#ifndef __IMSVidGraphSegmentUserInput_FWD_DEFINED__
#define __IMSVidGraphSegmentUserInput_FWD_DEFINED__
typedef interface IMSVidGraphSegmentUserInput IMSVidGraphSegmentUserInput;
#endif 	/* __IMSVidGraphSegmentUserInput_FWD_DEFINED__ */


#ifndef __IMSVidCompositionSegment_FWD_DEFINED__
#define __IMSVidCompositionSegment_FWD_DEFINED__
typedef interface IMSVidCompositionSegment IMSVidCompositionSegment;
#endif 	/* __IMSVidCompositionSegment_FWD_DEFINED__ */


#ifndef __IEnumMSVidGraphSegment_FWD_DEFINED__
#define __IEnumMSVidGraphSegment_FWD_DEFINED__
typedef interface IEnumMSVidGraphSegment IEnumMSVidGraphSegment;
#endif 	/* __IEnumMSVidGraphSegment_FWD_DEFINED__ */


#ifndef __IMSVidVRGraphSegment_FWD_DEFINED__
#define __IMSVidVRGraphSegment_FWD_DEFINED__
typedef interface IMSVidVRGraphSegment IMSVidVRGraphSegment;
#endif 	/* __IMSVidVRGraphSegment_FWD_DEFINED__ */


#ifndef __IMSVidDevice_FWD_DEFINED__
#define __IMSVidDevice_FWD_DEFINED__
typedef interface IMSVidDevice IMSVidDevice;
#endif 	/* __IMSVidDevice_FWD_DEFINED__ */


#ifndef __IMSVidDevice2_FWD_DEFINED__
#define __IMSVidDevice2_FWD_DEFINED__
typedef interface IMSVidDevice2 IMSVidDevice2;
#endif 	/* __IMSVidDevice2_FWD_DEFINED__ */


#ifndef __IMSVidInputDevice_FWD_DEFINED__
#define __IMSVidInputDevice_FWD_DEFINED__
typedef interface IMSVidInputDevice IMSVidInputDevice;
#endif 	/* __IMSVidInputDevice_FWD_DEFINED__ */


#ifndef __IMSVidDeviceEvent_FWD_DEFINED__
#define __IMSVidDeviceEvent_FWD_DEFINED__
typedef interface IMSVidDeviceEvent IMSVidDeviceEvent;
#endif 	/* __IMSVidDeviceEvent_FWD_DEFINED__ */


#ifndef __IMSVidInputDeviceEvent_FWD_DEFINED__
#define __IMSVidInputDeviceEvent_FWD_DEFINED__
typedef interface IMSVidInputDeviceEvent IMSVidInputDeviceEvent;
#endif 	/* __IMSVidInputDeviceEvent_FWD_DEFINED__ */


#ifndef __IMSVidVideoInputDevice_FWD_DEFINED__
#define __IMSVidVideoInputDevice_FWD_DEFINED__
typedef interface IMSVidVideoInputDevice IMSVidVideoInputDevice;
#endif 	/* __IMSVidVideoInputDevice_FWD_DEFINED__ */


#ifndef __IMSVidPlayback_FWD_DEFINED__
#define __IMSVidPlayback_FWD_DEFINED__
typedef interface IMSVidPlayback IMSVidPlayback;
#endif 	/* __IMSVidPlayback_FWD_DEFINED__ */


#ifndef __IMSVidPlaybackEvent_FWD_DEFINED__
#define __IMSVidPlaybackEvent_FWD_DEFINED__
typedef interface IMSVidPlaybackEvent IMSVidPlaybackEvent;
#endif 	/* __IMSVidPlaybackEvent_FWD_DEFINED__ */


#ifndef __IMSVidTuner_FWD_DEFINED__
#define __IMSVidTuner_FWD_DEFINED__
typedef interface IMSVidTuner IMSVidTuner;
#endif 	/* __IMSVidTuner_FWD_DEFINED__ */


#ifndef __IMSVidTunerEvent_FWD_DEFINED__
#define __IMSVidTunerEvent_FWD_DEFINED__
typedef interface IMSVidTunerEvent IMSVidTunerEvent;
#endif 	/* __IMSVidTunerEvent_FWD_DEFINED__ */


#ifndef __IMSVidAnalogTuner_FWD_DEFINED__
#define __IMSVidAnalogTuner_FWD_DEFINED__
typedef interface IMSVidAnalogTuner IMSVidAnalogTuner;
#endif 	/* __IMSVidAnalogTuner_FWD_DEFINED__ */


#ifndef __IMSVidAnalogTuner2_FWD_DEFINED__
#define __IMSVidAnalogTuner2_FWD_DEFINED__
typedef interface IMSVidAnalogTuner2 IMSVidAnalogTuner2;
#endif 	/* __IMSVidAnalogTuner2_FWD_DEFINED__ */


#ifndef __IMSVidAnalogTunerEvent_FWD_DEFINED__
#define __IMSVidAnalogTunerEvent_FWD_DEFINED__
typedef interface IMSVidAnalogTunerEvent IMSVidAnalogTunerEvent;
#endif 	/* __IMSVidAnalogTunerEvent_FWD_DEFINED__ */


#ifndef __IMSVidFilePlayback_FWD_DEFINED__
#define __IMSVidFilePlayback_FWD_DEFINED__
typedef interface IMSVidFilePlayback IMSVidFilePlayback;
#endif 	/* __IMSVidFilePlayback_FWD_DEFINED__ */


#ifndef __IMSVidFilePlayback2_FWD_DEFINED__
#define __IMSVidFilePlayback2_FWD_DEFINED__
typedef interface IMSVidFilePlayback2 IMSVidFilePlayback2;
#endif 	/* __IMSVidFilePlayback2_FWD_DEFINED__ */


#ifndef __IMSVidFilePlaybackEvent_FWD_DEFINED__
#define __IMSVidFilePlaybackEvent_FWD_DEFINED__
typedef interface IMSVidFilePlaybackEvent IMSVidFilePlaybackEvent;
#endif 	/* __IMSVidFilePlaybackEvent_FWD_DEFINED__ */


#ifndef __IMSVidWebDVD_FWD_DEFINED__
#define __IMSVidWebDVD_FWD_DEFINED__
typedef interface IMSVidWebDVD IMSVidWebDVD;
#endif 	/* __IMSVidWebDVD_FWD_DEFINED__ */


#ifndef __IMSVidWebDVDEvent_FWD_DEFINED__
#define __IMSVidWebDVDEvent_FWD_DEFINED__
typedef interface IMSVidWebDVDEvent IMSVidWebDVDEvent;
#endif 	/* __IMSVidWebDVDEvent_FWD_DEFINED__ */


#ifndef __IMSVidWebDVDAdm_FWD_DEFINED__
#define __IMSVidWebDVDAdm_FWD_DEFINED__
typedef interface IMSVidWebDVDAdm IMSVidWebDVDAdm;
#endif 	/* __IMSVidWebDVDAdm_FWD_DEFINED__ */


#ifndef __IMSVidOutputDevice_FWD_DEFINED__
#define __IMSVidOutputDevice_FWD_DEFINED__
typedef interface IMSVidOutputDevice IMSVidOutputDevice;
#endif 	/* __IMSVidOutputDevice_FWD_DEFINED__ */


#ifndef __IMSVidOutputDeviceEvent_FWD_DEFINED__
#define __IMSVidOutputDeviceEvent_FWD_DEFINED__
typedef interface IMSVidOutputDeviceEvent IMSVidOutputDeviceEvent;
#endif 	/* __IMSVidOutputDeviceEvent_FWD_DEFINED__ */


#ifndef __IMSVidFeature_FWD_DEFINED__
#define __IMSVidFeature_FWD_DEFINED__
typedef interface IMSVidFeature IMSVidFeature;
#endif 	/* __IMSVidFeature_FWD_DEFINED__ */


#ifndef __IMSVidFeatureEvent_FWD_DEFINED__
#define __IMSVidFeatureEvent_FWD_DEFINED__
typedef interface IMSVidFeatureEvent IMSVidFeatureEvent;
#endif 	/* __IMSVidFeatureEvent_FWD_DEFINED__ */


#ifndef __IMSVidEncoder_FWD_DEFINED__
#define __IMSVidEncoder_FWD_DEFINED__
typedef interface IMSVidEncoder IMSVidEncoder;
#endif 	/* __IMSVidEncoder_FWD_DEFINED__ */


#ifndef __IMSVidXDS_FWD_DEFINED__
#define __IMSVidXDS_FWD_DEFINED__
typedef interface IMSVidXDS IMSVidXDS;
#endif 	/* __IMSVidXDS_FWD_DEFINED__ */


#ifndef __IMSVidXDSEvent_FWD_DEFINED__
#define __IMSVidXDSEvent_FWD_DEFINED__
typedef interface IMSVidXDSEvent IMSVidXDSEvent;
#endif 	/* __IMSVidXDSEvent_FWD_DEFINED__ */


#ifndef __IMSVidDataServices_FWD_DEFINED__
#define __IMSVidDataServices_FWD_DEFINED__
typedef interface IMSVidDataServices IMSVidDataServices;
#endif 	/* __IMSVidDataServices_FWD_DEFINED__ */


#ifndef __IMSVidDataServicesEvent_FWD_DEFINED__
#define __IMSVidDataServicesEvent_FWD_DEFINED__
typedef interface IMSVidDataServicesEvent IMSVidDataServicesEvent;
#endif 	/* __IMSVidDataServicesEvent_FWD_DEFINED__ */


#ifndef __IMSVidClosedCaptioning_FWD_DEFINED__
#define __IMSVidClosedCaptioning_FWD_DEFINED__
typedef interface IMSVidClosedCaptioning IMSVidClosedCaptioning;
#endif 	/* __IMSVidClosedCaptioning_FWD_DEFINED__ */


#ifndef __IMSVidClosedCaptioning2_FWD_DEFINED__
#define __IMSVidClosedCaptioning2_FWD_DEFINED__
typedef interface IMSVidClosedCaptioning2 IMSVidClosedCaptioning2;
#endif 	/* __IMSVidClosedCaptioning2_FWD_DEFINED__ */


#ifndef __IMSVidClosedCaptioning3_FWD_DEFINED__
#define __IMSVidClosedCaptioning3_FWD_DEFINED__
typedef interface IMSVidClosedCaptioning3 IMSVidClosedCaptioning3;
#endif 	/* __IMSVidClosedCaptioning3_FWD_DEFINED__ */


#ifndef __IMSVidVideoRenderer_FWD_DEFINED__
#define __IMSVidVideoRenderer_FWD_DEFINED__
typedef interface IMSVidVideoRenderer IMSVidVideoRenderer;
#endif 	/* __IMSVidVideoRenderer_FWD_DEFINED__ */


#ifndef __IMSVidVideoRendererEvent_FWD_DEFINED__
#define __IMSVidVideoRendererEvent_FWD_DEFINED__
typedef interface IMSVidVideoRendererEvent IMSVidVideoRendererEvent;
#endif 	/* __IMSVidVideoRendererEvent_FWD_DEFINED__ */


#ifndef __IMSVidGenericSink_FWD_DEFINED__
#define __IMSVidGenericSink_FWD_DEFINED__
typedef interface IMSVidGenericSink IMSVidGenericSink;
#endif 	/* __IMSVidGenericSink_FWD_DEFINED__ */


#ifndef __IMSVidGenericSink2_FWD_DEFINED__
#define __IMSVidGenericSink2_FWD_DEFINED__
typedef interface IMSVidGenericSink2 IMSVidGenericSink2;
#endif 	/* __IMSVidGenericSink2_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferRecordingControl_FWD_DEFINED__
#define __IMSVidStreamBufferRecordingControl_FWD_DEFINED__
typedef interface IMSVidStreamBufferRecordingControl IMSVidStreamBufferRecordingControl;
#endif 	/* __IMSVidStreamBufferRecordingControl_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSink_FWD_DEFINED__
#define __IMSVidStreamBufferSink_FWD_DEFINED__
typedef interface IMSVidStreamBufferSink IMSVidStreamBufferSink;
#endif 	/* __IMSVidStreamBufferSink_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSink2_FWD_DEFINED__
#define __IMSVidStreamBufferSink2_FWD_DEFINED__
typedef interface IMSVidStreamBufferSink2 IMSVidStreamBufferSink2;
#endif 	/* __IMSVidStreamBufferSink2_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSink3_FWD_DEFINED__
#define __IMSVidStreamBufferSink3_FWD_DEFINED__
typedef interface IMSVidStreamBufferSink3 IMSVidStreamBufferSink3;
#endif 	/* __IMSVidStreamBufferSink3_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSinkEvent_FWD_DEFINED__
#define __IMSVidStreamBufferSinkEvent_FWD_DEFINED__
typedef interface IMSVidStreamBufferSinkEvent IMSVidStreamBufferSinkEvent;
#endif 	/* __IMSVidStreamBufferSinkEvent_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSinkEvent2_FWD_DEFINED__
#define __IMSVidStreamBufferSinkEvent2_FWD_DEFINED__
typedef interface IMSVidStreamBufferSinkEvent2 IMSVidStreamBufferSinkEvent2;
#endif 	/* __IMSVidStreamBufferSinkEvent2_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSinkEvent3_FWD_DEFINED__
#define __IMSVidStreamBufferSinkEvent3_FWD_DEFINED__
typedef interface IMSVidStreamBufferSinkEvent3 IMSVidStreamBufferSinkEvent3;
#endif 	/* __IMSVidStreamBufferSinkEvent3_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSource_FWD_DEFINED__
#define __IMSVidStreamBufferSource_FWD_DEFINED__
typedef interface IMSVidStreamBufferSource IMSVidStreamBufferSource;
#endif 	/* __IMSVidStreamBufferSource_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSource2_FWD_DEFINED__
#define __IMSVidStreamBufferSource2_FWD_DEFINED__
typedef interface IMSVidStreamBufferSource2 IMSVidStreamBufferSource2;
#endif 	/* __IMSVidStreamBufferSource2_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSourceEvent_FWD_DEFINED__
#define __IMSVidStreamBufferSourceEvent_FWD_DEFINED__
typedef interface IMSVidStreamBufferSourceEvent IMSVidStreamBufferSourceEvent;
#endif 	/* __IMSVidStreamBufferSourceEvent_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSourceEvent2_FWD_DEFINED__
#define __IMSVidStreamBufferSourceEvent2_FWD_DEFINED__
typedef interface IMSVidStreamBufferSourceEvent2 IMSVidStreamBufferSourceEvent2;
#endif 	/* __IMSVidStreamBufferSourceEvent2_FWD_DEFINED__ */


#ifndef __IMSVidStreamBufferSourceEvent3_FWD_DEFINED__
#define __IMSVidStreamBufferSourceEvent3_FWD_DEFINED__
typedef interface IMSVidStreamBufferSourceEvent3 IMSVidStreamBufferSourceEvent3;
#endif 	/* __IMSVidStreamBufferSourceEvent3_FWD_DEFINED__ */


#ifndef __IMSVidVideoRenderer2_FWD_DEFINED__
#define __IMSVidVideoRenderer2_FWD_DEFINED__
typedef interface IMSVidVideoRenderer2 IMSVidVideoRenderer2;
#endif 	/* __IMSVidVideoRenderer2_FWD_DEFINED__ */


#ifndef __IMSVidVideoRendererEvent2_FWD_DEFINED__
#define __IMSVidVideoRendererEvent2_FWD_DEFINED__
typedef interface IMSVidVideoRendererEvent2 IMSVidVideoRendererEvent2;
#endif 	/* __IMSVidVideoRendererEvent2_FWD_DEFINED__ */


#ifndef __IMSVidVMR9_FWD_DEFINED__
#define __IMSVidVMR9_FWD_DEFINED__
typedef interface IMSVidVMR9 IMSVidVMR9;
#endif 	/* __IMSVidVMR9_FWD_DEFINED__ */


#ifndef __IMSVidEVR_FWD_DEFINED__
#define __IMSVidEVR_FWD_DEFINED__
typedef interface IMSVidEVR IMSVidEVR;
#endif 	/* __IMSVidEVR_FWD_DEFINED__ */


#ifndef __IMSVidEVREvent_FWD_DEFINED__
#define __IMSVidEVREvent_FWD_DEFINED__
typedef interface IMSVidEVREvent IMSVidEVREvent;
#endif 	/* __IMSVidEVREvent_FWD_DEFINED__ */


#ifndef __IMSVidAudioRenderer_FWD_DEFINED__
#define __IMSVidAudioRenderer_FWD_DEFINED__
typedef interface IMSVidAudioRenderer IMSVidAudioRenderer;
#endif 	/* __IMSVidAudioRenderer_FWD_DEFINED__ */


#ifndef __IMSVidAudioRendererEvent_FWD_DEFINED__
#define __IMSVidAudioRendererEvent_FWD_DEFINED__
typedef interface IMSVidAudioRendererEvent IMSVidAudioRendererEvent;
#endif 	/* __IMSVidAudioRendererEvent_FWD_DEFINED__ */


#ifndef __IMSVidInputDevices_FWD_DEFINED__
#define __IMSVidInputDevices_FWD_DEFINED__
typedef interface IMSVidInputDevices IMSVidInputDevices;
#endif 	/* __IMSVidInputDevices_FWD_DEFINED__ */


#ifndef __IMSVidOutputDevices_FWD_DEFINED__
#define __IMSVidOutputDevices_FWD_DEFINED__
typedef interface IMSVidOutputDevices IMSVidOutputDevices;
#endif 	/* __IMSVidOutputDevices_FWD_DEFINED__ */


#ifndef __IMSVidVideoRendererDevices_FWD_DEFINED__
#define __IMSVidVideoRendererDevices_FWD_DEFINED__
typedef interface IMSVidVideoRendererDevices IMSVidVideoRendererDevices;
#endif 	/* __IMSVidVideoRendererDevices_FWD_DEFINED__ */


#ifndef __IMSVidAudioRendererDevices_FWD_DEFINED__
#define __IMSVidAudioRendererDevices_FWD_DEFINED__
typedef interface IMSVidAudioRendererDevices IMSVidAudioRendererDevices;
#endif 	/* __IMSVidAudioRendererDevices_FWD_DEFINED__ */


#ifndef __IMSVidFeatures_FWD_DEFINED__
#define __IMSVidFeatures_FWD_DEFINED__
typedef interface IMSVidFeatures IMSVidFeatures;
#endif 	/* __IMSVidFeatures_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "strmif.h"
#include "tuner.h"
#include "tvratings.h"
#include "evr.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_segment_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1999-2000.
//
//--------------------------------------------------------------------------
#pragma once
#include <olectl.h>
typedef /* [public] */ 
enum __MIDL___MIDL_itf_segment_0000_0000_0001
    {	dispidName	= 0,
	dispidStatus	= ( dispidName + 1 ) ,
	dispidDevImageSourceWidth	= ( dispidStatus + 1 ) ,
	dispidDevImageSourceHeight	= ( dispidDevImageSourceWidth + 1 ) ,
	dispidDevCountryCode	= ( dispidDevImageSourceHeight + 1 ) ,
	dispidDevOverScan	= ( dispidDevCountryCode + 1 ) ,
	dispidSegment	= ( dispidDevOverScan + 1 ) ,
	dispidDevVolume	= ( dispidSegment + 1 ) ,
	dispidDevBalance	= ( dispidDevVolume + 1 ) ,
	dispidDevPower	= ( dispidDevBalance + 1 ) ,
	dispidTuneChan	= ( dispidDevPower + 1 ) ,
	dispidDevVideoSubchannel	= ( dispidTuneChan + 1 ) ,
	dispidDevAudioSubchannel	= ( dispidDevVideoSubchannel + 1 ) ,
	dispidChannelAvailable	= ( dispidDevAudioSubchannel + 1 ) ,
	dispidDevVideoFrequency	= ( dispidChannelAvailable + 1 ) ,
	dispidDevAudioFrequency	= ( dispidDevVideoFrequency + 1 ) ,
	dispidCount	= ( dispidDevAudioFrequency + 1 ) ,
	dispidDevFileName	= ( dispidCount + 1 ) ,
	dispidVisible	= ( dispidDevFileName + 1 ) ,
	dispidOwner	= ( dispidVisible + 1 ) ,
	dispidMessageDrain	= ( dispidOwner + 1 ) ,
	dispidViewable	= ( dispidMessageDrain + 1 ) ,
	dispidDevView	= ( dispidViewable + 1 ) ,
	dispidKSCat	= ( dispidDevView + 1 ) ,
	dispidCLSID	= ( dispidKSCat + 1 ) ,
	dispid_KSCat	= ( dispidCLSID + 1 ) ,
	dispid_CLSID	= ( dispid_KSCat + 1 ) ,
	dispidTune	= ( dispid_CLSID + 1 ) ,
	dispidTS	= ( dispidTune + 1 ) ,
	dispidDevSAP	= ( dispidTS + 1 ) ,
	dispidClip	= ( dispidDevSAP + 1 ) ,
	dispidRequestedClipRect	= ( dispidClip + 1 ) ,
	dispidClippedSourceRect	= ( dispidRequestedClipRect + 1 ) ,
	dispidAvailableSourceRect	= ( dispidClippedSourceRect + 1 ) ,
	dispidMediaPosition	= ( dispidAvailableSourceRect + 1 ) ,
	dispidDevRun	= ( dispidMediaPosition + 1 ) ,
	dispidDevPause	= ( dispidDevRun + 1 ) ,
	dispidDevStop	= ( dispidDevPause + 1 ) ,
	dispidCCEnable	= ( dispidDevStop + 1 ) ,
	dispidDevStep	= ( dispidCCEnable + 1 ) ,
	dispidDevCanStep	= ( dispidDevStep + 1 ) ,
	dispidSourceSize	= ( dispidDevCanStep + 1 ) ,
	dispid_playtitle	= ( dispidSourceSize + 1 ) ,
	dispid_playchapterintitle	= ( dispid_playtitle + 1 ) ,
	dispid_playchapter	= ( dispid_playchapterintitle + 1 ) ,
	dispid_playchaptersautostop	= ( dispid_playchapter + 1 ) ,
	dispid_playattime	= ( dispid_playchaptersautostop + 1 ) ,
	dispid_playattimeintitle	= ( dispid_playattime + 1 ) ,
	dispid_playperiodintitleautostop	= ( dispid_playattimeintitle + 1 ) ,
	dispid_replaychapter	= ( dispid_playperiodintitleautostop + 1 ) ,
	dispid_playprevchapter	= ( dispid_replaychapter + 1 ) ,
	dispid_playnextchapter	= ( dispid_playprevchapter + 1 ) ,
	dispid_playforwards	= ( dispid_playnextchapter + 1 ) ,
	dispid_playbackwards	= ( dispid_playforwards + 1 ) ,
	dispid_stilloff	= ( dispid_playbackwards + 1 ) ,
	dispid_audiolanguage	= ( dispid_stilloff + 1 ) ,
	dispid_showmenu	= ( dispid_audiolanguage + 1 ) ,
	dispid_resume	= ( dispid_showmenu + 1 ) ,
	dispid_returnfromsubmenu	= ( dispid_resume + 1 ) ,
	dispid_buttonsavailable	= ( dispid_returnfromsubmenu + 1 ) ,
	dispid_currentbutton	= ( dispid_buttonsavailable + 1 ) ,
	dispid_SelectAndActivateButton	= ( dispid_currentbutton + 1 ) ,
	dispid_ActivateButton	= ( dispid_SelectAndActivateButton + 1 ) ,
	dispid_SelectRightButton	= ( dispid_ActivateButton + 1 ) ,
	dispid_SelectLeftButton	= ( dispid_SelectRightButton + 1 ) ,
	dispid_SelectLowerButton	= ( dispid_SelectLeftButton + 1 ) ,
	dispid_SelectUpperButton	= ( dispid_SelectLowerButton + 1 ) ,
	dispid_ActivateAtPosition	= ( dispid_SelectUpperButton + 1 ) ,
	dispid_SelectAtPosition	= ( dispid_ActivateAtPosition + 1 ) ,
	dispid_ButtonAtPosition	= ( dispid_SelectAtPosition + 1 ) ,
	dispid_NumberOfChapters	= ( dispid_ButtonAtPosition + 1 ) ,
	dispid_TotalTitleTime	= ( dispid_NumberOfChapters + 1 ) ,
	dispid_TitlesAvailable	= ( dispid_TotalTitleTime + 1 ) ,
	dispid_VolumesAvailable	= ( dispid_TitlesAvailable + 1 ) ,
	dispid_CurrentVolume	= ( dispid_VolumesAvailable + 1 ) ,
	dispid_CurrentDiscSide	= ( dispid_CurrentVolume + 1 ) ,
	dispid_CurrentDomain	= ( dispid_CurrentDiscSide + 1 ) ,
	dispid_CurrentChapter	= ( dispid_CurrentDomain + 1 ) ,
	dispid_CurrentTitle	= ( dispid_CurrentChapter + 1 ) ,
	dispid_CurrentTime	= ( dispid_CurrentTitle + 1 ) ,
	dispid_FramesPerSecond	= ( dispid_CurrentTime + 1 ) ,
	dispid_DVDTimeCode2bstr	= ( dispid_FramesPerSecond + 1 ) ,
	dispid_DVDDirectory	= ( dispid_DVDTimeCode2bstr + 1 ) ,
	dispid_IsSubpictureStreamEnabled	= ( dispid_DVDDirectory + 1 ) ,
	dispid_IsAudioStreamEnabled	= ( dispid_IsSubpictureStreamEnabled + 1 ) ,
	dispid_CurrentSubpictureStream	= ( dispid_IsAudioStreamEnabled + 1 ) ,
	dispid_SubpictureLanguage	= ( dispid_CurrentSubpictureStream + 1 ) ,
	dispid_CurrentAudioStream	= ( dispid_SubpictureLanguage + 1 ) ,
	dispid_AudioStreamsAvailable	= ( dispid_CurrentAudioStream + 1 ) ,
	dispid_AnglesAvailable	= ( dispid_AudioStreamsAvailable + 1 ) ,
	dispid_CurrentAngle	= ( dispid_AnglesAvailable + 1 ) ,
	dispid_CCActive	= ( dispid_CurrentAngle + 1 ) ,
	dispid_CurrentCCService	= ( dispid_CCActive + 1 ) ,
	dispid_SubpictureStreamsAvailable	= ( dispid_CurrentCCService + 1 ) ,
	dispid_SubpictureOn	= ( dispid_SubpictureStreamsAvailable + 1 ) ,
	dispid_DVDUniqueID	= ( dispid_SubpictureOn + 1 ) ,
	dispid_EnableResetOnStop	= ( dispid_DVDUniqueID + 1 ) ,
	dispid_AcceptParentalLevelChange	= ( dispid_EnableResetOnStop + 1 ) ,
	dispid_NotifyParentalLevelChange	= ( dispid_AcceptParentalLevelChange + 1 ) ,
	dispid_SelectParentalCountry	= ( dispid_NotifyParentalLevelChange + 1 ) ,
	dispid_SelectParentalLevel	= ( dispid_SelectParentalCountry + 1 ) ,
	dispid_TitleParentalLevels	= ( dispid_SelectParentalLevel + 1 ) ,
	dispid_PlayerParentalCountry	= ( dispid_TitleParentalLevels + 1 ) ,
	dispid_PlayerParentalLevel	= ( dispid_PlayerParentalCountry + 1 ) ,
	dispid_Eject	= ( dispid_PlayerParentalLevel + 1 ) ,
	dispid_UOPValid	= ( dispid_Eject + 1 ) ,
	dispid_SPRM	= ( dispid_UOPValid + 1 ) ,
	dispid_GPRM	= ( dispid_SPRM + 1 ) ,
	dispid_DVDTextStringType	= ( dispid_GPRM + 1 ) ,
	dispid_DVDTextString	= ( dispid_DVDTextStringType + 1 ) ,
	dispid_DVDTextNumberOfStrings	= ( dispid_DVDTextString + 1 ) ,
	dispid_DVDTextNumberOfLanguages	= ( dispid_DVDTextNumberOfStrings + 1 ) ,
	dispid_DVDTextLanguageLCID	= ( dispid_DVDTextNumberOfLanguages + 1 ) ,
	dispid_RegionChange	= ( dispid_DVDTextLanguageLCID + 1 ) ,
	dispid_DVDAdm	= ( dispid_RegionChange + 1 ) ,
	dispid_DeleteBookmark	= ( dispid_DVDAdm + 1 ) ,
	dispid_RestoreBookmark	= ( dispid_DeleteBookmark + 1 ) ,
	dispid_SaveBookmark	= ( dispid_RestoreBookmark + 1 ) ,
	dispid_SelectDefaultAudioLanguage	= ( dispid_SaveBookmark + 1 ) ,
	dispid_SelectDefaultSubpictureLanguage	= ( dispid_SelectDefaultAudioLanguage + 1 ) ,
	dispid_PreferredSubpictureStream	= ( dispid_SelectDefaultSubpictureLanguage + 1 ) ,
	dispid_DefaultMenuLanguage	= ( dispid_PreferredSubpictureStream + 1 ) ,
	dispid_DefaultSubpictureLanguage	= ( dispid_DefaultMenuLanguage + 1 ) ,
	dispid_DefaultAudioLanguage	= ( dispid_DefaultSubpictureLanguage + 1 ) ,
	dispid_DefaultSubpictureLanguageExt	= ( dispid_DefaultAudioLanguage + 1 ) ,
	dispid_DefaultAudioLanguageExt	= ( dispid_DefaultSubpictureLanguageExt + 1 ) ,
	dispid_LanguageFromLCID	= ( dispid_DefaultAudioLanguageExt + 1 ) ,
	dispid_KaraokeAudioPresentationMode	= ( dispid_LanguageFromLCID + 1 ) ,
	dispid_KaraokeChannelContent	= ( dispid_KaraokeAudioPresentationMode + 1 ) ,
	dispid_KaraokeChannelAssignment	= ( dispid_KaraokeChannelContent + 1 ) ,
	dispid_RestorePreferredSettings	= ( dispid_KaraokeChannelAssignment + 1 ) ,
	dispid_ButtonRect	= ( dispid_RestorePreferredSettings + 1 ) ,
	dispid_DVDScreenInMouseCoordinates	= ( dispid_ButtonRect + 1 ) ,
	dispid_CustomCompositorClass	= ( dispid_DVDScreenInMouseCoordinates + 1 ) ,
	dispidCustomCompositorClass	= ( dispid_CustomCompositorClass + 1 ) ,
	dispid_CustomCompositor	= ( dispidCustomCompositorClass + 1 ) ,
	dispidMixerBitmap	= ( dispid_CustomCompositor + 1 ) ,
	dispid_MixerBitmap	= ( dispidMixerBitmap + 1 ) ,
	dispidMixerBitmapOpacity	= ( dispid_MixerBitmap + 1 ) ,
	dispidMixerBitmapRect	= ( dispidMixerBitmapOpacity + 1 ) ,
	dispidSetupMixerBitmap	= ( dispidMixerBitmapRect + 1 ) ,
	dispidUsingOverlay	= ( dispidSetupMixerBitmap + 1 ) ,
	dispidDisplayChange	= ( dispidUsingOverlay + 1 ) ,
	dispidRePaint	= ( dispidDisplayChange + 1 ) ,
	dispid_IsEqualDevice	= ( dispidRePaint + 1 ) ,
	dispidrate	= ( dispid_IsEqualDevice + 1 ) ,
	dispidposition	= ( dispidrate + 1 ) ,
	dispidpositionmode	= ( dispidposition + 1 ) ,
	dispidlength	= ( dispidpositionmode + 1 ) ,
	dispidChangePassword	= ( dispidlength + 1 ) ,
	dispidSaveParentalLevel	= ( dispidChangePassword + 1 ) ,
	dispidSaveParentalCountry	= ( dispidSaveParentalLevel + 1 ) ,
	dispidConfirmPassword	= ( dispidSaveParentalCountry + 1 ) ,
	dispidGetParentalLevel	= ( dispidConfirmPassword + 1 ) ,
	dispidGetParentalCountry	= ( dispidGetParentalLevel + 1 ) ,
	dispidDefaultAudioLCID	= ( dispidGetParentalCountry + 1 ) ,
	dispidDefaultSubpictureLCID	= ( dispidDefaultAudioLCID + 1 ) ,
	dispidDefaultMenuLCID	= ( dispidDefaultSubpictureLCID + 1 ) ,
	dispidBookmarkOnStop	= ( dispidDefaultMenuLCID + 1 ) ,
	dispidMaxVidRect	= ( dispidBookmarkOnStop + 1 ) ,
	dispidMinVidRect	= ( dispidMaxVidRect + 1 ) ,
	dispidCapture	= ( dispidMinVidRect + 1 ) ,
	dispid_DecimateInput	= ( dispidCapture + 1 ) ,
	dispidAlloctor	= ( dispid_DecimateInput + 1 ) ,
	dispid_Allocator	= ( dispidAlloctor + 1 ) ,
	dispidAllocPresentID	= ( dispid_Allocator + 1 ) ,
	dispidSetAllocator	= ( dispidAllocPresentID + 1 ) ,
	dispid_SetAllocator	= ( dispidSetAllocator + 1 ) ,
	dispidStreamBufferSinkName	= ( dispid_SetAllocator + 1 ) ,
	dispidStreamBufferSourceName	= ( dispidStreamBufferSinkName + 1 ) ,
	dispidStreamBufferContentRecording	= ( dispidStreamBufferSourceName + 1 ) ,
	dispidStreamBufferReferenceRecording	= ( dispidStreamBufferContentRecording + 1 ) ,
	dispidstarttime	= ( dispidStreamBufferReferenceRecording + 1 ) ,
	dispidstoptime	= ( dispidstarttime + 1 ) ,
	dispidrecordingstopped	= ( dispidstoptime + 1 ) ,
	dispidrecordingstarted	= ( dispidrecordingstopped + 1 ) ,
	dispidNameSetLock	= ( dispidrecordingstarted + 1 ) ,
	dispidrecordingtype	= ( dispidNameSetLock + 1 ) ,
	dispidstart	= ( dispidrecordingtype + 1 ) ,
	dispidRecordingAttribute	= ( dispidstart + 1 ) ,
	dispid_RecordingAttribute	= ( dispidRecordingAttribute + 1 ) ,
	dispidSBEConfigure	= ( dispid_RecordingAttribute + 1 ) ,
	dispid_CurrentRatings	= ( dispidSBEConfigure + 1 ) ,
	dispid_MaxRatingsLevel	= ( dispid_CurrentRatings + 1 ) ,
	dispid_audioencoderint	= ( dispid_MaxRatingsLevel + 1 ) ,
	dispid_videoencoderint	= ( dispid_audioencoderint + 1 ) ,
	dispidService	= ( dispid_videoencoderint + 1 ) ,
	dispid_BlockUnrated	= ( dispidService + 1 ) ,
	dispid_UnratedDelay	= ( dispid_BlockUnrated + 1 ) ,
	dispid_SuppressEffects	= ( dispid_UnratedDelay + 1 ) ,
	dispidsbesource	= ( dispid_SuppressEffects + 1 ) ,
	dispidSetSinkFilter	= ( dispidsbesource + 1 ) ,
	dispid_SinkStreams	= ( dispidSetSinkFilter + 1 ) ,
	dispidTVFormats	= ( dispid_SinkStreams + 1 ) ,
	dispidModes	= ( dispidTVFormats + 1 ) ,
	dispidAuxInputs	= ( dispidModes + 1 ) ,
	dispidTeleTextFilter	= ( dispidAuxInputs + 1 ) ,
	dispid_channelchangeint	= ( dispidTeleTextFilter + 1 ) ,
	dispidUnlockProfile	= ( dispid_channelchangeint + 1 ) ,
	dispid_AddFilter	= ( dispidUnlockProfile + 1 ) ,
	dispidSetMinSeek	= ( dispid_AddFilter + 1 ) ,
	dispidRateEx	= ( dispidSetMinSeek + 1 ) ,
	dispidaudiocounter	= ( dispidRateEx + 1 ) ,
	dispidvideocounter	= ( dispidaudiocounter + 1 ) ,
	dispidcccounter	= ( dispidvideocounter + 1 ) ,
	dispidwstcounter	= ( dispidcccounter + 1 ) ,
	dispid_audiocounter	= ( dispidwstcounter + 1 ) ,
	dispid_videocounter	= ( dispid_audiocounter + 1 ) ,
	dispid_cccounter	= ( dispid_videocounter + 1 ) ,
	dispid_wstcounter	= ( dispid_cccounter + 1 ) ,
	dispidaudioanalysis	= ( dispid_wstcounter + 1 ) ,
	dispidvideoanalysis	= ( dispidaudioanalysis + 1 ) ,
	dispiddataanalysis	= ( dispidvideoanalysis + 1 ) ,
	dispidaudio_analysis	= ( dispiddataanalysis + 1 ) ,
	dispidvideo_analysis	= ( dispidaudio_analysis + 1 ) ,
	dispiddata_analysis	= ( dispidvideo_analysis + 1 ) ,
	dispid_resetFilterList	= ( dispiddata_analysis + 1 ) ,
	dispidDevicePath	= ( dispid_resetFilterList + 1 ) ,
	dispid_SourceFilter	= ( dispidDevicePath + 1 ) ,
	dispid__SourceFilter	= ( dispid_SourceFilter + 1 ) ,
	dispidUserEvent	= ( dispid__SourceFilter + 1 ) ,
	LastReservedDeviceDispid	= 0x3fff
    } 	SegDispidList;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_segment_0000_0000_0002
    {	eventidStateChange	= 0,
	eventidOnTuneChanged	= ( eventidStateChange + 1 ) ,
	eventidEndOfMedia	= ( eventidOnTuneChanged + 1 ) ,
	eventidDVDNotify	= ( eventidEndOfMedia + 1 ) ,
	eventidPlayForwards	= ( eventidDVDNotify + 1 ) ,
	eventidPlayBackwards	= ( eventidPlayForwards + 1 ) ,
	eventidShowMenu	= ( eventidPlayBackwards + 1 ) ,
	eventidResume	= ( eventidShowMenu + 1 ) ,
	eventidSelectOrActivateButton	= ( eventidResume + 1 ) ,
	eventidStillOff	= ( eventidSelectOrActivateButton + 1 ) ,
	eventidPauseOn	= ( eventidStillOff + 1 ) ,
	eventidChangeCurrentAudioStream	= ( eventidPauseOn + 1 ) ,
	eventidChangeCurrentSubpictureStream	= ( eventidChangeCurrentAudioStream + 1 ) ,
	eventidChangeCurrentAngle	= ( eventidChangeCurrentSubpictureStream + 1 ) ,
	eventidPlayAtTimeInTitle	= ( eventidChangeCurrentAngle + 1 ) ,
	eventidPlayAtTime	= ( eventidPlayAtTimeInTitle + 1 ) ,
	eventidPlayChapterInTitle	= ( eventidPlayAtTime + 1 ) ,
	eventidPlayChapter	= ( eventidPlayChapterInTitle + 1 ) ,
	eventidReplayChapter	= ( eventidPlayChapter + 1 ) ,
	eventidPlayNextChapter	= ( eventidReplayChapter + 1 ) ,
	eventidStop	= ( eventidPlayNextChapter + 1 ) ,
	eventidReturnFromSubmenu	= ( eventidStop + 1 ) ,
	eventidPlayTitle	= ( eventidReturnFromSubmenu + 1 ) ,
	eventidPlayPrevChapter	= ( eventidPlayTitle + 1 ) ,
	eventidChangeKaraokePresMode	= ( eventidPlayPrevChapter + 1 ) ,
	eventidChangeVideoPresMode	= ( eventidChangeKaraokePresMode + 1 ) ,
	eventidOverlayUnavailable	= ( eventidChangeVideoPresMode + 1 ) ,
	eventidSinkCertificateFailure	= ( eventidOverlayUnavailable + 1 ) ,
	eventidSinkCertificateSuccess	= ( eventidSinkCertificateFailure + 1 ) ,
	eventidSourceCertificateFailure	= ( eventidSinkCertificateSuccess + 1 ) ,
	eventidSourceCertificateSuccess	= ( eventidSourceCertificateFailure + 1 ) ,
	eventidRatingsBlocked	= ( eventidSourceCertificateSuccess + 1 ) ,
	eventidRatingsUnlocked	= ( eventidRatingsBlocked + 1 ) ,
	eventidRatingsChanged	= ( eventidRatingsUnlocked + 1 ) ,
	eventidWriteFailure	= ( eventidRatingsChanged + 1 ) ,
	eventidTimeHole	= ( eventidWriteFailure + 1 ) ,
	eventidStaleDataRead	= ( eventidTimeHole + 1 ) ,
	eventidContentBecomingStale	= ( eventidStaleDataRead + 1 ) ,
	eventidStaleFileDeleted	= ( eventidContentBecomingStale + 1 ) ,
	eventidEncryptionOn	= ( eventidStaleFileDeleted + 1 ) ,
	eventidEncryptionOff	= ( eventidEncryptionOn + 1 ) ,
	eventidRateChange	= ( eventidEncryptionOff + 1 ) ,
	eventidLicenseChange	= ( eventidRateChange + 1 ) ,
	eventidCOPPBlocked	= ( eventidLicenseChange + 1 ) ,
	eventidCOPPUnblocked	= ( eventidCOPPBlocked + 1 ) ,
	dispidlicenseerrorcode	= ( eventidCOPPUnblocked + 1 ) ,
	eventidBroadcastEvent	= ( dispidlicenseerrorcode + 1 ) ,
	eventidBroadcastEventEx	= ( eventidBroadcastEvent + 1 ) ,
	eventidContentPrimarilyAudio	= ( eventidBroadcastEventEx + 1 ) ,
	LastReservedDeviceEvent	= 0x3fff
    } 	SegEventidList;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0000_0003
    {	FrameMode	= 0,
	TenthsSecondsMode	= ( FrameMode + 1 ) 
    } 	PositionModeList;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0000_0004
    {	CONTENT	= 0,
	REFERENCE	= ( CONTENT + 1 ) 
    } 	RecordingType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0000_0005
    {	None	= 0,
	Caption1	= ( None + 1 ) ,
	Caption2	= ( Caption1 + 1 ) ,
	Text1	= ( Caption2 + 1 ) ,
	Text2	= ( Text1 + 1 ) ,
	XDS	= ( Text2 + 1 ) 
    } 	MSVidCCService;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0000_0006
    {	MSVidSink_Video	= 1,
	MSVidSink_Audio	= 2,
	MSVidSink_Other	= 4
    } 	MSVidSinkStreams;




extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0000_v0_0_s_ifspec;

#ifndef __IMSVidRect_INTERFACE_DEFINED__
#define __IMSVidRect_INTERFACE_DEFINED__

/* interface IMSVidRect */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IMSVidRect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7F5000A6-A440-47ca-8ACC-C0E75531A2C2")
    IMSVidRect : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ __RPC__out LONG *TopVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ LONG TopVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ __RPC__out LONG *LeftVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ LONG LeftVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ __RPC__out LONG *WidthVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ LONG WidthVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ __RPC__out LONG *HeightVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ LONG HeightVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_HWnd( 
            /* [retval][out] */ __RPC__deref_out_opt HWND *HWndVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_HWnd( 
            /* [in] */ __RPC__in HWND HWndVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Rect( 
            /* [in] */ __RPC__in_opt IMSVidRect *RectVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidRectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidRect * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidRect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidRect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidRect * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidRect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidRect * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidRect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IMSVidRect * This,
            /* [retval][out] */ __RPC__out LONG *TopVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            IMSVidRect * This,
            /* [in] */ LONG TopVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IMSVidRect * This,
            /* [retval][out] */ __RPC__out LONG *LeftVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            IMSVidRect * This,
            /* [in] */ LONG LeftVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IMSVidRect * This,
            /* [retval][out] */ __RPC__out LONG *WidthVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IMSVidRect * This,
            /* [in] */ LONG WidthVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IMSVidRect * This,
            /* [retval][out] */ __RPC__out LONG *HeightVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IMSVidRect * This,
            /* [in] */ LONG HeightVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HWnd )( 
            IMSVidRect * This,
            /* [retval][out] */ __RPC__deref_out_opt HWND *HWndVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HWnd )( 
            IMSVidRect * This,
            /* [in] */ __RPC__in HWND HWndVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rect )( 
            IMSVidRect * This,
            /* [in] */ __RPC__in_opt IMSVidRect *RectVal);
        
        END_INTERFACE
    } IMSVidRectVtbl;

    interface IMSVidRect
    {
        CONST_VTBL struct IMSVidRectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidRect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidRect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidRect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidRect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidRect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidRect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidRect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidRect_get_Top(This,TopVal)	\
    ( (This)->lpVtbl -> get_Top(This,TopVal) ) 

#define IMSVidRect_put_Top(This,TopVal)	\
    ( (This)->lpVtbl -> put_Top(This,TopVal) ) 

#define IMSVidRect_get_Left(This,LeftVal)	\
    ( (This)->lpVtbl -> get_Left(This,LeftVal) ) 

#define IMSVidRect_put_Left(This,LeftVal)	\
    ( (This)->lpVtbl -> put_Left(This,LeftVal) ) 

#define IMSVidRect_get_Width(This,WidthVal)	\
    ( (This)->lpVtbl -> get_Width(This,WidthVal) ) 

#define IMSVidRect_put_Width(This,WidthVal)	\
    ( (This)->lpVtbl -> put_Width(This,WidthVal) ) 

#define IMSVidRect_get_Height(This,HeightVal)	\
    ( (This)->lpVtbl -> get_Height(This,HeightVal) ) 

#define IMSVidRect_put_Height(This,HeightVal)	\
    ( (This)->lpVtbl -> put_Height(This,HeightVal) ) 

#define IMSVidRect_get_HWnd(This,HWndVal)	\
    ( (This)->lpVtbl -> get_HWnd(This,HWndVal) ) 

#define IMSVidRect_put_HWnd(This,HWndVal)	\
    ( (This)->lpVtbl -> put_HWnd(This,HWndVal) ) 

#define IMSVidRect_put_Rect(This,RectVal)	\
    ( (This)->lpVtbl -> put_Rect(This,RectVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidRect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_segment_0000_0001 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0001_v0_0_s_ifspec;

#ifndef __IMSVidGraphSegmentContainer_INTERFACE_DEFINED__
#define __IMSVidGraphSegmentContainer_INTERFACE_DEFINED__

/* interface IMSVidGraphSegmentContainer */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IMSVidGraphSegmentContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3DD2903D-E0AA-11d2-B63A-00C04F79498E")
    IMSVidGraphSegmentContainer : public IUnknown
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Graph( 
            /* [out] */ __RPC__deref_out_opt IGraphBuilder **ppGraph) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Input( 
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **ppInput) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Outputs( 
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppOutputs) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_VideoRenderer( 
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **ppVR) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_AudioRenderer( 
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **ppAR) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Features( 
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppFeatures) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Composites( 
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppComposites) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_ParentContainer( 
            /* [out] */ __RPC__deref_out_opt IUnknown **ppContainer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Decompose( 
            __RPC__in_opt IMSVidGraphSegment *pSegment) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsWindowless( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFocus( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidGraphSegmentContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidGraphSegmentContainer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidGraphSegmentContainer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidGraphSegmentContainer * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Graph )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IGraphBuilder **ppGraph);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Input )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **ppInput);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Outputs )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppOutputs);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoRenderer )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **ppVR);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioRenderer )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **ppAR);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Features )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppFeatures);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Composites )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppComposites);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParentContainer )( 
            IMSVidGraphSegmentContainer * This,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppContainer);
        
        HRESULT ( STDMETHODCALLTYPE *Decompose )( 
            IMSVidGraphSegmentContainer * This,
            __RPC__in_opt IMSVidGraphSegment *pSegment);
        
        HRESULT ( STDMETHODCALLTYPE *IsWindowless )( 
            IMSVidGraphSegmentContainer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFocus )( 
            IMSVidGraphSegmentContainer * This);
        
        END_INTERFACE
    } IMSVidGraphSegmentContainerVtbl;

    interface IMSVidGraphSegmentContainer
    {
        CONST_VTBL struct IMSVidGraphSegmentContainerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidGraphSegmentContainer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidGraphSegmentContainer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidGraphSegmentContainer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidGraphSegmentContainer_get_Graph(This,ppGraph)	\
    ( (This)->lpVtbl -> get_Graph(This,ppGraph) ) 

#define IMSVidGraphSegmentContainer_get_Input(This,ppInput)	\
    ( (This)->lpVtbl -> get_Input(This,ppInput) ) 

#define IMSVidGraphSegmentContainer_get_Outputs(This,ppOutputs)	\
    ( (This)->lpVtbl -> get_Outputs(This,ppOutputs) ) 

#define IMSVidGraphSegmentContainer_get_VideoRenderer(This,ppVR)	\
    ( (This)->lpVtbl -> get_VideoRenderer(This,ppVR) ) 

#define IMSVidGraphSegmentContainer_get_AudioRenderer(This,ppAR)	\
    ( (This)->lpVtbl -> get_AudioRenderer(This,ppAR) ) 

#define IMSVidGraphSegmentContainer_get_Features(This,ppFeatures)	\
    ( (This)->lpVtbl -> get_Features(This,ppFeatures) ) 

#define IMSVidGraphSegmentContainer_get_Composites(This,ppComposites)	\
    ( (This)->lpVtbl -> get_Composites(This,ppComposites) ) 

#define IMSVidGraphSegmentContainer_get_ParentContainer(This,ppContainer)	\
    ( (This)->lpVtbl -> get_ParentContainer(This,ppContainer) ) 

#define IMSVidGraphSegmentContainer_Decompose(This,pSegment)	\
    ( (This)->lpVtbl -> Decompose(This,pSegment) ) 

#define IMSVidGraphSegmentContainer_IsWindowless(This)	\
    ( (This)->lpVtbl -> IsWindowless(This) ) 

#define IMSVidGraphSegmentContainer_GetFocus(This)	\
    ( (This)->lpVtbl -> GetFocus(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidGraphSegmentContainer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_segment_0000_0002 */
/* [local] */ 

typedef 
enum MSVidSegmentType
    {	MSVidSEG_SOURCE	= 0,
	MSVidSEG_XFORM	= ( MSVidSEG_SOURCE + 1 ) ,
	MSVidSEG_DEST	= ( MSVidSEG_XFORM + 1 ) 
    } 	MSVidSegmentType;



extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0002_v0_0_s_ifspec;

#ifndef __IMSVidGraphSegment_INTERFACE_DEFINED__
#define __IMSVidGraphSegment_INTERFACE_DEFINED__

/* interface IMSVidGraphSegment */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IMSVidGraphSegment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("238DEC54-ADEB-4005-A349-F772B9AFEBC4")
    IMSVidGraphSegment : public IPersist
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Init( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pInit) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Init( 
            /* [in] */ __RPC__in_opt IUnknown *pInit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumFilters( 
            /* [out] */ __RPC__deref_out_opt IEnumFilters **pNewEnum) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Container( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidGraphSegmentContainer **ppCtl) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Container( 
            /* [in] */ __RPC__in_opt IMSVidGraphSegmentContainer *pCtl) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out MSVidSegmentType *pType) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Category( 
            /* [retval][out] */ __RPC__out GUID *pGuid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Build( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PostBuild( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PreRun( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PostRun( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PreStop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PostStop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnEventNotify( 
            LONG lEventCode,
            LONG_PTR lEventParm1,
            LONG_PTR lEventParm2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Decompose( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidGraphSegmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidGraphSegment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidGraphSegment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassID )( 
            IMSVidGraphSegment * This,
            /* [out] */ __RPC__out CLSID *pClassID);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Init )( 
            IMSVidGraphSegment * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pInit);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Init )( 
            IMSVidGraphSegment * This,
            /* [in] */ __RPC__in_opt IUnknown *pInit);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFilters )( 
            IMSVidGraphSegment * This,
            /* [out] */ __RPC__deref_out_opt IEnumFilters **pNewEnum);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Container )( 
            IMSVidGraphSegment * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidGraphSegmentContainer **ppCtl);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Container )( 
            IMSVidGraphSegment * This,
            /* [in] */ __RPC__in_opt IMSVidGraphSegmentContainer *pCtl);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IMSVidGraphSegment * This,
            /* [retval][out] */ __RPC__out MSVidSegmentType *pType);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidGraphSegment * This,
            /* [retval][out] */ __RPC__out GUID *pGuid);
        
        HRESULT ( STDMETHODCALLTYPE *Build )( 
            IMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostBuild )( 
            IMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreRun )( 
            IMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostRun )( 
            IMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreStop )( 
            IMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostStop )( 
            IMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEventNotify )( 
            IMSVidGraphSegment * This,
            LONG lEventCode,
            LONG_PTR lEventParm1,
            LONG_PTR lEventParm2);
        
        HRESULT ( STDMETHODCALLTYPE *Decompose )( 
            IMSVidGraphSegment * This);
        
        END_INTERFACE
    } IMSVidGraphSegmentVtbl;

    interface IMSVidGraphSegment
    {
        CONST_VTBL struct IMSVidGraphSegmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidGraphSegment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidGraphSegment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidGraphSegment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidGraphSegment_GetClassID(This,pClassID)	\
    ( (This)->lpVtbl -> GetClassID(This,pClassID) ) 


#define IMSVidGraphSegment_get_Init(This,pInit)	\
    ( (This)->lpVtbl -> get_Init(This,pInit) ) 

#define IMSVidGraphSegment_put_Init(This,pInit)	\
    ( (This)->lpVtbl -> put_Init(This,pInit) ) 

#define IMSVidGraphSegment_EnumFilters(This,pNewEnum)	\
    ( (This)->lpVtbl -> EnumFilters(This,pNewEnum) ) 

#define IMSVidGraphSegment_get_Container(This,ppCtl)	\
    ( (This)->lpVtbl -> get_Container(This,ppCtl) ) 

#define IMSVidGraphSegment_put_Container(This,pCtl)	\
    ( (This)->lpVtbl -> put_Container(This,pCtl) ) 

#define IMSVidGraphSegment_get_Type(This,pType)	\
    ( (This)->lpVtbl -> get_Type(This,pType) ) 

#define IMSVidGraphSegment_get_Category(This,pGuid)	\
    ( (This)->lpVtbl -> get_Category(This,pGuid) ) 

#define IMSVidGraphSegment_Build(This)	\
    ( (This)->lpVtbl -> Build(This) ) 

#define IMSVidGraphSegment_PostBuild(This)	\
    ( (This)->lpVtbl -> PostBuild(This) ) 

#define IMSVidGraphSegment_PreRun(This)	\
    ( (This)->lpVtbl -> PreRun(This) ) 

#define IMSVidGraphSegment_PostRun(This)	\
    ( (This)->lpVtbl -> PostRun(This) ) 

#define IMSVidGraphSegment_PreStop(This)	\
    ( (This)->lpVtbl -> PreStop(This) ) 

#define IMSVidGraphSegment_PostStop(This)	\
    ( (This)->lpVtbl -> PostStop(This) ) 

#define IMSVidGraphSegment_OnEventNotify(This,lEventCode,lEventParm1,lEventParm2)	\
    ( (This)->lpVtbl -> OnEventNotify(This,lEventCode,lEventParm1,lEventParm2) ) 

#define IMSVidGraphSegment_Decompose(This)	\
    ( (This)->lpVtbl -> Decompose(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidGraphSegment_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_segment_0000_0003 */
/* [local] */ 


enum __MIDL___MIDL_itf_segment_0000_0003_0001
    {	MSVIDCTL_LEFT_BUTTON	= 0x1,
	MSVIDCTL_RIGHT_BUTTON	= 0x2,
	MSVIDCTL_MIDDLE_BUTTON	= 0x4,
	MSVIDCTL_X_BUTTON1	= 0x8,
	MSVIDCTL_X_BUTTON2	= 0x10,
	MSVIDCTL_SHIFT	= 0x1,
	MSVIDCTL_CTRL	= 0x2,
	MSVIDCTL_ALT	= 0x4
    } ;


extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0003_v0_0_s_ifspec;

#ifndef __IMSVidGraphSegmentUserInput_INTERFACE_DEFINED__
#define __IMSVidGraphSegmentUserInput_INTERFACE_DEFINED__

/* interface IMSVidGraphSegmentUserInput */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IMSVidGraphSegmentUserInput;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("301C060E-20D9-4587-9B03-F82ED9A9943C")
    IMSVidGraphSegmentUserInput : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Click( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DblClick( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyDown( 
            __RPC__in short *KeyCode,
            short ShiftState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyPress( 
            __RPC__in short *KeyAscii) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyUp( 
            __RPC__in short *KeyCode,
            short ShiftState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MouseDown( 
            short ButtonState,
            short ShiftState,
            /* external definition not present */ OLE_XPOS_PIXELS x,
            /* external definition not present */ OLE_YPOS_PIXELS y) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MouseMove( 
            short ButtonState,
            short ShiftState,
            /* external definition not present */ OLE_XPOS_PIXELS x,
            /* external definition not present */ OLE_YPOS_PIXELS y) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MouseUp( 
            short ButtonState,
            short ShiftState,
            /* external definition not present */ OLE_XPOS_PIXELS x,
            /* external definition not present */ OLE_YPOS_PIXELS y) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidGraphSegmentUserInputVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidGraphSegmentUserInput * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidGraphSegmentUserInput * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidGraphSegmentUserInput * This);
        
        HRESULT ( STDMETHODCALLTYPE *Click )( 
            IMSVidGraphSegmentUserInput * This);
        
        HRESULT ( STDMETHODCALLTYPE *DblClick )( 
            IMSVidGraphSegmentUserInput * This);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            IMSVidGraphSegmentUserInput * This,
            __RPC__in short *KeyCode,
            short ShiftState);
        
        HRESULT ( STDMETHODCALLTYPE *KeyPress )( 
            IMSVidGraphSegmentUserInput * This,
            __RPC__in short *KeyAscii);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            IMSVidGraphSegmentUserInput * This,
            __RPC__in short *KeyCode,
            short ShiftState);
        
        HRESULT ( STDMETHODCALLTYPE *MouseDown )( 
            IMSVidGraphSegmentUserInput * This,
            short ButtonState,
            short ShiftState,
            /* external definition not present */ OLE_XPOS_PIXELS x,
            /* external definition not present */ OLE_YPOS_PIXELS y);
        
        HRESULT ( STDMETHODCALLTYPE *MouseMove )( 
            IMSVidGraphSegmentUserInput * This,
            short ButtonState,
            short ShiftState,
            /* external definition not present */ OLE_XPOS_PIXELS x,
            /* external definition not present */ OLE_YPOS_PIXELS y);
        
        HRESULT ( STDMETHODCALLTYPE *MouseUp )( 
            IMSVidGraphSegmentUserInput * This,
            short ButtonState,
            short ShiftState,
            /* external definition not present */ OLE_XPOS_PIXELS x,
            /* external definition not present */ OLE_YPOS_PIXELS y);
        
        END_INTERFACE
    } IMSVidGraphSegmentUserInputVtbl;

    interface IMSVidGraphSegmentUserInput
    {
        CONST_VTBL struct IMSVidGraphSegmentUserInputVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidGraphSegmentUserInput_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidGraphSegmentUserInput_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidGraphSegmentUserInput_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidGraphSegmentUserInput_Click(This)	\
    ( (This)->lpVtbl -> Click(This) ) 

#define IMSVidGraphSegmentUserInput_DblClick(This)	\
    ( (This)->lpVtbl -> DblClick(This) ) 

#define IMSVidGraphSegmentUserInput_KeyDown(This,KeyCode,ShiftState)	\
    ( (This)->lpVtbl -> KeyDown(This,KeyCode,ShiftState) ) 

#define IMSVidGraphSegmentUserInput_KeyPress(This,KeyAscii)	\
    ( (This)->lpVtbl -> KeyPress(This,KeyAscii) ) 

#define IMSVidGraphSegmentUserInput_KeyUp(This,KeyCode,ShiftState)	\
    ( (This)->lpVtbl -> KeyUp(This,KeyCode,ShiftState) ) 

#define IMSVidGraphSegmentUserInput_MouseDown(This,ButtonState,ShiftState,x,y)	\
    ( (This)->lpVtbl -> MouseDown(This,ButtonState,ShiftState,x,y) ) 

#define IMSVidGraphSegmentUserInput_MouseMove(This,ButtonState,ShiftState,x,y)	\
    ( (This)->lpVtbl -> MouseMove(This,ButtonState,ShiftState,x,y) ) 

#define IMSVidGraphSegmentUserInput_MouseUp(This,ButtonState,ShiftState,x,y)	\
    ( (This)->lpVtbl -> MouseUp(This,ButtonState,ShiftState,x,y) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidGraphSegmentUserInput_INTERFACE_DEFINED__ */


#ifndef __IMSVidCompositionSegment_INTERFACE_DEFINED__
#define __IMSVidCompositionSegment_INTERFACE_DEFINED__

/* interface IMSVidCompositionSegment */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IMSVidCompositionSegment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D483-911D-11d2-B632-00C04F79498E")
    IMSVidCompositionSegment : public IMSVidGraphSegment
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Compose( 
            /* [in] */ __RPC__in_opt IMSVidGraphSegment *upstream,
            /* [in] */ __RPC__in_opt IMSVidGraphSegment *downstream) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Up( 
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **upstream) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Down( 
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **downstream) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidCompositionSegmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidCompositionSegment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidCompositionSegment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassID )( 
            IMSVidCompositionSegment * This,
            /* [out] */ __RPC__out CLSID *pClassID);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Init )( 
            IMSVidCompositionSegment * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pInit);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Init )( 
            IMSVidCompositionSegment * This,
            /* [in] */ __RPC__in_opt IUnknown *pInit);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFilters )( 
            IMSVidCompositionSegment * This,
            /* [out] */ __RPC__deref_out_opt IEnumFilters **pNewEnum);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Container )( 
            IMSVidCompositionSegment * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidGraphSegmentContainer **ppCtl);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Container )( 
            IMSVidCompositionSegment * This,
            /* [in] */ __RPC__in_opt IMSVidGraphSegmentContainer *pCtl);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IMSVidCompositionSegment * This,
            /* [retval][out] */ __RPC__out MSVidSegmentType *pType);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidCompositionSegment * This,
            /* [retval][out] */ __RPC__out GUID *pGuid);
        
        HRESULT ( STDMETHODCALLTYPE *Build )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostBuild )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreRun )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostRun )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreStop )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostStop )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEventNotify )( 
            IMSVidCompositionSegment * This,
            LONG lEventCode,
            LONG_PTR lEventParm1,
            LONG_PTR lEventParm2);
        
        HRESULT ( STDMETHODCALLTYPE *Decompose )( 
            IMSVidCompositionSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Compose )( 
            IMSVidCompositionSegment * This,
            /* [in] */ __RPC__in_opt IMSVidGraphSegment *upstream,
            /* [in] */ __RPC__in_opt IMSVidGraphSegment *downstream);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Up )( 
            IMSVidCompositionSegment * This,
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **upstream);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Down )( 
            IMSVidCompositionSegment * This,
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **downstream);
        
        END_INTERFACE
    } IMSVidCompositionSegmentVtbl;

    interface IMSVidCompositionSegment
    {
        CONST_VTBL struct IMSVidCompositionSegmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidCompositionSegment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidCompositionSegment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidCompositionSegment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidCompositionSegment_GetClassID(This,pClassID)	\
    ( (This)->lpVtbl -> GetClassID(This,pClassID) ) 


#define IMSVidCompositionSegment_get_Init(This,pInit)	\
    ( (This)->lpVtbl -> get_Init(This,pInit) ) 

#define IMSVidCompositionSegment_put_Init(This,pInit)	\
    ( (This)->lpVtbl -> put_Init(This,pInit) ) 

#define IMSVidCompositionSegment_EnumFilters(This,pNewEnum)	\
    ( (This)->lpVtbl -> EnumFilters(This,pNewEnum) ) 

#define IMSVidCompositionSegment_get_Container(This,ppCtl)	\
    ( (This)->lpVtbl -> get_Container(This,ppCtl) ) 

#define IMSVidCompositionSegment_put_Container(This,pCtl)	\
    ( (This)->lpVtbl -> put_Container(This,pCtl) ) 

#define IMSVidCompositionSegment_get_Type(This,pType)	\
    ( (This)->lpVtbl -> get_Type(This,pType) ) 

#define IMSVidCompositionSegment_get_Category(This,pGuid)	\
    ( (This)->lpVtbl -> get_Category(This,pGuid) ) 

#define IMSVidCompositionSegment_Build(This)	\
    ( (This)->lpVtbl -> Build(This) ) 

#define IMSVidCompositionSegment_PostBuild(This)	\
    ( (This)->lpVtbl -> PostBuild(This) ) 

#define IMSVidCompositionSegment_PreRun(This)	\
    ( (This)->lpVtbl -> PreRun(This) ) 

#define IMSVidCompositionSegment_PostRun(This)	\
    ( (This)->lpVtbl -> PostRun(This) ) 

#define IMSVidCompositionSegment_PreStop(This)	\
    ( (This)->lpVtbl -> PreStop(This) ) 

#define IMSVidCompositionSegment_PostStop(This)	\
    ( (This)->lpVtbl -> PostStop(This) ) 

#define IMSVidCompositionSegment_OnEventNotify(This,lEventCode,lEventParm1,lEventParm2)	\
    ( (This)->lpVtbl -> OnEventNotify(This,lEventCode,lEventParm1,lEventParm2) ) 

#define IMSVidCompositionSegment_Decompose(This)	\
    ( (This)->lpVtbl -> Decompose(This) ) 


#define IMSVidCompositionSegment_Compose(This,upstream,downstream)	\
    ( (This)->lpVtbl -> Compose(This,upstream,downstream) ) 

#define IMSVidCompositionSegment_get_Up(This,upstream)	\
    ( (This)->lpVtbl -> get_Up(This,upstream) ) 

#define IMSVidCompositionSegment_get_Down(This,downstream)	\
    ( (This)->lpVtbl -> get_Down(This,downstream) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidCompositionSegment_INTERFACE_DEFINED__ */


#ifndef __IEnumMSVidGraphSegment_INTERFACE_DEFINED__
#define __IEnumMSVidGraphSegment_INTERFACE_DEFINED__

/* interface IEnumMSVidGraphSegment */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IEnumMSVidGraphSegment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3DD2903E-E0AA-11d2-B63A-00C04F79498E")
    IEnumMSVidGraphSegment : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **rgelt,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumMSVidGraphSegmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumMSVidGraphSegment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumMSVidGraphSegment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumMSVidGraphSegment * This,
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__deref_out_opt IMSVidGraphSegment **rgelt,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumMSVidGraphSegment * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumMSVidGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumMSVidGraphSegment * This,
            /* [out] */ __RPC__deref_out_opt IEnumMSVidGraphSegment **ppenum);
        
        END_INTERFACE
    } IEnumMSVidGraphSegmentVtbl;

    interface IEnumMSVidGraphSegment
    {
        CONST_VTBL struct IEnumMSVidGraphSegmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumMSVidGraphSegment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumMSVidGraphSegment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumMSVidGraphSegment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumMSVidGraphSegment_Next(This,celt,rgelt,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched) ) 

#define IEnumMSVidGraphSegment_Skip(This,celt)	\
    ( (This)->lpVtbl -> Skip(This,celt) ) 

#define IEnumMSVidGraphSegment_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumMSVidGraphSegment_Clone(This,ppenum)	\
    ( (This)->lpVtbl -> Clone(This,ppenum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumMSVidGraphSegment_INTERFACE_DEFINED__ */


#ifndef __IMSVidVRGraphSegment_INTERFACE_DEFINED__
#define __IMSVidVRGraphSegment_INTERFACE_DEFINED__

/* interface IMSVidVRGraphSegment */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IMSVidVRGraphSegment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DD47DE3F-9874-4f7b-8B22-7CB2688461E7")
    IMSVidVRGraphSegment : public IMSVidGraphSegment
    {
    public:
        virtual /* [propput][restricted][hidden] */ HRESULT STDMETHODCALLTYPE put__VMRendererMode( 
            /* [in] */ LONG dwMode) = 0;
        
        virtual /* [propput][restricted][hidden] */ HRESULT STDMETHODCALLTYPE put_Owner( 
            /* [in] */ __RPC__in HWND Window) = 0;
        
        virtual /* [propget][restricted][hidden] */ HRESULT STDMETHODCALLTYPE get_Owner( 
            /* [retval][out] */ __RPC__deref_out_opt HWND *Window) = 0;
        
        virtual /* [propget][restricted][hidden] */ HRESULT STDMETHODCALLTYPE get_UseOverlay( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *UseOverlayVal) = 0;
        
        virtual /* [propput][restricted][hidden] */ HRESULT STDMETHODCALLTYPE put_UseOverlay( 
            /* [in] */ VARIANT_BOOL UseOverlayVal) = 0;
        
        virtual /* [propget][restricted][hidden] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Visible) = 0;
        
        virtual /* [propput][restricted][hidden] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL Visible) = 0;
        
        virtual /* [restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_ColorKey( 
            /* [retval][out] */ __RPC__out OLE_COLOR *ColorKey) = 0;
        
        virtual /* [restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put_ColorKey( 
            /* [in] */ OLE_COLOR ColorKey) = 0;
        
        virtual /* [restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
            /* [retval][out] */ __RPC__out LPRECT r) = 0;
        
        virtual /* [restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
            /* [in] */ RECT r) = 0;
        
        virtual /* [restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Destination( 
            /* [retval][out] */ __RPC__out LPRECT r) = 0;
        
        virtual /* [restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put_Destination( 
            /* [in] */ RECT r) = 0;
        
        virtual /* [restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_NativeSize( 
            /* [out] */ __RPC__out LPSIZE sizeval,
            /* [out] */ __RPC__out LPSIZE aspectratio) = 0;
        
        virtual /* [restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_BorderColor( 
            /* [retval][out] */ __RPC__out OLE_COLOR *color) = 0;
        
        virtual /* [restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put_BorderColor( 
            /* [in] */ OLE_COLOR color) = 0;
        
        virtual /* [restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_MaintainAspectRatio( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *fMaintain) = 0;
        
        virtual /* [restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put_MaintainAspectRatio( 
            /* [in] */ VARIANT_BOOL fMaintain) = 0;
        
        virtual /* [restricted][hidden] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [restricted][hidden] */ HRESULT STDMETHODCALLTYPE DisplayChange( void) = 0;
        
        virtual /* [restricted][hidden] */ HRESULT STDMETHODCALLTYPE RePaint( 
            /* [in] */ __RPC__in HDC hdc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVRGraphSegmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVRGraphSegment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVRGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassID )( 
            IMSVidVRGraphSegment * This,
            /* [out] */ __RPC__out CLSID *pClassID);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Init )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pInit);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Init )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ __RPC__in_opt IUnknown *pInit);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFilters )( 
            IMSVidVRGraphSegment * This,
            /* [out] */ __RPC__deref_out_opt IEnumFilters **pNewEnum);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Container )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidGraphSegmentContainer **ppCtl);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Container )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ __RPC__in_opt IMSVidGraphSegmentContainer *pCtl);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out MSVidSegmentType *pType);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out GUID *pGuid);
        
        HRESULT ( STDMETHODCALLTYPE *Build )( 
            IMSVidVRGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostBuild )( 
            IMSVidVRGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreRun )( 
            IMSVidVRGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostRun )( 
            IMSVidVRGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreStop )( 
            IMSVidVRGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *PostStop )( 
            IMSVidVRGraphSegment * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEventNotify )( 
            IMSVidVRGraphSegment * This,
            LONG lEventCode,
            LONG_PTR lEventParm1,
            LONG_PTR lEventParm2);
        
        HRESULT ( STDMETHODCALLTYPE *Decompose )( 
            IMSVidVRGraphSegment * This);
        
        /* [propput][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *put__VMRendererMode )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ LONG dwMode);
        
        /* [propput][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_Owner )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ __RPC__in HWND Window);
        
        /* [propget][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Owner )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__deref_out_opt HWND *Window);
        
        /* [propget][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_UseOverlay )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *UseOverlayVal);
        
        /* [propput][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_UseOverlay )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ VARIANT_BOOL UseOverlayVal);
        
        /* [propget][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Visible);
        
        /* [propput][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ VARIANT_BOOL Visible);
        
        /* [restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorKey )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out OLE_COLOR *ColorKey);
        
        /* [restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorKey )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ OLE_COLOR ColorKey);
        
        /* [restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out LPRECT r);
        
        /* [restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ RECT r);
        
        /* [restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Destination )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out LPRECT r);
        
        /* [restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Destination )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ RECT r);
        
        /* [restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NativeSize )( 
            IMSVidVRGraphSegment * This,
            /* [out] */ __RPC__out LPSIZE sizeval,
            /* [out] */ __RPC__out LPSIZE aspectratio);
        
        /* [restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderColor )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out OLE_COLOR *color);
        
        /* [restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderColor )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ OLE_COLOR color);
        
        /* [restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaintainAspectRatio )( 
            IMSVidVRGraphSegment * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *fMaintain);
        
        /* [restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaintainAspectRatio )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ VARIANT_BOOL fMaintain);
        
        /* [restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IMSVidVRGraphSegment * This);
        
        /* [restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *DisplayChange )( 
            IMSVidVRGraphSegment * This);
        
        /* [restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *RePaint )( 
            IMSVidVRGraphSegment * This,
            /* [in] */ __RPC__in HDC hdc);
        
        END_INTERFACE
    } IMSVidVRGraphSegmentVtbl;

    interface IMSVidVRGraphSegment
    {
        CONST_VTBL struct IMSVidVRGraphSegmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVRGraphSegment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVRGraphSegment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVRGraphSegment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVRGraphSegment_GetClassID(This,pClassID)	\
    ( (This)->lpVtbl -> GetClassID(This,pClassID) ) 


#define IMSVidVRGraphSegment_get_Init(This,pInit)	\
    ( (This)->lpVtbl -> get_Init(This,pInit) ) 

#define IMSVidVRGraphSegment_put_Init(This,pInit)	\
    ( (This)->lpVtbl -> put_Init(This,pInit) ) 

#define IMSVidVRGraphSegment_EnumFilters(This,pNewEnum)	\
    ( (This)->lpVtbl -> EnumFilters(This,pNewEnum) ) 

#define IMSVidVRGraphSegment_get_Container(This,ppCtl)	\
    ( (This)->lpVtbl -> get_Container(This,ppCtl) ) 

#define IMSVidVRGraphSegment_put_Container(This,pCtl)	\
    ( (This)->lpVtbl -> put_Container(This,pCtl) ) 

#define IMSVidVRGraphSegment_get_Type(This,pType)	\
    ( (This)->lpVtbl -> get_Type(This,pType) ) 

#define IMSVidVRGraphSegment_get_Category(This,pGuid)	\
    ( (This)->lpVtbl -> get_Category(This,pGuid) ) 

#define IMSVidVRGraphSegment_Build(This)	\
    ( (This)->lpVtbl -> Build(This) ) 

#define IMSVidVRGraphSegment_PostBuild(This)	\
    ( (This)->lpVtbl -> PostBuild(This) ) 

#define IMSVidVRGraphSegment_PreRun(This)	\
    ( (This)->lpVtbl -> PreRun(This) ) 

#define IMSVidVRGraphSegment_PostRun(This)	\
    ( (This)->lpVtbl -> PostRun(This) ) 

#define IMSVidVRGraphSegment_PreStop(This)	\
    ( (This)->lpVtbl -> PreStop(This) ) 

#define IMSVidVRGraphSegment_PostStop(This)	\
    ( (This)->lpVtbl -> PostStop(This) ) 

#define IMSVidVRGraphSegment_OnEventNotify(This,lEventCode,lEventParm1,lEventParm2)	\
    ( (This)->lpVtbl -> OnEventNotify(This,lEventCode,lEventParm1,lEventParm2) ) 

#define IMSVidVRGraphSegment_Decompose(This)	\
    ( (This)->lpVtbl -> Decompose(This) ) 


#define IMSVidVRGraphSegment_put__VMRendererMode(This,dwMode)	\
    ( (This)->lpVtbl -> put__VMRendererMode(This,dwMode) ) 

#define IMSVidVRGraphSegment_put_Owner(This,Window)	\
    ( (This)->lpVtbl -> put_Owner(This,Window) ) 

#define IMSVidVRGraphSegment_get_Owner(This,Window)	\
    ( (This)->lpVtbl -> get_Owner(This,Window) ) 

#define IMSVidVRGraphSegment_get_UseOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> get_UseOverlay(This,UseOverlayVal) ) 

#define IMSVidVRGraphSegment_put_UseOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> put_UseOverlay(This,UseOverlayVal) ) 

#define IMSVidVRGraphSegment_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define IMSVidVRGraphSegment_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define IMSVidVRGraphSegment_get_ColorKey(This,ColorKey)	\
    ( (This)->lpVtbl -> get_ColorKey(This,ColorKey) ) 

#define IMSVidVRGraphSegment_put_ColorKey(This,ColorKey)	\
    ( (This)->lpVtbl -> put_ColorKey(This,ColorKey) ) 

#define IMSVidVRGraphSegment_get_Source(This,r)	\
    ( (This)->lpVtbl -> get_Source(This,r) ) 

#define IMSVidVRGraphSegment_put_Source(This,r)	\
    ( (This)->lpVtbl -> put_Source(This,r) ) 

#define IMSVidVRGraphSegment_get_Destination(This,r)	\
    ( (This)->lpVtbl -> get_Destination(This,r) ) 

#define IMSVidVRGraphSegment_put_Destination(This,r)	\
    ( (This)->lpVtbl -> put_Destination(This,r) ) 

#define IMSVidVRGraphSegment_get_NativeSize(This,sizeval,aspectratio)	\
    ( (This)->lpVtbl -> get_NativeSize(This,sizeval,aspectratio) ) 

#define IMSVidVRGraphSegment_get_BorderColor(This,color)	\
    ( (This)->lpVtbl -> get_BorderColor(This,color) ) 

#define IMSVidVRGraphSegment_put_BorderColor(This,color)	\
    ( (This)->lpVtbl -> put_BorderColor(This,color) ) 

#define IMSVidVRGraphSegment_get_MaintainAspectRatio(This,fMaintain)	\
    ( (This)->lpVtbl -> get_MaintainAspectRatio(This,fMaintain) ) 

#define IMSVidVRGraphSegment_put_MaintainAspectRatio(This,fMaintain)	\
    ( (This)->lpVtbl -> put_MaintainAspectRatio(This,fMaintain) ) 

#define IMSVidVRGraphSegment_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IMSVidVRGraphSegment_DisplayChange(This)	\
    ( (This)->lpVtbl -> DisplayChange(This) ) 

#define IMSVidVRGraphSegment_RePaint(This,hdc)	\
    ( (This)->lpVtbl -> RePaint(This,hdc) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVRGraphSegment_INTERFACE_DEFINED__ */


#ifndef __IMSVidDevice_INTERFACE_DEFINED__
#define __IMSVidDevice_INTERFACE_DEFINED__

/* interface IMSVidDevice */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D47C-911D-11d2-B632-00C04F79498E")
    IMSVidDevice : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ __RPC__out long *Status) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Power( 
            /* [in] */ VARIANT_BOOL Power) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Power( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Category( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ClassID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__Category( 
            /* [retval][out] */ __RPC__out GUID *Guid) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__ClassID( 
            /* [retval][out] */ __RPC__out GUID *Clsid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IsEqualDevice( 
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidDevice * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidDevice * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidDevice * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidDevice * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidDevice * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidDevice * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidDevice * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidDevice * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidDevice * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        END_INTERFACE
    } IMSVidDeviceVtbl;

    interface IMSVidDevice
    {
        CONST_VTBL struct IMSVidDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidDevice_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidDevice_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidDevice_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidDevice_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidDevice_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidDevice_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidDevice_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidDevice_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidDevice_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidDevice_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidDevice_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidDevice_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidDevice_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidDevice_INTERFACE_DEFINED__ */


#ifndef __IMSVidDevice2_INTERFACE_DEFINED__
#define __IMSVidDevice2_INTERFACE_DEFINED__

/* interface IMSVidDevice2 */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidDevice2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("87BD2783-EBC0-478C-B4A0-E8E7F43AB78E")
    IMSVidDevice2 : public IUnknown
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DevicePath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *DevPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidDevice2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidDevice2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidDevice2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidDevice2 * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DevicePath )( 
            IMSVidDevice2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *DevPath);
        
        END_INTERFACE
    } IMSVidDevice2Vtbl;

    interface IMSVidDevice2
    {
        CONST_VTBL struct IMSVidDevice2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidDevice2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidDevice2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidDevice2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidDevice2_get_DevicePath(This,DevPath)	\
    ( (This)->lpVtbl -> get_DevicePath(This,DevPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidDevice2_INTERFACE_DEFINED__ */


#ifndef __IMSVidInputDevice_INTERFACE_DEFINED__
#define __IMSVidInputDevice_INTERFACE_DEFINED__

/* interface IMSVidInputDevice */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidInputDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B0353D-A4C8-11d2-B634-00C04F79498E")
    IMSVidInputDevice : public IMSVidDevice
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsViewable( 
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE View( 
            /* [in] */ __RPC__in VARIANT *v) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidInputDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidInputDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidInputDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidInputDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidInputDevice * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidInputDevice * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidInputDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidInputDevice * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidInputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidInputDevice * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidInputDevice * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidInputDevice * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidInputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidInputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidInputDevice * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidInputDevice * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidInputDevice * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidInputDevice * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidInputDevice * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        END_INTERFACE
    } IMSVidInputDeviceVtbl;

    interface IMSVidInputDevice
    {
        CONST_VTBL struct IMSVidInputDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidInputDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidInputDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidInputDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidInputDevice_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidInputDevice_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidInputDevice_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidInputDevice_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidInputDevice_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidInputDevice_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidInputDevice_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidInputDevice_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidInputDevice_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidInputDevice_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidInputDevice_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidInputDevice_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidInputDevice_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidInputDevice_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidInputDevice_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidInputDevice_INTERFACE_DEFINED__ */


#ifndef __IMSVidDeviceEvent_INTERFACE_DEFINED__
#define __IMSVidDeviceEvent_INTERFACE_DEFINED__

/* interface IMSVidDeviceEvent */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidDeviceEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D480-911D-11d2-B632-00C04F79498E")
    IMSVidDeviceEvent : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StateChange( 
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidDeviceEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidDeviceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidDeviceEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidDeviceEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidDeviceEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidDeviceEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidDeviceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidDeviceEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidDeviceEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        END_INTERFACE
    } IMSVidDeviceEventVtbl;

    interface IMSVidDeviceEvent
    {
        CONST_VTBL struct IMSVidDeviceEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidDeviceEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidDeviceEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidDeviceEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidDeviceEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidDeviceEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidDeviceEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidDeviceEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidDeviceEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidDeviceEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidInputDeviceEvent_INTERFACE_DEFINED__
#define __IMSVidInputDeviceEvent_INTERFACE_DEFINED__

/* interface IMSVidInputDeviceEvent */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidInputDeviceEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B0353E-A4C8-11d2-B634-00C04F79498E")
    IMSVidInputDeviceEvent : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidInputDeviceEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidInputDeviceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidInputDeviceEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidInputDeviceEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidInputDeviceEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidInputDeviceEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidInputDeviceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidInputDeviceEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IMSVidInputDeviceEventVtbl;

    interface IMSVidInputDeviceEvent
    {
        CONST_VTBL struct IMSVidInputDeviceEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidInputDeviceEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidInputDeviceEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidInputDeviceEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidInputDeviceEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidInputDeviceEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidInputDeviceEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidInputDeviceEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidInputDeviceEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidVideoInputDevice_INTERFACE_DEFINED__
#define __IMSVidVideoInputDevice_INTERFACE_DEFINED__

/* interface IMSVidVideoInputDevice */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidVideoInputDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D47F-911D-11d2-B632-00C04F79498E")
    IMSVidVideoInputDevice : public IMSVidInputDevice
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVideoInputDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVideoInputDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVideoInputDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidVideoInputDevice * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidVideoInputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidVideoInputDevice * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidVideoInputDevice * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidVideoInputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidVideoInputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidVideoInputDevice * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidVideoInputDevice * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidVideoInputDevice * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        END_INTERFACE
    } IMSVidVideoInputDeviceVtbl;

    interface IMSVidVideoInputDevice
    {
        CONST_VTBL struct IMSVidVideoInputDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVideoInputDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVideoInputDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVideoInputDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVideoInputDevice_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidVideoInputDevice_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidVideoInputDevice_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidVideoInputDevice_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidVideoInputDevice_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidVideoInputDevice_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidVideoInputDevice_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidVideoInputDevice_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidVideoInputDevice_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidVideoInputDevice_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidVideoInputDevice_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidVideoInputDevice_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidVideoInputDevice_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidVideoInputDevice_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidVideoInputDevice_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVideoInputDevice_INTERFACE_DEFINED__ */


#ifndef __IMSVidPlayback_INTERFACE_DEFINED__
#define __IMSVidPlayback_INTERFACE_DEFINED__

/* interface IMSVidPlayback */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidPlayback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B03538-A4C8-11d2-B634-00C04F79498E")
    IMSVidPlayback : public IMSVidInputDevice
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableResetOnStop( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableResetOnStop( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Run( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CanStep( 
            /* [in] */ VARIANT_BOOL fBackwards,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfCan) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Step( 
            /* [in] */ long lStep) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rate( 
            /* [in] */ double plRate) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rate( 
            /* [retval][out] */ __RPC__out double *plRate) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentPosition( 
            /* [in] */ long lPosition) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentPosition( 
            /* [retval][out] */ __RPC__out long *lPosition) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PositionMode( 
            /* [in] */ PositionModeList lPositionMode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PositionMode( 
            /* [retval][out] */ __RPC__out PositionModeList *lPositionMode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ __RPC__out long *lLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidPlaybackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidPlayback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidPlayback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidPlayback * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidPlayback * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidPlayback * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidPlayback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidPlayback * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidPlayback * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidPlayback * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidPlayback * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidPlayback * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidPlayback * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableResetOnStop )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableResetOnStop )( 
            IMSVidPlayback * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            IMSVidPlayback * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IMSVidPlayback * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMSVidPlayback * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanStep )( 
            IMSVidPlayback * This,
            /* [in] */ VARIANT_BOOL fBackwards,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfCan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Step )( 
            IMSVidPlayback * This,
            /* [in] */ long lStep);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            IMSVidPlayback * This,
            /* [in] */ double plRate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out double *plRate);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPosition )( 
            IMSVidPlayback * This,
            /* [in] */ long lPosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out long *lPosition);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PositionMode )( 
            IMSVidPlayback * This,
            /* [in] */ PositionModeList lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionMode )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out PositionModeList *lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IMSVidPlayback * This,
            /* [retval][out] */ __RPC__out long *lLength);
        
        END_INTERFACE
    } IMSVidPlaybackVtbl;

    interface IMSVidPlayback
    {
        CONST_VTBL struct IMSVidPlaybackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidPlayback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidPlayback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidPlayback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidPlayback_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidPlayback_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidPlayback_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidPlayback_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidPlayback_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidPlayback_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidPlayback_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidPlayback_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidPlayback_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidPlayback_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidPlayback_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidPlayback_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidPlayback_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidPlayback_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidPlayback_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 


#define IMSVidPlayback_get_EnableResetOnStop(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableResetOnStop(This,pVal) ) 

#define IMSVidPlayback_put_EnableResetOnStop(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableResetOnStop(This,newVal) ) 

#define IMSVidPlayback_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IMSVidPlayback_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSVidPlayback_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMSVidPlayback_get_CanStep(This,fBackwards,pfCan)	\
    ( (This)->lpVtbl -> get_CanStep(This,fBackwards,pfCan) ) 

#define IMSVidPlayback_Step(This,lStep)	\
    ( (This)->lpVtbl -> Step(This,lStep) ) 

#define IMSVidPlayback_put_Rate(This,plRate)	\
    ( (This)->lpVtbl -> put_Rate(This,plRate) ) 

#define IMSVidPlayback_get_Rate(This,plRate)	\
    ( (This)->lpVtbl -> get_Rate(This,plRate) ) 

#define IMSVidPlayback_put_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> put_CurrentPosition(This,lPosition) ) 

#define IMSVidPlayback_get_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,lPosition) ) 

#define IMSVidPlayback_put_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> put_PositionMode(This,lPositionMode) ) 

#define IMSVidPlayback_get_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> get_PositionMode(This,lPositionMode) ) 

#define IMSVidPlayback_get_Length(This,lLength)	\
    ( (This)->lpVtbl -> get_Length(This,lLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidPlayback_INTERFACE_DEFINED__ */


#ifndef __IMSVidPlaybackEvent_INTERFACE_DEFINED__
#define __IMSVidPlaybackEvent_INTERFACE_DEFINED__

/* interface IMSVidPlaybackEvent */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidPlaybackEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B0353B-A4C8-11d2-B634-00C04F79498E")
    IMSVidPlaybackEvent : public IMSVidInputDeviceEvent
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EndOfMedia( 
            /* [in] */ __RPC__in_opt IMSVidPlayback *lpd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidPlaybackEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidPlaybackEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidPlaybackEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidPlaybackEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidPlaybackEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidPlaybackEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidPlaybackEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidPlaybackEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EndOfMedia )( 
            IMSVidPlaybackEvent * This,
            /* [in] */ __RPC__in_opt IMSVidPlayback *lpd);
        
        END_INTERFACE
    } IMSVidPlaybackEventVtbl;

    interface IMSVidPlaybackEvent
    {
        CONST_VTBL struct IMSVidPlaybackEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidPlaybackEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidPlaybackEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidPlaybackEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidPlaybackEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidPlaybackEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidPlaybackEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidPlaybackEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidPlaybackEvent_EndOfMedia(This,lpd)	\
    ( (This)->lpVtbl -> EndOfMedia(This,lpd) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidPlaybackEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidTuner_INTERFACE_DEFINED__
#define __IMSVidTuner_INTERFACE_DEFINED__

/* interface IMSVidTuner */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidTuner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D47D-911D-11d2-B632-00C04F79498E")
    IMSVidTuner : public IMSVidVideoInputDevice
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Tune( 
            /* [retval][out] */ __RPC__deref_out_opt ITuneRequest **ppTR) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Tune( 
            /* [in] */ __RPC__in_opt ITuneRequest *pTR) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TuningSpace( 
            /* [retval][out] */ __RPC__deref_out_opt ITuningSpace **plTS) = 0;
        
        virtual /* [id][propput][restricted][hidden] */ HRESULT STDMETHODCALLTYPE put_TuningSpace( 
            /* [in] */ __RPC__in_opt ITuningSpace *plTS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidTunerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidTuner * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidTuner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidTuner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidTuner * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidTuner * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidTuner * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidTuner * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidTuner * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidTuner * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidTuner * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidTuner * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidTuner * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tune )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt ITuneRequest **ppTR);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tune )( 
            IMSVidTuner * This,
            /* [in] */ __RPC__in_opt ITuneRequest *pTR);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TuningSpace )( 
            IMSVidTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt ITuningSpace **plTS);
        
        /* [id][propput][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_TuningSpace )( 
            IMSVidTuner * This,
            /* [in] */ __RPC__in_opt ITuningSpace *plTS);
        
        END_INTERFACE
    } IMSVidTunerVtbl;

    interface IMSVidTuner
    {
        CONST_VTBL struct IMSVidTunerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidTuner_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidTuner_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidTuner_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidTuner_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidTuner_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidTuner_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidTuner_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidTuner_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidTuner_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidTuner_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidTuner_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidTuner_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidTuner_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidTuner_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidTuner_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidTuner_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidTuner_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidTuner_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 



#define IMSVidTuner_get_Tune(This,ppTR)	\
    ( (This)->lpVtbl -> get_Tune(This,ppTR) ) 

#define IMSVidTuner_put_Tune(This,pTR)	\
    ( (This)->lpVtbl -> put_Tune(This,pTR) ) 

#define IMSVidTuner_get_TuningSpace(This,plTS)	\
    ( (This)->lpVtbl -> get_TuningSpace(This,plTS) ) 

#define IMSVidTuner_put_TuningSpace(This,plTS)	\
    ( (This)->lpVtbl -> put_TuningSpace(This,plTS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidTuner_INTERFACE_DEFINED__ */


#ifndef __IMSVidTunerEvent_INTERFACE_DEFINED__
#define __IMSVidTunerEvent_INTERFACE_DEFINED__

/* interface IMSVidTunerEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidTunerEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D485-911D-11d2-B632-00C04F79498E")
    IMSVidTunerEvent : public IMSVidInputDeviceEvent
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE TuneChanged( 
            /* [in] */ __RPC__in_opt IMSVidTuner *lpd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidTunerEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidTunerEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidTunerEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidTunerEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidTunerEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidTunerEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidTunerEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidTunerEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *TuneChanged )( 
            IMSVidTunerEvent * This,
            /* [in] */ __RPC__in_opt IMSVidTuner *lpd);
        
        END_INTERFACE
    } IMSVidTunerEventVtbl;

    interface IMSVidTunerEvent
    {
        CONST_VTBL struct IMSVidTunerEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidTunerEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidTunerEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidTunerEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidTunerEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidTunerEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidTunerEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidTunerEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidTunerEvent_TuneChanged(This,lpd)	\
    ( (This)->lpVtbl -> TuneChanged(This,lpd) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidTunerEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidAnalogTuner_INTERFACE_DEFINED__
#define __IMSVidAnalogTuner_INTERFACE_DEFINED__

/* interface IMSVidAnalogTuner */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidAnalogTuner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D47E-911D-11d2-B632-00C04F79498E")
    IMSVidAnalogTuner : public IMSVidTuner
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Channel( 
            /* [retval][out] */ __RPC__out long *Channel) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Channel( 
            /* [in] */ long Channel) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_VideoFrequency( 
            /* [out][retval] */ __RPC__out long *lcc) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioFrequency( 
            /* [out][retval] */ __RPC__out long *lcc) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CountryCode( 
            /* [out][retval] */ __RPC__out long *lcc) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_CountryCode( 
            /* [in] */ long lcc) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SAP( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfSapOn) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SAP( 
            /* [in] */ VARIANT_BOOL fSapOn) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ChannelAvailable( 
            /* [in] */ long nChannel,
            /* [out] */ __RPC__out long *SignalStrength,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *fSignalPresent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidAnalogTunerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidAnalogTuner * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidAnalogTuner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidAnalogTuner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidAnalogTuner * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidAnalogTuner * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidAnalogTuner * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidAnalogTuner * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidAnalogTuner * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidAnalogTuner * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidAnalogTuner * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidAnalogTuner * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidAnalogTuner * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tune )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt ITuneRequest **ppTR);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tune )( 
            IMSVidAnalogTuner * This,
            /* [in] */ __RPC__in_opt ITuneRequest *pTR);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TuningSpace )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__deref_out_opt ITuningSpace **plTS);
        
        /* [id][propput][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_TuningSpace )( 
            IMSVidAnalogTuner * This,
            /* [in] */ __RPC__in_opt ITuningSpace *plTS);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Channel )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__out long *Channel);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Channel )( 
            IMSVidAnalogTuner * This,
            /* [in] */ long Channel);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFrequency )( 
            IMSVidAnalogTuner * This,
            /* [out][retval] */ __RPC__out long *lcc);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioFrequency )( 
            IMSVidAnalogTuner * This,
            /* [out][retval] */ __RPC__out long *lcc);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountryCode )( 
            IMSVidAnalogTuner * This,
            /* [out][retval] */ __RPC__out long *lcc);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CountryCode )( 
            IMSVidAnalogTuner * This,
            /* [in] */ long lcc);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SAP )( 
            IMSVidAnalogTuner * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfSapOn);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SAP )( 
            IMSVidAnalogTuner * This,
            /* [in] */ VARIANT_BOOL fSapOn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ChannelAvailable )( 
            IMSVidAnalogTuner * This,
            /* [in] */ long nChannel,
            /* [out] */ __RPC__out long *SignalStrength,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *fSignalPresent);
        
        END_INTERFACE
    } IMSVidAnalogTunerVtbl;

    interface IMSVidAnalogTuner
    {
        CONST_VTBL struct IMSVidAnalogTunerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidAnalogTuner_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidAnalogTuner_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidAnalogTuner_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidAnalogTuner_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidAnalogTuner_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidAnalogTuner_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidAnalogTuner_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidAnalogTuner_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidAnalogTuner_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidAnalogTuner_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidAnalogTuner_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidAnalogTuner_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidAnalogTuner_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidAnalogTuner_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidAnalogTuner_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidAnalogTuner_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidAnalogTuner_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidAnalogTuner_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 



#define IMSVidAnalogTuner_get_Tune(This,ppTR)	\
    ( (This)->lpVtbl -> get_Tune(This,ppTR) ) 

#define IMSVidAnalogTuner_put_Tune(This,pTR)	\
    ( (This)->lpVtbl -> put_Tune(This,pTR) ) 

#define IMSVidAnalogTuner_get_TuningSpace(This,plTS)	\
    ( (This)->lpVtbl -> get_TuningSpace(This,plTS) ) 

#define IMSVidAnalogTuner_put_TuningSpace(This,plTS)	\
    ( (This)->lpVtbl -> put_TuningSpace(This,plTS) ) 


#define IMSVidAnalogTuner_get_Channel(This,Channel)	\
    ( (This)->lpVtbl -> get_Channel(This,Channel) ) 

#define IMSVidAnalogTuner_put_Channel(This,Channel)	\
    ( (This)->lpVtbl -> put_Channel(This,Channel) ) 

#define IMSVidAnalogTuner_get_VideoFrequency(This,lcc)	\
    ( (This)->lpVtbl -> get_VideoFrequency(This,lcc) ) 

#define IMSVidAnalogTuner_get_AudioFrequency(This,lcc)	\
    ( (This)->lpVtbl -> get_AudioFrequency(This,lcc) ) 

#define IMSVidAnalogTuner_get_CountryCode(This,lcc)	\
    ( (This)->lpVtbl -> get_CountryCode(This,lcc) ) 

#define IMSVidAnalogTuner_put_CountryCode(This,lcc)	\
    ( (This)->lpVtbl -> put_CountryCode(This,lcc) ) 

#define IMSVidAnalogTuner_get_SAP(This,pfSapOn)	\
    ( (This)->lpVtbl -> get_SAP(This,pfSapOn) ) 

#define IMSVidAnalogTuner_put_SAP(This,fSapOn)	\
    ( (This)->lpVtbl -> put_SAP(This,fSapOn) ) 

#define IMSVidAnalogTuner_ChannelAvailable(This,nChannel,SignalStrength,fSignalPresent)	\
    ( (This)->lpVtbl -> ChannelAvailable(This,nChannel,SignalStrength,fSignalPresent) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidAnalogTuner_INTERFACE_DEFINED__ */


#ifndef __IMSVidAnalogTuner2_INTERFACE_DEFINED__
#define __IMSVidAnalogTuner2_INTERFACE_DEFINED__

/* interface IMSVidAnalogTuner2 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidAnalogTuner2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37647BF7-3DDE-4cc8-A4DC-0D534D3D0037")
    IMSVidAnalogTuner2 : public IMSVidAnalogTuner
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TVFormats( 
            /* [retval][out] */ __RPC__out long *Formats) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TunerModes( 
            /* [retval][out] */ __RPC__out long *Modes) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NumAuxInputs( 
            /* [retval][out] */ __RPC__out long *Inputs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidAnalogTuner2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidAnalogTuner2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidAnalogTuner2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidAnalogTuner2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidAnalogTuner2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tune )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITuneRequest **ppTR);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tune )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ __RPC__in_opt ITuneRequest *pTR);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TuningSpace )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITuningSpace **plTS);
        
        /* [id][propput][restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_TuningSpace )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ __RPC__in_opt ITuningSpace *plTS);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Channel )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out long *Channel);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Channel )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ long Channel);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFrequency )( 
            IMSVidAnalogTuner2 * This,
            /* [out][retval] */ __RPC__out long *lcc);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioFrequency )( 
            IMSVidAnalogTuner2 * This,
            /* [out][retval] */ __RPC__out long *lcc);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountryCode )( 
            IMSVidAnalogTuner2 * This,
            /* [out][retval] */ __RPC__out long *lcc);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CountryCode )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ long lcc);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SAP )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfSapOn);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SAP )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ VARIANT_BOOL fSapOn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ChannelAvailable )( 
            IMSVidAnalogTuner2 * This,
            /* [in] */ long nChannel,
            /* [out] */ __RPC__out long *SignalStrength,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *fSignalPresent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TVFormats )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out long *Formats);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TunerModes )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out long *Modes);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumAuxInputs )( 
            IMSVidAnalogTuner2 * This,
            /* [retval][out] */ __RPC__out long *Inputs);
        
        END_INTERFACE
    } IMSVidAnalogTuner2Vtbl;

    interface IMSVidAnalogTuner2
    {
        CONST_VTBL struct IMSVidAnalogTuner2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidAnalogTuner2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidAnalogTuner2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidAnalogTuner2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidAnalogTuner2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidAnalogTuner2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidAnalogTuner2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidAnalogTuner2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidAnalogTuner2_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidAnalogTuner2_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidAnalogTuner2_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidAnalogTuner2_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidAnalogTuner2_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidAnalogTuner2_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidAnalogTuner2_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidAnalogTuner2_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidAnalogTuner2_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidAnalogTuner2_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidAnalogTuner2_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 



#define IMSVidAnalogTuner2_get_Tune(This,ppTR)	\
    ( (This)->lpVtbl -> get_Tune(This,ppTR) ) 

#define IMSVidAnalogTuner2_put_Tune(This,pTR)	\
    ( (This)->lpVtbl -> put_Tune(This,pTR) ) 

#define IMSVidAnalogTuner2_get_TuningSpace(This,plTS)	\
    ( (This)->lpVtbl -> get_TuningSpace(This,plTS) ) 

#define IMSVidAnalogTuner2_put_TuningSpace(This,plTS)	\
    ( (This)->lpVtbl -> put_TuningSpace(This,plTS) ) 


#define IMSVidAnalogTuner2_get_Channel(This,Channel)	\
    ( (This)->lpVtbl -> get_Channel(This,Channel) ) 

#define IMSVidAnalogTuner2_put_Channel(This,Channel)	\
    ( (This)->lpVtbl -> put_Channel(This,Channel) ) 

#define IMSVidAnalogTuner2_get_VideoFrequency(This,lcc)	\
    ( (This)->lpVtbl -> get_VideoFrequency(This,lcc) ) 

#define IMSVidAnalogTuner2_get_AudioFrequency(This,lcc)	\
    ( (This)->lpVtbl -> get_AudioFrequency(This,lcc) ) 

#define IMSVidAnalogTuner2_get_CountryCode(This,lcc)	\
    ( (This)->lpVtbl -> get_CountryCode(This,lcc) ) 

#define IMSVidAnalogTuner2_put_CountryCode(This,lcc)	\
    ( (This)->lpVtbl -> put_CountryCode(This,lcc) ) 

#define IMSVidAnalogTuner2_get_SAP(This,pfSapOn)	\
    ( (This)->lpVtbl -> get_SAP(This,pfSapOn) ) 

#define IMSVidAnalogTuner2_put_SAP(This,fSapOn)	\
    ( (This)->lpVtbl -> put_SAP(This,fSapOn) ) 

#define IMSVidAnalogTuner2_ChannelAvailable(This,nChannel,SignalStrength,fSignalPresent)	\
    ( (This)->lpVtbl -> ChannelAvailable(This,nChannel,SignalStrength,fSignalPresent) ) 


#define IMSVidAnalogTuner2_get_TVFormats(This,Formats)	\
    ( (This)->lpVtbl -> get_TVFormats(This,Formats) ) 

#define IMSVidAnalogTuner2_get_TunerModes(This,Modes)	\
    ( (This)->lpVtbl -> get_TunerModes(This,Modes) ) 

#define IMSVidAnalogTuner2_get_NumAuxInputs(This,Inputs)	\
    ( (This)->lpVtbl -> get_NumAuxInputs(This,Inputs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidAnalogTuner2_INTERFACE_DEFINED__ */


#ifndef __IMSVidAnalogTunerEvent_INTERFACE_DEFINED__
#define __IMSVidAnalogTunerEvent_INTERFACE_DEFINED__

/* interface IMSVidAnalogTunerEvent */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidAnalogTunerEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C15D486-911D-11d2-B632-00C04F79498E")
    IMSVidAnalogTunerEvent : public IMSVidTunerEvent
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidAnalogTunerEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidAnalogTunerEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidAnalogTunerEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidAnalogTunerEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidAnalogTunerEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidAnalogTunerEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidAnalogTunerEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidAnalogTunerEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *TuneChanged )( 
            IMSVidAnalogTunerEvent * This,
            /* [in] */ __RPC__in_opt IMSVidTuner *lpd);
        
        END_INTERFACE
    } IMSVidAnalogTunerEventVtbl;

    interface IMSVidAnalogTunerEvent
    {
        CONST_VTBL struct IMSVidAnalogTunerEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidAnalogTunerEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidAnalogTunerEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidAnalogTunerEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidAnalogTunerEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidAnalogTunerEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidAnalogTunerEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidAnalogTunerEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidAnalogTunerEvent_TuneChanged(This,lpd)	\
    ( (This)->lpVtbl -> TuneChanged(This,lpd) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidAnalogTunerEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidFilePlayback_INTERFACE_DEFINED__
#define __IMSVidFilePlayback_INTERFACE_DEFINED__

/* interface IMSVidFilePlayback */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidFilePlayback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B03539-A4C8-11d2-B634-00C04F79498E")
    IMSVidFilePlayback : public IMSVidPlayback
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *FileName) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_FileName( 
            /* [in] */ __RPC__in BSTR FileName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidFilePlaybackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidFilePlayback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidFilePlayback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidFilePlayback * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidFilePlayback * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidFilePlayback * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidFilePlayback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidFilePlayback * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidFilePlayback * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidFilePlayback * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidFilePlayback * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidFilePlayback * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidFilePlayback * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableResetOnStop )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableResetOnStop )( 
            IMSVidFilePlayback * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            IMSVidFilePlayback * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IMSVidFilePlayback * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMSVidFilePlayback * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanStep )( 
            IMSVidFilePlayback * This,
            /* [in] */ VARIANT_BOOL fBackwards,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfCan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Step )( 
            IMSVidFilePlayback * This,
            /* [in] */ long lStep);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            IMSVidFilePlayback * This,
            /* [in] */ double plRate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out double *plRate);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPosition )( 
            IMSVidFilePlayback * This,
            /* [in] */ long lPosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out long *lPosition);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PositionMode )( 
            IMSVidFilePlayback * This,
            /* [in] */ PositionModeList lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionMode )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out PositionModeList *lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__out long *lLength);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            IMSVidFilePlayback * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *FileName);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            IMSVidFilePlayback * This,
            /* [in] */ __RPC__in BSTR FileName);
        
        END_INTERFACE
    } IMSVidFilePlaybackVtbl;

    interface IMSVidFilePlayback
    {
        CONST_VTBL struct IMSVidFilePlaybackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidFilePlayback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidFilePlayback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidFilePlayback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidFilePlayback_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidFilePlayback_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidFilePlayback_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidFilePlayback_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidFilePlayback_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidFilePlayback_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidFilePlayback_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidFilePlayback_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidFilePlayback_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidFilePlayback_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidFilePlayback_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidFilePlayback_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidFilePlayback_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidFilePlayback_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidFilePlayback_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 


#define IMSVidFilePlayback_get_EnableResetOnStop(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableResetOnStop(This,pVal) ) 

#define IMSVidFilePlayback_put_EnableResetOnStop(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableResetOnStop(This,newVal) ) 

#define IMSVidFilePlayback_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IMSVidFilePlayback_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSVidFilePlayback_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMSVidFilePlayback_get_CanStep(This,fBackwards,pfCan)	\
    ( (This)->lpVtbl -> get_CanStep(This,fBackwards,pfCan) ) 

#define IMSVidFilePlayback_Step(This,lStep)	\
    ( (This)->lpVtbl -> Step(This,lStep) ) 

#define IMSVidFilePlayback_put_Rate(This,plRate)	\
    ( (This)->lpVtbl -> put_Rate(This,plRate) ) 

#define IMSVidFilePlayback_get_Rate(This,plRate)	\
    ( (This)->lpVtbl -> get_Rate(This,plRate) ) 

#define IMSVidFilePlayback_put_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> put_CurrentPosition(This,lPosition) ) 

#define IMSVidFilePlayback_get_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,lPosition) ) 

#define IMSVidFilePlayback_put_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> put_PositionMode(This,lPositionMode) ) 

#define IMSVidFilePlayback_get_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> get_PositionMode(This,lPositionMode) ) 

#define IMSVidFilePlayback_get_Length(This,lLength)	\
    ( (This)->lpVtbl -> get_Length(This,lLength) ) 


#define IMSVidFilePlayback_get_FileName(This,FileName)	\
    ( (This)->lpVtbl -> get_FileName(This,FileName) ) 

#define IMSVidFilePlayback_put_FileName(This,FileName)	\
    ( (This)->lpVtbl -> put_FileName(This,FileName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidFilePlayback_INTERFACE_DEFINED__ */


#ifndef __IMSVidFilePlayback2_INTERFACE_DEFINED__
#define __IMSVidFilePlayback2_INTERFACE_DEFINED__

/* interface IMSVidFilePlayback2 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidFilePlayback2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2F7E44AF-6E52-4660-BC08-D8D542587D72")
    IMSVidFilePlayback2 : public IMSVidFilePlayback
    {
    public:
        virtual /* [id][hidden][propput] */ HRESULT STDMETHODCALLTYPE put__SourceFilter( 
            /* [in] */ __RPC__in BSTR FileName) = 0;
        
        virtual /* [id][hidden][propput] */ HRESULT STDMETHODCALLTYPE put___SourceFilter( 
            /* [in] */ GUID FileName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidFilePlayback2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidFilePlayback2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidFilePlayback2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidFilePlayback2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidFilePlayback2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableResetOnStop )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableResetOnStop )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            IMSVidFilePlayback2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IMSVidFilePlayback2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMSVidFilePlayback2 * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanStep )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ VARIANT_BOOL fBackwards,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfCan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Step )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ long lStep);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ double plRate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out double *plRate);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPosition )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ long lPosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out long *lPosition);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PositionMode )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ PositionModeList lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionMode )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out PositionModeList *lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__out long *lLength);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            IMSVidFilePlayback2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *FileName);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ __RPC__in BSTR FileName);
        
        /* [id][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__SourceFilter )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ __RPC__in BSTR FileName);
        
        /* [id][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put___SourceFilter )( 
            IMSVidFilePlayback2 * This,
            /* [in] */ GUID FileName);
        
        END_INTERFACE
    } IMSVidFilePlayback2Vtbl;

    interface IMSVidFilePlayback2
    {
        CONST_VTBL struct IMSVidFilePlayback2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidFilePlayback2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidFilePlayback2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidFilePlayback2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidFilePlayback2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidFilePlayback2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidFilePlayback2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidFilePlayback2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidFilePlayback2_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidFilePlayback2_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidFilePlayback2_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidFilePlayback2_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidFilePlayback2_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidFilePlayback2_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidFilePlayback2_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidFilePlayback2_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidFilePlayback2_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidFilePlayback2_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidFilePlayback2_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 


#define IMSVidFilePlayback2_get_EnableResetOnStop(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableResetOnStop(This,pVal) ) 

#define IMSVidFilePlayback2_put_EnableResetOnStop(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableResetOnStop(This,newVal) ) 

#define IMSVidFilePlayback2_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IMSVidFilePlayback2_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSVidFilePlayback2_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMSVidFilePlayback2_get_CanStep(This,fBackwards,pfCan)	\
    ( (This)->lpVtbl -> get_CanStep(This,fBackwards,pfCan) ) 

#define IMSVidFilePlayback2_Step(This,lStep)	\
    ( (This)->lpVtbl -> Step(This,lStep) ) 

#define IMSVidFilePlayback2_put_Rate(This,plRate)	\
    ( (This)->lpVtbl -> put_Rate(This,plRate) ) 

#define IMSVidFilePlayback2_get_Rate(This,plRate)	\
    ( (This)->lpVtbl -> get_Rate(This,plRate) ) 

#define IMSVidFilePlayback2_put_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> put_CurrentPosition(This,lPosition) ) 

#define IMSVidFilePlayback2_get_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,lPosition) ) 

#define IMSVidFilePlayback2_put_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> put_PositionMode(This,lPositionMode) ) 

#define IMSVidFilePlayback2_get_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> get_PositionMode(This,lPositionMode) ) 

#define IMSVidFilePlayback2_get_Length(This,lLength)	\
    ( (This)->lpVtbl -> get_Length(This,lLength) ) 


#define IMSVidFilePlayback2_get_FileName(This,FileName)	\
    ( (This)->lpVtbl -> get_FileName(This,FileName) ) 

#define IMSVidFilePlayback2_put_FileName(This,FileName)	\
    ( (This)->lpVtbl -> put_FileName(This,FileName) ) 


#define IMSVidFilePlayback2_put__SourceFilter(This,FileName)	\
    ( (This)->lpVtbl -> put__SourceFilter(This,FileName) ) 

#define IMSVidFilePlayback2_put___SourceFilter(This,FileName)	\
    ( (This)->lpVtbl -> put___SourceFilter(This,FileName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidFilePlayback2_INTERFACE_DEFINED__ */


#ifndef __IMSVidFilePlaybackEvent_INTERFACE_DEFINED__
#define __IMSVidFilePlaybackEvent_INTERFACE_DEFINED__

/* interface IMSVidFilePlaybackEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidFilePlaybackEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B0353A-A4C8-11d2-B634-00C04F79498E")
    IMSVidFilePlaybackEvent : public IMSVidPlaybackEvent
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidFilePlaybackEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidFilePlaybackEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidFilePlaybackEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidFilePlaybackEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidFilePlaybackEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidFilePlaybackEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidFilePlaybackEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidFilePlaybackEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EndOfMedia )( 
            IMSVidFilePlaybackEvent * This,
            /* [in] */ __RPC__in_opt IMSVidPlayback *lpd);
        
        END_INTERFACE
    } IMSVidFilePlaybackEventVtbl;

    interface IMSVidFilePlaybackEvent
    {
        CONST_VTBL struct IMSVidFilePlaybackEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidFilePlaybackEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidFilePlaybackEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidFilePlaybackEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidFilePlaybackEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidFilePlaybackEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidFilePlaybackEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidFilePlaybackEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidFilePlaybackEvent_EndOfMedia(This,lpd)	\
    ( (This)->lpVtbl -> EndOfMedia(This,lpd) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidFilePlaybackEvent_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_segment_0000_0023 */
/* [local] */ 

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0023_0001
    {	dvdMenu_Title	= 2,
	dvdMenu_Root	= ( dvdMenu_Title + 1 ) ,
	dvdMenu_Subpicture	= ( dvdMenu_Root + 1 ) ,
	dvdMenu_Audio	= ( dvdMenu_Subpicture + 1 ) ,
	dvdMenu_Angle	= ( dvdMenu_Audio + 1 ) ,
	dvdMenu_Chapter	= ( dvdMenu_Angle + 1 ) 
    } 	DVDMenuIDConstants;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_segment_0000_0023_0002
    {	dvdState_Undefined	= -2,
	dvdState_Unitialized	= ( dvdState_Undefined + 1 ) ,
	dvdState_Stopped	= ( dvdState_Unitialized + 1 ) ,
	dvdState_Paused	= ( dvdState_Stopped + 1 ) ,
	dvdState_Running	= ( dvdState_Paused + 1 ) 
    } 	DVDFilterState;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0023_0003
    {	dvdStruct_Volume	= 0x1,
	dvdStruct_Title	= 0x2,
	dvdStruct_ParentalID	= 0x3,
	dvdStruct_PartOfTitle	= 0x4,
	dvdStruct_Cell	= 0x5,
	dvdStream_Audio	= 0x10,
	dvdStream_Subpicture	= 0x11,
	dvdStream_Angle	= 0x12,
	dvdChannel_Audio	= 0x20,
	dvdGeneral_Name	= 0x30,
	dvdGeneral_Comments	= 0x31,
	dvdTitle_Series	= 0x38,
	dvdTitle_Movie	= 0x39,
	dvdTitle_Video	= 0x3a,
	dvdTitle_Album	= 0x3b,
	dvdTitle_Song	= 0x3c,
	dvdTitle_Other	= 0x3f,
	dvdTitle_Sub_Series	= 0x40,
	dvdTitle_Sub_Movie	= 0x41,
	dvdTitle_Sub_Video	= 0x42,
	dvdTitle_Sub_Album	= 0x43,
	dvdTitle_Sub_Song	= 0x44,
	dvdTitle_Sub_Other	= 0x47,
	dvdTitle_Orig_Series	= 0x48,
	dvdTitle_Orig_Movie	= 0x49,
	dvdTitle_Orig_Video	= 0x4a,
	dvdTitle_Orig_Album	= 0x4b,
	dvdTitle_Orig_Song	= 0x4c,
	dvdTitle_Orig_Other	= 0x4f,
	dvdOther_Scene	= 0x50,
	dvdOther_Cut	= 0x51,
	dvdOther_Take	= 0x52
    } 	DVDTextStringType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0023_0004
    {	dvdSPExt_NotSpecified	= 0,
	dvdSPExt_Caption_Normal	= 1,
	dvdSPExt_Caption_Big	= 2,
	dvdSPExt_Caption_Children	= 3,
	dvdSPExt_CC_Normal	= 5,
	dvdSPExt_CC_Big	= 6,
	dvdSPExt_CC_Children	= 7,
	dvdSPExt_Forced	= 9,
	dvdSPExt_DirectorComments_Normal	= 13,
	dvdSPExt_DirectorComments_Big	= 14,
	dvdSPExt_DirectorComments_Children	= 15
    } 	DVDSPExt;



extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0023_v0_0_s_ifspec;

#ifndef __IMSVidWebDVD_INTERFACE_DEFINED__
#define __IMSVidWebDVD_INTERFACE_DEFINED__

/* interface IMSVidWebDVD */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidWebDVD;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CF45F88B-AC56-4EE2-A73A-ED04E2885D3C")
    IMSVidWebDVD : public IMSVidPlayback
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnDVDEvent( 
            /* [in] */ long lEvent,
            /* [in] */ LONG_PTR lParam1,
            /* [in] */ LONG_PTR lParam2) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayTitle( 
            /* [in] */ long lTitle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayChapterInTitle( 
            /* [in] */ long lTitle,
            /* [in] */ long lChapter) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayChapter( 
            /* [in] */ long lChapter) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayChaptersAutoStop( 
            /* [in] */ long lTitle,
            /* [in] */ long lstrChapter,
            /* [in] */ long lChapterCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayAtTime( 
            /* [in] */ __RPC__in BSTR strTime) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayAtTimeInTitle( 
            /* [in] */ long lTitle,
            /* [in] */ __RPC__in BSTR strTime) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayPeriodInTitleAutoStop( 
            /* [in] */ long lTitle,
            /* [in] */ __RPC__in BSTR strStartTime,
            /* [in] */ __RPC__in BSTR strEndTime) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReplayChapter( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayPrevChapter( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayNextChapter( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StillOff( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioLanguage( 
            /* [in] */ long lStream,
            /* [defaultvalue][in] */ VARIANT_BOOL fFormat,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *strAudioLang) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ShowMenu( 
            /* [in] */ DVDMenuIDConstants MenuID) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReturnFromSubmenu( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ButtonsAvailable( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentButton( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectAndActivateButton( 
            /* [in] */ long lButton) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ActivateButton( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectRightButton( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectLeftButton( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectLowerButton( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectUpperButton( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ActivateAtPosition( 
            /* [in] */ long xPos,
            /* [in] */ long yPos) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectAtPosition( 
            /* [in] */ long xPos,
            /* [in] */ long yPos) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ButtonAtPosition( 
            /* [in] */ long xPos,
            /* [in] */ long yPos,
            /* [retval][out] */ __RPC__out long *plButton) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfChapters( 
            /* [in] */ long lTitle,
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TotalTitleTime( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TitlesAvailable( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VolumesAvailable( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentVolume( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentDiscSide( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentDomain( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentChapter( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentTitle( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentTime( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DVDTimeCode2bstr( 
            /* [in] */ long timeCode,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pTimeStr) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDDirectory( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DVDDirectory( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IsSubpictureStreamEnabled( 
            /* [in] */ long lstream,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *fEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IsAudioStreamEnabled( 
            /* [in] */ long lstream,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *fEnabled) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentSubpictureStream( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentSubpictureStream( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SubpictureLanguage( 
            long lStream,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *strLanguage) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentAudioStream( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentAudioStream( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioStreamsAvailable( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AnglesAvailable( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentAngle( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentAngle( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SubpictureStreamsAvailable( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SubpictureOn( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SubpictureOn( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDUniqueID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AcceptParentalLevelChange( 
            /* [in] */ VARIANT_BOOL fAccept,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE NotifyParentalLevelChange( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectParentalCountry( 
            /* [in] */ long lCountry,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectParentalLevel( 
            /* [in] */ long lParentalLevel,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TitleParentalLevels( 
            /* [in] */ long lTitle,
            /* [retval][out] */ __RPC__out long *plParentalLevels) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerParentalCountry( 
            /* [retval][out] */ __RPC__out long *plCountryCode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerParentalLevel( 
            /* [retval][out] */ __RPC__out long *plParentalLevel) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Eject( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UOPValid( 
            /* [in] */ long lUOP,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfValid) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SPRM( 
            /* [in] */ long lIndex,
            /* [retval][out] */ __RPC__out short *psSPRM) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_GPRM( 
            /* [in] */ long lIndex,
            /* [retval][out] */ __RPC__out short *psSPRM) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_GPRM( 
            /* [in] */ long lIndex,
            /* [in] */ short sValue) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDTextStringType( 
            /* [in] */ long lLangIndex,
            /* [in] */ long lStringIndex,
            /* [retval][out] */ __RPC__out DVDTextStringType *pType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDTextString( 
            /* [in] */ long lLangIndex,
            /* [in] */ long lStringIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pstrText) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDTextNumberOfStrings( 
            /* [in] */ long lLangIndex,
            /* [retval][out] */ __RPC__out long *plNumOfStrings) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDTextNumberOfLanguages( 
            /* [retval][out] */ __RPC__out long *plNumOfLangs) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDTextLanguageLCID( 
            /* [in] */ long lLangIndex,
            /* [retval][out] */ __RPC__out long *lcid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RegionChange( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDAdm( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteBookmark( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RestoreBookmark( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SaveBookmark( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectDefaultAudioLanguage( 
            /* [in] */ long lang,
            /* [in] */ long ext) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectDefaultSubpictureLanguage( 
            /* [in] */ long lang,
            /* [in] */ DVDSPExt ext) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreferredSubpictureStream( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultMenuLanguage( 
            /* [retval][out] */ __RPC__out long *lang) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultMenuLanguage( 
            /* [in] */ long lang) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultSubpictureLanguage( 
            /* [retval][out] */ __RPC__out long *lang) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultAudioLanguage( 
            /* [retval][out] */ __RPC__out long *lang) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultSubpictureLanguageExt( 
            /* [retval][out] */ __RPC__out DVDSPExt *ext) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultAudioLanguageExt( 
            /* [retval][out] */ __RPC__out long *ext) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LanguageFromLCID( 
            /* [in] */ long lcid,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *lang) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_KaraokeAudioPresentationMode( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_KaraokeAudioPresentationMode( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_KaraokeChannelContent( 
            /* [in] */ long lStream,
            /* [in] */ long lChan,
            /* [retval][out] */ __RPC__out long *lContent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_KaraokeChannelAssignment( 
            /* [in] */ long lStream,
            /* [retval][out] */ __RPC__out long *lChannelAssignment) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RestorePreferredSettings( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ButtonRect( 
            /* [in] */ long lButton,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DVDScreenInMouseCoordinates( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppRect) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DVDScreenInMouseCoordinates( 
            /* [in] */ __RPC__in_opt IMSVidRect *pRect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidWebDVDVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidWebDVD * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidWebDVD * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidWebDVD * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidWebDVD * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidWebDVD * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidWebDVD * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidWebDVD * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableResetOnStop )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableResetOnStop )( 
            IMSVidWebDVD * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            IMSVidWebDVD * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IMSVidWebDVD * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMSVidWebDVD * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanStep )( 
            IMSVidWebDVD * This,
            /* [in] */ VARIANT_BOOL fBackwards,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfCan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Step )( 
            IMSVidWebDVD * This,
            /* [in] */ long lStep);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            IMSVidWebDVD * This,
            /* [in] */ double plRate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out double *plRate);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPosition )( 
            IMSVidWebDVD * This,
            /* [in] */ long lPosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *lPosition);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PositionMode )( 
            IMSVidWebDVD * This,
            /* [in] */ PositionModeList lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionMode )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out PositionModeList *lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *lLength);
        
        HRESULT ( STDMETHODCALLTYPE *OnDVDEvent )( 
            IMSVidWebDVD * This,
            /* [in] */ long lEvent,
            /* [in] */ LONG_PTR lParam1,
            /* [in] */ LONG_PTR lParam2);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayTitle )( 
            IMSVidWebDVD * This,
            /* [in] */ long lTitle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayChapterInTitle )( 
            IMSVidWebDVD * This,
            /* [in] */ long lTitle,
            /* [in] */ long lChapter);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayChapter )( 
            IMSVidWebDVD * This,
            /* [in] */ long lChapter);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayChaptersAutoStop )( 
            IMSVidWebDVD * This,
            /* [in] */ long lTitle,
            /* [in] */ long lstrChapter,
            /* [in] */ long lChapterCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayAtTime )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in BSTR strTime);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayAtTimeInTitle )( 
            IMSVidWebDVD * This,
            /* [in] */ long lTitle,
            /* [in] */ __RPC__in BSTR strTime);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayPeriodInTitleAutoStop )( 
            IMSVidWebDVD * This,
            /* [in] */ long lTitle,
            /* [in] */ __RPC__in BSTR strStartTime,
            /* [in] */ __RPC__in BSTR strEndTime);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ReplayChapter )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayPrevChapter )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayNextChapter )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StillOff )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioLanguage )( 
            IMSVidWebDVD * This,
            /* [in] */ long lStream,
            /* [defaultvalue][in] */ VARIANT_BOOL fFormat,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *strAudioLang);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ShowMenu )( 
            IMSVidWebDVD * This,
            /* [in] */ DVDMenuIDConstants MenuID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ReturnFromSubmenu )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ButtonsAvailable )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentButton )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAndActivateButton )( 
            IMSVidWebDVD * This,
            /* [in] */ long lButton);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ActivateButton )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectRightButton )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectLeftButton )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectLowerButton )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectUpperButton )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ActivateAtPosition )( 
            IMSVidWebDVD * This,
            /* [in] */ long xPos,
            /* [in] */ long yPos);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAtPosition )( 
            IMSVidWebDVD * This,
            /* [in] */ long xPos,
            /* [in] */ long yPos);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ButtonAtPosition )( 
            IMSVidWebDVD * This,
            /* [in] */ long xPos,
            /* [in] */ long yPos,
            /* [retval][out] */ __RPC__out long *plButton);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfChapters )( 
            IMSVidWebDVD * This,
            /* [in] */ long lTitle,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalTitleTime )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TitlesAvailable )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VolumesAvailable )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentVolume )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentDiscSide )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentDomain )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentChapter )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentTitle )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentTime )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DVDTimeCode2bstr )( 
            IMSVidWebDVD * This,
            /* [in] */ long timeCode,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pTimeStr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDDirectory )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DVDDirectory )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsSubpictureStreamEnabled )( 
            IMSVidWebDVD * This,
            /* [in] */ long lstream,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *fEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsAudioStreamEnabled )( 
            IMSVidWebDVD * This,
            /* [in] */ long lstream,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *fEnabled);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentSubpictureStream )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentSubpictureStream )( 
            IMSVidWebDVD * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubpictureLanguage )( 
            IMSVidWebDVD * This,
            long lStream,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *strLanguage);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAudioStream )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentAudioStream )( 
            IMSVidWebDVD * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioStreamsAvailable )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AnglesAvailable )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAngle )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentAngle )( 
            IMSVidWebDVD * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubpictureStreamsAvailable )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubpictureOn )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SubpictureOn )( 
            IMSVidWebDVD * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDUniqueID )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptParentalLevelChange )( 
            IMSVidWebDVD * This,
            /* [in] */ VARIANT_BOOL fAccept,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *NotifyParentalLevelChange )( 
            IMSVidWebDVD * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectParentalCountry )( 
            IMSVidWebDVD * This,
            /* [in] */ long lCountry,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectParentalLevel )( 
            IMSVidWebDVD * This,
            /* [in] */ long lParentalLevel,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TitleParentalLevels )( 
            IMSVidWebDVD * This,
            /* [in] */ long lTitle,
            /* [retval][out] */ __RPC__out long *plParentalLevels);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerParentalCountry )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *plCountryCode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerParentalLevel )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *plParentalLevel);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Eject )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UOPValid )( 
            IMSVidWebDVD * This,
            /* [in] */ long lUOP,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfValid);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SPRM )( 
            IMSVidWebDVD * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ __RPC__out short *psSPRM);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GPRM )( 
            IMSVidWebDVD * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ __RPC__out short *psSPRM);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GPRM )( 
            IMSVidWebDVD * This,
            /* [in] */ long lIndex,
            /* [in] */ short sValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDTextStringType )( 
            IMSVidWebDVD * This,
            /* [in] */ long lLangIndex,
            /* [in] */ long lStringIndex,
            /* [retval][out] */ __RPC__out DVDTextStringType *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDTextString )( 
            IMSVidWebDVD * This,
            /* [in] */ long lLangIndex,
            /* [in] */ long lStringIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pstrText);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDTextNumberOfStrings )( 
            IMSVidWebDVD * This,
            /* [in] */ long lLangIndex,
            /* [retval][out] */ __RPC__out long *plNumOfStrings);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDTextNumberOfLanguages )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *plNumOfLangs);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDTextLanguageLCID )( 
            IMSVidWebDVD * This,
            /* [in] */ long lLangIndex,
            /* [retval][out] */ __RPC__out long *lcid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RegionChange )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDAdm )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteBookmark )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RestoreBookmark )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SaveBookmark )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectDefaultAudioLanguage )( 
            IMSVidWebDVD * This,
            /* [in] */ long lang,
            /* [in] */ long ext);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectDefaultSubpictureLanguage )( 
            IMSVidWebDVD * This,
            /* [in] */ long lang,
            /* [in] */ DVDSPExt ext);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredSubpictureStream )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMenuLanguage )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *lang);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultMenuLanguage )( 
            IMSVidWebDVD * This,
            /* [in] */ long lang);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultSubpictureLanguage )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *lang);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultAudioLanguage )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *lang);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultSubpictureLanguageExt )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out DVDSPExt *ext);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultAudioLanguageExt )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *ext);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageFromLCID )( 
            IMSVidWebDVD * This,
            /* [in] */ long lcid,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *lang);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KaraokeAudioPresentationMode )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KaraokeAudioPresentationMode )( 
            IMSVidWebDVD * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KaraokeChannelContent )( 
            IMSVidWebDVD * This,
            /* [in] */ long lStream,
            /* [in] */ long lChan,
            /* [retval][out] */ __RPC__out long *lContent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KaraokeChannelAssignment )( 
            IMSVidWebDVD * This,
            /* [in] */ long lStream,
            /* [retval][out] */ __RPC__out long *lChannelAssignment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RestorePreferredSettings )( 
            IMSVidWebDVD * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ButtonRect )( 
            IMSVidWebDVD * This,
            /* [in] */ long lButton,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DVDScreenInMouseCoordinates )( 
            IMSVidWebDVD * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppRect);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DVDScreenInMouseCoordinates )( 
            IMSVidWebDVD * This,
            /* [in] */ __RPC__in_opt IMSVidRect *pRect);
        
        END_INTERFACE
    } IMSVidWebDVDVtbl;

    interface IMSVidWebDVD
    {
        CONST_VTBL struct IMSVidWebDVDVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidWebDVD_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidWebDVD_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidWebDVD_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidWebDVD_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidWebDVD_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidWebDVD_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidWebDVD_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidWebDVD_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidWebDVD_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidWebDVD_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidWebDVD_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidWebDVD_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidWebDVD_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidWebDVD_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidWebDVD_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidWebDVD_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidWebDVD_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidWebDVD_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 


#define IMSVidWebDVD_get_EnableResetOnStop(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableResetOnStop(This,pVal) ) 

#define IMSVidWebDVD_put_EnableResetOnStop(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableResetOnStop(This,newVal) ) 

#define IMSVidWebDVD_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IMSVidWebDVD_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSVidWebDVD_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMSVidWebDVD_get_CanStep(This,fBackwards,pfCan)	\
    ( (This)->lpVtbl -> get_CanStep(This,fBackwards,pfCan) ) 

#define IMSVidWebDVD_Step(This,lStep)	\
    ( (This)->lpVtbl -> Step(This,lStep) ) 

#define IMSVidWebDVD_put_Rate(This,plRate)	\
    ( (This)->lpVtbl -> put_Rate(This,plRate) ) 

#define IMSVidWebDVD_get_Rate(This,plRate)	\
    ( (This)->lpVtbl -> get_Rate(This,plRate) ) 

#define IMSVidWebDVD_put_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> put_CurrentPosition(This,lPosition) ) 

#define IMSVidWebDVD_get_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,lPosition) ) 

#define IMSVidWebDVD_put_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> put_PositionMode(This,lPositionMode) ) 

#define IMSVidWebDVD_get_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> get_PositionMode(This,lPositionMode) ) 

#define IMSVidWebDVD_get_Length(This,lLength)	\
    ( (This)->lpVtbl -> get_Length(This,lLength) ) 


#define IMSVidWebDVD_OnDVDEvent(This,lEvent,lParam1,lParam2)	\
    ( (This)->lpVtbl -> OnDVDEvent(This,lEvent,lParam1,lParam2) ) 

#define IMSVidWebDVD_PlayTitle(This,lTitle)	\
    ( (This)->lpVtbl -> PlayTitle(This,lTitle) ) 

#define IMSVidWebDVD_PlayChapterInTitle(This,lTitle,lChapter)	\
    ( (This)->lpVtbl -> PlayChapterInTitle(This,lTitle,lChapter) ) 

#define IMSVidWebDVD_PlayChapter(This,lChapter)	\
    ( (This)->lpVtbl -> PlayChapter(This,lChapter) ) 

#define IMSVidWebDVD_PlayChaptersAutoStop(This,lTitle,lstrChapter,lChapterCount)	\
    ( (This)->lpVtbl -> PlayChaptersAutoStop(This,lTitle,lstrChapter,lChapterCount) ) 

#define IMSVidWebDVD_PlayAtTime(This,strTime)	\
    ( (This)->lpVtbl -> PlayAtTime(This,strTime) ) 

#define IMSVidWebDVD_PlayAtTimeInTitle(This,lTitle,strTime)	\
    ( (This)->lpVtbl -> PlayAtTimeInTitle(This,lTitle,strTime) ) 

#define IMSVidWebDVD_PlayPeriodInTitleAutoStop(This,lTitle,strStartTime,strEndTime)	\
    ( (This)->lpVtbl -> PlayPeriodInTitleAutoStop(This,lTitle,strStartTime,strEndTime) ) 

#define IMSVidWebDVD_ReplayChapter(This)	\
    ( (This)->lpVtbl -> ReplayChapter(This) ) 

#define IMSVidWebDVD_PlayPrevChapter(This)	\
    ( (This)->lpVtbl -> PlayPrevChapter(This) ) 

#define IMSVidWebDVD_PlayNextChapter(This)	\
    ( (This)->lpVtbl -> PlayNextChapter(This) ) 

#define IMSVidWebDVD_StillOff(This)	\
    ( (This)->lpVtbl -> StillOff(This) ) 

#define IMSVidWebDVD_get_AudioLanguage(This,lStream,fFormat,strAudioLang)	\
    ( (This)->lpVtbl -> get_AudioLanguage(This,lStream,fFormat,strAudioLang) ) 

#define IMSVidWebDVD_ShowMenu(This,MenuID)	\
    ( (This)->lpVtbl -> ShowMenu(This,MenuID) ) 

#define IMSVidWebDVD_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define IMSVidWebDVD_ReturnFromSubmenu(This)	\
    ( (This)->lpVtbl -> ReturnFromSubmenu(This) ) 

#define IMSVidWebDVD_get_ButtonsAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_ButtonsAvailable(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentButton(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentButton(This,pVal) ) 

#define IMSVidWebDVD_SelectAndActivateButton(This,lButton)	\
    ( (This)->lpVtbl -> SelectAndActivateButton(This,lButton) ) 

#define IMSVidWebDVD_ActivateButton(This)	\
    ( (This)->lpVtbl -> ActivateButton(This) ) 

#define IMSVidWebDVD_SelectRightButton(This)	\
    ( (This)->lpVtbl -> SelectRightButton(This) ) 

#define IMSVidWebDVD_SelectLeftButton(This)	\
    ( (This)->lpVtbl -> SelectLeftButton(This) ) 

#define IMSVidWebDVD_SelectLowerButton(This)	\
    ( (This)->lpVtbl -> SelectLowerButton(This) ) 

#define IMSVidWebDVD_SelectUpperButton(This)	\
    ( (This)->lpVtbl -> SelectUpperButton(This) ) 

#define IMSVidWebDVD_ActivateAtPosition(This,xPos,yPos)	\
    ( (This)->lpVtbl -> ActivateAtPosition(This,xPos,yPos) ) 

#define IMSVidWebDVD_SelectAtPosition(This,xPos,yPos)	\
    ( (This)->lpVtbl -> SelectAtPosition(This,xPos,yPos) ) 

#define IMSVidWebDVD_get_ButtonAtPosition(This,xPos,yPos,plButton)	\
    ( (This)->lpVtbl -> get_ButtonAtPosition(This,xPos,yPos,plButton) ) 

#define IMSVidWebDVD_get_NumberOfChapters(This,lTitle,pVal)	\
    ( (This)->lpVtbl -> get_NumberOfChapters(This,lTitle,pVal) ) 

#define IMSVidWebDVD_get_TotalTitleTime(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalTitleTime(This,pVal) ) 

#define IMSVidWebDVD_get_TitlesAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_TitlesAvailable(This,pVal) ) 

#define IMSVidWebDVD_get_VolumesAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_VolumesAvailable(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentVolume(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentVolume(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentDiscSide(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentDiscSide(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentDomain(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentDomain(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentChapter(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentChapter(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentTitle(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentTitle(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentTime(This,pVal) ) 

#define IMSVidWebDVD_DVDTimeCode2bstr(This,timeCode,pTimeStr)	\
    ( (This)->lpVtbl -> DVDTimeCode2bstr(This,timeCode,pTimeStr) ) 

#define IMSVidWebDVD_get_DVDDirectory(This,pVal)	\
    ( (This)->lpVtbl -> get_DVDDirectory(This,pVal) ) 

#define IMSVidWebDVD_put_DVDDirectory(This,newVal)	\
    ( (This)->lpVtbl -> put_DVDDirectory(This,newVal) ) 

#define IMSVidWebDVD_IsSubpictureStreamEnabled(This,lstream,fEnabled)	\
    ( (This)->lpVtbl -> IsSubpictureStreamEnabled(This,lstream,fEnabled) ) 

#define IMSVidWebDVD_IsAudioStreamEnabled(This,lstream,fEnabled)	\
    ( (This)->lpVtbl -> IsAudioStreamEnabled(This,lstream,fEnabled) ) 

#define IMSVidWebDVD_get_CurrentSubpictureStream(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentSubpictureStream(This,pVal) ) 

#define IMSVidWebDVD_put_CurrentSubpictureStream(This,newVal)	\
    ( (This)->lpVtbl -> put_CurrentSubpictureStream(This,newVal) ) 

#define IMSVidWebDVD_get_SubpictureLanguage(This,lStream,strLanguage)	\
    ( (This)->lpVtbl -> get_SubpictureLanguage(This,lStream,strLanguage) ) 

#define IMSVidWebDVD_get_CurrentAudioStream(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentAudioStream(This,pVal) ) 

#define IMSVidWebDVD_put_CurrentAudioStream(This,newVal)	\
    ( (This)->lpVtbl -> put_CurrentAudioStream(This,newVal) ) 

#define IMSVidWebDVD_get_AudioStreamsAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_AudioStreamsAvailable(This,pVal) ) 

#define IMSVidWebDVD_get_AnglesAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_AnglesAvailable(This,pVal) ) 

#define IMSVidWebDVD_get_CurrentAngle(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentAngle(This,pVal) ) 

#define IMSVidWebDVD_put_CurrentAngle(This,newVal)	\
    ( (This)->lpVtbl -> put_CurrentAngle(This,newVal) ) 

#define IMSVidWebDVD_get_SubpictureStreamsAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_SubpictureStreamsAvailable(This,pVal) ) 

#define IMSVidWebDVD_get_SubpictureOn(This,pVal)	\
    ( (This)->lpVtbl -> get_SubpictureOn(This,pVal) ) 

#define IMSVidWebDVD_put_SubpictureOn(This,newVal)	\
    ( (This)->lpVtbl -> put_SubpictureOn(This,newVal) ) 

#define IMSVidWebDVD_get_DVDUniqueID(This,pVal)	\
    ( (This)->lpVtbl -> get_DVDUniqueID(This,pVal) ) 

#define IMSVidWebDVD_AcceptParentalLevelChange(This,fAccept,strUserName,strPassword)	\
    ( (This)->lpVtbl -> AcceptParentalLevelChange(This,fAccept,strUserName,strPassword) ) 

#define IMSVidWebDVD_NotifyParentalLevelChange(This,newVal)	\
    ( (This)->lpVtbl -> NotifyParentalLevelChange(This,newVal) ) 

#define IMSVidWebDVD_SelectParentalCountry(This,lCountry,strUserName,strPassword)	\
    ( (This)->lpVtbl -> SelectParentalCountry(This,lCountry,strUserName,strPassword) ) 

#define IMSVidWebDVD_SelectParentalLevel(This,lParentalLevel,strUserName,strPassword)	\
    ( (This)->lpVtbl -> SelectParentalLevel(This,lParentalLevel,strUserName,strPassword) ) 

#define IMSVidWebDVD_get_TitleParentalLevels(This,lTitle,plParentalLevels)	\
    ( (This)->lpVtbl -> get_TitleParentalLevels(This,lTitle,plParentalLevels) ) 

#define IMSVidWebDVD_get_PlayerParentalCountry(This,plCountryCode)	\
    ( (This)->lpVtbl -> get_PlayerParentalCountry(This,plCountryCode) ) 

#define IMSVidWebDVD_get_PlayerParentalLevel(This,plParentalLevel)	\
    ( (This)->lpVtbl -> get_PlayerParentalLevel(This,plParentalLevel) ) 

#define IMSVidWebDVD_Eject(This)	\
    ( (This)->lpVtbl -> Eject(This) ) 

#define IMSVidWebDVD_UOPValid(This,lUOP,pfValid)	\
    ( (This)->lpVtbl -> UOPValid(This,lUOP,pfValid) ) 

#define IMSVidWebDVD_get_SPRM(This,lIndex,psSPRM)	\
    ( (This)->lpVtbl -> get_SPRM(This,lIndex,psSPRM) ) 

#define IMSVidWebDVD_get_GPRM(This,lIndex,psSPRM)	\
    ( (This)->lpVtbl -> get_GPRM(This,lIndex,psSPRM) ) 

#define IMSVidWebDVD_put_GPRM(This,lIndex,sValue)	\
    ( (This)->lpVtbl -> put_GPRM(This,lIndex,sValue) ) 

#define IMSVidWebDVD_get_DVDTextStringType(This,lLangIndex,lStringIndex,pType)	\
    ( (This)->lpVtbl -> get_DVDTextStringType(This,lLangIndex,lStringIndex,pType) ) 

#define IMSVidWebDVD_get_DVDTextString(This,lLangIndex,lStringIndex,pstrText)	\
    ( (This)->lpVtbl -> get_DVDTextString(This,lLangIndex,lStringIndex,pstrText) ) 

#define IMSVidWebDVD_get_DVDTextNumberOfStrings(This,lLangIndex,plNumOfStrings)	\
    ( (This)->lpVtbl -> get_DVDTextNumberOfStrings(This,lLangIndex,plNumOfStrings) ) 

#define IMSVidWebDVD_get_DVDTextNumberOfLanguages(This,plNumOfLangs)	\
    ( (This)->lpVtbl -> get_DVDTextNumberOfLanguages(This,plNumOfLangs) ) 

#define IMSVidWebDVD_get_DVDTextLanguageLCID(This,lLangIndex,lcid)	\
    ( (This)->lpVtbl -> get_DVDTextLanguageLCID(This,lLangIndex,lcid) ) 

#define IMSVidWebDVD_RegionChange(This)	\
    ( (This)->lpVtbl -> RegionChange(This) ) 

#define IMSVidWebDVD_get_DVDAdm(This,pVal)	\
    ( (This)->lpVtbl -> get_DVDAdm(This,pVal) ) 

#define IMSVidWebDVD_DeleteBookmark(This)	\
    ( (This)->lpVtbl -> DeleteBookmark(This) ) 

#define IMSVidWebDVD_RestoreBookmark(This)	\
    ( (This)->lpVtbl -> RestoreBookmark(This) ) 

#define IMSVidWebDVD_SaveBookmark(This)	\
    ( (This)->lpVtbl -> SaveBookmark(This) ) 

#define IMSVidWebDVD_SelectDefaultAudioLanguage(This,lang,ext)	\
    ( (This)->lpVtbl -> SelectDefaultAudioLanguage(This,lang,ext) ) 

#define IMSVidWebDVD_SelectDefaultSubpictureLanguage(This,lang,ext)	\
    ( (This)->lpVtbl -> SelectDefaultSubpictureLanguage(This,lang,ext) ) 

#define IMSVidWebDVD_get_PreferredSubpictureStream(This,pVal)	\
    ( (This)->lpVtbl -> get_PreferredSubpictureStream(This,pVal) ) 

#define IMSVidWebDVD_get_DefaultMenuLanguage(This,lang)	\
    ( (This)->lpVtbl -> get_DefaultMenuLanguage(This,lang) ) 

#define IMSVidWebDVD_put_DefaultMenuLanguage(This,lang)	\
    ( (This)->lpVtbl -> put_DefaultMenuLanguage(This,lang) ) 

#define IMSVidWebDVD_get_DefaultSubpictureLanguage(This,lang)	\
    ( (This)->lpVtbl -> get_DefaultSubpictureLanguage(This,lang) ) 

#define IMSVidWebDVD_get_DefaultAudioLanguage(This,lang)	\
    ( (This)->lpVtbl -> get_DefaultAudioLanguage(This,lang) ) 

#define IMSVidWebDVD_get_DefaultSubpictureLanguageExt(This,ext)	\
    ( (This)->lpVtbl -> get_DefaultSubpictureLanguageExt(This,ext) ) 

#define IMSVidWebDVD_get_DefaultAudioLanguageExt(This,ext)	\
    ( (This)->lpVtbl -> get_DefaultAudioLanguageExt(This,ext) ) 

#define IMSVidWebDVD_get_LanguageFromLCID(This,lcid,lang)	\
    ( (This)->lpVtbl -> get_LanguageFromLCID(This,lcid,lang) ) 

#define IMSVidWebDVD_get_KaraokeAudioPresentationMode(This,pVal)	\
    ( (This)->lpVtbl -> get_KaraokeAudioPresentationMode(This,pVal) ) 

#define IMSVidWebDVD_put_KaraokeAudioPresentationMode(This,newVal)	\
    ( (This)->lpVtbl -> put_KaraokeAudioPresentationMode(This,newVal) ) 

#define IMSVidWebDVD_get_KaraokeChannelContent(This,lStream,lChan,lContent)	\
    ( (This)->lpVtbl -> get_KaraokeChannelContent(This,lStream,lChan,lContent) ) 

#define IMSVidWebDVD_get_KaraokeChannelAssignment(This,lStream,lChannelAssignment)	\
    ( (This)->lpVtbl -> get_KaraokeChannelAssignment(This,lStream,lChannelAssignment) ) 

#define IMSVidWebDVD_RestorePreferredSettings(This)	\
    ( (This)->lpVtbl -> RestorePreferredSettings(This) ) 

#define IMSVidWebDVD_get_ButtonRect(This,lButton,pRect)	\
    ( (This)->lpVtbl -> get_ButtonRect(This,lButton,pRect) ) 

#define IMSVidWebDVD_get_DVDScreenInMouseCoordinates(This,ppRect)	\
    ( (This)->lpVtbl -> get_DVDScreenInMouseCoordinates(This,ppRect) ) 

#define IMSVidWebDVD_put_DVDScreenInMouseCoordinates(This,pRect)	\
    ( (This)->lpVtbl -> put_DVDScreenInMouseCoordinates(This,pRect) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidWebDVD_INTERFACE_DEFINED__ */


#ifndef __IMSVidWebDVDEvent_INTERFACE_DEFINED__
#define __IMSVidWebDVDEvent_INTERFACE_DEFINED__

/* interface IMSVidWebDVDEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidWebDVDEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B4F7A674-9B83-49cb-A357-C63B871BE958")
    IMSVidWebDVDEvent : public IMSVidPlaybackEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DVDNotify( 
            /* [in] */ long lEventCode,
            /* [in] */ VARIANT lParam1,
            /* [in] */ VARIANT lParam2) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayForwards( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayBackwards( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ShowMenu( 
            /* [in] */ DVDMenuIDConstants __MIDL__IMSVidWebDVDEvent0000,
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Resume( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectOrActivateButton( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StillOff( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PauseOn( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ChangeCurrentAudioStream( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ChangeCurrentSubpictureStream( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ChangeCurrentAngle( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayAtTimeInTitle( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayAtTime( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayChapterInTitle( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayChapter( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReplayChapter( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayNextChapter( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Stop( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReturnFromSubmenu( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayTitle( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PlayPrevChapter( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ChangeKaraokePresMode( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ChangeVideoPresMode( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidWebDVDEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidWebDVDEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidWebDVDEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidWebDVDEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EndOfMedia )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ __RPC__in_opt IMSVidPlayback *lpd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DVDNotify )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ long lEventCode,
            /* [in] */ VARIANT lParam1,
            /* [in] */ VARIANT lParam2);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayForwards )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayBackwards )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ShowMenu )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ DVDMenuIDConstants __MIDL__IMSVidWebDVDEvent0000,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectOrActivateButton )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StillOff )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PauseOn )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCurrentAudioStream )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCurrentSubpictureStream )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCurrentAngle )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayAtTimeInTitle )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayAtTime )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayChapterInTitle )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayChapter )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ReplayChapter )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayNextChapter )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ReturnFromSubmenu )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayTitle )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PlayPrevChapter )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeKaraokePresMode )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeVideoPresMode )( 
            IMSVidWebDVDEvent * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        END_INTERFACE
    } IMSVidWebDVDEventVtbl;

    interface IMSVidWebDVDEvent
    {
        CONST_VTBL struct IMSVidWebDVDEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidWebDVDEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidWebDVDEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidWebDVDEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidWebDVDEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidWebDVDEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidWebDVDEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidWebDVDEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidWebDVDEvent_EndOfMedia(This,lpd)	\
    ( (This)->lpVtbl -> EndOfMedia(This,lpd) ) 


#define IMSVidWebDVDEvent_DVDNotify(This,lEventCode,lParam1,lParam2)	\
    ( (This)->lpVtbl -> DVDNotify(This,lEventCode,lParam1,lParam2) ) 

#define IMSVidWebDVDEvent_PlayForwards(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayForwards(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayBackwards(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayBackwards(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ShowMenu(This,__MIDL__IMSVidWebDVDEvent0000,bEnabled)	\
    ( (This)->lpVtbl -> ShowMenu(This,__MIDL__IMSVidWebDVDEvent0000,bEnabled) ) 

#define IMSVidWebDVDEvent_Resume(This,bEnabled)	\
    ( (This)->lpVtbl -> Resume(This,bEnabled) ) 

#define IMSVidWebDVDEvent_SelectOrActivateButton(This,bEnabled)	\
    ( (This)->lpVtbl -> SelectOrActivateButton(This,bEnabled) ) 

#define IMSVidWebDVDEvent_StillOff(This,bEnabled)	\
    ( (This)->lpVtbl -> StillOff(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PauseOn(This,bEnabled)	\
    ( (This)->lpVtbl -> PauseOn(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ChangeCurrentAudioStream(This,bEnabled)	\
    ( (This)->lpVtbl -> ChangeCurrentAudioStream(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ChangeCurrentSubpictureStream(This,bEnabled)	\
    ( (This)->lpVtbl -> ChangeCurrentSubpictureStream(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ChangeCurrentAngle(This,bEnabled)	\
    ( (This)->lpVtbl -> ChangeCurrentAngle(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayAtTimeInTitle(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayAtTimeInTitle(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayAtTime(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayAtTime(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayChapterInTitle(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayChapterInTitle(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayChapter(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayChapter(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ReplayChapter(This,bEnabled)	\
    ( (This)->lpVtbl -> ReplayChapter(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayNextChapter(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayNextChapter(This,bEnabled) ) 

#define IMSVidWebDVDEvent_Stop(This,bEnabled)	\
    ( (This)->lpVtbl -> Stop(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ReturnFromSubmenu(This,bEnabled)	\
    ( (This)->lpVtbl -> ReturnFromSubmenu(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayTitle(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayTitle(This,bEnabled) ) 

#define IMSVidWebDVDEvent_PlayPrevChapter(This,bEnabled)	\
    ( (This)->lpVtbl -> PlayPrevChapter(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ChangeKaraokePresMode(This,bEnabled)	\
    ( (This)->lpVtbl -> ChangeKaraokePresMode(This,bEnabled) ) 

#define IMSVidWebDVDEvent_ChangeVideoPresMode(This,bEnabled)	\
    ( (This)->lpVtbl -> ChangeVideoPresMode(This,bEnabled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidWebDVDEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidWebDVDAdm_INTERFACE_DEFINED__
#define __IMSVidWebDVDAdm_INTERFACE_DEFINED__

/* interface IMSVidWebDVDAdm */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidWebDVDAdm;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B8BE681A-EB2C-47f0-B415-94D5452F0E05")
    IMSVidWebDVDAdm : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ChangePassword( 
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strOld,
            /* [in] */ __RPC__in BSTR strNew) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SaveParentalLevel( 
            /* [in] */ long level,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SaveParentalCountry( 
            /* [in] */ long country,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword) = 0;
        
        virtual /* [helpstring][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE ConfirmPassword( 
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetParentalLevel( 
            /* [retval][out] */ __RPC__out long *lLevel) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetParentalCountry( 
            /* [retval][out] */ __RPC__out long *lCountry) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultAudioLCID( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultAudioLCID( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultSubpictureLCID( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultSubpictureLCID( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultMenuLCID( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultMenuLCID( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BookmarkOnStop( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_BookmarkOnStop( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidWebDVDAdmVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidWebDVDAdm * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidWebDVDAdm * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidWebDVDAdm * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ChangePassword )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strOld,
            /* [in] */ __RPC__in BSTR strNew);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SaveParentalLevel )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ long level,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SaveParentalCountry )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ long country,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword);
        
        /* [helpstring][restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ConfirmPassword )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ __RPC__in BSTR strUserName,
            /* [in] */ __RPC__in BSTR strPassword,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetParentalLevel )( 
            IMSVidWebDVDAdm * This,
            /* [retval][out] */ __RPC__out long *lLevel);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetParentalCountry )( 
            IMSVidWebDVDAdm * This,
            /* [retval][out] */ __RPC__out long *lCountry);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultAudioLCID )( 
            IMSVidWebDVDAdm * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultAudioLCID )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultSubpictureLCID )( 
            IMSVidWebDVDAdm * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultSubpictureLCID )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMenuLCID )( 
            IMSVidWebDVDAdm * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultMenuLCID )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BookmarkOnStop )( 
            IMSVidWebDVDAdm * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BookmarkOnStop )( 
            IMSVidWebDVDAdm * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IMSVidWebDVDAdmVtbl;

    interface IMSVidWebDVDAdm
    {
        CONST_VTBL struct IMSVidWebDVDAdmVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidWebDVDAdm_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidWebDVDAdm_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidWebDVDAdm_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidWebDVDAdm_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidWebDVDAdm_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidWebDVDAdm_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidWebDVDAdm_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidWebDVDAdm_ChangePassword(This,strUserName,strOld,strNew)	\
    ( (This)->lpVtbl -> ChangePassword(This,strUserName,strOld,strNew) ) 

#define IMSVidWebDVDAdm_SaveParentalLevel(This,level,strUserName,strPassword)	\
    ( (This)->lpVtbl -> SaveParentalLevel(This,level,strUserName,strPassword) ) 

#define IMSVidWebDVDAdm_SaveParentalCountry(This,country,strUserName,strPassword)	\
    ( (This)->lpVtbl -> SaveParentalCountry(This,country,strUserName,strPassword) ) 

#define IMSVidWebDVDAdm_ConfirmPassword(This,strUserName,strPassword,pVal)	\
    ( (This)->lpVtbl -> ConfirmPassword(This,strUserName,strPassword,pVal) ) 

#define IMSVidWebDVDAdm_GetParentalLevel(This,lLevel)	\
    ( (This)->lpVtbl -> GetParentalLevel(This,lLevel) ) 

#define IMSVidWebDVDAdm_GetParentalCountry(This,lCountry)	\
    ( (This)->lpVtbl -> GetParentalCountry(This,lCountry) ) 

#define IMSVidWebDVDAdm_get_DefaultAudioLCID(This,pVal)	\
    ( (This)->lpVtbl -> get_DefaultAudioLCID(This,pVal) ) 

#define IMSVidWebDVDAdm_put_DefaultAudioLCID(This,newVal)	\
    ( (This)->lpVtbl -> put_DefaultAudioLCID(This,newVal) ) 

#define IMSVidWebDVDAdm_get_DefaultSubpictureLCID(This,pVal)	\
    ( (This)->lpVtbl -> get_DefaultSubpictureLCID(This,pVal) ) 

#define IMSVidWebDVDAdm_put_DefaultSubpictureLCID(This,newVal)	\
    ( (This)->lpVtbl -> put_DefaultSubpictureLCID(This,newVal) ) 

#define IMSVidWebDVDAdm_get_DefaultMenuLCID(This,pVal)	\
    ( (This)->lpVtbl -> get_DefaultMenuLCID(This,pVal) ) 

#define IMSVidWebDVDAdm_put_DefaultMenuLCID(This,newVal)	\
    ( (This)->lpVtbl -> put_DefaultMenuLCID(This,newVal) ) 

#define IMSVidWebDVDAdm_get_BookmarkOnStop(This,pVal)	\
    ( (This)->lpVtbl -> get_BookmarkOnStop(This,pVal) ) 

#define IMSVidWebDVDAdm_put_BookmarkOnStop(This,newVal)	\
    ( (This)->lpVtbl -> put_BookmarkOnStop(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidWebDVDAdm_INTERFACE_DEFINED__ */


#ifndef __IMSVidOutputDevice_INTERFACE_DEFINED__
#define __IMSVidOutputDevice_INTERFACE_DEFINED__

/* interface IMSVidOutputDevice */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidOutputDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B03546-A4C8-11d2-B634-00C04F79498E")
    IMSVidOutputDevice : public IMSVidDevice
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidOutputDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidOutputDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidOutputDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidOutputDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidOutputDevice * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidOutputDevice * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidOutputDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidOutputDevice * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidOutputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidOutputDevice * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidOutputDevice * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidOutputDevice * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidOutputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidOutputDevice * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidOutputDevice * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidOutputDevice * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidOutputDevice * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        END_INTERFACE
    } IMSVidOutputDeviceVtbl;

    interface IMSVidOutputDevice
    {
        CONST_VTBL struct IMSVidOutputDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidOutputDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidOutputDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidOutputDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidOutputDevice_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidOutputDevice_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidOutputDevice_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidOutputDevice_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidOutputDevice_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidOutputDevice_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidOutputDevice_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidOutputDevice_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidOutputDevice_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidOutputDevice_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidOutputDevice_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidOutputDevice_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidOutputDevice_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidOutputDevice_INTERFACE_DEFINED__ */


#ifndef __IMSVidOutputDeviceEvent_INTERFACE_DEFINED__
#define __IMSVidOutputDeviceEvent_INTERFACE_DEFINED__

/* interface IMSVidOutputDeviceEvent */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidOutputDeviceEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2E6A14E2-571C-11d3-B652-00C04F79498E")
    IMSVidOutputDeviceEvent : public IMSVidDeviceEvent
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidOutputDeviceEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidOutputDeviceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidOutputDeviceEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidOutputDeviceEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidOutputDeviceEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidOutputDeviceEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidOutputDeviceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidOutputDeviceEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidOutputDeviceEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        END_INTERFACE
    } IMSVidOutputDeviceEventVtbl;

    interface IMSVidOutputDeviceEvent
    {
        CONST_VTBL struct IMSVidOutputDeviceEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidOutputDeviceEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidOutputDeviceEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidOutputDeviceEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidOutputDeviceEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidOutputDeviceEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidOutputDeviceEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidOutputDeviceEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidOutputDeviceEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidOutputDeviceEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidFeature_INTERFACE_DEFINED__
#define __IMSVidFeature_INTERFACE_DEFINED__

/* interface IMSVidFeature */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidFeature;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B03547-A4C8-11d2-B634-00C04F79498E")
    IMSVidFeature : public IMSVidDevice
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidFeatureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidFeature * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidFeature * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidFeature * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidFeature * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidFeature * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidFeature * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidFeature * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidFeature * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidFeature * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidFeature * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidFeature * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidFeature * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidFeature * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidFeature * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidFeature * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidFeature * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        END_INTERFACE
    } IMSVidFeatureVtbl;

    interface IMSVidFeature
    {
        CONST_VTBL struct IMSVidFeatureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidFeature_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidFeature_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidFeature_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidFeature_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidFeature_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidFeature_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidFeature_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidFeature_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidFeature_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidFeature_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidFeature_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidFeature_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidFeature_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidFeature_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidFeature_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidFeature_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidFeature_INTERFACE_DEFINED__ */


#ifndef __IMSVidFeatureEvent_INTERFACE_DEFINED__
#define __IMSVidFeatureEvent_INTERFACE_DEFINED__

/* interface IMSVidFeatureEvent */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidFeatureEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3DD2903C-E0AA-11d2-B63A-00C04F79498E")
    IMSVidFeatureEvent : public IMSVidDeviceEvent
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidFeatureEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidFeatureEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidFeatureEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidFeatureEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidFeatureEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidFeatureEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidFeatureEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidFeatureEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidFeatureEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        END_INTERFACE
    } IMSVidFeatureEventVtbl;

    interface IMSVidFeatureEvent
    {
        CONST_VTBL struct IMSVidFeatureEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidFeatureEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidFeatureEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidFeatureEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidFeatureEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidFeatureEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidFeatureEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidFeatureEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidFeatureEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidFeatureEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidEncoder_INTERFACE_DEFINED__
#define __IMSVidEncoder_INTERFACE_DEFINED__

/* interface IMSVidEncoder */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C0020FD4-BEE7-43d9-A495-9F213117103D")
    IMSVidEncoder : public IMSVidFeature
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_VideoEncoderInterface( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEncInt) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioEncoderInterface( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEncInt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidEncoder * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidEncoder * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidEncoder * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidEncoder * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidEncoder * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidEncoder * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidEncoder * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidEncoder * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoEncoderInterface )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEncInt);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioEncoderInterface )( 
            IMSVidEncoder * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppEncInt);
        
        END_INTERFACE
    } IMSVidEncoderVtbl;

    interface IMSVidEncoder
    {
        CONST_VTBL struct IMSVidEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidEncoder_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidEncoder_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidEncoder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidEncoder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidEncoder_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidEncoder_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidEncoder_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidEncoder_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidEncoder_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidEncoder_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidEncoder_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidEncoder_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidEncoder_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidEncoder_get_VideoEncoderInterface(This,ppEncInt)	\
    ( (This)->lpVtbl -> get_VideoEncoderInterface(This,ppEncInt) ) 

#define IMSVidEncoder_get_AudioEncoderInterface(This,ppEncInt)	\
    ( (This)->lpVtbl -> get_AudioEncoderInterface(This,ppEncInt) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidEncoder_INTERFACE_DEFINED__ */


#ifndef __IMSVidXDS_INTERFACE_DEFINED__
#define __IMSVidXDS_INTERFACE_DEFINED__

/* interface IMSVidXDS */
/* [unique][helpstring][uuid][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidXDS;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("11EBC158-E712-4d1f-8BB3-01ED5274C4CE")
    IMSVidXDS : public IMSVidFeature
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ChannelChangeInterface( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **punkCC) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidXDSVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidXDS * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidXDS * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidXDS * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidXDS * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidXDS * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidXDS * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidXDS * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidXDS * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidXDS * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidXDS * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidXDS * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidXDS * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidXDS * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidXDS * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidXDS * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidXDS * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelChangeInterface )( 
            IMSVidXDS * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **punkCC);
        
        END_INTERFACE
    } IMSVidXDSVtbl;

    interface IMSVidXDS
    {
        CONST_VTBL struct IMSVidXDSVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidXDS_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidXDS_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidXDS_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidXDS_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidXDS_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidXDS_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidXDS_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidXDS_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidXDS_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidXDS_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidXDS_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidXDS_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidXDS_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidXDS_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidXDS_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidXDS_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidXDS_get_ChannelChangeInterface(This,punkCC)	\
    ( (This)->lpVtbl -> get_ChannelChangeInterface(This,punkCC) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidXDS_INTERFACE_DEFINED__ */


#ifndef __IMSVidXDSEvent_INTERFACE_DEFINED__
#define __IMSVidXDSEvent_INTERFACE_DEFINED__

/* interface IMSVidXDSEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidXDSEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6DB2317D-3B23-41ec-BA4B-701F407EAF3A")
    IMSVidXDSEvent : public IMSVidFeatureEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RatingChange( 
            /* [in] */ EnTvRat_System PrevRatingSystem,
            /* [in] */ EnTvRat_GenericLevel PrevLevel,
            /* [in] */ BfEnTvRat_GenericAttributes PrevAttributes,
            /* [in] */ EnTvRat_System NewRatingSystem,
            /* [in] */ EnTvRat_GenericLevel NewLevel,
            /* [in] */ BfEnTvRat_GenericAttributes NewAttributes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidXDSEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidXDSEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidXDSEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidXDSEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidXDSEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidXDSEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidXDSEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidXDSEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidXDSEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingChange )( 
            IMSVidXDSEvent * This,
            /* [in] */ EnTvRat_System PrevRatingSystem,
            /* [in] */ EnTvRat_GenericLevel PrevLevel,
            /* [in] */ BfEnTvRat_GenericAttributes PrevAttributes,
            /* [in] */ EnTvRat_System NewRatingSystem,
            /* [in] */ EnTvRat_GenericLevel NewLevel,
            /* [in] */ BfEnTvRat_GenericAttributes NewAttributes);
        
        END_INTERFACE
    } IMSVidXDSEventVtbl;

    interface IMSVidXDSEvent
    {
        CONST_VTBL struct IMSVidXDSEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidXDSEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidXDSEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidXDSEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidXDSEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidXDSEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidXDSEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidXDSEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidXDSEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#define IMSVidXDSEvent_RatingChange(This,PrevRatingSystem,PrevLevel,PrevAttributes,NewRatingSystem,NewLevel,NewAttributes)	\
    ( (This)->lpVtbl -> RatingChange(This,PrevRatingSystem,PrevLevel,PrevAttributes,NewRatingSystem,NewLevel,NewAttributes) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidXDSEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidDataServices_INTERFACE_DEFINED__
#define __IMSVidDataServices_INTERFACE_DEFINED__

/* interface IMSVidDataServices */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidDataServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("334125C1-77E5-11d3-B653-00C04F79498E")
    IMSVidDataServices : public IMSVidFeature
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidDataServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidDataServices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidDataServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidDataServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidDataServices * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidDataServices * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidDataServices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidDataServices * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidDataServices * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidDataServices * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidDataServices * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidDataServices * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidDataServices * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidDataServices * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidDataServices * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidDataServices * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidDataServices * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        END_INTERFACE
    } IMSVidDataServicesVtbl;

    interface IMSVidDataServices
    {
        CONST_VTBL struct IMSVidDataServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidDataServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidDataServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidDataServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidDataServices_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidDataServices_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidDataServices_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidDataServices_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidDataServices_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidDataServices_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidDataServices_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidDataServices_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidDataServices_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidDataServices_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidDataServices_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidDataServices_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidDataServices_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidDataServices_INTERFACE_DEFINED__ */


#ifndef __IMSVidDataServicesEvent_INTERFACE_DEFINED__
#define __IMSVidDataServicesEvent_INTERFACE_DEFINED__

/* interface IMSVidDataServicesEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidDataServicesEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("334125C2-77E5-11d3-B653-00C04F79498E")
    IMSVidDataServicesEvent : public IMSVidDeviceEvent
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidDataServicesEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidDataServicesEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidDataServicesEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidDataServicesEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidDataServicesEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidDataServicesEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidDataServicesEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidDataServicesEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidDataServicesEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        END_INTERFACE
    } IMSVidDataServicesEventVtbl;

    interface IMSVidDataServicesEvent
    {
        CONST_VTBL struct IMSVidDataServicesEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidDataServicesEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidDataServicesEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidDataServicesEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidDataServicesEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidDataServicesEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidDataServicesEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidDataServicesEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidDataServicesEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidDataServicesEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidClosedCaptioning_INTERFACE_DEFINED__
#define __IMSVidClosedCaptioning_INTERFACE_DEFINED__

/* interface IMSVidClosedCaptioning */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidClosedCaptioning;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("99652EA1-C1F7-414f-BB7B-1C967DE75983")
    IMSVidClosedCaptioning : public IMSVidFeature
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Enable( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *On) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Enable( 
            /* [in] */ VARIANT_BOOL On) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidClosedCaptioningVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidClosedCaptioning * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidClosedCaptioning * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidClosedCaptioning * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidClosedCaptioning * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidClosedCaptioning * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidClosedCaptioning * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidClosedCaptioning * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidClosedCaptioning * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidClosedCaptioning * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidClosedCaptioning * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidClosedCaptioning * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidClosedCaptioning * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidClosedCaptioning * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidClosedCaptioning * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidClosedCaptioning * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidClosedCaptioning * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enable )( 
            IMSVidClosedCaptioning * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *On);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enable )( 
            IMSVidClosedCaptioning * This,
            /* [in] */ VARIANT_BOOL On);
        
        END_INTERFACE
    } IMSVidClosedCaptioningVtbl;

    interface IMSVidClosedCaptioning
    {
        CONST_VTBL struct IMSVidClosedCaptioningVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidClosedCaptioning_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidClosedCaptioning_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidClosedCaptioning_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidClosedCaptioning_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidClosedCaptioning_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidClosedCaptioning_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidClosedCaptioning_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidClosedCaptioning_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidClosedCaptioning_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidClosedCaptioning_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidClosedCaptioning_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidClosedCaptioning_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidClosedCaptioning_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidClosedCaptioning_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidClosedCaptioning_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidClosedCaptioning_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidClosedCaptioning_get_Enable(This,On)	\
    ( (This)->lpVtbl -> get_Enable(This,On) ) 

#define IMSVidClosedCaptioning_put_Enable(This,On)	\
    ( (This)->lpVtbl -> put_Enable(This,On) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidClosedCaptioning_INTERFACE_DEFINED__ */


#ifndef __IMSVidClosedCaptioning2_INTERFACE_DEFINED__
#define __IMSVidClosedCaptioning2_INTERFACE_DEFINED__

/* interface IMSVidClosedCaptioning2 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidClosedCaptioning2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E00CB864-A029-4310-9987-A873F5887D97")
    IMSVidClosedCaptioning2 : public IMSVidClosedCaptioning
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Service( 
            /* [retval][out] */ __RPC__out MSVidCCService *On) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Service( 
            /* [in] */ MSVidCCService On) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidClosedCaptioning2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidClosedCaptioning2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidClosedCaptioning2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidClosedCaptioning2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidClosedCaptioning2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enable )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *On);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enable )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ VARIANT_BOOL On);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Service )( 
            IMSVidClosedCaptioning2 * This,
            /* [retval][out] */ __RPC__out MSVidCCService *On);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Service )( 
            IMSVidClosedCaptioning2 * This,
            /* [in] */ MSVidCCService On);
        
        END_INTERFACE
    } IMSVidClosedCaptioning2Vtbl;

    interface IMSVidClosedCaptioning2
    {
        CONST_VTBL struct IMSVidClosedCaptioning2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidClosedCaptioning2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidClosedCaptioning2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidClosedCaptioning2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidClosedCaptioning2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidClosedCaptioning2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidClosedCaptioning2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidClosedCaptioning2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidClosedCaptioning2_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidClosedCaptioning2_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidClosedCaptioning2_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidClosedCaptioning2_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidClosedCaptioning2_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidClosedCaptioning2_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidClosedCaptioning2_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidClosedCaptioning2_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidClosedCaptioning2_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidClosedCaptioning2_get_Enable(This,On)	\
    ( (This)->lpVtbl -> get_Enable(This,On) ) 

#define IMSVidClosedCaptioning2_put_Enable(This,On)	\
    ( (This)->lpVtbl -> put_Enable(This,On) ) 


#define IMSVidClosedCaptioning2_get_Service(This,On)	\
    ( (This)->lpVtbl -> get_Service(This,On) ) 

#define IMSVidClosedCaptioning2_put_Service(This,On)	\
    ( (This)->lpVtbl -> put_Service(This,On) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidClosedCaptioning2_INTERFACE_DEFINED__ */


#ifndef __IMSVidClosedCaptioning3_INTERFACE_DEFINED__
#define __IMSVidClosedCaptioning3_INTERFACE_DEFINED__

/* interface IMSVidClosedCaptioning3 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidClosedCaptioning3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C8638E8A-7625-4c51-9366-2F40A9831FC0")
    IMSVidClosedCaptioning3 : public IMSVidClosedCaptioning2
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TeleTextFilter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **punkTTFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidClosedCaptioning3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidClosedCaptioning3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidClosedCaptioning3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidClosedCaptioning3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidClosedCaptioning3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enable )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *On);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enable )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ VARIANT_BOOL On);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Service )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__out MSVidCCService *On);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Service )( 
            IMSVidClosedCaptioning3 * This,
            /* [in] */ MSVidCCService On);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TeleTextFilter )( 
            IMSVidClosedCaptioning3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **punkTTFilter);
        
        END_INTERFACE
    } IMSVidClosedCaptioning3Vtbl;

    interface IMSVidClosedCaptioning3
    {
        CONST_VTBL struct IMSVidClosedCaptioning3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidClosedCaptioning3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidClosedCaptioning3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidClosedCaptioning3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidClosedCaptioning3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidClosedCaptioning3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidClosedCaptioning3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidClosedCaptioning3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidClosedCaptioning3_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidClosedCaptioning3_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidClosedCaptioning3_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidClosedCaptioning3_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidClosedCaptioning3_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidClosedCaptioning3_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidClosedCaptioning3_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidClosedCaptioning3_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidClosedCaptioning3_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidClosedCaptioning3_get_Enable(This,On)	\
    ( (This)->lpVtbl -> get_Enable(This,On) ) 

#define IMSVidClosedCaptioning3_put_Enable(This,On)	\
    ( (This)->lpVtbl -> put_Enable(This,On) ) 


#define IMSVidClosedCaptioning3_get_Service(This,On)	\
    ( (This)->lpVtbl -> get_Service(This,On) ) 

#define IMSVidClosedCaptioning3_put_Service(This,On)	\
    ( (This)->lpVtbl -> put_Service(This,On) ) 


#define IMSVidClosedCaptioning3_get_TeleTextFilter(This,punkTTFilter)	\
    ( (This)->lpVtbl -> get_TeleTextFilter(This,punkTTFilter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidClosedCaptioning3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_segment_0000_0038 */
/* [local] */ 

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_segment_0000_0038_0001
    {	sslFullSize	= 0,
	sslClipByOverScan	= ( sslFullSize + 1 ) ,
	sslClipByClipRect	= ( sslClipByOverScan + 1 ) 
    } 	SourceSizeList;



extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_segment_0000_0038_v0_0_s_ifspec;

#ifndef __IMSVidVideoRenderer_INTERFACE_DEFINED__
#define __IMSVidVideoRenderer_INTERFACE_DEFINED__

/* interface IMSVidVideoRenderer */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidVideoRenderer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B03540-A4C8-11d2-B634-00C04F79498E")
    IMSVidVideoRenderer : public IMSVidOutputDevice
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CustomCompositorClass( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *CompositorCLSID) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_CustomCompositorClass( 
            /* [in] */ __RPC__in BSTR CompositorCLSID) = 0;
        
        virtual /* [id][restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get__CustomCompositorClass( 
            /* [retval][out] */ __RPC__out GUID *CompositorCLSID) = 0;
        
        virtual /* [id][restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put__CustomCompositorClass( 
            /* [in] */ __RPC__in REFCLSID CompositorCLSID) = 0;
        
        virtual /* [id][restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get__CustomCompositor( 
            /* [retval][out] */ __RPC__deref_out_opt IVMRImageCompositor **Compositor) = 0;
        
        virtual /* [id][restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put__CustomCompositor( 
            /* [in] */ __RPC__in_opt IVMRImageCompositor *Compositor) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MixerBitmap( 
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **MixerPictureDisp) = 0;
        
        virtual /* [id][restricted][hidden][propget] */ HRESULT STDMETHODCALLTYPE get__MixerBitmap( 
            /* [retval][out] */ __RPC__deref_out_opt IVMRMixerBitmap **MixerPicture) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MixerBitmap( 
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp) = 0;
        
        virtual /* [id][restricted][hidden][propput] */ HRESULT STDMETHODCALLTYPE put__MixerBitmap( 
            /* [in] */ __RPC__in VMRALPHABITMAP *MixerPicture) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MixerBitmapPositionRect( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **rDest) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MixerBitmapPositionRect( 
            /* [in] */ __RPC__in_opt IMSVidRect *rDest) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MixerBitmapOpacity( 
            /* [retval][out] */ __RPC__out int *opacity) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MixerBitmapOpacity( 
            /* [in] */ int opacity) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetupMixerBitmap( 
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp,
            /* [in] */ long Opacity,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceSize( 
            /* [out][retval] */ __RPC__out SourceSizeList *CurrentSize) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SourceSize( 
            /* [in] */ SourceSizeList NewSize) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OverScan( 
            /* [out][retval] */ __RPC__out long *plPercent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_OverScan( 
            /* [in] */ long lPercent) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableSourceRect( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxVidRect( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MinVidRect( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ClippedSourceRect( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ClippedSourceRect( 
            /* [in] */ __RPC__in_opt IMSVidRect *pRect) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UsingOverlay( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *UseOverlayVal) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_UsingOverlay( 
            /* [in] */ VARIANT_BOOL UseOverlayVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Capture( 
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **currentImage) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FramesPerSecond( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DecimateInput( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pDeci) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DecimateInput( 
            /* [in] */ VARIANT_BOOL pDeci) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVideoRendererVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVideoRenderer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVideoRenderer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidVideoRenderer * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidVideoRenderer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidVideoRenderer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidVideoRenderer * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidVideoRenderer * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomCompositorClass )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *CompositorCLSID);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomCompositorClass )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in BSTR CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositorClass )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out GUID *CompositorCLSID);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositorClass )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in REFCLSID CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositor )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRImageCompositor **Compositor);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositor )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in_opt IVMRImageCompositor *Compositor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmap )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **MixerPictureDisp);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__MixerBitmap )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRMixerBitmap **MixerPicture);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmap )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__MixerBitmap )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in VMRALPHABITMAP *MixerPicture);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapPositionRect )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **rDest);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapPositionRect )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapOpacity )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out int *opacity);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapOpacity )( 
            IMSVidVideoRenderer * This,
            /* [in] */ int opacity);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetupMixerBitmap )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp,
            /* [in] */ long Opacity,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceSize )( 
            IMSVidVideoRenderer * This,
            /* [out][retval] */ __RPC__out SourceSizeList *CurrentSize);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceSize )( 
            IMSVidVideoRenderer * This,
            /* [in] */ SourceSizeList NewSize);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverScan )( 
            IMSVidVideoRenderer * This,
            /* [out][retval] */ __RPC__out long *plPercent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverScan )( 
            IMSVidVideoRenderer * This,
            /* [in] */ long lPercent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableSourceRect )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxVidRect )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinVidRect )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClippedSourceRect )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClippedSourceRect )( 
            IMSVidVideoRenderer * This,
            /* [in] */ __RPC__in_opt IMSVidRect *pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UsingOverlay )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *UseOverlayVal);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UsingOverlay )( 
            IMSVidVideoRenderer * This,
            /* [in] */ VARIANT_BOOL UseOverlayVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Capture )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **currentImage);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FramesPerSecond )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DecimateInput )( 
            IMSVidVideoRenderer * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pDeci);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DecimateInput )( 
            IMSVidVideoRenderer * This,
            /* [in] */ VARIANT_BOOL pDeci);
        
        END_INTERFACE
    } IMSVidVideoRendererVtbl;

    interface IMSVidVideoRenderer
    {
        CONST_VTBL struct IMSVidVideoRendererVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVideoRenderer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVideoRenderer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVideoRenderer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVideoRenderer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidVideoRenderer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidVideoRenderer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidVideoRenderer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidVideoRenderer_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidVideoRenderer_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidVideoRenderer_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidVideoRenderer_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidVideoRenderer_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidVideoRenderer_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidVideoRenderer_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidVideoRenderer_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidVideoRenderer_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidVideoRenderer_get_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer_put_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer_get__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer_put__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer_get__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> get__CustomCompositor(This,Compositor) ) 

#define IMSVidVideoRenderer_put__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> put__CustomCompositor(This,Compositor) ) 

#define IMSVidVideoRenderer_get_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> get_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidVideoRenderer_get__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> get__MixerBitmap(This,MixerPicture) ) 

#define IMSVidVideoRenderer_put_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> put_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidVideoRenderer_put__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> put__MixerBitmap(This,MixerPicture) ) 

#define IMSVidVideoRenderer_get_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> get_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidVideoRenderer_put_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> put_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidVideoRenderer_get_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> get_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidVideoRenderer_put_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> put_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidVideoRenderer_SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest)	\
    ( (This)->lpVtbl -> SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest) ) 

#define IMSVidVideoRenderer_get_SourceSize(This,CurrentSize)	\
    ( (This)->lpVtbl -> get_SourceSize(This,CurrentSize) ) 

#define IMSVidVideoRenderer_put_SourceSize(This,NewSize)	\
    ( (This)->lpVtbl -> put_SourceSize(This,NewSize) ) 

#define IMSVidVideoRenderer_get_OverScan(This,plPercent)	\
    ( (This)->lpVtbl -> get_OverScan(This,plPercent) ) 

#define IMSVidVideoRenderer_put_OverScan(This,lPercent)	\
    ( (This)->lpVtbl -> put_OverScan(This,lPercent) ) 

#define IMSVidVideoRenderer_get_AvailableSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_AvailableSourceRect(This,pRect) ) 

#define IMSVidVideoRenderer_get_MaxVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MaxVidRect(This,ppVidRect) ) 

#define IMSVidVideoRenderer_get_MinVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MinVidRect(This,ppVidRect) ) 

#define IMSVidVideoRenderer_get_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_ClippedSourceRect(This,pRect) ) 

#define IMSVidVideoRenderer_put_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> put_ClippedSourceRect(This,pRect) ) 

#define IMSVidVideoRenderer_get_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> get_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidVideoRenderer_put_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> put_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidVideoRenderer_Capture(This,currentImage)	\
    ( (This)->lpVtbl -> Capture(This,currentImage) ) 

#define IMSVidVideoRenderer_get_FramesPerSecond(This,pVal)	\
    ( (This)->lpVtbl -> get_FramesPerSecond(This,pVal) ) 

#define IMSVidVideoRenderer_get_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> get_DecimateInput(This,pDeci) ) 

#define IMSVidVideoRenderer_put_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> put_DecimateInput(This,pDeci) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVideoRenderer_INTERFACE_DEFINED__ */


#ifndef __IMSVidVideoRendererEvent_INTERFACE_DEFINED__
#define __IMSVidVideoRendererEvent_INTERFACE_DEFINED__

/* interface IMSVidVideoRendererEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidVideoRendererEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B03545-A4C8-11d2-B634-00C04F79498E")
    IMSVidVideoRendererEvent : public IMSVidOutputDeviceEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE OverlayUnavailable( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVideoRendererEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVideoRendererEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVideoRendererEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVideoRendererEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidVideoRendererEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidVideoRendererEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidVideoRendererEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidVideoRendererEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidVideoRendererEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *OverlayUnavailable )( 
            IMSVidVideoRendererEvent * This);
        
        END_INTERFACE
    } IMSVidVideoRendererEventVtbl;

    interface IMSVidVideoRendererEvent
    {
        CONST_VTBL struct IMSVidVideoRendererEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVideoRendererEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVideoRendererEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVideoRendererEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVideoRendererEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidVideoRendererEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidVideoRendererEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidVideoRendererEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidVideoRendererEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#define IMSVidVideoRendererEvent_OverlayUnavailable(This)	\
    ( (This)->lpVtbl -> OverlayUnavailable(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVideoRendererEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidGenericSink_INTERFACE_DEFINED__
#define __IMSVidGenericSink_INTERFACE_DEFINED__

/* interface IMSVidGenericSink */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidGenericSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6C29B41D-455B-4c33-963A-0D28E5E555EA")
    IMSVidGenericSink : public IMSVidOutputDevice
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetSinkFilter( 
            __RPC__in BSTR bstrName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SinkStreams( 
            /* [retval][out] */ __RPC__out MSVidSinkStreams *pStreams) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SinkStreams( 
            /* [in] */ MSVidSinkStreams Streams) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidGenericSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidGenericSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidGenericSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidGenericSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidGenericSink * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidGenericSink * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidGenericSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidGenericSink * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidGenericSink * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidGenericSink * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidGenericSink * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidGenericSink * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidGenericSink * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidGenericSink * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidGenericSink * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidGenericSink * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidGenericSink * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetSinkFilter )( 
            IMSVidGenericSink * This,
            __RPC__in BSTR bstrName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinkStreams )( 
            IMSVidGenericSink * This,
            /* [retval][out] */ __RPC__out MSVidSinkStreams *pStreams);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SinkStreams )( 
            IMSVidGenericSink * This,
            /* [in] */ MSVidSinkStreams Streams);
        
        END_INTERFACE
    } IMSVidGenericSinkVtbl;

    interface IMSVidGenericSink
    {
        CONST_VTBL struct IMSVidGenericSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidGenericSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidGenericSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidGenericSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidGenericSink_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidGenericSink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidGenericSink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidGenericSink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidGenericSink_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidGenericSink_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidGenericSink_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidGenericSink_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidGenericSink_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidGenericSink_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidGenericSink_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidGenericSink_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidGenericSink_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidGenericSink_SetSinkFilter(This,bstrName)	\
    ( (This)->lpVtbl -> SetSinkFilter(This,bstrName) ) 

#define IMSVidGenericSink_get_SinkStreams(This,pStreams)	\
    ( (This)->lpVtbl -> get_SinkStreams(This,pStreams) ) 

#define IMSVidGenericSink_put_SinkStreams(This,Streams)	\
    ( (This)->lpVtbl -> put_SinkStreams(This,Streams) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidGenericSink_INTERFACE_DEFINED__ */


#ifndef __IMSVidGenericSink2_INTERFACE_DEFINED__
#define __IMSVidGenericSink2_INTERFACE_DEFINED__

/* interface IMSVidGenericSink2 */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidGenericSink2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6B5A28F3-47F1-4092-B168-60CABEC08F1C")
    IMSVidGenericSink2 : public IMSVidGenericSink
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddFilter( 
            __RPC__in BSTR bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ResetFilterList( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidGenericSink2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidGenericSink2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidGenericSink2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidGenericSink2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidGenericSink2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidGenericSink2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidGenericSink2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidGenericSink2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidGenericSink2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidGenericSink2 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidGenericSink2 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidGenericSink2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidGenericSink2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidGenericSink2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidGenericSink2 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidGenericSink2 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidGenericSink2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetSinkFilter )( 
            IMSVidGenericSink2 * This,
            __RPC__in BSTR bstrName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinkStreams )( 
            IMSVidGenericSink2 * This,
            /* [retval][out] */ __RPC__out MSVidSinkStreams *pStreams);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SinkStreams )( 
            IMSVidGenericSink2 * This,
            /* [in] */ MSVidSinkStreams Streams);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddFilter )( 
            IMSVidGenericSink2 * This,
            __RPC__in BSTR bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetFilterList )( 
            IMSVidGenericSink2 * This);
        
        END_INTERFACE
    } IMSVidGenericSink2Vtbl;

    interface IMSVidGenericSink2
    {
        CONST_VTBL struct IMSVidGenericSink2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidGenericSink2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidGenericSink2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidGenericSink2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidGenericSink2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidGenericSink2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidGenericSink2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidGenericSink2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidGenericSink2_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidGenericSink2_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidGenericSink2_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidGenericSink2_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidGenericSink2_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidGenericSink2_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidGenericSink2_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidGenericSink2_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidGenericSink2_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidGenericSink2_SetSinkFilter(This,bstrName)	\
    ( (This)->lpVtbl -> SetSinkFilter(This,bstrName) ) 

#define IMSVidGenericSink2_get_SinkStreams(This,pStreams)	\
    ( (This)->lpVtbl -> get_SinkStreams(This,pStreams) ) 

#define IMSVidGenericSink2_put_SinkStreams(This,Streams)	\
    ( (This)->lpVtbl -> put_SinkStreams(This,Streams) ) 


#define IMSVidGenericSink2_AddFilter(This,bstrName)	\
    ( (This)->lpVtbl -> AddFilter(This,bstrName) ) 

#define IMSVidGenericSink2_ResetFilterList(This)	\
    ( (This)->lpVtbl -> ResetFilterList(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidGenericSink2_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferRecordingControl_INTERFACE_DEFINED__
#define __IMSVidStreamBufferRecordingControl_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferRecordingControl */
/* [helpstring][uuid][unique][nonextensible][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferRecordingControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("160621AA-BBBC-4326-A824-C395AEBC6E74")
    IMSVidStreamBufferRecordingControl : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartTime( 
            /* [retval][out] */ __RPC__out long *rtStart) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_StartTime( 
            /* [in] */ long rtStart) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StopTime( 
            /* [retval][out] */ __RPC__out long *rtStop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_StopTime( 
            /* [in] */ long rtStop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecordingStopped( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *phResult) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecordingStarted( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *phResult) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecordingType( 
            /* [retval][out] */ __RPC__out RecordingType *dwType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecordingAttribute( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pRecordingAttribute) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferRecordingControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferRecordingControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferRecordingControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartTime )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [retval][out] */ __RPC__out long *rtStart);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartTime )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [in] */ long rtStart);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StopTime )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [retval][out] */ __RPC__out long *rtStop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StopTime )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [in] */ long rtStop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecordingStopped )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *phResult);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecordingStarted )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *phResult);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecordingType )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [retval][out] */ __RPC__out RecordingType *dwType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecordingAttribute )( 
            IMSVidStreamBufferRecordingControl * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pRecordingAttribute);
        
        END_INTERFACE
    } IMSVidStreamBufferRecordingControlVtbl;

    interface IMSVidStreamBufferRecordingControl
    {
        CONST_VTBL struct IMSVidStreamBufferRecordingControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferRecordingControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferRecordingControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferRecordingControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferRecordingControl_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferRecordingControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferRecordingControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferRecordingControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferRecordingControl_get_StartTime(This,rtStart)	\
    ( (This)->lpVtbl -> get_StartTime(This,rtStart) ) 

#define IMSVidStreamBufferRecordingControl_put_StartTime(This,rtStart)	\
    ( (This)->lpVtbl -> put_StartTime(This,rtStart) ) 

#define IMSVidStreamBufferRecordingControl_get_StopTime(This,rtStop)	\
    ( (This)->lpVtbl -> get_StopTime(This,rtStop) ) 

#define IMSVidStreamBufferRecordingControl_put_StopTime(This,rtStop)	\
    ( (This)->lpVtbl -> put_StopTime(This,rtStop) ) 

#define IMSVidStreamBufferRecordingControl_get_RecordingStopped(This,phResult)	\
    ( (This)->lpVtbl -> get_RecordingStopped(This,phResult) ) 

#define IMSVidStreamBufferRecordingControl_get_RecordingStarted(This,phResult)	\
    ( (This)->lpVtbl -> get_RecordingStarted(This,phResult) ) 

#define IMSVidStreamBufferRecordingControl_get_RecordingType(This,dwType)	\
    ( (This)->lpVtbl -> get_RecordingType(This,dwType) ) 

#define IMSVidStreamBufferRecordingControl_get_RecordingAttribute(This,pRecordingAttribute)	\
    ( (This)->lpVtbl -> get_RecordingAttribute(This,pRecordingAttribute) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferRecordingControl_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSink_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSink_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSink */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("159DBB45-CD1B-4dab-83EA-5CB1F4F21D07")
    IMSVidStreamBufferSink : public IMSVidOutputDevice
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ContentRecorder( 
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReferenceRecorder( 
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SinkName( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pName) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SinkName( 
            /* [in] */ __RPC__in BSTR Name) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE NameSetLock( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SBESink( 
            /* [out][retval] */ __RPC__deref_out_opt IUnknown **sbeConfig) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSink * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidStreamBufferSink * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidStreamBufferSink * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidStreamBufferSink * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidStreamBufferSink * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidStreamBufferSink * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidStreamBufferSink * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidStreamBufferSink * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ContentRecorder )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReferenceRecorder )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinkName )( 
            IMSVidStreamBufferSink * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SinkName )( 
            IMSVidStreamBufferSink * This,
            /* [in] */ __RPC__in BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *NameSetLock )( 
            IMSVidStreamBufferSink * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SBESink )( 
            IMSVidStreamBufferSink * This,
            /* [out][retval] */ __RPC__deref_out_opt IUnknown **sbeConfig);
        
        END_INTERFACE
    } IMSVidStreamBufferSinkVtbl;

    interface IMSVidStreamBufferSink
    {
        CONST_VTBL struct IMSVidStreamBufferSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSink_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSink_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidStreamBufferSink_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidStreamBufferSink_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidStreamBufferSink_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidStreamBufferSink_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidStreamBufferSink_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSink_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidStreamBufferSink_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSink_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidStreamBufferSink_get_ContentRecorder(This,pszFilename,pRecordingIUnknown)	\
    ( (This)->lpVtbl -> get_ContentRecorder(This,pszFilename,pRecordingIUnknown) ) 

#define IMSVidStreamBufferSink_get_ReferenceRecorder(This,pszFilename,pRecordingIUnknown)	\
    ( (This)->lpVtbl -> get_ReferenceRecorder(This,pszFilename,pRecordingIUnknown) ) 

#define IMSVidStreamBufferSink_get_SinkName(This,pName)	\
    ( (This)->lpVtbl -> get_SinkName(This,pName) ) 

#define IMSVidStreamBufferSink_put_SinkName(This,Name)	\
    ( (This)->lpVtbl -> put_SinkName(This,Name) ) 

#define IMSVidStreamBufferSink_NameSetLock(This)	\
    ( (This)->lpVtbl -> NameSetLock(This) ) 

#define IMSVidStreamBufferSink_get_SBESink(This,sbeConfig)	\
    ( (This)->lpVtbl -> get_SBESink(This,sbeConfig) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSink_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSink2_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSink2_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSink2 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSink2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2CA9FC63-C131-4E5A-955A-544A47C67146")
    IMSVidStreamBufferSink2 : public IMSVidStreamBufferSink
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnlockProfile( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSink2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSink2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSink2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSink2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidStreamBufferSink2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidStreamBufferSink2 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidStreamBufferSink2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidStreamBufferSink2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidStreamBufferSink2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidStreamBufferSink2 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidStreamBufferSink2 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ContentRecorder )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReferenceRecorder )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinkName )( 
            IMSVidStreamBufferSink2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SinkName )( 
            IMSVidStreamBufferSink2 * This,
            /* [in] */ __RPC__in BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *NameSetLock )( 
            IMSVidStreamBufferSink2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SBESink )( 
            IMSVidStreamBufferSink2 * This,
            /* [out][retval] */ __RPC__deref_out_opt IUnknown **sbeConfig);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UnlockProfile )( 
            IMSVidStreamBufferSink2 * This);
        
        END_INTERFACE
    } IMSVidStreamBufferSink2Vtbl;

    interface IMSVidStreamBufferSink2
    {
        CONST_VTBL struct IMSVidStreamBufferSink2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSink2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSink2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSink2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSink2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSink2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSink2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSink2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSink2_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidStreamBufferSink2_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidStreamBufferSink2_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidStreamBufferSink2_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidStreamBufferSink2_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidStreamBufferSink2_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSink2_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidStreamBufferSink2_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSink2_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidStreamBufferSink2_get_ContentRecorder(This,pszFilename,pRecordingIUnknown)	\
    ( (This)->lpVtbl -> get_ContentRecorder(This,pszFilename,pRecordingIUnknown) ) 

#define IMSVidStreamBufferSink2_get_ReferenceRecorder(This,pszFilename,pRecordingIUnknown)	\
    ( (This)->lpVtbl -> get_ReferenceRecorder(This,pszFilename,pRecordingIUnknown) ) 

#define IMSVidStreamBufferSink2_get_SinkName(This,pName)	\
    ( (This)->lpVtbl -> get_SinkName(This,pName) ) 

#define IMSVidStreamBufferSink2_put_SinkName(This,Name)	\
    ( (This)->lpVtbl -> put_SinkName(This,Name) ) 

#define IMSVidStreamBufferSink2_NameSetLock(This)	\
    ( (This)->lpVtbl -> NameSetLock(This) ) 

#define IMSVidStreamBufferSink2_get_SBESink(This,sbeConfig)	\
    ( (This)->lpVtbl -> get_SBESink(This,sbeConfig) ) 


#define IMSVidStreamBufferSink2_UnlockProfile(This)	\
    ( (This)->lpVtbl -> UnlockProfile(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSink2_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSink3_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSink3_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSink3 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSink3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4F8721D7-7D59-4D8B-99F5-A77775586BD5")
    IMSVidStreamBufferSink3 : public IMSVidStreamBufferSink2
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetMinSeek( 
            /* [retval][out] */ __RPC__out LONG *pdwMin) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VideoCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CCCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WSTCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AudioAnalysisFilter( 
            /* [in] */ __RPC__in BSTR szCLSID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioAnalysisFilter( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszCLSID) = 0;
        
        virtual /* [restricted][hidden][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put__AudioAnalysisFilter( 
            /* [in] */ GUID guid) = 0;
        
        virtual /* [restricted][hidden][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get__AudioAnalysisFilter( 
            /* [retval][out] */ __RPC__out GUID *pGuid) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_VideoAnalysisFilter( 
            /* [in] */ __RPC__in BSTR szCLSID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VideoAnalysisFilter( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszCLSID) = 0;
        
        virtual /* [restricted][hidden][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put__VideoAnalysisFilter( 
            /* [in] */ GUID guid) = 0;
        
        virtual /* [restricted][hidden][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get__VideoAnalysisFilter( 
            /* [retval][out] */ __RPC__out GUID *pGuid) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DataAnalysisFilter( 
            /* [in] */ __RPC__in BSTR szCLSID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DataAnalysisFilter( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszCLSID) = 0;
        
        virtual /* [restricted][hidden][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put__DataAnalysisFilter( 
            /* [in] */ GUID guid) = 0;
        
        virtual /* [restricted][hidden][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get__DataAnalysisFilter( 
            /* [retval][out] */ __RPC__out GUID *pGuid) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LicenseErrorCode( 
            /* [retval][out] */ __RPC__out HRESULT *hres) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSink3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSink3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSink3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSink3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidStreamBufferSink3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ContentRecorder )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReferenceRecorder )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in BSTR pszFilename,
            /* [out][retval] */ __RPC__deref_out_opt IMSVidStreamBufferRecordingControl **pRecordingIUnknown);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinkName )( 
            IMSVidStreamBufferSink3 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SinkName )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *NameSetLock )( 
            IMSVidStreamBufferSink3 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SBESink )( 
            IMSVidStreamBufferSink3 * This,
            /* [out][retval] */ __RPC__deref_out_opt IUnknown **sbeConfig);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UnlockProfile )( 
            IMSVidStreamBufferSink3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetMinSeek )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out LONG *pdwMin);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioCounter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoCounter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CCCounter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WSTCounter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AudioAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in BSTR szCLSID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszCLSID);
        
        /* [restricted][hidden][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put__AudioAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ GUID guid);
        
        /* [restricted][hidden][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__AudioAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out GUID *pGuid);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in BSTR szCLSID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszCLSID);
        
        /* [restricted][hidden][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put__VideoAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ GUID guid);
        
        /* [restricted][hidden][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__VideoAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out GUID *pGuid);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ __RPC__in BSTR szCLSID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszCLSID);
        
        /* [restricted][hidden][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put__DataAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [in] */ GUID guid);
        
        /* [restricted][hidden][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__DataAnalysisFilter )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out GUID *pGuid);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LicenseErrorCode )( 
            IMSVidStreamBufferSink3 * This,
            /* [retval][out] */ __RPC__out HRESULT *hres);
        
        END_INTERFACE
    } IMSVidStreamBufferSink3Vtbl;

    interface IMSVidStreamBufferSink3
    {
        CONST_VTBL struct IMSVidStreamBufferSink3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSink3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSink3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSink3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSink3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSink3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSink3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSink3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSink3_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidStreamBufferSink3_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidStreamBufferSink3_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidStreamBufferSink3_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidStreamBufferSink3_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidStreamBufferSink3_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSink3_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidStreamBufferSink3_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSink3_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidStreamBufferSink3_get_ContentRecorder(This,pszFilename,pRecordingIUnknown)	\
    ( (This)->lpVtbl -> get_ContentRecorder(This,pszFilename,pRecordingIUnknown) ) 

#define IMSVidStreamBufferSink3_get_ReferenceRecorder(This,pszFilename,pRecordingIUnknown)	\
    ( (This)->lpVtbl -> get_ReferenceRecorder(This,pszFilename,pRecordingIUnknown) ) 

#define IMSVidStreamBufferSink3_get_SinkName(This,pName)	\
    ( (This)->lpVtbl -> get_SinkName(This,pName) ) 

#define IMSVidStreamBufferSink3_put_SinkName(This,Name)	\
    ( (This)->lpVtbl -> put_SinkName(This,Name) ) 

#define IMSVidStreamBufferSink3_NameSetLock(This)	\
    ( (This)->lpVtbl -> NameSetLock(This) ) 

#define IMSVidStreamBufferSink3_get_SBESink(This,sbeConfig)	\
    ( (This)->lpVtbl -> get_SBESink(This,sbeConfig) ) 


#define IMSVidStreamBufferSink3_UnlockProfile(This)	\
    ( (This)->lpVtbl -> UnlockProfile(This) ) 


#define IMSVidStreamBufferSink3_SetMinSeek(This,pdwMin)	\
    ( (This)->lpVtbl -> SetMinSeek(This,pdwMin) ) 

#define IMSVidStreamBufferSink3_get_AudioCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_AudioCounter(This,ppUnk) ) 

#define IMSVidStreamBufferSink3_get_VideoCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_VideoCounter(This,ppUnk) ) 

#define IMSVidStreamBufferSink3_get_CCCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_CCCounter(This,ppUnk) ) 

#define IMSVidStreamBufferSink3_get_WSTCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_WSTCounter(This,ppUnk) ) 

#define IMSVidStreamBufferSink3_put_AudioAnalysisFilter(This,szCLSID)	\
    ( (This)->lpVtbl -> put_AudioAnalysisFilter(This,szCLSID) ) 

#define IMSVidStreamBufferSink3_get_AudioAnalysisFilter(This,pszCLSID)	\
    ( (This)->lpVtbl -> get_AudioAnalysisFilter(This,pszCLSID) ) 

#define IMSVidStreamBufferSink3_put__AudioAnalysisFilter(This,guid)	\
    ( (This)->lpVtbl -> put__AudioAnalysisFilter(This,guid) ) 

#define IMSVidStreamBufferSink3_get__AudioAnalysisFilter(This,pGuid)	\
    ( (This)->lpVtbl -> get__AudioAnalysisFilter(This,pGuid) ) 

#define IMSVidStreamBufferSink3_put_VideoAnalysisFilter(This,szCLSID)	\
    ( (This)->lpVtbl -> put_VideoAnalysisFilter(This,szCLSID) ) 

#define IMSVidStreamBufferSink3_get_VideoAnalysisFilter(This,pszCLSID)	\
    ( (This)->lpVtbl -> get_VideoAnalysisFilter(This,pszCLSID) ) 

#define IMSVidStreamBufferSink3_put__VideoAnalysisFilter(This,guid)	\
    ( (This)->lpVtbl -> put__VideoAnalysisFilter(This,guid) ) 

#define IMSVidStreamBufferSink3_get__VideoAnalysisFilter(This,pGuid)	\
    ( (This)->lpVtbl -> get__VideoAnalysisFilter(This,pGuid) ) 

#define IMSVidStreamBufferSink3_put_DataAnalysisFilter(This,szCLSID)	\
    ( (This)->lpVtbl -> put_DataAnalysisFilter(This,szCLSID) ) 

#define IMSVidStreamBufferSink3_get_DataAnalysisFilter(This,pszCLSID)	\
    ( (This)->lpVtbl -> get_DataAnalysisFilter(This,pszCLSID) ) 

#define IMSVidStreamBufferSink3_put__DataAnalysisFilter(This,guid)	\
    ( (This)->lpVtbl -> put__DataAnalysisFilter(This,guid) ) 

#define IMSVidStreamBufferSink3_get__DataAnalysisFilter(This,pGuid)	\
    ( (This)->lpVtbl -> get__DataAnalysisFilter(This,pGuid) ) 

#define IMSVidStreamBufferSink3_get_LicenseErrorCode(This,hres)	\
    ( (This)->lpVtbl -> get_LicenseErrorCode(This,hres) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSink3_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSinkEvent_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSinkEvent_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSinkEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSinkEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F798A36B-B05B-4bbe-9703-EAEA7D61CD51")
    IMSVidStreamBufferSinkEvent : public IMSVidOutputDeviceEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CertificateFailure( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CertificateSuccess( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE WriteFailure( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSinkEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSinkEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSinkEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSinkEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSinkEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSinkEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSinkEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSinkEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidStreamBufferSinkEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateFailure )( 
            IMSVidStreamBufferSinkEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateSuccess )( 
            IMSVidStreamBufferSinkEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *WriteFailure )( 
            IMSVidStreamBufferSinkEvent * This);
        
        END_INTERFACE
    } IMSVidStreamBufferSinkEventVtbl;

    interface IMSVidStreamBufferSinkEvent
    {
        CONST_VTBL struct IMSVidStreamBufferSinkEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSinkEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSinkEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSinkEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSinkEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSinkEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSinkEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSinkEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSinkEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#define IMSVidStreamBufferSinkEvent_CertificateFailure(This)	\
    ( (This)->lpVtbl -> CertificateFailure(This) ) 

#define IMSVidStreamBufferSinkEvent_CertificateSuccess(This)	\
    ( (This)->lpVtbl -> CertificateSuccess(This) ) 

#define IMSVidStreamBufferSinkEvent_WriteFailure(This)	\
    ( (This)->lpVtbl -> WriteFailure(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSinkEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSinkEvent2_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSinkEvent2_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSinkEvent2 */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSinkEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3D7A5166-72D7-484b-A06F-286187B80CA1")
    IMSVidStreamBufferSinkEvent2 : public IMSVidStreamBufferSinkEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EncryptionOn( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EncryptionOff( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSinkEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSinkEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSinkEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSinkEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSinkEvent2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSinkEvent2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSinkEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSinkEvent2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidStreamBufferSinkEvent2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateFailure )( 
            IMSVidStreamBufferSinkEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateSuccess )( 
            IMSVidStreamBufferSinkEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *WriteFailure )( 
            IMSVidStreamBufferSinkEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EncryptionOn )( 
            IMSVidStreamBufferSinkEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EncryptionOff )( 
            IMSVidStreamBufferSinkEvent2 * This);
        
        END_INTERFACE
    } IMSVidStreamBufferSinkEvent2Vtbl;

    interface IMSVidStreamBufferSinkEvent2
    {
        CONST_VTBL struct IMSVidStreamBufferSinkEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSinkEvent2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSinkEvent2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSinkEvent2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSinkEvent2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSinkEvent2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSinkEvent2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSinkEvent2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSinkEvent2_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#define IMSVidStreamBufferSinkEvent2_CertificateFailure(This)	\
    ( (This)->lpVtbl -> CertificateFailure(This) ) 

#define IMSVidStreamBufferSinkEvent2_CertificateSuccess(This)	\
    ( (This)->lpVtbl -> CertificateSuccess(This) ) 

#define IMSVidStreamBufferSinkEvent2_WriteFailure(This)	\
    ( (This)->lpVtbl -> WriteFailure(This) ) 


#define IMSVidStreamBufferSinkEvent2_EncryptionOn(This)	\
    ( (This)->lpVtbl -> EncryptionOn(This) ) 

#define IMSVidStreamBufferSinkEvent2_EncryptionOff(This)	\
    ( (This)->lpVtbl -> EncryptionOff(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSinkEvent2_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSinkEvent3_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSinkEvent3_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSinkEvent3 */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSinkEvent3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("735AD8D5-C259-48e9-81E7-D27953665B23")
    IMSVidStreamBufferSinkEvent3 : public IMSVidStreamBufferSinkEvent2
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LicenseChange( 
            /* [in] */ long dwProt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSinkEvent3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSinkEvent3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSinkEvent3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSinkEvent3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSinkEvent3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSinkEvent3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSinkEvent3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSinkEvent3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidStreamBufferSinkEvent3 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateFailure )( 
            IMSVidStreamBufferSinkEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateSuccess )( 
            IMSVidStreamBufferSinkEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *WriteFailure )( 
            IMSVidStreamBufferSinkEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EncryptionOn )( 
            IMSVidStreamBufferSinkEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EncryptionOff )( 
            IMSVidStreamBufferSinkEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *LicenseChange )( 
            IMSVidStreamBufferSinkEvent3 * This,
            /* [in] */ long dwProt);
        
        END_INTERFACE
    } IMSVidStreamBufferSinkEvent3Vtbl;

    interface IMSVidStreamBufferSinkEvent3
    {
        CONST_VTBL struct IMSVidStreamBufferSinkEvent3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSinkEvent3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSinkEvent3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSinkEvent3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSinkEvent3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSinkEvent3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSinkEvent3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSinkEvent3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSinkEvent3_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#define IMSVidStreamBufferSinkEvent3_CertificateFailure(This)	\
    ( (This)->lpVtbl -> CertificateFailure(This) ) 

#define IMSVidStreamBufferSinkEvent3_CertificateSuccess(This)	\
    ( (This)->lpVtbl -> CertificateSuccess(This) ) 

#define IMSVidStreamBufferSinkEvent3_WriteFailure(This)	\
    ( (This)->lpVtbl -> WriteFailure(This) ) 


#define IMSVidStreamBufferSinkEvent3_EncryptionOn(This)	\
    ( (This)->lpVtbl -> EncryptionOn(This) ) 

#define IMSVidStreamBufferSinkEvent3_EncryptionOff(This)	\
    ( (This)->lpVtbl -> EncryptionOff(This) ) 


#define IMSVidStreamBufferSinkEvent3_LicenseChange(This,dwProt)	\
    ( (This)->lpVtbl -> LicenseChange(This,dwProt) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSinkEvent3_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSource_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSource_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSource */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EB0C8CF9-6950-4772-87B1-47D11CF3A02F")
    IMSVidStreamBufferSource : public IMSVidFilePlayback
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ __RPC__out long *lStart) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecordingAttribute( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pRecordingAttribute) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CurrentRatings( 
            /* [out] */ __RPC__out EnTvRat_System *pEnSystem,
            /* [out] */ __RPC__out EnTvRat_GenericLevel *pEnRating,
            /* [out] */ __RPC__out LONG *pBfEnAttr) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE MaxRatingsLevel( 
            /* [in] */ EnTvRat_System enSystem,
            /* [in] */ EnTvRat_GenericLevel enRating,
            /* [in] */ LONG lbfEnAttr) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_BlockUnrated( 
            /* [in] */ VARIANT_BOOL bBlock) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_UnratedDelay( 
            /* [in] */ long dwDelay) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SBESource( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **sbeFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSource * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidStreamBufferSource * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableResetOnStop )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableResetOnStop )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            IMSVidStreamBufferSource * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IMSVidStreamBufferSource * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMSVidStreamBufferSource * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanStep )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ VARIANT_BOOL fBackwards,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfCan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Step )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ long lStep);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ double plRate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out double *plRate);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPosition )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ long lPosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out long *lPosition);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PositionMode )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ PositionModeList lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionMode )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out PositionModeList *lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out long *lLength);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *FileName);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ __RPC__in BSTR FileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__out long *lStart);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecordingAttribute )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pRecordingAttribute);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CurrentRatings )( 
            IMSVidStreamBufferSource * This,
            /* [out] */ __RPC__out EnTvRat_System *pEnSystem,
            /* [out] */ __RPC__out EnTvRat_GenericLevel *pEnRating,
            /* [out] */ __RPC__out LONG *pBfEnAttr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MaxRatingsLevel )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ EnTvRat_System enSystem,
            /* [in] */ EnTvRat_GenericLevel enRating,
            /* [in] */ LONG lbfEnAttr);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockUnrated )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ VARIANT_BOOL bBlock);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UnratedDelay )( 
            IMSVidStreamBufferSource * This,
            /* [in] */ long dwDelay);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SBESource )( 
            IMSVidStreamBufferSource * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **sbeFilter);
        
        END_INTERFACE
    } IMSVidStreamBufferSourceVtbl;

    interface IMSVidStreamBufferSource
    {
        CONST_VTBL struct IMSVidStreamBufferSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSource_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSource_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSource_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSource_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSource_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidStreamBufferSource_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidStreamBufferSource_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidStreamBufferSource_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidStreamBufferSource_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidStreamBufferSource_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSource_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidStreamBufferSource_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSource_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidStreamBufferSource_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidStreamBufferSource_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 


#define IMSVidStreamBufferSource_get_EnableResetOnStop(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableResetOnStop(This,pVal) ) 

#define IMSVidStreamBufferSource_put_EnableResetOnStop(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableResetOnStop(This,newVal) ) 

#define IMSVidStreamBufferSource_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IMSVidStreamBufferSource_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSVidStreamBufferSource_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMSVidStreamBufferSource_get_CanStep(This,fBackwards,pfCan)	\
    ( (This)->lpVtbl -> get_CanStep(This,fBackwards,pfCan) ) 

#define IMSVidStreamBufferSource_Step(This,lStep)	\
    ( (This)->lpVtbl -> Step(This,lStep) ) 

#define IMSVidStreamBufferSource_put_Rate(This,plRate)	\
    ( (This)->lpVtbl -> put_Rate(This,plRate) ) 

#define IMSVidStreamBufferSource_get_Rate(This,plRate)	\
    ( (This)->lpVtbl -> get_Rate(This,plRate) ) 

#define IMSVidStreamBufferSource_put_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> put_CurrentPosition(This,lPosition) ) 

#define IMSVidStreamBufferSource_get_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,lPosition) ) 

#define IMSVidStreamBufferSource_put_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> put_PositionMode(This,lPositionMode) ) 

#define IMSVidStreamBufferSource_get_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> get_PositionMode(This,lPositionMode) ) 

#define IMSVidStreamBufferSource_get_Length(This,lLength)	\
    ( (This)->lpVtbl -> get_Length(This,lLength) ) 


#define IMSVidStreamBufferSource_get_FileName(This,FileName)	\
    ( (This)->lpVtbl -> get_FileName(This,FileName) ) 

#define IMSVidStreamBufferSource_put_FileName(This,FileName)	\
    ( (This)->lpVtbl -> put_FileName(This,FileName) ) 


#define IMSVidStreamBufferSource_get_Start(This,lStart)	\
    ( (This)->lpVtbl -> get_Start(This,lStart) ) 

#define IMSVidStreamBufferSource_get_RecordingAttribute(This,pRecordingAttribute)	\
    ( (This)->lpVtbl -> get_RecordingAttribute(This,pRecordingAttribute) ) 

#define IMSVidStreamBufferSource_CurrentRatings(This,pEnSystem,pEnRating,pBfEnAttr)	\
    ( (This)->lpVtbl -> CurrentRatings(This,pEnSystem,pEnRating,pBfEnAttr) ) 

#define IMSVidStreamBufferSource_MaxRatingsLevel(This,enSystem,enRating,lbfEnAttr)	\
    ( (This)->lpVtbl -> MaxRatingsLevel(This,enSystem,enRating,lbfEnAttr) ) 

#define IMSVidStreamBufferSource_put_BlockUnrated(This,bBlock)	\
    ( (This)->lpVtbl -> put_BlockUnrated(This,bBlock) ) 

#define IMSVidStreamBufferSource_put_UnratedDelay(This,dwDelay)	\
    ( (This)->lpVtbl -> put_UnratedDelay(This,dwDelay) ) 

#define IMSVidStreamBufferSource_get_SBESource(This,sbeFilter)	\
    ( (This)->lpVtbl -> get_SBESource(This,sbeFilter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSource_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSource2_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSource2_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSource2 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSource2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E4BA9059-B1CE-40D8-B9A0-D4EA4A9989D3")
    IMSVidStreamBufferSource2 : public IMSVidStreamBufferSource
    {
    public:
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_RateEx( 
            /* [in] */ double dwRate,
            /* [in] */ DWORD dwFramesPerSecond) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VideoCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CCCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WSTCounter( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSource2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSource2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSource2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSource2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidStreamBufferSource2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsViewable )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ __RPC__in VARIANT *v,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfViewable);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableResetOnStop )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableResetOnStop )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            IMSVidStreamBufferSource2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IMSVidStreamBufferSource2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMSVidStreamBufferSource2 * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanStep )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ VARIANT_BOOL fBackwards,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfCan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Step )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ long lStep);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ double plRate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out double *plRate);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPosition )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ long lPosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out long *lPosition);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PositionMode )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ PositionModeList lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionMode )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out PositionModeList *lPositionMode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out long *lLength);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *FileName);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ __RPC__in BSTR FileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__out long *lStart);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecordingAttribute )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pRecordingAttribute);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CurrentRatings )( 
            IMSVidStreamBufferSource2 * This,
            /* [out] */ __RPC__out EnTvRat_System *pEnSystem,
            /* [out] */ __RPC__out EnTvRat_GenericLevel *pEnRating,
            /* [out] */ __RPC__out LONG *pBfEnAttr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MaxRatingsLevel )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ EnTvRat_System enSystem,
            /* [in] */ EnTvRat_GenericLevel enRating,
            /* [in] */ LONG lbfEnAttr);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockUnrated )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ VARIANT_BOOL bBlock);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UnratedDelay )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ long dwDelay);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SBESource )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **sbeFilter);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateEx )( 
            IMSVidStreamBufferSource2 * This,
            /* [in] */ double dwRate,
            /* [in] */ DWORD dwFramesPerSecond);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioCounter )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoCounter )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CCCounter )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WSTCounter )( 
            IMSVidStreamBufferSource2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppUnk);
        
        END_INTERFACE
    } IMSVidStreamBufferSource2Vtbl;

    interface IMSVidStreamBufferSource2
    {
        CONST_VTBL struct IMSVidStreamBufferSource2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSource2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSource2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSource2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSource2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSource2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSource2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSource2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidStreamBufferSource2_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidStreamBufferSource2_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidStreamBufferSource2_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidStreamBufferSource2_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidStreamBufferSource2_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidStreamBufferSource2_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSource2_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidStreamBufferSource2_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidStreamBufferSource2_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 


#define IMSVidStreamBufferSource2_IsViewable(This,v,pfViewable)	\
    ( (This)->lpVtbl -> IsViewable(This,v,pfViewable) ) 

#define IMSVidStreamBufferSource2_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 


#define IMSVidStreamBufferSource2_get_EnableResetOnStop(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableResetOnStop(This,pVal) ) 

#define IMSVidStreamBufferSource2_put_EnableResetOnStop(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableResetOnStop(This,newVal) ) 

#define IMSVidStreamBufferSource2_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IMSVidStreamBufferSource2_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSVidStreamBufferSource2_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMSVidStreamBufferSource2_get_CanStep(This,fBackwards,pfCan)	\
    ( (This)->lpVtbl -> get_CanStep(This,fBackwards,pfCan) ) 

#define IMSVidStreamBufferSource2_Step(This,lStep)	\
    ( (This)->lpVtbl -> Step(This,lStep) ) 

#define IMSVidStreamBufferSource2_put_Rate(This,plRate)	\
    ( (This)->lpVtbl -> put_Rate(This,plRate) ) 

#define IMSVidStreamBufferSource2_get_Rate(This,plRate)	\
    ( (This)->lpVtbl -> get_Rate(This,plRate) ) 

#define IMSVidStreamBufferSource2_put_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> put_CurrentPosition(This,lPosition) ) 

#define IMSVidStreamBufferSource2_get_CurrentPosition(This,lPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,lPosition) ) 

#define IMSVidStreamBufferSource2_put_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> put_PositionMode(This,lPositionMode) ) 

#define IMSVidStreamBufferSource2_get_PositionMode(This,lPositionMode)	\
    ( (This)->lpVtbl -> get_PositionMode(This,lPositionMode) ) 

#define IMSVidStreamBufferSource2_get_Length(This,lLength)	\
    ( (This)->lpVtbl -> get_Length(This,lLength) ) 


#define IMSVidStreamBufferSource2_get_FileName(This,FileName)	\
    ( (This)->lpVtbl -> get_FileName(This,FileName) ) 

#define IMSVidStreamBufferSource2_put_FileName(This,FileName)	\
    ( (This)->lpVtbl -> put_FileName(This,FileName) ) 


#define IMSVidStreamBufferSource2_get_Start(This,lStart)	\
    ( (This)->lpVtbl -> get_Start(This,lStart) ) 

#define IMSVidStreamBufferSource2_get_RecordingAttribute(This,pRecordingAttribute)	\
    ( (This)->lpVtbl -> get_RecordingAttribute(This,pRecordingAttribute) ) 

#define IMSVidStreamBufferSource2_CurrentRatings(This,pEnSystem,pEnRating,pBfEnAttr)	\
    ( (This)->lpVtbl -> CurrentRatings(This,pEnSystem,pEnRating,pBfEnAttr) ) 

#define IMSVidStreamBufferSource2_MaxRatingsLevel(This,enSystem,enRating,lbfEnAttr)	\
    ( (This)->lpVtbl -> MaxRatingsLevel(This,enSystem,enRating,lbfEnAttr) ) 

#define IMSVidStreamBufferSource2_put_BlockUnrated(This,bBlock)	\
    ( (This)->lpVtbl -> put_BlockUnrated(This,bBlock) ) 

#define IMSVidStreamBufferSource2_put_UnratedDelay(This,dwDelay)	\
    ( (This)->lpVtbl -> put_UnratedDelay(This,dwDelay) ) 

#define IMSVidStreamBufferSource2_get_SBESource(This,sbeFilter)	\
    ( (This)->lpVtbl -> get_SBESource(This,sbeFilter) ) 


#define IMSVidStreamBufferSource2_put_RateEx(This,dwRate,dwFramesPerSecond)	\
    ( (This)->lpVtbl -> put_RateEx(This,dwRate,dwFramesPerSecond) ) 

#define IMSVidStreamBufferSource2_get_AudioCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_AudioCounter(This,ppUnk) ) 

#define IMSVidStreamBufferSource2_get_VideoCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_VideoCounter(This,ppUnk) ) 

#define IMSVidStreamBufferSource2_get_CCCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_CCCounter(This,ppUnk) ) 

#define IMSVidStreamBufferSource2_get_WSTCounter(This,ppUnk)	\
    ( (This)->lpVtbl -> get_WSTCounter(This,ppUnk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSource2_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSourceEvent_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSourceEvent_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSourceEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSourceEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50CE8A7D-9C28-4DA8-9042-CDFA7116F979")
    IMSVidStreamBufferSourceEvent : public IMSVidFilePlaybackEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CertificateFailure( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CertificateSuccess( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RatingsBlocked( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RatingsUnblocked( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RatingsChanged( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE TimeHole( 
            /* [in] */ long StreamOffsetMS,
            /* [in] */ long SizeMS) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StaleDataRead( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ContentBecomingStale( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StaleFileDeleted( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSourceEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSourceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSourceEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSourceEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSourceEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSourceEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSourceEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSourceEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EndOfMedia )( 
            IMSVidStreamBufferSourceEvent * This,
            /* [in] */ __RPC__in_opt IMSVidPlayback *lpd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateFailure )( 
            IMSVidStreamBufferSourceEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateSuccess )( 
            IMSVidStreamBufferSourceEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsBlocked )( 
            IMSVidStreamBufferSourceEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsUnblocked )( 
            IMSVidStreamBufferSourceEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsChanged )( 
            IMSVidStreamBufferSourceEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TimeHole )( 
            IMSVidStreamBufferSourceEvent * This,
            /* [in] */ long StreamOffsetMS,
            /* [in] */ long SizeMS);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StaleDataRead )( 
            IMSVidStreamBufferSourceEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ContentBecomingStale )( 
            IMSVidStreamBufferSourceEvent * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StaleFileDeleted )( 
            IMSVidStreamBufferSourceEvent * This);
        
        END_INTERFACE
    } IMSVidStreamBufferSourceEventVtbl;

    interface IMSVidStreamBufferSourceEvent
    {
        CONST_VTBL struct IMSVidStreamBufferSourceEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSourceEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSourceEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSourceEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSourceEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSourceEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSourceEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSourceEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidStreamBufferSourceEvent_EndOfMedia(This,lpd)	\
    ( (This)->lpVtbl -> EndOfMedia(This,lpd) ) 



#define IMSVidStreamBufferSourceEvent_CertificateFailure(This)	\
    ( (This)->lpVtbl -> CertificateFailure(This) ) 

#define IMSVidStreamBufferSourceEvent_CertificateSuccess(This)	\
    ( (This)->lpVtbl -> CertificateSuccess(This) ) 

#define IMSVidStreamBufferSourceEvent_RatingsBlocked(This)	\
    ( (This)->lpVtbl -> RatingsBlocked(This) ) 

#define IMSVidStreamBufferSourceEvent_RatingsUnblocked(This)	\
    ( (This)->lpVtbl -> RatingsUnblocked(This) ) 

#define IMSVidStreamBufferSourceEvent_RatingsChanged(This)	\
    ( (This)->lpVtbl -> RatingsChanged(This) ) 

#define IMSVidStreamBufferSourceEvent_TimeHole(This,StreamOffsetMS,SizeMS)	\
    ( (This)->lpVtbl -> TimeHole(This,StreamOffsetMS,SizeMS) ) 

#define IMSVidStreamBufferSourceEvent_StaleDataRead(This)	\
    ( (This)->lpVtbl -> StaleDataRead(This) ) 

#define IMSVidStreamBufferSourceEvent_ContentBecomingStale(This)	\
    ( (This)->lpVtbl -> ContentBecomingStale(This) ) 

#define IMSVidStreamBufferSourceEvent_StaleFileDeleted(This)	\
    ( (This)->lpVtbl -> StaleFileDeleted(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSourceEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSourceEvent2_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSourceEvent2_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSourceEvent2 */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSourceEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7AEF50CE-8E22-4BA8-BC06-A92A458B4EF2")
    IMSVidStreamBufferSourceEvent2 : public IMSVidStreamBufferSourceEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RateChange( 
            /* [in] */ double qwNewRate,
            /* [in] */ double qwOldRate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSourceEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EndOfMedia )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [in] */ __RPC__in_opt IMSVidPlayback *lpd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateFailure )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateSuccess )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsBlocked )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsUnblocked )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsChanged )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TimeHole )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [in] */ long StreamOffsetMS,
            /* [in] */ long SizeMS);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StaleDataRead )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ContentBecomingStale )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StaleFileDeleted )( 
            IMSVidStreamBufferSourceEvent2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RateChange )( 
            IMSVidStreamBufferSourceEvent2 * This,
            /* [in] */ double qwNewRate,
            /* [in] */ double qwOldRate);
        
        END_INTERFACE
    } IMSVidStreamBufferSourceEvent2Vtbl;

    interface IMSVidStreamBufferSourceEvent2
    {
        CONST_VTBL struct IMSVidStreamBufferSourceEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSourceEvent2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSourceEvent2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSourceEvent2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSourceEvent2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSourceEvent2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSourceEvent2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSourceEvent2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidStreamBufferSourceEvent2_EndOfMedia(This,lpd)	\
    ( (This)->lpVtbl -> EndOfMedia(This,lpd) ) 



#define IMSVidStreamBufferSourceEvent2_CertificateFailure(This)	\
    ( (This)->lpVtbl -> CertificateFailure(This) ) 

#define IMSVidStreamBufferSourceEvent2_CertificateSuccess(This)	\
    ( (This)->lpVtbl -> CertificateSuccess(This) ) 

#define IMSVidStreamBufferSourceEvent2_RatingsBlocked(This)	\
    ( (This)->lpVtbl -> RatingsBlocked(This) ) 

#define IMSVidStreamBufferSourceEvent2_RatingsUnblocked(This)	\
    ( (This)->lpVtbl -> RatingsUnblocked(This) ) 

#define IMSVidStreamBufferSourceEvent2_RatingsChanged(This)	\
    ( (This)->lpVtbl -> RatingsChanged(This) ) 

#define IMSVidStreamBufferSourceEvent2_TimeHole(This,StreamOffsetMS,SizeMS)	\
    ( (This)->lpVtbl -> TimeHole(This,StreamOffsetMS,SizeMS) ) 

#define IMSVidStreamBufferSourceEvent2_StaleDataRead(This)	\
    ( (This)->lpVtbl -> StaleDataRead(This) ) 

#define IMSVidStreamBufferSourceEvent2_ContentBecomingStale(This)	\
    ( (This)->lpVtbl -> ContentBecomingStale(This) ) 

#define IMSVidStreamBufferSourceEvent2_StaleFileDeleted(This)	\
    ( (This)->lpVtbl -> StaleFileDeleted(This) ) 


#define IMSVidStreamBufferSourceEvent2_RateChange(This,qwNewRate,qwOldRate)	\
    ( (This)->lpVtbl -> RateChange(This,qwNewRate,qwOldRate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSourceEvent2_INTERFACE_DEFINED__ */


#ifndef __IMSVidStreamBufferSourceEvent3_INTERFACE_DEFINED__
#define __IMSVidStreamBufferSourceEvent3_INTERFACE_DEFINED__

/* interface IMSVidStreamBufferSourceEvent3 */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidStreamBufferSourceEvent3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CEABD6AB-9B90-4570-ADF1-3CE76E00A763")
    IMSVidStreamBufferSourceEvent3 : public IMSVidStreamBufferSourceEvent2
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BroadcastEvent( 
            /* [in] */ __RPC__in BSTR Guid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BroadcastEventEx( 
            /* [in] */ __RPC__in BSTR Guid,
            /* [in] */ ULONG Param1,
            /* [in] */ ULONG Param2,
            /* [in] */ ULONG Param3,
            /* [in] */ ULONG Param4) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE COPPBlocked( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE COPPUnblocked( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ContentPrimarilyAudio( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidStreamBufferSourceEvent3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EndOfMedia )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ __RPC__in_opt IMSVidPlayback *lpd);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateFailure )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CertificateSuccess )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsBlocked )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsUnblocked )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RatingsChanged )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TimeHole )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ long StreamOffsetMS,
            /* [in] */ long SizeMS);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StaleDataRead )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ContentBecomingStale )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StaleFileDeleted )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RateChange )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ double qwNewRate,
            /* [in] */ double qwOldRate);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BroadcastEvent )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ __RPC__in BSTR Guid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BroadcastEventEx )( 
            IMSVidStreamBufferSourceEvent3 * This,
            /* [in] */ __RPC__in BSTR Guid,
            /* [in] */ ULONG Param1,
            /* [in] */ ULONG Param2,
            /* [in] */ ULONG Param3,
            /* [in] */ ULONG Param4);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *COPPBlocked )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *COPPUnblocked )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ContentPrimarilyAudio )( 
            IMSVidStreamBufferSourceEvent3 * This);
        
        END_INTERFACE
    } IMSVidStreamBufferSourceEvent3Vtbl;

    interface IMSVidStreamBufferSourceEvent3
    {
        CONST_VTBL struct IMSVidStreamBufferSourceEvent3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidStreamBufferSourceEvent3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidStreamBufferSourceEvent3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidStreamBufferSourceEvent3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidStreamBufferSourceEvent3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidStreamBufferSourceEvent3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidStreamBufferSourceEvent3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidStreamBufferSourceEvent3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSVidStreamBufferSourceEvent3_EndOfMedia(This,lpd)	\
    ( (This)->lpVtbl -> EndOfMedia(This,lpd) ) 



#define IMSVidStreamBufferSourceEvent3_CertificateFailure(This)	\
    ( (This)->lpVtbl -> CertificateFailure(This) ) 

#define IMSVidStreamBufferSourceEvent3_CertificateSuccess(This)	\
    ( (This)->lpVtbl -> CertificateSuccess(This) ) 

#define IMSVidStreamBufferSourceEvent3_RatingsBlocked(This)	\
    ( (This)->lpVtbl -> RatingsBlocked(This) ) 

#define IMSVidStreamBufferSourceEvent3_RatingsUnblocked(This)	\
    ( (This)->lpVtbl -> RatingsUnblocked(This) ) 

#define IMSVidStreamBufferSourceEvent3_RatingsChanged(This)	\
    ( (This)->lpVtbl -> RatingsChanged(This) ) 

#define IMSVidStreamBufferSourceEvent3_TimeHole(This,StreamOffsetMS,SizeMS)	\
    ( (This)->lpVtbl -> TimeHole(This,StreamOffsetMS,SizeMS) ) 

#define IMSVidStreamBufferSourceEvent3_StaleDataRead(This)	\
    ( (This)->lpVtbl -> StaleDataRead(This) ) 

#define IMSVidStreamBufferSourceEvent3_ContentBecomingStale(This)	\
    ( (This)->lpVtbl -> ContentBecomingStale(This) ) 

#define IMSVidStreamBufferSourceEvent3_StaleFileDeleted(This)	\
    ( (This)->lpVtbl -> StaleFileDeleted(This) ) 


#define IMSVidStreamBufferSourceEvent3_RateChange(This,qwNewRate,qwOldRate)	\
    ( (This)->lpVtbl -> RateChange(This,qwNewRate,qwOldRate) ) 


#define IMSVidStreamBufferSourceEvent3_BroadcastEvent(This,Guid)	\
    ( (This)->lpVtbl -> BroadcastEvent(This,Guid) ) 

#define IMSVidStreamBufferSourceEvent3_BroadcastEventEx(This,Guid,Param1,Param2,Param3,Param4)	\
    ( (This)->lpVtbl -> BroadcastEventEx(This,Guid,Param1,Param2,Param3,Param4) ) 

#define IMSVidStreamBufferSourceEvent3_COPPBlocked(This)	\
    ( (This)->lpVtbl -> COPPBlocked(This) ) 

#define IMSVidStreamBufferSourceEvent3_COPPUnblocked(This)	\
    ( (This)->lpVtbl -> COPPUnblocked(This) ) 

#define IMSVidStreamBufferSourceEvent3_ContentPrimarilyAudio(This)	\
    ( (This)->lpVtbl -> ContentPrimarilyAudio(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidStreamBufferSourceEvent3_INTERFACE_DEFINED__ */


#ifndef __IMSVidVideoRenderer2_INTERFACE_DEFINED__
#define __IMSVidVideoRenderer2_INTERFACE_DEFINED__

/* interface IMSVidVideoRenderer2 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidVideoRenderer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6BDD5C1E-2810-4159-94BC-05511AE8549B")
    IMSVidVideoRenderer2 : public IMSVidVideoRenderer
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Allocator( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **AllocPresent) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__Allocator( 
            /* [retval][out] */ __RPC__deref_out_opt IVMRSurfaceAllocator **AllocPresent) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Allocator_ID( 
            /* [retval][out] */ __RPC__out long *ID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetAllocator( 
            /* [in] */ __RPC__in_opt IUnknown *AllocPresent,
            /* [defaultvalue][in] */ long ID = -1) = 0;
        
        virtual /* [restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE _SetAllocator( 
            /* [in] */ __RPC__in_opt IVMRSurfaceAllocator *AllocPresent,
            /* [defaultvalue][in] */ long ID = -1) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SuppressEffects( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SuppressEffects( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *bSuppress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVideoRenderer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVideoRenderer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVideoRenderer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidVideoRenderer2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidVideoRenderer2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomCompositorClass )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *CompositorCLSID);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomCompositorClass )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in BSTR CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositorClass )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out GUID *CompositorCLSID);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositorClass )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in REFCLSID CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositor )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRImageCompositor **Compositor);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositor )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IVMRImageCompositor *Compositor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmap )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **MixerPictureDisp);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__MixerBitmap )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRMixerBitmap **MixerPicture);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmap )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__MixerBitmap )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in VMRALPHABITMAP *MixerPicture);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapPositionRect )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **rDest);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapPositionRect )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapOpacity )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out int *opacity);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapOpacity )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ int opacity);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetupMixerBitmap )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp,
            /* [in] */ long Opacity,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceSize )( 
            IMSVidVideoRenderer2 * This,
            /* [out][retval] */ __RPC__out SourceSizeList *CurrentSize);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceSize )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ SourceSizeList NewSize);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverScan )( 
            IMSVidVideoRenderer2 * This,
            /* [out][retval] */ __RPC__out long *plPercent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverScan )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ long lPercent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableSourceRect )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxVidRect )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinVidRect )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClippedSourceRect )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClippedSourceRect )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IMSVidRect *pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UsingOverlay )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *UseOverlayVal);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UsingOverlay )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ VARIANT_BOOL UseOverlayVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Capture )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **currentImage);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FramesPerSecond )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DecimateInput )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pDeci);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DecimateInput )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ VARIANT_BOOL pDeci);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Allocator )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **AllocPresent);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Allocator )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRSurfaceAllocator **AllocPresent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Allocator_ID )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out long *ID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetAllocator )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IUnknown *AllocPresent,
            /* [defaultvalue][in] */ long ID);
        
        /* [restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *_SetAllocator )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ __RPC__in_opt IVMRSurfaceAllocator *AllocPresent,
            /* [defaultvalue][in] */ long ID);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressEffects )( 
            IMSVidVideoRenderer2 * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressEffects )( 
            IMSVidVideoRenderer2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *bSuppress);
        
        END_INTERFACE
    } IMSVidVideoRenderer2Vtbl;

    interface IMSVidVideoRenderer2
    {
        CONST_VTBL struct IMSVidVideoRenderer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVideoRenderer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVideoRenderer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVideoRenderer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVideoRenderer2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidVideoRenderer2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidVideoRenderer2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidVideoRenderer2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidVideoRenderer2_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidVideoRenderer2_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidVideoRenderer2_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidVideoRenderer2_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidVideoRenderer2_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidVideoRenderer2_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidVideoRenderer2_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidVideoRenderer2_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidVideoRenderer2_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidVideoRenderer2_get_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer2_put_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer2_get__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer2_put__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVideoRenderer2_get__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> get__CustomCompositor(This,Compositor) ) 

#define IMSVidVideoRenderer2_put__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> put__CustomCompositor(This,Compositor) ) 

#define IMSVidVideoRenderer2_get_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> get_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidVideoRenderer2_get__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> get__MixerBitmap(This,MixerPicture) ) 

#define IMSVidVideoRenderer2_put_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> put_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidVideoRenderer2_put__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> put__MixerBitmap(This,MixerPicture) ) 

#define IMSVidVideoRenderer2_get_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> get_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidVideoRenderer2_put_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> put_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidVideoRenderer2_get_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> get_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidVideoRenderer2_put_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> put_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidVideoRenderer2_SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest)	\
    ( (This)->lpVtbl -> SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest) ) 

#define IMSVidVideoRenderer2_get_SourceSize(This,CurrentSize)	\
    ( (This)->lpVtbl -> get_SourceSize(This,CurrentSize) ) 

#define IMSVidVideoRenderer2_put_SourceSize(This,NewSize)	\
    ( (This)->lpVtbl -> put_SourceSize(This,NewSize) ) 

#define IMSVidVideoRenderer2_get_OverScan(This,plPercent)	\
    ( (This)->lpVtbl -> get_OverScan(This,plPercent) ) 

#define IMSVidVideoRenderer2_put_OverScan(This,lPercent)	\
    ( (This)->lpVtbl -> put_OverScan(This,lPercent) ) 

#define IMSVidVideoRenderer2_get_AvailableSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_AvailableSourceRect(This,pRect) ) 

#define IMSVidVideoRenderer2_get_MaxVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MaxVidRect(This,ppVidRect) ) 

#define IMSVidVideoRenderer2_get_MinVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MinVidRect(This,ppVidRect) ) 

#define IMSVidVideoRenderer2_get_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_ClippedSourceRect(This,pRect) ) 

#define IMSVidVideoRenderer2_put_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> put_ClippedSourceRect(This,pRect) ) 

#define IMSVidVideoRenderer2_get_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> get_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidVideoRenderer2_put_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> put_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidVideoRenderer2_Capture(This,currentImage)	\
    ( (This)->lpVtbl -> Capture(This,currentImage) ) 

#define IMSVidVideoRenderer2_get_FramesPerSecond(This,pVal)	\
    ( (This)->lpVtbl -> get_FramesPerSecond(This,pVal) ) 

#define IMSVidVideoRenderer2_get_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> get_DecimateInput(This,pDeci) ) 

#define IMSVidVideoRenderer2_put_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> put_DecimateInput(This,pDeci) ) 


#define IMSVidVideoRenderer2_get_Allocator(This,AllocPresent)	\
    ( (This)->lpVtbl -> get_Allocator(This,AllocPresent) ) 

#define IMSVidVideoRenderer2_get__Allocator(This,AllocPresent)	\
    ( (This)->lpVtbl -> get__Allocator(This,AllocPresent) ) 

#define IMSVidVideoRenderer2_get_Allocator_ID(This,ID)	\
    ( (This)->lpVtbl -> get_Allocator_ID(This,ID) ) 

#define IMSVidVideoRenderer2_SetAllocator(This,AllocPresent,ID)	\
    ( (This)->lpVtbl -> SetAllocator(This,AllocPresent,ID) ) 

#define IMSVidVideoRenderer2__SetAllocator(This,AllocPresent,ID)	\
    ( (This)->lpVtbl -> _SetAllocator(This,AllocPresent,ID) ) 

#define IMSVidVideoRenderer2_put_SuppressEffects(This,bSuppress)	\
    ( (This)->lpVtbl -> put_SuppressEffects(This,bSuppress) ) 

#define IMSVidVideoRenderer2_get_SuppressEffects(This,bSuppress)	\
    ( (This)->lpVtbl -> get_SuppressEffects(This,bSuppress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVideoRenderer2_INTERFACE_DEFINED__ */


#ifndef __IMSVidVideoRendererEvent2_INTERFACE_DEFINED__
#define __IMSVidVideoRendererEvent2_INTERFACE_DEFINED__

/* interface IMSVidVideoRendererEvent2 */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidVideoRendererEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7145ED66-4730-4fdb-8A53-FDE7508D3E5E")
    IMSVidVideoRendererEvent2 : public IMSVidOutputDeviceEvent
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE OverlayUnavailable( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVideoRendererEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVideoRendererEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVideoRendererEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVideoRendererEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidVideoRendererEvent2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidVideoRendererEvent2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidVideoRendererEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidVideoRendererEvent2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidVideoRendererEvent2 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *OverlayUnavailable )( 
            IMSVidVideoRendererEvent2 * This);
        
        END_INTERFACE
    } IMSVidVideoRendererEvent2Vtbl;

    interface IMSVidVideoRendererEvent2
    {
        CONST_VTBL struct IMSVidVideoRendererEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVideoRendererEvent2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVideoRendererEvent2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVideoRendererEvent2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVideoRendererEvent2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidVideoRendererEvent2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidVideoRendererEvent2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidVideoRendererEvent2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidVideoRendererEvent2_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#define IMSVidVideoRendererEvent2_OverlayUnavailable(This)	\
    ( (This)->lpVtbl -> OverlayUnavailable(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVideoRendererEvent2_INTERFACE_DEFINED__ */


#ifndef __IMSVidVMR9_INTERFACE_DEFINED__
#define __IMSVidVMR9_INTERFACE_DEFINED__

/* interface IMSVidVMR9 */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidVMR9;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D58B0015-EBEF-44bb-BBDD-3F3699D76EA1")
    IMSVidVMR9 : public IMSVidVideoRenderer
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Allocator_ID( 
            /* [retval][out] */ __RPC__out long *ID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetAllocator( 
            /* [in] */ __RPC__in_opt IUnknown *AllocPresent,
            /* [defaultvalue][in] */ long ID = -1) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SuppressEffects( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SuppressEffects( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Allocator( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **AllocPresent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVMR9Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVMR9 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVMR9 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidVMR9 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidVMR9 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidVMR9 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidVMR9 * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidVMR9 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomCompositorClass )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *CompositorCLSID);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomCompositorClass )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in BSTR CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositorClass )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out GUID *CompositorCLSID);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositorClass )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in REFCLSID CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositor )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRImageCompositor **Compositor);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositor )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in_opt IVMRImageCompositor *Compositor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmap )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **MixerPictureDisp);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__MixerBitmap )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRMixerBitmap **MixerPicture);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmap )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__MixerBitmap )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in VMRALPHABITMAP *MixerPicture);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapPositionRect )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **rDest);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapPositionRect )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapOpacity )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out int *opacity);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapOpacity )( 
            IMSVidVMR9 * This,
            /* [in] */ int opacity);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetupMixerBitmap )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp,
            /* [in] */ long Opacity,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceSize )( 
            IMSVidVMR9 * This,
            /* [out][retval] */ __RPC__out SourceSizeList *CurrentSize);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceSize )( 
            IMSVidVMR9 * This,
            /* [in] */ SourceSizeList NewSize);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverScan )( 
            IMSVidVMR9 * This,
            /* [out][retval] */ __RPC__out long *plPercent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverScan )( 
            IMSVidVMR9 * This,
            /* [in] */ long lPercent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableSourceRect )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxVidRect )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinVidRect )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClippedSourceRect )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClippedSourceRect )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in_opt IMSVidRect *pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UsingOverlay )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *UseOverlayVal);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UsingOverlay )( 
            IMSVidVMR9 * This,
            /* [in] */ VARIANT_BOOL UseOverlayVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Capture )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **currentImage);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FramesPerSecond )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DecimateInput )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pDeci);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DecimateInput )( 
            IMSVidVMR9 * This,
            /* [in] */ VARIANT_BOOL pDeci);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Allocator_ID )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out long *ID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetAllocator )( 
            IMSVidVMR9 * This,
            /* [in] */ __RPC__in_opt IUnknown *AllocPresent,
            /* [defaultvalue][in] */ long ID);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressEffects )( 
            IMSVidVMR9 * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressEffects )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *bSuppress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Allocator )( 
            IMSVidVMR9 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **AllocPresent);
        
        END_INTERFACE
    } IMSVidVMR9Vtbl;

    interface IMSVidVMR9
    {
        CONST_VTBL struct IMSVidVMR9Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVMR9_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVMR9_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVMR9_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVMR9_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidVMR9_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidVMR9_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidVMR9_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidVMR9_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidVMR9_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidVMR9_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidVMR9_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidVMR9_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidVMR9_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidVMR9_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidVMR9_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidVMR9_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidVMR9_get_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVMR9_put_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVMR9_get__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVMR9_put__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidVMR9_get__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> get__CustomCompositor(This,Compositor) ) 

#define IMSVidVMR9_put__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> put__CustomCompositor(This,Compositor) ) 

#define IMSVidVMR9_get_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> get_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidVMR9_get__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> get__MixerBitmap(This,MixerPicture) ) 

#define IMSVidVMR9_put_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> put_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidVMR9_put__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> put__MixerBitmap(This,MixerPicture) ) 

#define IMSVidVMR9_get_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> get_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidVMR9_put_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> put_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidVMR9_get_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> get_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidVMR9_put_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> put_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidVMR9_SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest)	\
    ( (This)->lpVtbl -> SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest) ) 

#define IMSVidVMR9_get_SourceSize(This,CurrentSize)	\
    ( (This)->lpVtbl -> get_SourceSize(This,CurrentSize) ) 

#define IMSVidVMR9_put_SourceSize(This,NewSize)	\
    ( (This)->lpVtbl -> put_SourceSize(This,NewSize) ) 

#define IMSVidVMR9_get_OverScan(This,plPercent)	\
    ( (This)->lpVtbl -> get_OverScan(This,plPercent) ) 

#define IMSVidVMR9_put_OverScan(This,lPercent)	\
    ( (This)->lpVtbl -> put_OverScan(This,lPercent) ) 

#define IMSVidVMR9_get_AvailableSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_AvailableSourceRect(This,pRect) ) 

#define IMSVidVMR9_get_MaxVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MaxVidRect(This,ppVidRect) ) 

#define IMSVidVMR9_get_MinVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MinVidRect(This,ppVidRect) ) 

#define IMSVidVMR9_get_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_ClippedSourceRect(This,pRect) ) 

#define IMSVidVMR9_put_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> put_ClippedSourceRect(This,pRect) ) 

#define IMSVidVMR9_get_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> get_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidVMR9_put_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> put_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidVMR9_Capture(This,currentImage)	\
    ( (This)->lpVtbl -> Capture(This,currentImage) ) 

#define IMSVidVMR9_get_FramesPerSecond(This,pVal)	\
    ( (This)->lpVtbl -> get_FramesPerSecond(This,pVal) ) 

#define IMSVidVMR9_get_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> get_DecimateInput(This,pDeci) ) 

#define IMSVidVMR9_put_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> put_DecimateInput(This,pDeci) ) 


#define IMSVidVMR9_get_Allocator_ID(This,ID)	\
    ( (This)->lpVtbl -> get_Allocator_ID(This,ID) ) 

#define IMSVidVMR9_SetAllocator(This,AllocPresent,ID)	\
    ( (This)->lpVtbl -> SetAllocator(This,AllocPresent,ID) ) 

#define IMSVidVMR9_put_SuppressEffects(This,bSuppress)	\
    ( (This)->lpVtbl -> put_SuppressEffects(This,bSuppress) ) 

#define IMSVidVMR9_get_SuppressEffects(This,bSuppress)	\
    ( (This)->lpVtbl -> get_SuppressEffects(This,bSuppress) ) 

#define IMSVidVMR9_get_Allocator(This,AllocPresent)	\
    ( (This)->lpVtbl -> get_Allocator(This,AllocPresent) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVMR9_INTERFACE_DEFINED__ */


#ifndef __IMSVidEVR_INTERFACE_DEFINED__
#define __IMSVidEVR_INTERFACE_DEFINED__

/* interface IMSVidEVR */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidEVR;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("15E496AE-82A8-4cf9-A6B6-C561DC60398F")
    IMSVidEVR : public IMSVidVideoRenderer
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Presenter( 
            /* [retval][out] */ __RPC__deref_out_opt IMFVideoPresenter **ppAllocPresent) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Presenter( 
            /* [in] */ __RPC__in_opt IMFVideoPresenter *pAllocPresent) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SuppressEffects( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SuppressEffects( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *bSuppress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidEVRVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidEVR * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidEVR * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidEVR * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidEVR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidEVR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidEVR * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidEVR * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomCompositorClass )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *CompositorCLSID);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomCompositorClass )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in BSTR CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositorClass )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out GUID *CompositorCLSID);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositorClass )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in REFCLSID CompositorCLSID);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__CustomCompositor )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRImageCompositor **Compositor);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__CustomCompositor )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in_opt IVMRImageCompositor *Compositor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmap )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **MixerPictureDisp);
        
        /* [id][restricted][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get__MixerBitmap )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IVMRMixerBitmap **MixerPicture);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmap )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp);
        
        /* [id][restricted][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put__MixerBitmap )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in VMRALPHABITMAP *MixerPicture);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapPositionRect )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **rDest);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapPositionRect )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixerBitmapOpacity )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out int *opacity);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixerBitmapOpacity )( 
            IMSVidEVR * This,
            /* [in] */ int opacity);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetupMixerBitmap )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in_opt IPictureDisp *MixerPictureDisp,
            /* [in] */ long Opacity,
            /* [in] */ __RPC__in_opt IMSVidRect *rDest);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceSize )( 
            IMSVidEVR * This,
            /* [out][retval] */ __RPC__out SourceSizeList *CurrentSize);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceSize )( 
            IMSVidEVR * This,
            /* [in] */ SourceSizeList NewSize);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverScan )( 
            IMSVidEVR * This,
            /* [out][retval] */ __RPC__out long *plPercent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverScan )( 
            IMSVidEVR * This,
            /* [in] */ long lPercent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableSourceRect )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxVidRect )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinVidRect )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **ppVidRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClippedSourceRect )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidRect **pRect);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClippedSourceRect )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in_opt IMSVidRect *pRect);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UsingOverlay )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *UseOverlayVal);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UsingOverlay )( 
            IMSVidEVR * This,
            /* [in] */ VARIANT_BOOL UseOverlayVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Capture )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **currentImage);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FramesPerSecond )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DecimateInput )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pDeci);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DecimateInput )( 
            IMSVidEVR * This,
            /* [in] */ VARIANT_BOOL pDeci);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Presenter )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__deref_out_opt IMFVideoPresenter **ppAllocPresent);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Presenter )( 
            IMSVidEVR * This,
            /* [in] */ __RPC__in_opt IMFVideoPresenter *pAllocPresent);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressEffects )( 
            IMSVidEVR * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressEffects )( 
            IMSVidEVR * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *bSuppress);
        
        END_INTERFACE
    } IMSVidEVRVtbl;

    interface IMSVidEVR
    {
        CONST_VTBL struct IMSVidEVRVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidEVR_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidEVR_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidEVR_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidEVR_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidEVR_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidEVR_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidEVR_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidEVR_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidEVR_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidEVR_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidEVR_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidEVR_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidEVR_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidEVR_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidEVR_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidEVR_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidEVR_get_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidEVR_put_CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put_CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidEVR_get__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> get__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidEVR_put__CustomCompositorClass(This,CompositorCLSID)	\
    ( (This)->lpVtbl -> put__CustomCompositorClass(This,CompositorCLSID) ) 

#define IMSVidEVR_get__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> get__CustomCompositor(This,Compositor) ) 

#define IMSVidEVR_put__CustomCompositor(This,Compositor)	\
    ( (This)->lpVtbl -> put__CustomCompositor(This,Compositor) ) 

#define IMSVidEVR_get_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> get_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidEVR_get__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> get__MixerBitmap(This,MixerPicture) ) 

#define IMSVidEVR_put_MixerBitmap(This,MixerPictureDisp)	\
    ( (This)->lpVtbl -> put_MixerBitmap(This,MixerPictureDisp) ) 

#define IMSVidEVR_put__MixerBitmap(This,MixerPicture)	\
    ( (This)->lpVtbl -> put__MixerBitmap(This,MixerPicture) ) 

#define IMSVidEVR_get_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> get_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidEVR_put_MixerBitmapPositionRect(This,rDest)	\
    ( (This)->lpVtbl -> put_MixerBitmapPositionRect(This,rDest) ) 

#define IMSVidEVR_get_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> get_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidEVR_put_MixerBitmapOpacity(This,opacity)	\
    ( (This)->lpVtbl -> put_MixerBitmapOpacity(This,opacity) ) 

#define IMSVidEVR_SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest)	\
    ( (This)->lpVtbl -> SetupMixerBitmap(This,MixerPictureDisp,Opacity,rDest) ) 

#define IMSVidEVR_get_SourceSize(This,CurrentSize)	\
    ( (This)->lpVtbl -> get_SourceSize(This,CurrentSize) ) 

#define IMSVidEVR_put_SourceSize(This,NewSize)	\
    ( (This)->lpVtbl -> put_SourceSize(This,NewSize) ) 

#define IMSVidEVR_get_OverScan(This,plPercent)	\
    ( (This)->lpVtbl -> get_OverScan(This,plPercent) ) 

#define IMSVidEVR_put_OverScan(This,lPercent)	\
    ( (This)->lpVtbl -> put_OverScan(This,lPercent) ) 

#define IMSVidEVR_get_AvailableSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_AvailableSourceRect(This,pRect) ) 

#define IMSVidEVR_get_MaxVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MaxVidRect(This,ppVidRect) ) 

#define IMSVidEVR_get_MinVidRect(This,ppVidRect)	\
    ( (This)->lpVtbl -> get_MinVidRect(This,ppVidRect) ) 

#define IMSVidEVR_get_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> get_ClippedSourceRect(This,pRect) ) 

#define IMSVidEVR_put_ClippedSourceRect(This,pRect)	\
    ( (This)->lpVtbl -> put_ClippedSourceRect(This,pRect) ) 

#define IMSVidEVR_get_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> get_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidEVR_put_UsingOverlay(This,UseOverlayVal)	\
    ( (This)->lpVtbl -> put_UsingOverlay(This,UseOverlayVal) ) 

#define IMSVidEVR_Capture(This,currentImage)	\
    ( (This)->lpVtbl -> Capture(This,currentImage) ) 

#define IMSVidEVR_get_FramesPerSecond(This,pVal)	\
    ( (This)->lpVtbl -> get_FramesPerSecond(This,pVal) ) 

#define IMSVidEVR_get_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> get_DecimateInput(This,pDeci) ) 

#define IMSVidEVR_put_DecimateInput(This,pDeci)	\
    ( (This)->lpVtbl -> put_DecimateInput(This,pDeci) ) 


#define IMSVidEVR_get_Presenter(This,ppAllocPresent)	\
    ( (This)->lpVtbl -> get_Presenter(This,ppAllocPresent) ) 

#define IMSVidEVR_put_Presenter(This,pAllocPresent)	\
    ( (This)->lpVtbl -> put_Presenter(This,pAllocPresent) ) 

#define IMSVidEVR_put_SuppressEffects(This,bSuppress)	\
    ( (This)->lpVtbl -> put_SuppressEffects(This,bSuppress) ) 

#define IMSVidEVR_get_SuppressEffects(This,bSuppress)	\
    ( (This)->lpVtbl -> get_SuppressEffects(This,bSuppress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidEVR_INTERFACE_DEFINED__ */


#ifndef __IMSVidEVREvent_INTERFACE_DEFINED__
#define __IMSVidEVREvent_INTERFACE_DEFINED__

/* interface IMSVidEVREvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidEVREvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("349ABB10-883C-4F22-8714-CECAEEE45D62")
    IMSVidEVREvent : public IMSVidOutputDeviceEvent
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnUserEvent( 
            /* [in] */ long lEventCode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidEVREventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidEVREvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidEVREvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidEVREvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidEVREvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidEVREvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidEVREvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidEVREvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidEVREvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnUserEvent )( 
            IMSVidEVREvent * This,
            /* [in] */ long lEventCode);
        
        END_INTERFACE
    } IMSVidEVREventVtbl;

    interface IMSVidEVREvent
    {
        CONST_VTBL struct IMSVidEVREventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidEVREvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidEVREvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidEVREvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidEVREvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidEVREvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidEVREvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidEVREvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidEVREvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#define IMSVidEVREvent_OnUserEvent(This,lEventCode)	\
    ( (This)->lpVtbl -> OnUserEvent(This,lEventCode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidEVREvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidAudioRenderer_INTERFACE_DEFINED__
#define __IMSVidAudioRenderer_INTERFACE_DEFINED__

/* interface IMSVidAudioRenderer */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidAudioRenderer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B0353F-A4C8-11d2-B634-00C04F79498E")
    IMSVidAudioRenderer : public IMSVidOutputDevice
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ long lVol) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [out][retval] */ __RPC__out long *lVol) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Balance( 
            /* [in] */ long lBal) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Balance( 
            /* [out][retval] */ __RPC__out long *lBal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidAudioRendererVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidAudioRenderer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidAudioRenderer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidAudioRenderer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidAudioRenderer * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidAudioRenderer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidAudioRenderer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidAudioRenderer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMSVidAudioRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IMSVidAudioRenderer * This,
            /* [retval][out] */ __RPC__out long *Status);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Power )( 
            IMSVidAudioRenderer * This,
            /* [in] */ VARIANT_BOOL Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Power )( 
            IMSVidAudioRenderer * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *Power);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IMSVidAudioRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Guid);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassID )( 
            IMSVidAudioRenderer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Clsid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__Category )( 
            IMSVidAudioRenderer * This,
            /* [retval][out] */ __RPC__out GUID *Guid);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__ClassID )( 
            IMSVidAudioRenderer * This,
            /* [retval][out] */ __RPC__out GUID *Clsid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualDevice )( 
            IMSVidAudioRenderer * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *Device,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *IsEqual);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            IMSVidAudioRenderer * This,
            /* [in] */ long lVol);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            IMSVidAudioRenderer * This,
            /* [out][retval] */ __RPC__out long *lVol);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Balance )( 
            IMSVidAudioRenderer * This,
            /* [in] */ long lBal);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Balance )( 
            IMSVidAudioRenderer * This,
            /* [out][retval] */ __RPC__out long *lBal);
        
        END_INTERFACE
    } IMSVidAudioRendererVtbl;

    interface IMSVidAudioRenderer
    {
        CONST_VTBL struct IMSVidAudioRendererVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidAudioRenderer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidAudioRenderer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidAudioRenderer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidAudioRenderer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidAudioRenderer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidAudioRenderer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidAudioRenderer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidAudioRenderer_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMSVidAudioRenderer_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define IMSVidAudioRenderer_put_Power(This,Power)	\
    ( (This)->lpVtbl -> put_Power(This,Power) ) 

#define IMSVidAudioRenderer_get_Power(This,Power)	\
    ( (This)->lpVtbl -> get_Power(This,Power) ) 

#define IMSVidAudioRenderer_get_Category(This,Guid)	\
    ( (This)->lpVtbl -> get_Category(This,Guid) ) 

#define IMSVidAudioRenderer_get_ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get_ClassID(This,Clsid) ) 

#define IMSVidAudioRenderer_get__Category(This,Guid)	\
    ( (This)->lpVtbl -> get__Category(This,Guid) ) 

#define IMSVidAudioRenderer_get__ClassID(This,Clsid)	\
    ( (This)->lpVtbl -> get__ClassID(This,Clsid) ) 

#define IMSVidAudioRenderer_IsEqualDevice(This,Device,IsEqual)	\
    ( (This)->lpVtbl -> IsEqualDevice(This,Device,IsEqual) ) 



#define IMSVidAudioRenderer_put_Volume(This,lVol)	\
    ( (This)->lpVtbl -> put_Volume(This,lVol) ) 

#define IMSVidAudioRenderer_get_Volume(This,lVol)	\
    ( (This)->lpVtbl -> get_Volume(This,lVol) ) 

#define IMSVidAudioRenderer_put_Balance(This,lBal)	\
    ( (This)->lpVtbl -> put_Balance(This,lBal) ) 

#define IMSVidAudioRenderer_get_Balance(This,lBal)	\
    ( (This)->lpVtbl -> get_Balance(This,lBal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidAudioRenderer_INTERFACE_DEFINED__ */


#ifndef __IMSVidAudioRendererEvent_INTERFACE_DEFINED__
#define __IMSVidAudioRendererEvent_INTERFACE_DEFINED__

/* interface IMSVidAudioRendererEvent */
/* [unique][helpstring][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IMSVidAudioRendererEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37B03541-A4C8-11d2-B634-00C04F79498E")
    IMSVidAudioRendererEvent : public IMSVidOutputDeviceEvent
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSVidAudioRendererEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidAudioRendererEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidAudioRendererEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidAudioRendererEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidAudioRendererEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidAudioRendererEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidAudioRendererEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidAudioRendererEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChange )( 
            IMSVidAudioRendererEvent * This,
            /* [in] */ __RPC__in_opt IMSVidDevice *lpd,
            /* [in] */ long oldState,
            /* [in] */ long newState);
        
        END_INTERFACE
    } IMSVidAudioRendererEventVtbl;

    interface IMSVidAudioRendererEvent
    {
        CONST_VTBL struct IMSVidAudioRendererEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidAudioRendererEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidAudioRendererEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidAudioRendererEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidAudioRendererEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidAudioRendererEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidAudioRendererEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidAudioRendererEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidAudioRendererEvent_StateChange(This,lpd,oldState,newState)	\
    ( (This)->lpVtbl -> StateChange(This,lpd,oldState,newState) ) 



#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidAudioRendererEvent_INTERFACE_DEFINED__ */


#ifndef __IMSVidInputDevices_INTERFACE_DEFINED__
#define __IMSVidInputDevices_INTERFACE_DEFINED__

/* interface IMSVidInputDevices */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidInputDevices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C5702CD1-9B79-11d3-B654-00C04F79498E")
    IMSVidInputDevices : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *lCount) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevice **pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in_opt IMSVidInputDevice *pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT v) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidInputDevicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidInputDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidInputDevices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidInputDevices * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidInputDevices * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidInputDevices * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidInputDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidInputDevices * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IMSVidInputDevices * This,
            /* [retval][out] */ __RPC__out long *lCount);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IMSVidInputDevices * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IMSVidInputDevices * This,
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevice **pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IMSVidInputDevices * This,
            /* [in] */ __RPC__in_opt IMSVidInputDevice *pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IMSVidInputDevices * This,
            /* [in] */ VARIANT v);
        
        END_INTERFACE
    } IMSVidInputDevicesVtbl;

    interface IMSVidInputDevices
    {
        CONST_VTBL struct IMSVidInputDevicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidInputDevices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidInputDevices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidInputDevices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidInputDevices_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidInputDevices_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidInputDevices_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidInputDevices_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidInputDevices_get_Count(This,lCount)	\
    ( (This)->lpVtbl -> get_Count(This,lCount) ) 

#define IMSVidInputDevices_get__NewEnum(This,pD)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pD) ) 

#define IMSVidInputDevices_get_Item(This,v,pDB)	\
    ( (This)->lpVtbl -> get_Item(This,v,pDB) ) 

#define IMSVidInputDevices_Add(This,pDB)	\
    ( (This)->lpVtbl -> Add(This,pDB) ) 

#define IMSVidInputDevices_Remove(This,v)	\
    ( (This)->lpVtbl -> Remove(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidInputDevices_INTERFACE_DEFINED__ */


#ifndef __IMSVidOutputDevices_INTERFACE_DEFINED__
#define __IMSVidOutputDevices_INTERFACE_DEFINED__

/* interface IMSVidOutputDevices */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidOutputDevices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C5702CD2-9B79-11d3-B654-00C04F79498E")
    IMSVidOutputDevices : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *lCount) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevice **pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in_opt IMSVidOutputDevice *pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT v) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidOutputDevicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidOutputDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidOutputDevices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidOutputDevices * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidOutputDevices * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidOutputDevices * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidOutputDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidOutputDevices * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IMSVidOutputDevices * This,
            /* [retval][out] */ __RPC__out long *lCount);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IMSVidOutputDevices * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IMSVidOutputDevices * This,
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevice **pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IMSVidOutputDevices * This,
            /* [in] */ __RPC__in_opt IMSVidOutputDevice *pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IMSVidOutputDevices * This,
            /* [in] */ VARIANT v);
        
        END_INTERFACE
    } IMSVidOutputDevicesVtbl;

    interface IMSVidOutputDevices
    {
        CONST_VTBL struct IMSVidOutputDevicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidOutputDevices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidOutputDevices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidOutputDevices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidOutputDevices_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidOutputDevices_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidOutputDevices_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidOutputDevices_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidOutputDevices_get_Count(This,lCount)	\
    ( (This)->lpVtbl -> get_Count(This,lCount) ) 

#define IMSVidOutputDevices_get__NewEnum(This,pD)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pD) ) 

#define IMSVidOutputDevices_get_Item(This,v,pDB)	\
    ( (This)->lpVtbl -> get_Item(This,v,pDB) ) 

#define IMSVidOutputDevices_Add(This,pDB)	\
    ( (This)->lpVtbl -> Add(This,pDB) ) 

#define IMSVidOutputDevices_Remove(This,v)	\
    ( (This)->lpVtbl -> Remove(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidOutputDevices_INTERFACE_DEFINED__ */


#ifndef __IMSVidVideoRendererDevices_INTERFACE_DEFINED__
#define __IMSVidVideoRendererDevices_INTERFACE_DEFINED__

/* interface IMSVidVideoRendererDevices */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidVideoRendererDevices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C5702CD3-9B79-11d3-B654-00C04F79498E")
    IMSVidVideoRendererDevices : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *lCount) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidVideoRenderer **pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in_opt IMSVidVideoRenderer *pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT v) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidVideoRendererDevicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidVideoRendererDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidVideoRendererDevices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidVideoRendererDevices * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidVideoRendererDevices * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidVideoRendererDevices * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidVideoRendererDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidVideoRendererDevices * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IMSVidVideoRendererDevices * This,
            /* [retval][out] */ __RPC__out long *lCount);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IMSVidVideoRendererDevices * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IMSVidVideoRendererDevices * This,
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidVideoRenderer **pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IMSVidVideoRendererDevices * This,
            /* [in] */ __RPC__in_opt IMSVidVideoRenderer *pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IMSVidVideoRendererDevices * This,
            /* [in] */ VARIANT v);
        
        END_INTERFACE
    } IMSVidVideoRendererDevicesVtbl;

    interface IMSVidVideoRendererDevices
    {
        CONST_VTBL struct IMSVidVideoRendererDevicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidVideoRendererDevices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidVideoRendererDevices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidVideoRendererDevices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidVideoRendererDevices_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidVideoRendererDevices_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidVideoRendererDevices_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidVideoRendererDevices_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidVideoRendererDevices_get_Count(This,lCount)	\
    ( (This)->lpVtbl -> get_Count(This,lCount) ) 

#define IMSVidVideoRendererDevices_get__NewEnum(This,pD)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pD) ) 

#define IMSVidVideoRendererDevices_get_Item(This,v,pDB)	\
    ( (This)->lpVtbl -> get_Item(This,v,pDB) ) 

#define IMSVidVideoRendererDevices_Add(This,pDB)	\
    ( (This)->lpVtbl -> Add(This,pDB) ) 

#define IMSVidVideoRendererDevices_Remove(This,v)	\
    ( (This)->lpVtbl -> Remove(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidVideoRendererDevices_INTERFACE_DEFINED__ */


#ifndef __IMSVidAudioRendererDevices_INTERFACE_DEFINED__
#define __IMSVidAudioRendererDevices_INTERFACE_DEFINED__

/* interface IMSVidAudioRendererDevices */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidAudioRendererDevices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C5702CD4-9B79-11d3-B654-00C04F79498E")
    IMSVidAudioRendererDevices : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *lCount) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidAudioRenderer **pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in_opt IMSVidAudioRenderer *pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT v) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidAudioRendererDevicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidAudioRendererDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidAudioRendererDevices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidAudioRendererDevices * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidAudioRendererDevices * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidAudioRendererDevices * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidAudioRendererDevices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidAudioRendererDevices * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IMSVidAudioRendererDevices * This,
            /* [retval][out] */ __RPC__out long *lCount);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IMSVidAudioRendererDevices * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IMSVidAudioRendererDevices * This,
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidAudioRenderer **pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IMSVidAudioRendererDevices * This,
            /* [in] */ __RPC__in_opt IMSVidAudioRenderer *pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IMSVidAudioRendererDevices * This,
            /* [in] */ VARIANT v);
        
        END_INTERFACE
    } IMSVidAudioRendererDevicesVtbl;

    interface IMSVidAudioRendererDevices
    {
        CONST_VTBL struct IMSVidAudioRendererDevicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidAudioRendererDevices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidAudioRendererDevices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidAudioRendererDevices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidAudioRendererDevices_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidAudioRendererDevices_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidAudioRendererDevices_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidAudioRendererDevices_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidAudioRendererDevices_get_Count(This,lCount)	\
    ( (This)->lpVtbl -> get_Count(This,lCount) ) 

#define IMSVidAudioRendererDevices_get__NewEnum(This,pD)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pD) ) 

#define IMSVidAudioRendererDevices_get_Item(This,v,pDB)	\
    ( (This)->lpVtbl -> get_Item(This,v,pDB) ) 

#define IMSVidAudioRendererDevices_Add(This,pDB)	\
    ( (This)->lpVtbl -> Add(This,pDB) ) 

#define IMSVidAudioRendererDevices_Remove(This,v)	\
    ( (This)->lpVtbl -> Remove(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidAudioRendererDevices_INTERFACE_DEFINED__ */


#ifndef __IMSVidFeatures_INTERFACE_DEFINED__
#define __IMSVidFeatures_INTERFACE_DEFINED__

/* interface IMSVidFeatures */
/* [unique][helpstring][uuid][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSVidFeatures;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C5702CD5-9B79-11d3-B654-00C04F79498E")
    IMSVidFeatures : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *lCount) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidFeature **pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in_opt IMSVidFeature *pDB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT v) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidFeaturesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMSVidFeatures * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMSVidFeatures * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMSVidFeatures * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMSVidFeatures * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMSVidFeatures * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMSVidFeatures * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidFeatures * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IMSVidFeatures * This,
            /* [retval][out] */ __RPC__out long *lCount);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IMSVidFeatures * This,
            /* [retval][out] */ __RPC__deref_out_opt IEnumVARIANT **pD);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IMSVidFeatures * This,
            /* [in] */ VARIANT v,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidFeature **pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IMSVidFeatures * This,
            /* [in] */ __RPC__in_opt IMSVidFeature *pDB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IMSVidFeatures * This,
            /* [in] */ VARIANT v);
        
        END_INTERFACE
    } IMSVidFeaturesVtbl;

    interface IMSVidFeatures
    {
        CONST_VTBL struct IMSVidFeaturesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidFeatures_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidFeatures_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidFeatures_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidFeatures_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidFeatures_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidFeatures_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidFeatures_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidFeatures_get_Count(This,lCount)	\
    ( (This)->lpVtbl -> get_Count(This,lCount) ) 

#define IMSVidFeatures_get__NewEnum(This,pD)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pD) ) 

#define IMSVidFeatures_get_Item(This,v,pDB)	\
    ( (This)->lpVtbl -> get_Item(This,v,pDB) ) 

#define IMSVidFeatures_Add(This,pDB)	\
    ( (This)->lpVtbl -> Add(This,pDB) ) 

#define IMSVidFeatures_Remove(This,v)	\
    ( (This)->lpVtbl -> Remove(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidFeatures_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HDC_UserSize(     unsigned long *, unsigned long            , HDC * ); 
unsigned char * __RPC_USER  HDC_UserMarshal(  unsigned long *, unsigned char *, HDC * ); 
unsigned char * __RPC_USER  HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC * ); 
void                      __RPC_USER  HDC_UserFree(     unsigned long *, HDC * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HDC_UserSize64(     unsigned long *, unsigned long            , HDC * ); 
unsigned char * __RPC_USER  HDC_UserMarshal64(  unsigned long *, unsigned char *, HDC * ); 
unsigned char * __RPC_USER  HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC * ); 
void                      __RPC_USER  HDC_UserFree64(     unsigned long *, HDC * ); 

unsigned long             __RPC_USER  HWND_UserSize64(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal64(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree64(     unsigned long *, HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\ServProv.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for servprov.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __servprov_h__
#define __servprov_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IServiceProvider_FWD_DEFINED__
#define __IServiceProvider_FWD_DEFINED__
typedef interface IServiceProvider IServiceProvider;
#endif 	/* __IServiceProvider_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_servprov_0000_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// ServProv.h
//=--------------------------------------------------------------------------=
// (C) Copyright 1995-1999 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#pragma comment(lib,"uuid.lib")

//---------------------------------------------------------------------------=
// IServiceProvider Interfaces.




extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;

#ifndef __IServiceProvider_INTERFACE_DEFINED__
#define __IServiceProvider_INTERFACE_DEFINED__

/* interface IServiceProvider */
/* [unique][uuid][object] */ 

typedef /* [unique] */  __RPC_unique_pointer IServiceProvider *LPSERVICEPROVIDER;

#if (_MSC_VER >= 1100) && defined(__cplusplus) && !defined(CINTERFACE)
    EXTERN_C const IID IID_IServiceProvider;
    extern "C++"
    {
        MIDL_INTERFACE("6d5140c1-7436-11ce-8034-00aa006009fa")
        IServiceProvider : public IUnknown
        {
        public:
            virtual /* [local] */ HRESULT STDMETHODCALLTYPE QueryService( 
                /* [in] */ REFGUID guidService,
                /* [in] */ REFIID riid,
                /* [out] */ void __RPC_FAR *__RPC_FAR *ppvObject) = 0;
            
            template <class Q>
            HRESULT STDMETHODCALLTYPE QueryService(REFGUID guidService, Q** pp)
            {
                return QueryService(guidService, __uuidof(Q), (void **)pp);
            }
        };
    }

    /* [call_as] */ HRESULT STDMETHODCALLTYPE IServiceProvider_RemoteQueryService_Proxy( 
        IServiceProvider __RPC_FAR * This,
        /* [in] */ REFGUID guidService,
        /* [in] */ REFIID riid,
        /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvObject);

    void __RPC_STUB IServiceProvider_RemoteQueryService_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

#else // VC6 Hack

EXTERN_C const IID IID_IServiceProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d5140c1-7436-11ce-8034-00aa006009fa")
    IServiceProvider : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE QueryService( 
            /* [in] */ REFGUID guidService,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IServiceProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IServiceProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IServiceProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IServiceProvider * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *QueryService )( 
            IServiceProvider * This,
            /* [in] */ REFGUID guidService,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvObject);
        
        END_INTERFACE
    } IServiceProviderVtbl;

    interface IServiceProvider
    {
        CONST_VTBL struct IServiceProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IServiceProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IServiceProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IServiceProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IServiceProvider_QueryService(This,guidService,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryService(This,guidService,riid,ppvObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IServiceProvider_RemoteQueryService_Proxy( 
    IServiceProvider * This,
    /* [in] */ __RPC__in REFGUID guidService,
    /* [in] */ __RPC__in REFIID riid,
    /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppvObject);


void __RPC_STUB IServiceProvider_RemoteQueryService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IServiceProvider_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_servprov_0000_0001 */
/* [local] */ 

#endif // VC6 Hack


extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* [local] */ HRESULT STDMETHODCALLTYPE IServiceProvider_QueryService_Proxy( 
    IServiceProvider * This,
    /* [in] */ REFGUID guidService,
    /* [in] */ REFIID riid,
    /* [out] */ void **ppvObject);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IServiceProvider_QueryService_Stub( 
    IServiceProvider * This,
    /* [in] */ __RPC__in REFGUID guidService,
    /* [in] */ __RPC__in REFIID riid,
    /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppvObject);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SetupAPI.h ===
/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    setupapi.h

Abstract:

    Public header file for Windows NT Setup and Device Installer services Dll.

--*/

#ifndef _INC_SETUPAPI
#define _INC_SETUPAPI

#if _MSC_VER > 1000
#pragma once
#endif
#if defined (_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(push)
#pragma warning(disable:4201) /* nonstandard extension used : nameless struct/union */
#endif

//
// Define API decoration for direct importing of DLL references.
//
#if !defined(_SETUPAPI_)
#define WINSETUPAPI DECLSPEC_IMPORT
#else
#define WINSETUPAPI
#endif

//
// determine version of setupapi based on _WIN32_WINDOWS and _WIN32_WINNT
//
// NT4 version of setupapi   (_WIN32_WINNT_NT4) is earliest, and installed onto Win95 by IE.
// Win2k version of setupapi (_WIN32_WINNT_WIN2K) also shipped in WinME
// we'll use "0x0410" to indicate version of setupapi shipped with Win98
//
#ifndef _SETUPAPI_VER
#if defined(_WIN32_WINNT) && (!defined(_WIN32_WINDOWS) || (_WIN32_WINNT < _WIN32_WINDOWS))
#define _SETUPAPI_VER _WIN32_WINNT  // SetupAPI version follows Windows NT version
#elif defined(_WIN32_WINDOWS)
#if _WIN32_WINDOWS >= 0x0490
#define _SETUPAPI_VER _WIN32_WINNT_WIN2K        // WinME uses same version of SetupAPI as Win2k
#elif _WIN32_WINDOWS >= 0x0410
#define _SETUPAPI_VER 0x0410        // Indicates version of SetupAPI shipped with Win98
#else
#define _SETUPAPI_VER _WIN32_WINNT_NT4        // Earliest SetupAPI version
#endif // _WIN32_WINDOWS
#else // _WIN32_WINNT/_WIN32_WINDOWS
#define _SETUPAPI_VER _WIN32_WINNT_WINXP
#endif // _WIN32_WINNT/_WIN32_WINDOWS
#endif // !_SETUPAPI_VER

#ifndef __LPGUID_DEFINED__
#define __LPGUID_DEFINED__
typedef GUID *LPGUID;
#endif

//
// Include spapidef.h for basic definitions and flags
//
#include <spapidef.h>

//
// Include commctrl.h for our use of HIMAGELIST and wizard support.
//
#include <commctrl.h>

//
// Include devpropdef.h for our use of DEVPROPERTYKEY and DEVPROPTYPE.
//
#include <devpropdef.h>

#ifdef _WIN64
#include <pshpack8.h>   // Assume 8-byte (64-bit) packing throughout
#else
#include <pshpack1.h>   // Assume byte packing throughout (32-bit processor)
#endif

#ifdef __cplusplus
extern "C" {
#endif

//
// Define maximum string length constants
//
#define LINE_LEN                    256 // Windows 9x-compatible maximum for
                                        // displayable strings coming from a
                                        // device INF.
#define MAX_INF_STRING_LENGTH      4096 // Actual maximum size of an INF string
                                        // (including string substitutions).
#define MAX_INF_SECTION_NAME_LENGTH 255 // For Windows 9x compatibility, INF
                                        // section names should be constrained
                                        // to 32 characters.

#define MAX_TITLE_LEN                60
#define MAX_INSTRUCTION_LEN         256
#define MAX_LABEL_LEN                30
#define MAX_SERVICE_NAME_LEN        256
#define MAX_SUBTITLE_LEN            256

//
// Define maximum length of a machine name in the format expected by ConfigMgr32
// CM_Connect_Machine (i.e., "\\\\MachineName\0").
//
#define SP_MAX_MACHINENAME_LENGTH   (MAX_PATH + 3)

//
// Define type for reference to loaded inf file
//
typedef PVOID HINF;

//
// Inf context structure. Applications must not interpret or
// overwrite values in these structures.
//
typedef struct _INFCONTEXT {
    PVOID Inf;
    PVOID CurrentInf;
    UINT Section;
    UINT Line;
} INFCONTEXT, *PINFCONTEXT;

//
// Inf file information structure.
//
typedef struct _SP_INF_INFORMATION {
    DWORD InfStyle;
    DWORD InfCount;
    BYTE VersionData[ANYSIZE_ARRAY];
} SP_INF_INFORMATION, *PSP_INF_INFORMATION;

//
// Define structure for passing alternate platform info into
// SetupSetFileQueueAlternatePlatform and SetupQueryInfOriginalFileInformation.
//
typedef struct _SP_ALTPLATFORM_INFO_V2 {
    DWORD cbSize;
    //
    // platform to use (VER_PLATFORM_WIN32_WINDOWS or VER_PLATFORM_WIN32_NT)
    //
    DWORD Platform;
    //
    // major and minor version numbers to use
    //
    DWORD MajorVersion;
    DWORD MinorVersion;
    //
    // processor architecture to use (PROCESSOR_ARCHITECTURE_INTEL,
    // PROCESSOR_ARCHITECTURE_AMD64, or PROCESSOR_ARCHITECTURE_IA64.
    //
    WORD  ProcessorArchitecture;

    union {
        WORD  Reserved; // for compatibility with V1 structure
        WORD  Flags;    // indicates validity of non V1 fields
    } DUMMYUNIONNAME;

    //
    // specify SP_ALTPLATFORM_FLAGS_VERSION_RANGE in Flags
    // to use FirstValidatedMajorVersion and FirstValidatedMinorVersion
    //
    // Major and minor versions of the oldest previous OS for which this
    // package's digital signature may be considered valid.  For example, say
    // the alternate platform is VER_PLATFORM_WIN32_NT, version 5.1.  However,
    // it is wished that driver packages signed with a 5.0 osattr also be
    // considered valid.  In this case, you'd have a  MajorVersion/MinorVersion
    // of 5.1, and a FirstValidatedMajorVersion/FirstValidatedMinorVersion of
    // 5.0.  To validate packages signed for any previous OS release, specify
    // 0 for these fields.  To only validate against the target alternate
    // platform, specify the same values as those in the MajorVersion and
    // MinorVersion fields.
    //
    DWORD FirstValidatedMajorVersion;
    DWORD FirstValidatedMinorVersion;

} SP_ALTPLATFORM_INFO_V2, *PSP_ALTPLATFORM_INFO_V2;

typedef struct _SP_ALTPLATFORM_INFO_V1 {
    DWORD cbSize;
    //
    // platform to use (VER_PLATFORM_WIN32_WINDOWS or VER_PLATFORM_WIN32_NT)
    //
    DWORD Platform;
    //
    // major and minor version numbers to use
    //
    DWORD MajorVersion;
    DWORD MinorVersion;
    //
    // processor architecture to use (PROCESSOR_ARCHITECTURE_INTEL,
    // PROCESSOR_ARCHITECTURE_AMD64, or PROCESSOR_ARCHITECTURE_IA64.
    //
    WORD  ProcessorArchitecture;

    WORD  Reserved; // must be zero.
} SP_ALTPLATFORM_INFO_V1, *PSP_ALTPLATFORM_INFO_V1;

#if USE_SP_ALTPLATFORM_INFO_V1 || (_SETUPAPI_VER < _WIN32_WINNT_WINXP) // use version 1 altplatform info data structure

typedef SP_ALTPLATFORM_INFO_V1 SP_ALTPLATFORM_INFO;
typedef PSP_ALTPLATFORM_INFO_V1 PSP_ALTPLATFORM_INFO;

#else                          // use version 2 altplatform info data structure

typedef SP_ALTPLATFORM_INFO_V2 SP_ALTPLATFORM_INFO;
typedef PSP_ALTPLATFORM_INFO_V2 PSP_ALTPLATFORM_INFO;

//
// the following flags are available to SP_ALTPLATFORM_INFO_V2
//
#define SP_ALTPLATFORM_FLAGS_VERSION_RANGE (0x0001)     // FirstValidatedMajor/MinorVersion

#endif  // use current version of altplatform info data structure


//
// Define structure that is filled in by SetupQueryInfOriginalFileInformation
// to indicate the INF's original name and the original name of the (potentially
// platform-specific) catalog file specified by that INF.
//
typedef struct _SP_ORIGINAL_FILE_INFO_A {
    DWORD  cbSize;
    CHAR   OriginalInfName[MAX_PATH];
    CHAR   OriginalCatalogName[MAX_PATH];
} SP_ORIGINAL_FILE_INFO_A, *PSP_ORIGINAL_FILE_INFO_A;

typedef struct _SP_ORIGINAL_FILE_INFO_W {
    DWORD  cbSize;
    WCHAR  OriginalInfName[MAX_PATH];
    WCHAR  OriginalCatalogName[MAX_PATH];
} SP_ORIGINAL_FILE_INFO_W, *PSP_ORIGINAL_FILE_INFO_W;

#ifdef UNICODE
typedef SP_ORIGINAL_FILE_INFO_W SP_ORIGINAL_FILE_INFO;
typedef PSP_ORIGINAL_FILE_INFO_W PSP_ORIGINAL_FILE_INFO;
#else
typedef SP_ORIGINAL_FILE_INFO_A SP_ORIGINAL_FILE_INFO;
typedef PSP_ORIGINAL_FILE_INFO_A PSP_ORIGINAL_FILE_INFO;
#endif

//
// SP_INF_INFORMATION.InfStyle values
//
#define INF_STYLE_NONE           0x00000000       // unrecognized or non-existent
#define INF_STYLE_OLDNT          0x00000001       // winnt 3.x
#define INF_STYLE_WIN4           0x00000002       // Win95

//
// Additional InfStyle flags that may be specified when calling SetupOpenInfFile.
//
//
#define INF_STYLE_CACHE_ENABLE   0x00000010 // always cache INF, even outside of %windir%\Inf
#define INF_STYLE_CACHE_DISABLE  0x00000020 // delete cached INF information
#if _SETUPAPI_VER >= _WIN32_WINNT_WS03
#define INF_STYLE_CACHE_IGNORE   0x00000040 // ignore any cached INF information
#endif


//
// Target directory specs.
//
#define DIRID_ABSOLUTE          -1              // real 32-bit -1
#define DIRID_ABSOLUTE_16BIT     0xffff         // 16-bit -1 for compat w/setupx
#define DIRID_NULL               0
#define DIRID_SRCPATH            1
#define DIRID_WINDOWS           10
#define DIRID_SYSTEM            11              // system32
#define DIRID_DRIVERS           12
#define DIRID_IOSUBSYS          DIRID_DRIVERS
#define DIRID_INF               17
#define DIRID_HELP              18
#define DIRID_FONTS             20
#define DIRID_VIEWERS           21
#define DIRID_COLOR             23
#define DIRID_APPS              24
#define DIRID_SHARED            25
#define DIRID_BOOT              30

#define DIRID_SYSTEM16          50
#define DIRID_SPOOL             51
#define DIRID_SPOOLDRIVERS      52
#define DIRID_USERPROFILE       53
#define DIRID_LOADER            54
#define DIRID_PRINTPROCESSOR    55

#define DIRID_DEFAULT           DIRID_SYSTEM

//
// The following DIRIDs are for commonly-used shell "special folders".  The
// complete list of such folders is contained in shlobj.h.  In that headerfile,
// each folder is assigned a CSIDL_* value.  The DIRID values below are created
// by taking the CSIDL value in shlobj.h and OR'ing it with 0x4000.  Thus, if
// an INF needs to reference other special folders not defined below, it may
// generate one using the above mechanism, and setupapi will automatically deal
// with it and use the corresponding shell's path where appropriate.  (Remember
// that DIRIDs must be specified in decimal, not hex, in an INF when used for
// string substitution.)
//
#define DIRID_COMMON_STARTMENU        16406  // All Users\Start Menu
#define DIRID_COMMON_PROGRAMS         16407  // All Users\Start Menu\Programs
#define DIRID_COMMON_STARTUP          16408  // All Users\Start Menu\Programs\Startup
#define DIRID_COMMON_DESKTOPDIRECTORY 16409  // All Users\Desktop
#define DIRID_COMMON_FAVORITES        16415  // All Users\Favorites
#define DIRID_COMMON_APPDATA          16419  // All Users\Application Data

#define DIRID_PROGRAM_FILES           16422  // Program Files
#define DIRID_SYSTEM_X86              16425  // system32 for WOW
#define DIRID_PROGRAM_FILES_X86       16426  // Program Files for WOW
#define DIRID_PROGRAM_FILES_COMMON    16427  // Program Files\Common
#define DIRID_PROGRAM_FILES_COMMONX86 16428  // x86 Program Files\Common for WOW

#define DIRID_COMMON_TEMPLATES        16429  // All Users\Templates
#define DIRID_COMMON_DOCUMENTS        16430  // All Users\Documents


//
// First user-definable dirid. See SetupSetDirectoryId().
//
#define DIRID_USER              0x8000


//
// Setup callback notification routine type
//
typedef UINT (CALLBACK* PSP_FILE_CALLBACK_A)(
    IN PVOID Context,
    IN UINT Notification,
    IN UINT_PTR Param1,
    IN UINT_PTR Param2
    );

typedef UINT (CALLBACK* PSP_FILE_CALLBACK_W)(
    IN PVOID Context,
    IN UINT Notification,
    IN UINT_PTR Param1,
    IN UINT_PTR Param2
    );

#ifdef UNICODE
#define PSP_FILE_CALLBACK PSP_FILE_CALLBACK_W
#else
#define PSP_FILE_CALLBACK PSP_FILE_CALLBACK_A
#endif


//
// Operation/queue start/end notification. These are ordinal values.
//
#define SPFILENOTIFY_STARTQUEUE         0x00000001
#define SPFILENOTIFY_ENDQUEUE           0x00000002
#define SPFILENOTIFY_STARTSUBQUEUE      0x00000003
#define SPFILENOTIFY_ENDSUBQUEUE        0x00000004
#define SPFILENOTIFY_STARTDELETE        0x00000005
#define SPFILENOTIFY_ENDDELETE          0x00000006
#define SPFILENOTIFY_DELETEERROR        0x00000007
#define SPFILENOTIFY_STARTRENAME        0x00000008
#define SPFILENOTIFY_ENDRENAME          0x00000009
#define SPFILENOTIFY_RENAMEERROR        0x0000000a
#define SPFILENOTIFY_STARTCOPY          0x0000000b
#define SPFILENOTIFY_ENDCOPY            0x0000000c
#define SPFILENOTIFY_COPYERROR          0x0000000d
#define SPFILENOTIFY_NEEDMEDIA          0x0000000e
#define SPFILENOTIFY_QUEUESCAN          0x0000000f
//
// These are used with SetupIterateCabinet().
//
#define SPFILENOTIFY_CABINETINFO        0x00000010
#define SPFILENOTIFY_FILEINCABINET      0x00000011
#define SPFILENOTIFY_NEEDNEWCABINET     0x00000012
#define SPFILENOTIFY_FILEEXTRACTED      0x00000013
#define SPFILENOTIFY_FILEOPDELAYED      0x00000014
//
// These are used for backup operations
//
#define SPFILENOTIFY_STARTBACKUP        0x00000015
#define SPFILENOTIFY_BACKUPERROR        0x00000016
#define SPFILENOTIFY_ENDBACKUP          0x00000017
//
// Extended notification for SetupScanFileQueue(Flags=SPQ_SCAN_USE_CALLBACKEX)
//
#define SPFILENOTIFY_QUEUESCAN_EX       0x00000018

#define SPFILENOTIFY_STARTREGISTRATION  0x00000019
#define SPFILENOTIFY_ENDREGISTRATION    0x00000020

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Extended notification for SetupScanFileQueue(Flags=SPQ_SCAN_USE_CALLBACK_SIGNERINFO)
//
#define SPFILENOTIFY_QUEUESCAN_SIGNERINFO 0x00000040

#endif

//
// Copy notification. These are bit flags that may be combined.
//
#define SPFILENOTIFY_LANGMISMATCH       0x00010000
#define SPFILENOTIFY_TARGETEXISTS       0x00020000
#define SPFILENOTIFY_TARGETNEWER        0x00040000

//
// File operation codes and callback outcomes.
//
#define FILEOP_COPY                     0
#define FILEOP_RENAME                   1
#define FILEOP_DELETE                   2
#define FILEOP_BACKUP                   3

#define FILEOP_ABORT                    0
#define FILEOP_DOIT                     1
#define FILEOP_SKIP                     2
#define FILEOP_RETRY                    FILEOP_DOIT
#define FILEOP_NEWPATH                  4

//
// Flags in inf copy sections
//
#define COPYFLG_WARN_IF_SKIP            0x00000001  // warn if user tries to skip file
#define COPYFLG_NOSKIP                  0x00000002  // disallow skipping this file
#define COPYFLG_NOVERSIONCHECK          0x00000004  // ignore versions and overwrite target
#define COPYFLG_FORCE_FILE_IN_USE       0x00000008  // force file-in-use behavior
#define COPYFLG_NO_OVERWRITE            0x00000010  // do not copy if file exists on target
#define COPYFLG_NO_VERSION_DIALOG       0x00000020  // do not copy if target is newer
#define COPYFLG_OVERWRITE_OLDER_ONLY    0x00000040  // leave target alone if version same as source
#define COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE 0x00000100    // a Windows driver file to be 
                            // protected as other Windows system files

#define COPYFLG_REPLACEONLY             0x00000400  // copy only if file exists on target
#define COPYFLG_NODECOMP                0x00000800  // don't attempt to decompress file; copy as-is
#define COPYFLG_REPLACE_BOOT_FILE       0x00001000  // file must be present upon reboot (i.e., it's
                                                    // needed by the loader); this flag implies a reboot
#define COPYFLG_NOPRUNE                 0x00002000  // never prune this file
#define COPYFLG_IN_USE_TRY_RENAME       0x00004000  // If file in use, try to rename the target first

//
// Flags in inf delete sections
// New flags go in high word
//
#define DELFLG_IN_USE                   0x00000001  // queue in-use file for delete
#define DELFLG_IN_USE1                  0x00010000  // high-word version of DELFLG_IN_USE

//
// Source and file paths. Used when notifying queue callback
// of SPFILENOTIFY_STARTxxx, SPFILENOTIFY_ENDxxx, and SPFILENOTIFY_xxxERROR.
//
typedef struct _FILEPATHS_A {
    PCSTR  Target;
    PCSTR  Source;  // not used for delete operations
    UINT   Win32Error;
    DWORD  Flags;   // such as SP_COPY_NOSKIP for copy errors
} FILEPATHS_A, *PFILEPATHS_A;

typedef struct _FILEPATHS_W {
    PCWSTR Target;
    PCWSTR Source;  // not used for delete operations
    UINT   Win32Error;
    DWORD  Flags;   // such as SP_COPY_NOSKIP for copy errors
} FILEPATHS_W, *PFILEPATHS_W;

#ifdef UNICODE
typedef FILEPATHS_W FILEPATHS;
typedef PFILEPATHS_W PFILEPATHS;
#else
typedef FILEPATHS_A FILEPATHS;
typedef PFILEPATHS_A PFILEPATHS;
#endif

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

typedef struct _FILEPATHS_SIGNERINFO_A {
    PCSTR  Target;
    PCSTR  Source;  // not used for delete operations
    UINT   Win32Error;
    DWORD  Flags;   // such as SP_COPY_NOSKIP for copy errors
    PCSTR  DigitalSigner;
    PCSTR  Version;
    PCSTR  CatalogFile;
} FILEPATHS_SIGNERINFO_A, *PFILEPATHS_SIGNERINFO_A;

typedef struct _FILEPATHS_SIGNERINFO_W {
    PCWSTR Target;
    PCWSTR Source;  // not used for delete operations
    UINT   Win32Error;
    DWORD  Flags;   // such as SP_COPY_NOSKIP for copy errors
    PCWSTR DigitalSigner;
    PCWSTR Version;
    PCWSTR CatalogFile;
} FILEPATHS_SIGNERINFO_W, *PFILEPATHS_SIGNERINFO_W;

#ifdef UNICODE
typedef FILEPATHS_SIGNERINFO_W FILEPATHS_SIGNERINFO;
typedef PFILEPATHS_SIGNERINFO_W PFILEPATHS_SIGNERINFO;
#else
typedef FILEPATHS_SIGNERINFO_A FILEPATHS_SIGNERINFO;
typedef PFILEPATHS_SIGNERINFO_A PFILEPATHS_SIGNERINFO;
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Structure used with SPFILENOTIFY_NEEDMEDIA
//
typedef struct _SOURCE_MEDIA_A {
    PCSTR Reserved;
    PCSTR Tagfile;          // may be NULL
    PCSTR Description;
    //
    // Pathname part and filename part of source file
    // that caused us to need the media.
    //
    PCSTR SourcePath;
    PCSTR SourceFile;
    DWORD Flags;            // subset of SP_COPY_xxx
} SOURCE_MEDIA_A, *PSOURCE_MEDIA_A;

typedef struct _SOURCE_MEDIA_W {
    PCWSTR Reserved;
    PCWSTR Tagfile;         // may be NULL
    PCWSTR Description;
    //
    // Pathname part and filename part of source file
    // that caused us to need the media.
    //
    PCWSTR SourcePath;
    PCWSTR SourceFile;
    DWORD  Flags;           // subset of SP_COPY_xxx
} SOURCE_MEDIA_W, *PSOURCE_MEDIA_W;

#ifdef UNICODE
typedef SOURCE_MEDIA_W SOURCE_MEDIA;
typedef PSOURCE_MEDIA_W PSOURCE_MEDIA;
#else
typedef SOURCE_MEDIA_A SOURCE_MEDIA;
typedef PSOURCE_MEDIA_A PSOURCE_MEDIA;
#endif

//
// Structure used with SPFILENOTIFY_CABINETINFO and
// SPFILENOTIFY_NEEDNEWCABINET
//
typedef struct _CABINET_INFO_A {
    PCSTR CabinetPath;
    PCSTR CabinetFile;
    PCSTR DiskName;
    USHORT SetId;
    USHORT CabinetNumber;
} CABINET_INFO_A, *PCABINET_INFO_A;

typedef struct _CABINET_INFO_W {
    PCWSTR CabinetPath;
    PCWSTR CabinetFile;
    PCWSTR DiskName;
    USHORT SetId;
    USHORT CabinetNumber;
} CABINET_INFO_W, *PCABINET_INFO_W;

#ifdef UNICODE
typedef CABINET_INFO_W CABINET_INFO;
typedef PCABINET_INFO_W PCABINET_INFO;
#else
typedef CABINET_INFO_A CABINET_INFO;
typedef PCABINET_INFO_A PCABINET_INFO;
#endif

//
// Structure used with SPFILENOTIFY_FILEINCABINET
//
typedef struct _FILE_IN_CABINET_INFO_A {
    PCSTR NameInCabinet;
    DWORD FileSize;
    DWORD Win32Error;
    WORD  DosDate;
    WORD  DosTime;
    WORD  DosAttribs;
    CHAR  FullTargetName[MAX_PATH];
} FILE_IN_CABINET_INFO_A, *PFILE_IN_CABINET_INFO_A;

typedef struct _FILE_IN_CABINET_INFO_W {
    PCWSTR NameInCabinet;
    DWORD  FileSize;
    DWORD  Win32Error;
    WORD   DosDate;
    WORD   DosTime;
    WORD   DosAttribs;
    WCHAR  FullTargetName[MAX_PATH];
} FILE_IN_CABINET_INFO_W, *PFILE_IN_CABINET_INFO_W;

#ifdef UNICODE
typedef FILE_IN_CABINET_INFO_W FILE_IN_CABINET_INFO;
typedef PFILE_IN_CABINET_INFO_W PFILE_IN_CABINET_INFO;
#else
typedef FILE_IN_CABINET_INFO_A FILE_IN_CABINET_INFO;
typedef PFILE_IN_CABINET_INFO_A PFILE_IN_CABINET_INFO;
#endif

//
// Structure used for SPFILENOTIFY_***REGISTRATION
// callback
//

typedef struct _SP_REGISTER_CONTROL_STATUSA {
    DWORD    cbSize;
    PCSTR    FileName;
    DWORD    Win32Error;
    DWORD    FailureCode;
} SP_REGISTER_CONTROL_STATUSA, *PSP_REGISTER_CONTROL_STATUSA;

typedef struct _SP_REGISTER_CONTROL_STATUSW {
    DWORD    cbSize;
    PCWSTR   FileName;
    DWORD    Win32Error;
    DWORD    FailureCode;
} SP_REGISTER_CONTROL_STATUSW, *PSP_REGISTER_CONTROL_STATUSW;

#ifdef UNICODE
typedef SP_REGISTER_CONTROL_STATUSW SP_REGISTER_CONTROL_STATUS;
typedef PSP_REGISTER_CONTROL_STATUSW PSP_REGISTER_CONTROL_STATUS;
#else
typedef SP_REGISTER_CONTROL_STATUSA SP_REGISTER_CONTROL_STATUS;
typedef PSP_REGISTER_CONTROL_STATUSA PSP_REGISTER_CONTROL_STATUS;
#endif


//
// valid values for SP_REGISTER_CONTROL_STATUS.FailureCode field
//

#define SPREG_SUCCESS   0x00000000
#define SPREG_LOADLIBRARY   0x00000001
#define SPREG_GETPROCADDR   0x00000002
#define SPREG_REGSVR        0x00000003
#define SPREG_DLLINSTALL    0x00000004
#define SPREG_TIMEOUT   0x00000005
#define SPREG_UNKNOWN   0xFFFFFFFF

//
// Define type for setup file queue
//
typedef PVOID HSPFILEQ;

//
// Structure used with SetupQueueCopyIndirect
//
typedef struct _SP_FILE_COPY_PARAMS_A {
    DWORD    cbSize;
    HSPFILEQ QueueHandle;
    PCSTR    SourceRootPath;     OPTIONAL
    PCSTR    SourcePath;         OPTIONAL
    PCSTR    SourceFilename;
    PCSTR    SourceDescription;  OPTIONAL
    PCSTR    SourceTagfile;      OPTIONAL
    PCSTR    TargetDirectory;
    PCSTR    TargetFilename;     OPTIONAL
    DWORD    CopyStyle;
    HINF     LayoutInf;          OPTIONAL
    PCSTR    SecurityDescriptor; OPTIONAL
} SP_FILE_COPY_PARAMS_A, *PSP_FILE_COPY_PARAMS_A;

typedef struct _SP_FILE_COPY_PARAMS_W {
    DWORD    cbSize;
    HSPFILEQ QueueHandle;
    PCWSTR   SourceRootPath;     OPTIONAL
    PCWSTR   SourcePath;         OPTIONAL
    PCWSTR   SourceFilename;
    PCWSTR   SourceDescription;  OPTIONAL
    PCWSTR   SourceTagfile;      OPTIONAL
    PCWSTR   TargetDirectory;
    PCWSTR   TargetFilename;     OPTIONAL
    DWORD    CopyStyle;
    HINF     LayoutInf;          OPTIONAL
    PCWSTR   SecurityDescriptor; OPTIONAL
} SP_FILE_COPY_PARAMS_W, *PSP_FILE_COPY_PARAMS_W;

#ifdef UNICODE
typedef SP_FILE_COPY_PARAMS_W SP_FILE_COPY_PARAMS;
typedef PSP_FILE_COPY_PARAMS_W PSP_FILE_COPY_PARAMS;
#else
typedef SP_FILE_COPY_PARAMS_A SP_FILE_COPY_PARAMS;
typedef PSP_FILE_COPY_PARAMS_A PSP_FILE_COPY_PARAMS;
#endif


//
// Define type for setup disk space list
//
typedef PVOID HDSKSPC;

//
// Define type for reference to device information set
//
typedef PVOID HDEVINFO;

//
// Device information structure (references a device instance
// that is a member of a device information set)
//
typedef struct _SP_DEVINFO_DATA {
    DWORD cbSize;
    GUID  ClassGuid;
    DWORD DevInst;    // DEVINST handle
    ULONG_PTR Reserved;
} SP_DEVINFO_DATA, *PSP_DEVINFO_DATA;

//
// Device interface information structure (references a device
// interface that is associated with the device information
// element that owns it).
//
typedef struct _SP_DEVICE_INTERFACE_DATA {
    DWORD cbSize;
    GUID  InterfaceClassGuid;
    DWORD Flags;
    ULONG_PTR Reserved;
} SP_DEVICE_INTERFACE_DATA, *PSP_DEVICE_INTERFACE_DATA;

//
// Flags for SP_DEVICE_INTERFACE_DATA.Flags field.
//
#define SPINT_ACTIVE  0x00000001
#define SPINT_DEFAULT 0x00000002
#define SPINT_REMOVED 0x00000004

//
// Backward compatibility--do not use.
//
typedef SP_DEVICE_INTERFACE_DATA  SP_INTERFACE_DEVICE_DATA;
typedef PSP_DEVICE_INTERFACE_DATA PSP_INTERFACE_DEVICE_DATA;
#define SPID_ACTIVE               SPINT_ACTIVE
#define SPID_DEFAULT              SPINT_DEFAULT
#define SPID_REMOVED              SPINT_REMOVED


typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A {
    DWORD  cbSize;
    CHAR   DevicePath[ANYSIZE_ARRAY];
} SP_DEVICE_INTERFACE_DETAIL_DATA_A, *PSP_DEVICE_INTERFACE_DETAIL_DATA_A;

typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W {
    DWORD  cbSize;
    WCHAR  DevicePath[ANYSIZE_ARRAY];
} SP_DEVICE_INTERFACE_DETAIL_DATA_W, *PSP_DEVICE_INTERFACE_DETAIL_DATA_W;

#ifdef UNICODE
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_W SP_DEVICE_INTERFACE_DETAIL_DATA;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_W PSP_DEVICE_INTERFACE_DETAIL_DATA;
#else
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_DEVICE_INTERFACE_DETAIL_DATA;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A PSP_DEVICE_INTERFACE_DETAIL_DATA;
#endif

//
// Backward compatibility--do not use.
//
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_W SP_INTERFACE_DEVICE_DETAIL_DATA_W;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_W PSP_INTERFACE_DEVICE_DETAIL_DATA_W;
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_INTERFACE_DEVICE_DETAIL_DATA_A;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A PSP_INTERFACE_DEVICE_DETAIL_DATA_A;
#ifdef UNICODE
typedef SP_INTERFACE_DEVICE_DETAIL_DATA_W SP_INTERFACE_DEVICE_DETAIL_DATA;
typedef PSP_INTERFACE_DEVICE_DETAIL_DATA_W PSP_INTERFACE_DEVICE_DETAIL_DATA;
#else
typedef SP_INTERFACE_DEVICE_DETAIL_DATA_A SP_INTERFACE_DEVICE_DETAIL_DATA;
typedef PSP_INTERFACE_DEVICE_DETAIL_DATA_A PSP_INTERFACE_DEVICE_DETAIL_DATA;
#endif


//
// Structure for detailed information on a device information set (used for
// SetupDiGetDeviceInfoListDetail which supercedes the functionality of
// SetupDiGetDeviceInfoListClass).
//
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_A {
    DWORD  cbSize;
    GUID   ClassGuid;
    HANDLE RemoteMachineHandle;
    CHAR   RemoteMachineName[SP_MAX_MACHINENAME_LENGTH];
} SP_DEVINFO_LIST_DETAIL_DATA_A, *PSP_DEVINFO_LIST_DETAIL_DATA_A;

typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_W {
    DWORD  cbSize;
    GUID   ClassGuid;
    HANDLE RemoteMachineHandle;
    WCHAR  RemoteMachineName[SP_MAX_MACHINENAME_LENGTH];
} SP_DEVINFO_LIST_DETAIL_DATA_W, *PSP_DEVINFO_LIST_DETAIL_DATA_W;

#ifdef UNICODE
typedef SP_DEVINFO_LIST_DETAIL_DATA_W SP_DEVINFO_LIST_DETAIL_DATA;
typedef PSP_DEVINFO_LIST_DETAIL_DATA_W PSP_DEVINFO_LIST_DETAIL_DATA;
#else
typedef SP_DEVINFO_LIST_DETAIL_DATA_A SP_DEVINFO_LIST_DETAIL_DATA;
typedef PSP_DEVINFO_LIST_DETAIL_DATA_A PSP_DEVINFO_LIST_DETAIL_DATA;
#endif

//
// Class installer function codes
//
#define DIF_SELECTDEVICE                    0x00000001
#define DIF_INSTALLDEVICE                   0x00000002
#define DIF_ASSIGNRESOURCES                 0x00000003
#define DIF_PROPERTIES                      0x00000004
#define DIF_REMOVE                          0x00000005
#define DIF_FIRSTTIMESETUP                  0x00000006
#define DIF_FOUNDDEVICE                     0x00000007
#define DIF_SELECTCLASSDRIVERS              0x00000008
#define DIF_VALIDATECLASSDRIVERS            0x00000009
#define DIF_INSTALLCLASSDRIVERS             0x0000000A
#define DIF_CALCDISKSPACE                   0x0000000B
#define DIF_DESTROYPRIVATEDATA              0x0000000C
#define DIF_VALIDATEDRIVER                  0x0000000D
#define DIF_DETECT                          0x0000000F
#define DIF_INSTALLWIZARD                   0x00000010
#define DIF_DESTROYWIZARDDATA               0x00000011
#define DIF_PROPERTYCHANGE                  0x00000012
#define DIF_ENABLECLASS                     0x00000013
#define DIF_DETECTVERIFY                    0x00000014
#define DIF_INSTALLDEVICEFILES              0x00000015
#define DIF_UNREMOVE                        0x00000016
#define DIF_SELECTBESTCOMPATDRV             0x00000017
#define DIF_ALLOW_INSTALL                   0x00000018
#define DIF_REGISTERDEVICE                  0x00000019
#define DIF_NEWDEVICEWIZARD_PRESELECT       0x0000001A
#define DIF_NEWDEVICEWIZARD_SELECT          0x0000001B
#define DIF_NEWDEVICEWIZARD_PREANALYZE      0x0000001C
#define DIF_NEWDEVICEWIZARD_POSTANALYZE     0x0000001D
#define DIF_NEWDEVICEWIZARD_FINISHINSTALL   0x0000001E
#define DIF_UNUSED1                         0x0000001F
#define DIF_INSTALLINTERFACES               0x00000020
#define DIF_DETECTCANCEL                    0x00000021
#define DIF_REGISTER_COINSTALLERS           0x00000022
#define DIF_ADDPROPERTYPAGE_ADVANCED        0x00000023
#define DIF_ADDPROPERTYPAGE_BASIC           0x00000024
#define DIF_RESERVED1                       0x00000025
#define DIF_TROUBLESHOOTER                  0x00000026
#define DIF_POWERMESSAGEWAKE                0x00000027
#define DIF_ADDREMOTEPROPERTYPAGE_ADVANCED  0x00000028
#define DIF_UPDATEDRIVER_UI                 0x00000029
#define DIF_FINISHINSTALL_ACTION            0x0000002A
#define DIF_RESERVED2                       0x00000030

//
// Obsoleted DIF codes (do not use)
//
#define DIF_MOVEDEVICE                      0x0000000E


typedef UINT        DI_FUNCTION;    // Function type for device installer


//
// Device installation parameters structure (associated with a
// particular device information element, or globally with a device
// information set)
//
typedef struct _SP_DEVINSTALL_PARAMS_A {
    DWORD             cbSize;
    DWORD             Flags;
    DWORD             FlagsEx;
    HWND              hwndParent;
    PSP_FILE_CALLBACK InstallMsgHandler;
    PVOID             InstallMsgHandlerContext;
    HSPFILEQ          FileQueue;
    ULONG_PTR         ClassInstallReserved;
    DWORD             Reserved;
    CHAR              DriverPath[MAX_PATH];
} SP_DEVINSTALL_PARAMS_A, *PSP_DEVINSTALL_PARAMS_A;

typedef struct _SP_DEVINSTALL_PARAMS_W {
    DWORD             cbSize;
    DWORD             Flags;
    DWORD             FlagsEx;
    HWND              hwndParent;
    PSP_FILE_CALLBACK InstallMsgHandler;
    PVOID             InstallMsgHandlerContext;
    HSPFILEQ          FileQueue;
    ULONG_PTR         ClassInstallReserved;
    DWORD             Reserved;
    WCHAR             DriverPath[MAX_PATH];
} SP_DEVINSTALL_PARAMS_W, *PSP_DEVINSTALL_PARAMS_W;

#ifdef UNICODE
typedef SP_DEVINSTALL_PARAMS_W SP_DEVINSTALL_PARAMS;
typedef PSP_DEVINSTALL_PARAMS_W PSP_DEVINSTALL_PARAMS;
#else
typedef SP_DEVINSTALL_PARAMS_A SP_DEVINSTALL_PARAMS;
typedef PSP_DEVINSTALL_PARAMS_A PSP_DEVINSTALL_PARAMS;
#endif


//
// SP_DEVINSTALL_PARAMS.Flags values
//
// Flags for choosing a device
//
#define DI_SHOWOEM                  0x00000001L     // support Other... button
#define DI_SHOWCOMPAT               0x00000002L     // show compatibility list
#define DI_SHOWCLASS                0x00000004L     // show class list
#define DI_SHOWALL                  0x00000007L     // both class & compat list shown
#define DI_NOVCP                    0x00000008L     // don't create a new copy queue--use
                                                    // caller-supplied FileQueue
#define DI_DIDCOMPAT                0x00000010L     // Searched for compatible devices
#define DI_DIDCLASS                 0x00000020L     // Searched for class devices
#define DI_AUTOASSIGNRES            0x00000040L     // No UI for resources if possible

// flags returned by DiInstallDevice to indicate need to reboot/restart
#define DI_NEEDRESTART              0x00000080L     // Reboot required to take effect
#define DI_NEEDREBOOT               0x00000100L     // ""

// flags for device installation
#define DI_NOBROWSE                 0x00000200L     // no Browse... in InsertDisk

// Flags set by DiBuildDriverInfoList
#define DI_MULTMFGS                 0x00000400L     // Set if multiple manufacturers in
                                                    // class driver list

// Flag indicates that device is disabled
#define DI_DISABLED                 0x00000800L     // Set if device disabled

// Flags for Device/Class Properties
#define DI_GENERALPAGE_ADDED        0x00001000L
#define DI_RESOURCEPAGE_ADDED       0x00002000L

// Flag to indicate the setting properties for this Device (or class) caused a change
// so the Dev Mgr UI probably needs to be updatd.
#define DI_PROPERTIES_CHANGE        0x00004000L

// Flag to indicate that the sorting from the INF file should be used.
#define DI_INF_IS_SORTED            0x00008000L

// Flag to indicate that only the the INF specified by SP_DEVINSTALL_PARAMS.DriverPath
// should be searched.
#define DI_ENUMSINGLEINF            0x00010000L

// Flag that prevents ConfigMgr from removing/re-enumerating devices during device
// registration, installation, and deletion.
#define DI_DONOTCALLCONFIGMG        0x00020000L

// The following flag can be used to install a device disabled
#define DI_INSTALLDISABLED          0x00040000L

// Flag that causes SetupDiBuildDriverInfoList to build a device's compatible driver
// list from its existing class driver list, instead of the normal INF search.
#define DI_COMPAT_FROM_CLASS        0x00080000L

// This flag is set if the Class Install params should be used.
#define DI_CLASSINSTALLPARAMS       0x00100000L

// This flag is set if the caller of DiCallClassInstaller does NOT
// want the internal default action performed if the Class installer
// returns ERROR_DI_DO_DEFAULT.
#define DI_NODI_DEFAULTACTION       0x00200000L

// The setupx flag, DI_NOSYNCPROCESSING (0x00400000L) is not support in the Setup APIs.

// flags for device installation
#define DI_QUIETINSTALL             0x00800000L     // don't confuse the user with
                                                    // questions or excess info
#define DI_NOFILECOPY               0x01000000L     // No file Copy necessary
#define DI_FORCECOPY                0x02000000L     // Force files to be copied from install path
#define DI_DRIVERPAGE_ADDED         0x04000000L     // Prop provider added Driver page.
#define DI_USECI_SELECTSTRINGS      0x08000000L     // Use Class Installer Provided strings in the Select Device Dlg
#define DI_OVERRIDE_INFFLAGS        0x10000000L     // Override INF flags
#define DI_PROPS_NOCHANGEUSAGE      0x20000000L     // No Enable/Disable in General Props

#define DI_NOSELECTICONS            0x40000000L     // No small icons in select device dialogs

#define DI_NOWRITE_IDS              0x80000000L     // Don't write HW & Compat IDs on install


//
// SP_DEVINSTALL_PARAMS.FlagsEx values
//

#define DI_FLAGSEX_RESERVED2                0x00000001L  // DI_FLAGSEX_USEOLDINFSEARCH is obsolete
#define DI_FLAGSEX_RESERVED3                0x00000002L  // DI_FLAGSEX_AUTOSELECTRANK0 is obsolete
#define DI_FLAGSEX_CI_FAILED                0x00000004L  // Failed to Load/Call class installer

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN //

#define DI_FLAGSEX_FINISHINSTALL_ACTION     0x00000008L  // Class/co-installer wants to get a DIF_FINISH_INSTALL action in client context.

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define DI_FLAGSEX_DIDINFOLIST              0x00000010L  // Did the Class Info List
#define DI_FLAGSEX_DIDCOMPATINFO            0x00000020L  // Did the Compat Info List

#define DI_FLAGSEX_FILTERCLASSES            0x00000040L
#define DI_FLAGSEX_SETFAILEDINSTALL         0x00000080L
#define DI_FLAGSEX_DEVICECHANGE             0x00000100L
#define DI_FLAGSEX_ALWAYSWRITEIDS           0x00000200L
#define DI_FLAGSEX_PROPCHANGE_PENDING       0x00000400L  // One or more device property sheets have had changes made
                                                         // to them, and need to have a DIF_PROPERTYCHANGE occur.
#define DI_FLAGSEX_ALLOWEXCLUDEDDRVS        0x00000800L
#define DI_FLAGSEX_NOUIONQUERYREMOVE        0x00001000L
#define DI_FLAGSEX_USECLASSFORCOMPAT        0x00002000L  // Use the device's class when building compat drv list.
                                                         // (Ignored if DI_COMPAT_FROM_CLASS flag is specified.)

#define DI_FLAGSEX_RESERVED4                0x00004000L  // DI_FLAGSEX_OLDINF_IN_CLASSLIST is obsolete

#define DI_FLAGSEX_NO_DRVREG_MODIFY         0x00008000L  // Don't run AddReg and DelReg for device's software (driver) key.
#define DI_FLAGSEX_IN_SYSTEM_SETUP          0x00010000L  // Installation is occurring during initial system setup.
#define DI_FLAGSEX_INET_DRIVER              0x00020000L  // Driver came from Windows Update
#define DI_FLAGSEX_APPENDDRIVERLIST         0x00040000L  // Cause SetupDiBuildDriverInfoList to append
                                                         // a new driver list to an existing list.
#define DI_FLAGSEX_PREINSTALLBACKUP         0x00080000L  // not used
#define DI_FLAGSEX_BACKUPONREPLACE          0x00100000L  // not used
#define DI_FLAGSEX_DRIVERLIST_FROM_URL      0x00200000L  // build driver list from INF(s) retrieved from URL specified
                                                         // in SP_DEVINSTALL_PARAMS.DriverPath (empty string means
                                                         // Windows Update website)
#define DI_FLAGSEX_RESERVED1                0x00400000L
#define DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS 0x00800000L  // Don't include old Internet drivers when building
                                                         // a driver list.
                                                         // Ignored on Windows Vista and later.
#define DI_FLAGSEX_POWERPAGE_ADDED          0x01000000L  // class installer added their own power page

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define DI_FLAGSEX_FILTERSIMILARDRIVERS     0x02000000L  // only include similar drivers in class list
#define DI_FLAGSEX_INSTALLEDDRIVER          0x04000000L  // only add the installed driver to the class or compat
                                                         // driver list.  Used in calls to SetupDiBuildDriverInfoList
#define DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE  0x08000000L  // Don't remove identical driver nodes from the class list
#define DI_FLAGSEX_ALTPLATFORM_DRVSEARCH    0x10000000L  // Build driver list based on alternate platform information
                                                         // specified in associated file queue
#define DI_FLAGSEX_RESTART_DEVICE_ONLY      0x20000000L  // only restart the device drivers are being installed on as
                                                         // opposed to restarting all devices using those drivers.

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define DI_FLAGSEX_RECURSIVESEARCH          0x40000000L  // Tell SetupDiBuildDriverInfoList to do a recursive search
#define DI_FLAGSEX_SEARCH_PUBLISHED_INFS    0x80000000L  // Tell SetupDiBuildDriverInfoList to do a "published INF" search

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

//
// Class installation parameters header.  This must be the first field of any
// class install parameter structure.  The InstallFunction field must be set to
// the function code corresponding to the structure, and the cbSize field must
// be set to the size of the header structure.  E.g.,
//
// SP_ENABLECLASS_PARAMS EnableClassParams;
//
// EnableClassParams.ClassInstallHeader.cbSize = sizeof(SP_CLASSINSTALL_HEADER);
// EnableClassParams.ClassInstallHeader.InstallFunction = DIF_ENABLECLASS;
//
typedef struct _SP_CLASSINSTALL_HEADER {
    DWORD       cbSize;
    DI_FUNCTION InstallFunction;
} SP_CLASSINSTALL_HEADER, *PSP_CLASSINSTALL_HEADER;


//
// Structure corresponding to a DIF_ENABLECLASS install function.
//
typedef struct _SP_ENABLECLASS_PARAMS {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    GUID                   ClassGuid;
    DWORD                  EnableMessage;
} SP_ENABLECLASS_PARAMS, *PSP_ENABLECLASS_PARAMS;

#define ENABLECLASS_QUERY   0
#define ENABLECLASS_SUCCESS 1
#define ENABLECLASS_FAILURE 2


//
// Values indicating a change in a device's state
//
#define DICS_ENABLE      0x00000001
#define DICS_DISABLE     0x00000002
#define DICS_PROPCHANGE  0x00000003
#define DICS_START       0x00000004
#define DICS_STOP        0x00000005
//
// Values specifying the scope of a device property change
//
#define DICS_FLAG_GLOBAL         0x00000001  // make change in all hardware profiles
#define DICS_FLAG_CONFIGSPECIFIC 0x00000002  // make change in specified profile only
#define DICS_FLAG_CONFIGGENERAL  0x00000004  // 1 or more hardware profile-specific
                                             // changes to follow.
//
// Structure corresponding to a DIF_PROPERTYCHANGE install function.
//
typedef struct _SP_PROPCHANGE_PARAMS {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    DWORD                  StateChange;
    DWORD                  Scope;
    DWORD                  HwProfile;
} SP_PROPCHANGE_PARAMS, *PSP_PROPCHANGE_PARAMS;


//
// Structure corresponding to a DIF_REMOVE install function.
//
typedef struct _SP_REMOVEDEVICE_PARAMS {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    DWORD Scope;
    DWORD HwProfile;
} SP_REMOVEDEVICE_PARAMS, *PSP_REMOVEDEVICE_PARAMS;

#define DI_REMOVEDEVICE_GLOBAL                  0x00000001
#define DI_REMOVEDEVICE_CONFIGSPECIFIC          0x00000002


//
// Structure corresponding to a DIF_UNREMOVE install function.
//
typedef struct _SP_UNREMOVEDEVICE_PARAMS {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    DWORD Scope;
    DWORD HwProfile;
} SP_UNREMOVEDEVICE_PARAMS, *PSP_UNREMOVEDEVICE_PARAMS;

#define DI_UNREMOVEDEVICE_CONFIGSPECIFIC        0x00000002


//
// Structure corresponding to a DIF_SELECTDEVICE install function.
//
typedef struct _SP_SELECTDEVICE_PARAMS_A {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    CHAR                   Title[MAX_TITLE_LEN];
    CHAR                   Instructions[MAX_INSTRUCTION_LEN];
    CHAR                   ListLabel[MAX_LABEL_LEN];
    CHAR                   SubTitle[MAX_SUBTITLE_LEN];
    BYTE                   Reserved[2];                  // DWORD size alignment
} SP_SELECTDEVICE_PARAMS_A, *PSP_SELECTDEVICE_PARAMS_A;

typedef struct _SP_SELECTDEVICE_PARAMS_W {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    WCHAR                  Title[MAX_TITLE_LEN];
    WCHAR                  Instructions[MAX_INSTRUCTION_LEN];
    WCHAR                  ListLabel[MAX_LABEL_LEN];
    WCHAR                  SubTitle[MAX_SUBTITLE_LEN];
} SP_SELECTDEVICE_PARAMS_W, *PSP_SELECTDEVICE_PARAMS_W;

#ifdef UNICODE
typedef SP_SELECTDEVICE_PARAMS_W SP_SELECTDEVICE_PARAMS;
typedef PSP_SELECTDEVICE_PARAMS_W PSP_SELECTDEVICE_PARAMS;
#else
typedef SP_SELECTDEVICE_PARAMS_A SP_SELECTDEVICE_PARAMS;
typedef PSP_SELECTDEVICE_PARAMS_A PSP_SELECTDEVICE_PARAMS;
#endif


//
// Callback routine for giving progress notification during detection
//
typedef BOOL (CALLBACK* PDETECT_PROGRESS_NOTIFY)(
     IN PVOID ProgressNotifyParam,
     IN DWORD DetectComplete
     );

// where:
//     ProgressNotifyParam - value supplied by caller requesting detection.
//     DetectComplete - Percent completion, to be incremented by class
//                      installer, as it steps thru its detection.
//
// Return Value - If TRUE, then detection is cancelled.  Allows caller
//                requesting detection to stop detection asap.
//

//
// Structure corresponding to a DIF_DETECT install function.
//
typedef struct _SP_DETECTDEVICE_PARAMS {
    SP_CLASSINSTALL_HEADER  ClassInstallHeader;
    PDETECT_PROGRESS_NOTIFY DetectProgressNotify;
    PVOID                   ProgressNotifyParam;
} SP_DETECTDEVICE_PARAMS, *PSP_DETECTDEVICE_PARAMS;


//
// 'Add New Device' installation wizard structure (backward-compatibility
// only--respond to DIF_NEWDEVICEWIZARD_* requests instead).
//
// Structure corresponding to a DIF_INSTALLWIZARD install function.
// (NOTE: This structure is also applicable for DIF_DESTROYWIZARDDATA,
// but DIF_INSTALLWIZARD is the associated function code in the class
// installation parameter structure in both cases.)
//
// Define maximum number of dynamic wizard pages that can be added to
// hardware install wizard.
//
#define MAX_INSTALLWIZARD_DYNAPAGES             20

typedef struct _SP_INSTALLWIZARD_DATA {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    DWORD                  Flags;
    HPROPSHEETPAGE         DynamicPages[MAX_INSTALLWIZARD_DYNAPAGES];
    DWORD                  NumDynamicPages;
    DWORD                  DynamicPageFlags;
    DWORD                  PrivateFlags;
    LPARAM                 PrivateData;
    HWND                   hwndWizardDlg;
} SP_INSTALLWIZARD_DATA, *PSP_INSTALLWIZARD_DATA;

//
// SP_INSTALLWIZARD_DATA.Flags values
//
#define NDW_INSTALLFLAG_DIDFACTDEFS         0x00000001
#define NDW_INSTALLFLAG_HARDWAREALLREADYIN  0x00000002
#define NDW_INSTALLFLAG_NEEDRESTART         DI_NEEDRESTART
#define NDW_INSTALLFLAG_NEEDREBOOT          DI_NEEDREBOOT
#define NDW_INSTALLFLAG_NEEDSHUTDOWN        0x00000200
#define NDW_INSTALLFLAG_EXPRESSINTRO        0x00000400
#define NDW_INSTALLFLAG_SKIPISDEVINSTALLED  0x00000800
#define NDW_INSTALLFLAG_NODETECTEDDEVS      0x00001000
#define NDW_INSTALLFLAG_INSTALLSPECIFIC     0x00002000
#define NDW_INSTALLFLAG_SKIPCLASSLIST       0x00004000
#define NDW_INSTALLFLAG_CI_PICKED_OEM       0x00008000
#define NDW_INSTALLFLAG_PCMCIAMODE          0x00010000
#define NDW_INSTALLFLAG_PCMCIADEVICE        0x00020000
#define NDW_INSTALLFLAG_USERCANCEL          0x00040000
#define NDW_INSTALLFLAG_KNOWNCLASS          0x00080000


//
// SP_INSTALLWIZARD_DATA.DynamicPageFlags values
//
// This flag is set if a Class installer has added pages to the install wizard.
//
#define DYNAWIZ_FLAG_PAGESADDED             0x00000001

//
// Set this flag if you jump to the analyze page, and want it to
// handle conflicts for you.  NOTE.  You will not get control back
// in the event of a conflict if you set this flag.
//
#define DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT 0x00000008

//
// The following flags are not used by the Windows NT hardware wizard.
//
#define DYNAWIZ_FLAG_INSTALLDET_NEXT        0x00000002
#define DYNAWIZ_FLAG_INSTALLDET_PREV        0x00000004


//
// Reserve a range of wizard page resource IDs for internal use.  Some of
// these IDs are for use by class installers that respond to the obsolete
// DIF_INSTALLWIZARD/DIF_DESTROYWIZARDDATA messages.  These IDs are listed
// below.
//
#define MIN_IDD_DYNAWIZ_RESOURCE_ID             10000
#define MAX_IDD_DYNAWIZ_RESOURCE_ID             11000

//
// Define wizard page resource IDs to be used when adding custom pages to the
// hardware install wizard via DIF_INSTALLWIZARD.  Pages marked with
// (CLASS INSTALLER PROVIDED) _must_ be supplied by the class installer if it
// responds to the DIF_INSTALLWIZARD request.
//

//
// Resource ID for the first page that the install wizard will go to after
// adding the class installer pages.  (CLASS INSTALLER PROVIDED)
//
#define IDD_DYNAWIZ_FIRSTPAGE                   10000

//
// Resource ID for the page that the Select Device page will go back to.
// (CLASS INSTALLER PROVIDED)
//
#define IDD_DYNAWIZ_SELECT_PREVPAGE             10001

//
// Resource ID for the page that the Select Device page will go forward to.
// (CLASS INSTALLER PROVIDED)
//
#define IDD_DYNAWIZ_SELECT_NEXTPAGE             10002

//
// Resource ID for the page that the Analyze dialog should go back to
// This will only be used in the event that there is a problem, and the user
// selects Back from the analyze proc. (CLASS INSTALLER PROVIDED)
//
#define IDD_DYNAWIZ_ANALYZE_PREVPAGE            10003

//
// Resource ID for the page that the Analyze dialog should go to if it
// continues from the analyze proc. (CLASS INSTALLER PROVIDED)
//
#define IDD_DYNAWIZ_ANALYZE_NEXTPAGE            10004

//
// Resource ID of the hardware install wizard's select device page.
// This ID can be used to go directly to the hardware install wizard's select
// device page.  (This is the resource ID of the Select Device wizard page
// retrieved via SetupDiGetWizardPage when SPWPT_SELECTDEVICE is the requested
// PageType.)
//
#define IDD_DYNAWIZ_SELECTDEV_PAGE              10009

//
// Resource ID of the hardware install wizard's device analysis page.
// This ID can be use to go directly to the hardware install wizard's analysis
// page.
//
#define IDD_DYNAWIZ_ANALYZEDEV_PAGE             10010

//
// Resource ID of the hardware install wizard's install detected devices page.
// This ID can be use to go directly to the hardware install wizard's install
// detected devices page.
//
#define IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE    10011

//
// Resource ID of the hardware install wizard's select class page.
// This ID can be use to go directly to the hardware install wizard's select
// class page.
//
#define IDD_DYNAWIZ_SELECTCLASS_PAGE            10012

//
// The following class installer-provided wizard page resource IDs are not used
// by the Windows NT hardware wizard.
//
#define IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE    10006
#define IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE    10007
#define IDD_DYNAWIZ_INSTALLDETECTED_NODEVS      10008


//
// Structure corresponding to the following DIF_NEWDEVICEWIZARD_* install
// functions:
//
//     DIF_NEWDEVICEWIZARD_PRESELECT
//     DIF_NEWDEVICEWIZARD_SELECT
//     DIF_NEWDEVICEWIZARD_PREANALYZE
//     DIF_NEWDEVICEWIZARD_POSTANALYZE
//     DIF_NEWDEVICEWIZARD_FINISHINSTALL
//
typedef struct _SP_NEWDEVICEWIZARD_DATA {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    DWORD                  Flags;   // presently unused--must be zero.
    HPROPSHEETPAGE         DynamicPages[MAX_INSTALLWIZARD_DYNAPAGES];
    DWORD                  NumDynamicPages;
    HWND                   hwndWizardDlg;
} SP_NEWDEVICEWIZARD_DATA, *PSP_NEWDEVICEWIZARD_DATA;

//
// The same structure is also used for retrieval of property pages via the
// following install functions:
//
//     DIF_ADDPROPERTYPAGE_ADVANCED
//     DIF_ADDPROPERTYPAGE_BASIC
//     DIF_ADDREMOTEPROPERTYPAGE_ADVANCED
//
typedef SP_NEWDEVICEWIZARD_DATA SP_ADDPROPERTYPAGE_DATA;
typedef PSP_NEWDEVICEWIZARD_DATA PSP_ADDPROPERTYPAGE_DATA;


//
// Structure corresponding to the DIF_TROUBLESHOOTER install function
//
typedef struct _SP_TROUBLESHOOTER_PARAMS_A {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    CHAR                   ChmFile[MAX_PATH];
    CHAR                   HtmlTroubleShooter[MAX_PATH];
} SP_TROUBLESHOOTER_PARAMS_A, *PSP_TROUBLESHOOTER_PARAMS_A;

typedef struct _SP_TROUBLESHOOTER_PARAMS_W {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    WCHAR                  ChmFile[MAX_PATH];
    WCHAR                  HtmlTroubleShooter[MAX_PATH];
} SP_TROUBLESHOOTER_PARAMS_W, *PSP_TROUBLESHOOTER_PARAMS_W;

#ifdef UNICODE
typedef SP_TROUBLESHOOTER_PARAMS_W SP_TROUBLESHOOTER_PARAMS;
typedef PSP_TROUBLESHOOTER_PARAMS_W PSP_TROUBLESHOOTER_PARAMS;
#else
typedef SP_TROUBLESHOOTER_PARAMS_A SP_TROUBLESHOOTER_PARAMS;
typedef PSP_TROUBLESHOOTER_PARAMS_A PSP_TROUBLESHOOTER_PARAMS;
#endif


//
// Structure corresponding to the DIF_POWERMESSAGEWAKE install function
//
typedef struct _SP_POWERMESSAGEWAKE_PARAMS_A {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    CHAR                   PowerMessageWake[LINE_LEN*2];
} SP_POWERMESSAGEWAKE_PARAMS_A, *PSP_POWERMESSAGEWAKE_PARAMS_A;

typedef struct _SP_POWERMESSAGEWAKE_PARAMS_W {
    SP_CLASSINSTALL_HEADER ClassInstallHeader;
    WCHAR                  PowerMessageWake[LINE_LEN*2];
} SP_POWERMESSAGEWAKE_PARAMS_W, *PSP_POWERMESSAGEWAKE_PARAMS_W;

#ifdef UNICODE
typedef SP_POWERMESSAGEWAKE_PARAMS_W SP_POWERMESSAGEWAKE_PARAMS;
typedef PSP_POWERMESSAGEWAKE_PARAMS_W PSP_POWERMESSAGEWAKE_PARAMS;
#else
typedef SP_POWERMESSAGEWAKE_PARAMS_A SP_POWERMESSAGEWAKE_PARAMS;
typedef PSP_POWERMESSAGEWAKE_PARAMS_A PSP_POWERMESSAGEWAKE_PARAMS;
#endif

//
// Driver information structure (member of a driver info list that may be associated
// with a particular device instance, or (globally) with a device information set)
//
typedef struct _SP_DRVINFO_DATA_V2_A {
    DWORD     cbSize;
    DWORD     DriverType;
    ULONG_PTR Reserved;
    CHAR      Description[LINE_LEN];
    CHAR      MfgName[LINE_LEN];
    CHAR      ProviderName[LINE_LEN];
    FILETIME  DriverDate;
    DWORDLONG DriverVersion;
} SP_DRVINFO_DATA_V2_A, *PSP_DRVINFO_DATA_V2_A;

typedef struct _SP_DRVINFO_DATA_V2_W {
    DWORD     cbSize;
    DWORD     DriverType;
    ULONG_PTR Reserved;
    WCHAR     Description[LINE_LEN];
    WCHAR     MfgName[LINE_LEN];
    WCHAR     ProviderName[LINE_LEN];
    FILETIME  DriverDate;
    DWORDLONG DriverVersion;
} SP_DRVINFO_DATA_V2_W, *PSP_DRVINFO_DATA_V2_W;

//
// Version 1 of the SP_DRVINFO_DATA structures, used only for compatibility
// with Windows NT 4.0/Windows 95/98 SETUPAPI.DLL
//
typedef struct _SP_DRVINFO_DATA_V1_A {
    DWORD     cbSize;
    DWORD     DriverType;
    ULONG_PTR Reserved;
    CHAR      Description[LINE_LEN];
    CHAR      MfgName[LINE_LEN];
    CHAR      ProviderName[LINE_LEN];
} SP_DRVINFO_DATA_V1_A, *PSP_DRVINFO_DATA_V1_A;

typedef struct _SP_DRVINFO_DATA_V1_W {
    DWORD     cbSize;
    DWORD     DriverType;
    ULONG_PTR Reserved;
    WCHAR     Description[LINE_LEN];
    WCHAR     MfgName[LINE_LEN];
    WCHAR     ProviderName[LINE_LEN];
} SP_DRVINFO_DATA_V1_W, *PSP_DRVINFO_DATA_V1_W;

#ifdef UNICODE
typedef SP_DRVINFO_DATA_V1_W SP_DRVINFO_DATA_V1;
typedef PSP_DRVINFO_DATA_V1_W PSP_DRVINFO_DATA_V1;
typedef SP_DRVINFO_DATA_V2_W SP_DRVINFO_DATA_V2;
typedef PSP_DRVINFO_DATA_V2_W PSP_DRVINFO_DATA_V2;
#else
typedef SP_DRVINFO_DATA_V1_A SP_DRVINFO_DATA_V1;
typedef PSP_DRVINFO_DATA_V1_A PSP_DRVINFO_DATA_V1;
typedef SP_DRVINFO_DATA_V2_A SP_DRVINFO_DATA_V2;
typedef PSP_DRVINFO_DATA_V2_A PSP_DRVINFO_DATA_V2;
#endif

#if USE_SP_DRVINFO_DATA_V1 || (_SETUPAPI_VER < _WIN32_WINNT_WIN2K)  // use version 1 driver info data structure

typedef SP_DRVINFO_DATA_V1_A SP_DRVINFO_DATA_A;
typedef PSP_DRVINFO_DATA_V1_A PSP_DRVINFO_DATA_A;
typedef SP_DRVINFO_DATA_V1_W SP_DRVINFO_DATA_W;
typedef PSP_DRVINFO_DATA_V1_W PSP_DRVINFO_DATA_W;
typedef SP_DRVINFO_DATA_V1 SP_DRVINFO_DATA;
typedef PSP_DRVINFO_DATA_V1 PSP_DRVINFO_DATA;

#else                       // use version 2 driver info data structure

typedef SP_DRVINFO_DATA_V2_A SP_DRVINFO_DATA_A;
typedef PSP_DRVINFO_DATA_V2_A PSP_DRVINFO_DATA_A;
typedef SP_DRVINFO_DATA_V2_W SP_DRVINFO_DATA_W;
typedef PSP_DRVINFO_DATA_V2_W PSP_DRVINFO_DATA_W;
typedef SP_DRVINFO_DATA_V2 SP_DRVINFO_DATA;
typedef PSP_DRVINFO_DATA_V2 PSP_DRVINFO_DATA;

#endif  // use current version of driver info data structure

//
// Driver information details structure (provides detailed information about a
// particular driver information structure)
//
typedef struct _SP_DRVINFO_DETAIL_DATA_A {
    DWORD    cbSize;
    FILETIME InfDate;
    DWORD    CompatIDsOffset;
    DWORD    CompatIDsLength;
    ULONG_PTR Reserved;
    CHAR     SectionName[LINE_LEN];
    CHAR     InfFileName[MAX_PATH];
    CHAR     DrvDescription[LINE_LEN];
    CHAR     HardwareID[ANYSIZE_ARRAY];
} SP_DRVINFO_DETAIL_DATA_A, *PSP_DRVINFO_DETAIL_DATA_A;

typedef struct _SP_DRVINFO_DETAIL_DATA_W {
    DWORD    cbSize;
    FILETIME InfDate;
    DWORD    CompatIDsOffset;
    DWORD    CompatIDsLength;
    ULONG_PTR Reserved;
    WCHAR    SectionName[LINE_LEN];
    WCHAR    InfFileName[MAX_PATH];
    WCHAR    DrvDescription[LINE_LEN];
    WCHAR    HardwareID[ANYSIZE_ARRAY];
} SP_DRVINFO_DETAIL_DATA_W, *PSP_DRVINFO_DETAIL_DATA_W;

#ifdef UNICODE
typedef SP_DRVINFO_DETAIL_DATA_W SP_DRVINFO_DETAIL_DATA;
typedef PSP_DRVINFO_DETAIL_DATA_W PSP_DRVINFO_DETAIL_DATA;
#else
typedef SP_DRVINFO_DETAIL_DATA_A SP_DRVINFO_DETAIL_DATA;
typedef PSP_DRVINFO_DETAIL_DATA_A PSP_DRVINFO_DETAIL_DATA;
#endif


//
// Driver installation parameters (associated with a particular driver
// information element)
//
typedef struct _SP_DRVINSTALL_PARAMS {
    DWORD cbSize;
    DWORD Rank;
    DWORD Flags;
    DWORD_PTR PrivateData;
    DWORD Reserved;
} SP_DRVINSTALL_PARAMS, *PSP_DRVINSTALL_PARAMS;

//
// SP_DRVINSTALL_PARAMS.Flags values
//

#define DNF_DUPDESC             0x00000001  // Multiple providers have same desc
#define DNF_OLDDRIVER           0x00000002  // Driver node specifies old/current driver
#define DNF_EXCLUDEFROMLIST     0x00000004  // If set, this driver node will not be
                                            // displayed in any driver select dialogs.
#define DNF_NODRIVER            0x00000008  // if we want to install no driver
                                            // (e.g no mouse drv)
#define DNF_LEGACYINF           0x00000010  // Driver node came from an old-style INF (obsolete)
#define DNF_CLASS_DRIVER        0x00000020  // Driver node represents a class driver
#define DNF_COMPATIBLE_DRIVER   0x00000040  // Driver node represents a compatible driver
#define DNF_INET_DRIVER         0x00000080  // Driver comes from an internet source
#define DNF_UNUSED1             0x00000100
#define DNF_UNUSED2             0x00000200
#define DNF_OLD_INET_DRIVER     0x00000400  // Driver came from the Internet, but we don't currently
                                            // have access to it's source files.  Never attempt to
                                            // install a driver with this flag!
                                            // Note used on Windows Vista and Later.
#define DNF_BAD_DRIVER          0x00000800  // Driver node should not be used at all
#define DNF_DUPPROVIDER         0x00001000  // Multiple drivers have the same provider and desc

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP
#define DNF_INF_IS_SIGNED         0x00002000  // If file is digitally signed
#define DNF_OEM_F6_INF            0x00004000  // INF specified from F6 during textmode setup.
#define DNF_DUPDRIVERVER          0x00008000  // Multipe drivers have the same desc, provider, and DriverVer values
#define DNF_BASIC_DRIVER          0x00010000  // Driver provides basic functionality, but should
                                              // not be chosen if other signed drivers exist.
#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_WS03
#define DNF_AUTHENTICODE_SIGNED   0x00020000  // Inf file is signed by an Authenticode(tm) catalog.
#endif // _SETUPAPI_VER >= _WIN32_WINNT_WS03

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN
#define DNF_INSTALLEDDRIVER       0x00040000  // This driver node is currently installed on the device.
#define DNF_ALWAYSEXCLUDEFROMLIST 0x00080000  // If set, this driver is not even displayed in 
                                              // alternative platform either.
#define DNF_INBOX_DRIVER          0x00100000  // This driver node came from an INF that shipped with Windows.
#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define DNF_UNUSED_21             0x00200000
#define DNF_UNUSED_22             0x00400000
#define DNF_UNUSED_23             0x00800000
#define DNF_UNUSED_24             0x01000000
#define DNF_UNUSED_25             0x02000000
#define DNF_UNUSED_26             0x04000000
#define DNF_UNUSED_27             0x08000000
#define DNF_UNUSED_28             0x10000000
#define DNF_UNUSED_29             0x20000000
#define DNF_UNUSED_30             0x40000000
#define DNF_UNUSED_31             0x80000000


//
// Rank values (the lower the Rank number, the better the Rank)
//
#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN
#define DRIVER_HARDWAREID_RANK  0x00000FFF  // Any rank less than or equal to
                                            // this value is a gold
                                            // HardwareID match

#define DRIVER_HARDWAREID_MASK  0x80000FFF  // If you mask these bits off (AND)
                                            // from the Rank and the result is 0
                                            // then the Rank is a trusted HardwareID
                                            // match

#define DRIVER_UNTRUSTED_RANK   0x80000000  // Any rank with this bit set is an
                                            // "untrusted" rank, meaning that
                                            // the INF was unsigned.

#define DRIVER_W9X_SUSPECT_RANK 0xC0000000  // Any rank that is greater than
                                            // or equal to this value, and lesser
                                            // than or equal to 0xFFFF is suspected
                                            // to be a Win9x-only driver, because
                                            // (a) it isn't signed, and (b) there
                                            // is no NT-specific decoration to
                                            // explicitly indicate that the INF
                                            // supports Windows NT/2000/XP

#else
#define DRIVER_HARDWAREID_RANK  0x00000FFF  // Any rank less than or equal to
                                            // this value is a trusted
                                            // HardwareID match

#define DRIVER_COMPATID_RANK    0x00003FFF  // Any rank less than or equal to
                                            // this (and greater than
                                            // DRIVER_HARDWAREID_RANK) is a
                                            // trusted CompatibleID match

#define DRIVER_UNTRUSTED_RANK   0x00008000  // Any rank with this bit set is an
                                            // "untrusted" rank, meaning that
                                            // the INF was unsigned.

#define DRIVER_UNTRUSTED_HARDWAREID_RANK  0x00008FFF  // Any rank less than or equal to
                                                      // this value (and greater than
                                                      // or equal to DRIVER_UNTRUSTED_RANK)
                                                      // is an untrusted HardwareID match

#define DRIVER_UNTRUSTED_COMPATID_RANK    0x0000BFFF  // Any rank less than or equal to
                                                      // this value (and greater than
                                                      // DRIVER_UNTRUSTED_HARDWAREID_RANK)
                                                      // is an untrusted CompatibleID match

#define DRIVER_W9X_SUSPECT_RANK            0x0000C000 // Any rank that is greater than
                                                      // or equal to this value, and lesser
                                                      // than or equal to 0xFFFF is suspected
                                                      // to be a Win9x-only driver, because
                                                      // (a) it isn't signed, and (b) there
                                                      // is no NT-specific decoration to
                                                      // explicitly indicate that the INF
                                                      // supports Windows NT/2000/XP

#define DRIVER_W9X_SUSPECT_HARDWAREID_RANK 0x0000CFFF // Any rank less than or equal to this
                                                      // (and greater than or equal to
                                                      // DRIVER_W9X_SUSPECT_RANK) is a
                                                      // hardware ID match suspected of being
                                                      // only for Windows 9x platforms.

#define DRIVER_W9X_SUSPECT_COMPATID_RANK   0x0000FFFF // Any rank less than or equal to
                                                      // this (and greater than
                                                      // DRIVER_W9X_SUSPECT_HARDWAREID_RANK)
                                                      // is a compatible ID match suspected
                                                      // of being only for Windows 9x
                                                      // platforms.
#endif // _SETUPAPI_VER < _WIN32_WINNT_LONGHORN

//
// Setup callback routine for comparing detection signatures
//
typedef DWORD (CALLBACK* PSP_DETSIG_CMPPROC)(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA NewDeviceData,
    IN PSP_DEVINFO_DATA ExistingDeviceData,
    IN PVOID            CompareContext      OPTIONAL
    );


//
// Define context structure handed to co-installers
//
typedef struct _COINSTALLER_CONTEXT_DATA {
    BOOL  PostProcessing;
    DWORD InstallResult;
    PVOID PrivateData;
} COINSTALLER_CONTEXT_DATA, *PCOINSTALLER_CONTEXT_DATA;


//
// Structure containing class image list information.
//
typedef struct _SP_CLASSIMAGELIST_DATA {
    DWORD      cbSize;
    HIMAGELIST ImageList;
    ULONG_PTR  Reserved;
} SP_CLASSIMAGELIST_DATA, *PSP_CLASSIMAGELIST_DATA;


//
// Structure to be passed as first parameter (LPVOID lpv) to ExtensionPropSheetPageProc
// entry point in setupapi.dll or to "EnumPropPages32" or "BasicProperties32" entry
// points provided by class/device property page providers.  Used to retrieve a handle
// (or, potentially, multiple handles) to property pages for a specified property page type.
//
typedef struct _SP_PROPSHEETPAGE_REQUEST {
    DWORD            cbSize;
    DWORD            PageRequested;
    HDEVINFO         DeviceInfoSet;
    PSP_DEVINFO_DATA DeviceInfoData;
} SP_PROPSHEETPAGE_REQUEST, *PSP_PROPSHEETPAGE_REQUEST;

//
// Property sheet codes used in SP_PROPSHEETPAGE_REQUEST.PageRequested
//
#define SPPSR_SELECT_DEVICE_RESOURCES      1    // supplied by setupapi.dll
#define SPPSR_ENUM_BASIC_DEVICE_PROPERTIES 2    // supplied by device's BasicProperties32 provider
#define SPPSR_ENUM_ADV_DEVICE_PROPERTIES   3    // supplied by class and/or device's EnumPropPages32 provider


//
// Structure used with SetupGetBackupInformation/SetupSetBackupInformation
//
typedef struct _SP_BACKUP_QUEUE_PARAMS_V2_A {
    DWORD    cbSize;                            // size of structure
    CHAR     FullInfPath[MAX_PATH];             // buffer to hold ANSI pathname of INF file
    INT      FilenameOffset;                    // offset in CHAR's of filename part (after '\')
    CHAR     ReinstallInstance[MAX_PATH];       // Instance ID (if present)
} SP_BACKUP_QUEUE_PARAMS_V2_A, *PSP_BACKUP_QUEUE_PARAMS_V2_A;

typedef struct _SP_BACKUP_QUEUE_PARAMS_V2_W {
    DWORD    cbSize;                            // size of structure
    WCHAR    FullInfPath[MAX_PATH];             // buffer to hold UNICODE pathname of INF file
    INT      FilenameOffset;                    // offset in WCHAR's of filename part (after '\')
    WCHAR    ReinstallInstance[MAX_PATH];       // Instance ID (if present)
} SP_BACKUP_QUEUE_PARAMS_V2_W, *PSP_BACKUP_QUEUE_PARAMS_V2_W;

//
// Version 1 of the SP_BACKUP_QUEUE_PARAMS structures, used only for compatibility
// with Windows 2000/Windows 95/98/ME SETUPAPI.DLL
//
typedef struct _SP_BACKUP_QUEUE_PARAMS_V1_A {
    DWORD    cbSize;                            // size of structure
    CHAR     FullInfPath[MAX_PATH];             // buffer to hold ANSI pathname of INF file
    INT      FilenameOffset;                    // offset in CHAR's of filename part (after '\')
} SP_BACKUP_QUEUE_PARAMS_V1_A, *PSP_BACKUP_QUEUE_PARAMS_V1_A;

typedef struct _SP_BACKUP_QUEUE_PARAMS_V1_W {
    DWORD    cbSize;                            // size of structure
    WCHAR    FullInfPath[MAX_PATH];             // buffer to hold UNICODE pathname of INF file
    INT      FilenameOffset;                    // offset in WCHAR's of filename part (after '\')
} SP_BACKUP_QUEUE_PARAMS_V1_W, *PSP_BACKUP_QUEUE_PARAMS_V1_W;

#ifdef UNICODE
typedef SP_BACKUP_QUEUE_PARAMS_V1_W SP_BACKUP_QUEUE_PARAMS_V1;
typedef PSP_BACKUP_QUEUE_PARAMS_V1_W PSP_BACKUP_QUEUE_PARAMS_V1;
typedef SP_BACKUP_QUEUE_PARAMS_V2_W SP_BACKUP_QUEUE_PARAMS_V2;
typedef PSP_BACKUP_QUEUE_PARAMS_V2_W PSP_BACKUP_QUEUE_PARAMS_V2;
#else
typedef SP_BACKUP_QUEUE_PARAMS_V1_A SP_BACKUP_QUEUE_PARAMS_V1;
typedef PSP_BACKUP_QUEUE_PARAMS_V1_A PSP_BACKUP_QUEUE_PARAMS_V1;
typedef SP_BACKUP_QUEUE_PARAMS_V2_A SP_BACKUP_QUEUE_PARAMS_V2;
typedef PSP_BACKUP_QUEUE_PARAMS_V2_A PSP_BACKUP_QUEUE_PARAMS_V2;
#endif


#if USE_SP_BACKUP_QUEUE_PARAMS_V1 || (_SETUPAPI_VER < _WIN32_WINNT_WINXP)  // use version 1 driver info data structure

typedef SP_BACKUP_QUEUE_PARAMS_V1_A SP_BACKUP_QUEUE_PARAMS_A;
typedef PSP_BACKUP_QUEUE_PARAMS_V1_A PSP_BACKUP_QUEUE_PARAMS_A;
typedef SP_BACKUP_QUEUE_PARAMS_V1_W SP_BACKUP_QUEUE_PARAMS_W;
typedef PSP_BACKUP_QUEUE_PARAMS_V1_W PSP_BACKUP_QUEUE_PARAMS_W;
typedef SP_BACKUP_QUEUE_PARAMS_V1 SP_BACKUP_QUEUE_PARAMS;
typedef PSP_BACKUP_QUEUE_PARAMS_V1 PSP_BACKUP_QUEUE_PARAMS;

#else                       // use version 2 driver info data structure

typedef SP_BACKUP_QUEUE_PARAMS_V2_A SP_BACKUP_QUEUE_PARAMS_A;
typedef PSP_BACKUP_QUEUE_PARAMS_V2_A PSP_BACKUP_QUEUE_PARAMS_A;
typedef SP_BACKUP_QUEUE_PARAMS_V2_W SP_BACKUP_QUEUE_PARAMS_W;
typedef PSP_BACKUP_QUEUE_PARAMS_V2_W PSP_BACKUP_QUEUE_PARAMS_W;
typedef SP_BACKUP_QUEUE_PARAMS_V2 SP_BACKUP_QUEUE_PARAMS;
typedef PSP_BACKUP_QUEUE_PARAMS_V2 PSP_BACKUP_QUEUE_PARAMS;

#endif  // use current version of driver info data structure








//
// Setupapi-specific error codes
//
// Inf parse outcomes
//
#define ERROR_EXPECTED_SECTION_NAME  (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0)
#define ERROR_BAD_SECTION_NAME_LINE  (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|1)
#define ERROR_SECTION_NAME_TOO_LONG  (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|2)
#define ERROR_GENERAL_SYNTAX         (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|3)
//
// Inf runtime errors
//
#define ERROR_WRONG_INF_STYLE        (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x100)
#define ERROR_SECTION_NOT_FOUND      (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x101)
#define ERROR_LINE_NOT_FOUND         (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x102)
#define ERROR_NO_BACKUP              (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x103)
//
// Device Installer/other errors
//
#define ERROR_NO_ASSOCIATED_CLASS                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x200)
#define ERROR_CLASS_MISMATCH                     (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x201)
#define ERROR_DUPLICATE_FOUND                    (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x202)
#define ERROR_NO_DRIVER_SELECTED                 (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x203)
#define ERROR_KEY_DOES_NOT_EXIST                 (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x204)
#define ERROR_INVALID_DEVINST_NAME               (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x205)
#define ERROR_INVALID_CLASS                      (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x206)
#define ERROR_DEVINST_ALREADY_EXISTS             (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x207)
#define ERROR_DEVINFO_NOT_REGISTERED             (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x208)
#define ERROR_INVALID_REG_PROPERTY               (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x209)
#define ERROR_NO_INF                             (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x20A)
#define ERROR_NO_SUCH_DEVINST                    (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x20B)
#define ERROR_CANT_LOAD_CLASS_ICON               (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x20C)
#define ERROR_INVALID_CLASS_INSTALLER            (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x20D)
#define ERROR_DI_DO_DEFAULT                      (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x20E)
#define ERROR_DI_NOFILECOPY                      (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x20F)
#define ERROR_INVALID_HWPROFILE                  (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x210)
#define ERROR_NO_DEVICE_SELECTED                 (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x211)
#define ERROR_DEVINFO_LIST_LOCKED                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x212)
#define ERROR_DEVINFO_DATA_LOCKED                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x213)
#define ERROR_DI_BAD_PATH                        (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x214)
#define ERROR_NO_CLASSINSTALL_PARAMS             (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x215)
#define ERROR_FILEQUEUE_LOCKED                   (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x216)
#define ERROR_BAD_SERVICE_INSTALLSECT            (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x217)
#define ERROR_NO_CLASS_DRIVER_LIST               (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x218)
#define ERROR_NO_ASSOCIATED_SERVICE              (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x219)
#define ERROR_NO_DEFAULT_DEVICE_INTERFACE        (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x21A)
#define ERROR_DEVICE_INTERFACE_ACTIVE            (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x21B)
#define ERROR_DEVICE_INTERFACE_REMOVED           (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x21C)
#define ERROR_BAD_INTERFACE_INSTALLSECT          (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x21D)
#define ERROR_NO_SUCH_INTERFACE_CLASS            (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x21E)
#define ERROR_INVALID_REFERENCE_STRING           (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x21F)
#define ERROR_INVALID_MACHINENAME                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x220)
#define ERROR_REMOTE_COMM_FAILURE                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x221)
#define ERROR_MACHINE_UNAVAILABLE                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x222)
#define ERROR_NO_CONFIGMGR_SERVICES              (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x223)
#define ERROR_INVALID_PROPPAGE_PROVIDER          (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x224)
#define ERROR_NO_SUCH_DEVICE_INTERFACE           (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x225)
#define ERROR_DI_POSTPROCESSING_REQUIRED         (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x226)
#define ERROR_INVALID_COINSTALLER                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x227)
#define ERROR_NO_COMPAT_DRIVERS                  (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x228)
#define ERROR_NO_DEVICE_ICON                     (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x229)
#define ERROR_INVALID_INF_LOGCONFIG              (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x22A)
#define ERROR_DI_DONT_INSTALL                    (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x22B)
#define ERROR_INVALID_FILTER_DRIVER              (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x22C)
#define ERROR_NON_WINDOWS_NT_DRIVER              (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x22D)
#define ERROR_NON_WINDOWS_DRIVER                 (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x22E)
#define ERROR_NO_CATALOG_FOR_OEM_INF             (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x22F)
#define ERROR_DEVINSTALL_QUEUE_NONNATIVE         (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x230)
#define ERROR_NOT_DISABLEABLE                    (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x231)
#define ERROR_CANT_REMOVE_DEVINST                (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x232)
#define ERROR_INVALID_TARGET                     (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x233)
#define ERROR_DRIVER_NONNATIVE                   (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x234)
#define ERROR_IN_WOW64                           (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x235)
#define ERROR_SET_SYSTEM_RESTORE_POINT           (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x236)

#define ERROR_SCE_DISABLED                       (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x238)
#define ERROR_UNKNOWN_EXCEPTION                  (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x239)
#define ERROR_PNP_REGISTRY_ERROR                 (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x23A)
#define ERROR_REMOTE_REQUEST_UNSUPPORTED         (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x23B)
#define ERROR_NOT_AN_INSTALLED_OEM_INF           (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x23C)
#define ERROR_INF_IN_USE_BY_DEVICES              (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x23D)
#define ERROR_DI_FUNCTION_OBSOLETE               (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x23E)
#define ERROR_NO_AUTHENTICODE_CATALOG            (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x23F)
#define ERROR_AUTHENTICODE_DISALLOWED            (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x240)
#define ERROR_AUTHENTICODE_TRUSTED_PUBLISHER     (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x241)
#define ERROR_AUTHENTICODE_TRUST_NOT_ESTABLISHED (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x242)
#define ERROR_AUTHENTICODE_PUBLISHER_NOT_TRUSTED (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x243)
#define ERROR_SIGNATURE_OSATTRIBUTE_MISMATCH     (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x244)
#define ERROR_ONLY_VALIDATE_VIA_AUTHENTICODE     (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x245)
#define ERROR_DEVICE_INSTALLER_NOT_READY         (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x246)
#define ERROR_DRIVER_STORE_ADD_FAILED            (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x247)
#define ERROR_DEVICE_INSTALL_BLOCKED             (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x248)
#define ERROR_DRIVER_INSTALL_BLOCKED             (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x249)
#define ERROR_WRONG_INF_TYPE                     (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x24A)
#define ERROR_FILE_HASH_NOT_IN_CATALOG           (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x24B)
#define ERROR_DRIVER_STORE_DELETE_FAILED         (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x24C)

//
// Setupapi exception codes
//
#define ERROR_UNRECOVERABLE_STACK_OVERFLOW (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x300)
#define EXCEPTION_SPAPI_UNRECOVERABLE_STACK_OVERFLOW ERROR_UNRECOVERABLE_STACK_OVERFLOW

//
// Backward compatibility--do not use.
//
#define ERROR_NO_DEFAULT_INTERFACE_DEVICE ERROR_NO_DEFAULT_DEVICE_INTERFACE
#define ERROR_INTERFACE_DEVICE_ACTIVE     ERROR_DEVICE_INTERFACE_ACTIVE
#define ERROR_INTERFACE_DEVICE_REMOVED    ERROR_DEVICE_INTERFACE_REMOVED
#define ERROR_NO_SUCH_INTERFACE_DEVICE    ERROR_NO_SUCH_DEVICE_INTERFACE


//
// Win9x migration DLL error code
//
#define ERROR_NOT_INSTALLED (APPLICATION_ERROR_MASK|ERROR_SEVERITY_ERROR|0x1000)


WINSETUPAPI
BOOL
WINAPI
SetupGetInfInformationA(
    __in LPCVOID InfSpec,
    __in DWORD SearchControl,
    __out_bcount_opt(ReturnBufferSize) PSP_INF_INFORMATION ReturnBuffer, 
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetInfInformationW(
    __in LPCVOID InfSpec,
    __in DWORD SearchControl,
    __out_bcount_opt(ReturnBufferSize) PSP_INF_INFORMATION ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

//
// SearchControl flags for SetupGetInfInformation
//
#define INFINFO_INF_SPEC_IS_HINF        1
#define INFINFO_INF_NAME_IS_ABSOLUTE    2
#define INFINFO_DEFAULT_SEARCH          3
#define INFINFO_REVERSE_DEFAULT_SEARCH  4
#define INFINFO_INF_PATH_LIST_SEARCH    5

#ifdef UNICODE
#define SetupGetInfInformation SetupGetInfInformationW
#else
#define SetupGetInfInformation SetupGetInfInformationA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueryInfFileInformationA(
    __in PSP_INF_INFORMATION InfInformation,
    __in UINT InfIndex,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize 
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueryInfFileInformationW(
    __in PSP_INF_INFORMATION InfInformation,
    __in UINT InfIndex,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupQueryInfFileInformation SetupQueryInfFileInformationW
#else
#define SetupQueryInfFileInformation SetupQueryInfFileInformationA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueryInfOriginalFileInformationA(
    __in PSP_INF_INFORMATION InfInformation,
    __in UINT InfIndex,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __out PSP_ORIGINAL_FILE_INFO_A OriginalFileInfo
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueryInfOriginalFileInformationW(
    __in PSP_INF_INFORMATION InfInformation,
    __in UINT InfIndex,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __out PSP_ORIGINAL_FILE_INFO_W OriginalFileInfo
    );

#ifdef UNICODE
#define SetupQueryInfOriginalFileInformation SetupQueryInfOriginalFileInformationW
#else
#define SetupQueryInfOriginalFileInformation SetupQueryInfOriginalFileInformationA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueryInfVersionInformationA(
    __in PSP_INF_INFORMATION InfInformation,
    __in UINT InfIndex,
    __in_opt PCSTR Key,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueryInfVersionInformationW(
    __in PSP_INF_INFORMATION InfInformation,
    __in UINT InfIndex,
    __in_opt PCWSTR Key,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupQueryInfVersionInformation SetupQueryInfVersionInformationW
#else
#define SetupQueryInfVersionInformation SetupQueryInfVersionInformationA
#endif


#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

WINSETUPAPI
BOOL
WINAPI
SetupGetInfDriverStoreLocationA(
    __in PCSTR FileName,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __in_opt PCSTR LocaleName,
    __out_ecount(ReturnBufferSize) PSTR ReturnBuffer, 
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetInfDriverStoreLocationW(
    __in PCWSTR FileName,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    
    __in_opt PCWSTR LocaleName,
    __out_ecount(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetInfDriverStoreLocation SetupGetInfDriverStoreLocationW
#else
#define SetupGetInfDriverStoreLocation SetupGetInfDriverStoreLocationA
#endif

WINSETUPAPI
BOOL
WINAPI
SetupGetInfPublishedNameA(
    __in PCSTR DriverStoreLocation,
    __out_ecount(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetInfPublishedNameW(
    __in PCWSTR DriverStoreLocation,
    __out_ecount(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetInfPublishedName SetupGetInfPublishedNameW
#else
#define SetupGetInfPublishedName SetupGetInfPublishedNameA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


WINSETUPAPI
BOOL
WINAPI
SetupGetInfFileListA(
    __in_opt PCSTR DirectoryPath,
    __in DWORD InfStyle,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer, 
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetInfFileListW(
    __in_opt PCWSTR DirectoryPath,
    __in DWORD InfStyle,
    __out_ecount(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetInfFileList SetupGetInfFileListW
#else
#define SetupGetInfFileList SetupGetInfFileListA
#endif


WINSETUPAPI
HINF
WINAPI
SetupOpenInfFileW(
    __in PCWSTR FileName,
    __in_opt PCWSTR InfClass,
    __in DWORD InfStyle,
    __out_opt PUINT ErrorLine
    );

WINSETUPAPI
HINF
WINAPI
SetupOpenInfFileA(
    __in PCSTR FileName,
    __in_opt PCSTR InfClass,
    __in DWORD InfStyle,
    __out_opt PUINT ErrorLine
    );

#ifdef UNICODE
#define SetupOpenInfFile SetupOpenInfFileW
#else
#define SetupOpenInfFile SetupOpenInfFileA
#endif


WINSETUPAPI
HINF
WINAPI
SetupOpenMasterInf(
    VOID
    );


WINSETUPAPI
BOOL
WINAPI
SetupOpenAppendInfFileW(
    __in_opt PCWSTR FileName,
    __in HINF InfHandle,
    __out_opt PUINT ErrorLine
    );

WINSETUPAPI
BOOL
WINAPI
SetupOpenAppendInfFileA(
    __in_opt PCSTR FileName,
    __in HINF InfHandle,
    __out_opt PUINT ErrorLine
    );

#ifdef UNICODE
#define SetupOpenAppendInfFile SetupOpenAppendInfFileW
#else
#define SetupOpenAppendInfFile SetupOpenAppendInfFileA
#endif


WINSETUPAPI
VOID
WINAPI
SetupCloseInfFile(
    __in HINF InfHandle
    );


WINSETUPAPI
BOOL
WINAPI
SetupFindFirstLineA(
    __in HINF InfHandle,
    __in PCSTR Section,
    __in_opt PCSTR Key,
    __out PINFCONTEXT Context
    );

WINSETUPAPI
BOOL
WINAPI
SetupFindFirstLineW(
    __in HINF InfHandle,
    __in PCWSTR Section,
    __in_opt PCWSTR Key,
    __out PINFCONTEXT Context
    );

#ifdef UNICODE
#define SetupFindFirstLine SetupFindFirstLineW
#else
#define SetupFindFirstLine SetupFindFirstLineA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupFindNextLine(
    __in PINFCONTEXT ContextIn,
    __out PINFCONTEXT ContextOut
    );


WINSETUPAPI
BOOL
WINAPI
SetupFindNextMatchLineA(
    __in PINFCONTEXT ContextIn,
    __in_opt PCSTR Key,
    __out PINFCONTEXT ContextOut
    );

WINSETUPAPI
BOOL
WINAPI
SetupFindNextMatchLineW(
    __in PINFCONTEXT ContextIn,
    __in_opt PCWSTR Key,
    __out PINFCONTEXT ContextOut
    );

#ifdef UNICODE
#define SetupFindNextMatchLine SetupFindNextMatchLineW
#else
#define SetupFindNextMatchLine SetupFindNextMatchLineA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupGetLineByIndexA(
    __in HINF InfHandle,
    __in PCSTR Section,
    __in DWORD Index,
    __out PINFCONTEXT Context
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetLineByIndexW(
    __in HINF InfHandle,
    __in PCWSTR Section,
    __in DWORD Index,
    __out PINFCONTEXT Context
    );

#ifdef UNICODE
#define SetupGetLineByIndex SetupGetLineByIndexW
#else
#define SetupGetLineByIndex SetupGetLineByIndexA
#endif


WINSETUPAPI
LONG
WINAPI
SetupGetLineCountA(
    __in HINF InfHandle,
    __in PCSTR Section
    );

WINSETUPAPI
LONG
WINAPI
SetupGetLineCountW(
    __in HINF InfHandle,
    __in PCWSTR Section
    );

#ifdef UNICODE
#define SetupGetLineCount SetupGetLineCountW
#else
#define SetupGetLineCount SetupGetLineCountA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupGetLineTextA(
    __in_opt PINFCONTEXT Context,
    __in_opt HINF InfHandle,
    __in_opt PCSTR Section,
    __in_opt PCSTR Key,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetLineTextW(
    __in_opt PINFCONTEXT Context,
    __in_opt HINF InfHandle,
    __in_opt PCWSTR Section,
    __in_opt PCWSTR Key,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetLineText SetupGetLineTextW
#else
#define SetupGetLineText SetupGetLineTextA
#endif


WINSETUPAPI
DWORD
WINAPI
SetupGetFieldCount(
    __in PINFCONTEXT Context
    );


WINSETUPAPI
BOOL
WINAPI
SetupGetStringFieldA(
    __in PINFCONTEXT Context,
    __in DWORD FieldIndex,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetStringFieldW(
    __in PINFCONTEXT Context,
    __in DWORD FieldIndex,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetStringField SetupGetStringFieldW
#else
#define SetupGetStringField SetupGetStringFieldA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupGetIntField(
    __in PINFCONTEXT Context,
    __in DWORD FieldIndex,
    __out PINT IntegerValue
    );


WINSETUPAPI
BOOL
WINAPI
SetupGetMultiSzFieldA(
    __in PINFCONTEXT Context,
    __in DWORD FieldIndex,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt LPDWORD RequiredSize 
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetMultiSzFieldW(
    __in PINFCONTEXT Context,
    __in DWORD FieldIndex,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt LPDWORD RequiredSize 
    );

#ifdef UNICODE
#define SetupGetMultiSzField SetupGetMultiSzFieldW
#else
#define SetupGetMultiSzField SetupGetMultiSzFieldA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupGetBinaryField(
    __in PINFCONTEXT Context,
    __in DWORD FieldIndex,
    __out_bcount_opt(ReturnBufferSize) PBYTE ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt LPDWORD RequiredSize 
    );

//
// SetupGetFileCompressionInfo is depreciated
// use SetupGetFileCompressionInfoEx instead
//
// ActualSourceFileName returned by SetupGetFileCompressionInfo
// must be freed by the export setupapi!MyFree (NT4+ Win95+)
// or LocalFree (Win2k+)
//
WINSETUPAPI
DWORD
WINAPI
SetupGetFileCompressionInfoA(
    __in PCSTR SourceFileName,
    __out PSTR *ActualSourceFileName,
    __out PDWORD SourceFileSize,
    __out PDWORD TargetFileSize,
    __out PUINT CompressionType
    );

WINSETUPAPI
DWORD
WINAPI
SetupGetFileCompressionInfoW(
    __in PCWSTR SourceFileName,
    __out PWSTR *ActualSourceFileName,
    __out PDWORD SourceFileSize,
    __out PDWORD TargetFileSize,
    __out PUINT CompressionType
    );

#ifdef UNICODE
#define SetupGetFileCompressionInfo SetupGetFileCompressionInfoW
#else
#define SetupGetFileCompressionInfo SetupGetFileCompressionInfoA
#endif

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// SetupGetFileCompressionInfoEx is the preferred API over
// SetupGetFileCompressionInfo. It follows the normal
// conventions of returning BOOL and writing to user-supplied
// buffer.
//

WINSETUPAPI
BOOL
WINAPI
SetupGetFileCompressionInfoExA(
    __in PCSTR SourceFileName,
    __in_ecount_opt(ActualSourceFileNameBufferLen) PSTR ActualSourceFileNameBuffer,
    __in DWORD ActualSourceFileNameBufferLen,
    __out_opt PDWORD RequiredBufferLen, 
    __out PDWORD SourceFileSize,
    __out PDWORD TargetFileSize,
    __out PUINT CompressionType
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetFileCompressionInfoExW(
    __in PCWSTR SourceFileName,
    __in_ecount_opt(ActualSourceFileNameBufferLen) PWSTR ActualSourceFileNameBuffer,
    __in DWORD ActualSourceFileNameBufferLen,
    __out_opt PDWORD RequiredBufferLen,
    __out PDWORD SourceFileSize,
    __out PDWORD TargetFileSize,
    __out PUINT CompressionType
    );

#ifdef UNICODE
#define SetupGetFileCompressionInfoEx SetupGetFileCompressionInfoExW
#else
#define SetupGetFileCompressionInfoEx SetupGetFileCompressionInfoExA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Compression types
//
#define FILE_COMPRESSION_NONE       0
#define FILE_COMPRESSION_WINLZA     1
#define FILE_COMPRESSION_MSZIP      2
#define FILE_COMPRESSION_NTCAB      3


WINSETUPAPI
DWORD
WINAPI
SetupDecompressOrCopyFileA(
    __in PCSTR SourceFileName,
    __in PCSTR TargetFileName,
    __in_opt PUINT CompressionType
    );

WINSETUPAPI
DWORD
WINAPI
SetupDecompressOrCopyFileW(
    __in PCWSTR SourceFileName,
    __in PCWSTR TargetFileName,
    __in_opt PUINT CompressionType
    );

#ifdef UNICODE
#define SetupDecompressOrCopyFile SetupDecompressOrCopyFileW
#else
#define SetupDecompressOrCopyFile SetupDecompressOrCopyFileA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupGetSourceFileLocationA(
    __in HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCSTR FileName,
    __out PUINT SourceId,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetSourceFileLocationW(
    __in HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCWSTR FileName,
    __out PUINT SourceId,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetSourceFileLocation SetupGetSourceFileLocationW
#else
#define SetupGetSourceFileLocation SetupGetSourceFileLocationA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupGetSourceFileSizeA(
    __in HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCSTR FileName,
    __in_opt PCSTR Section,
    __out PDWORD FileSize,
    __in UINT RoundingFactor
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetSourceFileSizeW(
    __in HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCWSTR FileName,
    __in_opt PCWSTR Section,
    __out PDWORD FileSize,
    __in UINT RoundingFactor
    );

#ifdef UNICODE
#define SetupGetSourceFileSize SetupGetSourceFileSizeW
#else
#define SetupGetSourceFileSize SetupGetSourceFileSizeA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupGetTargetPathA(
    __in HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCSTR Section,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetTargetPathW(
    __in HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCWSTR Section,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetTargetPath SetupGetTargetPathW
#else
#define SetupGetTargetPath SetupGetTargetPathA
#endif


//
// Define flags for SourceList APIs.
//
#define SRCLIST_TEMPORARY       0x00000001
#define SRCLIST_NOBROWSE        0x00000002
#define SRCLIST_SYSTEM          0x00000010
#define SRCLIST_USER            0x00000020
#define SRCLIST_SYSIFADMIN      0x00000040
#define SRCLIST_SUBDIRS         0x00000100
#define SRCLIST_APPEND          0x00000200
#define SRCLIST_NOSTRIPPLATFORM 0x00000400


WINSETUPAPI
BOOL
WINAPI
SetupSetSourceListA(
    __in DWORD Flags,
    __in_ecount(SourceCount) PCSTR *SourceList,
    __in UINT SourceCount
    );

WINSETUPAPI
BOOL
WINAPI
SetupSetSourceListW(
    __in DWORD Flags,
    __in_ecount(SourceCount) PCWSTR *SourceList,
    __in UINT SourceCount
    );

#ifdef UNICODE
#define SetupSetSourceList SetupSetSourceListW
#else
#define SetupSetSourceList SetupSetSourceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupCancelTemporarySourceList(
    VOID
    );


WINSETUPAPI
BOOL
WINAPI
SetupAddToSourceListA(
    __in DWORD Flags,
    __in PCSTR Source
    );

WINSETUPAPI
BOOL
WINAPI
SetupAddToSourceListW(
    __in DWORD Flags,
    __in PCWSTR Source
    );

#ifdef UNICODE
#define SetupAddToSourceList SetupAddToSourceListW
#else
#define SetupAddToSourceList SetupAddToSourceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupRemoveFromSourceListA(
    __in DWORD Flags,
    __in PCSTR Source
    );

WINSETUPAPI
BOOL
WINAPI
SetupRemoveFromSourceListW(
    __in DWORD Flags,
    __in PCWSTR Source
    );

#ifdef UNICODE
#define SetupRemoveFromSourceList SetupRemoveFromSourceListW
#else
#define SetupRemoveFromSourceList SetupRemoveFromSourceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQuerySourceListA(
    __in DWORD Flags,
    __deref_out_ecount(*Count) PCSTR **List,
    __out PUINT Count
    );

WINSETUPAPI
BOOL
WINAPI
SetupQuerySourceListW(
    __in DWORD Flags,
    __deref_out_ecount(*Count) PCWSTR **List,
    __out PUINT Count
    );

#ifdef UNICODE
#define SetupQuerySourceList SetupQuerySourceListW
#else
#define SetupQuerySourceList SetupQuerySourceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupFreeSourceListA(
    __deref_inout_ecount(Count) PCSTR **List,
    __in UINT Count
    );

WINSETUPAPI
BOOL
WINAPI
SetupFreeSourceListW(
    __deref_inout_ecount(Count) PCWSTR **List,
    __in UINT Count
    );

#ifdef UNICODE
#define SetupFreeSourceList SetupFreeSourceListW
#else
#define SetupFreeSourceList SetupFreeSourceListA
#endif


WINSETUPAPI
UINT
WINAPI
SetupPromptForDiskA(
    __in HWND hwndParent,
    __in_opt PCSTR DialogTitle,
    __in_opt PCSTR DiskName,
    __in_opt PCSTR PathToSource,
    __in PCSTR FileSought,
    __in_opt PCSTR TagFile,
    __in DWORD DiskPromptStyle,
    __out_ecount_opt(PathBufferSize) PSTR PathBuffer,
    __in DWORD PathBufferSize,
    __out_opt PDWORD PathRequiredSize
    );

WINSETUPAPI
UINT
WINAPI
SetupPromptForDiskW(
    __in HWND hwndParent,
    __in_opt PCWSTR DialogTitle,
    __in_opt PCWSTR DiskName,
    __in_opt PCWSTR PathToSource,
    __in PCWSTR FileSought,
    __in_opt PCWSTR TagFile,
    __in DWORD DiskPromptStyle,
    __out_ecount_opt(PathBufferSize) PWSTR PathBuffer,
    __in DWORD PathBufferSize,
    __out_opt PDWORD PathRequiredSize
    );

#ifdef UNICODE
#define SetupPromptForDisk SetupPromptForDiskW
#else
#define SetupPromptForDisk SetupPromptForDiskA
#endif


WINSETUPAPI
UINT
WINAPI
SetupCopyErrorA(
    __in HWND hwndParent,
    __in_opt PCSTR DialogTitle,
    __in_opt PCSTR DiskName,
    __in PCSTR PathToSource,
    __in PCSTR SourceFile,
    __in_opt PCSTR TargetPathFile,
    __in UINT Win32ErrorCode,
    __in DWORD Style,
    __out_ecount_opt(PathBufferSize) PSTR PathBuffer,
    __in DWORD PathBufferSize,
    __out_opt PDWORD PathRequiredSize
    );

WINSETUPAPI
UINT
WINAPI
SetupCopyErrorW(
    __in HWND hwndParent,
    __in_opt PCWSTR DialogTitle,
    __in_opt PCWSTR DiskName,
    __in PCWSTR PathToSource,
    __in PCWSTR SourceFile,
    __in_opt PCWSTR TargetPathFile,
    __in UINT Win32ErrorCode,
    __in DWORD Style,
    __out_ecount_opt(PathBufferSize) PWSTR PathBuffer,
    __in DWORD PathBufferSize,
    __out_opt PDWORD PathRequiredSize
    );

#ifdef UNICODE
#define SetupCopyError SetupCopyErrorW
#else
#define SetupCopyError SetupCopyErrorA
#endif


WINSETUPAPI
UINT
WINAPI
SetupRenameErrorA(
    __in HWND hwndParent,
    __in_opt PCSTR DialogTitle,
    __in PCSTR SourceFile,
    __in PCSTR TargetFile,
    __in UINT Win32ErrorCode,
    __in DWORD Style
    );

WINSETUPAPI
UINT
WINAPI
SetupRenameErrorW(
    __in HWND hwndParent,
    __in_opt PCWSTR DialogTitle,
    __in PCWSTR SourceFile,
    __in PCWSTR TargetFile,
    __in UINT Win32ErrorCode,
    __in DWORD Style
    );

#ifdef UNICODE
#define SetupRenameError SetupRenameErrorW
#else
#define SetupRenameError SetupRenameErrorA
#endif


WINSETUPAPI
UINT
WINAPI
SetupDeleteErrorA(
    __in HWND hwndParent,
    __in_opt PCSTR DialogTitle,
    __in PCSTR File,
    __in UINT Win32ErrorCode,
    __in DWORD Style
    );

WINSETUPAPI
UINT
WINAPI
SetupDeleteErrorW(
    __in HWND hwndParent,
    __in_opt PCWSTR DialogTitle,
    __in PCWSTR File,
    __in UINT Win32ErrorCode,
    __in DWORD Style
    );

#ifdef UNICODE
#define SetupDeleteError SetupDeleteErrorW
#else
#define SetupDeleteError SetupDeleteErrorA
#endif

WINSETUPAPI
UINT
WINAPI
SetupBackupErrorA(
    __in HWND hwndParent,
    __in_opt PCSTR DialogTitle,
    __in PCSTR SourceFile,
    __in_opt PCSTR TargetFile,
    __in UINT Win32ErrorCode,
    __in DWORD Style
    );

WINSETUPAPI
UINT
WINAPI
SetupBackupErrorW(
    __in HWND hwndParent,
    __in_opt PCWSTR DialogTitle,
    __in PCWSTR SourceFile,
    __in_opt PCWSTR TargetFile,
    __in UINT Win32ErrorCode,
    __in DWORD Style
    );

#ifdef UNICODE
#define SetupBackupError SetupBackupErrorW
#else
#define SetupBackupError SetupBackupErrorA
#endif


//
// Styles for SetupPromptForDisk, SetupCopyError,
// SetupRenameError, SetupDeleteError
//
#define IDF_NOBROWSE                    0x00000001
#define IDF_NOSKIP                      0x00000002
#define IDF_NODETAILS                   0x00000004
#define IDF_NOCOMPRESSED                0x00000008
#define IDF_CHECKFIRST                  0x00000100
#define IDF_NOBEEP                      0x00000200
#define IDF_NOFOREGROUND                0x00000400
#define IDF_WARNIFSKIP                  0x00000800

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define IDF_NOREMOVABLEMEDIAPROMPT      0x00001000
#define IDF_USEDISKNAMEASPROMPT         0x00002000
#define IDF_OEMDISK                     0x80000000

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Return values for SetupPromptForDisk, SetupCopyError,
// SetupRenameError, SetupDeleteError, SetupBackupError
//
#define DPROMPT_SUCCESS         0
#define DPROMPT_CANCEL          1
#define DPROMPT_SKIPFILE        2
#define DPROMPT_BUFFERTOOSMALL  3
#define DPROMPT_OUTOFMEMORY     4


WINSETUPAPI
BOOL
WINAPI
SetupSetDirectoryIdA(
    __in HINF InfHandle,
    __in DWORD Id, 
    __in_opt PCSTR Directory 
    );

WINSETUPAPI
BOOL
WINAPI
SetupSetDirectoryIdW(
    __in HINF InfHandle,
    __in DWORD Id, 
    __in_opt PCWSTR Directory 
    );

#ifdef UNICODE
#define SetupSetDirectoryId SetupSetDirectoryIdW
#else
#define SetupSetDirectoryId SetupSetDirectoryIdA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupSetDirectoryIdExA(
    __in HINF InfHandle,
    __in DWORD Id, 
    __in_opt PCSTR Directory, 
    __in DWORD Flags,
    __reserved DWORD Reserved1,
    __reserved PVOID Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupSetDirectoryIdExW(
    __in HINF InfHandle,
    __in DWORD Id, 
    __in_opt PCWSTR Directory,
    __in DWORD Flags,
    __reserved DWORD Reserved1,
    __reserved PVOID Reserved2
    );

#ifdef UNICODE
#define SetupSetDirectoryIdEx SetupSetDirectoryIdExW
#else
#define SetupSetDirectoryIdEx SetupSetDirectoryIdExA
#endif

//
// Flags for SetupSetDirectoryIdEx
//
#define SETDIRID_NOT_FULL_PATH      0x00000001


WINSETUPAPI
BOOL
WINAPI
SetupGetSourceInfoA(
    __in HINF InfHandle,
    __in UINT SourceId,
    __in UINT InfoDesired,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetSourceInfoW(
    __in HINF InfHandle,
    __in UINT SourceId,
    __in UINT InfoDesired,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupGetSourceInfo SetupGetSourceInfoW
#else
#define SetupGetSourceInfo SetupGetSourceInfoA
#endif

//
// InfoDesired values for SetupGetSourceInfo
//

#define SRCINFO_PATH            1
#define SRCINFO_TAGFILE         2
#define SRCINFO_DESCRIPTION     3
#define SRCINFO_FLAGS           4

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP
//
// SRC_FLAGS allow special treatment of source
// lower 4 bits are reserved for OS use
// the flags may determine what other parameters exist
//
#define SRCINFO_TAGFILE2        5  // alternate tagfile, when SRCINFO_TAGFILE is a cabfile

#define SRC_FLAGS_CABFILE       (0x0010) // if set, treat SRCINFO_TAGFILE as a cabfile and specify alternate tagfile

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

WINSETUPAPI
BOOL
WINAPI
SetupInstallFileA(
    __in_opt HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCSTR SourceFile,
    __in_opt PCSTR SourcePathRoot,
    __in_opt PCSTR DestinationName,
    __in DWORD CopyStyle,
    __in_opt PSP_FILE_CALLBACK_A CopyMsgHandler,
    __in_opt PVOID Context
    );

WINSETUPAPI
BOOL
WINAPI
SetupInstallFileW(
    __in_opt HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCWSTR SourceFile,
    __in_opt PCWSTR SourcePathRoot,
    __in_opt PCWSTR DestinationName,
    __in DWORD CopyStyle,
    __in_opt PSP_FILE_CALLBACK_W CopyMsgHandler,
    __in_opt PVOID Context
    );

#ifdef UNICODE
#define SetupInstallFile SetupInstallFileW
#else
#define SetupInstallFile SetupInstallFileA
#endif

WINSETUPAPI
BOOL
WINAPI
SetupInstallFileExA(
    __in_opt HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCSTR SourceFile,
    __in_opt PCSTR SourcePathRoot,
    __in_opt PCSTR DestinationName,
    __in DWORD CopyStyle,
    __in_opt PSP_FILE_CALLBACK_A CopyMsgHandler,
    __in_opt PVOID Context,
    __out PBOOL FileWasInUse
    );

WINSETUPAPI
BOOL
WINAPI
SetupInstallFileExW(
    __in_opt HINF InfHandle,
    __in_opt PINFCONTEXT InfContext,
    __in_opt PCWSTR SourceFile,
    __in_opt PCWSTR SourcePathRoot,
    __in_opt PCWSTR DestinationName,
    __in DWORD CopyStyle,
    __in_opt PSP_FILE_CALLBACK_W CopyMsgHandler,
    __in_opt PVOID Context,
    __out PBOOL FileWasInUse
    );

#ifdef UNICODE
#define SetupInstallFileEx SetupInstallFileExW
#else
#define SetupInstallFileEx SetupInstallFileExA
#endif

//
// CopyStyle values for copy and queue-related APIs
//
#define SP_COPY_DELETESOURCE        0x0000001   // delete source file on successful copy
#define SP_COPY_REPLACEONLY         0x0000002   // copy only if target file already present
#define SP_COPY_NEWER               0x0000004   // copy only if source newer than or same as target
#define SP_COPY_NEWER_OR_SAME       SP_COPY_NEWER
#define SP_COPY_NOOVERWRITE         0x0000008   // copy only if target doesn't exist
#define SP_COPY_NODECOMP            0x0000010   // don't decompress source file while copying
#define SP_COPY_LANGUAGEAWARE       0x0000020   // don't overwrite file of different language
#define SP_COPY_SOURCE_ABSOLUTE     0x0000040   // SourceFile is a full source path
#define SP_COPY_SOURCEPATH_ABSOLUTE 0x0000080   // SourcePathRoot is the full path
#define SP_COPY_IN_USE_NEEDS_REBOOT 0x0000100   // System needs reboot if file in use
#define SP_COPY_FORCE_IN_USE        0x0000200   // Force target-in-use behavior
#define SP_COPY_NOSKIP              0x0000400   // Skip is disallowed for this file or section
#define SP_FLAG_CABINETCONTINUATION 0x0000800   // Used with need media notification
#define SP_COPY_FORCE_NOOVERWRITE   0x0001000   // like NOOVERWRITE but no callback nofitication
#define SP_COPY_FORCE_NEWER         0x0002000   // like NEWER but no callback nofitication
#define SP_COPY_WARNIFSKIP          0x0004000   // system critical file: warn if user tries to skip
#define SP_COPY_NOBROWSE            0x0008000   // Browsing is disallowed for this file or section
#define SP_COPY_NEWER_ONLY          0x0010000   // copy only if source file newer than target
#define SP_COPY_RESERVED            0x0020000   // was: SP_COPY_SOURCE_SIS_MASTER (deprecated)
#define SP_COPY_OEMINF_CATALOG_ONLY 0x0040000   // (SetupCopyOEMInf only) don't copy INF--just catalog
#define SP_COPY_REPLACE_BOOT_FILE   0x0080000   // file must be present upon reboot (i.e., it's
                                                // needed by the loader); this flag implies a reboot
#define SP_COPY_NOPRUNE             0x0100000   // never prune this file

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define SP_COPY_OEM_F6_INF          0x0200000   // Used when calling SetupCopyOemInf

#endif //_SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define SP_COPY_ALREADYDECOMP       0x0400000   // similar to SP_COPY_NODECOMP

#endif //_SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define SP_COPY_WINDOWS_SIGNED      0x1000000   // BuildLab or WinSE signed
#define SP_COPY_PNPLOCKED           0x2000000   // Used with the signature flag
#define SP_COPY_IN_USE_TRY_RENAME   0x4000000   // If file in use, try to rename the target first
#define SP_COPY_INBOX_INF           0x8000000   // Referred by CopyFiles of inbox inf

#endif //_SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Flags passed to Backup notification
//
#define SP_BACKUP_BACKUPPASS        0x00000001  // file backed up during backup pass
#define SP_BACKUP_DEMANDPASS        0x00000002  // file backed up on demand
#define SP_BACKUP_SPECIAL           0x00000004  // if set, special type of backup
#define SP_BACKUP_BOOTFILE          0x00000008  // file marked with COPYFLG_REPLACE_BOOT_FILE


#endif //_SETUPAPI_VER >= _WIN32_WINNT_WINXP


WINSETUPAPI
HSPFILEQ
WINAPI
SetupOpenFileQueue(
    VOID
    );

WINSETUPAPI
BOOL
WINAPI
SetupCloseFileQueue(
    __in HSPFILEQ QueueHandle
    );

WINSETUPAPI
BOOL
WINAPI
SetupSetFileQueueAlternatePlatformA(
    __in HSPFILEQ QueueHandle,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __in_opt PCSTR AlternateDefaultCatalogFile
    );

WINSETUPAPI
BOOL
WINAPI
SetupSetFileQueueAlternatePlatformW(
    __in HSPFILEQ QueueHandle,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __in_opt PCWSTR AlternateDefaultCatalogFile
    );

#ifdef UNICODE
#define SetupSetFileQueueAlternatePlatform SetupSetFileQueueAlternatePlatformW
#else
#define SetupSetFileQueueAlternatePlatform SetupSetFileQueueAlternatePlatformA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupSetPlatformPathOverrideA(
    __in_opt PCSTR Override
    );

WINSETUPAPI
BOOL
WINAPI
SetupSetPlatformPathOverrideW(
    __in_opt PCWSTR Override
    );

#ifdef UNICODE
#define SetupSetPlatformPathOverride SetupSetPlatformPathOverrideW
#else
#define SetupSetPlatformPathOverride SetupSetPlatformPathOverrideA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueCopyA(
    __in HSPFILEQ QueueHandle,
    __in_opt PCSTR SourceRootPath, 
    __in_opt PCSTR SourcePath, 
    __in PCSTR SourceFilename,
    __in_opt PCSTR SourceDescription, 
    __in_opt PCSTR SourceTagfile, 
    __in PCSTR TargetDirectory,
    __in_opt PCSTR TargetFilename, 
    __in DWORD CopyStyle
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueCopyW(
    __in HSPFILEQ QueueHandle,
    __in_opt PCWSTR SourceRootPath, 
    __in_opt PCWSTR SourcePath, 
    __in PCWSTR SourceFilename,
    __in_opt PCWSTR SourceDescription, 
    __in_opt PCWSTR SourceTagfile, 
    __in PCWSTR TargetDirectory,
    __in_opt PCWSTR TargetFilename, 
    __in DWORD CopyStyle
    );

#ifdef UNICODE
#define SetupQueueCopy SetupQueueCopyW
#else
#define SetupQueueCopy SetupQueueCopyA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueCopyIndirectA(
    __in PSP_FILE_COPY_PARAMS_A CopyParams
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueCopyIndirectW(
    __in PSP_FILE_COPY_PARAMS_W CopyParams
    );

#ifdef UNICODE
#define SetupQueueCopyIndirect SetupQueueCopyIndirectW
#else
#define SetupQueueCopyIndirect SetupQueueCopyIndirectA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueDefaultCopyA(
    __in HSPFILEQ QueueHandle,
    __in HINF InfHandle,
    __in_opt PCSTR SourceRootPath,
    __in PCSTR SourceFilename,
    __in_opt PCSTR TargetFilename,
    __in DWORD CopyStyle
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueDefaultCopyW(
    __in HSPFILEQ QueueHandle,
    __in HINF InfHandle,
    __in_opt PCWSTR SourceRootPath,
    __in PCWSTR SourceFilename,
    __in_opt PCWSTR TargetFilename,
    __in DWORD CopyStyle
    );

#ifdef UNICODE
#define SetupQueueDefaultCopy SetupQueueDefaultCopyW
#else
#define SetupQueueDefaultCopy SetupQueueDefaultCopyA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueCopySectionA(
    __in HSPFILEQ QueueHandle,
    __in_opt PCSTR SourceRootPath,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCSTR Section,
    __in DWORD CopyStyle
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueCopySectionW(
    __in HSPFILEQ QueueHandle,
    __in_opt PCWSTR SourceRootPath,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCWSTR Section,
    __in DWORD CopyStyle
    );

#ifdef UNICODE
#define SetupQueueCopySection SetupQueueCopySectionW
#else
#define SetupQueueCopySection SetupQueueCopySectionA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueDeleteA(
    __in HSPFILEQ QueueHandle,
    __in PCSTR PathPart1,
    __in_opt PCSTR PathPart2
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueDeleteW(
    __in HSPFILEQ QueueHandle,
    __in PCWSTR PathPart1,
    __in_opt PCWSTR PathPart2
    );

#ifdef UNICODE
#define SetupQueueDelete SetupQueueDeleteW
#else
#define SetupQueueDelete SetupQueueDeleteA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueDeleteSectionA(
    __in HSPFILEQ QueueHandle,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCSTR Section
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueDeleteSectionW(
    __in HSPFILEQ QueueHandle,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCWSTR Section
    );

#ifdef UNICODE
#define SetupQueueDeleteSection SetupQueueDeleteSectionW
#else
#define SetupQueueDeleteSection SetupQueueDeleteSectionA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueRenameA(
    __in HSPFILEQ QueueHandle,
    __in PCSTR SourcePath,
    __in_opt PCSTR SourceFilename,
    __in_opt PCSTR TargetPath,
    __in PCSTR TargetFilename
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueRenameW(
    __in HSPFILEQ QueueHandle,
    __in PCWSTR SourcePath,
    __in_opt PCWSTR SourceFilename, 
    __in_opt PCWSTR TargetPath,
    __in PCWSTR TargetFilename
    );

#ifdef UNICODE
#define SetupQueueRename SetupQueueRenameW
#else
#define SetupQueueRename SetupQueueRenameA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQueueRenameSectionA(
    __in HSPFILEQ QueueHandle,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCSTR Section
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueueRenameSectionW(
    __in HSPFILEQ QueueHandle,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCWSTR Section
    );

#ifdef UNICODE
#define SetupQueueRenameSection SetupQueueRenameSectionW
#else
#define SetupQueueRenameSection SetupQueueRenameSectionA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupCommitFileQueueA(
    __in_opt HWND Owner,
    __in HSPFILEQ QueueHandle,
    __in PSP_FILE_CALLBACK_A MsgHandler,
    __in PVOID Context
    );

WINSETUPAPI
BOOL
WINAPI
SetupCommitFileQueueW(
    __in_opt HWND Owner,
    __in HSPFILEQ QueueHandle,
    __in PSP_FILE_CALLBACK_W MsgHandler,
    __in PVOID Context
    );

#ifdef UNICODE
#define SetupCommitFileQueue SetupCommitFileQueueW
#else
#define SetupCommitFileQueue SetupCommitFileQueueA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupScanFileQueueA(
    __in HSPFILEQ FileQueue,
    __in DWORD Flags,
    __in_opt HWND Window,
    __in_opt PSP_FILE_CALLBACK_A CallbackRoutine,
    __in_opt PVOID CallbackContext,
    __out PDWORD Result
    );

WINSETUPAPI
BOOL
WINAPI
SetupScanFileQueueW(
    __in HSPFILEQ FileQueue,
    __in DWORD Flags,
    __in_opt HWND Window,
    __in_opt PSP_FILE_CALLBACK_W CallbackRoutine,
    __in_opt PVOID CallbackContext,
    __out PDWORD Result
    );

#ifdef UNICODE
#define SetupScanFileQueue SetupScanFileQueueW
#else
#define SetupScanFileQueue SetupScanFileQueueA
#endif

//
// Define flags for SetupScanFileQueue.
//
#define SPQ_SCAN_FILE_PRESENCE                  0x00000001
#define SPQ_SCAN_FILE_VALIDITY                  0x00000002
#define SPQ_SCAN_USE_CALLBACK                   0x00000004
#define SPQ_SCAN_USE_CALLBACKEX                 0x00000008
#define SPQ_SCAN_INFORM_USER                    0x00000010
#define SPQ_SCAN_PRUNE_COPY_QUEUE               0x00000020

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define SPQ_SCAN_USE_CALLBACK_SIGNERINFO        0x00000040
#define SPQ_SCAN_PRUNE_DELREN                   0x00000080 // remote Delete/Rename queue

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP


#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE   0x00000100
#define SPQ_SCAN_FILE_COMPARISON                0x00000200
#define SPQ_SCAN_ACTIVATE_DRP                   0x00000400

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


//
// Define flags used with Param2 for SPFILENOTIFY_QUEUESCAN
//
#define SPQ_DELAYED_COPY                        0x00000001  // file was in use; registered for delayed copy

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

WINSETUPAPI
BOOL
WINAPI
SetupGetFileQueueCount(
    __in HSPFILEQ FileQueue,
    __in UINT SubQueueFileOp,
    __out PUINT NumOperations
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetFileQueueFlags(
    __in HSPFILEQ FileQueue,
    __out PDWORD Flags
    );

WINSETUPAPI
BOOL
WINAPI
SetupSetFileQueueFlags(
    __in HSPFILEQ FileQueue,
    __in DWORD FlagMask,
    __in DWORD Flags
    );

//
// Flags/FlagMask for use with SetupSetFileQueueFlags and returned by SetupGetFileQueueFlags
//
#define SPQ_FLAG_BACKUP_AWARE      0x00000001  // If set, SetupCommitFileQueue will
                                               // issue backup notifications.

#define SPQ_FLAG_ABORT_IF_UNSIGNED 0x00000002  // If set, SetupCommitFileQueue will
                                               // fail with ERROR_SET_SYSTEM_RESTORE_POINT
                                               // if the user elects to proceed with an
                                               // unsigned queue committal.  This allows
                                               // the caller to set a system restore point,
                                               // then re-commit the file queue.

#define SPQ_FLAG_FILES_MODIFIED    0x00000004  // If set, at least one file was
                                               // replaced by a different version

#define SPQ_FLAG_DO_SHUFFLEMOVE    0x00000008  // If set then always do a shuffle move. A shuffle 
                                               // move will first try to copy the source over the
                                               // destination file, but if the destination file is
                                               // in use it will rename the destination file to a 
                                               // temp name and queue the temp name for deletion.
                                               // It will then be free to copy the source to the 
                                               // destination name.  It is considered an error if
                                               // the destination file can't be renamed for some
                                               // reason.

#define SPQ_FLAG_VALID             0x0000000F  // mask of valid flags (can be passed as FlagMask)

#endif  // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Define OEM Source Type values for use in SetupCopyOEMInf.
//
#define SPOST_NONE  0
#define SPOST_PATH  1
#define SPOST_URL   2
#define SPOST_MAX   3

WINSETUPAPI
BOOL
WINAPI
SetupCopyOEMInfA(
    __in PCSTR SourceInfFileName,
    __in_opt PCSTR OEMSourceMediaLocation,
    __in DWORD OEMSourceMediaType,
    __in DWORD CopyStyle,
    __out_ecount_opt(DestinationInfFileNameSize) PSTR DestinationInfFileName,
    __in DWORD DestinationInfFileNameSize,
    __out_opt PDWORD RequiredSize,
    __out_opt PSTR *DestinationInfFileNameComponent
    );

WINSETUPAPI
BOOL
WINAPI
SetupCopyOEMInfW(
    __in PCWSTR SourceInfFileName,
    __in_opt PCWSTR OEMSourceMediaLocation,
    __in DWORD OEMSourceMediaType,
    __in DWORD CopyStyle,
    __out_ecount_opt(DestinationInfFileNameSize) PWSTR DestinationInfFileName,
    __in DWORD DestinationInfFileNameSize,
    __out_opt PDWORD RequiredSize,
    __out_opt PWSTR  *DestinationInfFileNameComponent
    );

#ifdef UNICODE
#define SetupCopyOEMInf SetupCopyOEMInfW
#else
#define SetupCopyOEMInf SetupCopyOEMInfA
#endif

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Flags used by SetupUninstallOEMInf
//
#define SUOI_FORCEDELETE   0x00000001

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define SUOI_INTERNAL1     0x00000002

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP
WINSETUPAPI
BOOL
WINAPI
SetupUninstallOEMInfA(
    __in PCSTR InfFileName,
    __in DWORD Flags,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupUninstallOEMInfW(
    __in PCWSTR InfFileName,
    __in DWORD Flags,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupUninstallOEMInf SetupUninstallOEMInfW
#else
#define SetupUninstallOEMInf SetupUninstallOEMInfA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupUninstallNewlyCopiedInfs(
    __in HSPFILEQ FileQueue,
    __in DWORD Flags,
    __reserved PVOID Reserved
    );

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP


//
// Disk space list APIs
//
WINSETUPAPI
HDSKSPC
WINAPI
SetupCreateDiskSpaceListA(
    __reserved PVOID Reserved1,
    __reserved DWORD Reserved2,
    __in UINT Flags
    );

WINSETUPAPI
HDSKSPC
WINAPI
SetupCreateDiskSpaceListW(
    __reserved PVOID Reserved1,
    __reserved DWORD Reserved2,
    __in UINT Flags
    );

#ifdef UNICODE
#define SetupCreateDiskSpaceList SetupCreateDiskSpaceListW
#else
#define SetupCreateDiskSpaceList SetupCreateDiskSpaceListA
#endif

//
// Flags for SetupCreateDiskSpaceList
//
#define SPDSL_IGNORE_DISK              0x00000001  // ignore deletes and on-disk files in copies
#define SPDSL_DISALLOW_NEGATIVE_ADJUST 0x00000002


WINSETUPAPI
HDSKSPC
WINAPI
SetupDuplicateDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __reserved PVOID Reserved1,
    __reserved DWORD Reserved2,
    __in UINT Flags
    );

WINSETUPAPI
HDSKSPC
WINAPI
SetupDuplicateDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __reserved PVOID Reserved1,
    __reserved DWORD Reserved2,
    __in UINT Flags
    );

#ifdef UNICODE
#define SetupDuplicateDiskSpaceList SetupDuplicateDiskSpaceListW
#else
#define SetupDuplicateDiskSpaceList SetupDuplicateDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDestroyDiskSpaceList(
    __inout HDSKSPC DiskSpace
    );


WINSETUPAPI
BOOL
WINAPI
SetupQueryDrivesInDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueryDrivesInDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupQueryDrivesInDiskSpaceList SetupQueryDrivesInDiskSpaceListW
#else
#define SetupQueryDrivesInDiskSpaceList SetupQueryDrivesInDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupQuerySpaceRequiredOnDriveA(
    __in HDSKSPC DiskSpace,
    __in PCSTR DriveSpec,
    __out LONGLONG *SpaceRequired,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupQuerySpaceRequiredOnDriveW(
    __in HDSKSPC DiskSpace,
    __in PCWSTR DriveSpec,
    __out LONGLONG *SpaceRequired,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupQuerySpaceRequiredOnDrive SetupQuerySpaceRequiredOnDriveW
#else
#define SetupQuerySpaceRequiredOnDrive SetupQuerySpaceRequiredOnDriveA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupAdjustDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __in LPCSTR DriveRoot,
    __in LONGLONG Amount,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupAdjustDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __in LPCWSTR DriveRoot,
    __in LONGLONG Amount,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupAdjustDiskSpaceList SetupAdjustDiskSpaceListW
#else
#define SetupAdjustDiskSpaceList SetupAdjustDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupAddToDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __in PCSTR TargetFilespec,
    __in LONGLONG FileSize,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupAddToDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __in PCWSTR TargetFilespec,
    __in LONGLONG FileSize,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupAddToDiskSpaceList SetupAddToDiskSpaceListW
#else
#define SetupAddToDiskSpaceList SetupAddToDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupAddSectionToDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCSTR SectionName,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupAddSectionToDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCWSTR SectionName,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupAddSectionToDiskSpaceList SetupAddSectionToDiskSpaceListW
#else
#define SetupAddSectionToDiskSpaceList SetupAddSectionToDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupAddInstallSectionToDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF LayoutInfHandle,
    __in PCSTR SectionName,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupAddInstallSectionToDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF LayoutInfHandle,
    __in PCWSTR SectionName,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupAddInstallSectionToDiskSpaceList SetupAddInstallSectionToDiskSpaceListW
#else
#define SetupAddInstallSectionToDiskSpaceList SetupAddInstallSectionToDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupRemoveFromDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __in PCSTR TargetFilespec,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupRemoveFromDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __in PCWSTR TargetFilespec,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupRemoveFromDiskSpaceList SetupRemoveFromDiskSpaceListW
#else
#define SetupRemoveFromDiskSpaceList SetupRemoveFromDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupRemoveSectionFromDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCSTR SectionName,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupRemoveSectionFromDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF ListInfHandle,
    __in PCWSTR SectionName,
    __in UINT Operation,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupRemoveSectionFromDiskSpaceList SetupRemoveSectionFromDiskSpaceListW
#else
#define SetupRemoveSectionFromDiskSpaceList SetupRemoveSectionFromDiskSpaceListA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupRemoveInstallSectionFromDiskSpaceListA(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF LayoutInfHandle,
    __in PCSTR SectionName,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupRemoveInstallSectionFromDiskSpaceListW(
    __in HDSKSPC DiskSpace,
    __in HINF InfHandle,
    __in_opt HINF LayoutInfHandle,
    __in PCWSTR SectionName,
    __reserved PVOID Reserved1,
    __reserved UINT Reserved2
    );

#ifdef UNICODE
#define SetupRemoveInstallSectionFromDiskSpaceList SetupRemoveInstallSectionFromDiskSpaceListW
#else
#define SetupRemoveInstallSectionFromDiskSpaceList SetupRemoveInstallSectionFromDiskSpaceListA
#endif


//
// Cabinet APIs
//

WINSETUPAPI
BOOL
WINAPI
SetupIterateCabinetA(
    __in PCSTR CabinetFile,
    __reserved DWORD Reserved,
    __in PSP_FILE_CALLBACK_A MsgHandler,
    __in PVOID Context
    );

WINSETUPAPI
BOOL
WINAPI
SetupIterateCabinetW(
    __in PCWSTR CabinetFile,
    __reserved DWORD Reserved,
    __in PSP_FILE_CALLBACK_W MsgHandler,
    __in PVOID Context
    );

#ifdef UNICODE
#define SetupIterateCabinet SetupIterateCabinetW
#else
#define SetupIterateCabinet SetupIterateCabinetA
#endif


WINSETUPAPI
INT
WINAPI
SetupPromptReboot(
    __in_opt HSPFILEQ FileQueue,
    __in_opt HWND Owner,
    __in BOOL ScanOnly
    );

//
// Define flags that are returned by SetupPromptReboot
//
#define SPFILEQ_FILE_IN_USE         0x00000001
#define SPFILEQ_REBOOT_RECOMMENDED  0x00000002
#define SPFILEQ_REBOOT_IN_PROGRESS  0x00000004


WINSETUPAPI
PVOID
WINAPI
SetupInitDefaultQueueCallback(
    __in_opt HWND OwnerWindow
    );

WINSETUPAPI
PVOID
WINAPI
SetupInitDefaultQueueCallbackEx(
    __in_opt HWND OwnerWindow,
    __in_opt HWND AlternateProgressWindow,
    __in UINT ProgressMessage,
    __reserved DWORD Reserved1,
    __reserved PVOID Reserved2
    );

WINSETUPAPI
VOID
WINAPI
SetupTermDefaultQueueCallback(
    __in PVOID Context
    );

WINSETUPAPI
UINT
WINAPI
SetupDefaultQueueCallbackA(
    __in PVOID Context,
    __in UINT Notification,
    __in UINT_PTR Param1,
    __in UINT_PTR Param2
    );

WINSETUPAPI
UINT
WINAPI
SetupDefaultQueueCallbackW(
    __in PVOID Context,
    __in UINT Notification,
    __in UINT_PTR Param1,
    __in UINT_PTR Param2
    );

#ifdef UNICODE
#define SetupDefaultQueueCallback SetupDefaultQueueCallbackW
#else
#define SetupDefaultQueueCallback SetupDefaultQueueCallbackA
#endif


//
// Flags for AddReg section lines in INF.  The corresponding value
// is <ValueType> in the AddReg line format given below:
//
// <RegRootString>,<SubKey>,<ValueName>,<ValueType>,<Value>...
//
// The low word contains basic flags concerning the general data type
// and AddReg action. The high word contains values that more specifically
// identify the data type of the registry value.  The high word is ignored
// by the 16-bit Windows 95 SETUPX APIs.
//
// If <ValueType> has FLG_ADDREG_DELREG_BIT set, it will be ignored by AddReg
// (not supported by SetupX).
//

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define FLG_ADDREG_DELREG_BIT       ( 0x00008000 ) // if set, interpret as DELREG, see below

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define FLG_ADDREG_BINVALUETYPE     ( 0x00000001 )
#define FLG_ADDREG_NOCLOBBER        ( 0x00000002 )
#define FLG_ADDREG_DELVAL           ( 0x00000004 )
#define FLG_ADDREG_APPEND           ( 0x00000008 ) // Currently supported only
                                                   // for REG_MULTI_SZ values.
#define FLG_ADDREG_KEYONLY          ( 0x00000010 ) // Just create the key, ignore value
#define FLG_ADDREG_OVERWRITEONLY    ( 0x00000020 ) // Set only if value already exists

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define FLG_ADDREG_64BITKEY         ( 0x00001000 ) // make this change in the 64 bit registry.
#define FLG_ADDREG_KEYONLY_COMMON   ( 0x00002000 ) // same as FLG_ADDREG_KEYONLY but also works for DELREG
#define FLG_ADDREG_32BITKEY         ( 0x00004000 ) // make this change in the 32 bit registry.

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// The INF may supply any arbitrary data type ordinal in the highword except
// for the following: REG_NONE, REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ.  If this
// technique is used, then the data is given in binary format, one byte per
// field.
//
#define FLG_ADDREG_TYPE_MASK        ( 0xFFFF0000 | FLG_ADDREG_BINVALUETYPE )
#define FLG_ADDREG_TYPE_SZ          ( 0x00000000                           )
#define FLG_ADDREG_TYPE_MULTI_SZ    ( 0x00010000                           )
#define FLG_ADDREG_TYPE_EXPAND_SZ   ( 0x00020000                           )
#define FLG_ADDREG_TYPE_BINARY      ( 0x00000000 | FLG_ADDREG_BINVALUETYPE )
#define FLG_ADDREG_TYPE_DWORD       ( 0x00010000 | FLG_ADDREG_BINVALUETYPE )
#define FLG_ADDREG_TYPE_NONE        ( 0x00020000 | FLG_ADDREG_BINVALUETYPE )

//
// Flags for DelReg section lines in INF.  The corresponding value
// is <Operation> in the extended DelReg line format given below:
//
// <RegRootString>,<SubKey>,<ValueName>,<Operation>[,...]
//
// In SetupX and some versions of SetupAPI, <Operation> will be ignored and <ValueName> will
// be deleted. Use with care.
//
// The bits determined by mask FLG_DELREG_TYPE_MASK indicates type of data expected.
// <Operation> must have FLG_ADDREG_DELREG_BIT set, otherwise it is ignored and specified
// value will be deleted (allowing an AddReg section to also be used as a DelReg section)
// if <Operation> is not specified, <ValueName> will be deleted (if specified) otherwise
// <SubKey> will be deleted.
//
// the compatability flag
//
#define FLG_DELREG_VALUE            (0x00000000)

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define FLG_DELREG_TYPE_MASK        FLG_ADDREG_TYPE_MASK        // 0xFFFF0001
#define FLG_DELREG_TYPE_SZ          FLG_ADDREG_TYPE_SZ          // 0x00000000
#define FLG_DELREG_TYPE_MULTI_SZ    FLG_ADDREG_TYPE_MULTI_SZ    // 0x00010000
#define FLG_DELREG_TYPE_EXPAND_SZ   FLG_ADDREG_TYPE_EXPAND_SZ   // 0x00020000
#define FLG_DELREG_TYPE_BINARY      FLG_ADDREG_TYPE_BINARY      // 0x00000001
#define FLG_DELREG_TYPE_DWORD       FLG_ADDREG_TYPE_DWORD       // 0x00010001
#define FLG_DELREG_TYPE_NONE        FLG_ADDREG_TYPE_NONE        // 0x00020001
#define FLG_DELREG_64BITKEY         FLG_ADDREG_64BITKEY         // 0x00001000
#define FLG_DELREG_KEYONLY_COMMON   FLG_ADDREG_KEYONLY_COMMON   // 0x00002000
#define FLG_DELREG_32BITKEY         FLG_ADDREG_32BITKEY         // 0x00004000

//
// <Operation> = FLG_DELREG_MULTI_SZ_DELSTRING
//               <RegRootString>,<SubKey>,<ValueName>,0x00018002,<String>
//               removes all entries matching <String> (case ignored) from multi-sz registry value
//

#define FLG_DELREG_OPERATION_MASK   (0x000000FE)
#define FLG_DELREG_MULTI_SZ_DELSTRING ( FLG_DELREG_TYPE_MULTI_SZ | FLG_ADDREG_DELREG_BIT | 0x00000002 ) // 0x00018002

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Flags for BitReg section lines in INF.
//
#define FLG_BITREG_CLEARBITS        ( 0x00000000 )
#define FLG_BITREG_SETBITS          ( 0x00000001 )

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define FLG_BITREG_64BITKEY         ( 0x00001000 )
#define FLG_BITREG_32BITKEY         ( 0x00004000 )

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Flags for Ini2Reg section lines in INF.
//
#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define FLG_INI2REG_64BITKEY        ( 0x00001000 )
#define FLG_INI2REG_32BITKEY        ( 0x00004000 )

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Flags for RegSvr section lines in INF
//
#define FLG_REGSVR_DLLREGISTER      ( 0x00000001 )
#define FLG_REGSVR_DLLINSTALL       ( 0x00000002 )

// Flags for RegSvr section lines in INF
//

#define FLG_PROFITEM_CURRENTUSER    ( 0x00000001 )
#define FLG_PROFITEM_DELETE         ( 0x00000002 )
#define FLG_PROFITEM_GROUP          ( 0x00000004 )
#define FLG_PROFITEM_CSIDL          ( 0x00000008 )

//
// Flags for AddProperty section lines in the INF
//

#define FLG_ADDPROPERTY_NOCLOBBER       ( 0x00000001 )
#define FLG_ADDPROPERTY_OVERWRITEONLY   ( 0x00000002 )
#define FLG_ADDPROPERTY_APPEND          ( 0x00000004 )
#define FLG_ADDPROPERTY_OR              ( 0x00000008 )
#define FLG_ADDPROPERTY_AND             ( 0x00000010 )

//
// Flags for DelProperty section lines in the INF
//

#define FLG_DELPROPERTY_MULTI_SZ_DELSTRING  ( 0x00000001 )


WINSETUPAPI
BOOL
WINAPI
SetupInstallFromInfSectionA(
    __in_opt HWND Owner,
    __in HINF InfHandle,
    __in PCSTR SectionName,
    __in UINT Flags,
    __in_opt HKEY RelativeKeyRoot,
    __in_opt PCSTR SourceRootPath,
    __in UINT CopyFlags,
    __in_opt PSP_FILE_CALLBACK_A MsgHandler,
    __in_opt PVOID Context,
    __in_opt HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData
    );

WINSETUPAPI
BOOL
WINAPI
SetupInstallFromInfSectionW(
    __in_opt HWND Owner,
    __in HINF InfHandle,
    __in PCWSTR SectionName,
    __in UINT Flags,
    __in_opt HKEY RelativeKeyRoot,
    __in_opt PCWSTR SourceRootPath,
    __in UINT CopyFlags,
    __in_opt PSP_FILE_CALLBACK_W MsgHandler,
    __in_opt PVOID Context,
    __in_opt HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData
    );

#ifdef UNICODE
#define SetupInstallFromInfSection SetupInstallFromInfSectionW
#else
#define SetupInstallFromInfSection SetupInstallFromInfSectionA
#endif

//
// Flags for SetupInstallFromInfSection
//
#define SPINST_LOGCONFIG                0x00000001
#define SPINST_INIFILES                 0x00000002
#define SPINST_REGISTRY                 0x00000004
#define SPINST_INI2REG                  0x00000008
#define SPINST_FILES                    0x00000010
#define SPINST_BITREG                   0x00000020
#define SPINST_REGSVR                   0x00000040
#define SPINST_UNREGSVR                 0x00000080
#define SPINST_PROFILEITEMS             0x00000100

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define SPINST_COPYINF                  0x00000200

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define SPINST_PROPERTIES               0x00000400
#define SPINST_ALL                      0x000007ff

#else

#define SPINST_ALL                      0x000003ff

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#else

#define SPINST_ALL                      0x000001ff

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define SPINST_SINGLESECTION            0x00010000
#define SPINST_LOGCONFIG_IS_FORCED      0x00020000
#define SPINST_LOGCONFIGS_ARE_OVERRIDES 0x00040000

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define SPINST_REGISTERCALLBACKAWARE    0x00080000

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#define SPINST_DEVICEINSTALL            0x00100000

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

WINSETUPAPI
BOOL
WINAPI
SetupInstallFilesFromInfSectionA(
    __in HINF InfHandle,
    __in_opt HINF LayoutInfHandle,
    __in HSPFILEQ FileQueue,
    __in PCSTR SectionName,
    __in_opt PCSTR SourceRootPath,
    __in UINT CopyFlags
    );

WINSETUPAPI
BOOL
WINAPI
SetupInstallFilesFromInfSectionW(
    __in HINF InfHandle,
    __in_opt HINF LayoutInfHandle,
    __in HSPFILEQ FileQueue,
    __in PCWSTR SectionName,
    __in_opt PCWSTR SourceRootPath,
    __in UINT CopyFlags
    );

#ifdef UNICODE
#define SetupInstallFilesFromInfSection SetupInstallFilesFromInfSectionW
#else
#define SetupInstallFilesFromInfSection SetupInstallFilesFromInfSectionA
#endif


//
// Flags for SetupInstallServicesFromInfSection(Ex).  These flags are also used
// in the flags field of AddService or DelService lines in a device INF.  Some
// of these flags are not permitted in the non-Ex API.  These flags are marked
// as such below.
//

//
// (AddService) move service's tag to front of its group order list
//
#define SPSVCINST_TAGTOFRONT               (0x00000001)

//
// (AddService) **Ex API only** mark this service as the function driver for the
// device being installed
//
#define SPSVCINST_ASSOCSERVICE             (0x00000002)

//
// (DelService) delete the associated event log entry for a service specified in
// a DelService entry
//
#define SPSVCINST_DELETEEVENTLOGENTRY      (0x00000004)

//
// (AddService) don't overwrite display name if it already exists
//
#define SPSVCINST_NOCLOBBER_DISPLAYNAME    (0x00000008)

//
// (AddService) don't overwrite start type value if service already exists
//
#define SPSVCINST_NOCLOBBER_STARTTYPE      (0x00000010)

//
// (AddService) don't overwrite error control value if service already exists
//
#define SPSVCINST_NOCLOBBER_ERRORCONTROL   (0x00000020)

//
// (AddService) don't overwrite load order group if it already exists
//
#define SPSVCINST_NOCLOBBER_LOADORDERGROUP (0x00000040)

//
// (AddService) don't overwrite dependencies list if it already exists
//
#define SPSVCINST_NOCLOBBER_DEPENDENCIES   (0x00000080)

//
// (AddService) don't overwrite description if it already exists
//
#define SPSVCINST_NOCLOBBER_DESCRIPTION    (0x00000100)
//
// (DelService) stop the associated service specified in
// a DelService entry before deleting the service
//
#define SPSVCINST_STOPSERVICE              (0x00000200)

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP
//
// (AddService) force overwrite of security settings
//
#define SPSVCINST_CLOBBER_SECURITY         (0x00000400)

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN
//
// (Start Service) start a service manually after install
//
#define SPSVCINST_STARTSERVICE             (0x00000800)

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN



WINSETUPAPI
BOOL
WINAPI
SetupInstallServicesFromInfSectionA(
    __in HINF InfHandle,
    __in PCSTR SectionName,
    __in DWORD Flags
    );

WINSETUPAPI
BOOL
WINAPI
SetupInstallServicesFromInfSectionW(
    __in HINF InfHandle,
    __in PCWSTR SectionName,
    __in DWORD Flags
    );

#ifdef UNICODE
#define SetupInstallServicesFromInfSection SetupInstallServicesFromInfSectionW
#else
#define SetupInstallServicesFromInfSection SetupInstallServicesFromInfSectionA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupInstallServicesFromInfSectionExA(
    __in HINF InfHandle,
    __in PCSTR SectionName,
    __in DWORD Flags,
    __in_opt HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __reserved PVOID Reserved1,
    __reserved PVOID Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupInstallServicesFromInfSectionExW(
    __in HINF InfHandle,
    __in PCWSTR SectionName,
    __in DWORD Flags,
    __in_opt HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __reserved PVOID Reserved1,
    __reserved PVOID Reserved2
    );

#ifdef UNICODE
#define SetupInstallServicesFromInfSectionEx SetupInstallServicesFromInfSectionExW
#else
#define SetupInstallServicesFromInfSectionEx SetupInstallServicesFromInfSectionExA
#endif



//
// High level routine, usually used via rundll32.dll
// to perform right-click install action on INFs
// May be called directly:
//
// wsprintf(CmdLineBuffer,TEXT("DefaultInstall 132 %s"),InfPath);
// InstallHinfSection(NULL,NULL,CmdLineBuffer,0);
//
VOID
WINAPI
InstallHinfSectionA(
    __in HWND Window,
    __in HINSTANCE ModuleHandle,
    __in PCSTR CommandLine,
    __in INT ShowCommand
    );

VOID
WINAPI
InstallHinfSectionW(
    __in HWND Window,
    __in HINSTANCE ModuleHandle,
    __in PCWSTR CommandLine,
    __in INT ShowCommand
    );

#ifdef UNICODE
#define InstallHinfSection InstallHinfSectionW
#else
#define InstallHinfSection InstallHinfSectionA
#endif





//
// Define handle type for Setup file log.
//
typedef PVOID HSPFILELOG;

WINSETUPAPI
HSPFILELOG
WINAPI
SetupInitializeFileLogA(
    __in_opt PCSTR LogFileName,
    __in DWORD Flags
    );

WINSETUPAPI
HSPFILELOG
WINAPI
SetupInitializeFileLogW(
    __in_opt PCWSTR LogFileName,
    __in DWORD Flags
    );

#ifdef UNICODE
#define SetupInitializeFileLog SetupInitializeFileLogW
#else
#define SetupInitializeFileLog SetupInitializeFileLogA
#endif

//
// Flags for SetupInitializeFileLog
//
#define SPFILELOG_SYSTEMLOG     0x00000001  // use system log -- must be Administrator
#define SPFILELOG_FORCENEW      0x00000002  // not valid with SPFILELOG_SYSTEMLOG
#define SPFILELOG_QUERYONLY     0x00000004  // allows non-administrators to read system log


WINSETUPAPI
BOOL
WINAPI
SetupTerminateFileLog(
    __in HSPFILELOG FileLogHandle
    );


WINSETUPAPI
BOOL
WINAPI
SetupLogFileA(
    __in HSPFILELOG FileLogHandle,
    __in_opt PCSTR LogSectionName,
    __in PCSTR SourceFilename,
    __in PCSTR TargetFilename,
    __in DWORD Checksum,
    __in_opt PCSTR DiskTagfile,
    __in_opt PCSTR DiskDescription,
    __in_opt PCSTR OtherInfo,
    __in DWORD Flags
    );

WINSETUPAPI
BOOL
WINAPI
SetupLogFileW(
    __in HSPFILELOG FileLogHandle,
    __in_opt PCWSTR LogSectionName,
    __in PCWSTR SourceFilename,
    __in PCWSTR TargetFilename,
    __in DWORD Checksum,
    __in_opt PCWSTR DiskTagfile,
    __in_opt PCWSTR DiskDescription,
    __in_opt PCWSTR OtherInfo,
    __in DWORD Flags
    );

#ifdef UNICODE
#define SetupLogFile SetupLogFileW
#else
#define SetupLogFile SetupLogFileA
#endif

//
// Flags for SetupLogFile
//
#define SPFILELOG_OEMFILE   0x00000001


WINSETUPAPI
BOOL
WINAPI
SetupRemoveFileLogEntryA(
    __in HSPFILELOG FileLogHandle,
    __in_opt PCSTR LogSectionName,
    __in_opt PCSTR TargetFilename
    );

WINSETUPAPI
BOOL
WINAPI
SetupRemoveFileLogEntryW(
    __in HSPFILELOG FileLogHandle,
    __in_opt PCWSTR LogSectionName,
    __in_opt PCWSTR TargetFilename
    );

#ifdef UNICODE
#define SetupRemoveFileLogEntry SetupRemoveFileLogEntryW
#else
#define SetupRemoveFileLogEntry SetupRemoveFileLogEntryA
#endif


//
// Items retrievable from SetupQueryFileLog()
//
typedef enum {
    SetupFileLogSourceFilename,
    SetupFileLogChecksum,
    SetupFileLogDiskTagfile,
    SetupFileLogDiskDescription,
    SetupFileLogOtherInfo,
    SetupFileLogMax
} SetupFileLogInfo;

WINSETUPAPI
BOOL
WINAPI
SetupQueryFileLogA(
    __in HSPFILELOG FileLogHandle,
    __in_opt PCSTR LogSectionName,
    __in PCSTR TargetFilename,
    __in SetupFileLogInfo DesiredInfo,
    __out_ecount_opt(ReturnBufferSize) PSTR DataOut,
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupQueryFileLogW(
    __in HSPFILELOG FileLogHandle,
    __in_opt PCWSTR LogSectionName, 
    __in PCWSTR TargetFilename,
    __in SetupFileLogInfo DesiredInfo,
    __out_ecount_opt(ReturnBufferSize) PWSTR DataOut, 
    __in DWORD ReturnBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupQueryFileLog SetupQueryFileLogW
#else
#define SetupQueryFileLog SetupQueryFileLogA
#endif

//
// Text logging APIs
//
#define LogSeverity                 DWORD
#define LogSevInformation           0x00000000
#define LogSevWarning               0x00000001
#define LogSevError                 0x00000002
#define LogSevFatalError            0x00000003
#define LogSevMaximum               0x00000004

WINSETUPAPI
BOOL
WINAPI
SetupOpenLog (
    __in BOOL Erase
    );

WINSETUPAPI
BOOL
WINAPI
SetupLogErrorA (
    __in LPCSTR MessageString,
    __in LogSeverity Severity
    );

WINSETUPAPI
BOOL
WINAPI
SetupLogErrorW (
    __in LPCWSTR MessageString,
    __in LogSeverity Severity
    );

#ifdef UNICODE
#define SetupLogError SetupLogErrorW
#else
#define SetupLogError SetupLogErrorA
#endif

WINSETUPAPI
VOID
WINAPI
SetupCloseLog (
    VOID
    );

//
// Text log for INF debugging
//

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


SP_LOG_TOKEN
SetupGetThreadLogToken(
    VOID
    );

VOID
SetupSetThreadLogToken(
    __in SP_LOG_TOKEN LogToken
    );

VOID
SetupWriteTextLog(
    __in SP_LOG_TOKEN LogToken,
    __in DWORD Category,
    __in DWORD Flags,
    __in PCSTR MessageStr,
    ...
    );
    
VOID
SetupWriteTextLogError(
    __in SP_LOG_TOKEN LogToken,
    __in DWORD Category,
    __in DWORD LogFlags,
    __in DWORD Error,
    __in PCSTR MessageStr,
    ...
    );
    
VOID
SetupWriteTextLogInfLine(
    __in SP_LOG_TOKEN LogToken,
    __in DWORD Flags,
    __in HINF InfHandle,
    __in PINFCONTEXT Context
    );

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


//
// Backup Information API's
//

WINSETUPAPI
BOOL
WINAPI
SetupGetBackupInformationA(
    __in HSPFILEQ QueueHandle,
    __inout PSP_BACKUP_QUEUE_PARAMS_A BackupParams
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetBackupInformationW(
    __in HSPFILEQ QueueHandle,
    __inout PSP_BACKUP_QUEUE_PARAMS_W BackupParams
    );

#ifdef UNICODE
#define SetupGetBackupInformation SetupGetBackupInformationW
#else
#define SetupGetBackupInformation SetupGetBackupInformationA
#endif

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

WINSETUPAPI
BOOL
WINAPI
SetupPrepareQueueForRestoreA(
    __in HSPFILEQ QueueHandle,
    __in PCSTR BackupPath,
    __in DWORD RestoreFlags
    );

WINSETUPAPI
BOOL
WINAPI
SetupPrepareQueueForRestoreW(
    __in HSPFILEQ QueueHandle,
    __in PCWSTR BackupPath,
    __in DWORD RestoreFlags
    );

#ifdef UNICODE
#define SetupPrepareQueueForRestore SetupPrepareQueueForRestoreW
#else
#define SetupPrepareQueueForRestore SetupPrepareQueueForRestoreA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Control forcing of Non-Interactive Mode
// Overriden if SetupAPI is run in non-interactive window session
//

WINSETUPAPI
BOOL
WINAPI
SetupSetNonInteractiveMode(
    __in BOOL NonInteractiveFlag
    );

WINSETUPAPI
BOOL
WINAPI
SetupGetNonInteractiveMode(
    VOID
    );

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Device Installer APIs
//

__checkReturn
WINSETUPAPI
HDEVINFO
WINAPI
SetupDiCreateDeviceInfoList(
    __in_opt CONST GUID *ClassGuid,
    __in_opt HWND hwndParent
    );


__checkReturn
WINSETUPAPI
HDEVINFO
WINAPI
SetupDiCreateDeviceInfoListExA(
    __in_opt CONST GUID *ClassGuid,
    __in_opt HWND hwndParent,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

__checkReturn
WINSETUPAPI
HDEVINFO
WINAPI
SetupDiCreateDeviceInfoListExW(
    __in_opt CONST GUID *ClassGuid,
    __in_opt HWND hwndParent, 
    __in_opt PCWSTR MachineName, 
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiCreateDeviceInfoListEx SetupDiCreateDeviceInfoListExW
#else
#define SetupDiCreateDeviceInfoListEx SetupDiCreateDeviceInfoListExA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInfoListClass(
    __in HDEVINFO DeviceInfoSet,
    __out LPGUID ClassGuid
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInfoListDetailA(
    __in HDEVINFO DeviceInfoSet,
    __out PSP_DEVINFO_LIST_DETAIL_DATA_A DeviceInfoSetDetailData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInfoListDetailW(
    __in HDEVINFO DeviceInfoSet,
    __out PSP_DEVINFO_LIST_DETAIL_DATA_W DeviceInfoSetDetailData
    );

#ifdef UNICODE
#define SetupDiGetDeviceInfoListDetail SetupDiGetDeviceInfoListDetailW
#else
#define SetupDiGetDeviceInfoListDetail SetupDiGetDeviceInfoListDetailA
#endif


//
// Flags for SetupDiCreateDeviceInfo
//
#define DICD_GENERATE_ID        0x00000001
#define DICD_INHERIT_CLASSDRVS  0x00000002

WINSETUPAPI
BOOL
WINAPI
SetupDiCreateDeviceInfoA(
    __in HDEVINFO DeviceInfoSet,
    __in PCSTR DeviceName,
    __in CONST GUID *ClassGuid,
    __in_opt PCSTR DeviceDescription,
    __in_opt HWND hwndParent,
    __in DWORD CreationFlags,
    __out_opt PSP_DEVINFO_DATA DeviceInfoData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiCreateDeviceInfoW(
    __in HDEVINFO DeviceInfoSet,
    __in PCWSTR DeviceName,
    __in CONST GUID *ClassGuid,
    __in_opt PCWSTR DeviceDescription,
    __in_opt HWND hwndParent,
    __in DWORD CreationFlags,
    __out_opt PSP_DEVINFO_DATA DeviceInfoData
    );

#ifdef UNICODE
#define SetupDiCreateDeviceInfo SetupDiCreateDeviceInfoW
#else
#define SetupDiCreateDeviceInfo SetupDiCreateDeviceInfoA
#endif


//
// Flags for SetupDiOpenDeviceInfo
//
#define DIOD_INHERIT_CLASSDRVS  0x00000002
#define DIOD_CANCEL_REMOVE      0x00000004

WINSETUPAPI
BOOL
WINAPI
SetupDiOpenDeviceInfoA(
    __in HDEVINFO DeviceInfoSet,
    __in PCSTR DeviceInstanceId,
    __in_opt HWND hwndParent,
    __in DWORD OpenFlags,
    __out_opt PSP_DEVINFO_DATA DeviceInfoData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiOpenDeviceInfoW(
    __in HDEVINFO DeviceInfoSet,
    __in PCWSTR DeviceInstanceId,
    __in_opt HWND hwndParent,
    __in DWORD OpenFlags,
    __out_opt PSP_DEVINFO_DATA DeviceInfoData
    );

#ifdef UNICODE
#define SetupDiOpenDeviceInfo SetupDiOpenDeviceInfoW
#else
#define SetupDiOpenDeviceInfo SetupDiOpenDeviceInfoA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInstanceIdA(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __out_ecount_opt(DeviceInstanceIdSize) PSTR DeviceInstanceId,
    __in DWORD DeviceInstanceIdSize,
    __out_opt __deref_out_range(0, MAX_DEVICE_ID_LEN) PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInstanceIdW(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __out_ecount_opt(DeviceInstanceIdSize) PWSTR DeviceInstanceId,
    __in DWORD DeviceInstanceIdSize,
    __out_opt __deref_out_range(0, MAX_DEVICE_ID_LEN) PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetDeviceInstanceId SetupDiGetDeviceInstanceIdW
#else
#define SetupDiGetDeviceInstanceId SetupDiGetDeviceInstanceIdA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiDeleteDeviceInfo(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiEnumDeviceInfo(
    __in HDEVINFO DeviceInfoSet,
    __in DWORD MemberIndex,
    __out PSP_DEVINFO_DATA DeviceInfoData
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiDestroyDeviceInfoList(
    __in HDEVINFO DeviceInfoSet
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiEnumDeviceInterfaces(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in CONST GUID *InterfaceClassGuid,
    __in DWORD MemberIndex,
    __out PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
    );

//
// Backward compatibility--do not use
//
#define SetupDiEnumInterfaceDevice SetupDiEnumDeviceInterfaces


WINSETUPAPI
BOOL
WINAPI
SetupDiCreateDeviceInterfaceA(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in CONST GUID *InterfaceClassGuid,
    __in_opt PCSTR ReferenceString,
    __in DWORD CreationFlags,
    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiCreateDeviceInterfaceW(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in CONST GUID *InterfaceClassGuid,
    __in_opt PCWSTR ReferenceString,
    __in DWORD CreationFlags,
    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData 
    );

#ifdef UNICODE
#define SetupDiCreateDeviceInterface SetupDiCreateDeviceInterfaceW
#else
#define SetupDiCreateDeviceInterface SetupDiCreateDeviceInterfaceA
#endif

//
// Backward compatibility--do not use.
//
#define SetupDiCreateInterfaceDeviceW SetupDiCreateDeviceInterfaceW
#define SetupDiCreateInterfaceDeviceA SetupDiCreateDeviceInterfaceA
#ifdef UNICODE
#define SetupDiCreateInterfaceDevice SetupDiCreateDeviceInterfaceW
#else
#define SetupDiCreateInterfaceDevice SetupDiCreateDeviceInterfaceA
#endif


//
// Flags for SetupDiOpenDeviceInterface
//
#define DIODI_NO_ADD    0x00000001

WINSETUPAPI
BOOL
WINAPI
SetupDiOpenDeviceInterfaceA(
    __in HDEVINFO DeviceInfoSet,
    __in PCSTR DevicePath,
    __in DWORD OpenFlags,
    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiOpenDeviceInterfaceW(
    __in HDEVINFO DeviceInfoSet,
    __in PCWSTR DevicePath,
    __in DWORD OpenFlags,
    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
    );

#ifdef UNICODE
#define SetupDiOpenDeviceInterface SetupDiOpenDeviceInterfaceW
#else
#define SetupDiOpenDeviceInterface SetupDiOpenDeviceInterfaceA
#endif

//
// Backward compatibility--do not use
//
#define SetupDiOpenInterfaceDeviceW SetupDiOpenDeviceInterfaceW
#define SetupDiOpenInterfaceDeviceA SetupDiOpenDeviceInterfaceA
#ifdef UNICODE
#define SetupDiOpenInterfaceDevice SetupDiOpenDeviceInterfaceW
#else
#define SetupDiOpenInterfaceDevice SetupDiOpenDeviceInterfaceA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInterfaceAlias(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __in CONST GUID *AliasInterfaceClassGuid,
    __out PSP_DEVICE_INTERFACE_DATA AliasDeviceInterfaceData
    );

//
// Backward compatibility--do not use.
//
#define SetupDiGetInterfaceDeviceAlias SetupDiGetDeviceInterfaceAlias


WINSETUPAPI
BOOL
WINAPI
SetupDiDeleteDeviceInterfaceData(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
    );

//
// Backward compatibility--do not use.
//
#define SetupDiDeleteInterfaceDeviceData SetupDiDeleteDeviceInterfaceData


WINSETUPAPI
BOOL
WINAPI
SetupDiRemoveDeviceInterface(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
    );

//
// Backward compatibility--do not use.
//
#define SetupDiRemoveInterfaceDevice SetupDiRemoveDeviceInterface


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInterfaceDetailA(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __inout_bcount_opt(DeviceInterfaceDetailDataSize) PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData, 
    __in DWORD DeviceInterfaceDetailDataSize,
    __out_opt PDWORD RequiredSize,
    __out_opt PSP_DEVINFO_DATA DeviceInfoData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInterfaceDetailW(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __out_bcount_opt(DeviceInterfaceDetailDataSize) PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData,
    __in DWORD DeviceInterfaceDetailDataSize,
    __out_opt PDWORD RequiredSize, 
    __out_opt PSP_DEVINFO_DATA DeviceInfoData
    );

#ifdef UNICODE
#define SetupDiGetDeviceInterfaceDetail SetupDiGetDeviceInterfaceDetailW
#else
#define SetupDiGetDeviceInterfaceDetail SetupDiGetDeviceInterfaceDetailA
#endif

//
// Backward compatibility--do not use.
//
#define SetupDiGetInterfaceDeviceDetailW SetupDiGetDeviceInterfaceDetailW
#define SetupDiGetInterfaceDeviceDetailA SetupDiGetDeviceInterfaceDetailA
#ifdef UNICODE
#define SetupDiGetInterfaceDeviceDetail SetupDiGetDeviceInterfaceDetailW
#else
#define SetupDiGetInterfaceDeviceDetail SetupDiGetDeviceInterfaceDetailA
#endif


//
// Default install handler for DIF_INSTALLINTERFACES.
//
WINSETUPAPI
BOOL
WINAPI
SetupDiInstallDeviceInterfaces(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData
    );

//
// Backward compatibility--do not use.
//
#define SetupDiInstallInterfaceDevices SetupDiInstallDeviceInterfaces


#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

WINSETUPAPI
BOOL
WINAPI
SetupDiSetDeviceInterfaceDefault(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __in DWORD Flags,
    __reserved PVOID Reserved
    );

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP


//
// Default install handler for DIF_REGISTERDEVICE
//

//
// Flags for SetupDiRegisterDeviceInfo
//
#define SPRDI_FIND_DUPS        0x00000001

WINSETUPAPI
BOOL
WINAPI
SetupDiRegisterDeviceInfo(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Flags,
    __in_opt PSP_DETSIG_CMPPROC CompareProc,
    __in_opt PVOID CompareContext,
    __out_opt PSP_DEVINFO_DATA DupDeviceInfoData
    );


//
// Ordinal values distinguishing between class drivers and
// device drivers.
// (Passed in 'DriverType' parameter of driver information list APIs)
//
#define SPDIT_NODRIVER           0x00000000
#define SPDIT_CLASSDRIVER        0x00000001
#define SPDIT_COMPATDRIVER       0x00000002

WINSETUPAPI
BOOL
WINAPI
SetupDiBuildDriverInfoList(
    __in HDEVINFO DeviceInfoSet,
    __inout_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD DriverType
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiCancelDriverInfoSearch(
    __in HDEVINFO DeviceInfoSet
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiEnumDriverInfoA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD DriverType,
    __in DWORD MemberIndex,
    __out PSP_DRVINFO_DATA_A DriverInfoData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiEnumDriverInfoW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD DriverType,
    __in DWORD MemberIndex,
    __out PSP_DRVINFO_DATA_W DriverInfoData
    );

#ifdef UNICODE
#define SetupDiEnumDriverInfo SetupDiEnumDriverInfoW
#else
#define SetupDiEnumDriverInfo SetupDiEnumDriverInfoA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetSelectedDriverA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __out PSP_DRVINFO_DATA_A DriverInfoData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetSelectedDriverW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __out PSP_DRVINFO_DATA_W DriverInfoData
    );

#ifdef UNICODE
#define SetupDiGetSelectedDriver SetupDiGetSelectedDriverW
#else
#define SetupDiGetSelectedDriver SetupDiGetSelectedDriverA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiSetSelectedDriverA(
    __in HDEVINFO DeviceInfoSet,
    __inout_opt PSP_DEVINFO_DATA DeviceInfoData,
    __inout_opt PSP_DRVINFO_DATA_A DriverInfoData
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiSetSelectedDriverW(
    __in HDEVINFO DeviceInfoSet,
    __inout_opt PSP_DEVINFO_DATA DeviceInfoData,
    __inout_opt PSP_DRVINFO_DATA_W DriverInfoData
    );

#ifdef UNICODE
#define SetupDiSetSelectedDriver SetupDiSetSelectedDriverW
#else
#define SetupDiSetSelectedDriver SetupDiSetSelectedDriverA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDriverInfoDetailA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DRVINFO_DATA_A DriverInfoData,
    __inout_bcount_opt(DriverInfoDetailDataSize) PSP_DRVINFO_DETAIL_DATA_A DriverInfoDetailData, 
    __in DWORD DriverInfoDetailDataSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDriverInfoDetailW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DRVINFO_DATA_W DriverInfoData,
    __inout_bcount_opt(DriverInfoDetailDataSize) PSP_DRVINFO_DETAIL_DATA_W DriverInfoDetailData,
    __in DWORD DriverInfoDetailDataSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetDriverInfoDetail SetupDiGetDriverInfoDetailW
#else
#define SetupDiGetDriverInfoDetail SetupDiGetDriverInfoDetailA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiDestroyDriverInfoList(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD DriverType
    );


//
// Flags controlling what is included in the device information set built
// by SetupDiGetClassDevs
//
#define DIGCF_DEFAULT           0x00000001  // only valid with DIGCF_DEVICEINTERFACE
#define DIGCF_PRESENT           0x00000002
#define DIGCF_ALLCLASSES        0x00000004
#define DIGCF_PROFILE           0x00000008
#define DIGCF_DEVICEINTERFACE   0x00000010

//
// Backward compatibility--do not use.
//
#define DIGCF_INTERFACEDEVICE DIGCF_DEVICEINTERFACE


__checkReturn
WINSETUPAPI
HDEVINFO
WINAPI
SetupDiGetClassDevsA(
    __in_opt CONST GUID *ClassGuid,
    __in_opt PCSTR Enumerator,
    __in_opt HWND hwndParent,
    __in DWORD Flags
    );

__checkReturn
WINSETUPAPI
HDEVINFO
WINAPI
SetupDiGetClassDevsW(
    __in_opt CONST GUID *ClassGuid,
    __in_opt PCWSTR Enumerator,
    __in_opt HWND hwndParent,
    __in DWORD Flags
    );

#ifdef UNICODE
#define SetupDiGetClassDevs SetupDiGetClassDevsW
#else
#define SetupDiGetClassDevs SetupDiGetClassDevsA
#endif


__checkReturn
WINSETUPAPI
HDEVINFO
WINAPI
SetupDiGetClassDevsExA(
    __in_opt CONST GUID *ClassGuid,
    __in_opt PCSTR Enumerator,
    __in_opt HWND hwndParent,
    __in DWORD Flags,
    __in_opt HDEVINFO DeviceInfoSet,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

__checkReturn
WINSETUPAPI
HDEVINFO
WINAPI
SetupDiGetClassDevsExW(
    __in_opt CONST GUID *ClassGuid,
    __in_opt PCWSTR Enumerator,
    __in_opt HWND hwndParent,
    __in DWORD Flags,
    __in_opt HDEVINFO DeviceInfoSet,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetClassDevsEx SetupDiGetClassDevsExW
#else
#define SetupDiGetClassDevsEx SetupDiGetClassDevsExA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetINFClassA(
    __in PCSTR InfName,
    __out LPGUID ClassGuid,
    __out_ecount(ClassNameSize) PSTR ClassName,
    __in DWORD ClassNameSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetINFClassW(
    __in PCWSTR InfName,
    __out LPGUID ClassGuid,
    __out_ecount(ClassNameSize) PWSTR ClassName,
    __in DWORD ClassNameSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetINFClass SetupDiGetINFClassW
#else
#define SetupDiGetINFClass SetupDiGetINFClassA
#endif


//
// Flags controlling exclusion from the class information list built
// by SetupDiBuildClassInfoList(Ex)
//
#define DIBCI_NOINSTALLCLASS   0x00000001
#define DIBCI_NODISPLAYCLASS   0x00000002

WINSETUPAPI
BOOL
WINAPI
SetupDiBuildClassInfoList(
    __in DWORD Flags,
    __out_ecount_opt(ClassGuidListSize) LPGUID ClassGuidList,
    __in DWORD ClassGuidListSize,
    __out PDWORD RequiredSize
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiBuildClassInfoListExA(
    __in DWORD Flags,
    __out_ecount_opt(ClassGuidListSize) LPGUID ClassGuidList,
    __in DWORD ClassGuidListSize,
    __out PDWORD RequiredSize,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiBuildClassInfoListExW(
    __in DWORD Flags,
    __out_ecount_opt(ClassGuidListSize) LPGUID ClassGuidList,
    __in DWORD ClassGuidListSize,
    __out PDWORD RequiredSize,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiBuildClassInfoListEx SetupDiBuildClassInfoListExW
#else
#define SetupDiBuildClassInfoListEx SetupDiBuildClassInfoListExA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassDescriptionA(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassDescriptionSize) PSTR ClassDescription,
    __in DWORD ClassDescriptionSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassDescriptionW(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassDescriptionSize) PWSTR ClassDescription,
    __in DWORD ClassDescriptionSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetClassDescription SetupDiGetClassDescriptionW
#else
#define SetupDiGetClassDescription SetupDiGetClassDescriptionA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassDescriptionExA(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassDescriptionSize) PSTR ClassDescription,
    __in DWORD ClassDescriptionSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassDescriptionExW(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassDescriptionSize) PWSTR ClassDescription,
    __in DWORD ClassDescriptionSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetClassDescriptionEx SetupDiGetClassDescriptionExW
#else
#define SetupDiGetClassDescriptionEx SetupDiGetClassDescriptionExA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiCallClassInstaller(
    __in DI_FUNCTION InstallFunction,
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData
    );


//
// Default install handler for DIF_SELECTDEVICE
//
WINSETUPAPI
BOOL
WINAPI
SetupDiSelectDevice(
    __in HDEVINFO DeviceInfoSet,
    __inout_opt PSP_DEVINFO_DATA DeviceInfoData
    );


//
// Default install handler for DIF_SELECTBESTCOMPATDRV
//
WINSETUPAPI
BOOL
WINAPI
SetupDiSelectBestCompatDrv(
    __in HDEVINFO DeviceInfoSet,
    __inout_opt PSP_DEVINFO_DATA DeviceInfoData
    );


//
// Default install handler for DIF_INSTALLDEVICE
//
WINSETUPAPI
BOOL
WINAPI
SetupDiInstallDevice(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData
    );


//
// Default install handler for DIF_INSTALLDEVICEFILES
//
WINSETUPAPI
BOOL
WINAPI
SetupDiInstallDriverFiles(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData
    );


//
// Default install handler for DIF_REGISTER_COINSTALLERS
//
WINSETUPAPI
BOOL
WINAPI
SetupDiRegisterCoDeviceInstallers(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData
    );


//
// Default install handler for DIF_REMOVE
//
WINSETUPAPI
BOOL
WINAPI
SetupDiRemoveDevice(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData
    );


//
// Default install handler for DIF_UNREMOVE
//
WINSETUPAPI
BOOL
WINAPI
SetupDiUnremoveDevice(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData
    );

#if _SETUPAPI_VER >= _WIN32_WINNT_WS03

WINSETUPAPI
BOOL
WINAPI
SetupDiRestartDevices(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData
    );

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WS03

//
// Default install handler for DIF_PROPERTYCHANGE
//
WINSETUPAPI
BOOL
WINAPI
SetupDiChangeState(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData
    );


#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

//
// Default install handler for DIF_FINISHINSTALL_ACTION
//
WINSETUPAPI
BOOL
WINAPI
SetupDiFinishInstallAction(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData
    );

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


WINSETUPAPI
BOOL
WINAPI
SetupDiInstallClassA(
    __in_opt HWND hwndParent,
    __in PCSTR InfFileName,
    __in DWORD Flags,
    __in_opt HSPFILEQ FileQueue
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiInstallClassW(
    __in_opt HWND hwndParent,
    __in PCWSTR InfFileName,
    __in DWORD Flags,
    __in_opt HSPFILEQ FileQueue
    );

#ifdef UNICODE
#define SetupDiInstallClass SetupDiInstallClassW
#else
#define SetupDiInstallClass SetupDiInstallClassA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiInstallClassExA(
    __in_opt HWND hwndParent,
    __in_opt PCSTR InfFileName,
    __in DWORD Flags,
    __in_opt HSPFILEQ FileQueue,
    __in_opt CONST GUID *InterfaceClassGuid,
    __reserved PVOID Reserved1,
    __reserved PVOID Reserved2
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiInstallClassExW(
    __in_opt HWND hwndParent,
    __in_opt PCWSTR InfFileName,
    __in DWORD Flags,
    __in_opt HSPFILEQ FileQueue,
    __in_opt CONST GUID *InterfaceClassGuid,
    __reserved PVOID Reserved1,
    __reserved PVOID Reserved2
    );

#ifdef UNICODE
#define SetupDiInstallClassEx SetupDiInstallClassExW
#else
#define SetupDiInstallClassEx SetupDiInstallClassExA
#endif


__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiOpenClassRegKey(
    __in_opt CONST GUID *ClassGuid,
    __in REGSAM samDesired
    );


//
// Flags for SetupDiOpenClassRegKeyEx
//
#define DIOCR_INSTALLER   0x00000001    // class installer registry branch
#define DIOCR_INTERFACE   0x00000002    // interface class registry branch

__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiOpenClassRegKeyExA(
    __in_opt CONST GUID *ClassGuid,
    __in REGSAM samDesired,
    __in DWORD Flags,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiOpenClassRegKeyExW(
    __in_opt CONST GUID *ClassGuid,
    __in REGSAM samDesired,
    __in DWORD Flags,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiOpenClassRegKeyEx SetupDiOpenClassRegKeyExW
#else
#define SetupDiOpenClassRegKeyEx SetupDiOpenClassRegKeyExA
#endif


__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiCreateDeviceInterfaceRegKeyA(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __reserved DWORD Reserved,
    __in REGSAM samDesired,
    __in_opt HINF InfHandle,
    __in_opt PCSTR InfSectionName
    );

__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiCreateDeviceInterfaceRegKeyW(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __reserved DWORD Reserved,
    __in REGSAM samDesired,
    __in_opt HINF InfHandle,
    __in_opt PCWSTR InfSectionName
    );

#ifdef UNICODE
#define SetupDiCreateDeviceInterfaceRegKey SetupDiCreateDeviceInterfaceRegKeyW
#else
#define SetupDiCreateDeviceInterfaceRegKey SetupDiCreateDeviceInterfaceRegKeyA
#endif

//
// Backward compatibility--do not use.
//
#define SetupDiCreateInterfaceDeviceRegKeyW SetupDiCreateDeviceInterfaceRegKeyW
#define SetupDiCreateInterfaceDeviceRegKeyA SetupDiCreateDeviceInterfaceRegKeyA
#ifdef UNICODE
#define SetupDiCreateInterfaceDeviceRegKey SetupDiCreateDeviceInterfaceRegKeyW
#else
#define SetupDiCreateInterfaceDeviceRegKey SetupDiCreateDeviceInterfaceRegKeyA
#endif


__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiOpenDeviceInterfaceRegKey(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __reserved DWORD Reserved,
    __in REGSAM samDesired
    );

//
// Backward compatibility--do not use.
//
#define SetupDiOpenInterfaceDeviceRegKey SetupDiOpenDeviceInterfaceRegKey


WINSETUPAPI
BOOL
WINAPI
SetupDiDeleteDeviceInterfaceRegKey(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __reserved DWORD Reserved
    );

//
// Backward compatibility--do not use.
//
#define SetupDiDeleteInterfaceDeviceRegKey SetupDiDeleteDeviceInterfaceRegKey


//
// KeyType values for SetupDiCreateDevRegKey, SetupDiOpenDevRegKey, and
// SetupDiDeleteDevRegKey.
//
#define DIREG_DEV       0x00000001          // Open/Create/Delete device key
#define DIREG_DRV       0x00000002          // Open/Create/Delete driver key
#define DIREG_BOTH      0x00000004          // Delete both driver and Device key

__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiCreateDevRegKeyA(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Scope,
    __in DWORD HwProfile,
    __in DWORD KeyType,
    __in_opt HINF InfHandle,
    __in_opt PCSTR InfSectionName
    );

__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiCreateDevRegKeyW(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Scope,
    __in DWORD HwProfile,
    __in DWORD KeyType,
    __in_opt HINF InfHandle,
    __in_opt PCWSTR InfSectionName
    );

#ifdef UNICODE
#define SetupDiCreateDevRegKey SetupDiCreateDevRegKeyW
#else
#define SetupDiCreateDevRegKey SetupDiCreateDevRegKeyA
#endif


__checkReturn
WINSETUPAPI
HKEY
WINAPI
SetupDiOpenDevRegKey(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Scope,
    __in DWORD HwProfile,
    __in DWORD KeyType,
    __in REGSAM samDesired
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiDeleteDevRegKey(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Scope,
    __in DWORD HwProfile,
    __in DWORD KeyType
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiGetHwProfileList(
    __out_ecount(HwProfileListSize) PDWORD HwProfileList,
    __in DWORD HwProfileListSize,
    __out PDWORD RequiredSize,
    __out_opt PDWORD CurrentlyActiveIndex
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiGetHwProfileListExA(
    __out_ecount(HwProfileListSize) PDWORD HwProfileList,
    __in DWORD HwProfileListSize,
    __out PDWORD RequiredSize,
    __out_opt PDWORD CurrentlyActiveIndex,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetHwProfileListExW(
    __out_ecount(HwProfileListSize) PDWORD HwProfileList,
    __in DWORD HwProfileListSize,
    __out PDWORD RequiredSize,
    __out_opt PDWORD CurrentlyActiveIndex,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetHwProfileListEx SetupDiGetHwProfileListExW
#else
#define SetupDiGetHwProfileListEx SetupDiGetHwProfileListExA
#endif

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDevicePropertyKeys(
    __in         HDEVINFO         DeviceInfoSet,
    __in         PSP_DEVINFO_DATA DeviceInfoData,
    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,
    __in         DWORD            PropertyKeyCount,
    __out_opt    PDWORD           RequiredPropertyKeyCount,
    __in         DWORD            Flags
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDevicePropertyW(
    __in         HDEVINFO         DeviceInfoSet,
    __in         PSP_DEVINFO_DATA DeviceInfoData,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __out        DEVPROPTYPE     *PropertyType,
    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __out_opt    PDWORD           RequiredSize,
    __in         DWORD            Flags
    );

#ifdef UNICODE
#define SetupDiGetDeviceProperty SetupDiGetDevicePropertyW
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiSetDevicePropertyW(
    __in         HDEVINFO         DeviceInfoSet,
    __in         PSP_DEVINFO_DATA DeviceInfoData,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __in         DEVPROPTYPE      PropertyType,
    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __in         DWORD            Flags
    );

#ifdef UNICODE
#define SetupDiSetDeviceProperty SetupDiSetDevicePropertyW
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInterfacePropertyKeys(
    __in         HDEVINFO         DeviceInfoSet,
    __in         PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,
    __in         DWORD            PropertyKeyCount,
    __out_opt    PDWORD           RequiredPropertyKeyCount,
    __in         DWORD            Flags
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInterfacePropertyW(
    __in         HDEVINFO         DeviceInfoSet,
    __in         PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __out        DEVPROPTYPE     *PropertyType,
    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __out_opt    PDWORD           RequiredSize,
    __in         DWORD            Flags
    );

#ifdef UNICODE
#define SetupDiGetDeviceInterfaceProperty SetupDiGetDeviceInterfacePropertyW
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiSetDeviceInterfacePropertyW(
    __in         HDEVINFO         DeviceInfoSet,
    __in         PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __in         DEVPROPTYPE      PropertyType,
    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __in         DWORD            Flags
    );

#ifdef UNICODE
#define SetupDiSetDeviceInterfaceProperty SetupDiSetDeviceInterfacePropertyW
#endif

//
// Flags for SetupDiGetClassPropertyKeys, SetupDiGetClassProperty, and
// SetupDiSetClassProperty.
//
#define DICLASSPROP_INSTALLER   0x00000001    // device setup class property
#define DICLASSPROP_INTERFACE   0x00000002    // device interface class property

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassPropertyKeys(
    __in   CONST GUID            *ClassGuid,
    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,
    __in         DWORD            PropertyKeyCount,
    __out_opt    PDWORD           RequiredPropertyKeyCount,
    __in         DWORD            Flags
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassPropertyKeysExW(
    __in   CONST GUID            *ClassGuid,
    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,
    __in         DWORD            PropertyKeyCount,
    __out_opt    PDWORD           RequiredPropertyKeyCount,
    __in         DWORD            Flags,
    __in_opt     PCWSTR           MachineName,
    __reserved   PVOID            Reserved
    );

#ifdef UNICODE
#define SetupDiGetClassPropertyKeysEx SetupDiGetClassPropertyKeysExW
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassPropertyW(
    __in   CONST GUID            *ClassGuid,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __out        DEVPROPTYPE     *PropertyType,
    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __out_opt    PDWORD           RequiredSize,
    __in         DWORD            Flags
    );

#ifdef UNICODE
#define SetupDiGetClassProperty SetupDiGetClassPropertyW
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassPropertyExW(
    __in   CONST GUID            *ClassGuid,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __out        DEVPROPTYPE     *PropertyType,
    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __out_opt    PDWORD           RequiredSize,
    __in         DWORD            Flags,
    __in_opt     PCWSTR           MachineName,
    __reserved   PVOID            Reserved
    );

#ifdef UNICODE
#define SetupDiGetClassPropertyEx SetupDiGetClassPropertyExW
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiSetClassPropertyW(
    __in   CONST GUID            *ClassGuid,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __in         DEVPROPTYPE      PropertyType,
    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __in         DWORD            Flags
    );

#ifdef UNICODE
#define SetupDiSetClassProperty SetupDiSetClassPropertyW
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiSetClassPropertyExW(
    __in   CONST GUID            *ClassGuid,
    __in   CONST DEVPROPKEY      *PropertyKey,
    __in         DEVPROPTYPE      PropertyType,
    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,
    __in         DWORD            PropertyBufferSize,
    __in         DWORD            Flags,
    __in_opt     PCWSTR           MachineName,
    __reserved   PVOID            Reserved
    );

#ifdef UNICODE
#define SetupDiSetClassPropertyEx SetupDiSetClassPropertyExW
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


//
// Device registry property codes
// (Codes marked as read-only (R) may only be used for
// SetupDiGetDeviceRegistryProperty)
//
// These values should cover the same set of registry properties
// as defined by the CM_DRP codes in cfgmgr32.h.
//
// Note that SPDRP codes are zero based while CM_DRP codes are one based!
//
#define SPDRP_DEVICEDESC                  (0x00000000)  // DeviceDesc (R/W)
#define SPDRP_HARDWAREID                  (0x00000001)  // HardwareID (R/W)
#define SPDRP_COMPATIBLEIDS               (0x00000002)  // CompatibleIDs (R/W)
#define SPDRP_UNUSED0                     (0x00000003)  // unused
#define SPDRP_SERVICE                     (0x00000004)  // Service (R/W)
#define SPDRP_UNUSED1                     (0x00000005)  // unused
#define SPDRP_UNUSED2                     (0x00000006)  // unused
#define SPDRP_CLASS                       (0x00000007)  // Class (R--tied to ClassGUID)
#define SPDRP_CLASSGUID                   (0x00000008)  // ClassGUID (R/W)
#define SPDRP_DRIVER                      (0x00000009)  // Driver (R/W)
#define SPDRP_CONFIGFLAGS                 (0x0000000A)  // ConfigFlags (R/W)
#define SPDRP_MFG                         (0x0000000B)  // Mfg (R/W)
#define SPDRP_FRIENDLYNAME                (0x0000000C)  // FriendlyName (R/W)
#define SPDRP_LOCATION_INFORMATION        (0x0000000D)  // LocationInformation (R/W)
#define SPDRP_PHYSICAL_DEVICE_OBJECT_NAME (0x0000000E)  // PhysicalDeviceObjectName (R)
#define SPDRP_CAPABILITIES                (0x0000000F)  // Capabilities (R)
#define SPDRP_UI_NUMBER                   (0x00000010)  // UiNumber (R)
#define SPDRP_UPPERFILTERS                (0x00000011)  // UpperFilters (R/W)
#define SPDRP_LOWERFILTERS                (0x00000012)  // LowerFilters (R/W)
#define SPDRP_BUSTYPEGUID                 (0x00000013)  // BusTypeGUID (R)
#define SPDRP_LEGACYBUSTYPE               (0x00000014)  // LegacyBusType (R)
#define SPDRP_BUSNUMBER                   (0x00000015)  // BusNumber (R)
#define SPDRP_ENUMERATOR_NAME             (0x00000016)  // Enumerator Name (R)
#define SPDRP_SECURITY                    (0x00000017)  // Security (R/W, binary form)
#define SPDRP_SECURITY_SDS                (0x00000018)  // Security (W, SDS form)
#define SPDRP_DEVTYPE                     (0x00000019)  // Device Type (R/W)
#define SPDRP_EXCLUSIVE                   (0x0000001A)  // Device is exclusive-access (R/W)
#define SPDRP_CHARACTERISTICS             (0x0000001B)  // Device Characteristics (R/W)
#define SPDRP_ADDRESS                     (0x0000001C)  // Device Address (R)
#define SPDRP_UI_NUMBER_DESC_FORMAT       (0X0000001D)  // UiNumberDescFormat (R/W)
#define SPDRP_DEVICE_POWER_DATA           (0x0000001E)  // Device Power Data (R)
#define SPDRP_REMOVAL_POLICY              (0x0000001F)  // Removal Policy (R)
#define SPDRP_REMOVAL_POLICY_HW_DEFAULT   (0x00000020)  // Hardware Removal Policy (R)
#define SPDRP_REMOVAL_POLICY_OVERRIDE     (0x00000021)  // Removal Policy Override (RW)
#define SPDRP_INSTALL_STATE               (0x00000022)  // Device Install State (R)
#define SPDRP_LOCATION_PATHS              (0x00000023)  // Device Location Paths (R)

#define SPDRP_MAXIMUM_PROPERTY            (0x00000024)  // Upper bound on ordinals

//
// Class registry property codes
// (Codes marked as read-only (R) may only be used for
// SetupDiGetClassRegistryProperty)
//
// These values should cover the same set of registry properties
// as defined by the CM_CRP codes in cfgmgr32.h.
// they should also have a 1:1 correspondence with Device registers, where applicable
// but no overlap otherwise
//
#define SPCRP_UPPERFILTERS                (0x00000011)  // UpperFilters (R/W)
#define SPCRP_LOWERFILTERS                (0x00000012)  // LowerFilters (R/W)
#define SPCRP_SECURITY                    (0x00000017)  // Security (R/W, binary form)
#define SPCRP_SECURITY_SDS                (0x00000018)  // Security (W, SDS form)
#define SPCRP_DEVTYPE                     (0x00000019)  // Device Type (R/W)
#define SPCRP_EXCLUSIVE                   (0x0000001A)  // Device is exclusive-access (R/W)
#define SPCRP_CHARACTERISTICS             (0x0000001B)  // Device Characteristics (R/W)
#define SPCRP_MAXIMUM_PROPERTY            (0x0000001C)  // Upper bound on ordinals


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceRegistryPropertyA(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Property,
    __out_opt PDWORD PropertyRegDataType, 
    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,
    __in DWORD PropertyBufferSize,
    __out_opt PDWORD RequiredSize 
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceRegistryPropertyW(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Property,
    __out_opt PDWORD PropertyRegDataType,
    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,
    __in DWORD PropertyBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetDeviceRegistryProperty SetupDiGetDeviceRegistryPropertyW
#else
#define SetupDiGetDeviceRegistryProperty SetupDiGetDeviceRegistryPropertyA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassRegistryPropertyA(
    __in CONST GUID *ClassGuid,
    __in DWORD Property,
    __out_opt PDWORD PropertyRegDataType,
    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,
    __in DWORD PropertyBufferSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassRegistryPropertyW(
    __in CONST GUID *ClassGuid,
    __in DWORD Property,
    __out_opt PDWORD PropertyRegDataType,
    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,
    __in DWORD PropertyBufferSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCWSTR MachineName, 
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetClassRegistryProperty SetupDiGetClassRegistryPropertyW
#else
#define SetupDiGetClassRegistryProperty SetupDiGetClassRegistryPropertyA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiSetDeviceRegistryPropertyA(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Property,
    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer,
    __in DWORD PropertyBufferSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiSetDeviceRegistryPropertyW(
    __in HDEVINFO DeviceInfoSet,
    __inout PSP_DEVINFO_DATA DeviceInfoData,
    __in DWORD Property,
    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer,
    __in DWORD PropertyBufferSize
    );

#ifdef UNICODE
#define SetupDiSetDeviceRegistryProperty SetupDiSetDeviceRegistryPropertyW
#else
#define SetupDiSetDeviceRegistryProperty SetupDiSetDeviceRegistryPropertyA
#endif

WINSETUPAPI
BOOL
WINAPI
SetupDiSetClassRegistryPropertyA(
    __in CONST GUID *ClassGuid,
    __in DWORD Property,
    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer, 
    __in DWORD PropertyBufferSize,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiSetClassRegistryPropertyW(
    __in CONST GUID *ClassGuid,
    __in DWORD Property,
    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer,
    __in DWORD PropertyBufferSize,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiSetClassRegistryProperty SetupDiSetClassRegistryPropertyW
#else
#define SetupDiSetClassRegistryProperty SetupDiSetClassRegistryPropertyA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInstallParamsA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __out PSP_DEVINSTALL_PARAMS_A DeviceInstallParams
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDeviceInstallParamsW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __out PSP_DEVINSTALL_PARAMS_W DeviceInstallParams
    );

#ifdef UNICODE
#define SetupDiGetDeviceInstallParams SetupDiGetDeviceInstallParamsW
#else
#define SetupDiGetDeviceInstallParams SetupDiGetDeviceInstallParamsA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassInstallParamsA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData, 
    __out_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,
    __in DWORD ClassInstallParamsSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassInstallParamsW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __out_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,
    __in DWORD ClassInstallParamsSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetClassInstallParams SetupDiGetClassInstallParamsW
#else
#define SetupDiGetClassInstallParams SetupDiGetClassInstallParamsA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiSetDeviceInstallParamsA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DEVINSTALL_PARAMS_A DeviceInstallParams
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiSetDeviceInstallParamsW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DEVINSTALL_PARAMS_W DeviceInstallParams
    );

#ifdef UNICODE
#define SetupDiSetDeviceInstallParams SetupDiSetDeviceInstallParamsW
#else
#define SetupDiSetDeviceInstallParams SetupDiSetDeviceInstallParamsA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiSetClassInstallParamsA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,
    __in DWORD ClassInstallParamsSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiSetClassInstallParamsW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,
    __in DWORD ClassInstallParamsSize
    );

#ifdef UNICODE
#define SetupDiSetClassInstallParams SetupDiSetClassInstallParamsW
#else
#define SetupDiSetClassInstallParams SetupDiSetClassInstallParamsA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetDriverInstallParamsA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DRVINFO_DATA_A DriverInfoData,
    __out PSP_DRVINSTALL_PARAMS DriverInstallParams
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetDriverInstallParamsW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DRVINFO_DATA_W DriverInfoData,
    __out PSP_DRVINSTALL_PARAMS DriverInstallParams
    );

#ifdef UNICODE
#define SetupDiGetDriverInstallParams SetupDiGetDriverInstallParamsW
#else
#define SetupDiGetDriverInstallParams SetupDiGetDriverInstallParamsA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiSetDriverInstallParamsA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DRVINFO_DATA_A DriverInfoData,
    __in PSP_DRVINSTALL_PARAMS DriverInstallParams
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiSetDriverInstallParamsW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_DRVINFO_DATA_W DriverInfoData,
    __in PSP_DRVINSTALL_PARAMS DriverInstallParams
    );

#ifdef UNICODE
#define SetupDiSetDriverInstallParams SetupDiSetDriverInstallParamsW
#else
#define SetupDiSetDriverInstallParams SetupDiSetDriverInstallParamsA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiLoadClassIcon(
    __in CONST GUID *ClassGuid,
    __out_opt HICON *LargeIcon,
    __out_opt PINT MiniIconIndex 
    );

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

WINSETUPAPI
BOOL
WINAPI
SetupDiLoadDeviceIcon(
    __in        HDEVINFO         DeviceInfoSet,
    __in        PSP_DEVINFO_DATA DeviceInfoData,
    __in        UINT             cxIcon,
    __in        UINT             cyIcon,
    __in        DWORD            Flags,
    __out       HICON           *hIcon
    );

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN


//
// Flags controlling the drawing of mini-icons
//
#define DMI_MASK      0x00000001
#define DMI_BKCOLOR   0x00000002
#define DMI_USERECT   0x00000004

WINSETUPAPI
INT
WINAPI
SetupDiDrawMiniIcon(
    __in HDC hdc,
    __in RECT rc,
    __in INT MiniIconIndex,
    __in DWORD Flags
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassBitmapIndex(
    __in_opt CONST GUID *ClassGuid,
    __out PINT MiniIconIndex
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassImageList(
    __out PSP_CLASSIMAGELIST_DATA ClassImageListData
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassImageListExA(
    __out PSP_CLASSIMAGELIST_DATA ClassImageListData,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassImageListExW(
    __out PSP_CLASSIMAGELIST_DATA ClassImageListData,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetClassImageListEx SetupDiGetClassImageListExW
#else
#define SetupDiGetClassImageListEx SetupDiGetClassImageListExA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassImageIndex(
    __in PSP_CLASSIMAGELIST_DATA ClassImageListData,
    __in CONST GUID *ClassGuid,
    __out PINT ImageIndex
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiDestroyClassImageList(
    __in PSP_CLASSIMAGELIST_DATA ClassImageListData
    );


//
// PropertySheetType values for the SetupDiGetClassDevPropertySheets API
//
#define DIGCDP_FLAG_BASIC           0x00000001
#define DIGCDP_FLAG_ADVANCED        0x00000002

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#define DIGCDP_FLAG_REMOTE_BASIC    0x00000003  // not presently implemented
#define DIGCDP_FLAG_REMOTE_ADVANCED 0x00000004

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassDevPropertySheetsA(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in LPPROPSHEETHEADERA PropertySheetHeader,
    __in DWORD PropertySheetHeaderPageListSize,
    __out_opt PDWORD RequiredSize,
    __in DWORD PropertySheetType
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetClassDevPropertySheetsW(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in LPPROPSHEETHEADERW PropertySheetHeader,
    __in DWORD PropertySheetHeaderPageListSize,
    __out_opt PDWORD RequiredSize,
    __in DWORD PropertySheetType
    );

#ifdef UNICODE
#define SetupDiGetClassDevPropertySheets SetupDiGetClassDevPropertySheetsW
#else
#define SetupDiGetClassDevPropertySheets SetupDiGetClassDevPropertySheetsA
#endif


//
// Define ICON IDs publicly exposed from setupapi.
//
#define IDI_RESOURCEFIRST           159
#define IDI_RESOURCE                159
#define IDI_RESOURCELAST            161
#define IDI_RESOURCEOVERLAYFIRST    161
#define IDI_RESOURCEOVERLAYLAST     161
#define IDI_CONFLICT                161

#define IDI_CLASSICON_OVERLAYFIRST  500
#define IDI_CLASSICON_OVERLAYLAST   502
#define IDI_PROBLEM_OVL             500
#define IDI_DISABLED_OVL            501
#define IDI_FORCED_OVL              502


WINSETUPAPI
BOOL
WINAPI
SetupDiAskForOEMDisk(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiSelectOEMDrv(
    __in_opt HWND hwndParent,
    __in HDEVINFO DeviceInfoSet,
    __inout_opt PSP_DEVINFO_DATA DeviceInfoData
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiClassNameFromGuidA(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassNameSize) PSTR ClassName,
    __in DWORD ClassNameSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiClassNameFromGuidW(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassNameSize) PWSTR ClassName,
    __in DWORD ClassNameSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiClassNameFromGuid SetupDiClassNameFromGuidW
#else
#define SetupDiClassNameFromGuid SetupDiClassNameFromGuidA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiClassNameFromGuidExA(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassNameSize) PSTR ClassName,
    __in DWORD ClassNameSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiClassNameFromGuidExW(
    __in CONST GUID *ClassGuid,
    __out_ecount(ClassNameSize) PWSTR ClassName,
    __in DWORD ClassNameSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiClassNameFromGuidEx SetupDiClassNameFromGuidExW
#else
#define SetupDiClassNameFromGuidEx SetupDiClassNameFromGuidExA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiClassGuidsFromNameA(
    __in PCSTR ClassName,
    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,
    __in DWORD ClassGuidListSize,
    __out PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiClassGuidsFromNameW(
    __in PCWSTR ClassName,
    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,
    __in DWORD ClassGuidListSize,
    __out PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiClassGuidsFromName SetupDiClassGuidsFromNameW
#else
#define SetupDiClassGuidsFromName SetupDiClassGuidsFromNameA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiClassGuidsFromNameExA(
    __in PCSTR ClassName,
    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,
    __in DWORD ClassGuidListSize,
    __out PDWORD RequiredSize,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiClassGuidsFromNameExW(
    __in PCWSTR ClassName,
    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,
    __in DWORD ClassGuidListSize,
    __out PDWORD RequiredSize,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiClassGuidsFromNameEx SetupDiClassGuidsFromNameExW
#else
#define SetupDiClassGuidsFromNameEx SetupDiClassGuidsFromNameExA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetHwProfileFriendlyNameA(
    __in DWORD HwProfile,
    __out_ecount(FriendlyNameSize) PSTR FriendlyName,
    __in DWORD FriendlyNameSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetHwProfileFriendlyNameW(
    __in DWORD HwProfile,
    __out_ecount(FriendlyNameSize) PWSTR FriendlyName,
    __in DWORD FriendlyNameSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetHwProfileFriendlyName SetupDiGetHwProfileFriendlyNameW
#else
#define SetupDiGetHwProfileFriendlyName SetupDiGetHwProfileFriendlyNameA
#endif


WINSETUPAPI
BOOL
WINAPI
SetupDiGetHwProfileFriendlyNameExA(
    __in DWORD HwProfile,
    __out_ecount(FriendlyNameSize) PSTR FriendlyName,
    __in DWORD FriendlyNameSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCSTR MachineName,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetHwProfileFriendlyNameExW(
    __in DWORD HwProfile,
    __out_ecount(FriendlyNameSize) PWSTR FriendlyName,
    __in DWORD FriendlyNameSize,
    __out_opt PDWORD RequiredSize,
    __in_opt PCWSTR MachineName,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetHwProfileFriendlyNameEx SetupDiGetHwProfileFriendlyNameExW
#else
#define SetupDiGetHwProfileFriendlyNameEx SetupDiGetHwProfileFriendlyNameExA
#endif


//
// PageType values for SetupDiGetWizardPage API
//
#define SPWPT_SELECTDEVICE      0x00000001

//
// Flags for SetupDiGetWizardPage API
//
#define SPWP_USE_DEVINFO_DATA   0x00000001

WINSETUPAPI
HPROPSHEETPAGE
WINAPI
SetupDiGetWizardPage(
    __in HDEVINFO DeviceInfoSet,
    __in_opt PSP_DEVINFO_DATA DeviceInfoData,
    __in PSP_INSTALLWIZARD_DATA InstallWizardData,
    __in DWORD PageType,
    __in DWORD Flags
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiGetSelectedDevice(
    __in HDEVINFO DeviceInfoSet,
    __out PSP_DEVINFO_DATA DeviceInfoData
    );


WINSETUPAPI
BOOL
WINAPI
SetupDiSetSelectedDevice(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData
    );


#if _SETUPAPI_VER >= _WIN32_WINNT_WS03

WINSETUPAPI
BOOL
WINAPI
SetupDiGetActualModelsSectionA(
    __in PINFCONTEXT Context,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __out_ecount_opt(InfSectionWithExtSize) PSTR InfSectionWithExt,
    __in DWORD InfSectionWithExtSize,
    __out_opt PDWORD RequiredSize,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetActualModelsSectionW(
    __in PINFCONTEXT Context,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __out_ecount_opt(InfSectionWithExtSize) PWSTR InfSectionWithExt,
    __in DWORD InfSectionWithExtSize,
    __out_opt PDWORD RequiredSize,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetActualModelsSection SetupDiGetActualModelsSectionW
#else
#define SetupDiGetActualModelsSection SetupDiGetActualModelsSectionA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WS03


WINSETUPAPI
BOOL
WINAPI
SetupDiGetActualSectionToInstallA(
    __in HINF InfHandle,
    __in PCSTR InfSectionName,
    __out_ecount_opt(InfSectionWithExtSize) PSTR InfSectionWithExt,
    __in DWORD InfSectionWithExtSize,
    __out_opt PDWORD RequiredSize,
    __out_opt PSTR *Extension
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetActualSectionToInstallW(
    __in HINF InfHandle,
    __in PCWSTR InfSectionName,
    __out_ecount_opt(InfSectionWithExtSize) PWSTR InfSectionWithExt,
    __in DWORD InfSectionWithExtSize,
    __out_opt PDWORD RequiredSize,
    __out_opt PWSTR *Extension
    );

#ifdef UNICODE
#define SetupDiGetActualSectionToInstall SetupDiGetActualSectionToInstallW
#else
#define SetupDiGetActualSectionToInstall SetupDiGetActualSectionToInstallA
#endif


#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

WINSETUPAPI
BOOL
WINAPI
SetupDiGetActualSectionToInstallExA(
    __in HINF InfHandle,
    __in PCSTR InfSectionName,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __out_ecount_opt(InfSectionWithExtSize) PSTR InfSectionWithExt,
    __in DWORD InfSectionWithExtSize,
    __out_opt PDWORD RequiredSize,
    __out_opt PSTR *Extension,
    __reserved PVOID Reserved
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetActualSectionToInstallExW(
    __in HINF InfHandle,
    __in PCWSTR InfSectionName,
    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,
    __out_ecount_opt(InfSectionWithExtSize) PWSTR InfSectionWithExt,
    __in DWORD InfSectionWithExtSize,
    __out_opt PDWORD RequiredSize,
    __out_opt PWSTR *Extension,
    __reserved PVOID Reserved
    );

#ifdef UNICODE
#define SetupDiGetActualSectionToInstallEx SetupDiGetActualSectionToInstallExW
#else
#define SetupDiGetActualSectionToInstallEx SetupDiGetActualSectionToInstallExA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP


#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// SetupEnumInfSections is for low-level parsing of an INF
//
WINSETUPAPI
BOOL
WINAPI
SetupEnumInfSectionsA (
    __in HINF InfHandle,
    __in UINT Index,
    __out_ecount_opt(Size) PSTR Buffer, 
    __in UINT Size,
    __out_opt UINT *SizeNeeded
    );

WINSETUPAPI
BOOL
WINAPI
SetupEnumInfSectionsW (
    __in HINF InfHandle,
    __in UINT Index,
    __out_ecount_opt(Size) PWSTR Buffer, 
    __in UINT Size,
    __out_opt UINT *SizeNeeded
    );

#ifdef UNICODE
#define SetupEnumInfSections SetupEnumInfSectionsW
#else
#define SetupEnumInfSections SetupEnumInfSectionsA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

typedef struct _SP_INF_SIGNER_INFO_V1_A {
    DWORD  cbSize;
    CHAR   CatalogFile[MAX_PATH];
    CHAR   DigitalSigner[MAX_PATH];
    CHAR   DigitalSignerVersion[MAX_PATH];
} SP_INF_SIGNER_INFO_V1_A, *PSP_INF_SIGNER_INFO_V1_A;

typedef struct _SP_INF_SIGNER_INFO_V1_W {
    DWORD  cbSize;
    WCHAR  CatalogFile[MAX_PATH];
    WCHAR  DigitalSigner[MAX_PATH];
    WCHAR  DigitalSignerVersion[MAX_PATH];
} SP_INF_SIGNER_INFO_V1_W, *PSP_INF_SIGNER_INFO_V1_W;

#ifdef UNICODE
typedef SP_INF_SIGNER_INFO_V1_W SP_INF_SIGNER_INFO_V1;
typedef PSP_INF_SIGNER_INFO_V1_W PSP_INF_SIGNER_INFO_V1;
#else
typedef SP_INF_SIGNER_INFO_V1_A SP_INF_SIGNER_INFO_V1;
typedef PSP_INF_SIGNER_INFO_V1_A PSP_INF_SIGNER_INFO_V1;
#endif

#if _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

typedef struct _SP_INF_SIGNER_INFO_V2_A {
    DWORD  cbSize;
    CHAR   CatalogFile[MAX_PATH];
    CHAR   DigitalSigner[MAX_PATH];
    CHAR   DigitalSignerVersion[MAX_PATH];
    DWORD  SignerScore;
} SP_INF_SIGNER_INFO_V2_A, *PSP_INF_SIGNER_INFO_V2_A;

typedef struct _SP_INF_SIGNER_INFO_V2_W {
    DWORD  cbSize;
    WCHAR  CatalogFile[MAX_PATH];
    WCHAR  DigitalSigner[MAX_PATH];
    WCHAR  DigitalSignerVersion[MAX_PATH];
    DWORD  SignerScore;
} SP_INF_SIGNER_INFO_V2_W, *PSP_INF_SIGNER_INFO_V2_W;

#ifdef UNICODE
typedef SP_INF_SIGNER_INFO_V2_W SP_INF_SIGNER_INFO_V2;
typedef PSP_INF_SIGNER_INFO_V2_W PSP_INF_SIGNER_INFO_V2;
#else
typedef SP_INF_SIGNER_INFO_V2_A SP_INF_SIGNER_INFO_V2;
typedef PSP_INF_SIGNER_INFO_V2_A PSP_INF_SIGNER_INFO_V2;
#endif

//
// Driver signer scores (high order bit of the signing byte means unsigned)
//
#define SIGNERSCORE_UNKNOWN         0xFF000000  
#define SIGNERSCORE_W9X_SUSPECT     0xC0000000  
#define SIGNERSCORE_UNSIGNED        0x80000000  
#define SIGNERSCORE_AUTHENTICODE    0x0F000000  
#define SIGNERSCORE_WHQL            0x0D000005  // base WHQL.
#define SIGNERSCORE_UNCLASSIFIED    0x0D000004  // UNCLASSIFIED == INBOX == STANDARD == PREMIUM when the SIGNERSCORE_MASK 
#define SIGNERSCORE_INBOX           0x0D000003  // filter is applied.
#define SIGNERSCORE_LOGO_STANDARD   0x0D000002  
#define SIGNERSCORE_LOGO_PREMIUM    0x0D000001  

#define SIGNERSCORE_MASK            0xFF000000  // Mask out all but the upper BYTE which contains the ranking signer information
#define SIGNERSCORE_SIGNED_MASK     0xF0000000  // Mask out only the upper nibble, which tells us if the package is signed or not.

#endif // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

#if USE_SP_INF_SIGNER_INFO_V1 || (_SETUPAPI_VER < _WIN32_WINNT_LONGHORN)  // use version 1 signer info structure

typedef SP_INF_SIGNER_INFO_V1_A SP_INF_SIGNER_INFO_A;
typedef PSP_INF_SIGNER_INFO_V1_A PSP_INF_SIGNER_INFO_A;
typedef SP_INF_SIGNER_INFO_V1_W SP_INF_SIGNER_INFO_W;
typedef PSP_INF_SIGNER_INFO_V1_W PSP_INF_SIGNER_INFO_W;
typedef SP_INF_SIGNER_INFO_V1 SP_INF_SIGNER_INFO;
typedef PSP_INF_SIGNER_INFO_V1 PSP_INF_SIGNER_INFO;

#else                       // use version 2 signer info structure

typedef SP_INF_SIGNER_INFO_V2_A SP_INF_SIGNER_INFO_A;
typedef PSP_INF_SIGNER_INFO_V2_A PSP_INF_SIGNER_INFO_A;
typedef SP_INF_SIGNER_INFO_V2_W SP_INF_SIGNER_INFO_W;
typedef PSP_INF_SIGNER_INFO_V2_W PSP_INF_SIGNER_INFO_W;
typedef SP_INF_SIGNER_INFO_V2 SP_INF_SIGNER_INFO;
typedef PSP_INF_SIGNER_INFO_V2 PSP_INF_SIGNER_INFO;

#endif  // use current version of signer info structure


WINSETUPAPI
BOOL
WINAPI
SetupVerifyInfFileA(
    __in PCSTR InfName,
    __in_opt PSP_ALTPLATFORM_INFO AltPlatformInfo,
    __inout PSP_INF_SIGNER_INFO_A InfSignerInfo
    );

WINSETUPAPI
BOOL
WINAPI
SetupVerifyInfFileW(
    __in PCWSTR InfName,
    __in_opt PSP_ALTPLATFORM_INFO AltPlatformInfo,
    __inout PSP_INF_SIGNER_INFO_W InfSignerInfo
    );

#ifdef UNICODE
#define SetupVerifyInfFile SetupVerifyInfFileW
#else
#define SetupVerifyInfFile SetupVerifyInfFileA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

#if _SETUPAPI_VER >= _WIN32_WINNT_WINXP

//
// Flags for use by SetupDiGetCustomDeviceProperty
//
#define DICUSTOMDEVPROP_MERGE_MULTISZ    0x00000001

WINSETUPAPI
BOOL
WINAPI
SetupDiGetCustomDevicePropertyA(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in PCSTR CustomPropertyName,
    __in DWORD Flags,
    __out_opt PDWORD PropertyRegDataType,
    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,
    __in DWORD PropertyBufferSize,
    __out_opt PDWORD RequiredSize
    );

WINSETUPAPI
BOOL
WINAPI
SetupDiGetCustomDevicePropertyW(
    __in HDEVINFO DeviceInfoSet,
    __in PSP_DEVINFO_DATA DeviceInfoData,
    __in PCWSTR CustomPropertyName,
    __in DWORD Flags,
    __out_opt PDWORD PropertyRegDataType,
    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,
    __in DWORD PropertyBufferSize,
    __out_opt PDWORD RequiredSize
    );

#ifdef UNICODE
#define SetupDiGetCustomDeviceProperty SetupDiGetCustomDevicePropertyW
#else
#define SetupDiGetCustomDeviceProperty SetupDiGetCustomDevicePropertyA
#endif

#endif // _SETUPAPI_VER >= _WIN32_WINNT_WINXP


#if _SETUPAPI_VER >= _WIN32_WINNT_WS03

//
// To configure WMI security for downlevel platforms where the [DDInstall.WMI]
// section isn't natively supported by setupapi, a redistributable co-installer
// is supplied in the DDK for use on those platforms.
//

//
// Flags for use by SetupConfigureWmiFromInfSection
//
#define SCWMI_CLOBBER_SECURITY  0x00000001

WINSETUPAPI
BOOL
WINAPI
SetupConfigureWmiFromInfSectionA(
    __in HINF InfHandle,
    __in PCSTR SectionName,
    __in DWORD Flags
    );

WINSETUPAPI
BOOL
WINAPI
SetupConfigureWmiFromInfSectionW(
    __in HINF InfHandle,
    __in PCWSTR SectionName,
    __in DWORD Flags
    );

#ifdef UNICODE
#define SetupConfigureWmiFromInfSection SetupConfigureWmiFromInfSectionW
#else
#define SetupConfigureWmiFromInfSection SetupConfigureWmiFromInfSectionA
#endif


#endif // _SETUPAPI_VER >= _WIN32_WINNT_WS03



#ifdef __cplusplus
}
#endif

#include <poppack.h>

#if defined (_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif

#endif // _INC_SETUPAPI
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\ShFolder.h ===
// functions to get shell special folders/
// shfolder.dll supports these on all platforms including Win95, Win98, NT4 and IE4 shell

// all CSIDL values referred to here are supported natively by shfolder.dll, that is they
// will work on all platforms.

#pragma once

#ifndef _SHFOLDER_H_
#define _SHFOLDER_H_

#include <SpecStrings.h>

#ifndef SHFOLDERAPI
#if defined(_SHFOLDER_)
#define SHFOLDERAPI           STDAPI
#else
#define SHFOLDERAPI           EXTERN_C DECLSPEC_IMPORT HRESULT STDAPICALLTYPE
#endif
#endif

#ifndef CSIDL_PERSONAL
#define CSIDL_PERSONAL                  0x0005      // My Documents
#endif

#ifndef CSIDL_MYMUSIC
#define CSIDL_MYMUSIC                   0x000d        // "My Music" folder
#endif

#ifndef CSIDL_APPDATA
#define CSIDL_APPDATA                   0x001a      // Application Data, new for NT4
#endif

#ifndef CSIDL_LOCAL_APPDATA

#define CSIDL_LOCAL_APPDATA             0x001c      // non roaming, user\Local Settings\Application Data
#define CSIDL_INTERNET_CACHE            0x0020
#define CSIDL_COOKIES                   0x0021
#define CSIDL_HISTORY                   0x0022
#define CSIDL_COMMON_APPDATA            0x0023      // All Users\Application Data
#define CSIDL_WINDOWS                   0x0024      // GetWindowsDirectory()
#define CSIDL_SYSTEM                    0x0025      // GetSystemDirectory()
#define CSIDL_PROGRAM_FILES             0x0026      // C:\Program Files
#define CSIDL_MYPICTURES                0x0027      // My Pictures, new for Win2K
#define CSIDL_PROGRAM_FILES_COMMON      0x002b      // C:\Program Files\Common 
#define CSIDL_COMMON_DOCUMENTS          0x002e      // All Users\Documents
#define CSIDL_RESOURCES                 0x0038      // %windir%\Resources\, For theme and other windows resources.
#define CSIDL_RESOURCES_LOCALIZED       0x0039      // %windir%\Resources\<LangID>, for theme and other windows specific resources.


#define CSIDL_FLAG_CREATE               0x8000      // new for Win2K, or this in to force creation of folder

#define CSIDL_COMMON_ADMINTOOLS         0x002f      // All Users\Start Menu\Programs\Administrative Tools
#define CSIDL_ADMINTOOLS                0x0030      // <user name>\Start Menu\Programs\Administrative Tools

#endif // CSIDL_LOCAL_APPDATA


SHFOLDERAPI SHGetFolderPathA(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, __out_ecount(MAX_PATH) LPSTR pszPath);
SHFOLDERAPI SHGetFolderPathW(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, __out_ecount(MAX_PATH) LPWSTR pszPath);

// protos so callers can GetProcAddress() from shfolder.dll

typedef HRESULT (__stdcall * PFNSHGETFOLDERPATHA)(HWND, int, HANDLE, DWORD, LPSTR);  // "SHGetFolderPathA"
typedef HRESULT (__stdcall * PFNSHGETFOLDERPATHW)(HWND, int, HANDLE, DWORD, LPWSTR); // "SHGetFolderPathW"

#ifdef UNICODE
#define SHGetFolderPath     SHGetFolderPathW
#define PFNSHGETFOLDERPATH  PFNSHGETFOLDERPATHW
#else
#define SHGetFolderPath     SHGetFolderPathA
#define PFNSHGETFOLDERPATH  PFNSHGETFOLDERPATHA
#endif

#endif //  _SHFOLDER_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\SensEvts.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for sensevts.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __sensevts_h__
#define __sensevts_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ISensNetwork_FWD_DEFINED__
#define __ISensNetwork_FWD_DEFINED__
typedef interface ISensNetwork ISensNetwork;
#endif 	/* __ISensNetwork_FWD_DEFINED__ */


#ifndef __ISensOnNow_FWD_DEFINED__
#define __ISensOnNow_FWD_DEFINED__
typedef interface ISensOnNow ISensOnNow;
#endif 	/* __ISensOnNow_FWD_DEFINED__ */


#ifndef __ISensLogon_FWD_DEFINED__
#define __ISensLogon_FWD_DEFINED__
typedef interface ISensLogon ISensLogon;
#endif 	/* __ISensLogon_FWD_DEFINED__ */


#ifndef __ISensLogon2_FWD_DEFINED__
#define __ISensLogon2_FWD_DEFINED__
typedef interface ISensLogon2 ISensLogon2;
#endif 	/* __ISensLogon2_FWD_DEFINED__ */


#ifndef __SENS_FWD_DEFINED__
#define __SENS_FWD_DEFINED__

#ifdef __cplusplus
typedef class SENS SENS;
#else
typedef struct SENS SENS;
#endif /* __cplusplus */

#endif 	/* __SENS_FWD_DEFINED__ */


/* header files for imported files */
#include "wtypes.h"

#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __SensEvents_LIBRARY_DEFINED__
#define __SensEvents_LIBRARY_DEFINED__

/* library SensEvents */
/* [helpstring][version][uuid] */ 

typedef /* [uuid] */  DECLSPEC_UUID("d597fad1-5b9f-11d1-8dd2-00aa004abd5e") struct SENS_QOCINFO
    {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwOutSpeed;
    DWORD dwInSpeed;
    } 	SENS_QOCINFO;

typedef SENS_QOCINFO *LPSENS_QOCINFO;


EXTERN_C const IID LIBID_SensEvents;

#ifndef __ISensNetwork_INTERFACE_DEFINED__
#define __ISensNetwork_INTERFACE_DEFINED__

/* interface ISensNetwork */
/* [dual][helpstring][version][uuid][object] */ 


EXTERN_C const IID IID_ISensNetwork;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d597bab1-5b9f-11d1-8dd2-00aa004abd5e")
    ISensNetwork : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ConnectionMade( 
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType,
            /* [in] */ __RPC__in LPSENS_QOCINFO lpQOCInfo) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ConnectionMadeNoQOCInfo( 
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ConnectionLost( 
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DestinationReachable( 
            /* [in] */ __RPC__in BSTR bstrDestination,
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType,
            /* [in] */ __RPC__in LPSENS_QOCINFO lpQOCInfo) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DestinationReachableNoQOCInfo( 
            /* [in] */ __RPC__in BSTR bstrDestination,
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISensNetworkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISensNetwork * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISensNetwork * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISensNetwork * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISensNetwork * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISensNetwork * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISensNetwork * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISensNetwork * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ConnectionMade )( 
            ISensNetwork * This,
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType,
            /* [in] */ __RPC__in LPSENS_QOCINFO lpQOCInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ConnectionMadeNoQOCInfo )( 
            ISensNetwork * This,
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ConnectionLost )( 
            ISensNetwork * This,
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DestinationReachable )( 
            ISensNetwork * This,
            /* [in] */ __RPC__in BSTR bstrDestination,
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType,
            /* [in] */ __RPC__in LPSENS_QOCINFO lpQOCInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DestinationReachableNoQOCInfo )( 
            ISensNetwork * This,
            /* [in] */ __RPC__in BSTR bstrDestination,
            /* [in] */ __RPC__in BSTR bstrConnection,
            /* [in] */ ULONG ulType);
        
        END_INTERFACE
    } ISensNetworkVtbl;

    interface ISensNetwork
    {
        CONST_VTBL struct ISensNetworkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISensNetwork_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISensNetwork_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISensNetwork_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISensNetwork_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISensNetwork_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISensNetwork_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISensNetwork_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISensNetwork_ConnectionMade(This,bstrConnection,ulType,lpQOCInfo)	\
    ( (This)->lpVtbl -> ConnectionMade(This,bstrConnection,ulType,lpQOCInfo) ) 

#define ISensNetwork_ConnectionMadeNoQOCInfo(This,bstrConnection,ulType)	\
    ( (This)->lpVtbl -> ConnectionMadeNoQOCInfo(This,bstrConnection,ulType) ) 

#define ISensNetwork_ConnectionLost(This,bstrConnection,ulType)	\
    ( (This)->lpVtbl -> ConnectionLost(This,bstrConnection,ulType) ) 

#define ISensNetwork_DestinationReachable(This,bstrDestination,bstrConnection,ulType,lpQOCInfo)	\
    ( (This)->lpVtbl -> DestinationReachable(This,bstrDestination,bstrConnection,ulType,lpQOCInfo) ) 

#define ISensNetwork_DestinationReachableNoQOCInfo(This,bstrDestination,bstrConnection,ulType)	\
    ( (This)->lpVtbl -> DestinationReachableNoQOCInfo(This,bstrDestination,bstrConnection,ulType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISensNetwork_INTERFACE_DEFINED__ */


#ifndef __ISensOnNow_INTERFACE_DEFINED__
#define __ISensOnNow_INTERFACE_DEFINED__

/* interface ISensOnNow */
/* [dual][helpstring][version][uuid][object] */ 


EXTERN_C const IID IID_ISensOnNow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d597bab2-5b9f-11d1-8dd2-00aa004abd5e")
    ISensOnNow : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnACPower( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnBatteryPower( 
            /* [in] */ DWORD dwBatteryLifePercent) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE BatteryLow( 
            /* [in] */ DWORD dwBatteryLifePercent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISensOnNowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISensOnNow * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISensOnNow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISensOnNow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISensOnNow * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISensOnNow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISensOnNow * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISensOnNow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnACPower )( 
            ISensOnNow * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnBatteryPower )( 
            ISensOnNow * This,
            /* [in] */ DWORD dwBatteryLifePercent);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BatteryLow )( 
            ISensOnNow * This,
            /* [in] */ DWORD dwBatteryLifePercent);
        
        END_INTERFACE
    } ISensOnNowVtbl;

    interface ISensOnNow
    {
        CONST_VTBL struct ISensOnNowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISensOnNow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISensOnNow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISensOnNow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISensOnNow_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISensOnNow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISensOnNow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISensOnNow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISensOnNow_OnACPower(This)	\
    ( (This)->lpVtbl -> OnACPower(This) ) 

#define ISensOnNow_OnBatteryPower(This,dwBatteryLifePercent)	\
    ( (This)->lpVtbl -> OnBatteryPower(This,dwBatteryLifePercent) ) 

#define ISensOnNow_BatteryLow(This,dwBatteryLifePercent)	\
    ( (This)->lpVtbl -> BatteryLow(This,dwBatteryLifePercent) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISensOnNow_INTERFACE_DEFINED__ */


#ifndef __ISensLogon_INTERFACE_DEFINED__
#define __ISensLogon_INTERFACE_DEFINED__

/* interface ISensLogon */
/* [dual][helpstring][version][uuid][object] */ 


EXTERN_C const IID IID_ISensLogon;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d597bab3-5b9f-11d1-8dd2-00aa004abd5e")
    ISensLogon : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Logon( 
            /* [in] */ __RPC__in BSTR bstrUserName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Logoff( 
            /* [in] */ __RPC__in BSTR bstrUserName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartShell( 
            /* [in] */ __RPC__in BSTR bstrUserName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayLock( 
            /* [in] */ __RPC__in BSTR bstrUserName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayUnlock( 
            /* [in] */ __RPC__in BSTR bstrUserName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartScreenSaver( 
            /* [in] */ __RPC__in BSTR bstrUserName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StopScreenSaver( 
            /* [in] */ __RPC__in BSTR bstrUserName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISensLogonVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISensLogon * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISensLogon * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISensLogon * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISensLogon * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISensLogon * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISensLogon * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISensLogon * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Logon )( 
            ISensLogon * This,
            /* [in] */ __RPC__in BSTR bstrUserName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Logoff )( 
            ISensLogon * This,
            /* [in] */ __RPC__in BSTR bstrUserName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartShell )( 
            ISensLogon * This,
            /* [in] */ __RPC__in BSTR bstrUserName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayLock )( 
            ISensLogon * This,
            /* [in] */ __RPC__in BSTR bstrUserName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayUnlock )( 
            ISensLogon * This,
            /* [in] */ __RPC__in BSTR bstrUserName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartScreenSaver )( 
            ISensLogon * This,
            /* [in] */ __RPC__in BSTR bstrUserName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopScreenSaver )( 
            ISensLogon * This,
            /* [in] */ __RPC__in BSTR bstrUserName);
        
        END_INTERFACE
    } ISensLogonVtbl;

    interface ISensLogon
    {
        CONST_VTBL struct ISensLogonVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISensLogon_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISensLogon_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISensLogon_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISensLogon_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISensLogon_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISensLogon_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISensLogon_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISensLogon_Logon(This,bstrUserName)	\
    ( (This)->lpVtbl -> Logon(This,bstrUserName) ) 

#define ISensLogon_Logoff(This,bstrUserName)	\
    ( (This)->lpVtbl -> Logoff(This,bstrUserName) ) 

#define ISensLogon_StartShell(This,bstrUserName)	\
    ( (This)->lpVtbl -> StartShell(This,bstrUserName) ) 

#define ISensLogon_DisplayLock(This,bstrUserName)	\
    ( (This)->lpVtbl -> DisplayLock(This,bstrUserName) ) 

#define ISensLogon_DisplayUnlock(This,bstrUserName)	\
    ( (This)->lpVtbl -> DisplayUnlock(This,bstrUserName) ) 

#define ISensLogon_StartScreenSaver(This,bstrUserName)	\
    ( (This)->lpVtbl -> StartScreenSaver(This,bstrUserName) ) 

#define ISensLogon_StopScreenSaver(This,bstrUserName)	\
    ( (This)->lpVtbl -> StopScreenSaver(This,bstrUserName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISensLogon_INTERFACE_DEFINED__ */


#ifndef __ISensLogon2_INTERFACE_DEFINED__
#define __ISensLogon2_INTERFACE_DEFINED__

/* interface ISensLogon2 */
/* [dual][helpstring][version][uuid][object] */ 


EXTERN_C const IID IID_ISensLogon2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d597bab4-5b9f-11d1-8dd2-00aa004abd5e")
    ISensLogon2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Logon( 
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Logoff( 
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionDisconnect( 
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionReconnect( 
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PostShell( 
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISensLogon2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISensLogon2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISensLogon2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISensLogon2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISensLogon2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISensLogon2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISensLogon2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISensLogon2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Logon )( 
            ISensLogon2 * This,
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Logoff )( 
            ISensLogon2 * This,
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionDisconnect )( 
            ISensLogon2 * This,
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionReconnect )( 
            ISensLogon2 * This,
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PostShell )( 
            ISensLogon2 * This,
            /* [in] */ __RPC__in BSTR bstrUserName,
            /* [in] */ DWORD dwSessionId);
        
        END_INTERFACE
    } ISensLogon2Vtbl;

    interface ISensLogon2
    {
        CONST_VTBL struct ISensLogon2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISensLogon2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISensLogon2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISensLogon2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISensLogon2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISensLogon2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISensLogon2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISensLogon2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISensLogon2_Logon(This,bstrUserName,dwSessionId)	\
    ( (This)->lpVtbl -> Logon(This,bstrUserName,dwSessionId) ) 

#define ISensLogon2_Logoff(This,bstrUserName,dwSessionId)	\
    ( (This)->lpVtbl -> Logoff(This,bstrUserName,dwSessionId) ) 

#define ISensLogon2_SessionDisconnect(This,bstrUserName,dwSessionId)	\
    ( (This)->lpVtbl -> SessionDisconnect(This,bstrUserName,dwSessionId) ) 

#define ISensLogon2_SessionReconnect(This,bstrUserName,dwSessionId)	\
    ( (This)->lpVtbl -> SessionReconnect(This,bstrUserName,dwSessionId) ) 

#define ISensLogon2_PostShell(This,bstrUserName,dwSessionId)	\
    ( (This)->lpVtbl -> PostShell(This,bstrUserName,dwSessionId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISensLogon2_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SENS;

#ifdef __cplusplus

class DECLSPEC_UUID("d597cafe-5b9f-11d1-8dd2-00aa004abd5e")
SENS;
#endif
#endif /* __SensEvents_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\shappmgr.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for shappmgr.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __shappmgr_h__
#define __shappmgr_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IShellApp_FWD_DEFINED__
#define __IShellApp_FWD_DEFINED__
typedef interface IShellApp IShellApp;
#endif 	/* __IShellApp_FWD_DEFINED__ */


#ifndef __IPublishedApp_FWD_DEFINED__
#define __IPublishedApp_FWD_DEFINED__
typedef interface IPublishedApp IPublishedApp;
#endif 	/* __IPublishedApp_FWD_DEFINED__ */


#ifndef __IPublishedApp2_FWD_DEFINED__
#define __IPublishedApp2_FWD_DEFINED__
typedef interface IPublishedApp2 IPublishedApp2;
#endif 	/* __IPublishedApp2_FWD_DEFINED__ */


#ifndef __IEnumPublishedApps_FWD_DEFINED__
#define __IEnumPublishedApps_FWD_DEFINED__
typedef interface IEnumPublishedApps IEnumPublishedApps;
#endif 	/* __IEnumPublishedApps_FWD_DEFINED__ */


#ifndef __IAppPublisher_FWD_DEFINED__
#define __IAppPublisher_FWD_DEFINED__
typedef interface IAppPublisher IAppPublisher;
#endif 	/* __IAppPublisher_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "appmgmt.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_shappmgr_0000_0000 */
/* [local] */ 

#ifndef _SHAPPMGR_H_
#define _SHAPPMGR_H_


extern RPC_IF_HANDLE __MIDL_itf_shappmgr_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shappmgr_0000_0000_v0_0_s_ifspec;

#ifndef __IShellApp_INTERFACE_DEFINED__
#define __IShellApp_INTERFACE_DEFINED__

/* interface IShellApp */
/* [object][uuid] */ 

typedef 
enum _tagAppInfoFlags
    {	AIM_DISPLAYNAME	= 0x1,
	AIM_VERSION	= 0x2,
	AIM_PUBLISHER	= 0x4,
	AIM_PRODUCTID	= 0x8,
	AIM_REGISTEREDOWNER	= 0x10,
	AIM_REGISTEREDCOMPANY	= 0x20,
	AIM_LANGUAGE	= 0x40,
	AIM_SUPPORTURL	= 0x80,
	AIM_SUPPORTTELEPHONE	= 0x100,
	AIM_HELPLINK	= 0x200,
	AIM_INSTALLLOCATION	= 0x400,
	AIM_INSTALLSOURCE	= 0x800,
	AIM_INSTALLDATE	= 0x1000,
	AIM_CONTACT	= 0x4000,
	AIM_COMMENTS	= 0x8000,
	AIM_IMAGE	= 0x20000,
	AIM_READMEURL	= 0x40000,
	AIM_UPDATEINFOURL	= 0x80000
    } 	APPINFODATAFLAGS;

typedef struct _AppInfoData
    {
    DWORD cbSize;
    DWORD dwMask;
    LPWSTR pszDisplayName;
    LPWSTR pszVersion;
    LPWSTR pszPublisher;
    LPWSTR pszProductID;
    LPWSTR pszRegisteredOwner;
    LPWSTR pszRegisteredCompany;
    LPWSTR pszLanguage;
    LPWSTR pszSupportUrl;
    LPWSTR pszSupportTelephone;
    LPWSTR pszHelpLink;
    LPWSTR pszInstallLocation;
    LPWSTR pszInstallSource;
    LPWSTR pszInstallDate;
    LPWSTR pszContact;
    LPWSTR pszComments;
    LPWSTR pszImage;
    LPWSTR pszReadmeUrl;
    LPWSTR pszUpdateInfoUrl;
    } 	APPINFODATA;

typedef struct _AppInfoData *PAPPINFODATA;

typedef 
enum _tagAppActionFlags
    {	APPACTION_INSTALL	= 0x1,
	APPACTION_UNINSTALL	= 0x2,
	APPACTION_MODIFY	= 0x4,
	APPACTION_REPAIR	= 0x8,
	APPACTION_UPGRADE	= 0x10,
	APPACTION_CANGETSIZE	= 0x20,
	APPACTION_MODIFYREMOVE	= 0x80,
	APPACTION_ADDLATER	= 0x100,
	APPACTION_UNSCHEDULE	= 0x200
    } 	APPACTIONFLAGS;

typedef struct _tagSlowAppInfo
    {
    ULONGLONG ullSize;
    FILETIME ftLastUsed;
    int iTimesUsed;
    LPWSTR pszImage;
    } 	SLOWAPPINFO;

typedef struct _tagSlowAppInfo *PSLOWAPPINFO;


EXTERN_C const IID IID_IShellApp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A3E14960-935F-11D1-B8B8-006008059382")
    IShellApp : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAppInfo( 
            /* [out][in] */ __RPC__inout PAPPINFODATA pai) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPossibleActions( 
            /* [out] */ __RPC__out DWORD *pdwActions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSlowAppInfo( 
            /* [in] */ __RPC__in PSLOWAPPINFO psaid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCachedSlowAppInfo( 
            /* [in] */ __RPC__in PSLOWAPPINFO psaid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsInstalled( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IShellAppVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IShellApp * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IShellApp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IShellApp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAppInfo )( 
            IShellApp * This,
            /* [out][in] */ __RPC__inout PAPPINFODATA pai);
        
        HRESULT ( STDMETHODCALLTYPE *GetPossibleActions )( 
            IShellApp * This,
            /* [out] */ __RPC__out DWORD *pdwActions);
        
        HRESULT ( STDMETHODCALLTYPE *GetSlowAppInfo )( 
            IShellApp * This,
            /* [in] */ __RPC__in PSLOWAPPINFO psaid);
        
        HRESULT ( STDMETHODCALLTYPE *GetCachedSlowAppInfo )( 
            IShellApp * This,
            /* [in] */ __RPC__in PSLOWAPPINFO psaid);
        
        HRESULT ( STDMETHODCALLTYPE *IsInstalled )( 
            IShellApp * This);
        
        END_INTERFACE
    } IShellAppVtbl;

    interface IShellApp
    {
        CONST_VTBL struct IShellAppVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IShellApp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IShellApp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IShellApp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IShellApp_GetAppInfo(This,pai)	\
    ( (This)->lpVtbl -> GetAppInfo(This,pai) ) 

#define IShellApp_GetPossibleActions(This,pdwActions)	\
    ( (This)->lpVtbl -> GetPossibleActions(This,pdwActions) ) 

#define IShellApp_GetSlowAppInfo(This,psaid)	\
    ( (This)->lpVtbl -> GetSlowAppInfo(This,psaid) ) 

#define IShellApp_GetCachedSlowAppInfo(This,psaid)	\
    ( (This)->lpVtbl -> GetCachedSlowAppInfo(This,psaid) ) 

#define IShellApp_IsInstalled(This)	\
    ( (This)->lpVtbl -> IsInstalled(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IShellApp_INTERFACE_DEFINED__ */


#ifndef __IPublishedApp_INTERFACE_DEFINED__
#define __IPublishedApp_INTERFACE_DEFINED__

/* interface IPublishedApp */
/* [object][uuid] */ 

typedef 
enum _tagPublishedAppInfoFlags
    {	PAI_SOURCE	= 0x1,
	PAI_ASSIGNEDTIME	= 0x2,
	PAI_PUBLISHEDTIME	= 0x4,
	PAI_SCHEDULEDTIME	= 0x8,
	PAI_EXPIRETIME	= 0x10
    } 	PUBAPPINFOFLAGS;

typedef struct _PubAppInfo
    {
    DWORD cbSize;
    DWORD dwMask;
    LPWSTR pszSource;
    SYSTEMTIME stAssigned;
    SYSTEMTIME stPublished;
    SYSTEMTIME stScheduled;
    SYSTEMTIME stExpire;
    } 	PUBAPPINFO;

typedef struct _PubAppInfo *PPUBAPPINFO;


EXTERN_C const IID IID_IPublishedApp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1BC752E0-9046-11D1-B8B3-006008059382")
    IPublishedApp : public IShellApp
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Install( 
            /* [in] */ __RPC__in LPSYSTEMTIME pstInstall) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPublishedAppInfo( 
            /* [out][in] */ __RPC__inout PPUBAPPINFO ppai) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unschedule( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPublishedAppVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPublishedApp * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPublishedApp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPublishedApp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAppInfo )( 
            IPublishedApp * This,
            /* [out][in] */ __RPC__inout PAPPINFODATA pai);
        
        HRESULT ( STDMETHODCALLTYPE *GetPossibleActions )( 
            IPublishedApp * This,
            /* [out] */ __RPC__out DWORD *pdwActions);
        
        HRESULT ( STDMETHODCALLTYPE *GetSlowAppInfo )( 
            IPublishedApp * This,
            /* [in] */ __RPC__in PSLOWAPPINFO psaid);
        
        HRESULT ( STDMETHODCALLTYPE *GetCachedSlowAppInfo )( 
            IPublishedApp * This,
            /* [in] */ __RPC__in PSLOWAPPINFO psaid);
        
        HRESULT ( STDMETHODCALLTYPE *IsInstalled )( 
            IPublishedApp * This);
        
        HRESULT ( STDMETHODCALLTYPE *Install )( 
            IPublishedApp * This,
            /* [in] */ __RPC__in LPSYSTEMTIME pstInstall);
        
        HRESULT ( STDMETHODCALLTYPE *GetPublishedAppInfo )( 
            IPublishedApp * This,
            /* [out][in] */ __RPC__inout PPUBAPPINFO ppai);
        
        HRESULT ( STDMETHODCALLTYPE *Unschedule )( 
            IPublishedApp * This);
        
        END_INTERFACE
    } IPublishedAppVtbl;

    interface IPublishedApp
    {
        CONST_VTBL struct IPublishedAppVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPublishedApp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPublishedApp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPublishedApp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPublishedApp_GetAppInfo(This,pai)	\
    ( (This)->lpVtbl -> GetAppInfo(This,pai) ) 

#define IPublishedApp_GetPossibleActions(This,pdwActions)	\
    ( (This)->lpVtbl -> GetPossibleActions(This,pdwActions) ) 

#define IPublishedApp_GetSlowAppInfo(This,psaid)	\
    ( (This)->lpVtbl -> GetSlowAppInfo(This,psaid) ) 

#define IPublishedApp_GetCachedSlowAppInfo(This,psaid)	\
    ( (This)->lpVtbl -> GetCachedSlowAppInfo(This,psaid) ) 

#define IPublishedApp_IsInstalled(This)	\
    ( (This)->lpVtbl -> IsInstalled(This) ) 


#define IPublishedApp_Install(This,pstInstall)	\
    ( (This)->lpVtbl -> Install(This,pstInstall) ) 

#define IPublishedApp_GetPublishedAppInfo(This,ppai)	\
    ( (This)->lpVtbl -> GetPublishedAppInfo(This,ppai) ) 

#define IPublishedApp_Unschedule(This)	\
    ( (This)->lpVtbl -> Unschedule(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPublishedApp_INTERFACE_DEFINED__ */


#ifndef __IPublishedApp2_INTERFACE_DEFINED__
#define __IPublishedApp2_INTERFACE_DEFINED__

/* interface IPublishedApp2 */
/* [object][uuid] */ 


EXTERN_C const IID IID_IPublishedApp2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("12B81347-1B3A-4A04-AA61-3F768B67FD7E")
    IPublishedApp2 : public IPublishedApp
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Install2( 
            /* [unique][in] */ __RPC__in_opt LPSYSTEMTIME pstInstall,
            /* [unique][in] */ __RPC__in_opt HWND hwndParent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPublishedApp2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPublishedApp2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPublishedApp2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPublishedApp2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAppInfo )( 
            IPublishedApp2 * This,
            /* [out][in] */ __RPC__inout PAPPINFODATA pai);
        
        HRESULT ( STDMETHODCALLTYPE *GetPossibleActions )( 
            IPublishedApp2 * This,
            /* [out] */ __RPC__out DWORD *pdwActions);
        
        HRESULT ( STDMETHODCALLTYPE *GetSlowAppInfo )( 
            IPublishedApp2 * This,
            /* [in] */ __RPC__in PSLOWAPPINFO psaid);
        
        HRESULT ( STDMETHODCALLTYPE *GetCachedSlowAppInfo )( 
            IPublishedApp2 * This,
            /* [in] */ __RPC__in PSLOWAPPINFO psaid);
        
        HRESULT ( STDMETHODCALLTYPE *IsInstalled )( 
            IPublishedApp2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Install )( 
            IPublishedApp2 * This,
            /* [in] */ __RPC__in LPSYSTEMTIME pstInstall);
        
        HRESULT ( STDMETHODCALLTYPE *GetPublishedAppInfo )( 
            IPublishedApp2 * This,
            /* [out][in] */ __RPC__inout PPUBAPPINFO ppai);
        
        HRESULT ( STDMETHODCALLTYPE *Unschedule )( 
            IPublishedApp2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Install2 )( 
            IPublishedApp2 * This,
            /* [unique][in] */ __RPC__in_opt LPSYSTEMTIME pstInstall,
            /* [unique][in] */ __RPC__in_opt HWND hwndParent);
        
        END_INTERFACE
    } IPublishedApp2Vtbl;

    interface IPublishedApp2
    {
        CONST_VTBL struct IPublishedApp2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPublishedApp2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPublishedApp2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPublishedApp2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPublishedApp2_GetAppInfo(This,pai)	\
    ( (This)->lpVtbl -> GetAppInfo(This,pai) ) 

#define IPublishedApp2_GetPossibleActions(This,pdwActions)	\
    ( (This)->lpVtbl -> GetPossibleActions(This,pdwActions) ) 

#define IPublishedApp2_GetSlowAppInfo(This,psaid)	\
    ( (This)->lpVtbl -> GetSlowAppInfo(This,psaid) ) 

#define IPublishedApp2_GetCachedSlowAppInfo(This,psaid)	\
    ( (This)->lpVtbl -> GetCachedSlowAppInfo(This,psaid) ) 

#define IPublishedApp2_IsInstalled(This)	\
    ( (This)->lpVtbl -> IsInstalled(This) ) 


#define IPublishedApp2_Install(This,pstInstall)	\
    ( (This)->lpVtbl -> Install(This,pstInstall) ) 

#define IPublishedApp2_GetPublishedAppInfo(This,ppai)	\
    ( (This)->lpVtbl -> GetPublishedAppInfo(This,ppai) ) 

#define IPublishedApp2_Unschedule(This)	\
    ( (This)->lpVtbl -> Unschedule(This) ) 


#define IPublishedApp2_Install2(This,pstInstall,hwndParent)	\
    ( (This)->lpVtbl -> Install2(This,pstInstall,hwndParent) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPublishedApp2_INTERFACE_DEFINED__ */


#ifndef __IEnumPublishedApps_INTERFACE_DEFINED__
#define __IEnumPublishedApps_INTERFACE_DEFINED__

/* interface IEnumPublishedApps */
/* [object][uuid] */ 


EXTERN_C const IID IID_IEnumPublishedApps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0B124F8C-91F0-11D1-B8B5-006008059382")
    IEnumPublishedApps : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [out] */ __RPC__deref_out_opt IPublishedApp **pia) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumPublishedAppsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumPublishedApps * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumPublishedApps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumPublishedApps * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumPublishedApps * This,
            /* [out] */ __RPC__deref_out_opt IPublishedApp **pia);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumPublishedApps * This);
        
        END_INTERFACE
    } IEnumPublishedAppsVtbl;

    interface IEnumPublishedApps
    {
        CONST_VTBL struct IEnumPublishedAppsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumPublishedApps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumPublishedApps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumPublishedApps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumPublishedApps_Next(This,pia)	\
    ( (This)->lpVtbl -> Next(This,pia) ) 

#define IEnumPublishedApps_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumPublishedApps_INTERFACE_DEFINED__ */


#ifndef __IAppPublisher_INTERFACE_DEFINED__
#define __IAppPublisher_INTERFACE_DEFINED__

/* interface IAppPublisher */
/* [object][uuid] */ 


EXTERN_C const IID IID_IAppPublisher;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("07250A10-9CF9-11D1-9076-006008059382")
    IAppPublisher : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNumberOfCategories( 
            /* [out] */ __RPC__out DWORD *pdwCat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCategories( 
            /* [out] */ __RPC__out APPCATEGORYINFOLIST *pAppCategoryList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNumberOfApps( 
            /* [out] */ __RPC__out DWORD *pdwApps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumApps( 
            /* [unique][in] */ __RPC__in_opt GUID *pAppCategoryId,
            /* [out] */ __RPC__deref_out_opt IEnumPublishedApps **ppepa) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAppPublisherVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAppPublisher * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAppPublisher * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAppPublisher * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumberOfCategories )( 
            IAppPublisher * This,
            /* [out] */ __RPC__out DWORD *pdwCat);
        
        HRESULT ( STDMETHODCALLTYPE *GetCategories )( 
            IAppPublisher * This,
            /* [out] */ __RPC__out APPCATEGORYINFOLIST *pAppCategoryList);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumberOfApps )( 
            IAppPublisher * This,
            /* [out] */ __RPC__out DWORD *pdwApps);
        
        HRESULT ( STDMETHODCALLTYPE *EnumApps )( 
            IAppPublisher * This,
            /* [unique][in] */ __RPC__in_opt GUID *pAppCategoryId,
            /* [out] */ __RPC__deref_out_opt IEnumPublishedApps **ppepa);
        
        END_INTERFACE
    } IAppPublisherVtbl;

    interface IAppPublisher
    {
        CONST_VTBL struct IAppPublisherVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAppPublisher_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAppPublisher_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAppPublisher_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAppPublisher_GetNumberOfCategories(This,pdwCat)	\
    ( (This)->lpVtbl -> GetNumberOfCategories(This,pdwCat) ) 

#define IAppPublisher_GetCategories(This,pAppCategoryList)	\
    ( (This)->lpVtbl -> GetCategories(This,pAppCategoryList) ) 

#define IAppPublisher_GetNumberOfApps(This,pdwApps)	\
    ( (This)->lpVtbl -> GetNumberOfApps(This,pdwApps) ) 

#define IAppPublisher_EnumApps(This,pAppCategoryId,ppepa)	\
    ( (This)->lpVtbl -> EnumApps(This,pAppCategoryId,ppepa) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAppPublisher_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shappmgr_0000_0005 */
/* [local] */ 

#endif // _SHAPPMGR_H_


extern RPC_IF_HANDLE __MIDL_itf_shappmgr_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shappmgr_0000_0005_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __RPC_USER  HWND_UserSize64(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal64(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree64(     unsigned long *, HWND * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\shdeprecated.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for shdeprecated.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __shdeprecated_h__
#define __shdeprecated_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ITravelEntry_FWD_DEFINED__
#define __ITravelEntry_FWD_DEFINED__
typedef interface ITravelEntry ITravelEntry;
#endif 	/* __ITravelEntry_FWD_DEFINED__ */


#ifndef __ITravelLog_FWD_DEFINED__
#define __ITravelLog_FWD_DEFINED__
typedef interface ITravelLog ITravelLog;
#endif 	/* __ITravelLog_FWD_DEFINED__ */


#ifndef __IExpDispSupportXP_FWD_DEFINED__
#define __IExpDispSupportXP_FWD_DEFINED__
typedef interface IExpDispSupportXP IExpDispSupportXP;
#endif 	/* __IExpDispSupportXP_FWD_DEFINED__ */


#ifndef __IExpDispSupport_FWD_DEFINED__
#define __IExpDispSupport_FWD_DEFINED__
typedef interface IExpDispSupport IExpDispSupport;
#endif 	/* __IExpDispSupport_FWD_DEFINED__ */


#ifndef __IBrowserService_FWD_DEFINED__
#define __IBrowserService_FWD_DEFINED__
typedef interface IBrowserService IBrowserService;
#endif 	/* __IBrowserService_FWD_DEFINED__ */


#ifndef __IShellService_FWD_DEFINED__
#define __IShellService_FWD_DEFINED__
typedef interface IShellService IShellService;
#endif 	/* __IShellService_FWD_DEFINED__ */


#ifndef __IBrowserService2_FWD_DEFINED__
#define __IBrowserService2_FWD_DEFINED__
typedef interface IBrowserService2 IBrowserService2;
#endif 	/* __IBrowserService2_FWD_DEFINED__ */


#ifndef __IBrowserService3_FWD_DEFINED__
#define __IBrowserService3_FWD_DEFINED__
typedef interface IBrowserService3 IBrowserService3;
#endif 	/* __IBrowserService3_FWD_DEFINED__ */


#ifndef __IBrowserService4_FWD_DEFINED__
#define __IBrowserService4_FWD_DEFINED__
typedef interface IBrowserService4 IBrowserService4;
#endif 	/* __IBrowserService4_FWD_DEFINED__ */


#ifndef __ITrackShellMenu_FWD_DEFINED__
#define __ITrackShellMenu_FWD_DEFINED__
typedef interface ITrackShellMenu ITrackShellMenu;
#endif 	/* __ITrackShellMenu_FWD_DEFINED__ */


#ifndef __TrackShellMenu_FWD_DEFINED__
#define __TrackShellMenu_FWD_DEFINED__

#ifdef __cplusplus
typedef class TrackShellMenu TrackShellMenu;
#else
typedef struct TrackShellMenu TrackShellMenu;
#endif /* __cplusplus */

#endif 	/* __TrackShellMenu_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "ocidl.h"
#include "shtypes.h"
#include "tlogstg.h"
#include "shobjidl.h"
#include "hlink.h"
#include "exdisp.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_shdeprecated_0000_0000 */
/* [local] */ 

#define TLOG_BACK  -1
#define TLOG_FORE   1

#define TLMENUF_INCLUDECURRENT      0x00000001
#define TLMENUF_CHECKCURRENT        (TLMENUF_INCLUDECURRENT | 0x00000002)
#define TLMENUF_BACK                0x00000010  // Default
#define TLMENUF_FORE                0x00000020
#define TLMENUF_BACKANDFORTH        (TLMENUF_BACK | TLMENUF_FORE | TLMENUF_INCLUDECURRENT)



extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0000_v0_0_s_ifspec;

#ifndef __ITravelEntry_INTERFACE_DEFINED__
#define __ITravelEntry_INTERFACE_DEFINED__

/* interface ITravelEntry */
/* [helpcontext][helpstring][hidden][object][uuid] */ 


EXTERN_C const IID IID_ITravelEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F46EDB3B-BC2F-11d0-9412-00AA00A3EBD3")
    ITravelEntry : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Update( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ BOOL fIsLocalAnchor) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetPidl( 
            /* [out] */ __RPC__deref_out_opt PIDLIST_ABSOLUTE *ppidl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITravelEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITravelEntry * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITravelEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITravelEntry * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITravelEntry * This,
            /* [in] */ __RPC__in_opt IUnknown *punk);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            ITravelEntry * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ BOOL fIsLocalAnchor);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPidl )( 
            ITravelEntry * This,
            /* [out] */ __RPC__deref_out_opt PIDLIST_ABSOLUTE *ppidl);
        
        END_INTERFACE
    } ITravelEntryVtbl;

    interface ITravelEntry
    {
        CONST_VTBL struct ITravelEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITravelEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITravelEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITravelEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITravelEntry_Invoke(This,punk)	\
    ( (This)->lpVtbl -> Invoke(This,punk) ) 

#define ITravelEntry_Update(This,punk,fIsLocalAnchor)	\
    ( (This)->lpVtbl -> Update(This,punk,fIsLocalAnchor) ) 

#define ITravelEntry_GetPidl(This,ppidl)	\
    ( (This)->lpVtbl -> GetPidl(This,ppidl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITravelEntry_INTERFACE_DEFINED__ */


#ifndef __ITravelLog_INTERFACE_DEFINED__
#define __ITravelLog_INTERFACE_DEFINED__

/* interface ITravelLog */
/* [helpcontext][helpstring][hidden][object][uuid] */ 


EXTERN_C const IID IID_ITravelLog;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66A9CB08-4802-11d2-A561-00A0C92DBFE8")
    ITravelLog : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddEntry( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ BOOL fIsLocalAnchor) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE UpdateEntry( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ BOOL fIsLocalAnchor) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE UpdateExternal( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ __RPC__in_opt IUnknown *punkHLBrowseContext) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Travel( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ int iOffset) = 0;
        
        virtual /* [local][helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetTravelEntry( 
            /* [in] */ IUnknown *punk,
            /* [in] */ int iOffset,
            /* [out] */ 
            __out_opt  ITravelEntry **ppte) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindTravelEntry( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ __RPC__in PCIDLIST_ABSOLUTE pidl,
            /* [out] */ __RPC__deref_out_opt ITravelEntry **ppte) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetToolTipText( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ int iOffset,
            /* [in] */ int idsTemplate,
            /* [size_is][out] */ __RPC__out_ecount_full(cchText) LPWSTR pwzText,
            /* [in] */ DWORD cchText) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE InsertMenuEntries( 
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ __RPC__in HMENU hmenu,
            /* [in] */ int nPos,
            /* [in] */ int idFirst,
            /* [in] */ int idLast,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt ITravelLog **pptl) = 0;
        
        virtual /* [local][helpcontext][helpstring] */ DWORD STDMETHODCALLTYPE CountEntries( 
            /* [in] */ IUnknown *punk) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Revert( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITravelLogVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITravelLog * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITravelLog * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITravelLog * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddEntry )( 
            ITravelLog * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ BOOL fIsLocalAnchor);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *UpdateEntry )( 
            ITravelLog * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ BOOL fIsLocalAnchor);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *UpdateExternal )( 
            ITravelLog * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ __RPC__in_opt IUnknown *punkHLBrowseContext);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Travel )( 
            ITravelLog * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ int iOffset);
        
        /* [local][helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTravelEntry )( 
            ITravelLog * This,
            /* [in] */ IUnknown *punk,
            /* [in] */ int iOffset,
            /* [out] */ 
            __out_opt  ITravelEntry **ppte);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindTravelEntry )( 
            ITravelLog * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ __RPC__in PCIDLIST_ABSOLUTE pidl,
            /* [out] */ __RPC__deref_out_opt ITravelEntry **ppte);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetToolTipText )( 
            ITravelLog * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ int iOffset,
            /* [in] */ int idsTemplate,
            /* [size_is][out] */ __RPC__out_ecount_full(cchText) LPWSTR pwzText,
            /* [in] */ DWORD cchText);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertMenuEntries )( 
            ITravelLog * This,
            /* [in] */ __RPC__in_opt IUnknown *punk,
            /* [in] */ __RPC__in HMENU hmenu,
            /* [in] */ int nPos,
            /* [in] */ int idFirst,
            /* [in] */ int idLast,
            /* [in] */ DWORD dwFlags);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Clone )( 
            ITravelLog * This,
            /* [out] */ __RPC__deref_out_opt ITravelLog **pptl);
        
        /* [local][helpcontext][helpstring] */ DWORD ( STDMETHODCALLTYPE *CountEntries )( 
            ITravelLog * This,
            /* [in] */ IUnknown *punk);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Revert )( 
            ITravelLog * This);
        
        END_INTERFACE
    } ITravelLogVtbl;

    interface ITravelLog
    {
        CONST_VTBL struct ITravelLogVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITravelLog_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITravelLog_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITravelLog_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITravelLog_AddEntry(This,punk,fIsLocalAnchor)	\
    ( (This)->lpVtbl -> AddEntry(This,punk,fIsLocalAnchor) ) 

#define ITravelLog_UpdateEntry(This,punk,fIsLocalAnchor)	\
    ( (This)->lpVtbl -> UpdateEntry(This,punk,fIsLocalAnchor) ) 

#define ITravelLog_UpdateExternal(This,punk,punkHLBrowseContext)	\
    ( (This)->lpVtbl -> UpdateExternal(This,punk,punkHLBrowseContext) ) 

#define ITravelLog_Travel(This,punk,iOffset)	\
    ( (This)->lpVtbl -> Travel(This,punk,iOffset) ) 

#define ITravelLog_GetTravelEntry(This,punk,iOffset,ppte)	\
    ( (This)->lpVtbl -> GetTravelEntry(This,punk,iOffset,ppte) ) 

#define ITravelLog_FindTravelEntry(This,punk,pidl,ppte)	\
    ( (This)->lpVtbl -> FindTravelEntry(This,punk,pidl,ppte) ) 

#define ITravelLog_GetToolTipText(This,punk,iOffset,idsTemplate,pwzText,cchText)	\
    ( (This)->lpVtbl -> GetToolTipText(This,punk,iOffset,idsTemplate,pwzText,cchText) ) 

#define ITravelLog_InsertMenuEntries(This,punk,hmenu,nPos,idFirst,idLast,dwFlags)	\
    ( (This)->lpVtbl -> InsertMenuEntries(This,punk,hmenu,nPos,idFirst,idLast,dwFlags) ) 

#define ITravelLog_Clone(This,pptl)	\
    ( (This)->lpVtbl -> Clone(This,pptl) ) 

#define ITravelLog_CountEntries(This,punk)	\
    ( (This)->lpVtbl -> CountEntries(This,punk) ) 

#define ITravelLog_Revert(This)	\
    ( (This)->lpVtbl -> Revert(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE ITravelLog_RemoteGetTravelEntry_Proxy( 
    ITravelLog * This,
    /* [in] */ __RPC__in_opt IUnknown *punk,
    /* [in] */ int iOffset,
    /* [out] */ __RPC__deref_out_opt ITravelEntry **ppte);


void __RPC_STUB ITravelLog_RemoteGetTravelEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITravelLog_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shdeprecated_0000_0002 */
/* [local] */ 

#ifdef __cplusplus
class CIE4ConnectionPoint : public IConnectionPoint
{
    // This is how you actually fire the events
    // Those called by shell32 are virtual
    virtual HRESULT DoInvokeIE4(BOOL *pf, void **ppv, DISPID dispid, DISPPARAMS *pdispparams) PURE;
    // This helper function does work that callers of DoInvoke often need done
    virtual HRESULT DoInvokePIDLIE4(DISPID dispid, PCIDLIST_ABSOLUTE pidl, BOOL fCanCancel) PURE;
};
#else // !__cplusplus
typedef void *CIE4ConnectionPoint;

#endif// !__cplusplus


extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0002_v0_0_s_ifspec;

#ifndef __IExpDispSupportXP_INTERFACE_DEFINED__
#define __IExpDispSupportXP_INTERFACE_DEFINED__

/* interface IExpDispSupportXP */
/* [local][object][uuid] */ 


EXTERN_C const IID IID_IExpDispSupportXP;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2f0dd58c-f789-4f14-99fb-9293b3c9c212")
    IExpDispSupportXP : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FindCIE4ConnectionPoint( 
            /* [in] */ 
            __in  REFIID riid,
            /* [out] */ 
            __deref_out  CIE4ConnectionPoint **ppccp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTranslateAccelerator( 
            /* [in] */ 
            __in  MSG *pMsg,
            /* [in] */ 
            __in  DWORD grfModifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInvoke( 
            /* [in] */ 
            __in  DISPID dispidMember,
            /* [in] */ 
            __in  REFIID iid,
            /* [in] */ 
            __in  LCID lcid,
            /* [in] */ 
            __in  WORD wFlags,
            /* [in] */ 
            __in  DISPPARAMS *pdispparams,
            /* [out] */ 
            __out  VARIANT *pVarResult,
            /* [out] */ 
            __out  EXCEPINFO *pexcepinfo,
            /* [out] */ 
            __out  UINT *puArgErr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExpDispSupportXPVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExpDispSupportXP * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExpDispSupportXP * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExpDispSupportXP * This);
        
        HRESULT ( STDMETHODCALLTYPE *FindCIE4ConnectionPoint )( 
            IExpDispSupportXP * This,
            /* [in] */ 
            __in  REFIID riid,
            /* [out] */ 
            __deref_out  CIE4ConnectionPoint **ppccp);
        
        HRESULT ( STDMETHODCALLTYPE *OnTranslateAccelerator )( 
            IExpDispSupportXP * This,
            /* [in] */ 
            __in  MSG *pMsg,
            /* [in] */ 
            __in  DWORD grfModifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnInvoke )( 
            IExpDispSupportXP * This,
            /* [in] */ 
            __in  DISPID dispidMember,
            /* [in] */ 
            __in  REFIID iid,
            /* [in] */ 
            __in  LCID lcid,
            /* [in] */ 
            __in  WORD wFlags,
            /* [in] */ 
            __in  DISPPARAMS *pdispparams,
            /* [out] */ 
            __out  VARIANT *pVarResult,
            /* [out] */ 
            __out  EXCEPINFO *pexcepinfo,
            /* [out] */ 
            __out  UINT *puArgErr);
        
        END_INTERFACE
    } IExpDispSupportXPVtbl;

    interface IExpDispSupportXP
    {
        CONST_VTBL struct IExpDispSupportXPVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExpDispSupportXP_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExpDispSupportXP_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExpDispSupportXP_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExpDispSupportXP_FindCIE4ConnectionPoint(This,riid,ppccp)	\
    ( (This)->lpVtbl -> FindCIE4ConnectionPoint(This,riid,ppccp) ) 

#define IExpDispSupportXP_OnTranslateAccelerator(This,pMsg,grfModifiers)	\
    ( (This)->lpVtbl -> OnTranslateAccelerator(This,pMsg,grfModifiers) ) 

#define IExpDispSupportXP_OnInvoke(This,dispidMember,iid,lcid,wFlags,pdispparams,pVarResult,pexcepinfo,puArgErr)	\
    ( (This)->lpVtbl -> OnInvoke(This,dispidMember,iid,lcid,wFlags,pdispparams,pVarResult,pexcepinfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExpDispSupportXP_INTERFACE_DEFINED__ */


#ifndef __IExpDispSupport_INTERFACE_DEFINED__
#define __IExpDispSupport_INTERFACE_DEFINED__

/* interface IExpDispSupport */
/* [local][object][uuid] */ 


EXTERN_C const IID IID_IExpDispSupport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0D7D1D00-6FC0-11D0-A974-00C04FD705A2")
    IExpDispSupport : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FindConnectionPoint( 
            /* [in] */ 
            __in  REFIID riid,
            /* [out] */ 
            __deref_out  IConnectionPoint **ppccp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTranslateAccelerator( 
            /* [in] */ 
            __in  MSG *pMsg,
            /* [in] */ 
            __in  DWORD grfModifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInvoke( 
            /* [in] */ 
            __in  DISPID dispidMember,
            /* [in] */ 
            __in  REFIID iid,
            /* [in] */ 
            __in  LCID lcid,
            /* [in] */ 
            __in  WORD wFlags,
            /* [in] */ 
            __in  DISPPARAMS *pdispparams,
            /* [out] */ 
            __out  VARIANT *pVarResult,
            /* [out] */ 
            __out  EXCEPINFO *pexcepinfo,
            /* [out] */ 
            __out  UINT *puArgErr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExpDispSupportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExpDispSupport * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExpDispSupport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExpDispSupport * This);
        
        HRESULT ( STDMETHODCALLTYPE *FindConnectionPoint )( 
            IExpDispSupport * This,
            /* [in] */ 
            __in  REFIID riid,
            /* [out] */ 
            __deref_out  IConnectionPoint **ppccp);
        
        HRESULT ( STDMETHODCALLTYPE *OnTranslateAccelerator )( 
            IExpDispSupport * This,
            /* [in] */ 
            __in  MSG *pMsg,
            /* [in] */ 
            __in  DWORD grfModifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnInvoke )( 
            IExpDispSupport * This,
            /* [in] */ 
            __in  DISPID dispidMember,
            /* [in] */ 
            __in  REFIID iid,
            /* [in] */ 
            __in  LCID lcid,
            /* [in] */ 
            __in  WORD wFlags,
            /* [in] */ 
            __in  DISPPARAMS *pdispparams,
            /* [out] */ 
            __out  VARIANT *pVarResult,
            /* [out] */ 
            __out  EXCEPINFO *pexcepinfo,
            /* [out] */ 
            __out  UINT *puArgErr);
        
        END_INTERFACE
    } IExpDispSupportVtbl;

    interface IExpDispSupport
    {
        CONST_VTBL struct IExpDispSupportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExpDispSupport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExpDispSupport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExpDispSupport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExpDispSupport_FindConnectionPoint(This,riid,ppccp)	\
    ( (This)->lpVtbl -> FindConnectionPoint(This,riid,ppccp) ) 

#define IExpDispSupport_OnTranslateAccelerator(This,pMsg,grfModifiers)	\
    ( (This)->lpVtbl -> OnTranslateAccelerator(This,pMsg,grfModifiers) ) 

#define IExpDispSupport_OnInvoke(This,dispidMember,iid,lcid,wFlags,pdispparams,pVarResult,pexcepinfo,puArgErr)	\
    ( (This)->lpVtbl -> OnInvoke(This,dispidMember,iid,lcid,wFlags,pdispparams,pVarResult,pexcepinfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExpDispSupport_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shdeprecated_0000_0004 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum tagBNSTATE
    {	BNS_NORMAL	= 0,
	BNS_BEGIN_NAVIGATE	= 1,
	BNS_NAVIGATE	= 2
    } 	BNSTATE;


enum __MIDL___MIDL_itf_shdeprecated_0000_0004_0001
    {	SBSC_HIDE	= 0,
	SBSC_SHOW	= 1,
	SBSC_TOGGLE	= 2,
	SBSC_QUERY	= 3
    } ;
//  values for IBrowserService::Get/SetFlags()
#define BSF_REGISTERASDROPTARGET   0x00000001
#define BSF_THEATERMODE            0x00000002
#define BSF_NOLOCALFILEWARNING     0x00000010
#define BSF_UISETBYAUTOMATION      0x00000100
#define BSF_RESIZABLE              0x00000200
#define BSF_CANMAXIMIZE            0x00000400
#define BSF_TOPBROWSER             0x00000800
#define BSF_NAVNOHISTORY           0x00001000
#define BSF_HTMLNAVCANCELED        0x00002000
#define BSF_DONTSHOWNAVCANCELPAGE  0x00004000
#define BSF_SETNAVIGATABLECODEPAGE 0x00008000
#define BSF_DELEGATEDNAVIGATION    0x00010000
#define BSF_TRUSTEDFORACTIVEX      0x00020000
#define BSF_MERGEDMENUS            0x00040000
#define BSF_FEEDNAVIGATION         0x00080000
#define BSF_FEEDSUBSCRIBED         0x00100000
#define HLNF_CALLERUNTRUSTED            0x00200000  // The navigate was possibly initiated by a web page by scripting code already on the system
#define HLNF_TRUSTEDFORACTIVEX          0x00400000  // The navigate should allow ActiveX prompts.
#define HLNF_DISABLEWINDOWRESTRICTIONS  0x00800000  // New window is created by url in zone that has the window restrictions security mitigation disabled
#define HLNF_TRUSTFIRSTDOWNLOAD         0x01000000  // New window is result of user initiated action.  Trust it if it immediatly trys to download.
#define HLNF_UNTRUSTEDFORDOWNLOAD       0x02000000  // Trident is navigating to an untrusted non-html file.  If we try to download it, do not.
#define SHHLNF_NOAUTOSELECT             0x04000000  // This navigate should not automatically select History ShellFolder
#define SHHLNF_WRITENOHISTORY           0x08000000  // This navigate should not go in the History ShellFolder
#define HLNF_EXTERNALNAVIGATE           0x10000000
#define HLNF_ALLOW_AUTONAVIGATE         0x20000000
#define HLNF_NEWWINDOWSMANAGED          0x80000000  // If this navigate results in a new window, it should be subject to popup manager.


extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0004_v0_0_s_ifspec;

#ifndef __IBrowserService_INTERFACE_DEFINED__
#define __IBrowserService_INTERFACE_DEFINED__

/* interface IBrowserService */
/* [object][uuid] */ 


EXTERN_C const IID IID_IBrowserService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02ba3b52-0547-11d1-b833-00c04fc9b31f")
    IBrowserService : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetParentSite( 
            /* [out] */ 
            __deref_out  IOleInPlaceSite **ppipsite) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE SetTitle( 
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  LPCWSTR pszName) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetTitle( 
            /* [in] */ 
            __in  IShellView *psv,
            /* [size_is][out] */ 
            __out_ecount(cchName)  LPWSTR pszName,
            DWORD cchName) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetOleObject( 
            /* [out] */ 
            __deref_out  IOleObject **ppobjv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTravelLog( 
            /* [out] */ __RPC__deref_out_opt ITravelLog **pptl) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE ShowControlWindow( 
            UINT id,
            BOOL fShow) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE IsControlWindowShown( 
            UINT id,
            /* [out] */ 
            __out  BOOL *pfShown) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE IEGetDisplayName( 
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out_ecount(INTERNET_MAX_URL_LENGTH)  LPWSTR pwszName,
            UINT uFlags) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE IEParseDisplayName( 
            UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE DisplayParseError( 
            HRESULT hres,
            /* [in] */ 
            __in  LPCWSTR pwszPath) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE NavigateToPidl( 
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            DWORD grfHLNF) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE SetNavigateState( 
            BNSTATE bnstate) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetNavigateState( 
            /* [out] */ 
            __out  BNSTATE *pbnstate) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE NotifyRedirect( 
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out  BOOL *pfDidBrowse) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE UpdateWindowList( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UpdateBackForwardState( void) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE SetFlags( 
            DWORD dwFlags,
            DWORD dwFlagMask) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetFlags( 
            /* [out] */ 
            __out  DWORD *pdwFlags) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE CanNavigateNow( void) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetPidl( 
            /* [out] */ 
            __out  PIDLIST_ABSOLUTE *ppidl) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE SetReferrer( 
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl) = 0;
        
        virtual /* [local] */ DWORD STDMETHODCALLTYPE GetBrowserIndex( void) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetBrowserByIndex( 
            DWORD dwID,
            /* [out] */ 
            __deref_out  IUnknown **ppunk) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetHistoryObject( 
            /* [out] */ 
            __deref_out  IOleObject **ppole,
            /* [out] */ 
            __deref_out  IStream **pstm,
            /* [out] */ 
            __deref_out  IBindCtx **ppbc) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE SetHistoryObject( 
            /* [in] */ 
            __in  IOleObject *pole,
            BOOL fIsLocalAnchor) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE CacheOLEServer( 
            /* [in] */ 
            __in  IOleObject *pole) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetSetCodePage( 
            /* [in] */ 
            __in  VARIANT *pvarIn,
            /* [out] */ 
            __out  VARIANT *pvarOut) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE OnHttpEquiv( 
            /* [in] */ 
            __in  IShellView *psv,
            BOOL fDone,
            /* [in] */ 
            __in  VARIANT *pvarargIn,
            /* [out] */ 
            __out  VARIANT *pvarargOut) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetPalette( 
            /* [out] */ 
            __out  HPALETTE *hpal) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE RegisterWindow( 
            BOOL fForceRegister,
            int swc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBrowserServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBrowserService * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBrowserService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBrowserService * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetParentSite )( 
            IBrowserService * This,
            /* [out] */ 
            __deref_out  IOleInPlaceSite **ppipsite);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetTitle )( 
            IBrowserService * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  LPCWSTR pszName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetTitle )( 
            IBrowserService * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [size_is][out] */ 
            __out_ecount(cchName)  LPWSTR pszName,
            DWORD cchName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetOleObject )( 
            IBrowserService * This,
            /* [out] */ 
            __deref_out  IOleObject **ppobjv);
        
        HRESULT ( STDMETHODCALLTYPE *GetTravelLog )( 
            IBrowserService * This,
            /* [out] */ __RPC__deref_out_opt ITravelLog **pptl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *ShowControlWindow )( 
            IBrowserService * This,
            UINT id,
            BOOL fShow);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IsControlWindowShown )( 
            IBrowserService * This,
            UINT id,
            /* [out] */ 
            __out  BOOL *pfShown);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEGetDisplayName )( 
            IBrowserService * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out_ecount(INTERNET_MAX_URL_LENGTH)  LPWSTR pwszName,
            UINT uFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEParseDisplayName )( 
            IBrowserService * This,
            UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *DisplayParseError )( 
            IBrowserService * This,
            HRESULT hres,
            /* [in] */ 
            __in  LPCWSTR pwszPath);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NavigateToPidl )( 
            IBrowserService * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            DWORD grfHLNF);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetNavigateState )( 
            IBrowserService * This,
            BNSTATE bnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetNavigateState )( 
            IBrowserService * This,
            /* [out] */ 
            __out  BNSTATE *pbnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NotifyRedirect )( 
            IBrowserService * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out  BOOL *pfDidBrowse);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *UpdateWindowList )( 
            IBrowserService * This);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateBackForwardState )( 
            IBrowserService * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetFlags )( 
            IBrowserService * This,
            DWORD dwFlags,
            DWORD dwFlagMask);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            IBrowserService * This,
            /* [out] */ 
            __out  DWORD *pdwFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CanNavigateNow )( 
            IBrowserService * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPidl )( 
            IBrowserService * This,
            /* [out] */ 
            __out  PIDLIST_ABSOLUTE *ppidl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetReferrer )( 
            IBrowserService * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl);
        
        /* [local] */ DWORD ( STDMETHODCALLTYPE *GetBrowserIndex )( 
            IBrowserService * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetBrowserByIndex )( 
            IBrowserService * This,
            DWORD dwID,
            /* [out] */ 
            __deref_out  IUnknown **ppunk);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetHistoryObject )( 
            IBrowserService * This,
            /* [out] */ 
            __deref_out  IOleObject **ppole,
            /* [out] */ 
            __deref_out  IStream **pstm,
            /* [out] */ 
            __deref_out  IBindCtx **ppbc);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetHistoryObject )( 
            IBrowserService * This,
            /* [in] */ 
            __in  IOleObject *pole,
            BOOL fIsLocalAnchor);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CacheOLEServer )( 
            IBrowserService * This,
            /* [in] */ 
            __in  IOleObject *pole);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetSetCodePage )( 
            IBrowserService * This,
            /* [in] */ 
            __in  VARIANT *pvarIn,
            /* [out] */ 
            __out  VARIANT *pvarOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *OnHttpEquiv )( 
            IBrowserService * This,
            /* [in] */ 
            __in  IShellView *psv,
            BOOL fDone,
            /* [in] */ 
            __in  VARIANT *pvarargIn,
            /* [out] */ 
            __out  VARIANT *pvarargOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPalette )( 
            IBrowserService * This,
            /* [out] */ 
            __out  HPALETTE *hpal);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *RegisterWindow )( 
            IBrowserService * This,
            BOOL fForceRegister,
            int swc);
        
        END_INTERFACE
    } IBrowserServiceVtbl;

    interface IBrowserService
    {
        CONST_VTBL struct IBrowserServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBrowserService_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBrowserService_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBrowserService_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBrowserService_GetParentSite(This,ppipsite)	\
    ( (This)->lpVtbl -> GetParentSite(This,ppipsite) ) 

#define IBrowserService_SetTitle(This,psv,pszName)	\
    ( (This)->lpVtbl -> SetTitle(This,psv,pszName) ) 

#define IBrowserService_GetTitle(This,psv,pszName,cchName)	\
    ( (This)->lpVtbl -> GetTitle(This,psv,pszName,cchName) ) 

#define IBrowserService_GetOleObject(This,ppobjv)	\
    ( (This)->lpVtbl -> GetOleObject(This,ppobjv) ) 

#define IBrowserService_GetTravelLog(This,pptl)	\
    ( (This)->lpVtbl -> GetTravelLog(This,pptl) ) 

#define IBrowserService_ShowControlWindow(This,id,fShow)	\
    ( (This)->lpVtbl -> ShowControlWindow(This,id,fShow) ) 

#define IBrowserService_IsControlWindowShown(This,id,pfShown)	\
    ( (This)->lpVtbl -> IsControlWindowShown(This,id,pfShown) ) 

#define IBrowserService_IEGetDisplayName(This,pidl,pwszName,uFlags)	\
    ( (This)->lpVtbl -> IEGetDisplayName(This,pidl,pwszName,uFlags) ) 

#define IBrowserService_IEParseDisplayName(This,uiCP,pwszPath,ppidlOut)	\
    ( (This)->lpVtbl -> IEParseDisplayName(This,uiCP,pwszPath,ppidlOut) ) 

#define IBrowserService_DisplayParseError(This,hres,pwszPath)	\
    ( (This)->lpVtbl -> DisplayParseError(This,hres,pwszPath) ) 

#define IBrowserService_NavigateToPidl(This,pidl,grfHLNF)	\
    ( (This)->lpVtbl -> NavigateToPidl(This,pidl,grfHLNF) ) 

#define IBrowserService_SetNavigateState(This,bnstate)	\
    ( (This)->lpVtbl -> SetNavigateState(This,bnstate) ) 

#define IBrowserService_GetNavigateState(This,pbnstate)	\
    ( (This)->lpVtbl -> GetNavigateState(This,pbnstate) ) 

#define IBrowserService_NotifyRedirect(This,psv,pidl,pfDidBrowse)	\
    ( (This)->lpVtbl -> NotifyRedirect(This,psv,pidl,pfDidBrowse) ) 

#define IBrowserService_UpdateWindowList(This)	\
    ( (This)->lpVtbl -> UpdateWindowList(This) ) 

#define IBrowserService_UpdateBackForwardState(This)	\
    ( (This)->lpVtbl -> UpdateBackForwardState(This) ) 

#define IBrowserService_SetFlags(This,dwFlags,dwFlagMask)	\
    ( (This)->lpVtbl -> SetFlags(This,dwFlags,dwFlagMask) ) 

#define IBrowserService_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define IBrowserService_CanNavigateNow(This)	\
    ( (This)->lpVtbl -> CanNavigateNow(This) ) 

#define IBrowserService_GetPidl(This,ppidl)	\
    ( (This)->lpVtbl -> GetPidl(This,ppidl) ) 

#define IBrowserService_SetReferrer(This,pidl)	\
    ( (This)->lpVtbl -> SetReferrer(This,pidl) ) 

#define IBrowserService_GetBrowserIndex(This)	\
    ( (This)->lpVtbl -> GetBrowserIndex(This) ) 

#define IBrowserService_GetBrowserByIndex(This,dwID,ppunk)	\
    ( (This)->lpVtbl -> GetBrowserByIndex(This,dwID,ppunk) ) 

#define IBrowserService_GetHistoryObject(This,ppole,pstm,ppbc)	\
    ( (This)->lpVtbl -> GetHistoryObject(This,ppole,pstm,ppbc) ) 

#define IBrowserService_SetHistoryObject(This,pole,fIsLocalAnchor)	\
    ( (This)->lpVtbl -> SetHistoryObject(This,pole,fIsLocalAnchor) ) 

#define IBrowserService_CacheOLEServer(This,pole)	\
    ( (This)->lpVtbl -> CacheOLEServer(This,pole) ) 

#define IBrowserService_GetSetCodePage(This,pvarIn,pvarOut)	\
    ( (This)->lpVtbl -> GetSetCodePage(This,pvarIn,pvarOut) ) 

#define IBrowserService_OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut)	\
    ( (This)->lpVtbl -> OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut) ) 

#define IBrowserService_GetPalette(This,hpal)	\
    ( (This)->lpVtbl -> GetPalette(This,hpal) ) 

#define IBrowserService_RegisterWindow(This,fForceRegister,swc)	\
    ( (This)->lpVtbl -> RegisterWindow(This,fForceRegister,swc) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBrowserService_INTERFACE_DEFINED__ */


#ifndef __IShellService_INTERFACE_DEFINED__
#define __IShellService_INTERFACE_DEFINED__

/* interface IShellService */
/* [local][object][uuid] */ 


EXTERN_C const IID IID_IShellService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5836FB00-8187-11CF-A12B-00AA004AE837")
    IShellService : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetOwner( 
            /* [unique][in] */ 
            __in_opt  IUnknown *punkOwner) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IShellServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IShellService * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IShellService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IShellService * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetOwner )( 
            IShellService * This,
            /* [unique][in] */ 
            __in_opt  IUnknown *punkOwner);
        
        END_INTERFACE
    } IShellServiceVtbl;

    interface IShellService
    {
        CONST_VTBL struct IShellServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IShellService_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IShellService_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IShellService_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IShellService_SetOwner(This,punkOwner)	\
    ( (This)->lpVtbl -> SetOwner(This,punkOwner) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IShellService_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shdeprecated_0000_0006 */
/* [local] */ 


enum __MIDL___MIDL_itf_shdeprecated_0000_0006_0001
    {	SECURELOCK_NOCHANGE	= -1,
	SECURELOCK_SET_UNSECURE	= 0,
	SECURELOCK_SET_MIXED	= ( SECURELOCK_SET_UNSECURE + 1 ) ,
	SECURELOCK_SET_SECUREUNKNOWNBIT	= ( SECURELOCK_SET_MIXED + 1 ) ,
	SECURELOCK_SET_SECURE40BIT	= ( SECURELOCK_SET_SECUREUNKNOWNBIT + 1 ) ,
	SECURELOCK_SET_SECURE56BIT	= ( SECURELOCK_SET_SECURE40BIT + 1 ) ,
	SECURELOCK_SET_FORTEZZA	= ( SECURELOCK_SET_SECURE56BIT + 1 ) ,
	SECURELOCK_SET_SECURE128BIT	= ( SECURELOCK_SET_FORTEZZA + 1 ) ,
	SECURELOCK_FIRSTSUGGEST	= ( SECURELOCK_SET_SECURE128BIT + 1 ) ,
	SECURELOCK_SUGGEST_UNSECURE	= SECURELOCK_FIRSTSUGGEST,
	SECURELOCK_SUGGEST_MIXED	= ( SECURELOCK_SUGGEST_UNSECURE + 1 ) ,
	SECURELOCK_SUGGEST_SECUREUNKNOWNBIT	= ( SECURELOCK_SUGGEST_MIXED + 1 ) ,
	SECURELOCK_SUGGEST_SECURE40BIT	= ( SECURELOCK_SUGGEST_SECUREUNKNOWNBIT + 1 ) ,
	SECURELOCK_SUGGEST_SECURE56BIT	= ( SECURELOCK_SUGGEST_SECURE40BIT + 1 ) ,
	SECURELOCK_SUGGEST_FORTEZZA	= ( SECURELOCK_SUGGEST_SECURE56BIT + 1 ) ,
	SECURELOCK_SUGGEST_SECURE128BIT	= ( SECURELOCK_SUGGEST_FORTEZZA + 1 ) 
    } ;
#pragma warning(push)
#pragma warning(disable:4214)
#include <pshpack8.h>
typedef /* [public] */ struct __MIDL___MIDL_itf_shdeprecated_0000_0006_0002
    {
    HWND _hwnd;
    ITravelLog *_ptl;
    IHlinkFrame *_phlf;
    IWebBrowser2 *_pautoWB2;
    IExpDispSupportXP *_pautoEDS;
    IShellService *_pautoSS;
    int _eSecureLockIcon;
    DWORD _fCreatingViewWindow	: 1;
    UINT _uActivateState;
    PCIDLIST_ABSOLUTE _pidlViewState;
    IOleCommandTarget *_pctView;
    PIDLIST_ABSOLUTE _pidlCur;
    IShellView *_psv;
    IShellFolder *_psf;
    HWND _hwndView;
    LPWSTR _pszTitleCur;
    PIDLIST_ABSOLUTE _pidlPending;
    IShellView *_psvPending;
    IShellFolder *_psfPending;
    HWND _hwndViewPending;
    LPWSTR _pszTitlePending;
    BOOL _fIsViewMSHTML;
    BOOL _fPrivacyImpacted;
    CLSID _clsidView;
    CLSID _clsidViewPending;
    HWND _hwndFrame;
    } 	BASEBROWSERDATAXP;

typedef struct __MIDL___MIDL_itf_shdeprecated_0000_0006_0002 *LPBASEBROWSERDATAXP;

typedef /* [public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_shdeprecated_0000_0006_0003
    {
    HWND _hwnd;
    ITravelLog *_ptl;
    IHlinkFrame *_phlf;
    IWebBrowser2 *_pautoWB2;
    IExpDispSupport *_pautoEDS;
    IShellService *_pautoSS;
    int _eSecureLockIcon;
    DWORD _fCreatingViewWindow	: 1;
    UINT _uActivateState;
    PCIDLIST_ABSOLUTE _pidlViewState;
    IOleCommandTarget *_pctView;
    PIDLIST_ABSOLUTE _pidlCur;
    IShellView *_psv;
    IShellFolder *_psf;
    HWND _hwndView;
    LPWSTR _pszTitleCur;
    PIDLIST_ABSOLUTE _pidlPending;
    IShellView *_psvPending;
    IShellFolder *_psfPending;
    HWND _hwndViewPending;
    LPWSTR _pszTitlePending;
    BOOL _fIsViewMSHTML;
    BOOL _fPrivacyImpacted;
    CLSID _clsidView;
    CLSID _clsidViewPending;
    HWND _hwndFrame;
    LONG _lPhishingFilterStatus;
    } 	BASEBROWSERDATALH;

typedef struct __MIDL___MIDL_itf_shdeprecated_0000_0006_0003 *LPBASEBROWSERDATALH;

#if 0
typedef BASEBROWSERDATALH BASEBROWSERDATA;

#endif
#if (NTDDI_VERSION >= NTDDI_VISTA) || (_WIN32_IE >= _WIN32_IE_IE70)
typedef BASEBROWSERDATALH BASEBROWSERDATA;
#else
typedef BASEBROWSERDATAXP BASEBROWSERDATA;
#endif // (NTDDI_VERSION >= NTDDI_VISTA) || (_WIN32_IE >= _WIN32_IE_IE70)
typedef const BASEBROWSERDATA *LPCBASEBROWSERDATA;

typedef BASEBROWSERDATA *LPBASEBROWSERDATA;

#pragma warning(pop)
#define VIEW_PRIORITY_RESTRICTED    0x00000070  // a shell restriction is in place that forces this view to be the one we use
#define VIEW_PRIORITY_CACHEHIT      0x00000050  // we have registry info for the view, so the user has been there before
#define VIEW_PRIORITY_STALECACHEHIT 0x00000045  // we have stale registry info for the view, so we fall back to the 'all folders like this' default
#define VIEW_PRIORITY_USEASDEFAULT  0x00000043  // 'Use As Default' is more important than shellext, but less than a stale cache
#define VIEW_PRIORITY_SHELLEXT      0x00000040  // next we let the shell extension have its say
#define VIEW_PRIORITY_CACHEMISS     0x00000030  // if we have a cache miss, then we fall back to the 'all folders like this' default
#define VIEW_PRIORITY_INHERIT       0x00000020  // then try to inherit the view from the previous window
#define VIEW_PRIORITY_SHELLEXT_ASBACKUP 0x0015  // If classic view state is enabled we want the shell to default to an inheritted view
#define VIEW_PRIORITY_DESPERATE     0x00000010  // just pick the last view that the window supports
#define VIEW_PRIORITY_NONE          0x00000000  // dont have a view yet
typedef struct tagFolderSetData
    {
    FOLDERSETTINGS _fs;
    SHELLVIEWID _vidRestore;
    DWORD _dwViewPriority;
    } 	FOLDERSETDATA;

typedef struct tagFolderSetData *LPFOLDERSETDATA;

#if !defined(HMONITOR_DECLARED) && !defined(HMONITOR) && (WINVER < 0x0500)
#define HMONITOR_DECLARED
#if 0
typedef HANDLE HMONITOR;

#endif
DECLARE_HANDLE(HMONITOR);
#endif
#if 0
typedef void *LPCREATESTRUCT;

typedef void NMHDR;

#endif
typedef struct SToolbarItem
    {
    IDockingWindow *ptbar;
    BORDERWIDTHS rcBorderTool;
    LPWSTR pwszItem;
    BOOL fShow;
    HMONITOR hMon;
    } 	TOOLBARITEM;

typedef struct SToolbarItem *LPTOOLBARITEM;

#define ITB_VIEW        ((UINT)-1)      // view
#include <poppack.h>


extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0006_v0_0_s_ifspec;

#ifndef __IBrowserService2_INTERFACE_DEFINED__
#define __IBrowserService2_INTERFACE_DEFINED__

/* interface IBrowserService2 */
/* [local][object][uuid] */ 


EXTERN_C const IID IID_IBrowserService2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68BD21CC-438B-11d2-A560-00A0C92DBFE8")
    IBrowserService2 : public IBrowserService
    {
    public:
        virtual LRESULT STDMETHODCALLTYPE WndProcBS( 
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAsDefFolderSettings( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetViewRect( 
            /* [out] */ 
            __out  RECT *prc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnSize( 
            /* [in] */ 
            __in  WPARAM wParam) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnCreate( 
            /* [in] */ 
            __in  struct tagCREATESTRUCTW *pcs) = 0;
        
        virtual LRESULT STDMETHODCALLTYPE OnCommand( 
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDestroy( void) = 0;
        
        virtual LRESULT STDMETHODCALLTYPE OnNotify( 
            /* [in] */ 
            __in  struct tagNMHDR *pnm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnSetFocus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnFrameWindowActivateBS( 
            /* [in] */ 
            __in  BOOL fActive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseShellView( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivatePendingView( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateViewWindow( 
            /* [in] */ 
            __in  IShellView *psvNew,
            /* [in] */ 
            __in  IShellView *psvOld,
            /* [in] */ 
            __in  LPRECT prcView,
            /* [out] */ 
            __out  HWND *phwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateBrowserPropSheetExt( 
            /* [in] */ 
            __in  REFIID riid,
            /* [iid_is][out] */ 
            __deref_out  void **ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetViewWindow( 
            /* [out] */ 
            __out  HWND *phwndView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBaseBrowserData( 
            /* [out] */ 
            __deref_out  LPCBASEBROWSERDATA *pbbd) = 0;
        
        virtual LPBASEBROWSERDATA STDMETHODCALLTYPE PutBaseBrowserData( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitializeTravelLog( 
            /* [in] */ 
            __in  ITravelLog *ptl,
            /* [in] */ 
            __in  DWORD dw) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTopBrowser( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Offline( 
            /* [in] */ 
            __in  int iCmd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllowViewResize( 
            /* [in] */ 
            __in  BOOL f) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetActivateState( 
            /* [in] */ 
            __in  UINT u) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UpdateSecureLockIcon( 
            /* [in] */ 
            __in  int eSecureLock) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitializeDownloadManager( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitializeTransitionSite( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _Initialize( 
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  IUnknown *pauto) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _CancelPendingNavigationAsync( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _CancelPendingView( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _MaySaveChanges( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _PauseOrResumeView( 
            BOOL fPaused) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _DisableModeless( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _NavigateToPidl( 
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfHLNF,
            /* [in] */ 
            __in  DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _TryShell2Rename( 
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidlNew) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _SwitchActivationNow( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _ExecChildren( 
            /* [in] */ 
            __in  IUnknown *punkBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [unique][in] */ 
            __in_opt  const GUID *pguidCmdGroup,
            /* [in] */ 
            __in  DWORD nCmdID,
            /* [in] */ 
            __in  DWORD nCmdexecopt,
            /* [unique][in] */ 
            __in_opt  VARIANTARG *pvarargIn,
            /* [unique][out][in] */ 
            __inout_opt  VARIANTARG *pvarargOut) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _SendChildren( 
            /* [in] */ 
            __in  HWND hwndBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFolderSetData( 
            /* [out] */ struct tagFolderSetData *pfsd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _OnFocusChange( 
            /* [in] */ 
            __in  UINT itb) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE v_ShowHideChildWindows( 
            /* [in] */ 
            __in  BOOL fChildOnly) = 0;
        
        virtual UINT STDMETHODCALLTYPE _get_itbLastFocus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _put_itbLastFocus( 
            /* [in] */ 
            __in  UINT itbLastFocus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _UIActivateView( 
            /* [in] */ 
            __in  UINT uState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _GetViewBorderRect( 
            /* [out] */ RECT *prc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _UpdateViewRectSize( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _ResizeNextBorder( 
            /* [in] */ 
            __in  UINT itb) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _ResizeView( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _GetEffectiveClientArea( 
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  HMONITOR hmon) = 0;
        
        virtual IStream *STDMETHODCALLTYPE v_GetViewStream( 
            /* [in] */ PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfMode,
            /* [in] */ 
            __in  LPCWSTR pwszName) = 0;
        
        virtual LRESULT STDMETHODCALLTYPE ForwardViewMsg( 
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAcceleratorMenu( 
            /* [in] */ 
            __in  HACCEL hacc) = 0;
        
        virtual int STDMETHODCALLTYPE _GetToolbarCount( void) = 0;
        
        virtual LPTOOLBARITEM STDMETHODCALLTYPE _GetToolbarItem( 
            /* [in] */ 
            __in  int itb) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _SaveToolbars( 
            /* [in] */ IStream *pstm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _LoadToolbars( 
            /* [in] */ 
            __in  IStream *pstm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _CloseAndReleaseToolbars( 
            BOOL fClose) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE v_MayGetNextToolbarFocus( 
            /* [in] */ 
            __in  LPMSG lpMsg,
            /* [in] */ 
            __in  UINT itbNext,
            /* [in] */ 
            __in  int citb,
            /* [out] */ 
            __out  LPTOOLBARITEM *pptbi,
            /* [out] */ 
            __out  HWND *phwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _ResizeNextBorderHelper( 
            UINT itb,
            BOOL bUseHmonitor) = 0;
        
        virtual UINT STDMETHODCALLTYPE _FindTBar( 
            /* [in] */ 
            __in  IUnknown *punkSrc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _SetFocus( 
            /* [in] */ 
            __in  LPTOOLBARITEM ptbi,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  LPMSG lpMsg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE v_MayTranslateAccelerator( 
            /* [in] */ MSG *pmsg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _GetBorderDWHelper( 
            /* [in] */ 
            __in  IUnknown *punkSrc,
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  BOOL bUseHmonitor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE v_CheckZoneCrossing( 
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBrowserService2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBrowserService2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBrowserService2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBrowserService2 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetParentSite )( 
            IBrowserService2 * This,
            /* [out] */ 
            __deref_out  IOleInPlaceSite **ppipsite);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetTitle )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  LPCWSTR pszName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetTitle )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [size_is][out] */ 
            __out_ecount(cchName)  LPWSTR pszName,
            DWORD cchName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetOleObject )( 
            IBrowserService2 * This,
            /* [out] */ 
            __deref_out  IOleObject **ppobjv);
        
        HRESULT ( STDMETHODCALLTYPE *GetTravelLog )( 
            IBrowserService2 * This,
            /* [out] */ ITravelLog **pptl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *ShowControlWindow )( 
            IBrowserService2 * This,
            UINT id,
            BOOL fShow);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IsControlWindowShown )( 
            IBrowserService2 * This,
            UINT id,
            /* [out] */ 
            __out  BOOL *pfShown);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEGetDisplayName )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out_ecount(INTERNET_MAX_URL_LENGTH)  LPWSTR pwszName,
            UINT uFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEParseDisplayName )( 
            IBrowserService2 * This,
            UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *DisplayParseError )( 
            IBrowserService2 * This,
            HRESULT hres,
            /* [in] */ 
            __in  LPCWSTR pwszPath);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NavigateToPidl )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            DWORD grfHLNF);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetNavigateState )( 
            IBrowserService2 * This,
            BNSTATE bnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetNavigateState )( 
            IBrowserService2 * This,
            /* [out] */ 
            __out  BNSTATE *pbnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NotifyRedirect )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out  BOOL *pfDidBrowse);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *UpdateWindowList )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateBackForwardState )( 
            IBrowserService2 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetFlags )( 
            IBrowserService2 * This,
            DWORD dwFlags,
            DWORD dwFlagMask);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            IBrowserService2 * This,
            /* [out] */ 
            __out  DWORD *pdwFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CanNavigateNow )( 
            IBrowserService2 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPidl )( 
            IBrowserService2 * This,
            /* [out] */ 
            __out  PIDLIST_ABSOLUTE *ppidl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetReferrer )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl);
        
        /* [local] */ DWORD ( STDMETHODCALLTYPE *GetBrowserIndex )( 
            IBrowserService2 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetBrowserByIndex )( 
            IBrowserService2 * This,
            DWORD dwID,
            /* [out] */ 
            __deref_out  IUnknown **ppunk);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetHistoryObject )( 
            IBrowserService2 * This,
            /* [out] */ 
            __deref_out  IOleObject **ppole,
            /* [out] */ 
            __deref_out  IStream **pstm,
            /* [out] */ 
            __deref_out  IBindCtx **ppbc);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetHistoryObject )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IOleObject *pole,
            BOOL fIsLocalAnchor);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CacheOLEServer )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IOleObject *pole);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetSetCodePage )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  VARIANT *pvarIn,
            /* [out] */ 
            __out  VARIANT *pvarOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *OnHttpEquiv )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IShellView *psv,
            BOOL fDone,
            /* [in] */ 
            __in  VARIANT *pvarargIn,
            /* [out] */ 
            __out  VARIANT *pvarargOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPalette )( 
            IBrowserService2 * This,
            /* [out] */ 
            __out  HPALETTE *hpal);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *RegisterWindow )( 
            IBrowserService2 * This,
            BOOL fForceRegister,
            int swc);
        
        LRESULT ( STDMETHODCALLTYPE *WndProcBS )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *SetAsDefFolderSettings )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetViewRect )( 
            IBrowserService2 * This,
            /* [out] */ 
            __out  RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *OnSize )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  WPARAM wParam);
        
        HRESULT ( STDMETHODCALLTYPE *OnCreate )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  struct tagCREATESTRUCTW *pcs);
        
        LRESULT ( STDMETHODCALLTYPE *OnCommand )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *OnDestroy )( 
            IBrowserService2 * This);
        
        LRESULT ( STDMETHODCALLTYPE *OnNotify )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  struct tagNMHDR *pnm);
        
        HRESULT ( STDMETHODCALLTYPE *OnSetFocus )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnFrameWindowActivateBS )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  BOOL fActive);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseShellView )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ActivatePendingView )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateViewWindow )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IShellView *psvNew,
            /* [in] */ 
            __in  IShellView *psvOld,
            /* [in] */ 
            __in  LPRECT prcView,
            /* [out] */ 
            __out  HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *CreateBrowserPropSheetExt )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  REFIID riid,
            /* [iid_is][out] */ 
            __deref_out  void **ppv);
        
        HRESULT ( STDMETHODCALLTYPE *GetViewWindow )( 
            IBrowserService2 * This,
            /* [out] */ 
            __out  HWND *phwndView);
        
        HRESULT ( STDMETHODCALLTYPE *GetBaseBrowserData )( 
            IBrowserService2 * This,
            /* [out] */ 
            __deref_out  LPCBASEBROWSERDATA *pbbd);
        
        LPBASEBROWSERDATA ( STDMETHODCALLTYPE *PutBaseBrowserData )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeTravelLog )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  ITravelLog *ptl,
            /* [in] */ 
            __in  DWORD dw);
        
        HRESULT ( STDMETHODCALLTYPE *SetTopBrowser )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Offline )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  int iCmd);
        
        HRESULT ( STDMETHODCALLTYPE *AllowViewResize )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  BOOL f);
        
        HRESULT ( STDMETHODCALLTYPE *SetActivateState )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  UINT u);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateSecureLockIcon )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  int eSecureLock);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeDownloadManager )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeTransitionSite )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_Initialize )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  IUnknown *pauto);
        
        HRESULT ( STDMETHODCALLTYPE *_CancelPendingNavigationAsync )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_CancelPendingView )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_MaySaveChanges )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_PauseOrResumeView )( 
            IBrowserService2 * This,
            BOOL fPaused);
        
        HRESULT ( STDMETHODCALLTYPE *_DisableModeless )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_NavigateToPidl )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfHLNF,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *_TryShell2Rename )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidlNew);
        
        HRESULT ( STDMETHODCALLTYPE *_SwitchActivationNow )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_ExecChildren )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IUnknown *punkBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [unique][in] */ 
            __in_opt  const GUID *pguidCmdGroup,
            /* [in] */ 
            __in  DWORD nCmdID,
            /* [in] */ 
            __in  DWORD nCmdexecopt,
            /* [unique][in] */ 
            __in_opt  VARIANTARG *pvarargIn,
            /* [unique][out][in] */ 
            __inout_opt  VARIANTARG *pvarargOut);
        
        HRESULT ( STDMETHODCALLTYPE *_SendChildren )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  HWND hwndBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolderSetData )( 
            IBrowserService2 * This,
            /* [out] */ struct tagFolderSetData *pfsd);
        
        HRESULT ( STDMETHODCALLTYPE *_OnFocusChange )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  UINT itb);
        
        HRESULT ( STDMETHODCALLTYPE *v_ShowHideChildWindows )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  BOOL fChildOnly);
        
        UINT ( STDMETHODCALLTYPE *_get_itbLastFocus )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_put_itbLastFocus )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  UINT itbLastFocus);
        
        HRESULT ( STDMETHODCALLTYPE *_UIActivateView )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  UINT uState);
        
        HRESULT ( STDMETHODCALLTYPE *_GetViewBorderRect )( 
            IBrowserService2 * This,
            /* [out] */ RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *_UpdateViewRectSize )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeNextBorder )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  UINT itb);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeView )( 
            IBrowserService2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_GetEffectiveClientArea )( 
            IBrowserService2 * This,
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  HMONITOR hmon);
        
        IStream *( STDMETHODCALLTYPE *v_GetViewStream )( 
            IBrowserService2 * This,
            /* [in] */ PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfMode,
            /* [in] */ 
            __in  LPCWSTR pwszName);
        
        LRESULT ( STDMETHODCALLTYPE *ForwardViewMsg )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *SetAcceleratorMenu )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  HACCEL hacc);
        
        int ( STDMETHODCALLTYPE *_GetToolbarCount )( 
            IBrowserService2 * This);
        
        LPTOOLBARITEM ( STDMETHODCALLTYPE *_GetToolbarItem )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  int itb);
        
        HRESULT ( STDMETHODCALLTYPE *_SaveToolbars )( 
            IBrowserService2 * This,
            /* [in] */ IStream *pstm);
        
        HRESULT ( STDMETHODCALLTYPE *_LoadToolbars )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IStream *pstm);
        
        HRESULT ( STDMETHODCALLTYPE *_CloseAndReleaseToolbars )( 
            IBrowserService2 * This,
            BOOL fClose);
        
        HRESULT ( STDMETHODCALLTYPE *v_MayGetNextToolbarFocus )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  LPMSG lpMsg,
            /* [in] */ 
            __in  UINT itbNext,
            /* [in] */ 
            __in  int citb,
            /* [out] */ 
            __out  LPTOOLBARITEM *pptbi,
            /* [out] */ 
            __out  HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeNextBorderHelper )( 
            IBrowserService2 * This,
            UINT itb,
            BOOL bUseHmonitor);
        
        UINT ( STDMETHODCALLTYPE *_FindTBar )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IUnknown *punkSrc);
        
        HRESULT ( STDMETHODCALLTYPE *_SetFocus )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  LPTOOLBARITEM ptbi,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  LPMSG lpMsg);
        
        HRESULT ( STDMETHODCALLTYPE *v_MayTranslateAccelerator )( 
            IBrowserService2 * This,
            /* [in] */ MSG *pmsg);
        
        HRESULT ( STDMETHODCALLTYPE *_GetBorderDWHelper )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  IUnknown *punkSrc,
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  BOOL bUseHmonitor);
        
        HRESULT ( STDMETHODCALLTYPE *v_CheckZoneCrossing )( 
            IBrowserService2 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl);
        
        END_INTERFACE
    } IBrowserService2Vtbl;

    interface IBrowserService2
    {
        CONST_VTBL struct IBrowserService2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBrowserService2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBrowserService2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBrowserService2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBrowserService2_GetParentSite(This,ppipsite)	\
    ( (This)->lpVtbl -> GetParentSite(This,ppipsite) ) 

#define IBrowserService2_SetTitle(This,psv,pszName)	\
    ( (This)->lpVtbl -> SetTitle(This,psv,pszName) ) 

#define IBrowserService2_GetTitle(This,psv,pszName,cchName)	\
    ( (This)->lpVtbl -> GetTitle(This,psv,pszName,cchName) ) 

#define IBrowserService2_GetOleObject(This,ppobjv)	\
    ( (This)->lpVtbl -> GetOleObject(This,ppobjv) ) 

#define IBrowserService2_GetTravelLog(This,pptl)	\
    ( (This)->lpVtbl -> GetTravelLog(This,pptl) ) 

#define IBrowserService2_ShowControlWindow(This,id,fShow)	\
    ( (This)->lpVtbl -> ShowControlWindow(This,id,fShow) ) 

#define IBrowserService2_IsControlWindowShown(This,id,pfShown)	\
    ( (This)->lpVtbl -> IsControlWindowShown(This,id,pfShown) ) 

#define IBrowserService2_IEGetDisplayName(This,pidl,pwszName,uFlags)	\
    ( (This)->lpVtbl -> IEGetDisplayName(This,pidl,pwszName,uFlags) ) 

#define IBrowserService2_IEParseDisplayName(This,uiCP,pwszPath,ppidlOut)	\
    ( (This)->lpVtbl -> IEParseDisplayName(This,uiCP,pwszPath,ppidlOut) ) 

#define IBrowserService2_DisplayParseError(This,hres,pwszPath)	\
    ( (This)->lpVtbl -> DisplayParseError(This,hres,pwszPath) ) 

#define IBrowserService2_NavigateToPidl(This,pidl,grfHLNF)	\
    ( (This)->lpVtbl -> NavigateToPidl(This,pidl,grfHLNF) ) 

#define IBrowserService2_SetNavigateState(This,bnstate)	\
    ( (This)->lpVtbl -> SetNavigateState(This,bnstate) ) 

#define IBrowserService2_GetNavigateState(This,pbnstate)	\
    ( (This)->lpVtbl -> GetNavigateState(This,pbnstate) ) 

#define IBrowserService2_NotifyRedirect(This,psv,pidl,pfDidBrowse)	\
    ( (This)->lpVtbl -> NotifyRedirect(This,psv,pidl,pfDidBrowse) ) 

#define IBrowserService2_UpdateWindowList(This)	\
    ( (This)->lpVtbl -> UpdateWindowList(This) ) 

#define IBrowserService2_UpdateBackForwardState(This)	\
    ( (This)->lpVtbl -> UpdateBackForwardState(This) ) 

#define IBrowserService2_SetFlags(This,dwFlags,dwFlagMask)	\
    ( (This)->lpVtbl -> SetFlags(This,dwFlags,dwFlagMask) ) 

#define IBrowserService2_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define IBrowserService2_CanNavigateNow(This)	\
    ( (This)->lpVtbl -> CanNavigateNow(This) ) 

#define IBrowserService2_GetPidl(This,ppidl)	\
    ( (This)->lpVtbl -> GetPidl(This,ppidl) ) 

#define IBrowserService2_SetReferrer(This,pidl)	\
    ( (This)->lpVtbl -> SetReferrer(This,pidl) ) 

#define IBrowserService2_GetBrowserIndex(This)	\
    ( (This)->lpVtbl -> GetBrowserIndex(This) ) 

#define IBrowserService2_GetBrowserByIndex(This,dwID,ppunk)	\
    ( (This)->lpVtbl -> GetBrowserByIndex(This,dwID,ppunk) ) 

#define IBrowserService2_GetHistoryObject(This,ppole,pstm,ppbc)	\
    ( (This)->lpVtbl -> GetHistoryObject(This,ppole,pstm,ppbc) ) 

#define IBrowserService2_SetHistoryObject(This,pole,fIsLocalAnchor)	\
    ( (This)->lpVtbl -> SetHistoryObject(This,pole,fIsLocalAnchor) ) 

#define IBrowserService2_CacheOLEServer(This,pole)	\
    ( (This)->lpVtbl -> CacheOLEServer(This,pole) ) 

#define IBrowserService2_GetSetCodePage(This,pvarIn,pvarOut)	\
    ( (This)->lpVtbl -> GetSetCodePage(This,pvarIn,pvarOut) ) 

#define IBrowserService2_OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut)	\
    ( (This)->lpVtbl -> OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut) ) 

#define IBrowserService2_GetPalette(This,hpal)	\
    ( (This)->lpVtbl -> GetPalette(This,hpal) ) 

#define IBrowserService2_RegisterWindow(This,fForceRegister,swc)	\
    ( (This)->lpVtbl -> RegisterWindow(This,fForceRegister,swc) ) 


#define IBrowserService2_WndProcBS(This,hwnd,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> WndProcBS(This,hwnd,uMsg,wParam,lParam) ) 

#define IBrowserService2_SetAsDefFolderSettings(This)	\
    ( (This)->lpVtbl -> SetAsDefFolderSettings(This) ) 

#define IBrowserService2_GetViewRect(This,prc)	\
    ( (This)->lpVtbl -> GetViewRect(This,prc) ) 

#define IBrowserService2_OnSize(This,wParam)	\
    ( (This)->lpVtbl -> OnSize(This,wParam) ) 

#define IBrowserService2_OnCreate(This,pcs)	\
    ( (This)->lpVtbl -> OnCreate(This,pcs) ) 

#define IBrowserService2_OnCommand(This,wParam,lParam)	\
    ( (This)->lpVtbl -> OnCommand(This,wParam,lParam) ) 

#define IBrowserService2_OnDestroy(This)	\
    ( (This)->lpVtbl -> OnDestroy(This) ) 

#define IBrowserService2_OnNotify(This,pnm)	\
    ( (This)->lpVtbl -> OnNotify(This,pnm) ) 

#define IBrowserService2_OnSetFocus(This)	\
    ( (This)->lpVtbl -> OnSetFocus(This) ) 

#define IBrowserService2_OnFrameWindowActivateBS(This,fActive)	\
    ( (This)->lpVtbl -> OnFrameWindowActivateBS(This,fActive) ) 

#define IBrowserService2_ReleaseShellView(This)	\
    ( (This)->lpVtbl -> ReleaseShellView(This) ) 

#define IBrowserService2_ActivatePendingView(This)	\
    ( (This)->lpVtbl -> ActivatePendingView(This) ) 

#define IBrowserService2_CreateViewWindow(This,psvNew,psvOld,prcView,phwnd)	\
    ( (This)->lpVtbl -> CreateViewWindow(This,psvNew,psvOld,prcView,phwnd) ) 

#define IBrowserService2_CreateBrowserPropSheetExt(This,riid,ppv)	\
    ( (This)->lpVtbl -> CreateBrowserPropSheetExt(This,riid,ppv) ) 

#define IBrowserService2_GetViewWindow(This,phwndView)	\
    ( (This)->lpVtbl -> GetViewWindow(This,phwndView) ) 

#define IBrowserService2_GetBaseBrowserData(This,pbbd)	\
    ( (This)->lpVtbl -> GetBaseBrowserData(This,pbbd) ) 

#define IBrowserService2_PutBaseBrowserData(This)	\
    ( (This)->lpVtbl -> PutBaseBrowserData(This) ) 

#define IBrowserService2_InitializeTravelLog(This,ptl,dw)	\
    ( (This)->lpVtbl -> InitializeTravelLog(This,ptl,dw) ) 

#define IBrowserService2_SetTopBrowser(This)	\
    ( (This)->lpVtbl -> SetTopBrowser(This) ) 

#define IBrowserService2_Offline(This,iCmd)	\
    ( (This)->lpVtbl -> Offline(This,iCmd) ) 

#define IBrowserService2_AllowViewResize(This,f)	\
    ( (This)->lpVtbl -> AllowViewResize(This,f) ) 

#define IBrowserService2_SetActivateState(This,u)	\
    ( (This)->lpVtbl -> SetActivateState(This,u) ) 

#define IBrowserService2_UpdateSecureLockIcon(This,eSecureLock)	\
    ( (This)->lpVtbl -> UpdateSecureLockIcon(This,eSecureLock) ) 

#define IBrowserService2_InitializeDownloadManager(This)	\
    ( (This)->lpVtbl -> InitializeDownloadManager(This) ) 

#define IBrowserService2_InitializeTransitionSite(This)	\
    ( (This)->lpVtbl -> InitializeTransitionSite(This) ) 

#define IBrowserService2__Initialize(This,hwnd,pauto)	\
    ( (This)->lpVtbl -> _Initialize(This,hwnd,pauto) ) 

#define IBrowserService2__CancelPendingNavigationAsync(This)	\
    ( (This)->lpVtbl -> _CancelPendingNavigationAsync(This) ) 

#define IBrowserService2__CancelPendingView(This)	\
    ( (This)->lpVtbl -> _CancelPendingView(This) ) 

#define IBrowserService2__MaySaveChanges(This)	\
    ( (This)->lpVtbl -> _MaySaveChanges(This) ) 

#define IBrowserService2__PauseOrResumeView(This,fPaused)	\
    ( (This)->lpVtbl -> _PauseOrResumeView(This,fPaused) ) 

#define IBrowserService2__DisableModeless(This)	\
    ( (This)->lpVtbl -> _DisableModeless(This) ) 

#define IBrowserService2__NavigateToPidl(This,pidl,grfHLNF,dwFlags)	\
    ( (This)->lpVtbl -> _NavigateToPidl(This,pidl,grfHLNF,dwFlags) ) 

#define IBrowserService2__TryShell2Rename(This,psv,pidlNew)	\
    ( (This)->lpVtbl -> _TryShell2Rename(This,psv,pidlNew) ) 

#define IBrowserService2__SwitchActivationNow(This)	\
    ( (This)->lpVtbl -> _SwitchActivationNow(This) ) 

#define IBrowserService2__ExecChildren(This,punkBar,fBroadcast,pguidCmdGroup,nCmdID,nCmdexecopt,pvarargIn,pvarargOut)	\
    ( (This)->lpVtbl -> _ExecChildren(This,punkBar,fBroadcast,pguidCmdGroup,nCmdID,nCmdexecopt,pvarargIn,pvarargOut) ) 

#define IBrowserService2__SendChildren(This,hwndBar,fBroadcast,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> _SendChildren(This,hwndBar,fBroadcast,uMsg,wParam,lParam) ) 

#define IBrowserService2_GetFolderSetData(This,pfsd)	\
    ( (This)->lpVtbl -> GetFolderSetData(This,pfsd) ) 

#define IBrowserService2__OnFocusChange(This,itb)	\
    ( (This)->lpVtbl -> _OnFocusChange(This,itb) ) 

#define IBrowserService2_v_ShowHideChildWindows(This,fChildOnly)	\
    ( (This)->lpVtbl -> v_ShowHideChildWindows(This,fChildOnly) ) 

#define IBrowserService2__get_itbLastFocus(This)	\
    ( (This)->lpVtbl -> _get_itbLastFocus(This) ) 

#define IBrowserService2__put_itbLastFocus(This,itbLastFocus)	\
    ( (This)->lpVtbl -> _put_itbLastFocus(This,itbLastFocus) ) 

#define IBrowserService2__UIActivateView(This,uState)	\
    ( (This)->lpVtbl -> _UIActivateView(This,uState) ) 

#define IBrowserService2__GetViewBorderRect(This,prc)	\
    ( (This)->lpVtbl -> _GetViewBorderRect(This,prc) ) 

#define IBrowserService2__UpdateViewRectSize(This)	\
    ( (This)->lpVtbl -> _UpdateViewRectSize(This) ) 

#define IBrowserService2__ResizeNextBorder(This,itb)	\
    ( (This)->lpVtbl -> _ResizeNextBorder(This,itb) ) 

#define IBrowserService2__ResizeView(This)	\
    ( (This)->lpVtbl -> _ResizeView(This) ) 

#define IBrowserService2__GetEffectiveClientArea(This,lprectBorder,hmon)	\
    ( (This)->lpVtbl -> _GetEffectiveClientArea(This,lprectBorder,hmon) ) 

#define IBrowserService2_v_GetViewStream(This,pidl,grfMode,pwszName)	\
    ( (This)->lpVtbl -> v_GetViewStream(This,pidl,grfMode,pwszName) ) 

#define IBrowserService2_ForwardViewMsg(This,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> ForwardViewMsg(This,uMsg,wParam,lParam) ) 

#define IBrowserService2_SetAcceleratorMenu(This,hacc)	\
    ( (This)->lpVtbl -> SetAcceleratorMenu(This,hacc) ) 

#define IBrowserService2__GetToolbarCount(This)	\
    ( (This)->lpVtbl -> _GetToolbarCount(This) ) 

#define IBrowserService2__GetToolbarItem(This,itb)	\
    ( (This)->lpVtbl -> _GetToolbarItem(This,itb) ) 

#define IBrowserService2__SaveToolbars(This,pstm)	\
    ( (This)->lpVtbl -> _SaveToolbars(This,pstm) ) 

#define IBrowserService2__LoadToolbars(This,pstm)	\
    ( (This)->lpVtbl -> _LoadToolbars(This,pstm) ) 

#define IBrowserService2__CloseAndReleaseToolbars(This,fClose)	\
    ( (This)->lpVtbl -> _CloseAndReleaseToolbars(This,fClose) ) 

#define IBrowserService2_v_MayGetNextToolbarFocus(This,lpMsg,itbNext,citb,pptbi,phwnd)	\
    ( (This)->lpVtbl -> v_MayGetNextToolbarFocus(This,lpMsg,itbNext,citb,pptbi,phwnd) ) 

#define IBrowserService2__ResizeNextBorderHelper(This,itb,bUseHmonitor)	\
    ( (This)->lpVtbl -> _ResizeNextBorderHelper(This,itb,bUseHmonitor) ) 

#define IBrowserService2__FindTBar(This,punkSrc)	\
    ( (This)->lpVtbl -> _FindTBar(This,punkSrc) ) 

#define IBrowserService2__SetFocus(This,ptbi,hwnd,lpMsg)	\
    ( (This)->lpVtbl -> _SetFocus(This,ptbi,hwnd,lpMsg) ) 

#define IBrowserService2_v_MayTranslateAccelerator(This,pmsg)	\
    ( (This)->lpVtbl -> v_MayTranslateAccelerator(This,pmsg) ) 

#define IBrowserService2__GetBorderDWHelper(This,punkSrc,lprectBorder,bUseHmonitor)	\
    ( (This)->lpVtbl -> _GetBorderDWHelper(This,punkSrc,lprectBorder,bUseHmonitor) ) 

#define IBrowserService2_v_CheckZoneCrossing(This,pidl)	\
    ( (This)->lpVtbl -> v_CheckZoneCrossing(This,pidl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBrowserService2_INTERFACE_DEFINED__ */


#ifndef __IBrowserService3_INTERFACE_DEFINED__
#define __IBrowserService3_INTERFACE_DEFINED__

/* interface IBrowserService3 */
/* [local][object][uuid] */ 

typedef /* [public] */ 
enum __MIDL_IBrowserService3_0001
    {	IEPDN_BINDINGUI	= 0x1
    } 	IEPDNFLAGS;


EXTERN_C const IID IID_IBrowserService3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27D7CE21-762D-48F3-86F3-40E2FD3749C4")
    IBrowserService3 : public IBrowserService2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE _PositionViewWindow( 
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  LPRECT prc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IEParseDisplayNameEx( 
            /* [in] */ 
            __in  UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [in] */ 
            __in  DWORD dwFlags,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBrowserService3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBrowserService3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBrowserService3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBrowserService3 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetParentSite )( 
            IBrowserService3 * This,
            /* [out] */ 
            __deref_out  IOleInPlaceSite **ppipsite);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetTitle )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  LPCWSTR pszName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetTitle )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [size_is][out] */ 
            __out_ecount(cchName)  LPWSTR pszName,
            DWORD cchName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetOleObject )( 
            IBrowserService3 * This,
            /* [out] */ 
            __deref_out  IOleObject **ppobjv);
        
        HRESULT ( STDMETHODCALLTYPE *GetTravelLog )( 
            IBrowserService3 * This,
            /* [out] */ ITravelLog **pptl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *ShowControlWindow )( 
            IBrowserService3 * This,
            UINT id,
            BOOL fShow);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IsControlWindowShown )( 
            IBrowserService3 * This,
            UINT id,
            /* [out] */ 
            __out  BOOL *pfShown);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEGetDisplayName )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out_ecount(INTERNET_MAX_URL_LENGTH)  LPWSTR pwszName,
            UINT uFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEParseDisplayName )( 
            IBrowserService3 * This,
            UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *DisplayParseError )( 
            IBrowserService3 * This,
            HRESULT hres,
            /* [in] */ 
            __in  LPCWSTR pwszPath);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NavigateToPidl )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            DWORD grfHLNF);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetNavigateState )( 
            IBrowserService3 * This,
            BNSTATE bnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetNavigateState )( 
            IBrowserService3 * This,
            /* [out] */ 
            __out  BNSTATE *pbnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NotifyRedirect )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out  BOOL *pfDidBrowse);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *UpdateWindowList )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateBackForwardState )( 
            IBrowserService3 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetFlags )( 
            IBrowserService3 * This,
            DWORD dwFlags,
            DWORD dwFlagMask);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            IBrowserService3 * This,
            /* [out] */ 
            __out  DWORD *pdwFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CanNavigateNow )( 
            IBrowserService3 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPidl )( 
            IBrowserService3 * This,
            /* [out] */ 
            __out  PIDLIST_ABSOLUTE *ppidl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetReferrer )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl);
        
        /* [local] */ DWORD ( STDMETHODCALLTYPE *GetBrowserIndex )( 
            IBrowserService3 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetBrowserByIndex )( 
            IBrowserService3 * This,
            DWORD dwID,
            /* [out] */ 
            __deref_out  IUnknown **ppunk);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetHistoryObject )( 
            IBrowserService3 * This,
            /* [out] */ 
            __deref_out  IOleObject **ppole,
            /* [out] */ 
            __deref_out  IStream **pstm,
            /* [out] */ 
            __deref_out  IBindCtx **ppbc);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetHistoryObject )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IOleObject *pole,
            BOOL fIsLocalAnchor);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CacheOLEServer )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IOleObject *pole);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetSetCodePage )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  VARIANT *pvarIn,
            /* [out] */ 
            __out  VARIANT *pvarOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *OnHttpEquiv )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IShellView *psv,
            BOOL fDone,
            /* [in] */ 
            __in  VARIANT *pvarargIn,
            /* [out] */ 
            __out  VARIANT *pvarargOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPalette )( 
            IBrowserService3 * This,
            /* [out] */ 
            __out  HPALETTE *hpal);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *RegisterWindow )( 
            IBrowserService3 * This,
            BOOL fForceRegister,
            int swc);
        
        LRESULT ( STDMETHODCALLTYPE *WndProcBS )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *SetAsDefFolderSettings )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetViewRect )( 
            IBrowserService3 * This,
            /* [out] */ 
            __out  RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *OnSize )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  WPARAM wParam);
        
        HRESULT ( STDMETHODCALLTYPE *OnCreate )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  struct tagCREATESTRUCTW *pcs);
        
        LRESULT ( STDMETHODCALLTYPE *OnCommand )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *OnDestroy )( 
            IBrowserService3 * This);
        
        LRESULT ( STDMETHODCALLTYPE *OnNotify )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  struct tagNMHDR *pnm);
        
        HRESULT ( STDMETHODCALLTYPE *OnSetFocus )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnFrameWindowActivateBS )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  BOOL fActive);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseShellView )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ActivatePendingView )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateViewWindow )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IShellView *psvNew,
            /* [in] */ 
            __in  IShellView *psvOld,
            /* [in] */ 
            __in  LPRECT prcView,
            /* [out] */ 
            __out  HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *CreateBrowserPropSheetExt )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  REFIID riid,
            /* [iid_is][out] */ 
            __deref_out  void **ppv);
        
        HRESULT ( STDMETHODCALLTYPE *GetViewWindow )( 
            IBrowserService3 * This,
            /* [out] */ 
            __out  HWND *phwndView);
        
        HRESULT ( STDMETHODCALLTYPE *GetBaseBrowserData )( 
            IBrowserService3 * This,
            /* [out] */ 
            __deref_out  LPCBASEBROWSERDATA *pbbd);
        
        LPBASEBROWSERDATA ( STDMETHODCALLTYPE *PutBaseBrowserData )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeTravelLog )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  ITravelLog *ptl,
            /* [in] */ 
            __in  DWORD dw);
        
        HRESULT ( STDMETHODCALLTYPE *SetTopBrowser )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Offline )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  int iCmd);
        
        HRESULT ( STDMETHODCALLTYPE *AllowViewResize )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  BOOL f);
        
        HRESULT ( STDMETHODCALLTYPE *SetActivateState )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  UINT u);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateSecureLockIcon )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  int eSecureLock);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeDownloadManager )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeTransitionSite )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_Initialize )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  IUnknown *pauto);
        
        HRESULT ( STDMETHODCALLTYPE *_CancelPendingNavigationAsync )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_CancelPendingView )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_MaySaveChanges )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_PauseOrResumeView )( 
            IBrowserService3 * This,
            BOOL fPaused);
        
        HRESULT ( STDMETHODCALLTYPE *_DisableModeless )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_NavigateToPidl )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfHLNF,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *_TryShell2Rename )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidlNew);
        
        HRESULT ( STDMETHODCALLTYPE *_SwitchActivationNow )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_ExecChildren )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IUnknown *punkBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [unique][in] */ 
            __in_opt  const GUID *pguidCmdGroup,
            /* [in] */ 
            __in  DWORD nCmdID,
            /* [in] */ 
            __in  DWORD nCmdexecopt,
            /* [unique][in] */ 
            __in_opt  VARIANTARG *pvarargIn,
            /* [unique][out][in] */ 
            __inout_opt  VARIANTARG *pvarargOut);
        
        HRESULT ( STDMETHODCALLTYPE *_SendChildren )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  HWND hwndBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolderSetData )( 
            IBrowserService3 * This,
            /* [out] */ struct tagFolderSetData *pfsd);
        
        HRESULT ( STDMETHODCALLTYPE *_OnFocusChange )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  UINT itb);
        
        HRESULT ( STDMETHODCALLTYPE *v_ShowHideChildWindows )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  BOOL fChildOnly);
        
        UINT ( STDMETHODCALLTYPE *_get_itbLastFocus )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_put_itbLastFocus )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  UINT itbLastFocus);
        
        HRESULT ( STDMETHODCALLTYPE *_UIActivateView )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  UINT uState);
        
        HRESULT ( STDMETHODCALLTYPE *_GetViewBorderRect )( 
            IBrowserService3 * This,
            /* [out] */ RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *_UpdateViewRectSize )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeNextBorder )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  UINT itb);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeView )( 
            IBrowserService3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_GetEffectiveClientArea )( 
            IBrowserService3 * This,
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  HMONITOR hmon);
        
        IStream *( STDMETHODCALLTYPE *v_GetViewStream )( 
            IBrowserService3 * This,
            /* [in] */ PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfMode,
            /* [in] */ 
            __in  LPCWSTR pwszName);
        
        LRESULT ( STDMETHODCALLTYPE *ForwardViewMsg )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *SetAcceleratorMenu )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  HACCEL hacc);
        
        int ( STDMETHODCALLTYPE *_GetToolbarCount )( 
            IBrowserService3 * This);
        
        LPTOOLBARITEM ( STDMETHODCALLTYPE *_GetToolbarItem )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  int itb);
        
        HRESULT ( STDMETHODCALLTYPE *_SaveToolbars )( 
            IBrowserService3 * This,
            /* [in] */ IStream *pstm);
        
        HRESULT ( STDMETHODCALLTYPE *_LoadToolbars )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IStream *pstm);
        
        HRESULT ( STDMETHODCALLTYPE *_CloseAndReleaseToolbars )( 
            IBrowserService3 * This,
            BOOL fClose);
        
        HRESULT ( STDMETHODCALLTYPE *v_MayGetNextToolbarFocus )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  LPMSG lpMsg,
            /* [in] */ 
            __in  UINT itbNext,
            /* [in] */ 
            __in  int citb,
            /* [out] */ 
            __out  LPTOOLBARITEM *pptbi,
            /* [out] */ 
            __out  HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeNextBorderHelper )( 
            IBrowserService3 * This,
            UINT itb,
            BOOL bUseHmonitor);
        
        UINT ( STDMETHODCALLTYPE *_FindTBar )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IUnknown *punkSrc);
        
        HRESULT ( STDMETHODCALLTYPE *_SetFocus )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  LPTOOLBARITEM ptbi,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  LPMSG lpMsg);
        
        HRESULT ( STDMETHODCALLTYPE *v_MayTranslateAccelerator )( 
            IBrowserService3 * This,
            /* [in] */ MSG *pmsg);
        
        HRESULT ( STDMETHODCALLTYPE *_GetBorderDWHelper )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  IUnknown *punkSrc,
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  BOOL bUseHmonitor);
        
        HRESULT ( STDMETHODCALLTYPE *v_CheckZoneCrossing )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl);
        
        HRESULT ( STDMETHODCALLTYPE *_PositionViewWindow )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  LPRECT prc);
        
        HRESULT ( STDMETHODCALLTYPE *IEParseDisplayNameEx )( 
            IBrowserService3 * This,
            /* [in] */ 
            __in  UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [in] */ 
            __in  DWORD dwFlags,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut);
        
        END_INTERFACE
    } IBrowserService3Vtbl;

    interface IBrowserService3
    {
        CONST_VTBL struct IBrowserService3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBrowserService3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBrowserService3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBrowserService3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBrowserService3_GetParentSite(This,ppipsite)	\
    ( (This)->lpVtbl -> GetParentSite(This,ppipsite) ) 

#define IBrowserService3_SetTitle(This,psv,pszName)	\
    ( (This)->lpVtbl -> SetTitle(This,psv,pszName) ) 

#define IBrowserService3_GetTitle(This,psv,pszName,cchName)	\
    ( (This)->lpVtbl -> GetTitle(This,psv,pszName,cchName) ) 

#define IBrowserService3_GetOleObject(This,ppobjv)	\
    ( (This)->lpVtbl -> GetOleObject(This,ppobjv) ) 

#define IBrowserService3_GetTravelLog(This,pptl)	\
    ( (This)->lpVtbl -> GetTravelLog(This,pptl) ) 

#define IBrowserService3_ShowControlWindow(This,id,fShow)	\
    ( (This)->lpVtbl -> ShowControlWindow(This,id,fShow) ) 

#define IBrowserService3_IsControlWindowShown(This,id,pfShown)	\
    ( (This)->lpVtbl -> IsControlWindowShown(This,id,pfShown) ) 

#define IBrowserService3_IEGetDisplayName(This,pidl,pwszName,uFlags)	\
    ( (This)->lpVtbl -> IEGetDisplayName(This,pidl,pwszName,uFlags) ) 

#define IBrowserService3_IEParseDisplayName(This,uiCP,pwszPath,ppidlOut)	\
    ( (This)->lpVtbl -> IEParseDisplayName(This,uiCP,pwszPath,ppidlOut) ) 

#define IBrowserService3_DisplayParseError(This,hres,pwszPath)	\
    ( (This)->lpVtbl -> DisplayParseError(This,hres,pwszPath) ) 

#define IBrowserService3_NavigateToPidl(This,pidl,grfHLNF)	\
    ( (This)->lpVtbl -> NavigateToPidl(This,pidl,grfHLNF) ) 

#define IBrowserService3_SetNavigateState(This,bnstate)	\
    ( (This)->lpVtbl -> SetNavigateState(This,bnstate) ) 

#define IBrowserService3_GetNavigateState(This,pbnstate)	\
    ( (This)->lpVtbl -> GetNavigateState(This,pbnstate) ) 

#define IBrowserService3_NotifyRedirect(This,psv,pidl,pfDidBrowse)	\
    ( (This)->lpVtbl -> NotifyRedirect(This,psv,pidl,pfDidBrowse) ) 

#define IBrowserService3_UpdateWindowList(This)	\
    ( (This)->lpVtbl -> UpdateWindowList(This) ) 

#define IBrowserService3_UpdateBackForwardState(This)	\
    ( (This)->lpVtbl -> UpdateBackForwardState(This) ) 

#define IBrowserService3_SetFlags(This,dwFlags,dwFlagMask)	\
    ( (This)->lpVtbl -> SetFlags(This,dwFlags,dwFlagMask) ) 

#define IBrowserService3_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define IBrowserService3_CanNavigateNow(This)	\
    ( (This)->lpVtbl -> CanNavigateNow(This) ) 

#define IBrowserService3_GetPidl(This,ppidl)	\
    ( (This)->lpVtbl -> GetPidl(This,ppidl) ) 

#define IBrowserService3_SetReferrer(This,pidl)	\
    ( (This)->lpVtbl -> SetReferrer(This,pidl) ) 

#define IBrowserService3_GetBrowserIndex(This)	\
    ( (This)->lpVtbl -> GetBrowserIndex(This) ) 

#define IBrowserService3_GetBrowserByIndex(This,dwID,ppunk)	\
    ( (This)->lpVtbl -> GetBrowserByIndex(This,dwID,ppunk) ) 

#define IBrowserService3_GetHistoryObject(This,ppole,pstm,ppbc)	\
    ( (This)->lpVtbl -> GetHistoryObject(This,ppole,pstm,ppbc) ) 

#define IBrowserService3_SetHistoryObject(This,pole,fIsLocalAnchor)	\
    ( (This)->lpVtbl -> SetHistoryObject(This,pole,fIsLocalAnchor) ) 

#define IBrowserService3_CacheOLEServer(This,pole)	\
    ( (This)->lpVtbl -> CacheOLEServer(This,pole) ) 

#define IBrowserService3_GetSetCodePage(This,pvarIn,pvarOut)	\
    ( (This)->lpVtbl -> GetSetCodePage(This,pvarIn,pvarOut) ) 

#define IBrowserService3_OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut)	\
    ( (This)->lpVtbl -> OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut) ) 

#define IBrowserService3_GetPalette(This,hpal)	\
    ( (This)->lpVtbl -> GetPalette(This,hpal) ) 

#define IBrowserService3_RegisterWindow(This,fForceRegister,swc)	\
    ( (This)->lpVtbl -> RegisterWindow(This,fForceRegister,swc) ) 


#define IBrowserService3_WndProcBS(This,hwnd,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> WndProcBS(This,hwnd,uMsg,wParam,lParam) ) 

#define IBrowserService3_SetAsDefFolderSettings(This)	\
    ( (This)->lpVtbl -> SetAsDefFolderSettings(This) ) 

#define IBrowserService3_GetViewRect(This,prc)	\
    ( (This)->lpVtbl -> GetViewRect(This,prc) ) 

#define IBrowserService3_OnSize(This,wParam)	\
    ( (This)->lpVtbl -> OnSize(This,wParam) ) 

#define IBrowserService3_OnCreate(This,pcs)	\
    ( (This)->lpVtbl -> OnCreate(This,pcs) ) 

#define IBrowserService3_OnCommand(This,wParam,lParam)	\
    ( (This)->lpVtbl -> OnCommand(This,wParam,lParam) ) 

#define IBrowserService3_OnDestroy(This)	\
    ( (This)->lpVtbl -> OnDestroy(This) ) 

#define IBrowserService3_OnNotify(This,pnm)	\
    ( (This)->lpVtbl -> OnNotify(This,pnm) ) 

#define IBrowserService3_OnSetFocus(This)	\
    ( (This)->lpVtbl -> OnSetFocus(This) ) 

#define IBrowserService3_OnFrameWindowActivateBS(This,fActive)	\
    ( (This)->lpVtbl -> OnFrameWindowActivateBS(This,fActive) ) 

#define IBrowserService3_ReleaseShellView(This)	\
    ( (This)->lpVtbl -> ReleaseShellView(This) ) 

#define IBrowserService3_ActivatePendingView(This)	\
    ( (This)->lpVtbl -> ActivatePendingView(This) ) 

#define IBrowserService3_CreateViewWindow(This,psvNew,psvOld,prcView,phwnd)	\
    ( (This)->lpVtbl -> CreateViewWindow(This,psvNew,psvOld,prcView,phwnd) ) 

#define IBrowserService3_CreateBrowserPropSheetExt(This,riid,ppv)	\
    ( (This)->lpVtbl -> CreateBrowserPropSheetExt(This,riid,ppv) ) 

#define IBrowserService3_GetViewWindow(This,phwndView)	\
    ( (This)->lpVtbl -> GetViewWindow(This,phwndView) ) 

#define IBrowserService3_GetBaseBrowserData(This,pbbd)	\
    ( (This)->lpVtbl -> GetBaseBrowserData(This,pbbd) ) 

#define IBrowserService3_PutBaseBrowserData(This)	\
    ( (This)->lpVtbl -> PutBaseBrowserData(This) ) 

#define IBrowserService3_InitializeTravelLog(This,ptl,dw)	\
    ( (This)->lpVtbl -> InitializeTravelLog(This,ptl,dw) ) 

#define IBrowserService3_SetTopBrowser(This)	\
    ( (This)->lpVtbl -> SetTopBrowser(This) ) 

#define IBrowserService3_Offline(This,iCmd)	\
    ( (This)->lpVtbl -> Offline(This,iCmd) ) 

#define IBrowserService3_AllowViewResize(This,f)	\
    ( (This)->lpVtbl -> AllowViewResize(This,f) ) 

#define IBrowserService3_SetActivateState(This,u)	\
    ( (This)->lpVtbl -> SetActivateState(This,u) ) 

#define IBrowserService3_UpdateSecureLockIcon(This,eSecureLock)	\
    ( (This)->lpVtbl -> UpdateSecureLockIcon(This,eSecureLock) ) 

#define IBrowserService3_InitializeDownloadManager(This)	\
    ( (This)->lpVtbl -> InitializeDownloadManager(This) ) 

#define IBrowserService3_InitializeTransitionSite(This)	\
    ( (This)->lpVtbl -> InitializeTransitionSite(This) ) 

#define IBrowserService3__Initialize(This,hwnd,pauto)	\
    ( (This)->lpVtbl -> _Initialize(This,hwnd,pauto) ) 

#define IBrowserService3__CancelPendingNavigationAsync(This)	\
    ( (This)->lpVtbl -> _CancelPendingNavigationAsync(This) ) 

#define IBrowserService3__CancelPendingView(This)	\
    ( (This)->lpVtbl -> _CancelPendingView(This) ) 

#define IBrowserService3__MaySaveChanges(This)	\
    ( (This)->lpVtbl -> _MaySaveChanges(This) ) 

#define IBrowserService3__PauseOrResumeView(This,fPaused)	\
    ( (This)->lpVtbl -> _PauseOrResumeView(This,fPaused) ) 

#define IBrowserService3__DisableModeless(This)	\
    ( (This)->lpVtbl -> _DisableModeless(This) ) 

#define IBrowserService3__NavigateToPidl(This,pidl,grfHLNF,dwFlags)	\
    ( (This)->lpVtbl -> _NavigateToPidl(This,pidl,grfHLNF,dwFlags) ) 

#define IBrowserService3__TryShell2Rename(This,psv,pidlNew)	\
    ( (This)->lpVtbl -> _TryShell2Rename(This,psv,pidlNew) ) 

#define IBrowserService3__SwitchActivationNow(This)	\
    ( (This)->lpVtbl -> _SwitchActivationNow(This) ) 

#define IBrowserService3__ExecChildren(This,punkBar,fBroadcast,pguidCmdGroup,nCmdID,nCmdexecopt,pvarargIn,pvarargOut)	\
    ( (This)->lpVtbl -> _ExecChildren(This,punkBar,fBroadcast,pguidCmdGroup,nCmdID,nCmdexecopt,pvarargIn,pvarargOut) ) 

#define IBrowserService3__SendChildren(This,hwndBar,fBroadcast,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> _SendChildren(This,hwndBar,fBroadcast,uMsg,wParam,lParam) ) 

#define IBrowserService3_GetFolderSetData(This,pfsd)	\
    ( (This)->lpVtbl -> GetFolderSetData(This,pfsd) ) 

#define IBrowserService3__OnFocusChange(This,itb)	\
    ( (This)->lpVtbl -> _OnFocusChange(This,itb) ) 

#define IBrowserService3_v_ShowHideChildWindows(This,fChildOnly)	\
    ( (This)->lpVtbl -> v_ShowHideChildWindows(This,fChildOnly) ) 

#define IBrowserService3__get_itbLastFocus(This)	\
    ( (This)->lpVtbl -> _get_itbLastFocus(This) ) 

#define IBrowserService3__put_itbLastFocus(This,itbLastFocus)	\
    ( (This)->lpVtbl -> _put_itbLastFocus(This,itbLastFocus) ) 

#define IBrowserService3__UIActivateView(This,uState)	\
    ( (This)->lpVtbl -> _UIActivateView(This,uState) ) 

#define IBrowserService3__GetViewBorderRect(This,prc)	\
    ( (This)->lpVtbl -> _GetViewBorderRect(This,prc) ) 

#define IBrowserService3__UpdateViewRectSize(This)	\
    ( (This)->lpVtbl -> _UpdateViewRectSize(This) ) 

#define IBrowserService3__ResizeNextBorder(This,itb)	\
    ( (This)->lpVtbl -> _ResizeNextBorder(This,itb) ) 

#define IBrowserService3__ResizeView(This)	\
    ( (This)->lpVtbl -> _ResizeView(This) ) 

#define IBrowserService3__GetEffectiveClientArea(This,lprectBorder,hmon)	\
    ( (This)->lpVtbl -> _GetEffectiveClientArea(This,lprectBorder,hmon) ) 

#define IBrowserService3_v_GetViewStream(This,pidl,grfMode,pwszName)	\
    ( (This)->lpVtbl -> v_GetViewStream(This,pidl,grfMode,pwszName) ) 

#define IBrowserService3_ForwardViewMsg(This,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> ForwardViewMsg(This,uMsg,wParam,lParam) ) 

#define IBrowserService3_SetAcceleratorMenu(This,hacc)	\
    ( (This)->lpVtbl -> SetAcceleratorMenu(This,hacc) ) 

#define IBrowserService3__GetToolbarCount(This)	\
    ( (This)->lpVtbl -> _GetToolbarCount(This) ) 

#define IBrowserService3__GetToolbarItem(This,itb)	\
    ( (This)->lpVtbl -> _GetToolbarItem(This,itb) ) 

#define IBrowserService3__SaveToolbars(This,pstm)	\
    ( (This)->lpVtbl -> _SaveToolbars(This,pstm) ) 

#define IBrowserService3__LoadToolbars(This,pstm)	\
    ( (This)->lpVtbl -> _LoadToolbars(This,pstm) ) 

#define IBrowserService3__CloseAndReleaseToolbars(This,fClose)	\
    ( (This)->lpVtbl -> _CloseAndReleaseToolbars(This,fClose) ) 

#define IBrowserService3_v_MayGetNextToolbarFocus(This,lpMsg,itbNext,citb,pptbi,phwnd)	\
    ( (This)->lpVtbl -> v_MayGetNextToolbarFocus(This,lpMsg,itbNext,citb,pptbi,phwnd) ) 

#define IBrowserService3__ResizeNextBorderHelper(This,itb,bUseHmonitor)	\
    ( (This)->lpVtbl -> _ResizeNextBorderHelper(This,itb,bUseHmonitor) ) 

#define IBrowserService3__FindTBar(This,punkSrc)	\
    ( (This)->lpVtbl -> _FindTBar(This,punkSrc) ) 

#define IBrowserService3__SetFocus(This,ptbi,hwnd,lpMsg)	\
    ( (This)->lpVtbl -> _SetFocus(This,ptbi,hwnd,lpMsg) ) 

#define IBrowserService3_v_MayTranslateAccelerator(This,pmsg)	\
    ( (This)->lpVtbl -> v_MayTranslateAccelerator(This,pmsg) ) 

#define IBrowserService3__GetBorderDWHelper(This,punkSrc,lprectBorder,bUseHmonitor)	\
    ( (This)->lpVtbl -> _GetBorderDWHelper(This,punkSrc,lprectBorder,bUseHmonitor) ) 

#define IBrowserService3_v_CheckZoneCrossing(This,pidl)	\
    ( (This)->lpVtbl -> v_CheckZoneCrossing(This,pidl) ) 


#define IBrowserService3__PositionViewWindow(This,hwnd,prc)	\
    ( (This)->lpVtbl -> _PositionViewWindow(This,hwnd,prc) ) 

#define IBrowserService3_IEParseDisplayNameEx(This,uiCP,pwszPath,dwFlags,ppidlOut)	\
    ( (This)->lpVtbl -> IEParseDisplayNameEx(This,uiCP,pwszPath,dwFlags,ppidlOut) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBrowserService3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shdeprecated_0000_0008 */
/* [local] */ 

#if (NTDDI_VERSION >= NTDDI_VISTA) || (_WIN32_IE >= _WIN32_IE_IE70)


extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0008_v0_0_s_ifspec;

#ifndef __IBrowserService4_INTERFACE_DEFINED__
#define __IBrowserService4_INTERFACE_DEFINED__

/* interface IBrowserService4 */
/* [local][object][uuid] */ 


EXTERN_C const IID IID_IBrowserService4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("639f1bff-e135-4096-abd8-e0f504d649a4")
    IBrowserService4 : public IBrowserService3
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ActivateView( 
            /* [in] */ BOOL fPendingView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveViewState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE _ResizeAllBorders( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBrowserService4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBrowserService4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBrowserService4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBrowserService4 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetParentSite )( 
            IBrowserService4 * This,
            /* [out] */ 
            __deref_out  IOleInPlaceSite **ppipsite);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetTitle )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  LPCWSTR pszName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetTitle )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [size_is][out] */ 
            __out_ecount(cchName)  LPWSTR pszName,
            DWORD cchName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetOleObject )( 
            IBrowserService4 * This,
            /* [out] */ 
            __deref_out  IOleObject **ppobjv);
        
        HRESULT ( STDMETHODCALLTYPE *GetTravelLog )( 
            IBrowserService4 * This,
            /* [out] */ ITravelLog **pptl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *ShowControlWindow )( 
            IBrowserService4 * This,
            UINT id,
            BOOL fShow);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IsControlWindowShown )( 
            IBrowserService4 * This,
            UINT id,
            /* [out] */ 
            __out  BOOL *pfShown);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEGetDisplayName )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out_ecount(INTERNET_MAX_URL_LENGTH)  LPWSTR pwszName,
            UINT uFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *IEParseDisplayName )( 
            IBrowserService4 * This,
            UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *DisplayParseError )( 
            IBrowserService4 * This,
            HRESULT hres,
            /* [in] */ 
            __in  LPCWSTR pwszPath);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NavigateToPidl )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            DWORD grfHLNF);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetNavigateState )( 
            IBrowserService4 * This,
            BNSTATE bnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetNavigateState )( 
            IBrowserService4 * This,
            /* [out] */ 
            __out  BNSTATE *pbnstate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *NotifyRedirect )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [out] */ 
            __out  BOOL *pfDidBrowse);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *UpdateWindowList )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateBackForwardState )( 
            IBrowserService4 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetFlags )( 
            IBrowserService4 * This,
            DWORD dwFlags,
            DWORD dwFlagMask);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            IBrowserService4 * This,
            /* [out] */ 
            __out  DWORD *pdwFlags);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CanNavigateNow )( 
            IBrowserService4 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPidl )( 
            IBrowserService4 * This,
            /* [out] */ 
            __out  PIDLIST_ABSOLUTE *ppidl);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetReferrer )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl);
        
        /* [local] */ DWORD ( STDMETHODCALLTYPE *GetBrowserIndex )( 
            IBrowserService4 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetBrowserByIndex )( 
            IBrowserService4 * This,
            DWORD dwID,
            /* [out] */ 
            __deref_out  IUnknown **ppunk);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetHistoryObject )( 
            IBrowserService4 * This,
            /* [out] */ 
            __deref_out  IOleObject **ppole,
            /* [out] */ 
            __deref_out  IStream **pstm,
            /* [out] */ 
            __deref_out  IBindCtx **ppbc);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetHistoryObject )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IOleObject *pole,
            BOOL fIsLocalAnchor);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CacheOLEServer )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IOleObject *pole);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetSetCodePage )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  VARIANT *pvarIn,
            /* [out] */ 
            __out  VARIANT *pvarOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *OnHttpEquiv )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IShellView *psv,
            BOOL fDone,
            /* [in] */ 
            __in  VARIANT *pvarargIn,
            /* [out] */ 
            __out  VARIANT *pvarargOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPalette )( 
            IBrowserService4 * This,
            /* [out] */ 
            __out  HPALETTE *hpal);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *RegisterWindow )( 
            IBrowserService4 * This,
            BOOL fForceRegister,
            int swc);
        
        LRESULT ( STDMETHODCALLTYPE *WndProcBS )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *SetAsDefFolderSettings )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetViewRect )( 
            IBrowserService4 * This,
            /* [out] */ 
            __out  RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *OnSize )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  WPARAM wParam);
        
        HRESULT ( STDMETHODCALLTYPE *OnCreate )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  struct tagCREATESTRUCTW *pcs);
        
        LRESULT ( STDMETHODCALLTYPE *OnCommand )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *OnDestroy )( 
            IBrowserService4 * This);
        
        LRESULT ( STDMETHODCALLTYPE *OnNotify )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  struct tagNMHDR *pnm);
        
        HRESULT ( STDMETHODCALLTYPE *OnSetFocus )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnFrameWindowActivateBS )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  BOOL fActive);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseShellView )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ActivatePendingView )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateViewWindow )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IShellView *psvNew,
            /* [in] */ 
            __in  IShellView *psvOld,
            /* [in] */ 
            __in  LPRECT prcView,
            /* [out] */ 
            __out  HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *CreateBrowserPropSheetExt )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  REFIID riid,
            /* [iid_is][out] */ 
            __deref_out  void **ppv);
        
        HRESULT ( STDMETHODCALLTYPE *GetViewWindow )( 
            IBrowserService4 * This,
            /* [out] */ 
            __out  HWND *phwndView);
        
        HRESULT ( STDMETHODCALLTYPE *GetBaseBrowserData )( 
            IBrowserService4 * This,
            /* [out] */ 
            __deref_out  LPCBASEBROWSERDATA *pbbd);
        
        LPBASEBROWSERDATA ( STDMETHODCALLTYPE *PutBaseBrowserData )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeTravelLog )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  ITravelLog *ptl,
            /* [in] */ 
            __in  DWORD dw);
        
        HRESULT ( STDMETHODCALLTYPE *SetTopBrowser )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Offline )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  int iCmd);
        
        HRESULT ( STDMETHODCALLTYPE *AllowViewResize )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  BOOL f);
        
        HRESULT ( STDMETHODCALLTYPE *SetActivateState )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  UINT u);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateSecureLockIcon )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  int eSecureLock);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeDownloadManager )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeTransitionSite )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_Initialize )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  IUnknown *pauto);
        
        HRESULT ( STDMETHODCALLTYPE *_CancelPendingNavigationAsync )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_CancelPendingView )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_MaySaveChanges )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_PauseOrResumeView )( 
            IBrowserService4 * This,
            BOOL fPaused);
        
        HRESULT ( STDMETHODCALLTYPE *_DisableModeless )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_NavigateToPidl )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfHLNF,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *_TryShell2Rename )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IShellView *psv,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidlNew);
        
        HRESULT ( STDMETHODCALLTYPE *_SwitchActivationNow )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_ExecChildren )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IUnknown *punkBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [unique][in] */ 
            __in_opt  const GUID *pguidCmdGroup,
            /* [in] */ 
            __in  DWORD nCmdID,
            /* [in] */ 
            __in  DWORD nCmdexecopt,
            /* [unique][in] */ 
            __in_opt  VARIANTARG *pvarargIn,
            /* [unique][out][in] */ 
            __inout_opt  VARIANTARG *pvarargOut);
        
        HRESULT ( STDMETHODCALLTYPE *_SendChildren )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  HWND hwndBar,
            /* [in] */ 
            __in  BOOL fBroadcast,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolderSetData )( 
            IBrowserService4 * This,
            /* [out] */ struct tagFolderSetData *pfsd);
        
        HRESULT ( STDMETHODCALLTYPE *_OnFocusChange )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  UINT itb);
        
        HRESULT ( STDMETHODCALLTYPE *v_ShowHideChildWindows )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  BOOL fChildOnly);
        
        UINT ( STDMETHODCALLTYPE *_get_itbLastFocus )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_put_itbLastFocus )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  UINT itbLastFocus);
        
        HRESULT ( STDMETHODCALLTYPE *_UIActivateView )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  UINT uState);
        
        HRESULT ( STDMETHODCALLTYPE *_GetViewBorderRect )( 
            IBrowserService4 * This,
            /* [out] */ RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *_UpdateViewRectSize )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeNextBorder )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  UINT itb);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeView )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_GetEffectiveClientArea )( 
            IBrowserService4 * This,
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  HMONITOR hmon);
        
        IStream *( STDMETHODCALLTYPE *v_GetViewStream )( 
            IBrowserService4 * This,
            /* [in] */ PCIDLIST_ABSOLUTE pidl,
            /* [in] */ 
            __in  DWORD grfMode,
            /* [in] */ 
            __in  LPCWSTR pwszName);
        
        LRESULT ( STDMETHODCALLTYPE *ForwardViewMsg )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *SetAcceleratorMenu )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  HACCEL hacc);
        
        int ( STDMETHODCALLTYPE *_GetToolbarCount )( 
            IBrowserService4 * This);
        
        LPTOOLBARITEM ( STDMETHODCALLTYPE *_GetToolbarItem )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  int itb);
        
        HRESULT ( STDMETHODCALLTYPE *_SaveToolbars )( 
            IBrowserService4 * This,
            /* [in] */ IStream *pstm);
        
        HRESULT ( STDMETHODCALLTYPE *_LoadToolbars )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IStream *pstm);
        
        HRESULT ( STDMETHODCALLTYPE *_CloseAndReleaseToolbars )( 
            IBrowserService4 * This,
            BOOL fClose);
        
        HRESULT ( STDMETHODCALLTYPE *v_MayGetNextToolbarFocus )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  LPMSG lpMsg,
            /* [in] */ 
            __in  UINT itbNext,
            /* [in] */ 
            __in  int citb,
            /* [out] */ 
            __out  LPTOOLBARITEM *pptbi,
            /* [out] */ 
            __out  HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeNextBorderHelper )( 
            IBrowserService4 * This,
            UINT itb,
            BOOL bUseHmonitor);
        
        UINT ( STDMETHODCALLTYPE *_FindTBar )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IUnknown *punkSrc);
        
        HRESULT ( STDMETHODCALLTYPE *_SetFocus )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  LPTOOLBARITEM ptbi,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  LPMSG lpMsg);
        
        HRESULT ( STDMETHODCALLTYPE *v_MayTranslateAccelerator )( 
            IBrowserService4 * This,
            /* [in] */ MSG *pmsg);
        
        HRESULT ( STDMETHODCALLTYPE *_GetBorderDWHelper )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  IUnknown *punkSrc,
            /* [out] */ 
            __out  LPRECT lprectBorder,
            /* [in] */ 
            __in  BOOL bUseHmonitor);
        
        HRESULT ( STDMETHODCALLTYPE *v_CheckZoneCrossing )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidl);
        
        HRESULT ( STDMETHODCALLTYPE *_PositionViewWindow )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  LPRECT prc);
        
        HRESULT ( STDMETHODCALLTYPE *IEParseDisplayNameEx )( 
            IBrowserService4 * This,
            /* [in] */ 
            __in  UINT uiCP,
            /* [in] */ 
            __in  LPCWSTR pwszPath,
            /* [in] */ 
            __in  DWORD dwFlags,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidlOut);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateView )( 
            IBrowserService4 * This,
            /* [in] */ BOOL fPendingView);
        
        HRESULT ( STDMETHODCALLTYPE *SaveViewState )( 
            IBrowserService4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *_ResizeAllBorders )( 
            IBrowserService4 * This);
        
        END_INTERFACE
    } IBrowserService4Vtbl;

    interface IBrowserService4
    {
        CONST_VTBL struct IBrowserService4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBrowserService4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBrowserService4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBrowserService4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBrowserService4_GetParentSite(This,ppipsite)	\
    ( (This)->lpVtbl -> GetParentSite(This,ppipsite) ) 

#define IBrowserService4_SetTitle(This,psv,pszName)	\
    ( (This)->lpVtbl -> SetTitle(This,psv,pszName) ) 

#define IBrowserService4_GetTitle(This,psv,pszName,cchName)	\
    ( (This)->lpVtbl -> GetTitle(This,psv,pszName,cchName) ) 

#define IBrowserService4_GetOleObject(This,ppobjv)	\
    ( (This)->lpVtbl -> GetOleObject(This,ppobjv) ) 

#define IBrowserService4_GetTravelLog(This,pptl)	\
    ( (This)->lpVtbl -> GetTravelLog(This,pptl) ) 

#define IBrowserService4_ShowControlWindow(This,id,fShow)	\
    ( (This)->lpVtbl -> ShowControlWindow(This,id,fShow) ) 

#define IBrowserService4_IsControlWindowShown(This,id,pfShown)	\
    ( (This)->lpVtbl -> IsControlWindowShown(This,id,pfShown) ) 

#define IBrowserService4_IEGetDisplayName(This,pidl,pwszName,uFlags)	\
    ( (This)->lpVtbl -> IEGetDisplayName(This,pidl,pwszName,uFlags) ) 

#define IBrowserService4_IEParseDisplayName(This,uiCP,pwszPath,ppidlOut)	\
    ( (This)->lpVtbl -> IEParseDisplayName(This,uiCP,pwszPath,ppidlOut) ) 

#define IBrowserService4_DisplayParseError(This,hres,pwszPath)	\
    ( (This)->lpVtbl -> DisplayParseError(This,hres,pwszPath) ) 

#define IBrowserService4_NavigateToPidl(This,pidl,grfHLNF)	\
    ( (This)->lpVtbl -> NavigateToPidl(This,pidl,grfHLNF) ) 

#define IBrowserService4_SetNavigateState(This,bnstate)	\
    ( (This)->lpVtbl -> SetNavigateState(This,bnstate) ) 

#define IBrowserService4_GetNavigateState(This,pbnstate)	\
    ( (This)->lpVtbl -> GetNavigateState(This,pbnstate) ) 

#define IBrowserService4_NotifyRedirect(This,psv,pidl,pfDidBrowse)	\
    ( (This)->lpVtbl -> NotifyRedirect(This,psv,pidl,pfDidBrowse) ) 

#define IBrowserService4_UpdateWindowList(This)	\
    ( (This)->lpVtbl -> UpdateWindowList(This) ) 

#define IBrowserService4_UpdateBackForwardState(This)	\
    ( (This)->lpVtbl -> UpdateBackForwardState(This) ) 

#define IBrowserService4_SetFlags(This,dwFlags,dwFlagMask)	\
    ( (This)->lpVtbl -> SetFlags(This,dwFlags,dwFlagMask) ) 

#define IBrowserService4_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define IBrowserService4_CanNavigateNow(This)	\
    ( (This)->lpVtbl -> CanNavigateNow(This) ) 

#define IBrowserService4_GetPidl(This,ppidl)	\
    ( (This)->lpVtbl -> GetPidl(This,ppidl) ) 

#define IBrowserService4_SetReferrer(This,pidl)	\
    ( (This)->lpVtbl -> SetReferrer(This,pidl) ) 

#define IBrowserService4_GetBrowserIndex(This)	\
    ( (This)->lpVtbl -> GetBrowserIndex(This) ) 

#define IBrowserService4_GetBrowserByIndex(This,dwID,ppunk)	\
    ( (This)->lpVtbl -> GetBrowserByIndex(This,dwID,ppunk) ) 

#define IBrowserService4_GetHistoryObject(This,ppole,pstm,ppbc)	\
    ( (This)->lpVtbl -> GetHistoryObject(This,ppole,pstm,ppbc) ) 

#define IBrowserService4_SetHistoryObject(This,pole,fIsLocalAnchor)	\
    ( (This)->lpVtbl -> SetHistoryObject(This,pole,fIsLocalAnchor) ) 

#define IBrowserService4_CacheOLEServer(This,pole)	\
    ( (This)->lpVtbl -> CacheOLEServer(This,pole) ) 

#define IBrowserService4_GetSetCodePage(This,pvarIn,pvarOut)	\
    ( (This)->lpVtbl -> GetSetCodePage(This,pvarIn,pvarOut) ) 

#define IBrowserService4_OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut)	\
    ( (This)->lpVtbl -> OnHttpEquiv(This,psv,fDone,pvarargIn,pvarargOut) ) 

#define IBrowserService4_GetPalette(This,hpal)	\
    ( (This)->lpVtbl -> GetPalette(This,hpal) ) 

#define IBrowserService4_RegisterWindow(This,fForceRegister,swc)	\
    ( (This)->lpVtbl -> RegisterWindow(This,fForceRegister,swc) ) 


#define IBrowserService4_WndProcBS(This,hwnd,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> WndProcBS(This,hwnd,uMsg,wParam,lParam) ) 

#define IBrowserService4_SetAsDefFolderSettings(This)	\
    ( (This)->lpVtbl -> SetAsDefFolderSettings(This) ) 

#define IBrowserService4_GetViewRect(This,prc)	\
    ( (This)->lpVtbl -> GetViewRect(This,prc) ) 

#define IBrowserService4_OnSize(This,wParam)	\
    ( (This)->lpVtbl -> OnSize(This,wParam) ) 

#define IBrowserService4_OnCreate(This,pcs)	\
    ( (This)->lpVtbl -> OnCreate(This,pcs) ) 

#define IBrowserService4_OnCommand(This,wParam,lParam)	\
    ( (This)->lpVtbl -> OnCommand(This,wParam,lParam) ) 

#define IBrowserService4_OnDestroy(This)	\
    ( (This)->lpVtbl -> OnDestroy(This) ) 

#define IBrowserService4_OnNotify(This,pnm)	\
    ( (This)->lpVtbl -> OnNotify(This,pnm) ) 

#define IBrowserService4_OnSetFocus(This)	\
    ( (This)->lpVtbl -> OnSetFocus(This) ) 

#define IBrowserService4_OnFrameWindowActivateBS(This,fActive)	\
    ( (This)->lpVtbl -> OnFrameWindowActivateBS(This,fActive) ) 

#define IBrowserService4_ReleaseShellView(This)	\
    ( (This)->lpVtbl -> ReleaseShellView(This) ) 

#define IBrowserService4_ActivatePendingView(This)	\
    ( (This)->lpVtbl -> ActivatePendingView(This) ) 

#define IBrowserService4_CreateViewWindow(This,psvNew,psvOld,prcView,phwnd)	\
    ( (This)->lpVtbl -> CreateViewWindow(This,psvNew,psvOld,prcView,phwnd) ) 

#define IBrowserService4_CreateBrowserPropSheetExt(This,riid,ppv)	\
    ( (This)->lpVtbl -> CreateBrowserPropSheetExt(This,riid,ppv) ) 

#define IBrowserService4_GetViewWindow(This,phwndView)	\
    ( (This)->lpVtbl -> GetViewWindow(This,phwndView) ) 

#define IBrowserService4_GetBaseBrowserData(This,pbbd)	\
    ( (This)->lpVtbl -> GetBaseBrowserData(This,pbbd) ) 

#define IBrowserService4_PutBaseBrowserData(This)	\
    ( (This)->lpVtbl -> PutBaseBrowserData(This) ) 

#define IBrowserService4_InitializeTravelLog(This,ptl,dw)	\
    ( (This)->lpVtbl -> InitializeTravelLog(This,ptl,dw) ) 

#define IBrowserService4_SetTopBrowser(This)	\
    ( (This)->lpVtbl -> SetTopBrowser(This) ) 

#define IBrowserService4_Offline(This,iCmd)	\
    ( (This)->lpVtbl -> Offline(This,iCmd) ) 

#define IBrowserService4_AllowViewResize(This,f)	\
    ( (This)->lpVtbl -> AllowViewResize(This,f) ) 

#define IBrowserService4_SetActivateState(This,u)	\
    ( (This)->lpVtbl -> SetActivateState(This,u) ) 

#define IBrowserService4_UpdateSecureLockIcon(This,eSecureLock)	\
    ( (This)->lpVtbl -> UpdateSecureLockIcon(This,eSecureLock) ) 

#define IBrowserService4_InitializeDownloadManager(This)	\
    ( (This)->lpVtbl -> InitializeDownloadManager(This) ) 

#define IBrowserService4_InitializeTransitionSite(This)	\
    ( (This)->lpVtbl -> InitializeTransitionSite(This) ) 

#define IBrowserService4__Initialize(This,hwnd,pauto)	\
    ( (This)->lpVtbl -> _Initialize(This,hwnd,pauto) ) 

#define IBrowserService4__CancelPendingNavigationAsync(This)	\
    ( (This)->lpVtbl -> _CancelPendingNavigationAsync(This) ) 

#define IBrowserService4__CancelPendingView(This)	\
    ( (This)->lpVtbl -> _CancelPendingView(This) ) 

#define IBrowserService4__MaySaveChanges(This)	\
    ( (This)->lpVtbl -> _MaySaveChanges(This) ) 

#define IBrowserService4__PauseOrResumeView(This,fPaused)	\
    ( (This)->lpVtbl -> _PauseOrResumeView(This,fPaused) ) 

#define IBrowserService4__DisableModeless(This)	\
    ( (This)->lpVtbl -> _DisableModeless(This) ) 

#define IBrowserService4__NavigateToPidl(This,pidl,grfHLNF,dwFlags)	\
    ( (This)->lpVtbl -> _NavigateToPidl(This,pidl,grfHLNF,dwFlags) ) 

#define IBrowserService4__TryShell2Rename(This,psv,pidlNew)	\
    ( (This)->lpVtbl -> _TryShell2Rename(This,psv,pidlNew) ) 

#define IBrowserService4__SwitchActivationNow(This)	\
    ( (This)->lpVtbl -> _SwitchActivationNow(This) ) 

#define IBrowserService4__ExecChildren(This,punkBar,fBroadcast,pguidCmdGroup,nCmdID,nCmdexecopt,pvarargIn,pvarargOut)	\
    ( (This)->lpVtbl -> _ExecChildren(This,punkBar,fBroadcast,pguidCmdGroup,nCmdID,nCmdexecopt,pvarargIn,pvarargOut) ) 

#define IBrowserService4__SendChildren(This,hwndBar,fBroadcast,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> _SendChildren(This,hwndBar,fBroadcast,uMsg,wParam,lParam) ) 

#define IBrowserService4_GetFolderSetData(This,pfsd)	\
    ( (This)->lpVtbl -> GetFolderSetData(This,pfsd) ) 

#define IBrowserService4__OnFocusChange(This,itb)	\
    ( (This)->lpVtbl -> _OnFocusChange(This,itb) ) 

#define IBrowserService4_v_ShowHideChildWindows(This,fChildOnly)	\
    ( (This)->lpVtbl -> v_ShowHideChildWindows(This,fChildOnly) ) 

#define IBrowserService4__get_itbLastFocus(This)	\
    ( (This)->lpVtbl -> _get_itbLastFocus(This) ) 

#define IBrowserService4__put_itbLastFocus(This,itbLastFocus)	\
    ( (This)->lpVtbl -> _put_itbLastFocus(This,itbLastFocus) ) 

#define IBrowserService4__UIActivateView(This,uState)	\
    ( (This)->lpVtbl -> _UIActivateView(This,uState) ) 

#define IBrowserService4__GetViewBorderRect(This,prc)	\
    ( (This)->lpVtbl -> _GetViewBorderRect(This,prc) ) 

#define IBrowserService4__UpdateViewRectSize(This)	\
    ( (This)->lpVtbl -> _UpdateViewRectSize(This) ) 

#define IBrowserService4__ResizeNextBorder(This,itb)	\
    ( (This)->lpVtbl -> _ResizeNextBorder(This,itb) ) 

#define IBrowserService4__ResizeView(This)	\
    ( (This)->lpVtbl -> _ResizeView(This) ) 

#define IBrowserService4__GetEffectiveClientArea(This,lprectBorder,hmon)	\
    ( (This)->lpVtbl -> _GetEffectiveClientArea(This,lprectBorder,hmon) ) 

#define IBrowserService4_v_GetViewStream(This,pidl,grfMode,pwszName)	\
    ( (This)->lpVtbl -> v_GetViewStream(This,pidl,grfMode,pwszName) ) 

#define IBrowserService4_ForwardViewMsg(This,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> ForwardViewMsg(This,uMsg,wParam,lParam) ) 

#define IBrowserService4_SetAcceleratorMenu(This,hacc)	\
    ( (This)->lpVtbl -> SetAcceleratorMenu(This,hacc) ) 

#define IBrowserService4__GetToolbarCount(This)	\
    ( (This)->lpVtbl -> _GetToolbarCount(This) ) 

#define IBrowserService4__GetToolbarItem(This,itb)	\
    ( (This)->lpVtbl -> _GetToolbarItem(This,itb) ) 

#define IBrowserService4__SaveToolbars(This,pstm)	\
    ( (This)->lpVtbl -> _SaveToolbars(This,pstm) ) 

#define IBrowserService4__LoadToolbars(This,pstm)	\
    ( (This)->lpVtbl -> _LoadToolbars(This,pstm) ) 

#define IBrowserService4__CloseAndReleaseToolbars(This,fClose)	\
    ( (This)->lpVtbl -> _CloseAndReleaseToolbars(This,fClose) ) 

#define IBrowserService4_v_MayGetNextToolbarFocus(This,lpMsg,itbNext,citb,pptbi,phwnd)	\
    ( (This)->lpVtbl -> v_MayGetNextToolbarFocus(This,lpMsg,itbNext,citb,pptbi,phwnd) ) 

#define IBrowserService4__ResizeNextBorderHelper(This,itb,bUseHmonitor)	\
    ( (This)->lpVtbl -> _ResizeNextBorderHelper(This,itb,bUseHmonitor) ) 

#define IBrowserService4__FindTBar(This,punkSrc)	\
    ( (This)->lpVtbl -> _FindTBar(This,punkSrc) ) 

#define IBrowserService4__SetFocus(This,ptbi,hwnd,lpMsg)	\
    ( (This)->lpVtbl -> _SetFocus(This,ptbi,hwnd,lpMsg) ) 

#define IBrowserService4_v_MayTranslateAccelerator(This,pmsg)	\
    ( (This)->lpVtbl -> v_MayTranslateAccelerator(This,pmsg) ) 

#define IBrowserService4__GetBorderDWHelper(This,punkSrc,lprectBorder,bUseHmonitor)	\
    ( (This)->lpVtbl -> _GetBorderDWHelper(This,punkSrc,lprectBorder,bUseHmonitor) ) 

#define IBrowserService4_v_CheckZoneCrossing(This,pidl)	\
    ( (This)->lpVtbl -> v_CheckZoneCrossing(This,pidl) ) 


#define IBrowserService4__PositionViewWindow(This,hwnd,prc)	\
    ( (This)->lpVtbl -> _PositionViewWindow(This,hwnd,prc) ) 

#define IBrowserService4_IEParseDisplayNameEx(This,uiCP,pwszPath,dwFlags,ppidlOut)	\
    ( (This)->lpVtbl -> IEParseDisplayNameEx(This,uiCP,pwszPath,dwFlags,ppidlOut) ) 


#define IBrowserService4_ActivateView(This,fPendingView)	\
    ( (This)->lpVtbl -> ActivateView(This,fPendingView) ) 

#define IBrowserService4_SaveViewState(This)	\
    ( (This)->lpVtbl -> SaveViewState(This) ) 

#define IBrowserService4__ResizeAllBorders(This)	\
    ( (This)->lpVtbl -> _ResizeAllBorders(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBrowserService4_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shdeprecated_0000_0009 */
/* [local] */ 

#endif // (NTDDI_VERSION >= NTDDI_VISTA) || (_WIN32_IE >= _WIN32_IE_IE70)
#if (_WIN32_IE >= _WIN32_IE_IE60)


extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0009_v0_0_s_ifspec;

#ifndef __ITrackShellMenu_INTERFACE_DEFINED__
#define __ITrackShellMenu_INTERFACE_DEFINED__

/* interface ITrackShellMenu */
/* [local][unique][object][uuid] */ 


EXTERN_C const IID IID_ITrackShellMenu;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8278F932-2A3E-11d2-838F-00C04FD918D0")
    ITrackShellMenu : public IShellMenu
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetObscured( 
            /* [in] */ HWND hwndTB,
            /* [in] */ IUnknown *punkBand,
            DWORD dwSMSetFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Popup( 
            /* [in] */ HWND hwnd,
            /* [in] */ POINTL *ppt,
            /* [in] */ RECTL *prcExclude,
            MP_POPUPFLAGS dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITrackShellMenuVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITrackShellMenu * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITrackShellMenu * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITrackShellMenu * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            ITrackShellMenu * This,
            /* [in] */ 
            __in  IShellMenuCallback *psmc,
            /* [in] */ 
            __in  UINT uId,
            /* [in] */ 
            __in  UINT uIdAncestor,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetMenuInfo )( 
            ITrackShellMenu * This,
            /* [out] */ 
            __deref_out  IShellMenuCallback **ppsmc,
            /* [out] */ 
            __out  UINT *puId,
            /* [out] */ 
            __out  UINT *puIdAncestor,
            /* [out] */ 
            __out  DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetShellFolder )( 
            ITrackShellMenu * This,
            /* [in] */ 
            __in  IShellFolder *psf,
            /* [in] */ 
            __in  PCIDLIST_ABSOLUTE pidlFolder,
            /* [in] */ 
            __in  HKEY hKey,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetShellFolder )( 
            ITrackShellMenu * This,
            /* [out] */ 
            __out  DWORD *pdwFlags,
            /* [out] */ 
            __deref_out  PIDLIST_ABSOLUTE *ppidl,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __deref_out  void **ppv);
        
        HRESULT ( STDMETHODCALLTYPE *SetMenu )( 
            ITrackShellMenu * This,
            /* [in] */ 
            __in  HMENU hmenu,
            /* [in] */ 
            __in  HWND hwnd,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetMenu )( 
            ITrackShellMenu * This,
            /* [out] */ 
            __out_opt  HMENU *phmenu,
            /* [out] */ 
            __out_opt  HWND *phwnd,
            /* [out] */ 
            __out_opt  DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidateItem )( 
            ITrackShellMenu * This,
            /* [in] */ 
            __in_opt  LPSMDATA psmd,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetState )( 
            ITrackShellMenu * This,
            /* [out] */ 
            __out  LPSMDATA psmd);
        
        HRESULT ( STDMETHODCALLTYPE *SetMenuToolbar )( 
            ITrackShellMenu * This,
            /* [in] */ 
            __in  IUnknown *punk,
            /* [in] */ 
            __in  DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetObscured )( 
            ITrackShellMenu * This,
            /* [in] */ HWND hwndTB,
            /* [in] */ IUnknown *punkBand,
            DWORD dwSMSetFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Popup )( 
            ITrackShellMenu * This,
            /* [in] */ HWND hwnd,
            /* [in] */ POINTL *ppt,
            /* [in] */ RECTL *prcExclude,
            MP_POPUPFLAGS dwFlags);
        
        END_INTERFACE
    } ITrackShellMenuVtbl;

    interface ITrackShellMenu
    {
        CONST_VTBL struct ITrackShellMenuVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITrackShellMenu_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITrackShellMenu_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITrackShellMenu_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITrackShellMenu_Initialize(This,psmc,uId,uIdAncestor,dwFlags)	\
    ( (This)->lpVtbl -> Initialize(This,psmc,uId,uIdAncestor,dwFlags) ) 

#define ITrackShellMenu_GetMenuInfo(This,ppsmc,puId,puIdAncestor,pdwFlags)	\
    ( (This)->lpVtbl -> GetMenuInfo(This,ppsmc,puId,puIdAncestor,pdwFlags) ) 

#define ITrackShellMenu_SetShellFolder(This,psf,pidlFolder,hKey,dwFlags)	\
    ( (This)->lpVtbl -> SetShellFolder(This,psf,pidlFolder,hKey,dwFlags) ) 

#define ITrackShellMenu_GetShellFolder(This,pdwFlags,ppidl,riid,ppv)	\
    ( (This)->lpVtbl -> GetShellFolder(This,pdwFlags,ppidl,riid,ppv) ) 

#define ITrackShellMenu_SetMenu(This,hmenu,hwnd,dwFlags)	\
    ( (This)->lpVtbl -> SetMenu(This,hmenu,hwnd,dwFlags) ) 

#define ITrackShellMenu_GetMenu(This,phmenu,phwnd,pdwFlags)	\
    ( (This)->lpVtbl -> GetMenu(This,phmenu,phwnd,pdwFlags) ) 

#define ITrackShellMenu_InvalidateItem(This,psmd,dwFlags)	\
    ( (This)->lpVtbl -> InvalidateItem(This,psmd,dwFlags) ) 

#define ITrackShellMenu_GetState(This,psmd)	\
    ( (This)->lpVtbl -> GetState(This,psmd) ) 

#define ITrackShellMenu_SetMenuToolbar(This,punk,dwFlags)	\
    ( (This)->lpVtbl -> SetMenuToolbar(This,punk,dwFlags) ) 


#define ITrackShellMenu_SetObscured(This,hwndTB,punkBand,dwSMSetFlags)	\
    ( (This)->lpVtbl -> SetObscured(This,hwndTB,punkBand,dwSMSetFlags) ) 

#define ITrackShellMenu_Popup(This,hwnd,ppt,prcExclude,dwFlags)	\
    ( (This)->lpVtbl -> Popup(This,hwnd,ppt,prcExclude,dwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITrackShellMenu_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shdeprecated_0000_0010 */
/* [local] */ 

#endif  // _WIN32_IE_IE60


extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0010_v0_0_s_ifspec;


#ifndef __ShellDeprecatedObjects_LIBRARY_DEFINED__
#define __ShellDeprecatedObjects_LIBRARY_DEFINED__

/* library ShellDeprecatedObjects */
/* [uuid] */ 


EXTERN_C const IID LIBID_ShellDeprecatedObjects;

EXTERN_C const CLSID CLSID_TrackShellMenu;

#ifdef __cplusplus

class DECLSPEC_UUID("8278F931-2A3E-11d2-838F-00C04FD918D0")
TrackShellMenu;
#endif
#endif /* __ShellDeprecatedObjects_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HMENU_UserSize(     unsigned long *, unsigned long            , HMENU * ); 
unsigned char * __RPC_USER  HMENU_UserMarshal(  unsigned long *, unsigned char *, HMENU * ); 
unsigned char * __RPC_USER  HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU * ); 
void                      __RPC_USER  HMENU_UserFree(     unsigned long *, HMENU * ); 

unsigned long             __RPC_USER  PCIDLIST_ABSOLUTE_UserSize(     unsigned long *, unsigned long            , PCIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PCIDLIST_ABSOLUTE_UserMarshal(  unsigned long *, unsigned char *, PCIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PCIDLIST_ABSOLUTE_UserUnmarshal(unsigned long *, unsigned char *, PCIDLIST_ABSOLUTE * ); 
void                      __RPC_USER  PCIDLIST_ABSOLUTE_UserFree(     unsigned long *, PCIDLIST_ABSOLUTE * ); 

unsigned long             __RPC_USER  PIDLIST_ABSOLUTE_UserSize(     unsigned long *, unsigned long            , PIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PIDLIST_ABSOLUTE_UserMarshal(  unsigned long *, unsigned char *, PIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PIDLIST_ABSOLUTE_UserUnmarshal(unsigned long *, unsigned char *, PIDLIST_ABSOLUTE * ); 
void                      __RPC_USER  PIDLIST_ABSOLUTE_UserFree(     unsigned long *, PIDLIST_ABSOLUTE * ); 

unsigned long             __RPC_USER  HMENU_UserSize64(     unsigned long *, unsigned long            , HMENU * ); 
unsigned char * __RPC_USER  HMENU_UserMarshal64(  unsigned long *, unsigned char *, HMENU * ); 
unsigned char * __RPC_USER  HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU * ); 
void                      __RPC_USER  HMENU_UserFree64(     unsigned long *, HMENU * ); 

unsigned long             __RPC_USER  PCIDLIST_ABSOLUTE_UserSize64(     unsigned long *, unsigned long            , PCIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PCIDLIST_ABSOLUTE_UserMarshal64(  unsigned long *, unsigned char *, PCIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PCIDLIST_ABSOLUTE_UserUnmarshal64(unsigned long *, unsigned char *, PCIDLIST_ABSOLUTE * ); 
void                      __RPC_USER  PCIDLIST_ABSOLUTE_UserFree64(     unsigned long *, PCIDLIST_ABSOLUTE * ); 

unsigned long             __RPC_USER  PIDLIST_ABSOLUTE_UserSize64(     unsigned long *, unsigned long            , PIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PIDLIST_ABSOLUTE_UserMarshal64(  unsigned long *, unsigned char *, PIDLIST_ABSOLUTE * ); 
unsigned char * __RPC_USER  PIDLIST_ABSOLUTE_UserUnmarshal64(unsigned long *, unsigned char *, PIDLIST_ABSOLUTE * ); 
void                      __RPC_USER  PIDLIST_ABSOLUTE_UserFree64(     unsigned long *, PIDLIST_ABSOLUTE * ); 

/* [local][helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ITravelLog_GetTravelEntry_Proxy( 
    ITravelLog * This,
    /* [in] */ IUnknown *punk,
    /* [in] */ int iOffset,
    /* [out] */ 
    __out_opt  ITravelEntry **ppte);


/* [call_as] */ HRESULT STDMETHODCALLTYPE ITravelLog_GetTravelEntry_Stub( 
    ITravelLog * This,
    /* [in] */ __RPC__in_opt IUnknown *punk,
    /* [in] */ int iOffset,
    /* [out] */ __RPC__deref_out_opt ITravelEntry **ppte);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\sherrors.h ===
/*****************************************************************************\
*                                                                             *
* sherror.h -  error codes specific to shell APIs                             *
*                                                                             *
* Copyright (c) Microsoft Corporation. All rights reserved.                   *
*                                                                             *
\*****************************************************************************/

#ifndef _SHERROR_
#define _SHERROR_
#if defined (_MSC_VER) && (_MSC_VER >= 1020) && !defined(__midl)
#pragma once
#endif
#include <winerror.h>

//  COPYENGINE codes use FACILITY_SHELL and 0 in the second lowest byte
// Success/Informational codes
#define COPYENGINE_S_YES                         _HRESULT_TYPEDEF_(0x00270001L)
#define COPYENGINE_S_NOT_HANDLED                 _HRESULT_TYPEDEF_(0x00270003L)
#define COPYENGINE_S_USER_RETRY                  _HRESULT_TYPEDEF_(0x00270004L)
#define COPYENGINE_S_USER_IGNORED                _HRESULT_TYPEDEF_(0x00270005L)
#define COPYENGINE_S_MERGE                       _HRESULT_TYPEDEF_(0x00270006L)
#define COPYENGINE_S_DONT_PROCESS_CHILDREN       _HRESULT_TYPEDEF_(0x00270008L)
#define COPYENGINE_S_ALREADY_DONE                _HRESULT_TYPEDEF_(0x0027000AL)
#define COPYENGINE_S_PENDING                     _HRESULT_TYPEDEF_(0x0027000BL)
#define COPYENGINE_S_KEEP_BOTH                   _HRESULT_TYPEDEF_(0x0027000CL)
#define COPYENGINE_S_CLOSE_PROGRAM               _HRESULT_TYPEDEF_(0x0027000DL) // Close the program using the current file

// Failure/Error codes
#define COPYENGINE_E_USER_CANCELLED      _HRESULT_TYPEDEF_(0x80270000L)  // User wants to canceled entire job
#define COPYENGINE_E_CANCELLED           _HRESULT_TYPEDEF_(0x80270001L)  // Engine wants to canceled entire job, don't set the CANCELLED bit
#define COPYENGINE_E_REQUIRES_ELEVATION  _HRESULT_TYPEDEF_(0x80270002L)  // Need to elevate the process to complete the operation

#define COPYENGINE_E_SAME_FILE           _HRESULT_TYPEDEF_(0x80270003L)  // Source and destination file are the same
#define COPYENGINE_E_DIFF_DIR            _HRESULT_TYPEDEF_(0x80270004L)  // Trying to rename a file into a different location, use move instead
#define COPYENGINE_E_MANY_SRC_1_DEST     _HRESULT_TYPEDEF_(0x80270005L)  // One source specified, multiple destinations

#define COPYENGINE_E_DEST_SUBTREE        _HRESULT_TYPEDEF_(0x80270009L)  // The destination is a sub-tree of the source
#define COPYENGINE_E_DEST_SAME_TREE      _HRESULT_TYPEDEF_(0x8027000AL)  // The destination is the same folder as the source

#define COPYENGINE_E_FLD_IS_FILE_DEST    _HRESULT_TYPEDEF_(0x8027000BL)  // Existing destination file with same name as folder
#define COPYENGINE_E_FILE_IS_FLD_DEST    _HRESULT_TYPEDEF_(0x8027000CL)  // Existing destination folder with same name as file

#define COPYENGINE_E_FILE_TOO_LARGE      _HRESULT_TYPEDEF_(0x8027000DL)  // File too large for destination file system
#define COPYENGINE_E_REMOVABLE_FULL      _HRESULT_TYPEDEF_(0x8027000EL)  // Destination device is full and happens to be removable

#define COPYENGINE_E_DEST_IS_RO_CD       _HRESULT_TYPEDEF_(0x8027000FL)  // Destination is a Read-Only CDRom, possibly unformatted
#define COPYENGINE_E_DEST_IS_RW_CD       _HRESULT_TYPEDEF_(0x80270010L)  // Destination is a Read/Write CDRom, possibly unformatted
#define COPYENGINE_E_DEST_IS_R_CD        _HRESULT_TYPEDEF_(0x80270011L)  // Destination is a Recordable (AudioL) CDRom, possibly unformatted

#define COPYENGINE_E_DEST_IS_RO_DVD      _HRESULT_TYPEDEF_(0x80270012L)  // Destination is a Read-Only DVD, possibly unformatted
#define COPYENGINE_E_DEST_IS_RW_DVD      _HRESULT_TYPEDEF_(0x80270013L)  // Destination is a Read/Wrote DVD, possibly unformatted
#define COPYENGINE_E_DEST_IS_R_DVD       _HRESULT_TYPEDEF_(0x80270014L)  // Destination is a Recordable (AudioL) DVD, possibly unformatted

#define COPYENGINE_E_SRC_IS_RO_CD        _HRESULT_TYPEDEF_(0x80270015L)  // Source is a Read-Only CDRom, possibly unformatted
#define COPYENGINE_E_SRC_IS_RW_CD        _HRESULT_TYPEDEF_(0x80270016L)  // Source is a Read/Write CDRom, possibly unformatted
#define COPYENGINE_E_SRC_IS_R_CD         _HRESULT_TYPEDEF_(0x80270017L)  // Source is a Recordable (AudioL) CDRom, possibly unformatted

#define COPYENGINE_E_SRC_IS_RO_DVD       _HRESULT_TYPEDEF_(0x80270018L)  // Source is a Read-Only DVD, possibly unformatted
#define COPYENGINE_E_SRC_IS_RW_DVD       _HRESULT_TYPEDEF_(0x80270019L)  // Source is a Read/Wrote DVD, possibly unformatted
#define COPYENGINE_E_SRC_IS_R_DVD        _HRESULT_TYPEDEF_(0x8027001AL)  // Source is a Recordable (AudioL) DVD, possibly unformatted

#define COPYENGINE_E_INVALID_FILES_SRC   _HRESULT_TYPEDEF_(0x8027001BL)  // Invalid source path
#define COPYENGINE_E_INVALID_FILES_DEST  _HRESULT_TYPEDEF_(0x8027001CL)  // Invalid destination path
#define COPYENGINE_E_PATH_TOO_DEEP_SRC   _HRESULT_TYPEDEF_(0x8027001DL)  // Source Files within folders where the overall path is longer than MAX_PATH
#define COPYENGINE_E_PATH_TOO_DEEP_DEST  _HRESULT_TYPEDEF_(0x8027001EL)  // Destination files would be within folders where the overall path is longer than MAX_PATH
#define COPYENGINE_E_ROOT_DIR_SRC        _HRESULT_TYPEDEF_(0x8027001FL)  // Source is a root directory, cannot be moved or renamed
#define COPYENGINE_E_ROOT_DIR_DEST       _HRESULT_TYPEDEF_(0x80270020L)  // Destination is a root directory, cannot be renamed
#define COPYENGINE_E_ACCESS_DENIED_SRC   _HRESULT_TYPEDEF_(0x80270021L)  // Security problem on source
#define COPYENGINE_E_ACCESS_DENIED_DEST  _HRESULT_TYPEDEF_(0x80270022L)  // Security problem on destination
#define COPYENGINE_E_PATH_NOT_FOUND_SRC  _HRESULT_TYPEDEF_(0x80270023L)  // Source file does not exist, or is unavailable
#define COPYENGINE_E_PATH_NOT_FOUND_DEST _HRESULT_TYPEDEF_(0x80270024L)  // Destination file does not exist, or is unavailable
#define COPYENGINE_E_NET_DISCONNECT_SRC  _HRESULT_TYPEDEF_(0x80270025L)  // Source file is on a disconnected network location
#define COPYENGINE_E_NET_DISCONNECT_DEST        _HRESULT_TYPEDEF_(0x80270026L)  // Destination file is on a disconnected network location
#define COPYENGINE_E_SHARING_VIOLATION_SRC      _HRESULT_TYPEDEF_(0x80270027L)  // Sharing Violation on source
#define COPYENGINE_E_SHARING_VIOLATION_DEST     _HRESULT_TYPEDEF_(0x80270028L)  // Sharing Violation on destination

#define COPYENGINE_E_ALREADY_EXISTS_NORMAL      _HRESULT_TYPEDEF_(0x80270029L) // Destination exists, cannot replace
#define COPYENGINE_E_ALREADY_EXISTS_READONLY    _HRESULT_TYPEDEF_(0x8027002AL) // Destination with read-only attribute exists, cannot replace
#define COPYENGINE_E_ALREADY_EXISTS_SYSTEM      _HRESULT_TYPEDEF_(0x8027002BL) // Destination with system attribute exists, cannot replace
#define COPYENGINE_E_ALREADY_EXISTS_FOLDER      _HRESULT_TYPEDEF_(0x8027002CL) // Destination folder exists, cannot replace
#define COPYENGINE_E_STREAM_LOSS                _HRESULT_TYPEDEF_(0x8027002DL) // Secondary Stream information would be lost
#define COPYENGINE_E_EA_LOSS                    _HRESULT_TYPEDEF_(0x8027002EL) // Extended Attributes would be lost
#define COPYENGINE_E_PROPERTY_LOSS              _HRESULT_TYPEDEF_(0x8027002FL) // Property would be lost
#define COPYENGINE_E_PROPERTIES_LOSS            _HRESULT_TYPEDEF_(0x80270030L) // Properties would be lost
#define COPYENGINE_E_ENCRYPTION_LOSS            _HRESULT_TYPEDEF_(0x80270031L) // Encryption would be lost
#define COPYENGINE_E_DISK_FULL                  _HRESULT_TYPEDEF_(0x80270032L) // Entire operation likely won't fit
#define COPYENGINE_E_DISK_FULL_CLEAN            _HRESULT_TYPEDEF_(0x80270033L) // Entire operation likely won't fit, clean-up wizard available
#define COPYENGINE_E_CANT_REACH_SOURCE          _HRESULT_TYPEDEF_(0x80270035L) // Can't reach source folder")

#define COPYENGINE_E_RECYCLE_UNKNOWN_ERROR      _HRESULT_TYPEDEF_(0x80270035L) // ???
#define COPYENGINE_E_RECYCLE_FORCE_NUKE         _HRESULT_TYPEDEF_(0x80270036L) // Recycling not available (usually turned offL)
#define COPYENGINE_E_RECYCLE_SIZE_TOO_BIG       _HRESULT_TYPEDEF_(0x80270037L) // Item is too large for the recycle-bin
#define COPYENGINE_E_RECYCLE_PATH_TOO_LONG      _HRESULT_TYPEDEF_(0x80270038L) // Folder is too deep to fit in the recycle-bin
#define COPYENGINE_E_RECYCLE_BIN_NOT_FOUND      _HRESULT_TYPEDEF_(0x8027003AL) // Recycle bin could not be found or is unavailable
#define COPYENGINE_E_NEWFILE_NAME_TOO_LONG      _HRESULT_TYPEDEF_(0x8027003BL) // Name of the new file being created is too long
#define COPYENGINE_E_NEWFOLDER_NAME_TOO_LONG    _HRESULT_TYPEDEF_(0x8027003CL) // Name of the new folder being created is too long
#define COPYENGINE_E_DIR_NOT_EMPTY              _HRESULT_TYPEDEF_(0x8027003DL) // The directory being processed is not empty

//  error codes without a more specific group use FACILITY_SHELL and 0x01 in the second lowest byte.
#define NETCACHE_E_NEGATIVE_CACHE           _HRESULT_TYPEDEF_(0x80270100L) // The item requested is in the negative net parsing cache
#define EXECUTE_E_LAUNCH_APPLICATION        _HRESULT_TYPEDEF_(0x80270101L) // for returned by command delegates to indicate that they did no work 
#define SHELL_E_WRONG_BITDEPTH              _HRESULT_TYPEDEF_(0x80270102L) // returned when trying to create a thumbnail extractor at too low a bitdepth for high fidelity

#endif //  _SHERROR_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\ShellAPI.h ===
/*****************************************************************************\
*                                                                             *
* shellapi.h -  SHELL.DLL functions, types, and definitions                   *
*                                                                             *
* Copyright (c) Microsoft Corporation. All rights reserved.                   *
*                                                                             *
\*****************************************************************************/

#ifndef _INC_SHELLAPI
#define _INC_SHELLAPI

#include <SpecStrings.h>

//
// Define API decoration for direct importing of DLL references.
//
#ifndef WINSHELLAPI
#if !defined(_SHELL32_)
#define WINSHELLAPI       DECLSPEC_IMPORT
#else
#define WINSHELLAPI
#endif
#endif // WINSHELLAPI

#ifndef SHSTDAPI
#if !defined(_SHELL32_)
#define SHSTDAPI          EXTERN_C DECLSPEC_IMPORT HRESULT STDAPICALLTYPE
#define SHSTDAPI_(type)   EXTERN_C DECLSPEC_IMPORT type STDAPICALLTYPE
#else
#define SHSTDAPI          STDAPI
#define SHSTDAPI_(type)   STDAPI_(type)
#endif
#endif // SHSTDAPI

#ifndef SHDOCAPI
#if !defined(_SHDOCVW_)
#define SHDOCAPI          EXTERN_C DECLSPEC_IMPORT HRESULT STDAPICALLTYPE
#define SHDOCAPI_(type)   EXTERN_C DECLSPEC_IMPORT type STDAPICALLTYPE
#else
#define SHDOCAPI          STDAPI
#define SHDOCAPI_(type)   STDAPI_(type)
#endif
#endif // SHDOCAPI


#if !defined(_WIN64)
#include <pshpack1.h>
#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */



DECLARE_HANDLE(HDROP);

SHSTDAPI_(UINT) DragQueryFileA(HDROP hDrop, UINT iFile, __out_ecount_opt(cch) LPSTR lpszFile, UINT cch);
SHSTDAPI_(UINT) DragQueryFileW(HDROP hDrop, UINT iFile, __out_ecount_opt(cch) LPWSTR lpszFile, UINT cch);
#ifdef UNICODE
#define DragQueryFile  DragQueryFileW
#else
#define DragQueryFile  DragQueryFileA
#endif // !UNICODE
SHSTDAPI_(BOOL) DragQueryPoint(HDROP hDrop,__out LPPOINT lppt);
SHSTDAPI_(void) DragFinish(__in HDROP hDrop);
SHSTDAPI_(void) DragAcceptFiles(__in HWND hWnd, __in BOOL fAccept);

SHSTDAPI_(HINSTANCE) ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters,
    LPCSTR lpDirectory, INT nShowCmd);
SHSTDAPI_(HINSTANCE) ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters,
    LPCWSTR lpDirectory, INT nShowCmd);
#ifdef UNICODE
#define ShellExecute  ShellExecuteW
#else
#define ShellExecute  ShellExecuteA
#endif // !UNICODE
SHSTDAPI_(HINSTANCE) FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, __out_ecount(MAX_PATH) LPSTR lpResult);
SHSTDAPI_(HINSTANCE) FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, __out_ecount(MAX_PATH) LPWSTR lpResult);
#ifdef UNICODE
#define FindExecutable  FindExecutableW
#else
#define FindExecutable  FindExecutableA
#endif // !UNICODE
SHSTDAPI_(LPWSTR *)  CommandLineToArgvW(LPCWSTR lpCmdLine, __out int* pNumArgs);

SHSTDAPI_(INT) ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
SHSTDAPI_(INT) ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);
#ifdef UNICODE
#define ShellAbout  ShellAboutW
#else
#define ShellAbout  ShellAboutA
#endif // !UNICODE
SHSTDAPI_(HICON) DuplicateIcon(HINSTANCE hInst, HICON hIcon);
SHSTDAPI_(HICON) ExtractAssociatedIconA(HINSTANCE hInst, __inout_ecount(128)  LPSTR lpIconPath, __inout LPWORD lpiIcon);
SHSTDAPI_(HICON) ExtractAssociatedIconW(HINSTANCE hInst, __inout_ecount(128)  LPWSTR lpIconPath, __inout LPWORD lpiIcon);
#ifdef UNICODE
#define ExtractAssociatedIcon  ExtractAssociatedIconW
#else
#define ExtractAssociatedIcon  ExtractAssociatedIconA
#endif // !UNICODE
SHSTDAPI_(HICON) ExtractAssociatedIconExA(HINSTANCE hInst, __inout_ecount(128) LPSTR lpIconPath, __inout LPWORD lpiIconIndex, __out LPWORD lpiIconId);
SHSTDAPI_(HICON) ExtractAssociatedIconExW(HINSTANCE hInst, __inout_ecount(128) LPWSTR lpIconPath, __inout LPWORD lpiIconIndex, __out LPWORD lpiIconId);
#ifdef UNICODE
#define ExtractAssociatedIconEx  ExtractAssociatedIconExW
#else
#define ExtractAssociatedIconEx  ExtractAssociatedIconExA
#endif // !UNICODE
SHSTDAPI_(HICON) ExtractIconA(HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
SHSTDAPI_(HICON) ExtractIconW(HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);
#ifdef UNICODE
#define ExtractIcon  ExtractIconW
#else
#define ExtractIcon  ExtractIconA
#endif // !UNICODE


#if(WINVER >= 0x0400)
typedef struct _DRAGINFOA {
    UINT uSize;                 /* init with sizeof(DRAGINFO) */
    POINT pt;
    BOOL fNC;
    LPSTR   lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;                 /* init with sizeof(DRAGINFO) */
    POINT pt;
    BOOL fNC;
    LPWSTR  lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;
#ifdef UNICODE
typedef DRAGINFOW DRAGINFO;
typedef LPDRAGINFOW LPDRAGINFO;
#else
typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
#endif // UNICODE


////
//// AppBar stuff
////
#define ABM_NEW           0x00000000
#define ABM_REMOVE        0x00000001
#define ABM_QUERYPOS      0x00000002
#define ABM_SETPOS        0x00000003
#define ABM_GETSTATE      0x00000004
#define ABM_GETTASKBARPOS 0x00000005
#define ABM_ACTIVATE      0x00000006  // lParam == TRUE/FALSE means activate/deactivate
#define ABM_GETAUTOHIDEBAR 0x00000007
#define ABM_SETAUTOHIDEBAR 0x00000008  // this can fail at any time.  MUST check the result
                                        // lParam = TRUE/FALSE  Set/Unset
                                        // uEdge = what edge
#define ABM_WINDOWPOSCHANGED 0x0000009
#if (NTDDI_VERSION >= NTDDI_WINXP)
#define ABM_SETSTATE         0x0000000a
#endif // (NTDDI_VERSION >= NTDDI_WINXP)

// these are put in the wparam of callback messages
#define ABN_STATECHANGE    0x0000000
#define ABN_POSCHANGED     0x0000001
#define ABN_FULLSCREENAPP  0x0000002
#define ABN_WINDOWARRANGE  0x0000003 // lParam == TRUE means hide

// flags for get state
#define ABS_AUTOHIDE    0x0000001
#define ABS_ALWAYSONTOP 0x0000002

#define ABE_LEFT        0
#define ABE_TOP         1
#define ABE_RIGHT       2
#define ABE_BOTTOM      3

typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam; // message specific
} APPBARDATA, *PAPPBARDATA;


SHSTDAPI_(UINT_PTR) SHAppBarMessage(DWORD dwMessage, __in PAPPBARDATA pData);

////
////  EndAppBar
////

SHSTDAPI_(DWORD)   DoEnvironmentSubstA(__inout_ecount(cchString) LPSTR szString, UINT cchString);
SHSTDAPI_(DWORD)   DoEnvironmentSubstW(__inout_ecount(cchString) LPWSTR szString, UINT cchString);
#ifdef UNICODE
#define DoEnvironmentSubst  DoEnvironmentSubstW
#else
#define DoEnvironmentSubst  DoEnvironmentSubstA
#endif // !UNICODE

#define EIRESID(x) (-1 * (int)(x))
SHSTDAPI_(UINT) ExtractIconExA(LPCSTR lpszFile, int nIconIndex, __out_ecount_opt(nIcons) HICON *phiconLarge, __out_ecount_opt(nIcons) HICON *phiconSmall, UINT nIcons);
SHSTDAPI_(UINT) ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, __out_ecount_opt(nIcons) HICON *phiconLarge, __out_ecount_opt(nIcons) HICON *phiconSmall, UINT nIcons);
#ifdef UNICODE
#define ExtractIconEx  ExtractIconExW
#else
#define ExtractIconEx  ExtractIconExA
#endif // !UNICODE

// Shell File Operations

#define FO_MOVE                    0x0001
#define FO_COPY                    0x0002
#define FO_DELETE                  0x0003
#define FO_RENAME                  0x0004

// SHFILEOPSTRUCT.fFlags and IFileOperation::SetOperationFlags() flag values

#define FOF_MULTIDESTFILES         0x0001
#define FOF_CONFIRMMOUSE           0x0002
#define FOF_SILENT                 0x0004  // don't display progress UI (confirm prompts may be displayed still)
#define FOF_RENAMEONCOLLISION      0x0008  // automatically rename the source files to avoid the collisions
#define FOF_NOCONFIRMATION         0x0010  // don't display confirmation UI, assume "yes" for cases that can be bypassed, "no" for those that can not
#define FOF_WANTMAPPINGHANDLE      0x0020  // Fill in SHFILEOPSTRUCT.hNameMappings
                                           // Must be freed using SHFreeNameMappings
#define FOF_ALLOWUNDO              0x0040  // enable undo including Recycle behavior for IFileOperation::Delete()
#define FOF_FILESONLY              0x0080  // only operate on the files (non folders), both files and folders are assumed without this
#define FOF_SIMPLEPROGRESS         0x0100  // means don't show names of files
#define FOF_NOCONFIRMMKDIR         0x0200  // don't dispplay confirmatino UI before making any needed directories, assume "Yes" in these cases
#define FOF_NOERRORUI              0x0400  // don't put up error UI, other UI may be displayed, progress, confirmations
#if (_WIN32_IE >= 0x0500)
#define FOF_NOCOPYSECURITYATTRIBS  0x0800  // dont copy file security attributes (ACLs)
#define FOF_NORECURSION            0x1000  // don't recurse into directories for operations that would recurse
#define FOF_NO_CONNECTED_ELEMENTS  0x2000  // don't operate on connected elements ("xxx_files" folders that go with .htm files)
#define FOF_WANTNUKEWARNING        0x4000  // during delete operation, warn if nuking instead of recycling (partially overrides FOF_NOCONFIRMATION)
#endif // (_WIN32_IE >= 0x500)
#if (_WIN32_WINNT >= 0x0501)
#define FOF_NORECURSEREPARSE       0x8000  // deprecated; the operations engine always does the right thing on FolderLink objects (symlinks, reparse points, folder shortcuts)
#endif // (_WIN32_WINNT >= 0x501)
#define FOF_NO_UI                   (FOF_SILENT | FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_NOCONFIRMMKDIR) // don't display any UI at all

typedef WORD FILEOP_FLAGS;

#define PO_DELETE       0x0013  // printer is being deleted
#define PO_RENAME       0x0014  // printer is being renamed
#define PO_PORTCHANGE   0x0020  // port this printer connected to is being changed
                                // if this id is set, the strings received by
                                // the copyhook are a doubly-null terminated
                                // list of strings.  The first is the printer
                                // name and the second is the printer port.
#define PO_REN_PORT     0x0034  // PO_RENAME and PO_PORTCHANGE at same time.

// no POF_ flags currently defined

typedef WORD PRINTEROP_FLAGS;

// implicit parameters are:
//      if pFrom or pTo are unqualified names the current directories are
//      taken from the global current drive/directory settings managed
//      by Get/SetCurrentDrive/Directory
//
//      the global confirmation settings

typedef struct _SHFILEOPSTRUCTA
{
    HWND            hwnd;
    UINT            wFunc;
    LPCSTR          pFrom;
    LPCSTR          pTo;
    FILEOP_FLAGS    fFlags;
    BOOL            fAnyOperationsAborted;
    LPVOID          hNameMappings;
    LPCSTR          lpszProgressTitle; // only used if FOF_SIMPLEPROGRESS
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
    HWND            hwnd;
    UINT            wFunc;
    LPCWSTR         pFrom;
    LPCWSTR         pTo;
    FILEOP_FLAGS    fFlags;
    BOOL            fAnyOperationsAborted;
    LPVOID          hNameMappings;
    LPCWSTR         lpszProgressTitle; // only used if FOF_SIMPLEPROGRESS
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;
#ifdef UNICODE
typedef SHFILEOPSTRUCTW SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTW LPSHFILEOPSTRUCT;
#else
typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
#endif // UNICODE

SHSTDAPI_(int) SHFileOperationA(__inout LPSHFILEOPSTRUCTA lpFileOp);
SHSTDAPI_(int) SHFileOperationW(__inout LPSHFILEOPSTRUCTW lpFileOp);
#ifdef UNICODE
#define SHFileOperation  SHFileOperationW
#else
#define SHFileOperation  SHFileOperationA
#endif // !UNICODE
SHSTDAPI_(void) SHFreeNameMappings(HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR   pszOldPath;
    LPSTR   pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR  pszOldPath;
    LPWSTR  pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;
#ifdef UNICODE
typedef SHNAMEMAPPINGW SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGW LPSHNAMEMAPPING;
#else
typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#endif // UNICODE


////
//// End Shell File Operations
////

////
////  Begin ShellExecuteEx and family
////

/* ShellExecute() and ShellExecuteEx() error codes */

/* regular WinExec() codes */
#define SE_ERR_FNF              2       // file not found
#define SE_ERR_PNF              3       // path not found
#define SE_ERR_ACCESSDENIED     5       // access denied
#define SE_ERR_OOM              8       // out of memory
#define SE_ERR_DLLNOTFOUND              32

#endif /* WINVER >= 0x0400 */

/* error values for ShellExecute() beyond the regular WinExec() codes */
#define SE_ERR_SHARE                    26
#define SE_ERR_ASSOCINCOMPLETE          27
#define SE_ERR_DDETIMEOUT               28
#define SE_ERR_DDEFAIL                  29
#define SE_ERR_DDEBUSY                  30
#define SE_ERR_NOASSOC                  31

#if(WINVER >= 0x0400)

// Note CLASSKEY overrides CLASSNAME
#define SEE_MASK_CLASSNAME         0x00000001
#define SEE_MASK_CLASSKEY          0x00000003
// Note INVOKEIDLIST overrides IDLIST
#define SEE_MASK_IDLIST            0x00000004
#define SEE_MASK_INVOKEIDLIST      0x0000000c
#if (NTDDI_VERSION < NTDDI_VISTA)
#define SEE_MASK_ICON              0x00000010  //  not used
#endif // (NTDDI_VERSION < NTDDI_VISTA)
#define SEE_MASK_HOTKEY            0x00000020
#define SEE_MASK_NOCLOSEPROCESS    0x00000040
#define SEE_MASK_CONNECTNETDRV     0x00000080
#define SEE_MASK_NOASYNC           0x00000100
#define SEE_MASK_FLAG_DDEWAIT      SEE_MASK_NOASYNC // Use SEE_MASK_NOASYNC instead of SEE_MASK_FLAG_DDEWAIT as it more accuratly describes the behavior
#define SEE_MASK_DOENVSUBST        0x00000200
#define SEE_MASK_FLAG_NO_UI        0x00000400
#define SEE_MASK_UNICODE           0x00004000
#define SEE_MASK_NO_CONSOLE        0x00008000
#define SEE_MASK_ASYNCOK           0x00100000
#if (NTDDI_VERSION >= NTDDI_WIN2K)
#define SEE_MASK_HMONITOR          0x00200000
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)
#if (NTDDI_VERSION >= NTDDI_WINXPSP1)
#define SEE_MASK_NOZONECHECKS      0x00800000
#endif // (NTDDI_VERSION >= NTDDI_WINXPSP1)
#if (NTDDI_VERSION >= NTDDI_WIN2K)
#define SEE_MASK_NOQUERYCLASSSTORE 0x01000000
#define SEE_MASK_WAITFORINPUTIDLE  0x02000000
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)
#if (NTDDI_VERSION >= NTDDI_WINXP)
#define SEE_MASK_FLAG_LOG_USAGE    0x04000000
#endif // (NTDDI_VERSION >= NTDDI_WINXP)



//
// For compilers that don't support nameless unions
//
#ifndef DUMMYUNIONNAME
#ifdef NONAMELESSUNION
#define DUMMYUNIONNAME   u
#define DUMMYUNIONNAME2  u2
#define DUMMYUNIONNAME3  u3
#define DUMMYUNIONNAME4  u4
#define DUMMYUNIONNAME5  u5
#else
#define DUMMYUNIONNAME
#define DUMMYUNIONNAME2
#define DUMMYUNIONNAME3
#define DUMMYUNIONNAME4
#define DUMMYUNIONNAME5
#endif
#endif // DUMMYUNIONNAME

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(push)
#pragma warning(disable:4201) /* nonstandard extension used : nameless struct/union */
#pragma once
#endif

typedef struct _SHELLEXECUTEINFOA
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCSTR   lpVerb;
        LPCSTR   lpFile;
        LPCSTR   lpParameters;
        LPCSTR   lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        // Optional fields
        LPVOID lpIDList;
        LPCSTR   lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
#if (NTDDI_VERSION >= NTDDI_WIN2K)
        HANDLE hMonitor;
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)
        } DUMMYUNIONNAME;
        HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  lpVerb;
        LPCWSTR  lpFile;
        LPCWSTR  lpParameters;
        LPCWSTR  lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        // Optional fields
        LPVOID lpIDList;
        LPCWSTR  lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
#if (NTDDI_VERSION >= NTDDI_WIN2K)
        HANDLE hMonitor;
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)
        } DUMMYUNIONNAME;
        HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;
#ifdef UNICODE
typedef SHELLEXECUTEINFOW SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOW LPSHELLEXECUTEINFO;
#else
typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
#endif // UNICODE

SHSTDAPI_(BOOL) ShellExecuteExA(__inout LPSHELLEXECUTEINFOA lpExecInfo);
SHSTDAPI_(BOOL) ShellExecuteExW(__inout LPSHELLEXECUTEINFOW lpExecInfo);
#ifdef UNICODE
#define ShellExecuteEx  ShellExecuteExW
#else
#define ShellExecuteEx  ShellExecuteExA
#endif // !UNICODE

#if (NTDDI_VERSION >= NTDDI_WIN2K)
//
//  SHCreateProcessAsUser()
typedef struct _SHCREATEPROCESSINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  pszFile;
        LPCWSTR  pszParameters;
        LPCWSTR  pszCurrentDirectory;
        HANDLE hUserToken;
        LPSECURITY_ATTRIBUTES lpProcessAttributes;
        LPSECURITY_ATTRIBUTES lpThreadAttributes;
        BOOL bInheritHandles;
        DWORD dwCreationFlags;
        LPSTARTUPINFOW lpStartupInfo;
        LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

SHSTDAPI_(BOOL) SHCreateProcessAsUserW(__inout PSHCREATEPROCESSINFOW pscpi);
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)

#if (NTDDI_VERSION >= NTDDI_VISTA)

SHSTDAPI SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, __out PWSTR *ppszApplication, __out_opt PWSTR *ppszCommandLine, __out_opt PWSTR *ppszParameters);
//
//  SHEvaluateSystemCommandTemplate()
//      *   enforces stricter validation before calling CreateProcess().  may also be
//              used before calling ShellExecute().
//      *   should be used when caller wants the deterministic behavior from a command template
//              regardless of execution context.  it ignores the current process state,
//              such as the %PATH%, GetCurrentDirectory(), and parent process directory.
//      *   should be used when the command is hardcoded.
//      *   is used by ShellExecute() when handling file associations from HKCR.
//      *   reduces CreateProcess() commandline exploits
//      *   is not designed for processing user input, and may generate unexpected failures.
//
//  INPUT:
//      pszCmdTemplate =    command line, this may or may not include parameters.
//                          if the parameters are substitution parameters then this API
//                          should be called before parameters have been replaced.
//                          (check the examples below to see sample supported inputs.)
//
//  OUTPUT on return: S_OK
//      ppszApplication =   verified path to the Application.  this should be passed as the lpApplication
//                          parameter to CreateProcess() or the lpFile parameter to ShellExecute().
//                          (allocated using CoTaskMemAlloc(), free with CoTaskMemFree())
//
//      ppszCommandLine =   OPTIONAL - use if planning to call CreateProcess().
//                          resulting command line template.  parameters should be replaced based on this template,
//                          and then passed as the lpCommandLine parameter to CreateProcess().
//                          it is guaranteed to be of a form that PathGetArgs() will always succeed correctly.
//                          (allocated using CoTaskMemAlloc(), free with CoTaskMemFree())
//
//      ppszParameters  =   OPTIONAL - use if planning to call ShellExecute().
//                          resulting parameter list template.  parameters should be replaced based on this template,
//                          and then passed as the lpParameters parameter to ShellExecute().
//                          NOTE: identical to PathGetArgs(*ppszCommandLine).
//                          (allocated using CoTaskMemAlloc(), free with CoTaskMemFree())
//
//  OUTPUT on return: FAILED()
//      all outputs will be NULL'ed on failure
//
//  NOTES:  the parsing logic to determine a valid Application path is non-trivial, although
//              the extension is not required and if missing will be completed
//              in the following standard order:  { .PIF, .COM, .EXE, .BAT, .CMD }
//
//      Relative Paths are System Paths - if the first token has no path qualifiers
//              then the token is first checked to see if a key of the same name has
//              been installed under HKLM\Software\Microsoft\Windows\CurrentVersion\App Paths.
//              if the key or default value does not exist, it is assumed to be a child
//              of the system directories.  the following directories will be searched
//              in order for the relative token: { CSIDL_SYSTEM, CSIDL_WINDOWS }
//
//      Prefer Quoted Paths - if the first token in pszCmdTemplate is quoted and appears
//              to be an absolute path then the token is the only possible result.
//
//      Limit Forms of Unquoted Paths - if the first token is unquoted and appears
//              to be an absolute path, then it is subject to more stringent limitations.
//              if the token is a substring of CSIDL_PROGRAM_FILES or does not
//              exist on the file system, then SHEvaluateSystemCommandTemplate() will
//              attempt to complete using a token delimited by the first space of the
//              last valid path segment (usually the file name).  if this token also doesnt exist,
//              then the next space will be used, etc.
//
//  USAGE:      used before calling into CreateProcess() or ShellExecute(), callers
//              would typically look like the following:
/* #if 0 // SAMPLE CODE
HRESULT MyCreateProcessPriv(PCWSTR pszCmd)
{
    PWSTR pszApp;
    PWSTR pszCmdLine;
    HRESULT hr = SHEvaluateSystemCommandTemplate(pszCmd, &pszApp, &pszCmdLine);
    if (SUCCEEDED(hr))
    {
        //  if this was a real template, maybe some kind of wnsprintf() first?
        PROCESS_INFORMATION pi;
        STARTUPINFO si = {0};
        si.cb = sizeof(startup);
        si.wShowWindow = SW_SHOWNORMAL;

        if (CreateProcess(pszApp, pszCmdLine, NULL, NULL, FALSE,
                 CREATE_DEFAULT_ERROR_MODE, NULL, NULL, &si, &pi))
        {
            //  we are good
            ASSERT(hr == S_OK);
            CloseHandle(pi.hProcess);
            CloseHandle(pi.hThread);
        }
        else
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
        }

        CoTaskMemFree(pszApp);
        CoTaskMemFree(pszCmdLine);
    }
    return hr;
}

HRESULT MyShellExec(PCWSTR pszCmd)
{
    PWSTR pszApp;
    PWSTR pszCmdLine;
    HRESULT hr = SHEvaluateSystemCommandTemplate(pszCmd, &pszApp, &pszCmdLine);
    if (SUCCEEDED(hr))
    {
        //  if this was a real template, maybe some kind of wnsprintf() first?
        SHELLEXECUTEINFOW sei = {
            sizeof(sei),           // cbSize;
            0,                     // fMask
            NULL,                  // hwnd
            NULL,                  // lpVerb
            pszApp,                // lpFile
            PathGetArgs(pszCmdLine), // lpParameters
            NULL,                  // lpDirectory
            SW_SHOWNORMAL,         // nShow
            0,                     // hInstApp
            NULL,                  // lpIDList
            NULL,                  // lpClass
            NULL,                  // hkeyClass
            0,                     // dwHotKey
            NULL,                  // hIcon
            NULL                   // hProcess
        };

        if (ShellExecuteEx(&sei))
        {
            //  we are good
            ASSERT(hr == S_OK);
        }
        else
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
        }

        CoTaskMemFree(pszApp);
        CoTaskMemFree(pszCmdLine);
    }
    return hr;
}
#endif //  0 // SAMPLE CODE
*/

//  EXAMPLE:   Each example will show an input parameter and the results returned by
//              SHEvaluateSystemCommandTemplate().  Also included is the alternate result
//              of what CreateProcess() would have created if pszCmdTemplate were
//              passed directly as lpCommandLine and lpApplication were NULL.
//              (results marked with an asterisk (*) indicate differences.)
//
//          Assume for the examples that the following paths and values exist:
//
//      SHGetFolderPath() values:
//          CSIDL_SYSTEM            =   C:\windows\system32
//          CSIDL_WINDOWS           =   C:\windows
//          CSIDL_PROGRAM_FILES     =   C:\Program Files
//
//      Environment settings
//          GetModuleFileName(NULL) =   C:\Program Files\Example\sample.exe
//          GetCurrentDirectory()   =   \\server\share\foo
//          HKLM\...\App Paths\pbrush.exe = C:\windows\system32\mspaint.exe
//          HKLM\...\App Paths\mycl.exe = C:\Program Files\Compilers\mycl.exe
//          PATH                    =   c:\windows\system32;C:\windows;c:\;C:\Program Files\Compilers\
//
//      Valid Application paths:
//          C:\Program Files\Internet Explorer\iexplore.exe
//          C:\windows\system32\rundll32.exe
//          C:\windows\system32\notepad.exe
//          C:\windows\notepad.exe
//          C:\Program Files\Example\sample.exe
//          C:\Program Files\Compilers\cl.exe
//          C:\Other Programs\prog.exe
//
//      Suspicious (possibly hostile) Application paths:
//          C:\Program.exe
//          C:\Program Files\Internet.exe
//          C:\Program Files\Example\regedit.bat
//          C:\mycl.exe
//          \\server\share\foo\rundll32.exe
//          \\server\share\foo\myapp.exe
//
//
//  Relative Path Example #1
//      pszCmdTemplate      =   notepad.exe %1
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\windows\system32\notepad.exe
//              pszCommandLine  =   "notepad.exe" %1
//          CreateProcess() would return TRUE
//              new process =   C:\windows\system32\notepad.exe
//
//  Relative Path Example #2
//      pszCmdTemplate      =   rundll32.exe shell32.dll,RunDll
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\windows\system32\rundll32.exe
//              pszCommandLine  =   "rundll32.exe" shell32.dll,RunDll
//          * CreateProcess() would return TRUE
//              new process =   \\server\share\foo\rundll32.exe
//
//  Relative Path Example #3
//      pszCmdTemplate      =   regedit %1
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\windows\system32\regedit.exe
//              pszCommandLine  =   "regedit.exe" %1
//          * CreateProcess() would return TRUE
//              new process =   C:\Program Files\Example\regedit.bat
//
//  Relative Path Example #4
//      pszCmdTemplate      =   pbrush "%1"
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\windows\system32\mspaint.exe
//              pszCommandLine  =   "mspaint.exe" "%1"
//          * CreateProcess() would return FALSE
//
//  Relative Path Example #5
//      pszCmdTemplate      =   mycl "%1" "%2"
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program Files\Compilers\mycl.exe
//              pszCommandLine  =   "mycl.exe" "%1" "%2"
//          * CreateProcess() would return TRUE
//              new process =   C:\mycl.exe
//
//  Relative Path Example #6
//      pszCmdTemplate      =   myapp.exe
//          SHEvaluateSystemCommandTemplate() returns: CO_E_APPNOTFOUND
//          * CreateProcess() would return TRUE
//              new process =   \\server\share\foo\myapp.exe
//
//  Quoted Path Example #1
//      pszCmdTemplate      =   "C:\Program Files\Internet Explorer\iexplore.exe" -nohome
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program Files\Internet Explorer\iexplore.exe
//              pszCommandLine  =   "C:\Program Files\Internet Explorer\iexplore.exe" -nohome
//          CreateProcess() would return TRUE
//              new process =   C:\Program Files\Internet Explorer\iexplore.exe
//
//  Quoted Path Example #2
//      pszCmdTemplate      =   "C:\Program Files\Internet" -url
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program Files\Internet.exe
//              pszCommandLine  =   "C:\Program Files\Internet.exe" -url
//          CreateProcess() would return TRUE
//              new process =   C:\Program Files\internet.exe
//
//  Quoted Path Example #3
//      pszCmdTemplate      =   "C:\Program" -url
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program.exe
//              pszCommandLine  =   "C:\Program.exe" -url
//          CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #1
//      pszCmdTemplate      =   C:\Program Files\Internet Explorer\iexplore.exe -nohome
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program Files\Internet Explorer\iexplore.exe
//              pszCommandLine  =   "C:\Program Files\Internet Explorer\iexplore.exe" -nohome
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #2
//      pszCmdTemplate      =   C:\Program Files\Internet Explorer\iexplore.exe -url fool.htm
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program Files\Internet Explorer\iexplore.exe
//              pszCommandLine  =   "C:\Program Files\Internet Explorer\iexplore.exe" -url fool.htm
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #3
//      pszCmdTemplate      =   C:\Program Files\Internet Explorer\iexplore.exe -url C:\fool.htm
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program Files\Internet Explorer\iexplore.exe
//              pszCommandLine  =   "C:\Program Files\Internet Explorer\iexplore.exe" -url C:\fool.htm
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #4
//      pszCmdTemplate      =   C:\Program Files\Internet -url
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Program Files\Internet.exe
//              pszCommandLine  =   "C:\Program Files\Internet.exe" -url
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #5
//      pszCmdTemplate      =   C:\Other Programs\prog.exe -go %1 \fool %2
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Other Programs\prog.exe
//              pszCommandLine  =   "C:\Other Programs\prog.exe" %1 \fool %2
//          * CreateProcess() would return TRUE
//              new process =   C:\Other Programs\prog.exe
//
//  Unquoted Example #6
//      pszCmdTemplate      =   C:\Other Programs\prog.exe -go "\fool" "%1"
//          SHEvaluateSystemCommandTemplate() returns: S_OK
//              pszApplication  =   C:\Other Programs\prog.exe
//              pszCommandLine  =   "C:\Other Programs\prog.exe" -go "\fool" "%1"
//          * CreateProcess() would return TRUE
//              new process =   C:\Other Programs\prog.exe
//
//  Unquoted Example #7
//      pszCmdTemplate      =   C:\Program Files\Internet Explorer\iexplore.exe -url \fool.htm
//          SHEvaluateSystemCommandTemplate() returns: CO_E_APPNOTFOUND
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #8
//      pszCmdTemplate      =   C:\Program -url
//          SHEvaluateSystemCommandTemplate() returns: CO_E_APPNOTFOUND
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #9
//      pszCmdTemplate      =   C:\Other Programs\prog.exe -go \fool us
//          SHEvaluateSystemCommandTemplate() returns: CO_E_APPNOTFOUND
//          * CreateProcess() would return TRUE
//              new process =   C:\Other Programs\prog.exe
//
//  Unquoted Example #10
//      pszCmdTemplate      =   C:\Other Programs\prog.exe -go \fool %1
//          SHEvaluateSystemCommandTemplate() returns: CO_E_APPNOTFOUND
//          * CreateProcess() would return TRUE
//              new process =   C:\Other Programs\prog.exe
//
//  Unquoted Example #11
//      pszCmdTemplate      =   C:\Program "%1"
//          SHEvaluateSystemCommandTemplate() returns: E_ACCESSDENIED
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//
//  Unquoted Example #12
//      pszCmdTemplate      =   C:\Program
//          SHEvaluateSystemCommandTemplate() returns: E_ACCESSDENIED
//          * CreateProcess() would return TRUE
//              new process =   C:\Program.exe
//

//  used for implementing IShellFolder::GetUIObject(IID_IQueryAssociations)
//  designed for namespace extensions with registered extensible types
//  SHCreateDefaultContextMenu() and others use IQueryAssociations to build up data sets

typedef enum ASSOCCLASS
{                               //  which other members are used
    ASSOCCLASS_SHELL_KEY = 0,   //  hkeyClass
    ASSOCCLASS_PROGID_KEY,      //  hkeyClass
    ASSOCCLASS_PROGID_STR,      //  pszClass (HKCR\pszClass)
    ASSOCCLASS_CLSID_KEY,       //  hkeyClass
    ASSOCCLASS_CLSID_STR,       //  pszClass (HKCR\CLSID\pszClass)
    ASSOCCLASS_APP_KEY,         //  hkeyClass
    ASSOCCLASS_APP_STR,         //  pszClass (HKCR\Applications\PathFindFileName(pszClass))
    ASSOCCLASS_SYSTEM_STR,      //  pszClass
    ASSOCCLASS_FOLDER,          //  none
    ASSOCCLASS_STAR,            //  none
} ASSOCCLASS;
typedef struct ASSOCIATIONELEMENT_
{
    ASSOCCLASS ac;              // required
    HKEY hkClass;               // may be NULL
    PCWSTR pszClass;            // may be NULL
} ASSOCIATIONELEMENT;

// the object returned from this API implements IQueryAssociations

SHSTDAPI AssocCreateForClasses(__in const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, REFIID riid, __out void **ppv);

/* #if 0 // SAMPLE CODE
HRESULT CCustomFolder::_AssocCreate(PCUITEMID_CHILD pidl, REFIID riid, __out void **ppv)
{
    *ppv = NULL;
    ASSOCIATIONELEMENT rgAssoc[] =
    {
        { ASSOCCLASS_PROGID_STR, NULL, CCustomFolder::_MapChildToType(pidl)},
        { ASSOCCLASS_FOLDER, NULL, NULL},
    };
    if (CCustomFolder::_IsFolder(pidl))
    {
        return AssocCreateForClasses(rgAssoc, ARRAYSIZE(rgAssoc), riid, ppv);
    }
    else
    {
        //  skip FOLDER at the end
        return AssocCreateForClasses(rgAssoc, ARRAYSIZE(rgAssoc)-1, riid, ppv);
    }
}

HRESULT CCustomFolder::GetUIObjectOf(...)
{
    //  validate parameters
    if (riid == IID_IQueryAssociations)
    {
        hr = _AssocCreate(apidl[0], riid, ppv);
    }
    //  else if ...
}
#endif // SAMPLE CODE
*/

#endif // (NTDDI_VERSION >= NTDDI_VISTA)

////
////  End ShellExecuteEx and family
////

#if (NTDDI_VERSION >= NTDDI_WIN2K)
//
// RecycleBin
//

// struct for query recycle bin info
typedef struct _SHQUERYRBINFO {
    DWORD   cbSize;
#if !defined(_MAC) || defined(_MAC_INT_64)
    __int64 i64Size;
    __int64 i64NumItems;
#else
    DWORDLONG i64Size;
    DWORDLONG i64NumItems;
#endif
} SHQUERYRBINFO, *LPSHQUERYRBINFO;


// flags for SHEmptyRecycleBin
//
#define SHERB_NOCONFIRMATION    0x00000001
#define SHERB_NOPROGRESSUI      0x00000002
#define SHERB_NOSOUND           0x00000004


SHSTDAPI SHQueryRecycleBinA(LPCSTR pszRootPath, __inout LPSHQUERYRBINFO pSHQueryRBInfo);
SHSTDAPI SHQueryRecycleBinW(LPCWSTR pszRootPath, __inout LPSHQUERYRBINFO pSHQueryRBInfo);
#ifdef UNICODE
#define SHQueryRecycleBin  SHQueryRecycleBinW
#else
#define SHQueryRecycleBin  SHQueryRecycleBinA
#endif // !UNICODE
SHSTDAPI SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
SHSTDAPI SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
#ifdef UNICODE
#define SHEmptyRecycleBin  SHEmptyRecycleBinW
#else
#define SHEmptyRecycleBin  SHEmptyRecycleBinA
#endif // !UNICODE

////
//// end of RecycleBin
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


////
//// Taskbar notification definitions
////

#if (NTDDI_VERSION >= NTDDI_VISTA)
typedef enum
{
    QUNS_NOT_PRESENT               = 1,    // The user is not present.  Heuristic check for modes like: screen saver, locked machine, non-active FUS session
    QUNS_BUSY                      = 2,    // The user is busy.  Heuristic check for modes like: full-screen app
    QUNS_RUNNING_D3D_FULL_SCREEN   = 3,    // full-screen (exlusive-mode) D3D app
    QUNS_PRESENTATION_MODE         = 4,    // Windows presentation mode (laptop feature) is turned on
    QUNS_ACCEPTS_NOTIFICATIONS     = 5,    // none of the above
} QUERY_USER_NOTIFICATION_STATE;

SHSTDAPI SHQueryUserNotificationState(__out QUERY_USER_NOTIFICATION_STATE *pquns);
#endif // (NTDDI_VERSION >= NTDDI_VISTA)


typedef struct _NOTIFYICONDATAA {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
#if (NTDDI_VERSION < NTDDI_WIN2K)
    CHAR   szTip[64];
#endif
#if (NTDDI_VERSION >= NTDDI_WIN2K)
    CHAR   szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR   szInfo[256];
    union {
        UINT  uTimeout;
        UINT  uVersion;  // used with NIM_SETVERSION, values 0, 3 and 4
    } DUMMYUNIONNAME;
    CHAR   szInfoTitle[64];
    DWORD dwInfoFlags;
#endif
#if (NTDDI_VERSION >= NTDDI_WINXP)
    GUID guidItem;
#endif
#if (NTDDI_VERSION >= NTDDI_VISTA)
    HICON hBalloonIcon;
#endif
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
#if (NTDDI_VERSION < NTDDI_WIN2K)
    WCHAR  szTip[64];
#endif
#if (NTDDI_VERSION >= NTDDI_WIN2K)
    WCHAR  szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR  szInfo[256];
    union {
        UINT  uTimeout;
        UINT  uVersion;  // used with NIM_SETVERSION, values 0, 3 and 4
    } DUMMYUNIONNAME;
    WCHAR  szInfoTitle[64];
    DWORD dwInfoFlags;
#endif
#if (NTDDI_VERSION >= NTDDI_WINXP)
    GUID guidItem;
#endif
#if (NTDDI_VERSION >= NTDDI_VISTA)
    HICON hBalloonIcon;
#endif
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;
#ifdef UNICODE
typedef NOTIFYICONDATAW NOTIFYICONDATA;
typedef PNOTIFYICONDATAW PNOTIFYICONDATA;
#else
typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
#endif // UNICODE


#define NOTIFYICONDATAA_V1_SIZE     FIELD_OFFSET(NOTIFYICONDATAA, szTip[64])
#define NOTIFYICONDATAW_V1_SIZE     FIELD_OFFSET(NOTIFYICONDATAW, szTip[64])
#ifdef UNICODE
#define NOTIFYICONDATA_V1_SIZE      NOTIFYICONDATAW_V1_SIZE
#else
#define NOTIFYICONDATA_V1_SIZE      NOTIFYICONDATAA_V1_SIZE
#endif

#define NOTIFYICONDATAA_V2_SIZE     FIELD_OFFSET(NOTIFYICONDATAA, guidItem)
#define NOTIFYICONDATAW_V2_SIZE     FIELD_OFFSET(NOTIFYICONDATAW, guidItem)
#ifdef UNICODE
#define NOTIFYICONDATA_V2_SIZE      NOTIFYICONDATAW_V2_SIZE
#else
#define NOTIFYICONDATA_V2_SIZE      NOTIFYICONDATAA_V2_SIZE
#endif

#define NOTIFYICONDATAA_V3_SIZE     FIELD_OFFSET(NOTIFYICONDATAA, hBalloonIcon)
#define NOTIFYICONDATAW_V3_SIZE     FIELD_OFFSET(NOTIFYICONDATAW, hBalloonIcon)
#ifdef UNICODE
#define NOTIFYICONDATA_V3_SIZE      NOTIFYICONDATAW_V3_SIZE
#else
#define NOTIFYICONDATA_V3_SIZE      NOTIFYICONDATAA_V3_SIZE
#endif


#if (_WIN32_IE >= 0x0500)
#define NIN_SELECT          (WM_USER + 0)
#define NINF_KEY            0x1
#define NIN_KEYSELECT       (NIN_SELECT | NINF_KEY)
#endif

#if (_WIN32_IE >= 0x0501)
#define NIN_BALLOONSHOW         (WM_USER + 2)
#define NIN_BALLOONHIDE         (WM_USER + 3)
#define NIN_BALLOONTIMEOUT      (WM_USER + 4)
#define NIN_BALLOONUSERCLICK    (WM_USER + 5)
#endif
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define NIN_POPUPOPEN           (WM_USER + 6)
#define NIN_POPUPCLOSE          (WM_USER + 7)
#endif // (NTDDI_VERSION >= NTDDI_VISTA)


#define NIM_ADD         0x00000000
#define NIM_MODIFY      0x00000001
#define NIM_DELETE      0x00000002
#if (_WIN32_IE >= 0x0500)
#define NIM_SETFOCUS    0x00000003
#define NIM_SETVERSION  0x00000004
// set NOTIFYICONDATA.uVersion with 0, 3 or 4
// please read the documentation on the behavior difference that the different versions imply
#define     NOTIFYICON_VERSION      3
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define     NOTIFYICON_VERSION_4    4
#endif // (NTDDI_VERSION >= NTDDI_VISTA)
#endif

#define NIF_MESSAGE     0x00000001
#define NIF_ICON        0x00000002
#define NIF_TIP         0x00000004
#if (_WIN32_IE >= 0x0500)
#define NIF_STATE       0x00000008
#define NIF_INFO        0x00000010
#endif
#if (_WIN32_IE >= 0x600)
#define NIF_GUID        0x00000020
#endif
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define NIF_REALTIME    0x00000040
#define NIF_SHOWTIP     0x00000080
#endif // (NTDDI_VERSION >= NTDDI_VISTA)

#if (_WIN32_IE >= 0x0500)
#define NIS_HIDDEN              0x00000001
#define NIS_SHAREDICON          0x00000002

// says this is the source of a shared icon

// Notify Icon Infotip flags
#define NIIF_NONE       0x00000000
// icon flags are mutually exclusive
// and take only the lowest 2 bits
#define NIIF_INFO       0x00000001
#define NIIF_WARNING    0x00000002
#define NIIF_ERROR      0x00000003
#if (NTDDI_VERSION >= NTDDI_XPSP2) // also available in NTDDI_WS03SP1
#define NIIF_USER       0x00000004
#endif // (NTDDI_VERSION >= NTDDI_XPSP2)
#define NIIF_ICON_MASK  0x0000000F
#if (_WIN32_IE >= 0x0501)
#define NIIF_NOSOUND    0x00000010
#endif
#endif
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define NIIF_LARGE_ICON 0x00000020
#endif // (NTDDI_VERSION >= NTDDI_VISTA)

SHSTDAPI_(BOOL) Shell_NotifyIconA(DWORD dwMessage, __in PNOTIFYICONDATAA lpData);
SHSTDAPI_(BOOL) Shell_NotifyIconW(DWORD dwMessage, __in PNOTIFYICONDATAW lpData);
#ifdef UNICODE
#define Shell_NotifyIcon  Shell_NotifyIconW
#else
#define Shell_NotifyIcon  Shell_NotifyIconA
#endif // !UNICODE

////
//// End Taskbar Notification Icons
////

#ifndef SHFILEINFO_DEFINED
#define SHFILEINFO_DEFINED
////
//// Begin SHGetFileInfo
////

/*
 * The SHGetFileInfo API provides an easy way to get attributes
 * for a file given a pathname.
 *
 *   PARAMETERS
 *
 *     pszPath              file name to get info about
 *     dwFileAttributes     file attribs, only used with SHGFI_USEFILEATTRIBUTES
 *     psfi                 place to return file info
 *     cbFileInfo           size of structure
 *     uFlags               flags
 *
 *   RETURN
 *     TRUE if things worked
 */

typedef struct _SHFILEINFOA
{
        HICON       hIcon;                      // out: icon
        int         iIcon;                      // out: icon index
        DWORD       dwAttributes;               // out: SFGAO_ flags
        CHAR        szDisplayName[MAX_PATH];    // out: display name (or path)
        CHAR        szTypeName[80];             // out: type name
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON       hIcon;                      // out: icon
        int         iIcon;                      // out: icon index
        DWORD       dwAttributes;               // out: SFGAO_ flags
        WCHAR       szDisplayName[MAX_PATH];    // out: display name (or path)
        WCHAR       szTypeName[80];             // out: type name
} SHFILEINFOW;
#ifdef UNICODE
typedef SHFILEINFOW SHFILEINFO;
#else
typedef SHFILEINFOA SHFILEINFO;
#endif // UNICODE


// NOTE: This is also in shlwapi.h.  Please keep in synch.
#endif // !SHFILEINFO_DEFINED

#define SHGFI_ICON              0x000000100     // get icon
#define SHGFI_DISPLAYNAME       0x000000200     // get display name
#define SHGFI_TYPENAME          0x000000400     // get type name
#define SHGFI_ATTRIBUTES        0x000000800     // get attributes
#define SHGFI_ICONLOCATION      0x000001000     // get icon location
#define SHGFI_EXETYPE           0x000002000     // return exe type
#define SHGFI_SYSICONINDEX      0x000004000     // get system icon index
#define SHGFI_LINKOVERLAY       0x000008000     // put a link overlay on icon
#define SHGFI_SELECTED          0x000010000     // show icon in selected state
#if (NTDDI_VERSION >= NTDDI_WIN2K)
#define SHGFI_ATTR_SPECIFIED    0x000020000     // get only specified attributes
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)
#define SHGFI_LARGEICON         0x000000000     // get large icon
#define SHGFI_SMALLICON         0x000000001     // get small icon
#define SHGFI_OPENICON          0x000000002     // get open icon
#define SHGFI_SHELLICONSIZE     0x000000004     // get shell size icon
#define SHGFI_PIDL              0x000000008     // pszPath is a pidl
#define SHGFI_USEFILEATTRIBUTES 0x000000010     // use passed dwFileAttribute

#if (_WIN32_IE >= 0x0500)
#define SHGFI_ADDOVERLAYS       0x000000020     // apply the appropriate overlays
#define SHGFI_OVERLAYINDEX      0x000000040     // Get the index of the overlay
                                                // in the upper 8 bits of the iIcon
#endif

SHSTDAPI_(DWORD_PTR) SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, __inout_bcount_opt(cbFileInfo) SHFILEINFOA *psfi,
    UINT cbFileInfo, UINT uFlags);
SHSTDAPI_(DWORD_PTR) SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, __inout_bcount_opt(cbFileInfo) SHFILEINFOW *psfi,
    UINT cbFileInfo, UINT uFlags);
#ifdef UNICODE
#define SHGetFileInfo  SHGetFileInfoW
#else
#define SHGetFileInfo  SHGetFileInfoA
#endif // !UNICODE

#if (NTDDI_VERSION >= NTDDI_VISTA)
typedef struct _SHSTOCKICONINFO
{
    DWORD cbSize;
    HICON hIcon;
    int   iSysImageIndex;
    int   iIcon;
    WCHAR szPath[MAX_PATH];
} SHSTOCKICONINFO;

#define SHGSI_ICONLOCATION      0 // you always get the icon location
#define SHGSI_ICON              SHGFI_ICON
#define SHGSI_SYSICONINDEX      SHGFI_SYSICONINDEX
#define SHGSI_LINKOVERLAY       SHGFI_LINKOVERLAY
#define SHGSI_SELECTED          SHGFI_SELECTED
#define SHGSI_LARGEICON         SHGFI_LARGEICON
#define SHGSI_SMALLICON         SHGFI_SMALLICON
#define SHGSI_SHELLICONSIZE     SHGFI_SHELLICONSIZE

//  Shell icons


typedef enum SHSTOCKICONID
{
    SIID_DOCNOASSOC = 0,          // document (blank page), no associated program
    SIID_DOCASSOC = 1,            // document with an associated program
    SIID_APPLICATION = 2,         // generic application with no custom icon
    SIID_FOLDER = 3,              // folder (closed)
    SIID_FOLDEROPEN = 4,          // folder (open)
    SIID_DRIVE525 = 5,            // 5.25" floppy disk drive
    SIID_DRIVE35 = 6,             // 3.5" floppy disk drive
    SIID_DRIVEREMOVE = 7,         // removable drive
    SIID_DRIVEFIXED = 8,          // fixed (hard disk) drive
    SIID_DRIVENET = 9,            // network drive
    SIID_DRIVENETDISABLED = 10,   // disconnected network drive
    SIID_DRIVECD = 11,            // CD drive
    SIID_DRIVERAM = 12,           // RAM disk drive
    SIID_WORLD = 13,              // entire network
    SIID_SERVER = 15,             // a computer on the network
    SIID_PRINTER = 16,            // printer
    SIID_MYNETWORK = 17,          // My network places
    SIID_FIND = 22,               // Find
    SIID_HELP = 23,               // Help
    SIID_SHARE = 28,              // overlay for shared items
    SIID_LINK = 29,               // overlay for shortcuts to items
    SIID_SLOWFILE = 30,           // overlay for slow items
    SIID_RECYCLER = 31,           // empty recycle bin
    SIID_RECYCLERFULL = 32,       // full recycle bin
    SIID_MEDIACDAUDIO = 40,       // Audio CD Media
    SIID_LOCK = 47,               // Security lock
    SIID_AUTOLIST = 49,           // AutoList
    SIID_PRINTERNET = 50,         // Network printer
    SIID_SERVERSHARE = 51,        // Server share
    SIID_PRINTERFAX = 52,         // Fax printer
    SIID_PRINTERFAXNET = 53,      // Networked Fax Printer
    SIID_PRINTERFILE = 54,        // Print to File
    SIID_STACK = 55,              // Stack
    SIID_MEDIASVCD = 56,          // SVCD Media
    SIID_STUFFEDFOLDER = 57,      // Folder containing other items
    SIID_DRIVEUNKNOWN = 58,       // Unknown drive
    SIID_DRIVEDVD = 59,           // DVD Drive
    SIID_MEDIADVD = 60,           // DVD Media
    SIID_MEDIADVDRAM = 61,        // DVD-RAM Media
    SIID_MEDIADVDRW = 62,         // DVD-RW Media
    SIID_MEDIADVDR = 63,          // DVD-R Media
    SIID_MEDIADVDROM = 64,        // DVD-ROM Media
    SIID_MEDIACDAUDIOPLUS = 65,   // CD+ (Enhanced CD) Media
    SIID_MEDIACDRW = 66,          // CD-RW Media
    SIID_MEDIACDR = 67,           // CD-R Media
    SIID_MEDIACDBURN = 68,        // Burning CD
    SIID_MEDIABLANKCD = 69,       // Blank CD Media
    SIID_MEDIACDROM = 70,         // CD-ROM Media
    SIID_AUDIOFILES = 71,         // Audio files
    SIID_IMAGEFILES = 72,         // Image files
    SIID_VIDEOFILES = 73,         // Video files
    SIID_MIXEDFILES = 74,         // Mixed files
    SIID_FOLDERBACK = 75,         // Folder back
    SIID_FOLDERFRONT = 76,        // Folder front
    SIID_SHIELD = 77,             // Security shield. Use for UAC prompts only.
    SIID_WARNING = 78,            // Warning
    SIID_INFO = 79,               // Informational
    SIID_ERROR = 80,              // Error
    SIID_KEY = 81,                // Key / Secure
    SIID_SOFTWARE = 82,           // Software
    SIID_RENAME = 83,             // Rename
    SIID_DELETE = 84,             // Delete
    SIID_MEDIAAUDIODVD = 85,      // Audio DVD Media
    SIID_MEDIAMOVIEDVD = 86,      // Movie DVD Media
    SIID_MEDIAENHANCEDCD = 87,    // Enhanced CD Media
    SIID_MEDIAENHANCEDDVD = 88,   // Enhanced DVD Media
    SIID_MEDIAHDDVD = 89,         // HD-DVD Media
    SIID_MEDIABLURAY = 90,        // BluRay Media
    SIID_MEDIAVCD = 91,           // VCD Media
    SIID_MEDIADVDPLUSR = 92,      // DVD+R Media
    SIID_MEDIADVDPLUSRW = 93,     // DVD+RW Media
    SIID_DESKTOPPC = 94,          // desktop computer
    SIID_MOBILEPC = 95,           // mobile computer (laptop/notebook)
    SIID_USERS = 96,              // users
    SIID_MEDIASMARTMEDIA = 97,    // Smart Media
    SIID_MEDIACOMPACTFLASH = 98,  // Compact Flash
    SIID_DEVICECELLPHONE = 99,    // Cell phone
    SIID_DEVICECAMERA = 100,      // Camera
    SIID_DEVICEVIDEOCAMERA = 101, // Video camera
    SIID_DEVICEAUDIOPLAYER = 102, // Audio player
    SIID_NETWORKCONNECT = 103,    // Connect to network
    SIID_INTERNET = 104,          // Internet
    SIID_ZIPFILE = 105,           // ZIP file
    SIID_SETTINGS = 106,          // Settings
    // 107-131 are internal Vista RTM icons
    // 132+ for SP1 icons
    SIID_DRIVEHDDVD = 132,        // HDDVD Drive (all types)
    SIID_DRIVEBD = 133,           // BluRay Drive (all types)
    SIID_MEDIAHDDVDROM = 134,     // HDDVD-ROM Media
    SIID_MEDIAHDDVDR = 135,       // HDDVD-R Media
    SIID_MEDIAHDDVDRAM = 136,     // HDDVD-RAM Media
    SIID_MEDIABDROM = 137,        // BluRay ROM Media
    SIID_MEDIABDR = 138,          // BluRay R Media
    SIID_MEDIABDRE = 139,         // BluRay RE Media (Rewriable and RAM)
    SIID_CLUSTEREDDRIVE = 140,    // Clustered disk
    SIID_MAX_ICONS = 141,
} SHSTOCKICONID;

#define SIID_INVALID ((SHSTOCKICONID)-1)


SHSTDAPI SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, __inout SHSTOCKICONINFO *psii);

#endif // (NTDDI_VERSION >= NTDDI_VISTA)

#if (NTDDI_VERSION >= NTDDI_WIN2K)
#define SHGetDiskFreeSpace SHGetDiskFreeSpaceEx

SHSTDAPI_(BOOL) SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, __out_opt ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
    __out_opt ULARGE_INTEGER* pulTotalNumberOfBytes, __out_opt ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
SHSTDAPI_(BOOL) SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, __out_opt ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
    __out_opt ULARGE_INTEGER* pulTotalNumberOfBytes, __out_opt ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
#ifdef UNICODE
#define SHGetDiskFreeSpaceEx  SHGetDiskFreeSpaceExW
#else
#define SHGetDiskFreeSpaceEx  SHGetDiskFreeSpaceExA
#endif // !UNICODE
SHSTDAPI_(BOOL) SHGetNewLinkInfoA(__in LPCSTR pszLinkTo, __in LPCSTR pszDir, __out_ecount(MAX_PATH) LPSTR pszName, __out BOOL *pfMustCopy, __in UINT uFlags);
SHSTDAPI_(BOOL) SHGetNewLinkInfoW(__in LPCWSTR pszLinkTo, __in LPCWSTR pszDir, __out_ecount(MAX_PATH) LPWSTR pszName, __out BOOL *pfMustCopy, __in UINT uFlags);
#ifdef UNICODE
#define SHGetNewLinkInfo  SHGetNewLinkInfoW
#else
#define SHGetNewLinkInfo  SHGetNewLinkInfoA
#endif // !UNICODE

#define SHGNLI_PIDL             0x000000001     // pszLinkTo is a pidl
#define SHGNLI_PREFIXNAME       0x000000002     // Make name "Shortcut to xxx"
#define SHGNLI_NOUNIQUE         0x000000004     // don't do the unique name generation
#if (_WIN32_IE >= 0x0501)
#define SHGNLI_NOLNK            0x000000008     // don't add ".lnk" extension
#endif // _WIN2_IE >= 0x0501
#if (_WIN32_IE >= 0x0600)
#define SHGNLI_NOLOCNAME        0x000000010     // use non localized (parsing) name from the target
#endif
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


////
//// End SHGetFileInfo
////

#if (NTDDI_VERSION >= NTDDI_WIN2K)
// Printer stuff
#define PRINTACTION_OPEN           0
#define PRINTACTION_PROPERTIES     1
#define PRINTACTION_NETINSTALL     2
#define PRINTACTION_NETINSTALLLINK 3
#define PRINTACTION_TESTPAGE       4
#define PRINTACTION_OPENNETPRN     5
#ifdef WINNT
#define PRINTACTION_DOCUMENTDEFAULTS 6
#define PRINTACTION_SERVERPROPERTIES 7
#endif

SHSTDAPI_(BOOL) SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
SHSTDAPI_(BOOL) SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);
#ifdef UNICODE
#define SHInvokePrinterCommand  SHInvokePrinterCommandW
#else
#define SHInvokePrinterCommand  SHInvokePrinterCommandA
#endif // !UNICODE
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)

#if (NTDDI_VERSION >= NTDDI_VISTA)
typedef struct _OPEN_PRINTER_PROPS_INFOA
{
    DWORD       dwSize;
    LPSTR       pszSheetName;
    UINT        uSheetIndex;
    DWORD       dwFlags;
    BOOL        bModal;
} OPEN_PRINTER_PROPS_INFOA, *POPEN_PRINTER_PROPS_INFOA;
typedef struct _OPEN_PRINTER_PROPS_INFOW
{
    DWORD       dwSize;
    LPWSTR      pszSheetName;
    UINT        uSheetIndex;
    DWORD       dwFlags;
    BOOL        bModal;
} OPEN_PRINTER_PROPS_INFOW, *POPEN_PRINTER_PROPS_INFOW;
#ifdef UNICODE
typedef OPEN_PRINTER_PROPS_INFOW OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOW POPEN_PRINTER_PROPS_INFO;
#else
typedef OPEN_PRINTER_PROPS_INFOA OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO;
#endif // UNICODE
#define PRINT_PROP_FORCE_NAME   0x01
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


#endif /* WINVER >= 0x0400 */

#if (_WIN32_WINNT >= 0x0500) || (_WIN32_WINDOWS >= 0x0500)

//
// The SHLoadNonloadedIconOverlayIdentifiers API causes the shell's
// icon overlay manager to load any registered icon overlay
// identifers that are not currently loaded.  This is useful if an
// overlay identifier did not load at shell startup but is needed
// and can be loaded at a later time.  Identifiers already loaded
// are not affected.  Overlay identifiers implement the
// IShellIconOverlayIdentifier interface.
//
// Returns:
//      S_OK
//
SHSTDAPI SHLoadNonloadedIconOverlayIdentifiers(void);

//
// The SHIsFileAvailableOffline API determines whether a file
// or folder is available for offline use.
//
// Parameters:
//     pwszPath             file name to get info about
//     pdwStatus            (optional) OFFLINE_STATUS_* flags returned here
//
// Returns:
//     S_OK                 File/directory is available offline, unless
//                            OFFLINE_STATUS_INCOMPLETE is returned.
//     E_INVALIDARG         Path is invalid, or not a net path
//     E_FAIL               File/directory is not available offline
//
// Notes:
//     OFFLINE_STATUS_INCOMPLETE is never returned for directories.
//     Both OFFLINE_STATUS_LOCAL and OFFLINE_STATUS_REMOTE may be returned,
//     indicating "open in both places." This is common when the server is online.
//
SHSTDAPI SHIsFileAvailableOffline(__in LPCWSTR pwszPath, __out_opt LPDWORD pdwStatus);

#define OFFLINE_STATUS_LOCAL        0x0001  // If open, it's open locally
#define OFFLINE_STATUS_REMOTE       0x0002  // If open, it's open remotely
#define OFFLINE_STATUS_INCOMPLETE   0x0004  // The local copy is currently imcomplete.
                                            // The file will not be available offline
                                            // until it has been synchronized.

#endif

#if (NTDDI_VERSION >= NTDDI_WINXP)
//  sets the specified path to use the string resource
//  as the UI instead of the file system name
SHSTDAPI SHSetLocalizedName(LPCWSTR pszPath, LPCWSTR pszResModule, int idsRes);
#endif // (NTDDI_VERSION >= NTDDI_WINXP)
#if (NTDDI_VERSION >= NTDDI_VISTA)
//  sets the specified path to use the string resource
//  as the UI instead of the file system name
SHSTDAPI SHRemoveLocalizedName(LPCWSTR pszPath);
//  gets the string resource for the specified path
SHSTDAPI SHGetLocalizedName(__in LPCWSTR pszPath, __out_ecount(cch) LPWSTR pszResModule, UINT cch, __out int *pidsRes);
#endif // (NTDDI_VERSION >= NTDDI_VISTA)


//====== ShellMessageBox ================================================

// If lpcTitle is NULL, the title is taken from hWnd
// If lpcText is NULL, this is assumed to be an Out Of Memory message
// If the selector of lpcTitle or lpcText is NULL, the offset should be a
//     string resource ID
// The variable arguments must all be 32-bit values (even if fewer bits
//     are actually used)
// lpcText (or whatever string resource it causes to be loaded) should
//     be a formatting string similar to wsprintf except that only the
//     following formats are available:
//         %%              formats to a single '%'
//         %nn%s           the nn-th arg is a string which is inserted
//         %nn%ld          the nn-th arg is a DWORD, and formatted decimal
//         %nn%lx          the nn-th arg is a DWORD, and formatted hex
//     note that lengths are allowed on the %s, %ld, and %lx, just
//                         like wsprintf
//

#if !defined(_SHLWAPI_)
#define LWSTDAPIV_(type)  EXTERN_C DECLSPEC_IMPORT type STDAPIVCALLTYPE
#else
#define LWSTDAPIV_(type)  STDAPIV_(type)
#endif

LWSTDAPIV_(int) ShellMessageBoxA(
    __in_opt HINSTANCE hAppInst,
    __in_opt HWND hWnd,
    __in LPCSTR lpcText,
    __in_opt LPCSTR lpcTitle,
    __in UINT fuStyle, ...);
LWSTDAPIV_(int) ShellMessageBoxW(
    __in_opt HINSTANCE hAppInst,
    __in_opt HWND hWnd,
    __in LPCWSTR lpcText,
    __in_opt LPCWSTR lpcTitle,
    __in UINT fuStyle, ...);
#ifdef UNICODE
#define ShellMessageBox  ShellMessageBoxW
#else
#define ShellMessageBox  ShellMessageBoxA
#endif // !UNICODE

#if (NTDDI_VERSION >= NTDDI_WIN2K)
SHSTDAPI_(BOOL) IsLFNDriveA(LPCSTR pszPath);
SHSTDAPI_(BOOL) IsLFNDriveW(LPCWSTR pszPath);
#ifdef UNICODE
#define IsLFNDrive  IsLFNDriveW
#else
#define IsLFNDrive  IsLFNDriveA
#endif // !UNICODE
#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


#if         _WIN32_IE >= 0x0600

STDAPI          SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, __out_ecount(cchMailAddress) LPSTR pszMailAddress, int cchMailAddress);
STDAPI          SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, __out_ecount(cchMailAddress) LPWSTR pszMailAddress, int cchMailAddress);
#ifdef UNICODE
#define SHEnumerateUnreadMailAccounts  SHEnumerateUnreadMailAccountsW
#else
#define SHEnumerateUnreadMailAccounts  SHEnumerateUnreadMailAccountsA
#endif // !UNICODE
STDAPI          SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, __out_opt DWORD *pdwCount, __out_opt FILETIME *pFileTime, __out_ecount_opt(cchShellExecuteCommand) LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
STDAPI          SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, __out_opt DWORD *pdwCount, __out_opt FILETIME *pFileTime, __out_ecount_opt(cchShellExecuteCommand) LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);
#ifdef UNICODE
#define SHGetUnreadMailCount  SHGetUnreadMailCountW
#else
#define SHGetUnreadMailCount  SHGetUnreadMailCountA
#endif // !UNICODE
STDAPI          SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
STDAPI          SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
#ifdef UNICODE
#define SHSetUnreadMailCount  SHSetUnreadMailCountW
#else
#define SHSetUnreadMailCount  SHSetUnreadMailCountA
#endif // !UNICODE

#endif  /*  _WIN32_IE >= 0x0600     */

#if (_WIN32_IE >= 0x0601)
STDAPI_(BOOL)   SHTestTokenMembership(__in_opt HANDLE hToken, __in ULONG ulRID);
#endif // (_WIN32_IE >= 0x0601)

#if         _WIN32_IE >= 0x0600

#if (NTDDI_VERSION >= NTDDI_WINXP)
SHSTDAPI SHGetImageList(int iImageList, REFIID riid, __out void **ppvObj);
#endif // (NTDDI_VERSION >= NTDDI_WINXP)

#if (NTDDI_VERSION >= NTDDI_WINXP)
#define SHIL_LARGE          0   // normally 32x32
#define SHIL_SMALL          1   // normally 16x16
#define SHIL_EXTRALARGE     2
#define SHIL_SYSSMALL       3   // like SHIL_SMALL, but tracks system small icon metric correctly
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define SHIL_JUMBO          4   // normally 256x256
#define SHIL_LAST           SHIL_JUMBO
#else
#define SHIL_LAST           SHIL_SYSSMALL
#endif // (NTDDI_VERSION >= NTDDI_VISTA)
#endif // (NTDDI_VERSION >= NTDDI_WINXP)


// Function call types for ntshrui folder sharing helpers
typedef HRESULT (STDMETHODCALLTYPE *PFNCANSHAREFOLDERW)(LPCWSTR pszPath);
typedef HRESULT (STDMETHODCALLTYPE *PFNSHOWSHAREFOLDERUIW)(HWND hwndParent, LPCWSTR pszPath);

#endif  /*  _WIN32_IE >= 0x0600     */

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#if !defined(_WIN64)
#include <poppack.h>
#endif

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif


#if (NTDDI_VERSION >= NTDDI_VISTA)
// API for new Network Address Control

// Instantiation
#define WC_NETADDRESS L"msctls_netaddress"
SHSTDAPI_(BOOL) InitNetworkAddressControl(void);

// Address Control Messages

// NCM_GETADDRESS returns the type of address that is present in the
// control (based on TBD Net Address flags).  If the input string has
// not been validated using this message will force the validation of
// the input string.  The WPARAM is a BOOL to determine to show the
// balloon tip.  The LPARAM is a pointer to the structure to fill in
// with the address type and address string.
#define NCM_GETADDRESS (WM_USER+1)
#define NetAddr_GetAddress(hwnd,pv) \
    (HRESULT)SNDMSG(hwnd,NCM_GETADDRESS,0,(LPARAM)pv)
typedef struct tagNC_ADDRESS
{
   struct NET_ADDRESS_INFO_ *pAddrInfo; // defined in iphlpapi.h
   USHORT  PortNumber;
   BYTE    PrefixLength;
} NC_ADDRESS, *PNC_ADDRESS;

// NCM_SETALLOWTYPE sets the type of addresses that the control will allow.
// The address flags are defined in iphlpapi.h
#define NCM_SETALLOWTYPE (WM_USER+2)
#define NetAddr_SetAllowType(hwnd,addrMask) \
    (HRESULT)SNDMSG(hwnd,NCM_SETALLOWTYPE,(WPARAM)addrMask,0)
// NCM_GETALLOWTYPE returns the currently allowed type mask.
#define NCM_GETALLOWTYPE (WM_USER+3)
#define NetAddr_GetAllowType(hwnd) \
    (DWORD)SNDMSG(hwnd,NCM_GETALLOWTYPE,0,0)

// NCM_DISPLAYERRORTIP displays the error balloon tip with the correct
// error string (based on the last failure from the NCM_GETADDRESS call
#define NCM_DISPLAYERRORTIP (WM_USER+4)
#define NetAddr_DisplayErrorTip(hwnd) \
    (HRESULT)SNDMSG(hwnd,NCM_DISPLAYERRORTIP,0,0)

#endif // (NTDDI_VERSION >= NTDDI_VISTA)

#if (NTDDI_VERSION >= NTDDI_VISTA)
// Returns the type of media (CD, DVD, Blank, etc) that is in the drive.
// dwMediaContent is set to a combination of ARCONTENT flags.
STDAPI SHGetDriveMedia(LPCWSTR pszDrive, __out DWORD *pdwMediaContent);
#endif // (NTDDI_VERSION >= NTDDI_VISTA)

#if (NTDDI_VERSION >= NTDDI_VISTA)
#endif // (NTDDI_VERSION >= NTDDI_VISTA)

// CPL task apis
#if (NTDDI_VERSION >= NTDDI_VISTA)
#endif // (NTDDI_VERSION >= NTDDI_VISTA)

// Windows Parental Controls (WPC) query apis
#if (NTDDI_VERSION >= NTDDI_VISTA)
#endif // (NTDDI_VERSION >= NTDDI_VISTA)

#endif  /* _INC_SHELLAPI */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\shidfact.h ===
#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma once
#endif

#ifndef _INC_SHIDFACT
#define _INC_SHIDFACT

#ifdef __cplusplus

#include <shobjidl.h>     // for IDelegateFolder
#include <propvarutil.h>  // for PropVariantToVariant

template <class T, DWORD dwMagic>
class CItemIDFactory : public IDelegateFolder
{
protected:
    CItemIDFactory() : _pmalloc(NULL) {}

    // if we have an IMalloc from IDelegateFolder::SetItemAlloc then clean it up

    virtual ~CItemIDFactory()
    {
        if (_pmalloc)
        {
            _pmalloc->Release();
        }
    }

public:
    // IUnknown provided by derived classes

    // IDelegateFolder
    IFACEMETHODIMP SetItemAlloc(__inout_opt IMalloc *pmalloc)
    {
        IUnknown_Set((IUnknown**)&_pmalloc, pmalloc);
        return S_OK;
    }

    BOOL IsDelegateFolder()
    {
        return (_pmalloc != NULL);
    }

    // get a read only pointer to the client provided structure in the first ItemID in the IDList.
    // returns NULL if the IDList isn't valid.

    static const UNALIGNED T* GetDataFromIDList(PCUIDLIST_RELATIVE pidl)
    {
        PCITEM pitem = _IsValid(pidl);
        return pitem ? &pitem->innerData : NULL;
    }

    static HRESULT GetDataFromIDList(PCUIDLIST_RELATIVE pidl, __out const UNALIGNED T** ppData)
    {
        *ppData = GetDataFromIDList(pidl);
        return (*ppData) ? S_OK : E_INVALIDARG;
    }

    // return a read only pointer to the serialized property storage that we use for storing metadata

    static PCUSERIALIZEDPROPSTORAGE GetPropertyStorage(PCUIDLIST_RELATIVE pidl, __out DWORD* pcb)
    {
        PCITEM pitem = _IsValid(pidl);
        if (pitem && pitem->cbPropStore)
        {
            *pcb = pitem->cbPropStore;
            return (PCUSERIALIZEDPROPSTORAGE)(pitem + 1);
        }
        return NULL;
    }

    // return a property from the IPropertyStore within the IDList, convert the resulting PROPVARIANT
    // to a variant (useful when implementing IShellFolder2::GetDetailsEx)
    // return vt == VT_EMPTY if not found

    static HRESULT GetPropertyFromIDList(PCUIDLIST_RELATIVE pidl, REFPROPERTYKEY rkey, __out VARIANT *pvar)
    {
        PROPVARIANT pv = {pvar->vt};
        HRESULT hr = GetPropertyFromIDList(pidl, rkey, &pv);
        if (SUCCEEDED(hr))
        {
            hr = PropVariantToVariant(&pv, pvar);
            PropVariantClear(&pv);
        }
        return hr;
    }

    static HRESULT GetPropertyFromIDList(PCUIDLIST_RELATIVE pidl, LPCWSTR pszName, __out VARIANT *pvar)
    {
        PROPVARIANT pv = {pvar->vt};
        HRESULT hr = GetPropertyFromIDList(pidl, pszName, &pv);
        if (SUCCEEDED(hr))
        {
            hr = PropVariantToVariant(&pv, pvar);
            PropVariantClear(&pv);
        }
        return hr;
    }

    // read a PROPVARIANT from the IPropertyStore within the first ItemID in the IDList.

    static HRESULT GetPropertyFromIDList(PCUIDLIST_RELATIVE pidl, REFPROPERTYKEY rkey, __out PROPVARIANT *pv)
    {
        HRESULT hr = E_INVALIDARG;
        DWORD cb;
        PCUSERIALIZEDPROPSTORAGE psps = GetPropertyStorage(pidl, &cb);
        if (psps)
        {
            hr = PSGetPropertyFromPropertyStorage(psps, cb, rkey, pv);
            if (SUCCEEDED(hr) && (pv->vt == VT_EMPTY))
            {
                hr = HRESULT_FROM_WIN32(ERROR_UNKNOWN_PROPERTY);
            }
        }
        return hr;
    }

    // read a PROPVARIANT from the IPropertyStore within the first ItemID in the IDList using the named property

    static HRESULT GetPropertyFromIDList(PCUIDLIST_RELATIVE pidl, LPCWSTR pszName, __out PROPVARIANT *pv)
    {
        HRESULT hr = E_INVALIDARG;
        DWORD cb;
        PCUSERIALIZEDPROPSTORAGE psps = GetPropertyStorage(pidl, &cb);
        if (psps)
        {
            hr = PSGetNamedPropertyFromPropertyStorage(psps, cb, pszName, pv);
            if (SUCCEEDED(hr) && (pv->vt == VT_EMPTY))
            {
                hr = HRESULT_FROM_WIN32(ERROR_UNKNOWN_PROPERTY);
            }
        }
        return hr;
    }

    // create an instance of the IPropertyStore based on the serialized property storage associated
    // with the first ItemID.

    static HRESULT GetPropertyStorageFromIDList(PCUIDLIST_RELATIVE pidl, REFIID riid, __out void **ppv)
    {
        HRESULT hr = E_INVALIDARG;
        if (pidl && ppv)
        {
            DWORD cb;
            PCUSERIALIZEDPROPSTORAGE psps = GetPropertyStorage(pidl, &cb);
            if (psps)
            {
                IPersistSerializedPropStorage* ppsps;
                hr = PSCreateMemoryPropertyStore(IID_PPV_ARGS(&ppsps));
                if (SUCCEEDED(hr))
                {
                    hr = ppsps->SetPropertyStorage(psps, cb);
                    if (SUCCEEDED(hr))
                    {
                        hr = ppsps->SetFlags(FPSPS_READONLY);
                        if (SUCCEEDED(hr))
                        {
                            hr = ppsps->QueryInterface(riid, ppv);
                        }
                    }
                    ppsps->Release();
                }
            }
        }
        return hr;
    }

    // package up the user supplied data into an ItemID.  pinner points to the clients structure
    // that should be copied, and the IPropertyStore is serialized into the ItemID.   If the
    // client has called IDelegateFolder::SetItemAlloc then we will allocate with that
    // allocator, otherwise the COM allocator is used.  the size of the user supplied data must
    // equal sizeof(T). don't use structs with variably allocated array/string members. the
    // struct must also follow standard SHITEMID for persistance and portability. see
    // shtypes.idl for details.
    HRESULT CreateItemID(const UNALIGNED T *pinner, __inout_opt IPropertyStore *pps, __out PITEMID_CHILD *ppidl)
    {
        return s_CreateItemID(pinner, pps, ppidl, _pmalloc);
    }

    static HRESULT s_CreateItemID(const UNALIGNED T *pinner, __inout_opt IPropertyStore *pps, __out PITEMID_CHILD *ppidl, IMalloc *pMalloc=NULL)
    {
        *ppidl = NULL;

        SERIALIZEDPROPSTORAGE *pspstg = NULL;
        DWORD cbPropStore = 0;

        // do we have a IPropertyStore, if so we are going to add this to the ItemID
        // so we need to get the serialized version of it.

        HRESULT hr = S_OK;
        if (pps)
        {
            IPersistSerializedPropStorage *ppsps;
            hr = pps->QueryInterface(IID_PPV_ARGS(&ppsps));
            if (SUCCEEDED(hr))
            {
                hr = ppsps->GetPropertyStorage(&pspstg, &cbPropStore);
                ppsps->Release();
            }
        }

        // either we succeeded at getting the serialized data, or an IPropertyStore wasn't passed to us.

        if (SUCCEEDED(hr))
        {
            UINT cbInner = sizeof(CHILDITEMID) - (sizeof(DELEGATEITEMID) - 1) + cbPropStore;
            CHILDITEMID *pitem = s_Alloc(cbInner + sizeof(USHORT), pMalloc);
            if (pitem)
            {
                pitem->dwMagic = dwMagic;
                pitem->cbPropStore = (WORD)cbPropStore;             // size of the property store
                pitem->cbInnerData = sizeof(pitem->innerData);      // size of the "innerData" structure (useful for debugging)

                if (pinner)
                    pitem->innerData = *pinner;                     // copy the structure provided by the user

                if (pspstg)
                {
                    BYTE *pbData = (BYTE*)(pitem+1);
                    memcpy(pbData, pspstg, cbPropStore);            // copy property store to ItemID
                }

                *ppidl = (PITEMID_CHILD)pitem;
                hr = S_OK;
            }
            else
            {
                hr = E_OUTOFMEMORY;
            }

            CoTaskMemFree(pspstg);
        }

        return hr;
    }

private:

    // ItemID form is derived from the delegate folder verison, this allows us to easily
    // switch allocators without having to recompute the ItemID structure dynamically.

    #include <pshpack1.h>
    typedef struct              // typedef struct
    {                           // {
        // these need to line up -----------------------
        WORD cbSize;            //     WORD cbSize;         // Size of entire item ID
        WORD wOuter;            //     WORD wOuter;         // Private data owned by the outer folder
        WORD cbInner;           //     WORD cbInner;        // Size of delegate's data
        // ---------------------------------------------
        DWORD dwMagic;                                      // guard word used to compare to ensure its valid
        WORD cbPropStore;                                   // size of the property store at the end of the ItemID
        WORD cbInnerData;                                   // size of the innerData structure
        T innerData;                                        // inner data returned by the client
    } CHILDITEMID;
    #include <poppack.h>

    typedef UNALIGNED CHILDITEMID * PITEM;
    typedef const UNALIGNED CHILDITEMID * PCITEM;

    // given the size of the ItemID we want, let's allocate using the supplied
    // allocator and initialize the structure

    IMalloc *_pmalloc;                                      // used to allocate ItemID when we are a delegate folder

    static CHILDITEMID* s_Alloc(SIZE_T cbInner, IMalloc *pMalloc)
    {
        DELEGATEITEMID *pidl;
        if (pMalloc)
        {
            pidl = (DELEGATEITEMID *)pMalloc->Alloc(cbInner);
        }
        else
        {
            SIZE_T cbAlloc =
                sizeof(DELEGATEITEMID) - sizeof(pidl->rgb[0]) + // header
                cbInner +                                       // inner
                sizeof(WORD);                                   // trailing null (pidl terminator)

            const SIZE_T cbSizeMax = (1 << (sizeof(pidl->cbSize)*8)) - 1;
            if (cbAlloc > cbSizeMax + sizeof(WORD))
            {
                // cbSize will overflow
                pidl = NULL;
            }
            else
            {
                pidl = (DELEGATEITEMID *)CoTaskMemAlloc(cbAlloc);
                if (pidl)
                {
                    ZeroMemory(pidl, cbAlloc);
                    pidl->cbSize = (WORD)(cbAlloc - sizeof(WORD));
                    pidl->cbInner = (WORD)cbInner;
                }
            }
        }
        return (CHILDITEMID*)pidl;
    }

    // given a relative IDList, determine if it's valid and therefore if
    // we should continue to process the contents of it.

    static PCITEM _IsValid(PCUIDLIST_RELATIVE pidl)
    {
        PCITEM pitem = (PCITEM)pidl;

        if (!pitem || pitem->cbSize < sizeof(CHILDITEMID))
            return NULL;

        if ((pitem->dwMagic != dwMagic) || (pitem->cbSize < (sizeof(CHILDITEMID) + pitem->cbPropStore)))
            return NULL;

        return pitem;
    }
};

#endif  // __cplusplus

#endif  // _INC_SHIDFACT
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\shimgdata.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for shimgdata.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __shimgdata_h__
#define __shimgdata_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IShellImageDataFactory_FWD_DEFINED__
#define __IShellImageDataFactory_FWD_DEFINED__
typedef interface IShellImageDataFactory IShellImageDataFactory;
#endif 	/* __IShellImageDataFactory_FWD_DEFINED__ */


#ifndef __IShellImageData_FWD_DEFINED__
#define __IShellImageData_FWD_DEFINED__
typedef interface IShellImageData IShellImageData;
#endif 	/* __IShellImageData_FWD_DEFINED__ */


#ifndef __IShellImageDataAbort_FWD_DEFINED__
#define __IShellImageDataAbort_FWD_DEFINED__
typedef interface IShellImageDataAbort IShellImageDataAbort;
#endif 	/* __IShellImageDataAbort_FWD_DEFINED__ */


#ifndef __ShellImageDataFactory_FWD_DEFINED__
#define __ShellImageDataFactory_FWD_DEFINED__

#ifdef __cplusplus
typedef class ShellImageDataFactory ShellImageDataFactory;
#else
typedef struct ShellImageDataFactory ShellImageDataFactory;
#endif /* __cplusplus */

#endif 	/* __ShellImageDataFactory_FWD_DEFINED__ */


/* header files for imported files */
#include "oleidl.h"
#include "propidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_shimgdata_0000_0000 */
/* [local] */ 




#if !defined(_GDIPLUSPIXELFORMATS_H)
typedef DWORD PixelFormat;

#endif
#if !defined(_GDIPLUSENUMS_H)
typedef DWORD InterpolationMode;

#endif
#if !defined(_GDIPLUSHEADERS_H)
typedef BYTE EncoderParameters;

typedef BYTE Image;

#endif
#define  SHIMGKEY_QUALITY    L"Compression"
#define  SHIMGKEY_RAWFORMAT  L"RawDataFormat"

#define  SHIMGDEC_DEFAULT            0x00000000
#define  SHIMGDEC_THUMBNAIL          0x00000001
#define  SHIMGDEC_LOADFULL           0x00000002
#define  E_NOTVALIDFORANIMATEDIMAGE  MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x01)
// This helper function is used to determine if a given file is a B&W document image (fax, etc)
BOOL WINAPI SHIsFileADocumentImage(PCIDLIST_ABSOLUTE pidl);


extern RPC_IF_HANDLE __MIDL_itf_shimgdata_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shimgdata_0000_0000_v0_0_s_ifspec;

#ifndef __IShellImageDataFactory_INTERFACE_DEFINED__
#define __IShellImageDataFactory_INTERFACE_DEFINED__

/* interface IShellImageDataFactory */
/* [unique][object][uuid][helpstring] */ 


EXTERN_C const IID IID_IShellImageDataFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9be8ed5c-edab-4d75-90f3-bd5bdbb21c82")
    IShellImageDataFactory : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateIShellImageData( 
            /* [out] */ __RPC__deref_out_opt IShellImageData **ppshimg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateImageFromFile( 
            /* [in] */ __RPC__in LPCWSTR pszPath,
            /* [out] */ __RPC__deref_out_opt IShellImageData **ppshimg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateImageFromStream( 
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [out] */ __RPC__deref_out_opt IShellImageData **ppshimg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataFormatFromPath( 
            /* [in] */ __RPC__in LPCWSTR pszPath,
            /* [out] */ __RPC__out GUID *pDataFormat) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IShellImageDataFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IShellImageDataFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IShellImageDataFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IShellImageDataFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateIShellImageData )( 
            IShellImageDataFactory * This,
            /* [out] */ __RPC__deref_out_opt IShellImageData **ppshimg);
        
        HRESULT ( STDMETHODCALLTYPE *CreateImageFromFile )( 
            IShellImageDataFactory * This,
            /* [in] */ __RPC__in LPCWSTR pszPath,
            /* [out] */ __RPC__deref_out_opt IShellImageData **ppshimg);
        
        HRESULT ( STDMETHODCALLTYPE *CreateImageFromStream )( 
            IShellImageDataFactory * This,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [out] */ __RPC__deref_out_opt IShellImageData **ppshimg);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataFormatFromPath )( 
            IShellImageDataFactory * This,
            /* [in] */ __RPC__in LPCWSTR pszPath,
            /* [out] */ __RPC__out GUID *pDataFormat);
        
        END_INTERFACE
    } IShellImageDataFactoryVtbl;

    interface IShellImageDataFactory
    {
        CONST_VTBL struct IShellImageDataFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IShellImageDataFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IShellImageDataFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IShellImageDataFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IShellImageDataFactory_CreateIShellImageData(This,ppshimg)	\
    ( (This)->lpVtbl -> CreateIShellImageData(This,ppshimg) ) 

#define IShellImageDataFactory_CreateImageFromFile(This,pszPath,ppshimg)	\
    ( (This)->lpVtbl -> CreateImageFromFile(This,pszPath,ppshimg) ) 

#define IShellImageDataFactory_CreateImageFromStream(This,pStream,ppshimg)	\
    ( (This)->lpVtbl -> CreateImageFromStream(This,pStream,ppshimg) ) 

#define IShellImageDataFactory_GetDataFormatFromPath(This,pszPath,pDataFormat)	\
    ( (This)->lpVtbl -> GetDataFormatFromPath(This,pszPath,pDataFormat) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IShellImageDataFactory_INTERFACE_DEFINED__ */


#ifndef __IShellImageData_INTERFACE_DEFINED__
#define __IShellImageData_INTERFACE_DEFINED__

/* interface IShellImageData */
/* [local][unique][object][uuid][helpstring] */ 


EXTERN_C const IID IID_IShellImageData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bfdeec12-8040-4403-a5ea-9e07dafcf530")
    IShellImageData : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Decode( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ ULONG cxDesired,
            /* [in] */ ULONG cyDesired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Draw( 
            /* [in] */ HDC hdc,
            /* [in] */ LPRECT prcDest,
            /* [in] */ LPRECT prcSrc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NextFrame( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NextPage( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PrevPage( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsTransparent( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAnimated( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsVector( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsMultipage( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEditable( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsPrintable( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsDecoded( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentPage( 
            /* [out] */ ULONG *pnPage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPageCount( 
            /* [out] */ ULONG *pcPages) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SelectPage( 
            /* [in] */ ULONG iPage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ SIZE *pSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRawDataFormat( 
            /* [out] */ GUID *pDataFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPixelFormat( 
            /* [out] */ PixelFormat *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDelay( 
            /* [out] */ DWORD *pdwDelay) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProperties( 
            /* [in] */ DWORD dwMode,
            /* [out] */ IPropertySetStorage **ppPropSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate( 
            /* [in] */ DWORD dwAngle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale( 
            /* [in] */ ULONG cx,
            /* [in] */ ULONG cy,
            /* [in] */ InterpolationMode hints) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DiscardEdit( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEncoderParams( 
            /* [in] */ IPropertyBag *pbagEnc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisplayName( 
            /* [size_is][out][in] */ LPWSTR wszName,
            /* [in] */ UINT cch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResolution( 
            /* [out] */ ULONG *puResolutionX,
            /* [out] */ ULONG *puResolutionY) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEncoderParams( 
            /* [in] */ GUID *pguidFmt,
            /* [out] */ EncoderParameters **ppEncParams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterAbort( 
            /* [in] */ IShellImageDataAbort *pAbort,
            /* [out] */ IShellImageDataAbort **ppAbortPrev) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloneFrame( 
            /* [out] */ Image **ppImg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceFrame( 
            /* [in] */ Image *pImg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IShellImageDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IShellImageData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IShellImageData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *Decode )( 
            IShellImageData * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ ULONG cxDesired,
            /* [in] */ ULONG cyDesired);
        
        HRESULT ( STDMETHODCALLTYPE *Draw )( 
            IShellImageData * This,
            /* [in] */ HDC hdc,
            /* [in] */ LPRECT prcDest,
            /* [in] */ LPRECT prcSrc);
        
        HRESULT ( STDMETHODCALLTYPE *NextFrame )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *NextPage )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *PrevPage )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsTransparent )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsAnimated )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsVector )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsMultipage )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsEditable )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsPrintable )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsDecoded )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentPage )( 
            IShellImageData * This,
            /* [out] */ ULONG *pnPage);
        
        HRESULT ( STDMETHODCALLTYPE *GetPageCount )( 
            IShellImageData * This,
            /* [out] */ ULONG *pcPages);
        
        HRESULT ( STDMETHODCALLTYPE *SelectPage )( 
            IShellImageData * This,
            /* [in] */ ULONG iPage);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IShellImageData * This,
            /* [out] */ SIZE *pSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetRawDataFormat )( 
            IShellImageData * This,
            /* [out] */ GUID *pDataFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelFormat )( 
            IShellImageData * This,
            /* [out] */ PixelFormat *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetDelay )( 
            IShellImageData * This,
            /* [out] */ DWORD *pdwDelay);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperties )( 
            IShellImageData * This,
            /* [in] */ DWORD dwMode,
            /* [out] */ IPropertySetStorage **ppPropSet);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IShellImageData * This,
            /* [in] */ DWORD dwAngle);
        
        HRESULT ( STDMETHODCALLTYPE *Scale )( 
            IShellImageData * This,
            /* [in] */ ULONG cx,
            /* [in] */ ULONG cy,
            /* [in] */ InterpolationMode hints);
        
        HRESULT ( STDMETHODCALLTYPE *DiscardEdit )( 
            IShellImageData * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetEncoderParams )( 
            IShellImageData * This,
            /* [in] */ IPropertyBag *pbagEnc);
        
        HRESULT ( STDMETHODCALLTYPE *DisplayName )( 
            IShellImageData * This,
            /* [size_is][out][in] */ LPWSTR wszName,
            /* [in] */ UINT cch);
        
        HRESULT ( STDMETHODCALLTYPE *GetResolution )( 
            IShellImageData * This,
            /* [out] */ ULONG *puResolutionX,
            /* [out] */ ULONG *puResolutionY);
        
        HRESULT ( STDMETHODCALLTYPE *GetEncoderParams )( 
            IShellImageData * This,
            /* [in] */ GUID *pguidFmt,
            /* [out] */ EncoderParameters **ppEncParams);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterAbort )( 
            IShellImageData * This,
            /* [in] */ IShellImageDataAbort *pAbort,
            /* [out] */ IShellImageDataAbort **ppAbortPrev);
        
        HRESULT ( STDMETHODCALLTYPE *CloneFrame )( 
            IShellImageData * This,
            /* [out] */ Image **ppImg);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceFrame )( 
            IShellImageData * This,
            /* [in] */ Image *pImg);
        
        END_INTERFACE
    } IShellImageDataVtbl;

    interface IShellImageData
    {
        CONST_VTBL struct IShellImageDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IShellImageData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IShellImageData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IShellImageData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IShellImageData_Decode(This,dwFlags,cxDesired,cyDesired)	\
    ( (This)->lpVtbl -> Decode(This,dwFlags,cxDesired,cyDesired) ) 

#define IShellImageData_Draw(This,hdc,prcDest,prcSrc)	\
    ( (This)->lpVtbl -> Draw(This,hdc,prcDest,prcSrc) ) 

#define IShellImageData_NextFrame(This)	\
    ( (This)->lpVtbl -> NextFrame(This) ) 

#define IShellImageData_NextPage(This)	\
    ( (This)->lpVtbl -> NextPage(This) ) 

#define IShellImageData_PrevPage(This)	\
    ( (This)->lpVtbl -> PrevPage(This) ) 

#define IShellImageData_IsTransparent(This)	\
    ( (This)->lpVtbl -> IsTransparent(This) ) 

#define IShellImageData_IsAnimated(This)	\
    ( (This)->lpVtbl -> IsAnimated(This) ) 

#define IShellImageData_IsVector(This)	\
    ( (This)->lpVtbl -> IsVector(This) ) 

#define IShellImageData_IsMultipage(This)	\
    ( (This)->lpVtbl -> IsMultipage(This) ) 

#define IShellImageData_IsEditable(This)	\
    ( (This)->lpVtbl -> IsEditable(This) ) 

#define IShellImageData_IsPrintable(This)	\
    ( (This)->lpVtbl -> IsPrintable(This) ) 

#define IShellImageData_IsDecoded(This)	\
    ( (This)->lpVtbl -> IsDecoded(This) ) 

#define IShellImageData_GetCurrentPage(This,pnPage)	\
    ( (This)->lpVtbl -> GetCurrentPage(This,pnPage) ) 

#define IShellImageData_GetPageCount(This,pcPages)	\
    ( (This)->lpVtbl -> GetPageCount(This,pcPages) ) 

#define IShellImageData_SelectPage(This,iPage)	\
    ( (This)->lpVtbl -> SelectPage(This,iPage) ) 

#define IShellImageData_GetSize(This,pSize)	\
    ( (This)->lpVtbl -> GetSize(This,pSize) ) 

#define IShellImageData_GetRawDataFormat(This,pDataFormat)	\
    ( (This)->lpVtbl -> GetRawDataFormat(This,pDataFormat) ) 

#define IShellImageData_GetPixelFormat(This,pFormat)	\
    ( (This)->lpVtbl -> GetPixelFormat(This,pFormat) ) 

#define IShellImageData_GetDelay(This,pdwDelay)	\
    ( (This)->lpVtbl -> GetDelay(This,pdwDelay) ) 

#define IShellImageData_GetProperties(This,dwMode,ppPropSet)	\
    ( (This)->lpVtbl -> GetProperties(This,dwMode,ppPropSet) ) 

#define IShellImageData_Rotate(This,dwAngle)	\
    ( (This)->lpVtbl -> Rotate(This,dwAngle) ) 

#define IShellImageData_Scale(This,cx,cy,hints)	\
    ( (This)->lpVtbl -> Scale(This,cx,cy,hints) ) 

#define IShellImageData_DiscardEdit(This)	\
    ( (This)->lpVtbl -> DiscardEdit(This) ) 

#define IShellImageData_SetEncoderParams(This,pbagEnc)	\
    ( (This)->lpVtbl -> SetEncoderParams(This,pbagEnc) ) 

#define IShellImageData_DisplayName(This,wszName,cch)	\
    ( (This)->lpVtbl -> DisplayName(This,wszName,cch) ) 

#define IShellImageData_GetResolution(This,puResolutionX,puResolutionY)	\
    ( (This)->lpVtbl -> GetResolution(This,puResolutionX,puResolutionY) ) 

#define IShellImageData_GetEncoderParams(This,pguidFmt,ppEncParams)	\
    ( (This)->lpVtbl -> GetEncoderParams(This,pguidFmt,ppEncParams) ) 

#define IShellImageData_RegisterAbort(This,pAbort,ppAbortPrev)	\
    ( (This)->lpVtbl -> RegisterAbort(This,pAbort,ppAbortPrev) ) 

#define IShellImageData_CloneFrame(This,ppImg)	\
    ( (This)->lpVtbl -> CloneFrame(This,ppImg) ) 

#define IShellImageData_ReplaceFrame(This,pImg)	\
    ( (This)->lpVtbl -> ReplaceFrame(This,pImg) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IShellImageData_INTERFACE_DEFINED__ */


#ifndef __IShellImageDataAbort_INTERFACE_DEFINED__
#define __IShellImageDataAbort_INTERFACE_DEFINED__

/* interface IShellImageDataAbort */
/* [unique][object][uuid][helpstring] */ 


EXTERN_C const IID IID_IShellImageDataAbort;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53fb8e58-50c0-4003-b4aa-0c8df28e7f3a")
    IShellImageDataAbort : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryAbort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IShellImageDataAbortVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IShellImageDataAbort * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IShellImageDataAbort * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IShellImageDataAbort * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryAbort )( 
            IShellImageDataAbort * This);
        
        END_INTERFACE
    } IShellImageDataAbortVtbl;

    interface IShellImageDataAbort
    {
        CONST_VTBL struct IShellImageDataAbortVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IShellImageDataAbort_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IShellImageDataAbort_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IShellImageDataAbort_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IShellImageDataAbort_QueryAbort(This)	\
    ( (This)->lpVtbl -> QueryAbort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IShellImageDataAbort_INTERFACE_DEFINED__ */



#ifndef __ShellImageData_LIBRARY_DEFINED__
#define __ShellImageData_LIBRARY_DEFINED__

/* library ShellImageData */
/* [version][lcid][helpstring][uuid] */ 


EXTERN_C const IID LIBID_ShellImageData;

EXTERN_C const CLSID CLSID_ShellImageDataFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("66e4e4fb-f385-4dd0-8d74-a2efd1bc6178")
ShellImageDataFactory;
#endif
#endif /* __ShellImageData_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\simpdc.h ===
/* Microsoft Corporation Copyright 1999 */
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


/* File created by MIDL compiler version 3.03.0110 */
/* at Tue Aug 25 10:20:38 1998
 */
/* Compiler settings for S:\zen\ocp.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32, ms_ext, c_ext
    error checks: none
*/
//@@MIDL_FILE_HEADING(  )


#ifndef I_SIMPDC_H_
#define I_SIMPDC_H_

/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifdef __cplusplus
extern "C"{
#endif 

/* Forward Declarations */ 

#ifndef __ISimpleDataConverter_FWD_DEFINED__
#define __ISimpleDataConverter_FWD_DEFINED__
typedef interface ISimpleDataConverter ISimpleDataConverter;
#endif 	/* __ISimpleDataConverter_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 


#ifndef __ISimpleDataConverter_INTERFACE_DEFINED__
#define __ISimpleDataConverter_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ISimpleDataConverter
 * at Tue Aug 25 10:20:38 1998
 * using MIDL 3.03.0110
 ****************************************/
/* [hidden][helpcontext][unique][uuid][object] */ 



DEFINE_GUID(IID_ISimpleDataConverter,0x78667670,0x3C3D,0x11d2,0x91,0xF9,0x00,0x60,0x97,0xC9,0x7F,0x9B);

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("78667670-3C3D-11d2-91F9-006097C97F9B")
    ISimpleDataConverter : public IUnknown
    {
    public:
        virtual /* [helpcontext] */ HRESULT STDMETHODCALLTYPE ConvertData( 
            VARIANT varSrc,
            long vtDest,
            IUnknown __RPC_FAR *pUnknownElement,
            VARIANT __RPC_FAR *pvarDest) = 0;
        
        virtual /* [helpcontext] */ HRESULT STDMETHODCALLTYPE CanConvertData( 
            long vt1,
            long vt2) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimpleDataConverterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISimpleDataConverter __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISimpleDataConverter __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISimpleDataConverter __RPC_FAR * This);
        
        /* [helpcontext] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ConvertData )( 
            ISimpleDataConverter __RPC_FAR * This,
            VARIANT varSrc,
            long vtDest,
            IUnknown __RPC_FAR *pUnknownElement,
            VARIANT __RPC_FAR *pvarDest);
        
        /* [helpcontext] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CanConvertData )( 
            ISimpleDataConverter __RPC_FAR * This,
            long vt1,
            long vt2);
        
        END_INTERFACE
    } ISimpleDataConverterVtbl;

    interface ISimpleDataConverter
    {
        CONST_VTBL struct ISimpleDataConverterVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimpleDataConverter_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISimpleDataConverter_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISimpleDataConverter_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISimpleDataConverter_ConvertData(This,varSrc,vtDest,pUnknownElement,pvarDest)	\
    (This)->lpVtbl -> ConvertData(This,varSrc,vtDest,pUnknownElement,pvarDest)

#define ISimpleDataConverter_CanConvertData(This,vt1,vt2)	\
    (This)->lpVtbl -> CanConvertData(This,vt1,vt2)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext] */ HRESULT STDMETHODCALLTYPE ISimpleDataConverter_ConvertData_Proxy( 
    ISimpleDataConverter __RPC_FAR * This,
    VARIANT varSrc,
    long vtDest,
    IUnknown __RPC_FAR *pUnknownElement,
    VARIANT __RPC_FAR *pvarDest);


void __RPC_STUB ISimpleDataConverter_ConvertData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext] */ HRESULT STDMETHODCALLTYPE ISimpleDataConverter_CanConvertData_Proxy( 
    ISimpleDataConverter __RPC_FAR * This,
    long vt1,
    long vt2);


void __RPC_STUB ISimpleDataConverter_CanConvertData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISimpleDataConverter_INTERFACE_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif I_SIMPDC_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\ShObjIdl.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for shobjidl.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __shobjidl_h__
#define __shobjidl_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IContextMenu_FWD_DEFINED__
#define __IContextMenu_FWD_DEFINED__
typedef interface IContextMenu IContextMenu;
#endif 	/* __IContextMenu_FWD_DEFINED__ */


#ifndef __IContextMenu2_FWD_DEFINED__
#define __IContextMenu2_FWD_DEFINED__
typedef interface IContextMenu2 IContextMenu2;
#endif 	/* __IContextMenu2_FWD_DEFINED__ */


#ifndef __IContextMenu3_FWD_DEFINED__
#define __IContextMenu3_FWD_DEFINED__
typedef interface IContextMenu3 IContextMenu3;
#endif 	/* __IContextMenu3_FWD_DEFINED__ */


#ifndef __IPersistFolder_FWD_DEFINED__
#define __IPersistFolder_FWD_DEFINED__
typedef interface IPersistFolder IPersistFolder;
#endif 	/* __IPersistFolder_FWD_DEFINED__ */


#ifndef __IRunnableTask_FWD_DEFINED__
#define __IRunnableTask_FWD_DEFINED__
typedef interface IRunnableTask IRunnableTask;
#endif 	/* __IRunnableTask_FWD_DEFINED__ */


#ifndef __IShellTaskScheduler_FWD_DEFINED__
#define __IShellTaskScheduler_FWD_DEFINED__
typedef interface IShellTaskScheduler IShellTaskScheduler;
#endif 	/* __IShellTaskScheduler_FWD_DEFINED__ */


#ifndef __IPersistFolder2_FWD_DEFINED__
#define __IPersistFolder2_FWD_DEFINED__
typedef interface IPersistFolder2 IPersistFolder2;
#endif 	/* __IPersistFolder2_FWD_DEFINED__ */


#ifndef __IPersistFolder3_FWD_DEFINED__
#define __IPersistFolder3_FWD_DEFINED__
typedef interface IPersistFolder3 IPersistFolder3;
#endif 	/* __IPersistFolder3_FWD_DEFINED__ */


#ifndef __IPersistIDList_FWD_DEFINED__
#define __IPersistIDList_FWD_DEFINED__
typedef interface IPersistIDList IPersistIDList;
#endif 	/* __IPersistIDList_FWD_DEFINED__ */


#ifndef __IEnumIDList_FWD_DEFINED__
#define __IEnumIDList_FWD_DEFINED__
typedef interface IEnumIDList IEnumIDList;
#endif 	/* __IEnumIDList_FWD_DEFINED__ */


#ifndef __IEnumFullIDList_FWD_DEFINED__
#define __IEnumFullIDList_FWD_DEFINED__
typedef interface IEnumFullIDList IEnumFullIDList;
#endif 	/* __IEnumFullIDList_FWD_DEFINED__ */


#ifndef __IShellFolder_FWD_DEFINED__
#define __IShellFolder_FWD_DEFINED__
typedef interface IShellFolder IShellFolder;
#endif 	/* __IShellFolder_FWD_DEFINED__ */


#ifndef __IEnumExtraSearch_FWD_DEFINED__
#define __IEnumExtraSearch_FWD_DEFINED__
typedef interface IEnumExtraSearch IEnumExtraSearch;
#endif 	/* __IEnumExtraSearch_FWD_DEFINED__ */


#ifndef __IShellFolder2_FWD_DEFINED__
#define __IShellFolder2_FWD_DEFINED__
typedef interface IShellFolder2 IShellFolder2;
#endif 	/* __IShellFolder2_FWD_DEFINED__ */


#ifndef __IShellView_FWD_DEFINED__
#define __IShellView_FWD_DEFINED__
typedef interface IShellView IShellView;
#endif 	/* __IShellView_FWD_DEFINED__ */


#ifndef __IShellView2_FWD_DEFINED__
#define __IShellView2_FWD_DEFINED__
typedef interface IShellView2 IShellView2;
#endif 	/* __IShellView2_FWD_DEFINED__ */


#ifndef __IShellView3_FWD_DEFINED__
#define __IShellView3_FWD_DEFINED__
typedef interface IShellView3 IShellView3;
#endif 	/* __IShellView3_FWD_DEFINED__ */


#ifndef __IFolderView_FWD_DEFINED__
#define __IFolderView_FWD_DEFINED__
typedef interface IFolderView IFolderView;
#endif 	/* __IFolderView_FWD_DEFINED__ */


#ifndef __IFolderView2_FWD_DEFINED__
#define __IFolderView2_FWD_DEFINED__
typedef interface IFolderView2 IFolderView2;
#endif 	/* __IFolderView2_FWD_DEFINED__ */


#ifndef __IFolderViewSettings_FWD_DEFINED__
#define __IFolderViewSettings_FWD_DEFINED__
typedef interface IFolderViewSettings IFolderViewSettings;
#endif 	/* __IFolderViewSettings_FWD_DEFINED__ */


#ifndef __IPreviewHandlerVisuals_FWD_DEFINED__
#define __IPreviewHandlerVisuals_FWD_DEFINED__
typedef interface IPreviewHandlerVisuals IPreviewHandlerVisuals;
#endif 	/* __IPreviewHandlerVisuals_FWD_DEFINED__ */


#ifndef __IVisualProperties_FWD_DEFINED__
#define __IVisualProperties_FWD_DEFINED__
typedef interface IVisualProperties IVisualProperties;
#endif 	/* __IVisualProperties_FWD_DEFINED__ */


#ifndef __ICommDlgBrowser_FWD_DEFINED__
#define __ICommDlgBrowser_FWD_DEFINED__
typedef interface ICommDlgBrowser ICommDlgBrowser;
#endif 	/* __ICommDlgBrowser_FWD_DEFINED__ */


#ifndef __ICommDlgBrowser2_FWD_DEFINED__
#define __ICommDlgBrowser2_FWD_DEFINED__
typedef interface ICommDlgBrowser2 ICommDlgBrowser2;
#endif 	/* __ICommDlgBrowser2_FWD_DEFINED__ */


#ifndef __ICommDlgBrowser3_FWD_DEFINED__
#define __ICommDlgBrowser3_FWD_DEFINED__
typedef interface ICommDlgBrowser3 ICommDlgBrowser3;
#endif 	/* __ICommDlgBrowser3_FWD_DEFINED__ */


#ifndef __IColumnManager_FWD_DEFINED__
#define __IColumnManager_FWD_DEFINED__
typedef interface IColumnManager IColumnManager;
#endif 	/* __IColumnManager_FWD_DEFINED__ */


#ifndef __IFolderFilterSite_FWD_DEFINED__
#define __IFolderFilterSite_FWD_DEFINED__
typedef interface IFolderFilterSite IFolderFilterSite;
#endif 	/* __IFolderFilterSite_FWD_DEFINED__ */


#ifndef __IFolderFilter_FWD_DEFINED__
#define __IFolderFilter_FWD_DEFINED__
typedef interface IFolderFilter IFolderFilter;
#endif 	/* __IFolderFilter_FWD_DEFINED__ */


#ifndef __IInputObjectSite_FWD_DEFINED__
#define __IInputObjectSite_FWD_DEFINED__
typedef interface IInputObjectSite IInputObjectSite;
#endif 	/* __IInputObjectSite_FWD_DEFINED__ */


#ifndef __IInputObject_FWD_DEFINED__
#define __IInputObject_FWD_DEFINED__
typedef interface IInputObject IInputObject;
#endif 	/* __IInputObject_FWD_DEFINED__ */


#ifndef __IInputObject2_FWD_DEFINED__
#define __IInputObject2_FWD_DEFINED__
typedef interface IInputObject2 IInputObject2;
#endif 	/* __IInputObject2_FWD_DEFINED__ */


#ifndef __IShellIcon_FWD_DEFINED__
#define __IShellIcon_FWD_DEFINED__
typedef interface IShellIcon IShellIcon;
#endif 	/* __IShellIcon_FWD_DEFINED__ */


#ifndef __IShellBrowser_FWD_DEFINED__
#define __IShellBrowser_FWD_DEFINED__
typedef interface IShellBrowser IShellBrowser;
#endif 	/* __IShellBrowser_FWD_DEFINED__ */


#ifndef __IProfferService_FWD_DEFINED__
#define __IProfferService_FWD_DEFINED__
typedef interface IProfferService IProfferService;
#endif 	/* __IProfferService_FWD_DEFINED__ */


#ifndef __IShellItem_FWD_DEFINED__
#define __IShellItem_FWD_DEFINED__
typedef interface IShellItem IShellItem;
#endif 	/* __IShellItem_FWD_DEFINED__ */


#ifndef __IShellItem2_FWD_DEFINED__
#define __IShellItem2_FWD_DEFINED__
typedef interface IShellItem2 IShellItem2;
#endif 	/* __IShellItem2_FWD_DEFINED__ */


#ifndef __IShellItemImageFactory_FWD_DEFINED__
#define __IShellItemImageFactory_FWD_DEFINED__
typedef interface IShellItemImageFactory IShellItemImageFactory;
#endif 	/* __IShellItemImageFactory_FWD_DEFINED__ */


#ifndef __IEnumShellItems_FWD_DEFINED__
#define __IEnumShellItems_FWD_DEFINED__
typedef interface IEnumShellItems IEnumShellItems;
#endif 	/* __IEnumShellItems_FWD_DEFINED__ */


#ifndef __ITransferAdviseSink_FWD_DEFINED__
#define __ITransferAdviseSink_FWD_DEFINED__
typedef interface ITransferAdviseSink ITransferAdviseSink;
#endif 	/* __ITransferAdviseSink_FWD_DEFINED__ */


#ifndef __ITransferSource_FWD_DEFINED__
#define __ITransferSource_FWD_DEFINED__
typedef interface ITransferSource ITransferSource;
#endif 	/* __ITransferSource_FWD_DEFINED__ */


#ifndef __IEnumResources_FWD_DEFINED__
#define __IEnumResources_FWD_DEFINED__
typedef interface IEnumResources IEnumResources;
#endif 	/* __IEnumResources_FWD_DEFINED__ */


#ifndef __IShellItemResources_FWD_DEFINED__
#define __IShellItemResources_FWD_DEFINED__
typedef interface IShellItemResources IShellItemResources;
#endif 	/* __IShellItemResources_FWD_DEFINED__ */


#ifndef __ITransferDestination_FWD_DEFINED__
#define __ITransferDestination_FWD_DEFINED__
typedef interface ITransferDestination ITransferDestination;
#endif 	/* __ITransferDestination_FWD_DEFINED__ */


#ifndef __IStreamAsync_FWD_DEFINED__
#define __IStreamAsync_FWD_DEFINED__
typedef interface IStreamAsync IStreamAsync;
#endif 	/* __IStreamAsync_FWD_DEFINED__ */


#ifndef __IStreamUnbufferedInfo_FWD_DEFINED__
#define __IStreamUnbufferedInfo_FWD_DEFINED__
typedef interface IStreamUnbufferedInfo IStreamUnbufferedInfo;
#endif 	/* __IStreamUnbufferedInfo_FWD_DEFINED__ */


#ifndef __IFileOperationProgressSink_FWD_DEFINED__
#define __IFileOperationProgressSink_FWD_DEFINED__
typedef interface IFileOperationProgressSink IFileOperationProgressSink;
#endif 	/* __IFileOperationProgressSink_FWD_DEFINED__ */


#ifndef __IShellItemArray_FWD_DEFINED__
#define __IShellItemArray_FWD_DEFINED__
typedef interface IShellItemArray IShellItemArray;
#endif 	/* __IShellItemArray_FWD_DEFINED__ */


#ifndef __IInitializeWithItem_FWD_DEFINED__
#define __IInitializeWithItem_FWD_DEFINED__
typedef interface IInitializeWithItem IInitializeWithItem;
#endif 	/* __IInitializeWithItem_FWD_DEFINED__ */


#ifndef __IPropertyUI_FWD_DEFINED__
#define __IPropertyUI_FWD_DEFINED__
typedef interface IPropertyUI IPropertyUI;
#endif 	/* __IPropertyUI_FWD_DEFINED__ */


#ifndef __ICategoryProvider_FWD_DEFINED__
#define __ICategoryProvider_FWD_DEFINED__
typedef interface ICategoryProvider ICategoryProvider;
#endif 	/* __ICategoryProvider_FWD_DEFINED__ */


#ifndef __ICategorizer_FWD_DEFINED__
#define __ICategorizer_FWD_DEFINED__
typedef interface ICategorizer ICategorizer;
#endif 	/* __ICategorizer_FWD_DEFINED__ */


#ifndef __IDropTargetHelper_FWD_DEFINED__
#define __IDropTargetHelper_FWD_DEFINED__
typedef interface IDropTargetHelper IDropTargetHelper;
#endif 	/* __IDropTargetHelper_FWD_DEFINED__ */


#ifndef __IDragSourceHelper_FWD_DEFINED__
#define __IDragSourceHelper_FWD_DEFINED__
typedef interface IDragSourceHelper IDragSourceHelper;
#endif 	/* __IDragSourceHelper_FWD_DEFINED__ */


#ifndef __IDragSourceHelper2_FWD_DEFINED__
#define __IDragSourceHelper2_FWD_DEFINED__
typedef interface IDragSourceHelper2 IDragSourceHelper2;
#endif 	/* __IDragSourceHelper2_FWD_DEFINED__ */


#ifndef __IShellLinkA_FWD_DEFINED__
#define __IShellLinkA_FWD_DEFINED__
typedef interface IShellLinkA IShellLinkA;
#endif 	/* __IShellLinkA_FWD_DEFINED__ */


#ifndef __IShellLinkW_FWD_DEFINED__
#define __IShellLinkW_FWD_DEFINED__
typedef interface IShellLinkW IShellLinkW;
#endif 	/* __IShellLinkW_FWD_DEFINED__ */


#ifndef __IShellLinkDataList_FWD_DEFINED__
#define __IShellLinkDataList_FWD_DEFINED__
typedef interface IShellLinkDataList IShellLinkDataList;
#endif 	/* __IShellLinkDataList_FWD_DEFINED__ */


#ifndef __IResolveShellLink_FWD_DEFINED__
#define __IResolveShellLink_FWD_DEFINED__
typedef interface IResolveShellLink IResolveShellLink;
#endif 	/* __IResolveShellLink_FWD_DEFINED__ */


#ifndef __IActionProgressDialog_FWD_DEFINED__
#define __IActionProgressDialog_FWD_DEFINED__
typedef interface IActionProgressDialog IActionProgressDialog;
#endif 	/* __IActionProgressDialog_FWD_DEFINED__ */


#ifndef __IHWEventHandler_FWD_DEFINED__
#define __IHWEventHandler_FWD_DEFINED__
typedef interface IHWEventHandler IHWEventHandler;
#endif 	/* __IHWEventHandler_FWD_DEFINED__ */


#ifndef __IHWEventHandler2_FWD_DEFINED__
#define __IHWEventHandler2_FWD_DEFINED__
typedef interface IHWEventHandler2 IHWEventHandler2;
#endif 	/* __IHWEventHandler2_FWD_DEFINED__ */


#ifndef __IQueryCancelAutoPlay_FWD_DEFINED__
#define __IQueryCancelAutoPlay_FWD_DEFINED__
typedef interface IQueryCancelAutoPlay IQueryCancelAutoPlay;
#endif 	/* __IQueryCancelAutoPlay_FWD_DEFINED__ */


#ifndef __IDynamicHWHandler_FWD_DEFINED__
#define __IDynamicHWHandler_FWD_DEFINED__
typedef interface IDynamicHWHandler IDynamicHWHandler;
#endif 	/* __IDynamicHWHandler_FWD_DEFINED__ */


#ifndef __IActionProgress_FWD_DEFINED__
#define __IActionProgress_FWD_DEFINED__
typedef interface IActionProgress IActionProgress;
#endif 	/* __IActionProgress_FWD_DEFINED__ */


#ifndef __IShellExtInit_FWD_DEFINED__
#define __IShellExtInit_FWD_DEFINED__
typedef interface IShellExtInit IShellExtInit;
#endif 	/* __IShellExtInit_FWD_DEFINED__ */


#ifndef __IShellPropSheetExt_FWD_DEFINED__
#define __IShellPropSheetExt_FWD_DEFINED__
typedef interface IShellPropSheetExt IShellPropSheetExt;
#endif 	/* __IShellPropSheetExt_FWD_DEFINED__ */


#ifndef __IRemoteComputer_FWD_DEFINED__
#define __IRemoteComputer_FWD_DEFINED__
typedef interface IRemoteComputer IRemoteComputer;
#endif 	/* __IRemoteComputer_FWD_DEFINED__ */


#ifndef __IQueryContinue_FWD_DEFINED__
#define __IQueryContinue_FWD_DEFINED__
typedef interface IQueryContinue IQueryContinue;
#endif 	/* __IQueryContinue_FWD_DEFINED__ */


#ifndef __IUserNotification_FWD_DEFINED__
#define __IUserNotification_FWD_DEFINED__
typedef interface IUserNotification IUserNotification;
#endif 	/* __IUserNotification_FWD_DEFINED__ */


#ifndef __IUserNotificationCallback_FWD_DEFINED__
#define __IUserNotificationCallback_FWD_DEFINED__
typedef interface IUserNotificationCallback IUserNotificationCallback;
#endif 	/* __IUserNotificationCallback_FWD_DEFINED__ */


#ifndef __IUserNotification2_FWD_DEFINED__
#define __IUserNotification2_FWD_DEFINED__
typedef interface IUserNotification2 IUserNotification2;
#endif 	/* __IUserNotification2_FWD_DEFINED__ */


#ifndef __IItemNameLimits_FWD_DEFINED__
#define __IItemNameLimits_FWD_DEFINED__
typedef interface IItemNameLimits IItemNameLimits;
#endif 	/* __IItemNameLimits_FWD_DEFINED__ */


#ifndef __ISearchFolderItemFactory_FWD_DEFINED__
#define __ISearchFolderItemFactory_FWD_DEFINED__
typedef interface ISearchFolderItemFactory ISearchFolderItemFactory;
#endif 	/* __ISearchFolderItemFactory_FWD_DEFINED__ */


#ifndef __IExtractImage_FWD_DEFINED__
#define __IExtractImage_FWD_DEFINED__
typedef interface IExtractImage IExtractImage;
#endif 	/* __IExtractImage_FWD_DEFINED__ */


#ifndef __IExtractImage2_FWD_DEFINED__
#define __IExtractImage2_FWD_DEFINED__
typedef interface IExtractImage2 IExtractImage2;
#endif 	/* __IExtractImage2_FWD_DEFINED__ */


#ifndef __IThumbnailHandlerFactory_FWD_DEFINED__
#define __IThumbnailHandlerFactory_FWD_DEFINED__
typedef interface IThumbnailHandlerFactory IThumbnailHandlerFactory;
#endif 	/* __IThumbnailHandlerFactory_FWD_DEFINED__ */


#ifndef __IParentAndItem_FWD_DEFINED__
#define __IParentAndItem_FWD_DEFINED__
typedef interface IParentAndItem IParentAndItem;
#endif 	/* __IParentAndItem_FWD_DEFINED__ */


#ifndef __IDockingWindow_FWD_DEFINED__
#define __IDockingWindow_FWD_DEFINED__
typedef interface IDockingWindow IDockingWindow;
#endif 	/* __IDockingWindow_FWD_DEFINED__ */


#ifndef __IDeskBand_FWD_DEFINED__
#define __IDeskBand_FWD_DEFINED__
typedef interface IDeskBand IDeskBand;
#endif 	/* __IDeskBand_FWD_DEFINED__ */


#ifndef __IDeskBandInfo_FWD_DEFINED__
#define __IDeskBandInfo_FWD_DEFINED__
typedef interface IDeskBandInfo IDeskBandInfo;
#endif 	/* __IDeskBandInfo_FWD_DEFINED__ */


#ifndef __IDeskBand2_FWD_DEFINED__
#define __IDeskBand2_FWD_DEFINED__
typedef interface IDeskBand2 IDeskBand2;
#endif 	/* __IDeskBand2_FWD_DEFINED__ */


#ifndef __ITaskbarList_FWD_DEFINED__
#define __ITaskbarList_FWD_DEFINED__
typedef interface ITaskbarList ITaskbarList;
#endif 	/* __ITaskbarList_FWD_DEFINED__ */


#ifndef __ITaskbarList2_FWD_DEFINED__
#define __ITaskbarList2_FWD_DEFINED__
typedef interface ITaskbarList2 ITaskbarList2;
#endif 	/* __ITaskbarList2_FWD_DEFINED__ */


#ifndef __IStartMenuPinnedList_FWD_DEFINED__
#define __IStartMenuPinnedList_FWD_DEFINED__
typedef interface IStartMenuPinnedList IStartMenuPinnedList;
#endif 	/* __IStartMenuPinnedList_FWD_DEFINED__ */


#ifndef __ICDBurn_FWD_DEFINED__
#define __ICDBurn_FWD_DEFINED__
typedef interface ICDBurn ICDBurn;
#endif 	/* __ICDBurn_FWD_DEFINED__ */


#ifndef __IWizardSite_FWD_DEFINED__
#define __IWizardSite_FWD_DEFINED__
typedef interface IWizardSite IWizardSite;
#endif 	/* __IWizardSite_FWD_DEFINED__ */


#ifndef __IWizardExtension_FWD_DEFINED__
#define __IWizardExtension_FWD_DEFINED__
typedef interface IWizardExtension IWizardExtension;
#endif 	/* __IWizardExtension_FWD_DEFINED__ */


#ifndef __IWebWizardExtension_FWD_DEFINED__
#define __IWebWizardExtension_FWD_DEFINED__
typedef interface IWebWizardExtension IWebWizardExtension;
#endif 	/* __IWebWizardExtension_FWD_DEFINED__ */


#ifndef __IPublishingWizard_FWD_DEFINED__
#define __IPublishingWizard_FWD_DEFINED__
typedef interface IPublishingWizard IPublishingWizard;
#endif 	/* __IPublishingWizard_FWD_DEFINED__ */


#ifndef __IFolderViewHost_FWD_DEFINED__
#define __IFolderViewHost_FWD_DEFINED__
typedef interface IFolderViewHost IFolderViewHost;
#endif 	/* __IFolderViewHost_FWD_DEFINED__ */


#ifndef __IExplorerBrowserEvents_FWD_DEFINED__
#define __IExplorerBrowserEvents_FWD_DEFINED__
typedef interface IExplorerBrowserEvents IExplorerBrowserEvents;
#endif 	/* __IExplorerBrowserEvents_FWD_DEFINED__ */


#ifndef __IExplorerBrowser_FWD_DEFINED__
#define __IExplorerBrowser_FWD_DEFINED__
typedef interface IExplorerBrowser IExplorerBrowser;
#endif 	/* __IExplorerBrowser_FWD_DEFINED__ */


#ifndef __IAccessibleObject_FWD_DEFINED__
#define __IAccessibleObject_FWD_DEFINED__
typedef interface IAccessibleObject IAccessibleObject;
#endif 	/* __IAccessibleObject_FWD_DEFINED__ */


#ifndef __IResultsFolder_FWD_DEFINED__
#define __IResultsFolder_FWD_DEFINED__
typedef interface IResultsFolder IResultsFolder;
#endif 	/* __IResultsFolder_FWD_DEFINED__ */


#ifndef __IEnumObjects_FWD_DEFINED__
#define __IEnumObjects_FWD_DEFINED__
typedef interface IEnumObjects IEnumObjects;
#endif 	/* __IEnumObjects_FWD_DEFINED__ */


#ifndef __IOperationsProgressDialog_FWD_DEFINED__
#define __IOperationsProgressDialog_FWD_DEFINED__
typedef interface IOperationsProgressDialog IOperationsProgressDialog;
#endif 	/* __IOperationsProgressDialog_FWD_DEFINED__ */


#ifndef __IOperationsUpdateProgress_FWD_DEFINED__
#define __IOperationsUpdateProgress_FWD_DEFINED__
typedef interface IOperationsUpdateProgress IOperationsUpdateProgress;
#endif 	/* __IOperationsUpdateProgress_FWD_DEFINED__ */


#ifndef __IIOCancelInformation_FWD_DEFINED__
#define __IIOCancelInformation_FWD_DEFINED__
typedef interface IIOCancelInformation IIOCancelInformation;
#endif 	/* __IIOCancelInformation_FWD_DEFINED__ */


#ifndef __IFileOperation_FWD_DEFINED__
#define __IFileOperation_FWD_DEFINED__
typedef interface IFileOperation IFileOperation;
#endif 	/* __IFileOperation_FWD_DEFINED__ */


#ifndef __IObjectProvider_FWD_DEFINED__
#define __IObjectProvider_FWD_DEFINED__
typedef interface IObjectProvider IObjectProvider;
#endif 	/* __IObjectProvider_FWD_DEFINED__ */


#ifndef __INamespaceWalkCB_FWD_DEFINED__
#define __INamespaceWalkCB_FWD_DEFINED__
typedef interface INamespaceWalkCB INamespaceWalkCB;
#endif 	/* __INamespaceWalkCB_FWD_DEFINED__ */


#ifndef __INamespaceWalkCB2_FWD_DEFINED__
#define __INamespaceWalkCB2_FWD_DEFINED__
typedef interface INamespaceWalkCB2 INamespaceWalkCB2;
#endif 	/* __INamespaceWalkCB2_FWD_DEFINED__ */


#ifndef __INamespaceWalk_FWD_DEFINED__
#define __INamespaceWalk_FWD_DEFINED__
typedef interface INamespaceWalk INamespaceWalk;
#endif 	/* __INamespaceWalk_FWD_DEFINED__ */


#ifndef __IAutoCompleteDropDown_FWD_DEFINED__
#define __IAutoCompleteDropDown_FWD_DEFINED__
typedef interface IAutoCompleteDropDown IAutoCompleteDropDown;
#endif 	/* __IAutoCompleteDropDown_FWD_DEFINED__ */


#ifndef __IBandSite_FWD_DEFINED__
#define __IBandSite_FWD_DEFINED__
typedef interface IBandSite IBandSite;
#endif 	/* __IBandSite_FWD_DEFINED__ */


#ifndef __IModalWindow_FWD_DEFINED__
#define __IModalWindow_FWD_DEFINED__
typedef interface IModalWindow IModalWindow;
#endif 	/* __IModalWindow_FWD_DEFINED__ */


#ifndef __ICDBurnExt_FWD_DEFINED__
#define __ICDBurnExt_FWD_DEFINED__
typedef interface ICDBurnExt ICDBurnExt;
#endif 	/* __ICDBurnExt_FWD_DEFINED__ */


#ifndef __IContextMenuSite_FWD_DEFINED__
#define __IContextMenuSite_FWD_DEFINED__
typedef interface IContextMenuSite IContextMenuSite;
#endif 	/* __IContextMenuSite_FWD_DEFINED__ */


#ifndef __IEnumReadyCallback_FWD_DEFINED__
#define __IEnumReadyCallback_FWD_DEFINED__
typedef interface IEnumReadyCallback IEnumReadyCallback;
#endif 	/* __IEnumReadyCallback_FWD_DEFINED__ */


#ifndef __IEnumerableView_FWD_DEFINED__
#define __IEnumerableView_FWD_DEFINED__
typedef interface IEnumerableView IEnumerableView;
#endif 	/* __IEnumerableView_FWD_DEFINED__ */


#ifndef __IInsertItem_FWD_DEFINED__
#define __IInsertItem_FWD_DEFINED__
typedef interface IInsertItem IInsertItem;
#endif 	/* __IInsertItem_FWD_DEFINED__ */


#ifndef __IMenuBand_FWD_DEFINED__
#define __IMenuBand_FWD_DEFINED__
typedef interface IMenuBand IMenuBand;
#endif 	/* __IMenuBand_FWD_DEFINED__ */


#ifndef __IFolderBandPriv_FWD_DEFINED__
#define __IFolderBandPriv_FWD_DEFINED__
typedef interface IFolderBandPriv IFolderBandPriv;
#endif 	/* __IFolderBandPriv_FWD_DEFINED__ */


#ifndef __IRegTreeItem_FWD_DEFINED__
#define __IRegTreeItem_FWD_DEFINED__
typedef interface IRegTreeItem IRegTreeItem;
#endif 	/* __IRegTreeItem_FWD_DEFINED__ */


#ifndef __IImageRecompress_FWD_DEFINED__
#define __IImageRecompress_FWD_DEFINED__
typedef interface IImageRecompress IImageRecompress;
#endif 	/* __IImageRecompress_FWD_DEFINED__ */


#ifndef __IDeskBar_FWD_DEFINED__
#define __IDeskBar_FWD_DEFINED__
typedef interface IDeskBar IDeskBar;
#endif 	/* __IDeskBar_FWD_DEFINED__ */


#ifndef __IMenuPopup_FWD_DEFINED__
#define __IMenuPopup_FWD_DEFINED__
typedef interface IMenuPopup IMenuPopup;
#endif 	/* __IMenuPopup_FWD_DEFINED__ */


#ifndef __IFileIsInUse_FWD_DEFINED__
#define __IFileIsInUse_FWD_DEFINED__
typedef interface IFileIsInUse IFileIsInUse;
#endif 	/* __IFileIsInUse_FWD_DEFINED__ */


#ifndef __IFileDialogEvents_FWD_DEFINED__
#define __IFileDialogEvents_FWD_DEFINED__
typedef interface IFileDialogEvents IFileDialogEvents;
#endif 	/* __IFileDialogEvents_FWD_DEFINED__ */


#ifndef __IFileDialog_FWD_DEFINED__
#define __IFileDialog_FWD_DEFINED__
typedef interface IFileDialog IFileDialog;
#endif 	/* __IFileDialog_FWD_DEFINED__ */


#ifndef __IFileSaveDialog_FWD_DEFINED__
#define __IFileSaveDialog_FWD_DEFINED__
typedef interface IFileSaveDialog IFileSaveDialog;
#endif 	/* __IFileSaveDialog_FWD_DEFINED__ */


#ifndef __IFileOpenDialog_FWD_DEFINED__
#define __IFileOpenDialog_FWD_DEFINED__
typedef interface IFileOpenDialog IFileOpenDialog;
#endif 	/* __IFileOpenDialog_FWD_DEFINED__ */


#ifndef __IFileDialogCustomize_FWD_DEFINED__
#define __IFileDialogCustomize_FWD_DEFINED__
typedef interface IFileDialogCustomize IFileDialogCustomize;
#endif 	/* __IFileDialogCustomize_FWD_DEFINED__ */


#ifndef __IFileDialogControlEvents_FWD_DEFINED__
#define __IFileDialogControlEvents_FWD_DEFINED__
typedef interface IFileDialogControlEvents IFileDialogControlEvents;
#endif 	/* __IFileDialogControlEvents_FWD_DEFINED__ */


#ifndef __IApplicationAssociationRegistration_FWD_DEFINED__
#define __IApplicationAssociationRegistration_FWD_DEFINED__
typedef interface IApplicationAssociationRegistration IApplicationAssociationRegistration;
#endif 	/* __IApplicationAssociationRegistration_FWD_DEFINED__ */


#ifndef __IApplicationAssociationRegistrationUI_FWD_DEFINED__
#define __IApplicationAssociationRegistrationUI_FWD_DEFINED__
typedef interface IApplicationAssociationRegistrationUI IApplicationAssociationRegistrationUI;
#endif 	/* __IApplicationAssociationRegistrationUI_FWD_DEFINED__ */


#ifndef __IDelegateFolder_FWD_DEFINED__
#define __IDelegateFolder_FWD_DEFINED__
typedef interface IDelegateFolder IDelegateFolder;
#endif 	/* __IDelegateFolder_FWD_DEFINED__ */


#ifndef __IBrowserFrameOptions_FWD_DEFINED__
#define __IBrowserFrameOptions_FWD_DEFINED__
typedef interface IBrowserFrameOptions IBrowserFrameOptions;
#endif 	/* __IBrowserFrameOptions_FWD_DEFINED__ */


#ifndef __INewWindowManager_FWD_DEFINED__
#define __INewWindowManager_FWD_DEFINED__
typedef interface INewWindowManager INewWindowManager;
#endif 	/* __INewWindowManager_FWD_DEFINED__ */


#ifndef __IAttachmentExecute_FWD_DEFINED__
#define __IAttachmentExecute_FWD_DEFINED__
typedef interface IAttachmentExecute IAttachmentExecute;
#endif 	/* __IAttachmentExecute_FWD_DEFINED__ */


#ifndef __IShellMenuCallback_FWD_DEFINED__
#define __IShellMenuCallback_FWD_DEFINED__
typedef interface IShellMenuCallback IShellMenuCallback;
#endif 	/* __IShellMenuCallback_FWD_DEFINED__ */


#ifndef __IShellMenu_FWD_DEFINED__
#define __IShellMenu_FWD_DEFINED__
typedef interface IShellMenu IShellMenu;
#endif 	/* __IShellMenu_FWD_DEFINED__ */


#ifndef __IShellRunDll_FWD_DEFINED__
#define __IShellRunDll_FWD_DEFINED__
typedef interface IShellRunDll IShellRunDll;
#endif 	/* __IShellRunDll_FWD_DEFINED__ */


#ifndef __IKnownFolder_FWD_DEFINED__
#define __IKnownFolder_FWD_DEFINED__
typedef interface IKnownFolder IKnownFolder;
#endif 	/* __IKnownFolder_FWD_DEFINED__ */


#ifndef __IKnownFolderManager_FWD_DEFINED__
#define __IKnownFolderManager_FWD_DEFINED__
typedef interface IKnownFolderManager IKnownFolderManager;
#endif 	/* __IKnownFolderManager_FWD_DEFINED__ */


#ifndef __ISharingConfigurationManager_FWD_DEFINED__
#define __ISharingConfigurationManager_FWD_DEFINED__
typedef interface ISharingConfigurationManager ISharingConfigurationManager;
#endif 	/* __ISharingConfigurationManager_FWD_DEFINED__ */


#ifndef __IPreviousVersionsInfo_FWD_DEFINED__
#define __IPreviousVersionsInfo_FWD_DEFINED__
typedef interface IPreviousVersionsInfo IPreviousVersionsInfo;
#endif 	/* __IPreviousVersionsInfo_FWD_DEFINED__ */


#ifndef __IRelatedItem_FWD_DEFINED__
#define __IRelatedItem_FWD_DEFINED__
typedef interface IRelatedItem IRelatedItem;
#endif 	/* __IRelatedItem_FWD_DEFINED__ */


#ifndef __IIdentityName_FWD_DEFINED__
#define __IIdentityName_FWD_DEFINED__
typedef interface IIdentityName IIdentityName;
#endif 	/* __IIdentityName_FWD_DEFINED__ */


#ifndef __ICurrentItem_FWD_DEFINED__
#define __ICurrentItem_FWD_DEFINED__
typedef interface ICurrentItem ICurrentItem;
#endif 	/* __ICurrentItem_FWD_DEFINED__ */


#ifndef __ITransferMediumItem_FWD_DEFINED__
#define __ITransferMediumItem_FWD_DEFINED__
typedef interface ITransferMediumItem ITransferMediumItem;
#endif 	/* __ITransferMediumItem_FWD_DEFINED__ */


#ifndef __IUseToBrowseItem_FWD_DEFINED__
#define __IUseToBrowseItem_FWD_DEFINED__
typedef interface IUseToBrowseItem IUseToBrowseItem;
#endif 	/* __IUseToBrowseItem_FWD_DEFINED__ */


#ifndef __IDisplayItem_FWD_DEFINED__
#define __IDisplayItem_FWD_DEFINED__
typedef interface IDisplayItem IDisplayItem;
#endif 	/* __IDisplayItem_FWD_DEFINED__ */


#ifndef __IDestinationStreamFactory_FWD_DEFINED__
#define __IDestinationStreamFactory_FWD_DEFINED__
typedef interface IDestinationStreamFactory IDestinationStreamFactory;
#endif 	/* __IDestinationStreamFactory_FWD_DEFINED__ */


#ifndef __IShellItemFilter_FWD_DEFINED__
#define __IShellItemFilter_FWD_DEFINED__
typedef interface IShellItemFilter IShellItemFilter;
#endif 	/* __IShellItemFilter_FWD_DEFINED__ */


#ifndef __INameSpaceTreeControl_FWD_DEFINED__
#define __INameSpaceTreeControl_FWD_DEFINED__
typedef interface INameSpaceTreeControl INameSpaceTreeControl;
#endif 	/* __INameSpaceTreeControl_FWD_DEFINED__ */


#ifndef __INameSpaceTreeControlEvents_FWD_DEFINED__
#define __INameSpaceTreeControlEvents_FWD_DEFINED__
typedef interface INameSpaceTreeControlEvents INameSpaceTreeControlEvents;
#endif 	/* __INameSpaceTreeControlEvents_FWD_DEFINED__ */


#ifndef __INameSpaceTreeControlDropHandler_FWD_DEFINED__
#define __INameSpaceTreeControlDropHandler_FWD_DEFINED__
typedef interface INameSpaceTreeControlDropHandler INameSpaceTreeControlDropHandler;
#endif 	/* __INameSpaceTreeControlDropHandler_FWD_DEFINED__ */


#ifndef __INameSpaceTreeAccessible_FWD_DEFINED__
#define __INameSpaceTreeAccessible_FWD_DEFINED__
typedef interface INameSpaceTreeAccessible INameSpaceTreeAccessible;
#endif 	/* __INameSpaceTreeAccessible_FWD_DEFINED__ */


#ifndef __INameSpaceTreeControlCustomDraw_FWD_DEFINED__
#define __INameSpaceTreeControlCustomDraw_FWD_DEFINED__
typedef interface INameSpaceTreeControlCustomDraw INameSpaceTreeControlCustomDraw;
#endif 	/* __INameSpaceTreeControlCustomDraw_FWD_DEFINED__ */


#ifndef __IPreviewHandler_FWD_DEFINED__
#define __IPreviewHandler_FWD_DEFINED__
typedef interface IPreviewHandler IPreviewHandler;
#endif 	/* __IPreviewHandler_FWD_DEFINED__ */


#ifndef __IPreviewHandlerFrame_FWD_DEFINED__
#define __IPreviewHandlerFrame_FWD_DEFINED__
typedef interface IPreviewHandlerFrame IPreviewHandlerFrame;
#endif 	/* __IPreviewHandlerFrame_FWD_DEFINED__ */


#ifndef __ITrayDeskBand_FWD_DEFINED__
#define __ITrayDeskBand_FWD_DEFINED__
typedef interface ITrayDeskBand ITrayDeskBand;
#endif 	/* __ITrayDeskBand_FWD_DEFINED__ */


#ifndef __IBandHost_FWD_DEFINED__
#define __IBandHost_FWD_DEFINED__
typedef interface IBandHost IBandHost;
#endif 	/* __IBandHost_FWD_DEFINED__ */


#ifndef __IExplorerPaneVisibility_FWD_DEFINED__
#define __IExplorerPaneVisibility_FWD_DEFINED__
typedef interface IExplorerPaneVisibility IExplorerPaneVisibility;
#endif 	/* __IExplorerPaneVisibility_FWD_DEFINED__ */


#ifndef __IContextMenuCB_FWD_DEFINED__
#define __IContextMenuCB_FWD_DEFINED__
typedef interface IContextMenuCB IContextMenuCB;
#endif 	/* __IContextMenuCB_FWD_DEFINED__ */


#ifndef __IDefaultExtractIconInit_FWD_DEFINED__
#define __IDefaultExtractIconInit_FWD_DEFINED__
typedef interface IDefaultExtractIconInit IDefaultExtractIconInit;
#endif 	/* __IDefaultExtractIconInit_FWD_DEFINED__ */


#ifndef __IExplorerCommand_FWD_DEFINED__
#define __IExplorerCommand_FWD_DEFINED__
typedef interface IExplorerCommand IExplorerCommand;
#endif 	/* __IExplorerCommand_FWD_DEFINED__ */


#ifndef __IEnumExplorerCommand_FWD_DEFINED__
#define __IEnumExplorerCommand_FWD_DEFINED__
typedef interface IEnumExplorerCommand IEnumExplorerCommand;
#endif 	/* __IEnumExplorerCommand_FWD_DEFINED__ */


#ifndef __IExplorerCommandProvider_FWD_DEFINED__
#define __IExplorerCommandProvider_FWD_DEFINED__
typedef interface IExplorerCommandProvider IExplorerCommandProvider;
#endif 	/* __IExplorerCommandProvider_FWD_DEFINED__ */


#ifndef __IMarkupCallback_FWD_DEFINED__
#define __IMarkupCallback_FWD_DEFINED__
typedef interface IMarkupCallback IMarkupCallback;
#endif 	/* __IMarkupCallback_FWD_DEFINED__ */


#ifndef __IControlMarkup_FWD_DEFINED__
#define __IControlMarkup_FWD_DEFINED__
typedef interface IControlMarkup IControlMarkup;
#endif 	/* __IControlMarkup_FWD_DEFINED__ */


#ifndef __IInitializeNetworkFolder_FWD_DEFINED__
#define __IInitializeNetworkFolder_FWD_DEFINED__
typedef interface IInitializeNetworkFolder IInitializeNetworkFolder;
#endif 	/* __IInitializeNetworkFolder_FWD_DEFINED__ */


#ifndef __IOpenControlPanel_FWD_DEFINED__
#define __IOpenControlPanel_FWD_DEFINED__
typedef interface IOpenControlPanel IOpenControlPanel;
#endif 	/* __IOpenControlPanel_FWD_DEFINED__ */


#ifndef __ISystemCPLUpdate_FWD_DEFINED__
#define __ISystemCPLUpdate_FWD_DEFINED__
typedef interface ISystemCPLUpdate ISystemCPLUpdate;
#endif 	/* __ISystemCPLUpdate_FWD_DEFINED__ */


#ifndef __IComputerInfoAdvise_FWD_DEFINED__
#define __IComputerInfoAdvise_FWD_DEFINED__
typedef interface IComputerInfoAdvise IComputerInfoAdvise;
#endif 	/* __IComputerInfoAdvise_FWD_DEFINED__ */


#ifndef __IComputerInfoChangeNotify_FWD_DEFINED__
#define __IComputerInfoChangeNotify_FWD_DEFINED__
typedef interface IComputerInfoChangeNotify IComputerInfoChangeNotify;
#endif 	/* __IComputerInfoChangeNotify_FWD_DEFINED__ */


#ifndef __IFileSystemBindData_FWD_DEFINED__
#define __IFileSystemBindData_FWD_DEFINED__
typedef interface IFileSystemBindData IFileSystemBindData;
#endif 	/* __IFileSystemBindData_FWD_DEFINED__ */


#ifndef __IFileSystemBindData2_FWD_DEFINED__
#define __IFileSystemBindData2_FWD_DEFINED__
typedef interface IFileSystemBindData2 IFileSystemBindData2;
#endif 	/* __IFileSystemBindData2_FWD_DEFINED__ */


#ifndef __ShellDesktop_FWD_DEFINED__
#define __ShellDesktop_FWD_DEFINED__

#ifdef __cplusplus
typedef class ShellDesktop ShellDesktop;
#else
typedef struct ShellDesktop ShellDesktop;
#endif /* __cplusplus */

#endif 	/* __ShellDesktop_FWD_DEFINED__ */


#ifndef __ShellFSFolder_FWD_DEFINED__
#define __ShellFSFolder_FWD_DEFINED__

#ifdef __cplusplus
typedef class ShellFSFolder ShellFSFolder;
#else
typedef struct ShellFSFolder ShellFSFolder;
#endif /* __cplusplus */

#endif 	/* __ShellFSFolder_FWD_DEFINED__ */


#ifndef __NetworkPlaces_FWD_DEFINED__
#define __NetworkPlaces_FWD_DEFINED__

#ifdef __cplusplus
typedef class NetworkPlaces NetworkPlaces;
#else
typedef struct NetworkPlaces NetworkPlaces;
#endif /* __cplusplus */

#endif 	/* __NetworkPlaces_FWD_DEFINED__ */


#ifndef __ShellLink_FWD_DEFINED__
#define __ShellLink_FWD_DEFINED__

#ifdef __cplusplus
typedef class ShellLink ShellLink;
#else
typedef struct ShellLink ShellLink;
#endif /* __cplusplus */

#endif 	/* __ShellLink_FWD_DEFINED__ */


#ifndef __QueryCancelAutoPlay_FWD_DEFINED__
#define __QueryCancelAutoPlay_FWD_DEFINED__

#ifdef __cplusplus
typedef class QueryCancelAutoPlay QueryCancelAutoPlay;
#else
typedef struct QueryCancelAutoPlay QueryCancelAutoPlay;
#endif /* __cplusplus */

#endif 	/* __QueryCancelAutoPlay_FWD_DEFINED__ */


#ifndef __DriveSizeCategorizer_FWD_DEFINED__
#define __DriveSizeCategorizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class DriveSizeCategorizer DriveSizeCategorizer;
#else
typedef struct DriveSizeCategorizer DriveSizeCategorizer;
#endif /* __cplusplus */

#endif 	/* __DriveSizeCategorizer_FWD_DEFINED__ */


#ifndef __DriveTypeCategorizer_FWD_DEFINED__
#define __DriveTypeCategorizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class DriveTypeCategorizer DriveTypeCategorizer;
#else
typedef struct DriveTypeCategorizer DriveTypeCategorizer;
#endif /* __cplusplus */

#endif 	/* __DriveTypeCategorizer_FWD_DEFINED__ */


#ifndef __FreeSpaceCategorizer_FWD_DEFINED__
#define __FreeSpaceCategorizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class FreeSpaceCategorizer FreeSpaceCategorizer;
#else
typedef struct FreeSpaceCategorizer FreeSpaceCategorizer;
#endif /* __cplusplus */

#endif 	/* __FreeSpaceCategorizer_FWD_DEFINED__ */


#ifndef __TimeCategorizer_FWD_DEFINED__
#define __TimeCategorizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class TimeCategorizer TimeCategorizer;
#else
typedef struct TimeCategorizer TimeCategorizer;
#endif /* __cplusplus */

#endif 	/* __TimeCategorizer_FWD_DEFINED__ */


#ifndef __SizeCategorizer_FWD_DEFINED__
#define __SizeCategorizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class SizeCategorizer SizeCategorizer;
#else
typedef struct SizeCategorizer SizeCategorizer;
#endif /* __cplusplus */

#endif 	/* __SizeCategorizer_FWD_DEFINED__ */


#ifndef __AlphabeticalCategorizer_FWD_DEFINED__
#define __AlphabeticalCategorizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class AlphabeticalCategorizer AlphabeticalCategorizer;
#else
typedef struct AlphabeticalCategorizer AlphabeticalCategorizer;
#endif /* __cplusplus */

#endif 	/* __AlphabeticalCategorizer_FWD_DEFINED__ */


#ifndef __MergedCategorizer_FWD_DEFINED__
#define __MergedCategorizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MergedCategorizer MergedCategorizer;
#else
typedef struct MergedCategorizer MergedCategorizer;
#endif /* __cplusplus */

#endif 	/* __MergedCategorizer_FWD_DEFINED__ */


#ifndef __ImageProperties_FWD_DEFINED__
#define __ImageProperties_FWD_DEFINED__

#ifdef __cplusplus
typedef class ImageProperties ImageProperties;
#else
typedef struct ImageProperties ImageProperties;
#endif /* __cplusplus */

#endif 	/* __ImageProperties_FWD_DEFINED__ */


#ifndef __PropertiesUI_FWD_DEFINED__
#define __PropertiesUI_FWD_DEFINED__

#ifdef __cplusplus
typedef class PropertiesUI PropertiesUI;
#else
typedef struct PropertiesUI PropertiesUI;
#endif /* __cplusplus */

#endif 	/* __PropertiesUI_FWD_DEFINED__ */


#ifndef __UserNotification_FWD_DEFINED__
#define __UserNotification_FWD_DEFINED__

#ifdef __cplusplus
typedef class UserNotification UserNotification;
#else
typedef struct UserNotification UserNotification;
#endif /* __cplusplus */

#endif 	/* __UserNotification_FWD_DEFINED__ */


#ifndef __CDBurn_FWD_DEFINED__
#define __CDBurn_FWD_DEFINED__

#ifdef __cplusplus
typedef class CDBurn CDBurn;
#else
typedef struct CDBurn CDBurn;
#endif /* __cplusplus */

#endif 	/* __CDBurn_FWD_DEFINED__ */


#ifndef __TaskbarList_FWD_DEFINED__
#define __TaskbarList_FWD_DEFINED__

#ifdef __cplusplus
typedef class TaskbarList TaskbarList;
#else
typedef struct TaskbarList TaskbarList;
#endif /* __cplusplus */

#endif 	/* __TaskbarList_FWD_DEFINED__ */


#ifndef __StartMenuPin_FWD_DEFINED__
#define __StartMenuPin_FWD_DEFINED__

#ifdef __cplusplus
typedef class StartMenuPin StartMenuPin;
#else
typedef struct StartMenuPin StartMenuPin;
#endif /* __cplusplus */

#endif 	/* __StartMenuPin_FWD_DEFINED__ */


#ifndef __WebWizardHost_FWD_DEFINED__
#define __WebWizardHost_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebWizardHost WebWizardHost;
#else
typedef struct WebWizardHost WebWizardHost;
#endif /* __cplusplus */

#endif 	/* __WebWizardHost_FWD_DEFINED__ */


#ifndef __PublishDropTarget_FWD_DEFINED__
#define __PublishDropTarget_FWD_DEFINED__

#ifdef __cplusplus
typedef class PublishDropTarget PublishDropTarget;
#else
typedef struct PublishDropTarget PublishDropTarget;
#endif /* __cplusplus */

#endif 	/* __PublishDropTarget_FWD_DEFINED__ */


#ifndef __PublishingWizard_FWD_DEFINED__
#define __PublishingWizard_FWD_DEFINED__

#ifdef __cplusplus
typedef class PublishingWizard PublishingWizard;
#else
typedef struct PublishingWizard PublishingWizard;
#endif /* __cplusplus */

#endif 	/* __PublishingWizard_FWD_DEFINED__ */


#ifndef __InternetPrintOrdering_FWD_DEFINED__
#define __InternetPrintOrdering_FWD_DEFINED__

#ifdef __cplusplus
typedef class InternetPrintOrdering InternetPrintOrdering;
#else
typedef struct InternetPrintOrdering InternetPrintOrdering;
#endif /* __cplusplus */

#endif 	/* __InternetPrintOrdering_FWD_DEFINED__ */


#ifndef __FolderViewHost_FWD_DEFINED__
#define __FolderViewHost_FWD_DEFINED__

#ifdef __cplusplus
typedef class FolderViewHost FolderViewHost;
#else
typedef struct FolderViewHost FolderViewHost;
#endif /* __cplusplus */

#endif 	/* __FolderViewHost_FWD_DEFINED__ */


#ifndef __ExplorerBrowser_FWD_DEFINED__
#define __ExplorerBrowser_FWD_DEFINED__

#ifdef __cplusplus
typedef class ExplorerBrowser ExplorerBrowser;
#else
typedef struct ExplorerBrowser ExplorerBrowser;
#endif /* __cplusplus */

#endif 	/* __ExplorerBrowser_FWD_DEFINED__ */


#ifndef __ImageRecompress_FWD_DEFINED__
#define __ImageRecompress_FWD_DEFINED__

#ifdef __cplusplus
typedef class ImageRecompress ImageRecompress;
#else
typedef struct ImageRecompress ImageRecompress;
#endif /* __cplusplus */

#endif 	/* __ImageRecompress_FWD_DEFINED__ */


#ifndef __TrayBandSiteService_FWD_DEFINED__
#define __TrayBandSiteService_FWD_DEFINED__

#ifdef __cplusplus
typedef class TrayBandSiteService TrayBandSiteService;
#else
typedef struct TrayBandSiteService TrayBandSiteService;
#endif /* __cplusplus */

#endif 	/* __TrayBandSiteService_FWD_DEFINED__ */


#ifndef __TrayDeskBand_FWD_DEFINED__
#define __TrayDeskBand_FWD_DEFINED__

#ifdef __cplusplus
typedef class TrayDeskBand TrayDeskBand;
#else
typedef struct TrayDeskBand TrayDeskBand;
#endif /* __cplusplus */

#endif 	/* __TrayDeskBand_FWD_DEFINED__ */


#ifndef __AttachmentServices_FWD_DEFINED__
#define __AttachmentServices_FWD_DEFINED__

#ifdef __cplusplus
typedef class AttachmentServices AttachmentServices;
#else
typedef struct AttachmentServices AttachmentServices;
#endif /* __cplusplus */

#endif 	/* __AttachmentServices_FWD_DEFINED__ */


#ifndef __DocPropShellExtension_FWD_DEFINED__
#define __DocPropShellExtension_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocPropShellExtension DocPropShellExtension;
#else
typedef struct DocPropShellExtension DocPropShellExtension;
#endif /* __cplusplus */

#endif 	/* __DocPropShellExtension_FWD_DEFINED__ */


#ifndef __ShellItem_FWD_DEFINED__
#define __ShellItem_FWD_DEFINED__

#ifdef __cplusplus
typedef class ShellItem ShellItem;
#else
typedef struct ShellItem ShellItem;
#endif /* __cplusplus */

#endif 	/* __ShellItem_FWD_DEFINED__ */


#ifndef __NamespaceWalker_FWD_DEFINED__
#define __NamespaceWalker_FWD_DEFINED__

#ifdef __cplusplus
typedef class NamespaceWalker NamespaceWalker;
#else
typedef struct NamespaceWalker NamespaceWalker;
#endif /* __cplusplus */

#endif 	/* __NamespaceWalker_FWD_DEFINED__ */


#ifndef __FileOperation_FWD_DEFINED__
#define __FileOperation_FWD_DEFINED__

#ifdef __cplusplus
typedef class FileOperation FileOperation;
#else
typedef struct FileOperation FileOperation;
#endif /* __cplusplus */

#endif 	/* __FileOperation_FWD_DEFINED__ */


#ifndef __FileOpenDialog_FWD_DEFINED__
#define __FileOpenDialog_FWD_DEFINED__

#ifdef __cplusplus
typedef class FileOpenDialog FileOpenDialog;
#else
typedef struct FileOpenDialog FileOpenDialog;
#endif /* __cplusplus */

#endif 	/* __FileOpenDialog_FWD_DEFINED__ */


#ifndef __FileSaveDialog_FWD_DEFINED__
#define __FileSaveDialog_FWD_DEFINED__

#ifdef __cplusplus
typedef class FileSaveDialog FileSaveDialog;
#else
typedef struct FileSaveDialog FileSaveDialog;
#endif /* __cplusplus */

#endif 	/* __FileSaveDialog_FWD_DEFINED__ */


#ifndef __KnownFolderManager_FWD_DEFINED__
#define __KnownFolderManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class KnownFolderManager KnownFolderManager;
#else
typedef struct KnownFolderManager KnownFolderManager;
#endif /* __cplusplus */

#endif 	/* __KnownFolderManager_FWD_DEFINED__ */


#ifndef __FSCopyHandler_FWD_DEFINED__
#define __FSCopyHandler_FWD_DEFINED__

#ifdef __cplusplus
typedef class FSCopyHandler FSCopyHandler;
#else
typedef struct FSCopyHandler FSCopyHandler;
#endif /* __cplusplus */

#endif 	/* __FSCopyHandler_FWD_DEFINED__ */


#ifndef __SharingConfigurationManager_FWD_DEFINED__
#define __SharingConfigurationManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class SharingConfigurationManager SharingConfigurationManager;
#else
typedef struct SharingConfigurationManager SharingConfigurationManager;
#endif /* __cplusplus */

#endif 	/* __SharingConfigurationManager_FWD_DEFINED__ */


#ifndef __PreviousVersions_FWD_DEFINED__
#define __PreviousVersions_FWD_DEFINED__

#ifdef __cplusplus
typedef class PreviousVersions PreviousVersions;
#else
typedef struct PreviousVersions PreviousVersions;
#endif /* __cplusplus */

#endif 	/* __PreviousVersions_FWD_DEFINED__ */


#ifndef __NetworkConnections_FWD_DEFINED__
#define __NetworkConnections_FWD_DEFINED__

#ifdef __cplusplus
typedef class NetworkConnections NetworkConnections;
#else
typedef struct NetworkConnections NetworkConnections;
#endif /* __cplusplus */

#endif 	/* __NetworkConnections_FWD_DEFINED__ */


#ifndef __NamespaceTreeControl_FWD_DEFINED__
#define __NamespaceTreeControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class NamespaceTreeControl NamespaceTreeControl;
#else
typedef struct NamespaceTreeControl NamespaceTreeControl;
#endif /* __cplusplus */

#endif 	/* __NamespaceTreeControl_FWD_DEFINED__ */


#ifndef __IENamespaceTreeControl_FWD_DEFINED__
#define __IENamespaceTreeControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class IENamespaceTreeControl IENamespaceTreeControl;
#else
typedef struct IENamespaceTreeControl IENamespaceTreeControl;
#endif /* __cplusplus */

#endif 	/* __IENamespaceTreeControl_FWD_DEFINED__ */


#ifndef __ScheduledTasks_FWD_DEFINED__
#define __ScheduledTasks_FWD_DEFINED__

#ifdef __cplusplus
typedef class ScheduledTasks ScheduledTasks;
#else
typedef struct ScheduledTasks ScheduledTasks;
#endif /* __cplusplus */

#endif 	/* __ScheduledTasks_FWD_DEFINED__ */


#ifndef __ApplicationAssociationRegistration_FWD_DEFINED__
#define __ApplicationAssociationRegistration_FWD_DEFINED__

#ifdef __cplusplus
typedef class ApplicationAssociationRegistration ApplicationAssociationRegistration;
#else
typedef struct ApplicationAssociationRegistration ApplicationAssociationRegistration;
#endif /* __cplusplus */

#endif 	/* __ApplicationAssociationRegistration_FWD_DEFINED__ */


#ifndef __ApplicationAssociationRegistrationUI_FWD_DEFINED__
#define __ApplicationAssociationRegistrationUI_FWD_DEFINED__

#ifdef __cplusplus
typedef class ApplicationAssociationRegistrationUI ApplicationAssociationRegistrationUI;
#else
typedef struct ApplicationAssociationRegistrationUI ApplicationAssociationRegistrationUI;
#endif /* __cplusplus */

#endif 	/* __ApplicationAssociationRegistrationUI_FWD_DEFINED__ */


#ifndef __SearchFolderItemFactory_FWD_DEFINED__
#define __SearchFolderItemFactory_FWD_DEFINED__

#ifdef __cplusplus
typedef class SearchFolderItemFactory SearchFolderItemFactory;
#else
typedef struct SearchFolderItemFactory SearchFolderItemFactory;
#endif /* __cplusplus */

#endif 	/* __SearchFolderItemFactory_FWD_DEFINED__ */


#ifndef __OpenControlPanel_FWD_DEFINED__
#define __OpenControlPanel_FWD_DEFINED__

#ifdef __cplusplus
typedef class OpenControlPanel OpenControlPanel;
#else
typedef struct OpenControlPanel OpenControlPanel;
#endif /* __cplusplus */

#endif 	/* __OpenControlPanel_FWD_DEFINED__ */


#ifndef __ComputerInfoAdvise_FWD_DEFINED__
#define __ComputerInfoAdvise_FWD_DEFINED__

#ifdef __cplusplus
typedef class ComputerInfoAdvise ComputerInfoAdvise;
#else
typedef struct ComputerInfoAdvise ComputerInfoAdvise;
#endif /* __cplusplus */

#endif 	/* __ComputerInfoAdvise_FWD_DEFINED__ */


#ifndef __NetworkExplorerFolder_FWD_DEFINED__
#define __NetworkExplorerFolder_FWD_DEFINED__

#ifdef __cplusplus
typedef class NetworkExplorerFolder NetworkExplorerFolder;
#else
typedef struct NetworkExplorerFolder NetworkExplorerFolder;
#endif /* __cplusplus */

#endif 	/* __NetworkExplorerFolder_FWD_DEFINED__ */


#ifndef __IAssocHandlerInvoker_FWD_DEFINED__
#define __IAssocHandlerInvoker_FWD_DEFINED__
typedef interface IAssocHandlerInvoker IAssocHandlerInvoker;
#endif 	/* __IAssocHandlerInvoker_FWD_DEFINED__ */


#ifndef __IAssocHandler_FWD_DEFINED__
#define __IAssocHandler_FWD_DEFINED__
typedef interface IAssocHandler IAssocHandler;
#endif 	/* __IAssocHandler_FWD_DEFINED__ */


#ifndef __IEnumAssocHandlers_FWD_DEFINED__
#define __IEnumAssocHandlers_FWD_DEFINED__
typedef interface IEnumAssocHandlers IEnumAssocHandlers;
#endif 	/* __IEnumAssocHandlers_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "oleidl.h"
#include "oaidl.h"
#include "docobj.h"
#include "shtypes.h"
#include "comcat.h"
#include "propidl.h"
#include "prsht.h"
#include "propsys.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_shobjidl_0000_0000 */
/* [local] */ 

#include <sherrors.h>
#ifndef SHSTDAPI
#if defined(_SHELL32_)
#define SHSTDAPI          STDAPI
#define SHSTDAPI_(type)   STDAPI_(type)
#else
#define SHSTDAPI          EXTERN_C DECLSPEC_IMPORT HRESULT STDAPICALLTYPE
#define SHSTDAPI_(type)   EXTERN_C DECLSPEC_IMPORT type STDAPICALLTYPE
#endif
#endif // SHSTDAPI

//===========================================================================
//
// IContextMenu interface
//
// [OverView]
//
//  The shell uses the IContextMenu interface in following three cases.
//
// case-1: The shell is loading context menu extensions.
//
//   When the user clicks the right mouse button on an item within the shell's
//  name space (i.g., file, directory, server, work-group, etc.), it creates
//  the default context menu for its type, then loads context menu extensions
//  that are registered for that type (and its base type) so that they can
//  add extra menu items. Those context menu extensions are registered at
//  HKCR\{ProgID}\shellex\ContextMenuHandlers.
//
// case-2: The shell is retrieving a context menu of sub-folders in extended
//   name-space.
//
//   When the explorer's name space is extended by name space extensions,
//  the shell calls their IShellFolder::GetUIObjectOf to get the IContextMenu
//  objects when it creates context menus for folders under those extended
//  name spaces.
//
// case-3: The shell is loading non-default drag and drop handler for directories.
//
//   When the user performed a non-default drag and drop onto one of file
//  system folders (i.e., directories), it loads shell extensions that are
//  registered at HKCR\{ProgID}\DragDropHandlers.
//
//
// [Member functions]
//
//
// IContextMenu::QueryContextMenu
//
//   This member function may insert one or more menuitems to the specified
//  menu (hmenu) at the specified location (indexMenu which is never be -1).
//  The IDs of those menuitem must be in the specified range (idCmdFirst and
//  idCmdLast). It returns the maximum menuitem ID offset (ushort) in the
//  'code' field (low word) of the scode.
//
//   The uFlags specify the context. It may have one or more of following
//  flags.
//
//  CMF_DEFAULTONLY: This flag is passed if the user is invoking the default
//   action (typically by double-clicking, case 1 and 2 only). Context menu
//   extensions (case 1) should not add any menu items, and returns S_OK.
//
//  CMF_VERBSONLY: The explorer passes this flag if it is constructing
//   a context menu for a short-cut object (case 1 and case 2 only). If this
//   flag is passed, it should not add any menu-items that is not appropriate
//   from a short-cut.
//    A good example is the Delete menuitem, which confuses the user
//   because it is not clear whether it deletes the link source item or the
//   link itself.
//
//  CMF_EXPLORER: The explorer passes this flag if it has the left-side pane
//   (case 1 and 2 only). Context menu extensions should ignore this flag.
//
//   High word (16-bit) are reserved for context specific communications
//  and the rest of flags (13-bit) are reserved by the system.
//
//
// IContextMenu::InvokeCommand
//
//   This member is called when the user has selected one of menuitems that
//  are inserted by previous QueryContextMenu member. In this case, the
//  LOWORD(lpici->lpVerb) contains the menuitem ID offset (menuitem ID -
//  idCmdFirst).
//
//   This member function may also be called programmatically. In such a case,
//  lpici->lpVerb specifies the canonical name of the command to be invoked,
//  which is typically retrieved by GetCommandString member previously.
//
//  Parameters in lpci:
//    cbSize -- Specifies the size of this structure (sizeof(*lpci))
//    hwnd   -- Specifies the owner window for any message/dialog box.
//    fMask  -- Specifies whether or not dwHotkey/hIcon paramter is valid.
//    lpVerb -- Specifies the command to be invoked.
//    lpParameters -- Parameters (optional)
//    lpDirectory  -- Working directory (optional)
//    nShow -- Specifies the flag to be passed to ShowWindow (SW_*).
//    dwHotKey -- Hot key to be assigned to the app after invoked (optional).
//    hIcon -- Specifies the icon (optional).
//    hMonitor -- Specifies the default monitor (optional).
//
//
// IContextMenu::GetCommandString
//
//   This member function is called by the explorer either to get the
//  canonical (language independent) command name (uFlags == GCS_VERB) or
//  the help text ((uFlags & GCS_HELPTEXT) != 0) for the specified command.
//  The retrieved canonical string may be passed to its InvokeCommand
//  member function to invoke a command programmatically. The explorer
//  displays the help texts in its status bar; therefore, the length of
//  the help text should be reasonably short (<40 characters).
//
//  Parameters:
//   idCmd -- Specifies menuitem ID offset (from idCmdFirst)
//   uFlags -- Either GCS_VERB or GCS_HELPTEXT
//   pwReserved -- Reserved (must pass NULL when calling, must ignore when called)
//   pszName -- Specifies the string buffer.
//   cchMax -- Specifies the size of the string buffer.
//
//===========================================================================

// QueryContextMenu uFlags
#define CMF_NORMAL              0x00000000
#define CMF_DEFAULTONLY         0x00000001
#define CMF_VERBSONLY           0x00000002
#define CMF_EXPLORE             0x00000004
#define CMF_NOVERBS             0x00000008
#define CMF_CANRENAME           0x00000010
#define CMF_NODEFAULT           0x00000020
#if (NTDDI_VERSION < NTDDI_VISTA)
#define CMF_INCLUDESTATIC       0x00000040
#endif
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define CMF_ITEMMENU            0x00000080
#endif
#define CMF_EXTENDEDVERBS       0x00000100
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define CMF_DISABLEDVERBS       0x00000200
#endif
#define CMF_RESERVED            0xffff0000

// GetCommandString uFlags
#define GCS_VERBA        0x00000000     // canonical verb
#define GCS_HELPTEXTA    0x00000001     // help text (for status bar)
#define GCS_VALIDATEA    0x00000002     // validate command exists
#define GCS_VERBW        0x00000004     // canonical verb (unicode)
#define GCS_HELPTEXTW    0x00000005     // help text (unicode version)
#define GCS_VALIDATEW    0x00000006     // validate command exists (unicode)
#define GCS_VERBICONW    0x00000014     // icon string (unicode)
#define GCS_UNICODE      0x00000004     // for bit testing - Unicode string

#ifdef UNICODE
#define GCS_VERB        GCS_VERBW
#define GCS_HELPTEXT    GCS_HELPTEXTW
#define GCS_VALIDATE    GCS_VALIDATEW
#else
#define GCS_VERB        GCS_VERBA
#define GCS_HELPTEXT    GCS_HELPTEXTA
#define GCS_VALIDATE    GCS_VALIDATEA
#endif

#define CMDSTR_NEWFOLDERA   "NewFolder"
#define CMDSTR_VIEWLISTA    "ViewList"
#define CMDSTR_VIEWDETAILSA "ViewDetails"
#define CMDSTR_NEWFOLDERW   L"NewFolder"
#define CMDSTR_VIEWLISTW    L"ViewList"
#define CMDSTR_VIEWDETAILSW L"ViewDetails"

#ifdef UNICODE
#define CMDSTR_NEWFOLDER    CMDSTR_NEWFOLDERW
#define CMDSTR_VIEWLIST     CMDSTR_VIEWLISTW
#define CMDSTR_VIEWDETAILS  CMDSTR_VIEWDETAILSW
#else
#define CMDSTR_NEWFOLDER    CMDSTR_NEWFOLDERA
#define CMDSTR_VIEWLIST     CMDSTR_VIEWLISTA
#define CMDSTR_VIEWDETAILS  CMDSTR_VIEWDETAILSA
#endif

#define CMIC_MASK_HOTKEY        SEE_MASK_HOTKEY
#define CMIC_MASK_ICON          SEE_MASK_ICON
#define CMIC_MASK_FLAG_NO_UI    SEE_MASK_FLAG_NO_UI
#define CMIC_MASK_UNICODE       SEE_MASK_UNICODE
#define CMIC_MASK_NO_CONSOLE    SEE_MASK_NO_CONSOLE
#if (NTDDI_VERSION < NTDDI_VISTA)
#define CMIC_MASK_HASLINKNAME   SEE_MASK_HASLINKNAME
#define CMIC_MASK_HASTITLE      SEE_MASK_HASTITLE
#endif  // NTDDI_VISTA
#define CMIC_MASK_FLAG_SEP_VDM  SEE_MASK_FLAG_SEPVDM
#define CMIC_MASK_ASYNCOK       SEE_MASK_ASYNCOK
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define CMIC_MASK_NOASYNC       SEE_MASK_NOASYNC
#endif
#if (_WIN32_IE >= _WIN32_IE_IE501)
#define CMIC_MASK_SHIFT_DOWN    0x10000000
#define CMIC_MASK_CONTROL_DOWN  0x40000000
#endif  // _WIN32_IE_IE501
#if (_WIN32_IE >= 0x0560)
#define CMIC_MASK_FLAG_LOG_USAGE SEE_MASK_FLAG_LOG_USAGE
#define CMIC_MASK_NOZONECHECKS  SEE_MASK_NOZONECHECKS
#endif // (_WIN32_IE >= 0x560)

#if (_WIN32_IE >= _WIN32_IE_IE40)
#define CMIC_MASK_PTINVOKE      0x20000000
#endif  // _WIN32_IE_IE40

#include <pshpack8.h>

typedef struct _CMINVOKECOMMANDINFO
    {
    DWORD cbSize;
    DWORD fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    DWORD dwHotKey;
    HANDLE hIcon;
    } 	CMINVOKECOMMANDINFO;

typedef CMINVOKECOMMANDINFO *LPCMINVOKECOMMANDINFO;

#if (_WIN32_IE >= _WIN32_IE_IE40)
typedef struct _CMINVOKECOMMANDINFOEX
    {
    DWORD cbSize;
    DWORD fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    DWORD dwHotKey;
    HANDLE hIcon;
    LPCSTR lpTitle;
    LPCWSTR lpVerbW;
    LPCWSTR lpParametersW;
    LPCWSTR lpDirectoryW;
    LPCWSTR lpTitleW;
    POINT ptInvoke;
    } 	CMINVOKECOMMANDINFOEX;

#else
typedef struct _PRE_IE4_CMINVOKECOMMANDINFOEX
{
    DWORD cbSize;            // must be sizeof(CMINVOKECOMMANDINFOEX)
    DWORD fMask;             // any combination of CMIC_MASK_*
    HWND hwnd;               // might be NULL (indicating no owner window)
    LPCSTR lpVerb;           // either a string or MAKEINTRESOURCE(idOffset)
    LPCSTR lpParameters;     // might be NULL (indicating no parameter)
    LPCSTR lpDirectory;      // might be NULL (indicating no specific directory)
    int nShow;               // one of SW_ values for ShowWindow() API
    DWORD dwHotKey;
    HANDLE hIcon;
    LPCSTR lpTitle;         // For CreateProcess-StartupInfo.lpTitle
    LPCWSTR lpVerbW;        // Unicode verb (for those who can use it)
    LPCWSTR lpParametersW;  // Unicode parameters (for those who can use it)
    LPCWSTR lpDirectoryW;   // Unicode directory (for those who can use it)
    LPCWSTR lpTitleW;       // Unicode title (for those who can use it)
} CMINVOKECOMMANDINFOEX;
#endif   // _WIN32_IE_IE40
typedef CMINVOKECOMMANDINFOEX *LPCMINVOKECOMMANDINFOEX;

typedef const CMINVOKECOMMANDINFOEX *PCCMINVOKECOMMANDINFOEX;

#include <poppack.h>


extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0000_v0_0_s_ifspec;

#ifndef __IContextMenu_INTERFACE_DEFINED__
#define __IContextMenu_INTERFACE_DEFINED__

/* interface IContextMenu */
/* [object][unique][uuid][local] */ 


EXTERN_C const IID IID_IContextMenu;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000214e4-0000-0000-c000-000000000046")
    IContextMenu : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryContextMenu( 
            /* [in] */ 
            __in  HMENU hmenu,
            /* [in] */ 
            __in  UINT indexMenu,
            /* [in] */ 
            __in  UINT idCmdFirst,
            /* [in] */ 
            __in  UINT idCmdLast,
            /* [in] */ 
            __in  UINT uFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InvokeCommand( 
            /* [in] */ 
            __in  CMINVOKECOMMANDINFO *pici) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCommandString( 
            /* [in] */ 
            __in  UINT_PTR idCmd,
            /* [in] */ 
            __in  UINT uType,
            /* [in] */ 
            __reserved  UINT *pReserved,
            /* [out] */ 
            __out_awcount(!(uType & GCS_UNICODE), cchMax)  LPSTR pszName,
            /* [in] */ 
            __in  UINT cchMax) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContextMenuVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContextMenu * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContextMenu * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContextMenu * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryContextMenu )( 
            IContextMenu * This,
            /* [in] */ 
            __in  HMENU hmenu,
            /* [in] */ 
            __in  UINT indexMenu,
            /* [in] */ 
            __in  UINT idCmdFirst,
            /* [in] */ 
            __in  UINT idCmdLast,
            /* [in] */ 
            __in  UINT uFlags);
        
        HRESULT ( STDMETHODCALLTYPE *InvokeCommand )( 
            IContextMenu * This,
            /* [in] */ 
            __in  CMINVOKECOMMANDINFO *pici);
        
        HRESULT ( STDMETHODCALLTYPE *GetCommandString )( 
            IContextMenu * This,
            /* [in] */ 
            __in  UINT_PTR idCmd,
            /* [in] */ 
            __in  UINT uType,
            /* [in] */ 
            __reserved  UINT *pReserved,
            /* [out] */ 
            __out_awcount(!(uType & GCS_UNICODE), cchMax)  LPSTR pszName,
            /* [in] */ 
            __in  UINT cchMax);
        
        END_INTERFACE
    } IContextMenuVtbl;

    interface IContextMenu
    {
        CONST_VTBL struct IContextMenuVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContextMenu_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContextMenu_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContextMenu_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContextMenu_QueryContextMenu(This,hmenu,indexMenu,idCmdFirst,idCmdLast,uFlags)	\
    ( (This)->lpVtbl -> QueryContextMenu(This,hmenu,indexMenu,idCmdFirst,idCmdLast,uFlags) ) 

#define IContextMenu_InvokeCommand(This,pici)	\
    ( (This)->lpVtbl -> InvokeCommand(This,pici) ) 

#define IContextMenu_GetCommandString(This,idCmd,uType,pReserved,pszName,cchMax)	\
    ( (This)->lpVtbl -> GetCommandString(This,idCmd,uType,pReserved,pszName,cchMax) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContextMenu_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shobjidl_0000_0001 */
/* [local] */ 

typedef IContextMenu *LPCONTEXTMENU;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0001_v0_0_s_ifspec;

#ifndef __IContextMenu2_INTERFACE_DEFINED__
#define __IContextMenu2_INTERFACE_DEFINED__

/* interface IContextMenu2 */
/* [object][unique][uuid][local] */ 


EXTERN_C const IID IID_IContextMenu2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000214f4-0000-0000-c000-000000000046")
    IContextMenu2 : public IContextMenu
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE HandleMenuMsg( 
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContextMenu2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContextMenu2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContextMenu2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContextMenu2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryContextMenu )( 
            IContextMenu2 * This,
            /* [in] */ 
            __in  HMENU hmenu,
            /* [in] */ 
            __in  UINT indexMenu,
            /* [in] */ 
            __in  UINT idCmdFirst,
            /* [in] */ 
            __in  UINT idCmdLast,
            /* [in] */ 
            __in  UINT uFlags);
        
        HRESULT ( STDMETHODCALLTYPE *InvokeCommand )( 
            IContextMenu2 * This,
            /* [in] */ 
            __in  CMINVOKECOMMANDINFO *pici);
        
        HRESULT ( STDMETHODCALLTYPE *GetCommandString )( 
            IContextMenu2 * This,
            /* [in] */ 
            __in  UINT_PTR idCmd,
            /* [in] */ 
            __in  UINT uType,
            /* [in] */ 
            __reserved  UINT *pReserved,
            /* [out] */ 
            __out_awcount(!(uType & GCS_UNICODE), cchMax)  LPSTR pszName,
            /* [in] */ 
            __in  UINT cchMax);
        
        HRESULT ( STDMETHODCALLTYPE *HandleMenuMsg )( 
            IContextMenu2 * This,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        END_INTERFACE
    } IContextMenu2Vtbl;

    interface IContextMenu2
    {
        CONST_VTBL struct IContextMenu2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContextMenu2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContextMenu2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContextMenu2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContextMenu2_QueryContextMenu(This,hmenu,indexMenu,idCmdFirst,idCmdLast,uFlags)	\
    ( (This)->lpVtbl -> QueryContextMenu(This,hmenu,indexMenu,idCmdFirst,idCmdLast,uFlags) ) 

#define IContextMenu2_InvokeCommand(This,pici)	\
    ( (This)->lpVtbl -> InvokeCommand(This,pici) ) 

#define IContextMenu2_GetCommandString(This,idCmd,uType,pReserved,pszName,cchMax)	\
    ( (This)->lpVtbl -> GetCommandString(This,idCmd,uType,pReserved,pszName,cchMax) ) 


#define IContextMenu2_HandleMenuMsg(This,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> HandleMenuMsg(This,uMsg,wParam,lParam) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContextMenu2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shobjidl_0000_0002 */
/* [local] */ 

typedef IContextMenu2 *LPCONTEXTMENU2;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0002_v0_0_s_ifspec;

#ifndef __IContextMenu3_INTERFACE_DEFINED__
#define __IContextMenu3_INTERFACE_DEFINED__

/* interface IContextMenu3 */
/* [object][unique][uuid][local] */ 


EXTERN_C const IID IID_IContextMenu3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BCFCE0A0-EC17-11d0-8D10-00A0C90F2719")
    IContextMenu3 : public IContextMenu2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE HandleMenuMsg2( 
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam,
            /* [out] */ 
            __out_opt  LRESULT *plResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContextMenu3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContextMenu3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContextMenu3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContextMenu3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryContextMenu )( 
            IContextMenu3 * This,
            /* [in] */ 
            __in  HMENU hmenu,
            /* [in] */ 
            __in  UINT indexMenu,
            /* [in] */ 
            __in  UINT idCmdFirst,
            /* [in] */ 
            __in  UINT idCmdLast,
            /* [in] */ 
            __in  UINT uFlags);
        
        HRESULT ( STDMETHODCALLTYPE *InvokeCommand )( 
            IContextMenu3 * This,
            /* [in] */ 
            __in  CMINVOKECOMMANDINFO *pici);
        
        HRESULT ( STDMETHODCALLTYPE *GetCommandString )( 
            IContextMenu3 * This,
            /* [in] */ 
            __in  UINT_PTR idCmd,
            /* [in] */ 
            __in  UINT uType,
            /* [in] */ 
            __reserved  UINT *pReserved,
            /* [out] */ 
            __out_awcount(!(uType & GCS_UNICODE), cchMax)  LPSTR pszName,
            /* [in] */ 
            __in  UINT cchMax);
        
        HRESULT ( STDMETHODCALLTYPE *HandleMenuMsg )( 
            IContextMenu3 * This,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *HandleMenuMsg2 )( 
            IContextMenu3 * This,
            /* [in] */ 
            __in  UINT uMsg,
            /* [in] */ 
            __in  WPARAM wParam,
            /* [in] */ 
            __in  LPARAM lParam,
            /* [out] */ 
            __out_opt  LRESULT *plResult);
        
        END_INTERFACE
    } IContextMenu3Vtbl;

    interface IContextMenu3
    {
        CONST_VTBL struct IContextMenu3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContextMenu3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContextMenu3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContextMenu3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContextMenu3_QueryContextMenu(This,hmenu,indexMenu,idCmdFirst,idCmdLast,uFlags)	\
    ( (This)->lpVtbl -> QueryContextMenu(This,hmenu,indexMenu,idCmdFirst,idCmdLast,uFlags) ) 

#define IContextMenu3_InvokeCommand(This,pici)	\
    ( (This)->lpVtbl -> InvokeCommand(This,pici) ) 

#define IContextMenu3_GetCommandString(This,idCmd,uType,pReserved,pszName,cchMax)	\
    ( (This)->lpVtbl -> GetCommandString(This,idCmd,uType,pReserved,pszName,cchMax) ) 


#define IContextMenu3_HandleMenuMsg(This,uMsg,wParam,lParam)	\
    ( (This)->lpVtbl -> HandleMenuMsg(This,uMsg,wParam,lParam) ) 


#define IContextMenu3_HandleMenuMsg2(This,uMsg,wParam,lParam,plResult)	\
    ( (This)->lpVtbl -> HandleMenuMsg2(This,uMsg,wParam,lParam,plResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContextMenu3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_shobjidl_0000_0003 */
/* [local] */ 

typedef IContextMenu3 *LPCONTEXTMENU3;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_0003_v0_0_s_ifspec;

#ifndef __IPersistFolder_INTERFACE_DEFINED__
#define __IPersistFolder_INTERFACE_DEFINED__

/* interface IPersistFolder */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IPersistFolder;

#if defined(__cplusplus) && !defined(