74, 0x00, 0x6F, 0x6F, 0x00, 0x68, 0x68, 0x00, 0x5F, 0x5F, 0x00, 0x57, 0x57, 0x00, 0x4C, 0x4C, 
   0x00, 0x3F, 0x3F, 0x00, 0x34, 0x34, 0x00, 0x27, 0x27, 0x00, 0x1C, 0x1C, 0x00, 0x0C, 0x0C, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x16, 
   0x16, 0x00, 0x24, 0x24, 0x00, 0x33, 0x33, 0x00, 0x3F, 0x3F, 0x00, 0x4C, 0x4C, 0x00, 0x58, 0x58, 
   0x00, 0x64, 0x64, 0x00, 0x6F, 0x6F, 0x00, 0x78, 0x78, 0x00, 0x7F, 0x7F, 0x00, 0x86, 0x86, 0x00, 
   0x8A, 0x8A, 0x00, 0x8E, 0x8E, 0x00, 0x8F, 0x8F, 0x00, 0x8E, 0x8E, 0x00, 0x8C, 0x8C, 0x00, 0x88, 
   0x88, 0x00, 0x83, 0x83, 0x00, 0x7C, 0x7C, 0x00, 0x72, 0x72, 0x00, 0x69, 0x69, 0x00, 0x5D, 0x5D, 
   0x00, 0x52, 0x52, 0x00, 0x44, 0x44, 0x00, 0x36, 0x36, 0x00, 0x2A, 0x2A, 0x00, 0x1B, 0x1B, 0x00, 
   0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x14, 0x14, 0x00, 0x24, 
   0x24, 0x00, 0x32, 0x32, 0x00, 0x41, 0x41, 0x00, 0x4C, 0x4C, 0x00, 0x5B, 0x5B, 0x00, 0x69, 0x69, 
   0x00, 0x76, 0x76, 0x00, 0x80, 0x80, 0x00, 0x89, 0x89, 0x00, 0x92, 0x92, 0x00, 0x97, 0x97, 0x00, 
   0x9D, 0x9D, 0x00, 0x9F, 0x9F, 0x00, 0xA1, 0xA1, 0x00, 0xA1, 0xA1, 0x00, 0x9E, 0x9E, 0x00, 0x9B, 
   0x9B, 0x00, 0x94, 0x94, 0x00, 0x8E, 0x8E, 0x00, 0x85, 0x85, 0x00, 0x7A, 0x7A, 0x00, 0x6F, 0x6F, 
   0x00, 0x62, 0x62, 0x00, 0x54, 0x54, 0x00, 0x46, 0x46, 0x00, 0x38, 0x38, 0x00, 0x28, 0x28, 0x00, 
   0x18, 0x18, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x1F, 0x1F, 0x00, 0x2F, 
   0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x51, 0x51, 0x00, 0x5E, 0x5E, 0x00, 0x6C, 0x6C, 0x00, 0x79, 0x79, 
   0x00, 0x87, 0x87, 0x00, 0x92, 0x92, 0x00, 0x9B, 0x9B, 0x00, 0xA4, 0xA4, 0x00, 0xAA, 0xAA, 0x00, 
   0xB0, 0xB0, 0x00, 0xB2, 0xB2, 0x00, 0xB3, 0xB3, 0x00, 0xB3, 0xB3, 0x00, 0xB1, 0xB1, 0x00, 0xAD, 
   0xAD, 0x00, 0xA7, 0xA7, 0x00, 0xA1, 0xA1, 0x00, 0x98, 0x98, 0x00, 0x8D, 0x8D, 0x00, 0x80, 0x80, 
   0x00, 0x72, 0x72, 0x00, 0x64, 0x64, 0x00, 0x54, 0x54, 0x00, 0x45, 0x45, 0x00, 0x35, 0x35, 0x00, 
   0x25, 0x25, 0x00, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x19, 0x19, 0x00, 0x2A, 0x2A, 0x00, 0x3B, 
   0x3B, 0x00, 0x4B, 0x4B, 0x00, 0x5C, 0x5C, 0x00, 0x6C, 0x6C, 0x00, 0x7D, 0x7D, 0x00, 0x8A, 0x8A, 
   0x00, 0x97, 0x97, 0x00, 0xA3, 0xA3, 0x00, 0xAC, 0xAC, 0x00, 0xB4, 0xB4, 0x00, 0xBB, 0xBB, 0x00, 
   0xC0, 0xC0, 0x00, 0xC3, 0xC3, 0x00, 0xC4, 0xC4, 0x00, 0xC4, 0xC4, 0x00, 0xC2, 0xC2, 0x00, 0xBF, 
   0xBF, 0x00, 0xB9, 0xB9, 0x00, 0xB1, 0xB1, 0x00, 0xA7, 0xA7, 0x00, 0x9C, 0x9C, 0x00, 0x8F, 0x8F, 
   0x00, 0x81, 0x81, 0x00, 0x72, 0x72, 0x00, 0x62, 0x62, 0x00, 0x52, 0x52, 0x00, 0x41, 0x41, 0x00, 
   0x2F, 0x2F, 0x00, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x23, 0x23, 0x00, 0x34, 0x34, 0x00, 0x45, 
   0x45, 0x00, 0x58, 0x58, 0x00, 0x69, 0x69, 0x00, 0x78, 0x78, 0x00, 0x89, 0x89, 0x00, 0x98, 0x98, 
   0x00, 0xA7, 0xA7, 0x00, 0xB3, 0xB3, 0x00, 0xBB, 0xBB, 0x00, 0xC3, 0xC3, 0x00, 0xCA, 0xCA, 0x00, 
   0xCF, 0xCF, 0x00, 0xD2, 0xD2, 0x00, 0xD3, 0xD3, 0x00, 0xD2, 0xD2, 0x00, 0xD0, 0xD0, 0x00, 0xCB, 
   0xCB, 0x00, 0xC6, 0xC6, 0x00, 0xBF, 0xBF, 0x00, 0xB5, 0xB5, 0x00, 0xAB, 0xAB, 0x00, 0x9E, 0x9E, 
   0x00, 0x90, 0x90, 0x00, 0x80, 0x80, 0x00, 0x6F, 0x6F, 0x00, 0x5F, 0x5F, 0x00, 0x4D, 0x4D, 0x00, 
   0x3B, 0x3B, 0x00, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x2B, 0x2B, 0x00, 0x3D, 0x3D, 0x00, 0x50, 
   0x50, 0x00, 0x62, 0x62, 0x00, 0x75, 0x75, 0x00, 0x85, 0x85, 0x00, 0x96, 0x96, 0x00, 0xA5, 0xA5, 
   0x00, 0xB3, 0xB3, 0x00, 0xBF, 0xBF, 0x00, 0xCA, 0xCA, 0x00, 0xD1, 0xD1, 0x00, 0xD7, 0xD7, 0x00, 
   0xDA, 0xDA, 0x00, 0xDE, 0xDE, 0x00, 0xDE, 0xDE, 0x00, 0xDE, 0xDE, 0x00, 0xDB, 0xDB, 0x00, 0xD8, 
   0xD8, 0x00, 0xD2, 0xD2, 0x00, 0xCB, 0xCB, 0x00, 0xC2, 0xC2, 0x00, 0xB7, 0xB7, 0x00, 0xAB, 0xAB, 
   0x00, 0x9D, 0x9D, 0x00, 0x8D, 0x8D, 0x00, 0x7A, 0x7A, 0x00, 0x6A, 0x6A, 0x00, 0x58, 0x58, 0x00, 
   0x44, 0x44, 0x00, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x21, 0x00, 0x33, 0x33, 0x00, 0x45, 0x45, 0x00, 0x59, 
   0x59, 0x00, 0x6C, 0x6C, 0x00, 0x7F, 0x7F, 0x00, 0x90, 0x90, 0x00, 0xA1, 0xA1, 0x00, 0xB1, 0xB1, 
   0x00, 0xBE, 0xBE, 0x00, 0xCA, 0xCA, 0x00, 0xD3, 0xD3, 0x00, 0xDB, 0xDB, 0x00, 0xDF, 0xDF, 0x00, 
   0xE5, 0xE5, 0x00, 0xE7, 0xE7, 0x00, 0xE8, 0xE8, 0x00, 0xE7, 0xE7, 0x00, 0xE6, 0xE6, 0x00, 0xE2, 
   0xE2, 0x00, 0xDE, 0xDE, 0x00, 0xD6, 0xD6, 0x00, 0xCE, 0xCE, 0x00, 0xC3, 0xC3, 0x00, 0xB6, 0xB6, 
   0x00, 0xA7, 0xA7, 0x00, 0x97, 0x97, 0x00, 0x86, 0x86, 0x00, 0x75, 0x75, 0x00, 0x61, 0x61, 0x00, 
   0x4E, 0x4E, 0x00, 0x3A, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x26, 0x00, 0x39, 0x39, 0x00, 0x4D, 0x4D, 0x00, 0x61, 
   0x61, 0x00, 0x76, 0x76, 0x00, 0x88, 0x88, 0x00, 0x98, 0x98, 0x00, 0xAA, 0xAA, 0x00, 0xBB, 0xBB, 
   0x00, 0xC8, 0xC8, 0x00, 0xD2, 0xD2, 0x00, 0xDB, 0xDB, 0x00, 0xE2, 0xE2, 0x00, 0xE7, 0xE7, 0x00, 
   0xEC, 0xEC, 0x00, 0xEF, 0xEF, 0x00, 0xF0, 0xF0, 0x00, 0xEF, 0xEF, 0x00, 0xED, 0xED, 0x00, 0xEA, 
   0xEA, 0x00, 0xE5, 0xE5, 0x00, 0xDF, 0xDF, 0x00, 0xD7, 0xD7, 0x00, 0xCC, 0xCC, 0x00, 0xC0, 0xC0, 
   0x00, 0xB2, 0xB2, 0x00, 0xA0, 0xA0, 0x00, 0x8F, 0x8F, 0x00, 0x7E, 0x7E, 0x00, 0x6A, 0x6A, 0x00, 
   0x55, 0x55, 0x00, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x2C, 0x00, 0x3F, 0x3F, 0x00, 0x54, 0x54, 0x00, 0x68, 
   0x68, 0x00, 0x7D, 0x7D, 0x00, 0x90, 0x90, 0x00, 0xA0, 0xA0, 0x00, 0xB2, 0xB2, 0x00, 0xC2, 0xC2, 
   0x00, 0xCF, 0xCF, 0x00, 0xDA, 0xDA, 0x00, 0xE2, 0xE2, 0x00, 0xE8, 0xE8, 0x00, 0xEE, 0xEE, 0x00, 
   0xF2, 0xF2, 0x00, 0xF5, 0xF5, 0x00, 0xF5, 0xF5, 0x00, 0xF5, 0xF5, 0x00, 0xF2, 0xF2, 0x00, 0xF0, 
   0xF0, 0x00, 0xEC, 0xEC, 0x00, 0xE6, 0xE6, 0x00, 0xDE, 0xDE, 0x00, 0xD3, 0xD3, 0x00, 0xC7, 0xC7, 
   0x00, 0xBA, 0xBA, 0x00, 0xA8, 0xA8, 0x00, 0x97, 0x97, 0x00, 0x85, 0x85, 0x00, 0x71, 0x71, 0x00, 
   0x5D, 0x5D, 0x00, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x43, 0x43, 0x00, 0x58, 0x58, 0x00, 0x6E, 
   0x6E, 0x00, 0x82, 0x82, 0x00, 0x96, 0x96, 0x00, 0xA6, 0xA6, 0x00, 0xB7, 0xB7, 0x00, 0xC8, 0xC8, 
   0x00, 0xD4, 0xD4, 0x00, 0xDF, 0xDF, 0x00, 0xE8, 0xE8, 0x00, 0xEE, 0xEE, 0x00, 0xF3, 0xF3, 0x00, 
   0xF7, 0xF7, 0x00, 0xF8, 0xF8, 0x00, 0xF9, 0xF9, 0x00, 0xF9, 0xF9, 0x00, 0xF7, 0xF7, 0x00, 0xF5, 
   0xF5, 0x00, 0xF0, 0xF0, 0x00, 0xEA, 0xEA, 0x00, 0xE3, 0xE3, 0x00, 0xD9, 0xD9, 0x00, 0xCC, 0xCC, 
   0x00, 0xBE, 0xBE, 0x00, 0xAE, 0xAE, 0x00, 0x9D, 0x9D, 0x00, 0x8C, 0x8C, 0x00, 0x77, 0x77, 0x00, 
   0x62, 0x62, 0x00, 0x4C, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x34, 0x00, 0x46, 0x46, 0x00, 0x5C, 0x5C, 0x00, 0x71, 
   0x71, 0x00, 0x87, 0x87, 0x00, 0x99, 0x99, 0x00, 0xAC, 0xAC, 0x00, 0xBD, 0xBD, 0x00, 0xCB, 0xCB, 
   0x00, 0xD8, 0xD8, 0x00, 0xE2, 0xE2, 0x00, 0xEC, 0xEC, 0x00, 0xF1, 0xF1, 0x00, 0xF6, 0xF6, 0x00, 
   0xF9, 0xF9, 0x00, 0xFC, 0xFC, 0x00, 0xFC, 0xFC, 0x00, 0xFC, 0xFC, 0x00, 0xFB, 0xFB, 0x00, 0xF7, 
   0xF7, 0x00, 0xF2, 0xF2, 0x00, 0xEE, 0xEE, 0x00, 0xE7, 0xE7, 0x00, 0xDC, 0xDC, 0x00, 0xD1, 0xD1, 
   0x00, 0xC3, 0xC3, 0x00, 0xB3, 0xB3, 0x00, 0xA0, 0xA0, 0x00, 0x8F, 0x8F, 0x00, 0x7A, 0x7A, 0x00, 
   0x66, 0x66, 0x00, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x35, 0x00, 0x4A, 0x4A, 0x00, 0x5F, 0x5F, 0x00, 0x73, 
   0x73, 0x00, 0x88, 0x88, 0x00, 0x9D, 0x9D, 0x00, 0xAE, 0xAE, 0x00, 0xBF, 0xBF, 0x00, 0xCE, 0xCE, 
   0x00, 0xDB, 0xDB, 0x00, 0xE6, 0xE6, 0x00, 0xEE, 0xEE, 0x00, 0xF4, 0xF4, 0x00, 0xF8, 0xF8, 0x00, 
   0xFC, 0xFC, 0x00, 0xFD, 0xFD, 0x00, 0xFD, 0xFD, 0x00, 0xFD, 0xFD, 0x00, 0xFC, 0xFC, 0x00, 0xF9, 
   0xF9, 0x00, 0xF6, 0xF6, 0x00, 0xEF, 0xEF, 0x00, 0xE8, 0xE8, 0x00, 0xE0, 0xE0, 0x00, 0xD3, 0xD3, 
   0x00, 0xC5, 0xC5, 0x00, 0xB5, 0xB5, 0x00, 0xA4, 0xA4, 0x00, 0x91, 0x91, 0x00, 0x7D, 0x7D, 0x00, 
   0x67, 0x67, 0x00, 0x52, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x35, 0x00, 0x49, 0x49, 0x00, 0x5F, 0x5F, 0x00, 0x73, 
   0x73, 0x00, 0x89, 0x89, 0x00, 0x9E, 0x9E, 0x00, 0xAE, 0xAE, 0x00, 0xC0, 0xC0, 0x00, 0xCF, 0xCF, 
   0x00, 0xDB, 0xDB, 0x00, 0xE6, 0xE6, 0x00, 0xEF, 0xEF, 0x00, 0xF5, 0xF5, 0x00, 0xF8, 0xF8, 0x00, 
   0xFC, 0xFC, 0x00, 0xFD, 0xFD, 0x00, 0xFE, 0xFE, 0x00, 0xFE, 0xFE, 0x00, 0xFC, 0xFC, 0x00, 0xF9, 
   0xF9, 0x00, 0xF6, 0xF6, 0x00, 0xF0, 0xF0, 0x00, 0xE9, 0xE9, 0x00, 0xE0, 0xE0, 0x00, 0xD4, 0xD4, 
   0x00, 0xC6, 0xC6, 0x00, 0xB6, 0xB6, 0x00, 0xA4, 0xA4, 0x00, 0x93, 0x93, 0x00, 0x7E, 0x7E, 0x00, 
   0x68, 0x68, 0x00, 0x53, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x35, 0x00, 0x4A, 0x4A, 0x00, 0x5F, 0x5F, 0x00, 0x73, 
   0x73, 0x00, 0x88, 0x88, 0x00, 0x9D, 0x9D, 0x00, 0xAD, 0xAD, 0x00, 0xBE, 0xBE, 0x00, 0xCF, 0xCF, 
   0x00, 0xDA, 0xDA, 0x00, 0xE6, 0xE6, 0x00, 0xED, 0xED, 0x00, 0xF3, 0xF3, 0x00, 0xF8, 0xF8, 0x00, 
   0xFB, 0xFB, 0x00, 0xFD, 0xFD, 0x00, 0xFE, 0xFE, 0x00, 0xFD, 0xFD, 0x00, 0xFC, 0xFC, 0x00, 0xF9, 
   0xF9, 0x00, 0xF5, 0xF5, 0x00, 0xEF, 0xEF, 0x00, 0xE8, 0xE8, 0x00, 0xDF, 0xDF, 0x00, 0xD3, 0xD3, 
   0x00, 0xC5, 0xC5, 0x00, 0xB5, 0xB5, 0x00, 0xA4, 0xA4, 0x00, 0x93, 0x93, 0x00, 0x7D, 0x7D, 0x00, 
   0x68, 0x68, 0x00, 0x52, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0x00, 0x48, 0x48, 0x00, 0x5C, 0x5C, 0x00, 0x71, 
   0x71, 0x00, 0x86, 0x86, 0x00, 0x99, 0x99, 0x00, 0xAC, 0xAC, 0x00, 0xBC, 0xBC, 0x00, 0xCB, 0xCB, 
   0x00, 0xD9, 0xD9, 0x00, 0xE3, 0xE3, 0x00, 0xEB, 0xEB, 0x00, 0xF1, 0xF1, 0x00, 0xF6, 0xF6, 0x00, 
   0xF9, 0xF9, 0x00, 0xFC, 0xFC, 0x00, 0xFC, 0xFC, 0x00, 0xFC, 0xFC, 0x00, 0xFA, 0xFA, 0x00, 0xF7, 
   0xF7, 0x00, 0xF2, 0xF2, 0x00, 0xEE, 0xEE, 0x00, 0xE6, 0xE6, 0x00, 0xDC, 0xDC, 0x00, 0xD1, 0xD1, 
   0x00, 0xC3, 0xC3, 0x00, 0xB3, 0xB3, 0x00, 0xA0, 0xA0, 0x00, 0x8F, 0x8F, 0x00, 0x7A, 0x7A, 0x00, 
   0x66, 0x66, 0x00, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x2F, 0x00, 0x43, 0x43, 0x00, 0x59, 0x59, 0x00, 0x6C, 
   0x6C, 0x00, 0x82, 0x82, 0x00, 0x96, 0x96, 0x00, 0xA6, 0xA6, 0x00, 0xB7, 0xB7, 0x00, 0xC8, 0xC8, 
   0x00, 0xD4, 0xD4, 0x00, 0xDF, 0xDF, 0x00, 0xE8, 0xE8, 0x00, 0xEE, 0xEE, 0x00, 0xF2, 0xF2, 0x00, 
   0xF7, 0xF7, 0x00, 0xF9, 0xF9, 0x00, 0xF9, 0xF9, 0x00, 0xF8, 0xF8, 0x00, 0xF7, 0xF7, 0x00, 0xF4, 
   0xF4, 0x00, 0xF0, 0xF0, 0x00, 0xEA, 0xEA, 0x00, 0xE2, 0xE2, 0x00, 0xD9, 0xD9, 0x00, 0xCD, 0xCD, 
   0x00, 0xBE, 0xBE, 0x00, 0xAE, 0xAE, 0x00, 0x9C, 0x9C, 0x00, 0x8C, 0x8C, 0x00, 0x77, 0x77, 0x00, 
   0x61, 0x61, 0x00, 0x4C, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x2C, 0x00, 0x3F, 0x3F, 0x00, 0x53, 0x53, 0x00, 0x68, 
   0x68, 0x00, 0x7B, 0x7B, 0x00, 0x90, 0x90, 0x00, 0xA0, 0xA0, 0x00, 0xB3, 0xB3, 0x00, 0xC2, 0xC2, 
   0x00, 0xCD, 0xCD, 0x00, 0xDA, 0xDA, 0x00, 0xE2, 0xE2, 0x00, 0xE9, 0xE9, 0x00, 0xEF, 0xEF, 0x00, 
   0xF1, 0xF1, 0x00, 0xF5, 0xF5, 0x00, 0xF5, 0xF5, 0x00, 0xF4, 0xF4, 0x00, 0xF3, 0xF3, 0x00, 0xF0, 
   0xF0, 0x00, 0xEC, 0xEC, 0x00, 0xE5, 0xE5, 0x00, 0xDC, 0xDC, 0x00, 0xD3, 0xD3, 0x00, 0xC6, 0xC6, 
   0x00, 0xB9, 0xB9, 0x00, 0xA8, 0xA8, 0x00, 0x97, 0x97, 0x00, 0x86, 0x86, 0x00, 0x71, 0x71, 0x00, 
   0x5C, 0x5C, 0x00, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x27, 0x00, 0x39, 0x39, 0x00, 0x4D, 0x4D, 0x00, 0x61, 
   0x61, 0x00, 0x75, 0x75, 0x00, 0x88, 0x88, 0x00, 0x99, 0x99, 0x00, 0xAA, 0xAA, 0x00, 0xBA, 0xBA, 
   0x00, 0xC8, 0xC8, 0x00, 0xD2, 0xD2, 0x00, 0xDB, 0xDB, 0x00, 0xE2, 0xE2, 0x00, 0xE8, 0xE8, 0x00, 
   0xEC, 0xEC, 0x00, 0xEE, 0xEE, 0x00, 0xEF, 0xEF, 0x00, 0xEF, 0xEF, 0x00, 0xED, 0xED, 0x00, 0xE9, 
   0xE9, 0x00, 0xE5, 0xE5, 0x00, 0xDE, 0xDE, 0x00, 0xD6, 0xD6, 0x00, 0xCC, 0xCC, 0x00, 0xC0, 0xC0, 
   0x00, 0xB2, 0xB2, 0x00, 0xA0, 0xA0, 0x00, 0x8F, 0x8F, 0x00, 0x7D, 0x7D, 0x00, 0x69, 0x69, 0x00, 
   0x55, 0x55, 0x00, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x33, 0x33, 0x00, 0x45, 0x45, 0x00, 0x59, 
   0x59, 0x00, 0x6B, 0x6B, 0x00, 0x7F, 0x7F, 0x00, 0x8F, 0x8F, 0x00, 0xA0, 0xA0, 0x00, 0xAF, 0xAF, 
   0x00, 0xBD, 0xBD, 0x00, 0xC9, 0xC9, 0x00, 0xD2, 0xD2, 0x00, 0xDA, 0xDA, 0x00, 0xDF, 0xDF, 0x00, 
   0xE3, 0xE3, 0x00, 0xE6, 0xE6, 0x00, 0xE8, 0xE8, 0x00, 0xE7, 0xE7, 0x00, 0xE5, 0xE5, 0x00, 0xE2, 
   0xE2, 0x00, 0xDD, 0xDD, 0x00, 0xD6, 0xD6, 0x00, 0xCC, 0xCC, 0x00, 0xC2, 0xC2, 0x00, 0xB5, 0xB5, 
   0x00, 0xA7, 0xA7, 0x00, 0x97, 0x97, 0x00, 0x86, 0x86, 0x00, 0x75, 0x75, 0x00, 0x61, 0x61, 0x00, 
   0x4D, 0x4D, 0x00, 0x3A, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x19, 0x00, 0x2B, 0x2B, 0x00, 0x3C, 0x3C, 0x00, 0x4E, 
   0x4E, 0x00, 0x61, 0x61, 0x00, 0x73, 0x73, 0x00, 0x84, 0x84, 0x00, 0x95, 0x95, 0x00, 0xA4, 0xA4, 
   0x00, 0xB2, 0xB2, 0x00, 0xBD, 0xBD, 0x00, 0xC8, 0xC8, 0x00, 0xCF, 0xCF, 0x00, 0xD5, 0xD5, 0x00, 
   0xDA, 0xDA, 0x00, 0xDB, 0xDB, 0x00, 0xDE, 0xDE, 0x00, 0xDD, 0xDD, 0x00, 0xDA, 0xDA, 0x00, 0xD7, 
   0xD7, 0x00, 0xD2, 0xD2, 0x00, 0xCA, 0xCA, 0x00, 0xC2, 0xC2, 0x00, 0xB7, 0xB7, 0x00, 0xAB, 0xAB, 
   0x00, 0x9C, 0x9C, 0x00, 0x8D, 0x8D, 0x00, 0x7A, 0x7A, 0x00, 0x6A, 0x6A, 0x00, 0x58, 0x58, 0x00, 
   0x44, 0x44, 0x00, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x23, 0x23, 0x00, 0x33, 0x33, 0x00, 0x44, 
   0x44, 0x00, 0x57, 0x57, 0x00, 0x68, 0x68, 0x00, 0x77, 0x77, 0x00, 0x88, 0x88, 0x00, 0x97, 0x97, 
   0x00, 0xA5, 0xA5, 0x00, 0xB1, 0xB1, 0x00, 0xBB, 0xBB, 0x00, 0xC2, 0xC2, 0x00, 0xC8, 0xC8, 0x00, 
   0xCD, 0xCD, 0x00, 0xD0, 0xD0, 0x00, 0xD1, 0xD1, 0x00, 0xD1, 0xD1, 0x00, 0xCF, 0xCF, 0x00, 0xCB, 
   0xCB, 0x00, 0xC5, 0xC5, 0x00, 0xBE, 0xBE, 0x00, 0xB5, 0xB5, 0x00, 0xAA, 0xAA, 0x00, 0x9E, 0x9E, 
   0x00, 0x8F, 0x8F, 0x00, 0x7F, 0x7F, 0x00, 0x6E, 0x6E, 0x00, 0x5D, 0x5D, 0x00, 0x4C, 0x4C, 0x00, 
   0x3A, 0x3A, 0x00, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x18, 0x18, 0x00, 0x2A, 0x2A, 0x00, 0x3A, 
   0x3A, 0x00, 0x4B, 0x4B, 0x00, 0x5B, 0x5B, 0x00, 0x6A, 0x6A, 0x00, 0x7A, 0x7A, 0x00, 0x88, 0x88, 
   0x00, 0x96, 0x96, 0x00, 0xA2, 0xA2, 0x00, 0xAC, 0xAC, 0x00, 0xB4, 0xB4, 0x00, 0xB9, 0xB9, 0x00, 
   0xBF, 0xBF, 0x00, 0xC2, 0xC2, 0x00, 0xC3, 0xC3, 0x00, 0xC2, 0xC2, 0x00, 0xC1, 0xC1, 0x00, 0xBC, 
   0xBC, 0x00, 0xB7, 0xB7, 0x00, 0xB0, 0xB0, 0x00, 0xA6, 0xA6, 0x00, 0x9B, 0x9B, 0x00, 0x8E, 0x8E, 
   0x00, 0x81, 0x81, 0x00, 0x71, 0x71, 0x00, 0x61, 0x61, 0x00, 0x51, 0x51, 0x00, 0x41, 0x41, 0x00, 
   0x2F, 0x2F, 0x00, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x00, 0x1E, 0x1E, 0x00, 0x2E, 
   0x2E, 0x00, 0x3D, 0x3D, 0x00, 0x4D, 0x4D, 0x00, 0x5B, 0x5B, 0x00, 0x6A, 0x6A, 0x00, 0x78, 0x78, 
   0x00, 0x85, 0x85, 0x00, 0x90, 0x90, 0x00, 0x9B, 0x9B, 0x00, 0xA3, 0xA3, 0x00, 0xA8, 0xA8, 0x00, 
   0xAE, 0xAE, 0x00, 0xB2, 0xB2, 0x00, 0xB2, 0xB2, 0x00, 0xB2, 0xB2, 0x00, 0xAF, 0xAF, 0x00, 0xAB, 
   0xAB, 0x00, 0xA6, 0xA6, 0x00, 0x9E, 0x9E, 0x00, 0x96, 0x96, 0x00, 0x8C, 0x8C, 0x00, 0x7E, 0x7E, 
   0x00, 0x71, 0x71, 0x00, 0x62, 0x62, 0x00, 0x52, 0x52, 0x00, 0x44, 0x44, 0x00, 0x34, 0x34, 0x00, 
   0x24, 0x24, 0x00, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x14, 0x14, 0x00, 0x23, 
   0x23, 0x00, 0x32, 0x32, 0x00, 0x41, 0x41, 0x00, 0x4D, 0x4D, 0x00, 0x5C, 0x5C, 0x00, 0x69, 0x69, 
   0x00, 0x76, 0x76, 0x00, 0x80, 0x80, 0x00, 0x89, 0x89, 0x00, 0x91, 0x91, 0x00, 0x97, 0x97, 0x00, 
   0x9D, 0x9D, 0x00, 0xA1, 0xA1, 0x00, 0xA1, 0xA1, 0x00, 0xA2, 0xA2, 0x00, 0x9F, 0x9F, 0x00, 0x9C, 
   0x9C, 0x00, 0x96, 0x96, 0x00, 0x8E, 0x8E, 0x00, 0x85, 0x85, 0x00, 0x7A, 0x7A, 0x00, 0x6F, 0x6F, 
   0x00, 0x62, 0x62, 0x00, 0x53, 0x53, 0x00, 0x45, 0x45, 0x00, 0x37, 0x37, 0x00, 0x28, 0x28, 0x00, 
   0x18, 0x18, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x15, 
   0x15, 0x00, 0x24, 0x24, 0x00, 0x32, 0x32, 0x00, 0x3D, 0x3D, 0x00, 0x4B, 0x4B, 0x00, 0x58, 0x58, 
   0x00, 0x63, 0x63, 0x00, 0x6E, 0x6E, 0x00, 0x77, 0x77, 0x00, 0x7F, 0x7F, 0x00, 0x83, 0x83, 0x00, 
   0x89, 0x89, 0x00, 0x8D, 0x8D, 0x00, 0x8E, 0x8E, 0x00, 0x8D, 0x8D, 0x00, 0x8C, 0x8C, 0x00, 0x87, 
   0x87, 0x00, 0x81, 0x81, 0x00, 0x7B, 0x7B, 0x00, 0x72, 0x72, 0x00, 0x68, 0x68, 0x00, 0x5D, 0x5D, 
   0x00, 0x51, 0x51, 0x00, 0x43, 0x43, 0x00, 0x35, 0x35, 0x00, 0x2A, 0x2A, 0x00, 0x1B, 0x1B, 0x00, 
   0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
   0x07, 0x00, 0x16, 0x16, 0x00, 0x23, 0x23, 0x00, 0x2F, 0x2F, 0x00, 0x3B, 0x3B, 0x00, 0x45, 0x45, 
   0x00, 0x51, 0x51, 0x00, 0x5B, 0x5B, 0x00, 0x63, 0x63, 0x00, 0x6B, 0x6B, 0x00, 0x6F, 0x6F, 0x00, 
   0x75, 0x75, 0x00, 0x78, 0x78, 0x00, 0x78, 0x78, 0x00, 0x78, 0x78, 0x00, 0x76, 0x76, 0x00, 0x72, 
   0x72, 0x00, 0x6E, 0x6E, 0x00, 0x66, 0x66, 0x00, 0x5F, 0x5F, 0x00, 0x55, 0x55, 0x00, 0x4B, 0x4B, 
   0x00, 0x3F, 0x3F, 0x00, 0x33, 0x33, 0x00, 0x27, 0x27, 0x00, 0x1B, 0x1B, 0x00, 0x0B, 0x0B, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x06, 0x06, 0x00, 0x14, 0x14, 0x00, 0x1F, 0x1F, 0x00, 0x2A, 0x2A, 0x00, 0x34, 0x34, 
   0x00, 0x3E, 0x3E, 0x00, 0x48, 0x48, 0x00, 0x50, 0x50, 0x00, 0x56, 0x56, 0x00, 0x5A, 0x5A, 0x00, 
   0x5F, 0x5F, 0x00, 0x62, 0x62, 0x00, 0x63, 0x63, 0x00, 0x62, 0x62, 0x00, 0x61, 0x61, 0x00, 0x5E, 
   0x5E, 0x00, 0x59, 0x59, 0x00, 0x52, 0x52, 0x00, 0x4B, 0x4B, 0x00, 0x43, 0x43, 0x00, 0x39, 0x39, 
   0x00, 0x2E, 0x2E, 0x00, 0x23, 0x23, 0x00, 0x17, 0x17, 0x00, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0E, 0x0E, 0x00, 0x1B, 0x1B, 0x00, 0x24, 0x24, 
   0x00, 0x2D, 0x2D, 0x00, 0x34, 0x34, 0x00, 0x3C, 0x3C, 0x00, 0x42, 0x42, 0x00, 0x45, 0x45, 0x00, 
   0x49, 0x49, 0x00, 0x4C, 0x4C, 0x00, 0x4D, 0x4D, 0x00, 0x4C, 0x4C, 0x00, 0x4B, 0x4B, 0x00, 0x49, 
   0x49, 0x00, 0x44, 0x44, 0x00, 0x3D, 0x3D, 0x00, 0x37, 0x37, 0x00, 0x2F, 0x2F, 0x00, 0x26, 0x26, 
   0x00, 0x1D, 0x1D, 0x00, 0x11, 0x11, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x11, 
   0x11, 0x00, 0x1A, 0x1A, 0x00, 0x23, 0x23, 0x00, 0x28, 0x28, 0x00, 0x2E, 0x2E, 0x00, 0x32, 0x32, 
   0x00, 0x34, 0x34, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x38, 0x38, 0x00, 
   0x34, 0x34, 0x00, 0x2F, 0x2F, 0x00, 0x2B, 0x2B, 0x00, 0x24, 0x24, 0x00, 0x1D, 0x1D, 0x00, 0x15, 
   0x15, 0x00, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x11, 0x00, 
   0x11, 0x1A, 0x00, 0x1A, 0x23, 0x00, 0x23, 0x28, 0x00, 0x28, 0x2E, 0x00, 0x2E, 0x32, 0x00, 0x32, 
   0x34, 0x00, 0x34, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x38, 0x00, 0x38, 0x34, 
   0x00, 0x34, 0x2F, 0x00, 0x2F, 0x2B, 0x00, 0x2B, 0x24, 0x00, 0x24, 0x1D, 0x00, 0x1D, 0x15, 0x00, 
   0x15, 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x11, 0x11, 
   0x11, 0x1A, 0x1A, 0x1A, 0x23, 0x23, 0x23, 0x28, 0x28, 0x28, 0x2E, 0x2E, 0x2E, 0x32, 0x32, 0x32, 
   0x34, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x34, 
   0x34, 0x34, 0x2F, 0x2F, 0x2F, 0x2B, 0x2B, 0x2B, 0x24, 0x24, 0x24, 0x1D, 0x1D, 0x1D, 0x15, 0x15, 
   0x15, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x11, 0x11, 
   0x00, 0x1A, 0x1A, 0x00, 0x23, 0x23, 0x00, 0x28, 0x28, 0x00, 0x2E, 0x2E, 0x00, 0x32, 0x32, 0x00, 
   0x34, 0x34, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x38, 0x38, 0x00, 0x34, 
   0x34, 0x00, 0x2F, 0x2F, 0x00, 0x2B, 0x2B, 0x00, 0x24, 0x24, 0x00, 0x1D, 0x1D, 0x00, 0x15, 0x15, 
   0x00, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_tclptex6(TEXT(""), TEXT("tclptex6.bmp"), g_tclptex6, sizeof(g_tclptex6));

extern "C" LPVOID PREPEND_MODULE(_tclptex6) = (LPVOID)&g_rd_tclptex6;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=wrap1
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_wrap1.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\wrap.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    wrap.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include "d3dlocus.h"
#include "wrap.h"

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CWrap*   pWrap;
    BOOL     bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pWrap = new CWrap();
    if (!pWrap) {
        return FALSE;
    }

    // Initialize the scene
    if (!pWrap->Create(pDisplay)) {
        pWrap->Release();
        return FALSE;
    }

    bRet = pWrap->Exhibit(pnExitCode);

    // Clean up the scene
    pWrap->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CWrap
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CWrap
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CWrap::CWrap() {

    // Initialize the vertices
    m_prVertices[0] = TLVERTEX(D3DXVECTOR3(160.0f, 360.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.9f, 0.2f);
    m_prVertices[1] = TLVERTEX(D3DXVECTOR3(160.0f, 120.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.9f, 0.9f);
    m_prVertices[2] = TLVERTEX(D3DXVECTOR3(480.0f, 120.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.2f, 0.9f);
    m_prVertices[3] = TLVERTEX(D3DXVECTOR3(480.0f, 360.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.2f, 0.2f);
}

//******************************************************************************
//
// Method:
//
//     ~CWrap
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CWrap::~CWrap() {
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CWrap::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CWrap::Exhibit(int *pnExitCode) {

    return CScene::Exhibit(pnExitCode);
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CWrap::Prepare() {

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CWrap::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CWrap::Initialize() {

    m_pd3dt = (CTexture8*)CreateTexture(m_pDevice, TEXT("texture.bmp"));
    if (!m_pd3dt) {
        return FALSE;
    }

    m_pDevice->SetTexture(0, m_pd3dt);

    m_pDevice->SetRenderState(D3DRS_WRAP0, (DWORD)(D3DWRAP_U | D3DWRAP_V));

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CWrap::Efface() {

    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CWrap::Update() {

    CScene::Update();
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CWrap::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_TLVERTEX);

    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prVertices, sizeof(TLVERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CWrap::ProcessInput() {

    CScene::ProcessInput();
}
//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CWrap::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CWrap::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\wrap.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    wrap.h

Author:

    Matt Bronder

Description:

    Direct3D test functions.

*******************************************************************************/

#ifndef __WRAP_H__
#define __WRAP_H__

//******************************************************************************
class CWrap : public CScene {

protected:

    TLVERTEX                        m_prVertices[4];
    CTexture8*                      m_pd3dt;

public:

                                    CWrap();
                                    ~CWrap();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__WRAP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\exe\include.cpp ===
#pragma comment(linker, "/include:_wrap1_texture")
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\exe\sources.inc ===
TARGETNAME=wrap1
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\m_wrap1.lib \
    $(TEST_LIB_PATH)\l_wrap1.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\xgcompile\sources.inc ===
TARGETNAME=xgcompile
TARGETPATH=obj
TARGETTYPE=PROGRAM

SOURCES= \
    main.cpp \
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\media\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=m_wrap1
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

USER_C_FLAGS=$(USER_C_FLAGS) /Zm180

SOURCES=\
    texture.bmp.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\wrap1\media\texture.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    texture.bmp.cpp

Description

    Data file for the resource texture.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_texture[] = {

   0x42, 0x4D, 0x38, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 
   0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 
   0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x9A, 0x66, 0x01, 0x99, 0x65, 0x00, 
   0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 
   0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 
   0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 
   0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 
   0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 
   0x4B, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 
   0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 
   0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 
   0x00, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x00, 
   0xCA, 0x35, 0x00, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 
   0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD7, 0x28, 
   0x00, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 
   0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDB, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x21, 
   0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE5, 
   0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x00, 0xE6, 0x19, 0x00, 0xE6, 0x19, 0x01, 0xE7, 0x19, 
   0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 
   0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 
   0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x11, 
   0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 
   0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF5, 
   0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 
   0x01, 0xF8, 0x08, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xF9, 0x06, 0x01, 
   0xFA, 0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x04, 0x01, 0xFB, 0x04, 0x01, 0xFC, 0x04, 0x01, 0xFD, 
   0x03, 0x01, 0xFD, 0x03, 0x01, 0xFD, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 
   0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x01, 0x8D, 
   0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6F, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 
   0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x67, 0x00, 0x9A, 0x66, 0x01, 
   0x99, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 
   0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 
   0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x43, 0x00, 0xBC, 
   0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 
   0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC7, 0x39, 0x01, 0xC6, 0x39, 
   0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x31, 0x00, 0xCE, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2D, 0x01, 0xD3, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2C, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 
   0x00, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 
   0xD9, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDC, 
   0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 
   0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 
   0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 
   0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 
   0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x00, 0xEC, 
   0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 
   0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 
   0xF2, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 
   0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x09, 
   0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x08, 0x01, 0xF9, 0x07, 0x01, 0xF9, 0x06, 0x01, 
   0xFA, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 0x05, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x04, 0x01, 0xFC, 
   0x04, 0x01, 0xFD, 0x04, 0x01, 0xFD, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 
   0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 
   0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 
   0x74, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 
   0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6D, 0x00, 0x94, 0x6C, 0x01, 0x93, 
   0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 
   0x01, 0x97, 0x69, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 
   0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 
   0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5A, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 
   0x00, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 
   0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 
   0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 
   0x01, 0xC6, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x00, 
   0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 
   0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x31, 0x01, 0xCF, 0x31, 
   0x00, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2C, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x00, 
   0xD9, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 
   0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 
   0xE1, 0x1F, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 
   0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x00, 0xE8, 0x17, 0x01, 
   0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x00, 0xEB, 0x14, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 
   0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 
   0xF1, 0x0F, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 
   0x00, 0xF7, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x07, 0x01, 
   0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x04, 0x01, 0xFB, 
   0x04, 0x01, 0xFC, 0x03, 0x01, 0xFC, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 
   0x80, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x87, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 
   0x73, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x6A, 
   0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 
   0x64, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 
   0x5B, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5A, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 
   0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x42, 
   0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 
   0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 
   0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2B, 0x01, 0xD6, 0x2A, 
   0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 
   0x25, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 
   0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x00, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 
   0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 
   0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x10, 0x01, 
   0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 
   0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 
   0xF9, 0x08, 0x01, 0xF9, 0x06, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 
   0x05, 0x01, 0xFC, 0x04, 0x01, 0xFC, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 0x01, 
   0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 
   0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x99, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 
   0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA1, 0x5E, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xAA, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x52, 0x00, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB9, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x43, 
   0x01, 0xBE, 0x41, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x01, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCE, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 
   0xD1, 0x2F, 0x01, 0xD0, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 
   0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 
   0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x00, 0xD7, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDB, 
   0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 
   0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x1F, 0x01, 
   0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 
   0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 
   0x00, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x18, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 
   0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 
   0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 
   0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 
   0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x00, 0xF2, 
   0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0B, 0x00, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 
   0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 0x01, 
   0xF8, 0x07, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 
   0x05, 0x01, 0xFB, 0x04, 0x01, 0xFB, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 
   0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7B, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 
   0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 
   0x00, 0x9E, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 
   0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 
   0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x53, 0x00, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x53, 
   0x00, 0xAE, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 
   0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 
   0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x48, 0x01, 0xB9, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 
   0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x38, 0x00, 
   0xC8, 0x37, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 
   0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 
   0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 
   0xD8, 0x28, 0x00, 0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDB, 
   0x25, 0x01, 0xDA, 0x25, 0x00, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x22, 
   0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xE0, 0x20, 0x01, 
   0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 
   0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 
   0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x00, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 
   0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 
   0x01, 0xED, 0x12, 0x00, 0xED, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x00, 
   0xF0, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 
   0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF5, 0x0B, 
   0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x08, 0x01, 
   0xF7, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 
   0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x82, 0x7D, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 
   0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 
   0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x91, 
   0x6E, 0x01, 0x93, 0x6C, 0x00, 0x92, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6A, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x69, 0x00, 0x96, 0x6A, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 
   0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 
   0x66, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA1, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA2, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 
   0x56, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 
   0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x48, 0x00, 
   0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x00, 
   0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 
   0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x00, 0xC6, 0x38, 0x01, 
   0xC7, 0x39, 0x01, 0xC8, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 
   0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 
   0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 
   0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 
   0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x01, 0xDC, 0x23, 
   0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x20, 0x00, 
   0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 
   0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 
   0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 
   0x16, 0x00, 0xEB, 0x15, 0x01, 0xEA, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 
   0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 
   0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0C, 
   0x01, 0xF5, 0x0B, 0x00, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x00, 0xF6, 0x09, 0x01, 
   0xF7, 0x09, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xF9, 
   0x06, 0x01, 0xFA, 0x05, 0x01, 0xFB, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 
   0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7F, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 
   0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x93, 0x6B, 
   0x01, 0x95, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 
   0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 
   0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 
   0x46, 0x00, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x43, 
   0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x00, 
   0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x36, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 
   0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 
   0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xD9, 
   0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 
   0x00, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x00, 
   0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1E, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 
   0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 
   0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 
   0x16, 0x01, 0xEA, 0x15, 0x00, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x00, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 
   0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 
   0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 
   0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 
   0xF6, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x08, 0x00, 0xF9, 0x07, 0x01, 0xF9, 
   0x06, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 
   0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x78, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 
   0x96, 0x68, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 
   0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 
   0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 
   0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4D, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 
   0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x00, 0xB9, 
   0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 
   0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 
   0x37, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 
   0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 
   0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2A, 0x00, 0xD6, 0x2A, 0x01, 
   0xD6, 0x2A, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE1, 0x1E, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 
   0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 
   0xE7, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE9, 
   0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x00, 0xEA, 0x15, 0x00, 0xEB, 0x15, 0x01, 0xEB, 0x14, 
   0x01, 0xEB, 0x13, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 
   0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 
   0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 
   0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF6, 0x0A, 0x01, 
   0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF8, 
   0x07, 0x01, 0xF9, 0x06, 0x01, 0xF9, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 
   0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 
   0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x76, 0x00, 0x89, 0x77, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 
   0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 
   0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 
   0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 
   0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 
   0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4D, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 
   0xB5, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 
   0x47, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 
   0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 
   0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 
   0xC5, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x32, 0x01, 
   0xCD, 0x32, 0x00, 0xCE, 0x31, 0x00, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 
   0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 
   0xD6, 0x2A, 0x01, 0xD7, 0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 
   0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 0x23, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x00, 0xE0, 0x20, 0x01, 0xE0, 
   0x1F, 0x01, 0xE1, 0x1E, 0x00, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 
   0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 
   0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x00, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 
   0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 
   0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 
   0xEE, 0x12, 0x00, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x00, 0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 
   0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 
   0x01, 0xF3, 0x0D, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 
   0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF7, 0x08, 0x00, 0xF8, 
   0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 
   0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 
   0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x71, 0x00, 0x8D, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 
   0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x69, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x66, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA3, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 
   0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 
   0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 
   0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x42, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 
   0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x32, 0x01, 
   0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 
   0x30, 0x00, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 
   0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 
   0xD6, 0x2A, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 
   0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x25, 
   0x01, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 
   0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 
   0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x00, 0xE7, 0x18, 0x01, 0xE8, 
   0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 
   0x00, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x13, 0x01, 0xEC, 0x14, 0x00, 0xED, 0x13, 0x01, 
   0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x00, 0xF0, 
   0x10, 0x01, 0xF0, 0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 
   0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 
   0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 
   0x08, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x01, 
   0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 
   0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 
   0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9F, 0x60, 0x00, 0x9E, 0x61, 0x01, 0xA0, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA4, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x56, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 
   0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 
   0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 
   0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x45, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBC, 0x42, 0x00, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xC0, 
   0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 
   0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC8, 
   0x39, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x38, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 
   0x00, 0xCA, 0x36, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x35, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xD0, 
   0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 
   0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 
   0x00, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x23, 0x01, 
   0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xDF, 
   0x20, 0x00, 0xE0, 0x20, 0x00, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 
   0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 
   0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x18, 0x01, 0xE7, 
   0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x15, 
   0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 
   0xED, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 
   0x01, 0xF1, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 
   0xF5, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 
   0x09, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7D, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 
   0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 
   0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x64, 0x01, 
   0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 
   0xA5, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 
   0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 
   0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x00, 
   0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 
   0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x00, 
   0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 
   0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x00, 
   0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 
   0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD5, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x00, 0xD9, 0x27, 0x01, 0xD9, 0x26, 
   0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 
   0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x00, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 
   0x01, 0xE2, 0x1E, 0x00, 0xE3, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 
   0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 
   0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 
   0xEC, 0x13, 0x01, 0xED, 0x13, 0x00, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 
   0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 
   0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF7, 
   0x09, 0x01, 0xF7, 0x09, 0x01, 0xF8, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 
   0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x87, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 
   0x01, 0x92, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 
   0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x00, 
   0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 
   0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 
   0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB7, 
   0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x46, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 
   0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 
   0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 
   0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 
   0x00, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 
   0xDB, 0x24, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 
   0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 
   0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 
   0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 
   0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 
   0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x00, 0xED, 0x12, 0x01, 0xEE, 
   0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 
   0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 
   0xF4, 0x0C, 0x00, 0xF4, 0x0C, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 
   0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 
   0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 
   0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 
   0x8B, 0x73, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 
   0x5A, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 
   0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x51, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 
   0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 
   0xB4, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB5, 
   0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB9, 0x47, 
   0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBE, 0x42, 0x01, 0xBD, 
   0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 
   0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 
   0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 
   0x32, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 
   0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x25, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 
   0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 
   0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 
   0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 
   0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEB, 0x16, 0x01, 0xEA, 0x15, 0x01, 
   0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xEE, 
   0x12, 0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 
   0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 
   0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x00, 0xF5, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 
   0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 
   0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x00, 
   0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 
   0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 
   0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 
   0x59, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 
   0xAB, 0x55, 0x01, 0xAB, 0x53, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x51, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x00, 
   0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 
   0x4A, 0x00, 0xB5, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 
   0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBB, 0x45, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBD, 
   0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 
   0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 
   0xC2, 0x3D, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3A, 0x00, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x38, 
   0x00, 0xC9, 0x37, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 
   0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 
   0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 
   0x2B, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x28, 
   0x01, 0xD9, 0x28, 0x00, 0xD8, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 
   0xDA, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 
   0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 
   0x01, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 
   0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x17, 0x01, 0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 
   0xEB, 0x15, 0x00, 0xEB, 0x15, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 
   0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 
   0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 
   0xF2, 0x0C, 0x01, 0xF3, 0x0D, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 
   0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 
   0x7A, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 
   0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 
   0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x92, 0x6C, 0x01, 0x92, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 
   0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 
   0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x53, 0x01, 0xAE, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 
   0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x00, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 
   0x4B, 0x01, 0xB6, 0x49, 0x01, 0xB5, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x47, 0x00, 0xB9, 0x45, 0x01, 0xBA, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x00, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBE, 0x40, 0x01, 0xBF, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 
   0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCD, 
   0x32, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 
   0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 
   0xD3, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 
   0x01, 0xD8, 0x27, 0x00, 0xD9, 0x28, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 
   0xDA, 0x25, 0x01, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 
   0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1E, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 
   0x01, 0xE7, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 
   0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x13, 0x00, 0xEC, 
   0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 
   0x00, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0D, 0x01, 
   0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF5, 
   0x0A, 0x01, 0xF5, 0x0B, 0x01, 0xF6, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 
   0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 
   0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 
   0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x69, 
   0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 
   0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 
   0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 
   0x52, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 
   0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4F, 0x00, 0xB2, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 
   0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 
   0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x00, 
   0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 
   0x01, 0xD8, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 
   0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 
   0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x20, 0x01, 0xE0, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 
   0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1B, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE6, 0x19, 
   0x00, 0xE8, 0x18, 0x01, 0xE8, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 0x01, 
   0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 0x01, 0xEC, 
   0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 
   0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF2, 0x0F, 0x01, 
   0xF2, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 
   0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x78, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 
   0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 
   0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x95, 0x69, 0x01, 0x97, 0x69, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 
   0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9D, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5C, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x00, 0xAF, 0x51, 
   0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 
   0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 
   0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 0x36, 0x01, 
   0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 
   0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x29, 0x01, 0xD6, 0x29, 
   0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x27, 0x00, 
   0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x00, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 
   0x00, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 
   0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 
   0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 
   0xEA, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x14, 0x01, 0xEB, 0x15, 0x01, 0xEC, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 
   0x00, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 
   0xF1, 0x0E, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF4, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x72, 
   0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x00, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9D, 0x61, 
   0x01, 0x9E, 0x60, 0x00, 0x9E, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAC, 
   0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 
   0xB0, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 
   0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 
   0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 
   0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 
   0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC8, 0x38, 0x00, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x00, 0xCB, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x33, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 
   0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD6, 0x2A, 0x01, 0xD5, 0x29, 
   0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE1, 0x1F, 0x00, 
   0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 
   0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x00, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 
   0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 
   0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 
   0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 
   0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 
   0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 
   0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 
   0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x51, 
   0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4D, 0x00, 0xB4, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 
   0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 
   0xB8, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x44, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 
   0x00, 0xBD, 0x41, 0x00, 0xBF, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 
   0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x34, 0x01, 0xCB, 0x34, 0x00, 0xCB, 0x33, 0x01, 0xCD, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 
   0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x2F, 0x01, 
   0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 0xD2, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 
   0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD6, 0x2B, 
   0x01, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x00, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x00, 0xE6, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 
   0xE8, 0x17, 0x00, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x15, 0x01, 0xEB, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 
   0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 
   0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF3, 
   0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 
   0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 
   0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x77, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x76, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x01, 0x8E, 0x72, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6C, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 
   0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x63, 
   0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 
   0x55, 0x00, 0xAB, 0x55, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 
   0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 
   0x00, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC8, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x32, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 
   0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 
   0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x23, 
   0x01, 0xDE, 0x23, 0x00, 0xDD, 0x21, 0x01, 0xDF, 0x22, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 
   0x1E, 0x00, 0xE2, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x00, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE8, 0x19, 0x01, 
   0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x00, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 
   0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x00, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x12, 
   0x01, 0xED, 0x12, 0x00, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 
   0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 
   0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x87, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x7A, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x84, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 
   0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 
   0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 
   0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6C, 0x00, 0x93, 0x6D, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 
   0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x66, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 
   0x01, 0x9C, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 
   0xA0, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA5, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 
   0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAF, 0x51, 0x01, 0xAE, 0x50, 0x00, 
   0xAF, 0x4F, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4D, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x00, 0xB7, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 
   0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 
   0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 
   0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x00, 
   0xD7, 0x29, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 
   0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x00, 0xDC, 0x24, 
   0x00, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x00, 
   0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 
   0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 
   0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 
   0x15, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x13, 
   0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 
   0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 
   0x0E, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x74, 
   0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6C, 
   0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 
   0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x61, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5F, 0x00, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 
   0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x54, 0x01, 0xAA, 0x55, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAF, 0x51, 0x00, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 
   0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 
   0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x00, 0xBB, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x2A, 0x01, 
   0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 
   0x26, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDC, 0x23, 
   0x01, 0xDC, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x20, 0x00, 0xE0, 0x1E, 0x01, 0xE1, 
   0x1E, 0x00, 0xE1, 0x1E, 0x01, 0xE3, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 
   0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x1A, 0x01, 
   0xE7, 0x19, 0x01, 0xE8, 0x19, 0x01, 0xE7, 0x17, 0x01, 0xE8, 0x17, 0x00, 0xE8, 0x17, 0x01, 0xE9, 
   0x16, 0x01, 0xE9, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 
   0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x00, 0xF1, 0x0F, 0x01, 0xF1, 
   0x0F, 0x01, 0xF1, 0x0D, 0x01, 0xF2, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 
   0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 
   0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x95, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 
   0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0x9F, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5F, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 
   0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 
   0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 
   0x56, 0x00, 0xA9, 0x55, 0x01, 0xA9, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x54, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 
   0xAF, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x47, 0x00, 0xBA, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 
   0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 
   0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x37, 0x00, 0xC8, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 
   0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 
   0x2E, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 
   0xD6, 0x29, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xDA, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 
   0x01, 0xDC, 0x23, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x00, 
   0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x00, 0xE0, 0x1F, 0x01, 0xE1, 
   0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 
   0x00, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x00, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x00, 
   0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 
   0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x12, 0x01, 0xED, 0x13, 0x01, 0xEE, 0x12, 0x01, 
   0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 
   0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF2, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 
   0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 
   0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 
   0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 
   0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 
   0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x59, 0x01, 
   0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 
   0x56, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 
   0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 
   0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x42, 0x01, 0xBF, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 
   0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 
   0xCD, 0x32, 0x00, 0xCE, 0x32, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2D, 
   0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x00, 
   0xD6, 0x2A, 0x01, 0xD7, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD8, 0x28, 0x01, 0xD8, 
   0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDB, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x00, 
   0xDD, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 
   0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1D, 
   0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x00, 0xE4, 0x1C, 0x01, 0xE4, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 
   0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 
   0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 
   0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x00, 
   0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x00, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x00, 0xF0, 
   0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x72, 0x8C, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x77, 0x87, 0x01, 0x79, 
   0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6C, 
   0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 0x66, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA4, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 
   0x58, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 
   0xAE, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 
   0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 
   0xB5, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x45, 
   0x01, 0xBA, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3F, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 
   0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x39, 0x01, 0xC8, 
   0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xD0, 
   0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 
   0x01, 0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD7, 
   0x28, 0x00, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDC, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 
   0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 
   0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 
   0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 
   0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x00, 0xE9, 0x16, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 
   0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x12, 0x01, 
   0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 
   0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 
   0x7D, 0x81, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 
   0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 
   0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x66, 
   0x00, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x00, 0xA8, 0x58, 0x00, 0xA8, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xA9, 0x55, 
   0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 
   0xAD, 0x53, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 
   0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 0x4B, 0x01, 0xB3, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 
   0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBD, 0x43, 0x00, 
   0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 
   0x40, 0x01, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 
   0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 
   0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xC9, 0x35, 
   0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 0xCF, 
   0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 
   0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x00, 
   0xD5, 0x2B, 0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDB, 0x24, 0x00, 0xDD, 0x23, 0x00, 
   0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 
   0x20, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 0x01, 0xE2, 0x1E, 
   0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1C, 0x01, 
   0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x1A, 0x01, 0xE6, 0x18, 0x01, 0xE8, 
   0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x00, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xE9, 0x16, 
   0x01, 0xEB, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 
   0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 
   0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 
   0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x00, 0x9A, 0x66, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5A, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 
   0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB2, 0x4E, 
   0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 
   0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x00, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 
   0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 
   0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x00, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 
   0x39, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 
   0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 
   0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 
   0x01, 0xD9, 0x25, 0x00, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 0x24, 0x01, 
   0xDC, 0x24, 0x00, 0xDD, 0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x21, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 
   0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 
   0xE4, 0x1B, 0x00, 0xE4, 0x1A, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 
   0x00, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 
   0xEC, 0x14, 0x01, 0xED, 0x13, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8C, 0x01, 
   0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 
   0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 
   0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 
   0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 
   0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 
   0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 
   0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 
   0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5B, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 
   0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xAA, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 
   0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 
   0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 
   0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC2, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 
   0xC3, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 
   0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x29, 0x00, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD8, 0x29, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 
   0x01, 0xDA, 0x26, 0x01, 0xD9, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x25, 0x01, 
   0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x22, 0x00, 0xDE, 0x22, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1E, 
   0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1C, 0x00, 
   0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 
   0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 
   0x01, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 
   0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xEE, 0x12, 0x01, 0xEE, 
   0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x79, 0x87, 0x00, 0x78, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 
   0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x73, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 
   0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 
   0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 
   0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 
   0x01, 0xB8, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 
   0x42, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 
   0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 
   0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 
   0x2A, 0x01, 0xD7, 0x2A, 0x00, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 
   0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x24, 0x01, 
   0xDB, 0x25, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDE, 0x22, 0x00, 0xDE, 
   0x22, 0x00, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE0, 0x1F, 
   0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 
   0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x00, 0xE6, 0x1B, 0x01, 0xE5, 
   0x19, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 
   0xEC, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x13, 0x00, 0xEE, 
   0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x01, 0x79, 0x85, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 
   0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 
   0x8A, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 
   0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 
   0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xA9, 0x55, 0x01, 0xAB, 0x55, 0x01, 
   0xAB, 0x55, 0x00, 0xAC, 0x54, 0x00, 0xAB, 0x53, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 
   0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 
   0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBB, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 
   0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC6, 
   0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 
   0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 
   0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 
   0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 
   0x2A, 0x00, 0xD6, 0x2A, 0x00, 0xD7, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 
   0x01, 0xD8, 0x28, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 
   0x01, 0xE0, 0x1F, 0x00, 0xE0, 0x1F, 0x00, 0xE1, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 
   0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 
   0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 
   0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x88, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 
   0x00, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 
   0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 
   0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x00, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 
   0xAB, 0x54, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAC, 
   0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xB0, 0x50, 
   0x00, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4C, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 
   0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xB9, 0x45, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 
   0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 
   0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 
   0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x00, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD5, 
   0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDB, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 
   0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1C, 0x00, 0xE5, 0x1B, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 
   0x01, 0xE8, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x15, 0x01, 
   0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x00, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 
   0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x90, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8C, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 
   0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x01, 0x88, 0x78, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x00, 
   0x92, 0x6E, 0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 
   0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 
   0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0xA0, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 
   0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x46, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 
   0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 
   0xCA, 0x36, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD6, 0x2B, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 
   0xD9, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 
   0x24, 0x00, 0xDC, 0x23, 0x00, 0xDE, 0x22, 0x00, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 
   0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1B, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x18, 
   0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x16, 0x01, 0xE9, 0x16, 0x01, 
   0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 
   0x13, 0x01, 0xEC, 0x12, 0x01, 0xED, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x90, 0x00, 0x6E, 0x90, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x87, 0x01, 0x79, 0x85, 0x00, 
   0x7A, 0x86, 0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 
   0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 
   0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x60, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x00, 
   0xAA, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAF, 0x51, 
   0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 
   0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 
   0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 
   0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x00, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 
   0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 
   0x00, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 
   0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 
   0xD9, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDA, 0x25, 0x00, 0xDB, 0x25, 0x00, 0xDC, 0x25, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 
   0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 
   0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 
   0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x1A, 
   0x01, 0xE7, 0x19, 0x00, 0xE7, 0x18, 0x00, 0xE7, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 
   0xE9, 0x16, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 
   0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 
   0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x7A, 
   0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 
   0x00, 0x8F, 0x70, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 
   0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 
   0x99, 0x67, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x00, 0x9C, 0x64, 0x00, 0x9D, 0x62, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5E, 0x01, 
   0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 
   0x00, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x57, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 
   0x00, 0xAE, 0x50, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x00, 
   0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 
   0x44, 0x01, 0xBB, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC4, 
   0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 
   0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 0x00, 0xD3, 
   0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 0x01, 
   0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDB, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 
   0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 
   0xE8, 0x17, 0x01, 0xE9, 0x16, 0x00, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x89, 
   0x00, 0x77, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 
   0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9B, 
   0x65, 0x01, 0x9C, 0x63, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 
   0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA2, 
   0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x00, 
   0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x50, 0x01, 
   0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 
   0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 
   0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 
   0x00, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 
   0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 
   0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 
   0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD5, 0x2C, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 
   0x01, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x01, 0xD6, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD7, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDA, 
   0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x22, 0x01, 0xDD, 0x22, 
   0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x20, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1A, 0x00, 0xE5, 0x1A, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x00, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 
   0xE8, 0x18, 0x00, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x15, 0x01, 0xEA, 0x15, 0x00, 0xEA, 
   0x15, 0x01, 0xEC, 0x14, 0x01, 0xEB, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 
   0x80, 0x7E, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 
   0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x98, 0x67, 0x01, 
   0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 
   0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 
   0x01, 0x9D, 0x61, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAB, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x4F, 0x00, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 
   0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x00, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x37, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 
   0x35, 0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x00, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 
   0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x2A, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 
   0xD8, 0x27, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 
   0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 
   0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x00, 0xE3, 
   0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE8, 0x18, 0x01, 
   0xE8, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 
   0x16, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 
   0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 
   0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 
   0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 
   0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 
   0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 
   0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 
   0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB5, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x01, 
   0xB7, 0x47, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x00, 
   0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 
   0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x00, 
   0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x00, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0x26, 0x01, 0xD9, 
   0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 
   0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 
   0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 
   0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 
   0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xEA, 
   0x15, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 
   0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 
   0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 
   0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 
   0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x7A, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7D, 0x83, 
   0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 
   0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 
   0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 
   0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 
   0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 
   0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 
   0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 
   0x00, 0xBD, 0x43, 0x00, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC7, 0x39, 0x00, 
   0xC7, 0x38, 0x00, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x38, 0x01, 0xC9, 0x36, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x26, 0x01, 0xD9, 
   0x26, 0x01, 0xD9, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 
   0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x20, 0x01, 0xE0, 0x21, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1B, 
   0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x00, 
   0xE7, 0x19, 0x00, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 
   0x16, 0x01, 0xE9, 0x16, 0x01, 0xEB, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6D, 0x92, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 
   0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x01, 0x7C, 0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x76, 0x00, 0x89, 
   0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8C, 0x74, 
   0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x72, 0x01, 
   0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 
   0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 
   0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA6, 0x58, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 
   0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 
   0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x00, 0xBB, 0x44, 
   0x00, 0xBB, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 
   0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 
   0xCF, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 
   0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD6, 0x2A, 0x00, 
   0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x20, 0x00, 0xE1, 
   0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 
   0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x00, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x00, 
   0xE6, 0x19, 0x00, 0xE6, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 
   0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x88, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 
   0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x82, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8C, 0x73, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 
   0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 
   0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x00, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 
   0xB5, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x47, 0x01, 0xB8, 
   0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC1, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 
   0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x34, 
   0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 
   0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x2A, 0x01, 
   0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 0xD8, 
   0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 
   0xDE, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 
   0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 
   0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 
   0xE6, 0x19, 0x00, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE8, 
   0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6C, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x72, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 
   0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 
   0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x6F, 0x01, 0x90, 
   0x6F, 0x01, 0x91, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 
   0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 0xA8, 
   0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 
   0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 
   0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 
   0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x00, 0xCA, 0x35, 0x00, 0xCC, 0x34, 0x01, 0xCB, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 
   0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 
   0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 
   0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 
   0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x25, 
   0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x22, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x20, 0x00, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 
   0x01, 0xE3, 0x1D, 0x01, 0xE4, 0x1D, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x00, 0xE5, 0x1B, 0x01, 
   0xE5, 0x1A, 0x00, 0xE5, 0x1A, 0x01, 0xE7, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 
   0x18, 0x01, 0xE8, 0x18, 0x00, 0xE8, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 
   0x6E, 0x91, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8F, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 
   0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 
   0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 
   0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9B, 0x64, 0x01, 0x9D, 0x63, 0x00, 
   0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 
   0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 
   0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAD, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 
   0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 
   0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x46, 
   0x00, 0xBA, 0x44, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x00, 
   0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 
   0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 
   0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x00, 0xC8, 0x37, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xCF, 
   0x30, 0x01, 0xCF, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 
   0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2D, 0x01, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x00, 0xD7, 
   0x28, 0x01, 0xD8, 0x28, 0x00, 0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 
   0xDD, 0x23, 0x00, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 
   0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1D, 
   0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 0x1C, 0x01, 
   0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 
   0x8F, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 
   0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7C, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 
   0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 
   0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 
   0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 
   0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x00, 
   0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 
   0xAD, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB6, 
   0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x00, 
   0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 
   0xCC, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0x2B, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 0xD9, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x27, 
   0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 
   0xDC, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDF, 
   0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 
   0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 
   0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x00, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 
   0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x00, 0x70, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 
   0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x70, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 
   0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 
   0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA8, 0x56, 
   0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 
   0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAF, 
   0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x00, 0xBC, 0x42, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBF, 
   0x40, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 
   0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCF, 
   0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 
   0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD6, 
   0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD8, 0x27, 
   0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 
   0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE4, 0x1C, 0x01, 
   0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 
   0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x97, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x79, 0x87, 0x00, 0x78, 0x86, 
   0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 
   0x80, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 
   0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6E, 
   0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x68, 0x00, 0x99, 0x67, 
   0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x61, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x00, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 
   0xAC, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAC, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 
   0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB9, 0x47, 
   0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 
   0x32, 0x00, 0xCE, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 
   0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD2, 0x2C, 0x01, 
   0xD3, 0x2C, 0x00, 0xD3, 0x2B, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 
   0x00, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDE, 
   0x21, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 
   0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 
   0xE4, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 
   0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 
   0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x91, 0x01, 0x6E, 
   0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 
   0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 
   0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 
   0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 
   0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x95, 0x6C, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6B, 0x00, 0x95, 
   0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 
   0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x59, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x58, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 
   0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAE, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x47, 
   0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 
   0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBD, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 
   0xC2, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 
   0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 
   0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 
   0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCC, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCD, 
   0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 
   0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 
   0x2A, 0x00, 0xD5, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 
   0xDB, 0x25, 0x00, 0xDB, 0x24, 0x00, 0xDB, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 
   0x22, 0x01, 0xDD, 0x22, 0x00, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 
   0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1E, 0x01, 
   0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 
   0x1A, 0x00, 0xE6, 0x1A, 0x01, 0xE6, 0x98, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 
   0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 
   0x73, 0x8D, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 
   0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 
   0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 
   0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x86, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 
   0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8E, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x5F, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAC, 
   0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4A, 0x00, 0xB4, 
   0x4B, 0x00, 0xB5, 0x49, 0x00, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBA, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 
   0x42, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 
   0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3D, 0x01, 
   0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 
   0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 
   0xCA, 0x35, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x00, 0xCD, 
   0x33, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 
   0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 
   0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 
   0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 
   0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 
   0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x99, 0x00, 0x67, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 0x01, 
   0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 
   0x93, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x74, 
   0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 
   0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x87, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 
   0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x00, 0x9D, 0x63, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0x9F, 0x5F, 0x00, 0x9F, 0x60, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xA9, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 
   0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 
   0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 
   0x00, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3E, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC5, 
   0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 
   0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 
   0x01, 0xD7, 0x28, 0x00, 0xD7, 0x28, 0x00, 0xD9, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 
   0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x23, 0x00, 0xDE, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 
   0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 
   0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 
   0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 
   0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 
   0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7B, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 
   0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 
   0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 
   0x54, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 
   0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x00, 
   0xB9, 0x46, 0x00, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 
   0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBF, 0x41, 
   0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x00, 0xC7, 0x39, 
   0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 
   0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x31, 0x01, 0xCF, 0x32, 
   0x01, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 
   0xD2, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 
   0x00, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 
   0xD9, 0x26, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x22, 
   0x01, 0xDF, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x00, 0xE0, 0x1F, 0x01, 0xE0, 0x1E, 0x01, 
   0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE3, 
   0x1B, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 
   0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 
   0x8C, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 
   0x7A, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 
   0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 
   0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 
   0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 
   0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 
   0x53, 0x01, 0xAC, 0x54, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x51, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 
   0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x41, 0x00, 0xBD, 0x41, 
   0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 
   0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 
   0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 
   0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 
   0x01, 0xD6, 0x29, 0x00, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 
   0xD9, 0x26, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDC, 
   0x24, 0x01, 0xDB, 0x24, 0x01, 0xDD, 0x24, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE0, 0x1F, 0x01, 
   0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE5, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x00, 0x6E, 0x90, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 
   0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x77, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x86, 0x00, 
   0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x84, 
   0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x01, 0x87, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x89, 0x77, 0x01, 
   0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9A, 
   0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x01, 0x9E, 0x62, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x00, 
   0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4C, 0x00, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 
   0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 
   0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 
   0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 
   0x01, 0xC6, 0x3A, 0x00, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 
   0x34, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 
   0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x00, 
   0xD1, 0x2F, 0x01, 0xD0, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2A, 
   0x00, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 
   0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDD, 0x22, 
   0x01, 0xDE, 0x21, 0x00, 0xDE, 0x22, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x00, 0xE0, 0x20, 0x00, 
   0xE0, 0x20, 0x01, 0xE0, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 
   0x68, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x94, 0x00, 0x6A, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6D, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8E, 0x01, 0x71, 0x8F, 0x01, 0x72, 0x8D, 0x00, 0x71, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x72, 
   0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6F, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6B, 
   0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 
   0x64, 0x00, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0xA0, 0x60, 0x01, 
   0xA0, 0x60, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x56, 0x01, 0xAB, 
   0x54, 0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x53, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 
   0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 
   0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 
   0xB7, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 
   0xC8, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 
   0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 
   0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x28, 0x01, 0xD8, 0x28, 0x01, 
   0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 
   0x26, 0x01, 0xDA, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 
   0x00, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 
   0x1D, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x64, 0x9A, 
   0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 
   0x67, 0x97, 0x00, 0x69, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 
   0x77, 0x87, 0x01, 0x79, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x80, 0x80, 0x00, 
   0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x87, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 
   0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 
   0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 
   0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 
   0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 
   0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x52, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB2, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x00, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 
   0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 
   0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x00, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 
   0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x01, 
   0xCF, 0x31, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x00, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 
   0x25, 0x00, 0xDA, 0x26, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 
   0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 
   0xE0, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 
   0x1E, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 
   0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6B, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8D, 0x73, 
   0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 
   0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 
   0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 
   0xA7, 0x58, 0x01, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 
   0x56, 0x00, 0xAA, 0x56, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x51, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 
   0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x00, 0xBB, 0x43, 
   0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC2, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x01, 0xC8, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 
   0x01, 0xCD, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 
   0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 
   0x2E, 0x00, 0xD1, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x00, 0xD9, 
   0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x23, 
   0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 
   0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 
   0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 
   0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x6A, 
   0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 
   0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 
   0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 
   0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x81, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x00, 0xA4, 0x5C, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 
   0xA7, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x01, 
   0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB0, 
   0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 
   0x47, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBC, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 
   0x3F, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 
   0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x00, 
   0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 
   0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 
   0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE1, 
   0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 
   0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x75, 0x89, 0x00, 
   0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 
   0x00, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 
   0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x84, 0x7C, 
   0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 
   0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 
   0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 
   0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 
   0x96, 0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA0, 
   0x5E, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 
   0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x00, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 
   0x4F, 0x00, 0xB0, 0x4E, 0x00, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB6, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 
   0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 
   0xC5, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 
   0x00, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 
   0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x2F, 0x01, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 
   0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 
   0xD6, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 
   0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 
   0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE1, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 
   0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 
   0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8E, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 
   0x01, 0x74, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x00, 
   0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x84, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 
   0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 
   0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x58, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 
   0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x52, 0x01, 
   0xAE, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB1, 0x4E, 0x00, 0xB3, 0x4D, 
   0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB7, 
   0x48, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC5, 0x3A, 0x00, 0xC5, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 
   0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCB, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 
   0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 
   0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 
   0x00, 0xD2, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 
   0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDB, 0x25, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 
   0x01, 0x62, 0x9D, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x67, 
   0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6A, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 
   0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x87, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 
   0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 
   0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 
   0x00, 0x8A, 0x75, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x00, 0x92, 0x6C, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 
   0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 
   0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x5F, 0x01, 0xA0, 0x60, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 
   0xA5, 0x5B, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 
   0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x00, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 
   0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x49, 0x00, 0xB8, 
   0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 
   0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x00, 
   0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC1, 0x3E, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 
   0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC7, 
   0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 
   0x00, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 
   0x30, 0x00, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 
   0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 
   0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x01, 0xDC, 0x23, 0x01, 
   0xDC, 0x22, 0x01, 0xDD, 0x22, 0x00, 0xDD, 0x21, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xDF, 
   0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 
   0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 
   0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 
   0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x71, 0x8D, 
   0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 
   0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x77, 0x88, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x86, 
   0x01, 0x7A, 0x84, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 
   0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 
   0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 
   0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 
   0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 
   0x48, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 
   0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x00, 0xC1, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3B, 0x00, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x30, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 0x2E, 
   0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 
   0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 
   0x28, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xD9, 0x26, 
   0x00, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 
   0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x20, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 
   0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x64, 0x9B, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x97, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 
   0x7C, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 
   0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 
   0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x00, 
   0x9C, 0x63, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 
   0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 
   0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAF, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 
   0xB3, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 
   0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC1, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC4, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x00, 0xC9, 0x37, 0x00, 0xC8, 0x36, 
   0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 
   0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD2, 0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 
   0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 
   0x29, 0x01, 0xD6, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 
   0x00, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 
   0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x9F, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 0x00, 
   0x64, 0x9C, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 
   0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 
   0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 
   0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 
   0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 0x00, 
   0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x59, 0x00, 0xA6, 
   0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x00, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 
   0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4B, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x49, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 
   0x32, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 
   0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2C, 0x00, 
   0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 
   0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x24, 0x01, 0xDB, 0x23, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x21, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 
   0x01, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 
   0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x01, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 
   0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8D, 0x00, 
   0x73, 0x8B, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7F, 0x01, 0x82, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7C, 0x00, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 
   0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 
   0x00, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 
   0xA2, 0x5D, 0x00, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA6, 
   0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 
   0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 
   0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x48, 
   0x01, 0xB8, 0x46, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 
   0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 
   0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 
   0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 
   0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 
   0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 
   0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 
   0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 
   0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x00, 
   0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 
   0x23, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 
   0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 
   0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9B, 0x00, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 
   0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x01, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 
   0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 
   0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 
   0xA2, 0x5C, 0x00, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 
   0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x57, 
   0x00, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 
   0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 
   0x00, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB0, 0x4F, 0x00, 0xB2, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 
   0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 
   0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 
   0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 
   0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 
   0x01, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x35, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 
   0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 
   0x00, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x27, 0x00, 0xD8, 0x27, 0x00, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDA, 0x25, 0x01, 0xDA, 0x25, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 
   0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 
   0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x98, 0x01, 0x69, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 
   0x6B, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6F, 0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 
   0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8B, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 
   0x8B, 0x01, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7B, 0x01, 0x83, 0x7C, 0x01, 0x85, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 
   0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 
   0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5E, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 
   0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x00, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x00, 0xB5, 
   0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x49, 0x00, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x49, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x00, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 
   0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 
   0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x33, 0x00, 0xCC, 0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 
   0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 
   0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x27, 0x01, 0xDA, 0x27, 0x01, 
   0xD9, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 
   0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5E, 0xA0, 
   0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 
   0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x99, 
   0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x69, 0x96, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 
   0x71, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 
   0x81, 0x7E, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 
   0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 
   0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9B, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA2, 0x5D, 0x01, 0xA1, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 
   0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 
   0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x50, 
   0x00, 0xAE, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 
   0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x00, 
   0xB9, 0x45, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x44, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 
   0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 
   0x3B, 0x00, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 
   0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 
   0xCA, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 
   0xD1, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x28, 0x00, 0xD9, 0x27, 0x01, 
   0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA2, 0x00, 0x5F, 0xA1, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 
   0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x99, 0x00, 0x68, 0x97, 0x01, 0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x97, 0x01, 
   0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x91, 
   0x01, 0x6E, 0x91, 0x00, 0x70, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x86, 0x00, 0x79, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7F, 0x81, 
   0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 
   0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 
   0x00, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 
   0x01, 0xAF, 0x50, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x00, 
   0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB3, 
   0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 
   0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB9, 0x47, 0x01, 0xBA, 0x45, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 
   0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 
   0x01, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 
   0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 
   0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 
   0x24, 0x00, 0xDC, 0x23, 0x01, 0xDC, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x74, 
   0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x85, 0x00, 0x7B, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x84, 
   0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 
   0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 
   0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 
   0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5F, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAA, 
   0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x52, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 
   0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB3, 
   0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x00, 0xB7, 0x47, 0x01, 0xB8, 0x48, 0x00, 
   0xB9, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 
   0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBE, 0x42, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 
   0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 
   0x00, 0xC5, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCB, 
   0x35, 0x00, 0xCB, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 
   0x00, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 
   0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD6, 0x2A, 
   0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 
   0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x90, 0x00, 
   0x71, 0x8E, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 
   0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 
   0x79, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7B, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 
   0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x80, 0x80, 0x01, 0x80, 0x80, 0x00, 
   0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 
   0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 
   0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB5, 0x4A, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 
   0xB8, 0x48, 0x01, 0xB8, 0x46, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 
   0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 
   0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC4, 0x3B, 0x01, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 
   0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x32, 
   0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 0x00, 0xD2, 0x2E, 0x01, 0xD2, 
   0x2D, 0x00, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x00, 0xD4, 0x2C, 0x00, 0xD5, 0x2A, 
   0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x28, 0x01, 
   0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x00, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 
   0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA3, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6C, 0x92, 
   0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 
   0x01, 0x85, 0x79, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 
   0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 
   0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0xA0, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA1, 
   0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 
   0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 
   0x00, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x01, 0xB4, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x00, 
   0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 
   0x3D, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x38, 0x00, 0xC8, 0x38, 0x00, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x36, 0x01, 0xCB, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 
   0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 
   0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 
   0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 
   0x9D, 0x01, 0x63, 0x9C, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 
   0x68, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 
   0x00, 0x6C, 0x93, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x72, 0x8E, 0x01, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 
   0x77, 0x87, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 
   0x8F, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 
   0x6D, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 
   0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 
   0xA7, 0x59, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 
   0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x54, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 
   0xAF, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xB9, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x01, 0xBF, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x34, 
   0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 
   0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 
   0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 
   0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 
   0x5E, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x62, 
   0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 
   0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x72, 
   0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8B, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 
   0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 
   0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x90, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 
   0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 
   0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x63, 
   0x01, 0x9B, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 
   0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 
   0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x46, 0x01, 0xBA, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 
   0x01, 0xBB, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 
   0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x37, 0x01, 0xCA, 0x36, 0x00, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x00, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x31, 0x00, 
   0xCE, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 
   0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 
   0xD7, 0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 
   0x66, 0x98, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6C, 0x94, 
   0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 
   0x6E, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 
   0x87, 0x00, 0x79, 0x85, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 
   0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 
   0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 
   0x00, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 
   0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 
   0x57, 0x01, 0xA9, 0x57, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x00, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 
   0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 
   0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 
   0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 
   0xC6, 0x3A, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x00, 0xC8, 
   0x37, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 
   0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x00, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 
   0x9E, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 
   0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x96, 0x00, 0x69, 0x97, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x81, 0x00, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 
   0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 
   0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x90, 0x6F, 0x01, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 
   0x01, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x63, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 
   0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 
   0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 
   0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 
   0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC4, 0x3A, 0x01, 
   0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 
   0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 
   0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD3, 0x2D, 
   0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2B, 0x00, 
   0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD7, 0x28, 0x00, 0xD8, 
   0x27, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 
   0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x63, 0x9D, 0x00, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x66, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 
   0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6D, 0x91, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8C, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x87, 0x01, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x80, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 
   0x80, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 
   0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8B, 0x75, 
   0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 
   0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 
   0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 
   0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 
   0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 
   0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 
   0x47, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBC, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 
   0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 
   0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 
   0xC4, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 
   0x38, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xC9, 0x35, 
   0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 
   0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xD0, 
   0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2E, 0x00, 0xD2, 0x2E, 
   0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2B, 0x00, 
   0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 
   0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA2, 0x01, 0x5F, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 
   0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 
   0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 
   0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 
   0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7E, 0x80, 0x00, 0x7F, 
   0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 
   0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 
   0x00, 0x9A, 0x66, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 
   0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 
   0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 
   0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 
   0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAA, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 
   0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 
   0x48, 0x01, 0xB7, 0x47, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x01, 
   0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x39, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC9, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xCA, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 
   0xCD, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x31, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 
   0x00, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD6, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x5A, 0xA6, 
   0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 
   0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 
   0x65, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 
   0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6B, 0x93, 0x00, 
   0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6F, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x00, 0x80, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 
   0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 
   0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 
   0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 
   0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 
   0x58, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 
   0xAC, 0x54, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 
   0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 
   0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 
   0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 
   0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x39, 0x01, 0xC6, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 
   0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 
   0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2E, 0x00, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x00, 
   0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 
   0x29, 0x01, 0xD6, 0x28, 0x01, 0xD7, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x64, 0x9C, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 
   0x90, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 
   0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 
   0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 
   0x00, 0x82, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 
   0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 
   0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 
   0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 
   0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 
   0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x01, 
   0xCC, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCC, 0x32, 0x00, 0xCE, 0x32, 0x01, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 
   0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 
   0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 
   0x29, 0x01, 0xD7, 0x2A, 0x01, 0xD7, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 
   0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 
   0x00, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 
   0x6B, 0x93, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x90, 0x01, 0x6E, 0x90, 0x01, 0x70, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8D, 0x00, 
   0x73, 0x8B, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 
   0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 
   0x82, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 
   0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 
   0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9E, 0x63, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 
   0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x56, 0x01, 0xA9, 0x57, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 
   0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 
   0x49, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 
   0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x00, 
   0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 
   0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x01, 
   0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x00, 0xC8, 0x37, 
   0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x00, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x00, 0xCD, 
   0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x30, 
   0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 
   0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x59, 0xA6, 0x01, 0x5B, 0xA5, 0x00, 
   0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 
   0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x69, 0x95, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 
   0x91, 0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x8F, 
   0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 
   0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 
   0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 
   0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x79, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 
   0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 
   0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 
   0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 
   0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x00, 0xA5, 
   0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 
   0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAB, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 
   0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 
   0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4B, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB8, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 
   0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC2, 0x3E, 0x01, 
   0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 
   0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCD, 
   0x33, 0x00, 0xCE, 0x32, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 
   0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2E, 0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 
   0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5C, 
   0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x01, 0x5F, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 
   0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 
   0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 
   0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x84, 0x01, 0x7D, 0x83, 0x01, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x82, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8C, 0x74, 0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 
   0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5A, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAA, 0x56, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 
   0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 
   0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 
   0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 
   0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x56, 0xA8, 
   0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 
   0xA2, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5E, 0xA0, 
   0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 
   0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 
   0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 
   0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6D, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 
   0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 
   0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x7F, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 
   0x81, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 
   0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 
   0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x60, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 
   0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3E, 0x01, 0xC0, 0x3E, 0x00, 
   0xC1, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 
   0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 
   0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x00, 
   0xCA, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 
   0x00, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 
   0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x63, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x64, 0x9A, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 
   0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 
   0x72, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 
   0x01, 0x77, 0x89, 0x01, 0x77, 0x87, 0x01, 0x77, 0x87, 0x01, 0x78, 0x86, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 
   0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x01, 0x86, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x74, 0x01, 0x8C, 0x72, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 
   0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 
   0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5F, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 
   0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x01, 
   0xA9, 0x57, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 
   0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4F, 0x00, 
   0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 
   0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB6, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 
   0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBB, 
   0x44, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 
   0x00, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC4, 
   0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 
   0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 
   0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 
   0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 
   0x01, 0xCF, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 
   0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 
   0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 
   0x58, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 
   0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 
   0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 
   0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 
   0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 
   0x71, 0x8F, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 
   0x79, 0x87, 0x00, 0x79, 0x85, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 
   0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 
   0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x00, 0x8F, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 
   0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 
   0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 
   0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 
   0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 
   0xB8, 0x46, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x01, 0xBB, 
   0x45, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 
   0xC1, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3C, 0x00, 0xC3, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC4, 0x3B, 0x01, 0xC6, 0x3A, 
   0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x00, 
   0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 
   0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 
   0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 
   0xD0, 0x2F, 0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 
   0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xA9, 
   0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 
   0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 
   0x01, 0x66, 0x9A, 0x01, 0x66, 0x98, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x8F, 0x00, 
   0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x75, 0x8A, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x84, 0x00, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 
   0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x66, 0x01, 0x9B, 
   0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 
   0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 
   0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBA, 
   0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x3F, 0x01, 
   0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 
   0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 
   0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 
   0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 
   0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 
   0x94, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 
   0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x70, 0x8F, 0x00, 
   0x6F, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8B, 
   0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x00, 0x7E, 0x81, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 
   0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8F, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 
   0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 
   0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x55, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 
   0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4D, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 
   0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 
   0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 
   0x3D, 0x01, 0xC2, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x00, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 0x00, 
   0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 
   0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x00, 0xCF, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 
   0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 
   0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 
   0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8A, 
   0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 
   0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 
   0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 
   0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4C, 
   0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 
   0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 
   0x00, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 
   0xBE, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 
   0x3D, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 
   0x00, 0xC5, 0x3A, 0x01, 0xC4, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 
   0x35, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x00, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 
   0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2E, 0x00, 0xD3, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x57, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 
   0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 
   0x00, 0x65, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 
   0x66, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x94, 
   0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 
   0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 
   0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x82, 
   0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x87, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 
   0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x95, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 
   0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 
   0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA6, 0x58, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 
   0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 
   0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x4A, 0x00, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 
   0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x00, 0xBC, 0x44, 
   0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 
   0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 
   0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 
   0x2E, 0x00, 0xD2, 0x2E, 0x00, 0xD2, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5D, 0xA1, 0x01, 
   0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 
   0x01, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 
   0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 
   0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6B, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 
   0x6E, 0x90, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8E, 0x01, 0x70, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x75, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x01, 0x79, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 
   0x7E, 0x00, 0x82, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 
   0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x94, 0x6C, 
   0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 
   0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 
   0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 
   0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 
   0xB6, 0x49, 0x00, 0xB6, 0x48, 0x00, 0xB6, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 
   0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x3F, 0x00, 0xC0, 0x40, 0x01, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC9, 
   0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 
   0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 
   0xCE, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0xAD, 0x01, 0x51, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAC, 
   0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 
   0x55, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x61, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x01, 
   0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 
   0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x81, 
   0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 
   0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 
   0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x00, 0xAE, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 
   0x01, 0xB2, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 
   0xB6, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x47, 0x01, 0xB8, 
   0x47, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xBF, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x00, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 
   0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xD0, 0x30, 0x00, 0xD0, 
   0x30, 0x00, 0xD0, 0x30, 0x01, 0xD1, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x53, 0xAD, 
   0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 
   0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 
   0x5D, 0xA1, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x5F, 
   0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x63, 0x9D, 
   0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x99, 0x00, 0x66, 0x9A, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 
   0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 
   0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 
   0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 
   0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 
   0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 
   0x9D, 0x63, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5D, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x57, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAD, 0x53, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 
   0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 
   0x01, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 
   0x3F, 0x01, 0xBF, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 
   0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x33, 0x00, 0xCC, 0x33, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 
   0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x57, 
   0xA7, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 
   0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 
   0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 
   0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x78, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 
   0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x82, 0x01, 
   0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x80, 
   0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x85, 0x7B, 0x00, 
   0x84, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x88, 
   0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8D, 0x73, 0x01, 0x8E, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 
   0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 
   0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 
   0x59, 0x00, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 
   0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 
   0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xAF, 
   0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 
   0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 
   0x49, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 
   0xC5, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 
   0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x30, 0x01, 0xCF, 
   0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 
   0x55, 0xAA, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 
   0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 
   0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9C, 0x00, 
   0x64, 0x9A, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 
   0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x77, 0x89, 0x00, 0x76, 
   0x89, 0x00, 0x78, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 
   0x01, 0x79, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 
   0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 
   0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x66, 0x00, 0x9B, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x58, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 
   0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x01, 
   0xB4, 0x4C, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x00, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBC, 0x42, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 
   0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x00, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x00, 0x56, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x60, 0x9E, 
   0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x01, 
   0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x68, 0x97, 
   0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 
   0x6C, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 
   0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8F, 
   0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x84, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x85, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x00, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8F, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 
   0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 
   0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 
   0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 
   0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 
   0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x3F, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 
   0x00, 0xC9, 0x37, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 
   0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAF, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 
   0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x01, 0x55, 
   0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x62, 0x9C, 0x00, 
   0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 
   0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x84, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7E, 
   0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x91, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x94, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 
   0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 
   0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x56, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 
   0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB6, 
   0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x48, 
   0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 
   0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 
   0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 
   0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 
   0x3A, 0x00, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 
   0x00, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 
   0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 
   0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x66, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6E, 
   0x91, 0x00, 0x6D, 0x92, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 
   0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x76, 
   0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x86, 0x78, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 
   0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 
   0x71, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x92, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 
   0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x60, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA3, 0x5D, 0x00, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 
   0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 
   0x00, 0xA8, 0x58, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 
   0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 
   0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 
   0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB4, 
   0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 
   0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 
   0x42, 0x00, 0xBD, 0x41, 0x00, 0xBD, 0x42, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xC0, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 
   0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 
   0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 
   0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 
   0x33, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 
   0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 
   0x00, 0x57, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 
   0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 
   0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 
   0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x94, 0x01, 0x6D, 0x93, 0x00, 0x6C, 
   0x92, 0x01, 0x6E, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x8B, 0x00, 0x76, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x77, 0x89, 0x01, 0x76, 0x88, 0x00, 0x78, 0x88, 
   0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 
   0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7C, 
   0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 
   0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 
   0x6A, 0x01, 0x96, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAA, 0x54, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 
   0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC4, 
   0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 
   0x00, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 
   0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5D, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x61, 0x9E, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x66, 0x98, 
   0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 
   0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6D, 
   0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 
   0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x78, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x83, 0x00, 0x7D, 
   0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x81, 
   0x01, 0x80, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x85, 
   0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 
   0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x58, 
   0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4D, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 
   0x4C, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 
   0xB9, 0x45, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x00, 0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 
   0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 
   0xC9, 0x35, 0x01, 0xC9, 0x36, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCC, 
   0x34, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 
   0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 
   0x61, 0x9D, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 
   0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 
   0x69, 0x95, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x93, 0x00, 0x6E, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6F, 0x91, 
   0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 
   0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 
   0x79, 0x85, 0x00, 0x79, 0x86, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 
   0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x82, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8B, 
   0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 
   0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 
   0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x5A, 
   0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAB, 
   0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x52, 
   0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 
   0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 
   0x43, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x40, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 
   0x01, 0xC6, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x00, 0xCB, 0x34, 0x01, 0xCD, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x57, 0xA7, 0x01, 0x59, 0xA7, 0x01, 
   0x58, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x69, 0x97, 0x00, 
   0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 
   0x01, 0x76, 0x88, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x78, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 
   0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x01, 0x86, 0x78, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 
   0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 
   0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x56, 0x00, 0xAB, 0x55, 0x01, 0xAB, 
   0x54, 0x00, 0xAC, 0x54, 0x01, 0xAB, 0x53, 0x00, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 
   0x4D, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 
   0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBB, 0x44, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBD, 0x41, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC3, 
   0x3D, 0x01, 0xC4, 0x3B, 0x01, 0xC3, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x00, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x34, 0x00, 0xCB, 0x34, 0x00, 0xCC, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x01, 
   0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 
   0xAC, 0x01, 0x54, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 
   0x95, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6E, 0x92, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x6F, 0x8F, 0x00, 
   0x70, 0x8E, 0x00, 0x70, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 
   0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7E, 0x82, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 0x87, 0x77, 0x00, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6D, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 
   0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x01, 
   0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 
   0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 
   0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 
   0x35, 0x01, 0xCA, 0x34, 0x01, 0xCC, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 
   0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 
   0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x97, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 
   0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 
   0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x70, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 
   0x00, 0x76, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 
   0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6B, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 
   0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 
   0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 
   0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 
   0xA8, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 
   0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x53, 
   0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB1, 
   0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 
   0x01, 0xBC, 0x42, 0x00, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 
   0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC1, 
   0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0xB4, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 
   0xAD, 0x00, 0x53, 0xAC, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x58, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 
   0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 
   0x68, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 
   0x96, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 
   0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 
   0x8D, 0x01, 0x72, 0x8C, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8A, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 
   0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 
   0x80, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x85, 0x7B, 
   0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x8A, 0x75, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 
   0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 
   0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x58, 0x00, 
   0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 
   0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 
   0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xB9, 
   0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 
   0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3B, 
   0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 
   0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 
   0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 
   0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA4, 
   0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 
   0x00, 0x65, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 
   0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 
   0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 
   0x6E, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 
   0x8E, 0x01, 0x72, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 
   0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x77, 0x89, 0x01, 
   0x76, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 
   0x75, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 
   0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 
   0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 
   0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 
   0x9E, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 
   0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 
   0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x52, 0x00, 
   0xAF, 0x50, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 
   0x47, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 
   0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x37, 0x00, 0xC8, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0xB5, 0x01, 0x4B, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 
   0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 
   0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 
   0x01, 0x5B, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5D, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 
   0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x65, 0x99, 0x01, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 
   0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x70, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x78, 0x87, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 
   0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x01, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 
   0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 
   0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 
   0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 
   0x56, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x53, 0x00, 0xAE, 0x52, 0x00, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 
   0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 
   0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x01, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAC, 
   0x01, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x01, 0x57, 0xA7, 0x01, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA4, 
   0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x60, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x01, 0x62, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 
   0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 
   0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 
   0x00, 0x73, 0x8B, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x85, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 
   0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x91, 
   0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 
   0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 
   0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA8, 0x58, 0x00, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB3, 0x4C, 
   0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 
   0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x47, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x01, 
   0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 
   0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 
   0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB2, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x01, 
   0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x01, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 
   0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA7, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x93, 0x00, 
   0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 
   0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x7A, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7B, 0x85, 
   0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 
   0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 
   0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 
   0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8B, 0x75, 
   0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 
   0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 
   0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 
   0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 
   0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 
   0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 
   0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 
   0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 
   0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x00, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 
   0xC4, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 
   0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x49, 0xB5, 
   0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 
   0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 
   0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x58, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x59, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x60, 0xA0, 0x00, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 
   0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x97, 0x00, 0x69, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 
   0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 
   0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 
   0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 
   0x00, 0x7B, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 
   0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 
   0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8D, 0x73, 0x00, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 
   0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 
   0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x6A, 0x00, 0x97, 0x69, 0x00, 0x98, 
   0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 
   0x01, 0x9A, 0x66, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 
   0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 
   0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 
   0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 
   0x50, 0x00, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 
   0x49, 0x00, 0xB8, 0x47, 0x01, 0xB7, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x00, 0xBF, 
   0x41, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 
   0x00, 0xC2, 0x3E, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 
   0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB6, 
   0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x52, 0xAE, 
   0x00, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x56, 
   0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x65, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x00, 0x6F, 0x8F, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 
   0x75, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 
   0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 
   0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 
   0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x00, 0x9A, 0x66, 0x01, 0x9B, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 
   0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 
   0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x00, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBF, 
   0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x00, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x38, 0x01, 0xC8, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 
   0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 
   0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAB, 0x01, 
   0x54, 0xAB, 0x01, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 
   0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x67, 
   0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x95, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 
   0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 
   0x90, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8D, 0x01, 0x71, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 
   0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x76, 
   0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 
   0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 
   0x00, 0x8A, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x97, 
   0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x66, 
   0x00, 0x99, 0x67, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x66, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 
   0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5B, 0x01, 0xA6, 0x59, 0x00, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 
   0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4E, 
   0x00, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 
   0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 
   0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 
   0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBE, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 
   0x01, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB4, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB3, 0x01, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 
   0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x55, 
   0xA9, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x96, 0x00, 0x6B, 0x95, 0x01, 0x6A, 0x94, 0x01, 
   0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7D, 
   0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 
   0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x90, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x01, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 
   0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 
   0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 
   0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAB, 0x56, 0x01, 0xAB, 0x55, 0x00, 
   0xAB, 0x55, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 
   0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 
   0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0xB8, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4B, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 
   0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 
   0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 
   0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 
   0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 
   0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x90, 0x00, 0x6F, 0x8F, 
   0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 
   0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 
   0x81, 0x00, 0x7D, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 
   0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 
   0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x01, 0x88, 0x76, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 
   0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x71, 0x01, 0x90, 0x70, 0x00, 0x90, 0x70, 
   0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 
   0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 
   0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA8, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 
   0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x47, 
   0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 
   0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 
   0xC2, 0x3C, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3A, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 
   0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 0xB2, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 
   0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA8, 
   0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 
   0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 
   0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 
   0x01, 0x78, 0x88, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 
   0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x88, 0x78, 
   0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x67, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 
   0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x00, 
   0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 
   0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x46, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 
   0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 
   0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB5, 0x00, 
   0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 
   0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 
   0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 
   0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 
   0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 
   0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 
   0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 
   0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 
   0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 
   0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 
   0x8A, 0x00, 0x74, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x76, 0x88, 
   0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 
   0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 
   0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 
   0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x00, 0xAC, 
   0x54, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 
   0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 
   0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 
   0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBC, 
   0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 
   0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 
   0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 
   0x01, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 
   0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA1, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 
   0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 
   0x8C, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 
   0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 
   0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x01, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 
   0x74, 0x00, 0x8D, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 
   0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9B, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 
   0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x55, 0x01, 0xAC, 
   0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 
   0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x40, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 
   0x3C, 0x00, 0xC3, 0x3B, 0x01, 0xC4, 0xBB, 0x00, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 
   0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 
   0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 
   0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 
   0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xA9, 
   0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x98, 0x00, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 
   0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 
   0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 
   0x01, 0x87, 0x78, 0x01, 0x87, 0x79, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 
   0x90, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 
   0x00, 0x97, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 
   0x64, 0x00, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 
   0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA1, 0x60, 0x00, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 0xA8, 0x58, 0x00, 
   0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 
   0x01, 0xAE, 0x52, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 
   0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 
   0x44, 0x00, 0xBB, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x43, 0x00, 0xBE, 0x42, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 
   0xC0, 0x3E, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 
   0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x50, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 
   0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x01, 0x55, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 
   0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 
   0x01, 0x5D, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x62, 
   0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 
   0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 
   0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 
   0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7C, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 
   0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 
   0x7D, 0x00, 0x83, 0x7B, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 
   0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 
   0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 
   0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 
   0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 
   0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 
   0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 
   0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 
   0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 
   0xC0, 0x40, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 
   0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 
   0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 
   0x67, 0x97, 0x01, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x95, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 
   0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 
   0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7C, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 
   0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x78, 0x01, 0x89, 0x76, 0x01, 0x88, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 
   0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 
   0x65, 0x00, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 
   0x00, 0x9E, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 
   0xA0, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 
   0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA7, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xAA, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 
   0x4D, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 
   0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 
   0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x00, 0xBA, 
   0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3E, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 
   0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC3, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x44, 0xB9, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 
   0x48, 0xB7, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x55, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 
   0x9E, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 
   0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 
   0x68, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 
   0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x00, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 
   0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x82, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 
   0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 
   0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 
   0x65, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 
   0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 
   0xB7, 0x48, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0xBC, 0x01, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x44, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB6, 0x00, 0x49, 0xB4, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 
   0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 
   0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9E, 0x01, 0x61, 0x9F, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8A, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 
   0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7B, 0x83, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x74, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 
   0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 
   0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 
   0x57, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 
   0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 
   0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x49, 0x01, 0xB6, 0x4A, 0x00, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 
   0x46, 0x00, 0xB9, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 
   0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 
   0x00, 0x43, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB1, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x01, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 
   0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6C, 0x94, 
   0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x91, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x78, 
   0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 
   0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x00, 
   0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x80, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 
   0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x89, 0x77, 0x01, 0x89, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8C, 0x74, 
   0x00, 0x8B, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 
   0x8F, 0x70, 0x00, 0x8E, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x91, 
   0x6F, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6B, 
   0x01, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 
   0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 
   0x57, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 
   0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4D, 
   0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 
   0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 
   0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 
   0x9E, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 
   0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 
   0x8E, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7B, 0x85, 0x01, 0x7A, 0x85, 
   0x01, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 
   0x7E, 0x82, 0x00, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x91, 
   0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 
   0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 
   0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 
   0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 
   0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 
   0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 
   0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x43, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3F, 0x00, 0xC1, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 
   0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 
   0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x01, 0x50, 
   0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 
   0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 
   0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x01, 
   0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x66, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 
   0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x00, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7B, 0x85, 
   0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x7F, 
   0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x78, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x77, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x94, 0x6A, 0x00, 
   0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 
   0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 
   0xAD, 0x53, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 
   0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 
   0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 
   0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x00, 
   0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBD, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBE, 0x01, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 
   0x45, 0xBA, 0x01, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 
   0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 
   0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 
   0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 
   0x54, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 
   0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 
   0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x91, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 
   0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 
   0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x90, 
   0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 
   0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x01, 0x97, 0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9D, 0x63, 0x00, 
   0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA1, 0x5D, 
   0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 
   0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 
   0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 
   0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 
   0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0xBF, 0x01, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 
   0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x01, 0x47, 
   0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 
   0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x69, 0x96, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x73, 0x8B, 0x01, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x75, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 
   0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 
   0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x86, 
   0x79, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x92, 0x6D, 
   0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x95, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 
   0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 
   0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 
   0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 
   0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 
   0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x00, 0xB9, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 
   0x41, 0x01, 0xBF, 0x41, 0x00, 0xC0, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB5, 
   0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 
   0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 
   0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 
   0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8F, 
   0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 
   0x01, 0x91, 0x6D, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 
   0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x00, 0xAE, 
   0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 
   0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 
   0x00, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 
   0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 
   0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x45, 0xB9, 0x01, 0x46, 0xBA, 0x00, 0x46, 
   0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 
   0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 
   0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 
   0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7B, 0x85, 0x00, 0x7A, 0x84, 0x00, 
   0x7B, 0x83, 0x01, 0x7B, 0x84, 0x00, 0x7D, 0x82, 0x00, 0x7C, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7D, 
   0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 
   0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x91, 0x6F, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 
   0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 
   0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 
   0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 
   0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x00, 0xAE, 
   0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 
   0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 
   0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 
   0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 
   0x00, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0xC1, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x40, 0xBE, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 
   0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 
   0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x57, 0xA7, 
   0x01, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x97, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 
   0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 
   0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x76, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x84, 0x00, 
   0x7A, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 
   0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 
   0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 
   0x8A, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6C, 0x00, 
   0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 
   0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 
   0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x00, 0xAD, 
   0x52, 0x01, 0xAE, 0x52, 0x01, 0xAF, 0x52, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 
   0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 
   0x00, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x00, 
   0xBB, 0x45, 0x00, 0xBB, 0x45, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x00, 0xBD, 
   0x42, 0x00, 0xBD, 0x41, 0x01, 0xBE, 0xC0, 0x00, 0x3F, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 
   0x00, 0x40, 0xBE, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 
   0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 
   0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 
   0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 
   0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 
   0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x61, 0x9E, 0x01, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 
   0x6B, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8E, 0x00, 
   0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 
   0x8A, 0x00, 0x76, 0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x82, 0x00, 0x7C, 
   0x83, 0x00, 0x7E, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x84, 
   0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 
   0x8B, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 
   0x72, 0x01, 0x8E, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x00, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 
   0xA2, 0x5E, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x54, 0x01, 0xAD, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 
   0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x45, 0x01, 
   0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBB, 0x00, 0x44, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 
   0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 
   0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 
   0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x5F, 0xA0, 0x00, 0x61, 0x9F, 0x01, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 
   0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x69, 0x95, 0x00, 
   0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 
   0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x72, 0x8E, 0x01, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8C, 0x00, 0x75, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x89, 
   0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x01, 0x88, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 
   0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x01, 0x8B, 0x73, 0x00, 0x8C, 
   0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 
   0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 
   0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x47, 0x01, 
   0xBA, 0x45, 0x00, 0xBA, 0x46, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0xC1, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x01, 0x40, 0xBE, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 
   0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4C, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5F, 0xA1, 
   0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 
   0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6C, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x90, 
   0x00, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 
   0x72, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x88, 
   0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7B, 0x00, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x76, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8C, 0x74, 0x01, 0x8C, 
   0x74, 0x00, 0x8D, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 
   0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 
   0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 
   0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x61, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x00, 0xA7, 0x58, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 
   0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 
   0x00, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x47, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 
   0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4C, 0xB1, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB0, 
   0x01, 0x4F, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 
   0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x56, 0xA8, 
   0x01, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 
   0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 
   0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 
   0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 
   0x8B, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x81, 
   0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x00, 
   0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 
   0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 
   0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 
   0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBE, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x51, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 
   0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 
   0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 
   0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 
   0x68, 0x96, 0x00, 0x68, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 
   0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 
   0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 
   0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 
   0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 
   0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 
   0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 
   0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB8, 0x00, 
   0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 
   0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xA9, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 
   0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 
   0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 
   0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 
   0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x98, 0x68, 0x01, 
   0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 
   0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4D, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x46, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 
   0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 
   0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBA, 0x00, 0x44, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 
   0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 
   0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x92, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x01, 
   0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8A, 
   0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x81, 
   0x7D, 0x01, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 
   0x00, 0x85, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 
   0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 
   0x98, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 
   0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA1, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 
   0xA7, 0x59, 0x00, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xAA, 
   0x55, 0x00, 0xAB, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 
   0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 
   0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x01, 0x44, 0xBB, 
   0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 
   0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5B, 0xA3, 
   0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 
   0x01, 0x64, 0x9A, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 
   0x66, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8C, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 
   0x00, 0x85, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x87, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 
   0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 
   0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 
   0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x98, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 
   0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA3, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 
   0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 
   0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 
   0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 
   0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 
   0x46, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC4, 
   0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 
   0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x00, 
   0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x49, 
   0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 
   0x57, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x58, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 
   0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 
   0x67, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 
   0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7C, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x87, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 
   0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6E, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 
   0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 
   0x97, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 
   0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0xA0, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 
   0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA9, 
   0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 
   0xAF, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 
   0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 
   0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 
   0x01, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x01, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 
   0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5A, 0xA4, 
   0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8E, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x72, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x00, 
   0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 
   0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x7F, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x87, 0x79, 0x01, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x91, 
   0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 
   0x01, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 
   0x00, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9F, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 
   0x58, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x00, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 
   0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 
   0x00, 0x43, 0xBB, 0x00, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 
   0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 
   0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 
   0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x77, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7C, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 
   0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 
   0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 
   0x70, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6C, 
   0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 
   0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5C, 0x00, 0xA5, 0x5A, 0x01, 
   0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 
   0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x51, 0x00, 0xB0, 
   0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 
   0x47, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3C, 0xC3, 0x01, 
   0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 
   0x01, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x44, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 
   0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 
   0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x01, 0x5A, 0xA6, 0x00, 0x59, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x01, 0x5F, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x65, 0x9B, 0x00, 
   0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x92, 0x00, 
   0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 
   0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8A, 0x00, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x84, 0x01, 0x7B, 0x85, 0x01, 0x7C, 0x83, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 
   0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 
   0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x90, 0x70, 0x00, 0x91, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 
   0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 
   0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 
   0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x52, 0x01, 0xAF, 0x51, 0x01, 0xAF, 
   0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 
   0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB7, 
   0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 
   0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 
   0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 
   0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 
   0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 
   0xA8, 0x00, 0x58, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 
   0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x01, 0x5C, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 
   0x65, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x99, 0x01, 0x67, 0x97, 0x01, 0x67, 0x97, 0x00, 0x69, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x96, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x01, 0x6C, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8E, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x87, 0x00, 0x79, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7A, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x01, 
   0x7C, 0x82, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 
   0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 
   0x01, 0x8A, 0x76, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 
   0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA1, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 
   0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 
   0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 
   0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4C, 0x01, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x00, 0xB6, 0x4A, 0x01, 0xB7, 
   0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 
   0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x45, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 
   0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x01, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 
   0x01, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x77, 
   0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 
   0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7B, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 
   0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 
   0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 
   0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x73, 0x00, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 
   0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 
   0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 
   0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 
   0x62, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA0, 0x5E, 
   0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 
   0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 
   0x52, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 
   0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB9, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 
   0x00, 0x49, 0xB5, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x50, 0xAE, 
   0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 
   0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 
   0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 
   0x01, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 
   0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 
   0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6D, 
   0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x75, 
   0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7D, 
   0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8A, 0x74, 0x00, 
   0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x94, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 
   0x6A, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9D, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 
   0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x53, 0x00, 0xAE, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 
   0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0xC8, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 
   0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 
   0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 
   0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 
   0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x77, 0x87, 
   0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 
   0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 
   0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 
   0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x62, 0x00, 0x9E, 0x62, 0x01, 0x9F, 0x61, 0x00, 0x9E, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 
   0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 
   0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 
   0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 
   0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB6, 
   0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0xC8, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 
   0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 
   0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 
   0x53, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA8, 
   0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5C, 
   0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 
   0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 
   0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 
   0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x79, 0x01, 0x85, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x88, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x89, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 
   0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x91, 0x6E, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 
   0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 
   0x63, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 
   0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAB, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 
   0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 
   0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB6, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x01, 0x37, 0xC8, 
   0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x01, 
   0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC3, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 
   0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x01, 0x4C, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA1, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 
   0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 
   0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x87, 0x01, 0x77, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 
   0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x86, 0x78, 
   0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 
   0x72, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6D, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 
   0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x97, 0x69, 0x00, 0x97, 0x69, 
   0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 
   0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 
   0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC9, 
   0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC5, 0x00, 
   0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 
   0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 
   0x41, 0xBE, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x43, 0xBB, 0x00, 0x44, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB7, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 
   0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 
   0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 
   0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 
   0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 
   0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 
   0x8B, 0x00, 0x75, 0x8A, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 
   0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x01, 
   0x82, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 
   0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 
   0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x01, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6D, 0x01, 0x91, 0x6E, 0x01, 0x93, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 
   0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 
   0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 
   0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 
   0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 
   0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3B, 
   0xC4, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 
   0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 
   0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4B, 
   0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x55, 0xA9, 
   0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA7, 0x01, 
   0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 
   0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 
   0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 
   0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x65, 0x99, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 
   0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x01, 0x6B, 0x94, 0x00, 0x6D, 0x92, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 
   0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x72, 
   0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x8F, 0x6F, 0x00, 0x91, 0x6F, 0x00, 
   0x90, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9A, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xC9, 0x01, 0x35, 0xC9, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 
   0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 
   0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 
   0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 
   0x61, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 
   0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 
   0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 
   0x71, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 
   0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 
   0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x01, 0x7F, 0x80, 0x00, 0x7E, 0x81, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 
   0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 
   0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8E, 0x72, 
   0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6E, 0x00, 0x93, 0x6D, 0x01, 0x93, 
   0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 
   0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 
   0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 
   0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA3, 0x5D, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 
   0x39, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 
   0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x01, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 
   0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x54, 0xAA, 
   0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 
   0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 
   0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x64, 0x9A, 
   0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 
   0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x88, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x7A, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7B, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 
   0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 
   0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 
   0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 
   0x00, 0xAE, 0x52, 0x00, 0xAD, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 
   0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 
   0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 
   0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 
   0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 
   0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 
   0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 
   0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 
   0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 
   0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 
   0x00, 0x6D, 0x93, 0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 
   0x8E, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 
   0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7A, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x85, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 
   0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 
   0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 
   0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB3, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 
   0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC1, 0x01, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 
   0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 
   0x47, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB1, 0x01, 
   0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 
   0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 
   0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 
   0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 
   0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 
   0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 
   0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x79, 0x01, 0x85, 0x79, 0x00, 0x86, 0x78, 0x00, 
   0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x76, 0x01, 0x88, 0x76, 0x00, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xAA, 
   0x56, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 
   0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 0x37, 0xC9, 0x01, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 
   0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 
   0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBF, 0x00, 0x41, 
   0xBD, 0x00, 0x42, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 
   0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x01, 0x49, 
   0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 
   0x00, 0x53, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 
   0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 
   0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 
   0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x91, 
   0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 
   0x67, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 
   0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x00, 
   0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 
   0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x53, 0x00, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4F, 0x00, 0xB1, 0x4F, 0x00, 0xB2, 0xCD, 0x01, 0x32, 0xCC, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 
   0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x34, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 
   0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBB, 
   0x00, 0x43, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB6, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x58, 
   0xA6, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x59, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x65, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 
   0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x01, 0x74, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 
   0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 
   0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 
   0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 
   0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 
   0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 
   0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA9, 
   0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 
   0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0xCD, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 
   0xC7, 0x01, 0x38, 0xC6, 0x01, 0x3A, 0xC6, 0x01, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 
   0x01, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 
   0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBD, 
   0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x01, 
   0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 
   0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 
   0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA4, 
   0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 
   0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x63, 0x9C, 
   0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x67, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 
   0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 
   0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 
   0x75, 0x89, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 
   0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x78, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x89, 0x75, 0x00, 0x8B, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x93, 0x6D, 
   0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 
   0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 
   0x00, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 
   0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x01, 
   0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 
   0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 
   0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 
   0x01, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x01, 
   0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 
   0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 
   0x55, 0xA9, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 
   0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 
   0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x01, 0x81, 0x7E, 
   0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 
   0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6E, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 
   0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 
   0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0xA0, 
   0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5B, 0x00, 0xA6, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 
   0xAC, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 
   0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0xCE, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x01, 0x32, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x01, 
   0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x01, 0x44, 0xBA, 0x00, 
   0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 
   0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x51, 0xAD, 
   0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 
   0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 
   0xA8, 0x01, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 
   0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x01, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6E, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 
   0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x82, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x71, 0x00, 0x8F, 0x6F, 0x01, 0x8F, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x68, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 
   0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 
   0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 
   0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x00, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 
   0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 
   0x50, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCD, 
   0x01, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 
   0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x01, 0x36, 0xC8, 0x00, 0x36, 
   0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC5, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x41, 0xBD, 
   0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 
   0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB6, 
   0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 
   0x53, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 
   0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x58, 0xA6, 
   0x01, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x76, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7C, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x81, 0x7E, 0x00, 0x80, 0x7E, 
   0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x79, 0x00, 0x85, 0x7A, 0x01, 0x87, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 
   0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8F, 
   0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 
   0x01, 0x91, 0x6D, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x00, 0x97, 0x69, 0x01, 0x98, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 
   0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 
   0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 
   0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 
   0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 
   0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 
   0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x40, 0xBE, 
   0x00, 0x41, 0xBD, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 
   0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 
   0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 0x4E, 
   0xB0, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 
   0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xAA, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 
   0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 
   0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 
   0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 
   0x91, 0x00, 0x6E, 0x90, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 
   0x01, 0x71, 0x8F, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 
   0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 
   0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x78, 0x87, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 
   0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 
   0x82, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x87, 0x78, 0x00, 0x88, 0x76, 
   0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x00, 
   0x8C, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 
   0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6D, 0x01, 
   0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 
   0x9C, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 
   0xA4, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 
   0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x58, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 
   0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 
   0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 
   0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x01, 
   0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x34, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 
   0x01, 0x39, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 
   0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 
   0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 
   0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 
   0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x00, 0x55, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x01, 0x58, 0xA7, 
   0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x9A, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x90, 
   0x00, 0x71, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x88, 
   0x01, 0x79, 0x86, 0x01, 0x78, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 
   0x7B, 0x85, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x83, 0x00, 0x7D, 
   0x82, 0x00, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 
   0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 
   0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 
   0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x73, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8E, 
   0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x96, 
   0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 
   0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAA, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCD, 0x00, 
   0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 
   0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 
   0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x01, 0x44, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x47, 0xB7, 
   0x00, 0x48, 0xB6, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 
   0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 
   0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 
   0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 
   0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 
   0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 
   0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 
   0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 0x80, 0x80, 
   0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 
   0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 
   0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 
   0x63, 0x01, 0x9E, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 
   0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xA9, 0x56, 0x00, 
   0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0xD1, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x34, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x37, 0xC7, 0x01, 0x38, 0xC6, 0x01, 0x39, 0xC7, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB7, 
   0x00, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 
   0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 
   0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 
   0x52, 0xAC, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 
   0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x63, 0x9B, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6A, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 
   0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 
   0x71, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7E, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 
   0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8B, 0x73, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 0x9D, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 
   0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD1, 0x00, 0x2F, 0xD0, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 
   0x31, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 
   0x01, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 
   0x01, 0x3F, 0xBF, 0x01, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 
   0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 
   0xBB, 0x01, 0x44, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB5, 0x00, 
   0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 
   0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 
   0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 
   0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x60, 0x9E, 0x01, 
   0x61, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 
   0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 
   0x94, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 
   0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 
   0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 
   0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 
   0x84, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x01, 0x87, 0x79, 0x01, 0x88, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8E, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x97, 0x69, 
   0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 
   0xA9, 0x57, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 
   0x53, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 
   0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 
   0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 
   0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBE, 0x01, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBC, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 
   0x00, 0x47, 0xB9, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 
   0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 
   0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x76, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 
   0x79, 0x87, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 
   0x00, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x00, 
   0x80, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x85, 0x79, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x71, 0x00, 0x8D, 0x71, 
   0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x95, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 
   0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x99, 0x67, 0x00, 
   0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x34, 
   0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 
   0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBC, 0x01, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 
   0x48, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 
   0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 
   0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 
   0x60, 0x9E, 0x00, 0x60, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6B, 
   0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x75, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 
   0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x6A, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x01, 
   0xA1, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA5, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 
   0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAA, 
   0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 
   0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 
   0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 
   0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC1, 
   0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xC0, 0x01, 
   0x41, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB7, 0x01, 0x47, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 
   0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 
   0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 
   0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 
   0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 
   0x67, 0x97, 0x00, 0x68, 0x96, 0x00, 0x68, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6C, 0x92, 
   0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x71, 0x8D, 0x00, 0x72, 
   0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 
   0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x83, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 
   0x80, 0x80, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x84, 0x7A, 
   0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8B, 
   0x75, 0x01, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 
   0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 
   0x01, 0x9E, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x00, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 
   0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 
   0x01, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD1, 0x00, 0x2F, 0xCF, 0x00, 
   0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x34, 0xCA, 
   0x01, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 
   0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 
   0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 
   0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x01, 
   0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 
   0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 
   0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 
   0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x01, 0x6D, 0x93, 0x01, 0x6D, 0x91, 0x00, 0x6D, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8F, 0x01, 0x72, 0x8E, 0x00, 0x72, 
   0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7C, 0x83, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x93, 0x6C, 0x01, 0x95, 0x6B, 
   0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 
   0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 
   0x00, 0xA4, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 
   0x56, 0x01, 0xAB, 0x55, 0x01, 0xAA, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 
   0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 
   0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 
   0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC1, 0x01, 
   0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 
   0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 
   0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x01, 
   0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 
   0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 
   0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x01, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 
   0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 
   0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6C, 0x92, 0x00, 0x6C, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6F, 0x91, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x72, 
   0x8D, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 
   0x85, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 
   0x00, 0x7D, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x81, 0x7E, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x93, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 
   0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 
   0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 
   0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x01, 
   0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x30, 0xCE, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC8, 0x01, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 
   0xC5, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 
   0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 
   0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 
   0x01, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB8, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 
   0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 
   0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 
   0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 
   0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x67, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x00, 0x6C, 0x94, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 
   0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 
   0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 
   0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x67, 0x01, 0x97, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 
   0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 
   0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 
   0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0xD5, 0x00, 0x2B, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 
   0x2F, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 
   0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 
   0xC7, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3C, 0xC4, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x01, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x54, 0xA9, 0x00, 0x55, 0xA9, 0x01, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x67, 0x97, 0x00, 0x68, 
   0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x95, 
   0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 
   0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7B, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 
   0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9A, 0x64, 
   0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5C, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 
   0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x01, 0xA8, 
   0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2E, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x01, 
   0x35, 0xCA, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC8, 0x00, 0x38, 
   0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 
   0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 
   0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB6, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 
   0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x52, 0xAC, 
   0x01, 0x53, 0xAB, 0x01, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x01, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6C, 0x92, 0x01, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 
   0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x77, 0x88, 0x00, 0x76, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x87, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 
   0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 
   0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x77, 0x01, 0x88, 0x76, 0x01, 0x88, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8C, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x97, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 
   0x00, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0xA0, 0x60, 0x00, 0xA0, 
   0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 
   0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 
   0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x01, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x37, 
   0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 
   0xC0, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 
   0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 
   0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 
   0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 
   0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 
   0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 
   0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x75, 0x8B, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 
   0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x85, 0x7B, 0x01, 
   0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x76, 
   0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 
   0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 
   0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x68, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x00, 
   0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 
   0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD6, 0x00, 0x29, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 
   0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x01, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 
   0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 
   0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 
   0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 
   0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 
   0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 
   0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x01, 0x57, 
   0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 
   0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 
   0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x85, 0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 
   0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x8A, 0x76, 0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 
   0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 
   0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 
   0x01, 0x99, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 
   0x9D, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD5, 
   0x00, 0x29, 0xD6, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 
   0xD1, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x00, 
   0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC2, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x00, 
   0x44, 0xBB, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 
   0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 
   0x4C, 0xB2, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAD, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x01, 0x59, 0xA6, 
   0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 
   0x5C, 0xA2, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x5F, 0x9E, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x64, 0x9B, 0x01, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x96, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 
   0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 
   0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 
   0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 
   0x8C, 0x74, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 
   0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 
   0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x29, 0xD6, 0x01, 0x28, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 
   0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 
   0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB7, 
   0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 
   0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 
   0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 
   0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 
   0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 
   0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 
   0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x86, 0x78, 0x01, 0x86, 0x78, 0x01, 0x87, 0x77, 0x00, 0x87, 0x77, 0x00, 0x89, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x00, 0x91, 0x6F, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 
   0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x66, 
   0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 
   0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 
   0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 
   0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2D, 
   0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x01, 
   0x3B, 0xC3, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBE, 
   0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x44, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 
   0xB9, 0x01, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB3, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 
   0x01, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 
   0x01, 0x59, 0xA7, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 
   0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 
   0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 
   0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x88, 
   0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 
   0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 
   0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 
   0x71, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9E, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 
   0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 
   0x01, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD4, 0x00, 0x2A, 0xD5, 0x00, 
   0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 
   0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC1, 0x01, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 
   0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB7, 
   0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x4A, 0xB6, 0x01, 0x4A, 0xB4, 0x01, 
   0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 
   0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 
   0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 
   0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 
   0x01, 0x60, 0x9E, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 
   0x63, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x64, 0x9B, 0x00, 0x65, 
   0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x66, 0x98, 0x01, 0x68, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 
   0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 
   0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 
   0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 
   0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6E, 0x01, 
   0x92, 0x6C, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x00, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x62, 0x01, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x01, 0x30, 0xD0, 
   0x00, 0x30, 0xD0, 0x00, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC9, 0x01, 0x37, 0xC7, 
   0x00, 0x38, 0xC8, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 
   0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 
   0x01, 0x48, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x49, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 
   0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 
   0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6C, 0x92, 0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x00, 0x72, 0x8E, 0x00, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 
   0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x76, 0x88, 
   0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 
   0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x82, 0x7D, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 
   0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 
   0x00, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x96, 0x68, 
   0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 
   0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 
   0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 
   0xD3, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 
   0x00, 0x30, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 
   0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x00, 0x35, 0xCA, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 
   0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 
   0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x00, 0x44, 
   0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x01, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 
   0x00, 0x57, 0xA7, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 
   0x9B, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 
   0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x90, 
   0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x71, 0x8D, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 
   0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7F, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 
   0x81, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x85, 0x7A, 0x01, 0x87, 0x79, 
   0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 
   0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 
   0x6C, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x9A, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5C, 0x01, 0xA5, 0x5B, 0x00, 0xA4, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 
   0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD1, 
   0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x01, 
   0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 
   0x00, 0x36, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x3A, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBA, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x01, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAB, 0x01, 0x53, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA0, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x65, 0x99, 
   0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 
   0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x79, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 
   0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 
   0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 
   0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA0, 0x5E, 0x00, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 
   0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 
   0x01, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC3, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBE, 0x00, 
   0x40, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x47, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 
   0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 
   0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 
   0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 
   0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 
   0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x67, 0x97, 0x00, 
   0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6C, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 
   0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 
   0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 
   0x01, 0x7E, 0x82, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 
   0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7C, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 
   0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x8F, 0x70, 0x00, 
   0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 
   0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 
   0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 
   0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x01, 0x2A, 0xD5, 0x01, 0x2B, 0xD5, 0x00, 0x2A, 
   0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 
   0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 
   0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x53, 
   0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x57, 0xA8, 0x01, 
   0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 
   0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 
   0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 
   0x00, 0x86, 0x79, 0x01, 0x85, 0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x77, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8C, 0x72, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x67, 0x00, 
   0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x62, 
   0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0xDC, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 
   0xD4, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x01, 
   0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC7, 0x00, 
   0x38, 0xC8, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3C, 0xC3, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x40, 0xC0, 0x00, 
   0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x01, 0x42, 
   0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 
   0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 
   0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4C, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 
   0x57, 0xA7, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x01, 0x65, 0x99, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 
   0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6E, 0x90, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 
   0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x82, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x88, 0x77, 0x01, 0x8A, 0x75, 0x00, 0x8A, 
   0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x94, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 
   0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 0xD7, 0x00, 
   0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 
   0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x31, 
   0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x00, 0x35, 0xCB, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 
   0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 
   0x00, 0x45, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB8, 0x01, 
   0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 
   0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 
   0x00, 0x54, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 
   0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 
   0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 
   0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 
   0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 
   0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 
   0x00, 0x75, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x76, 0x8A, 0x00, 0x77, 0x88, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 
   0x7E, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x78, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 
   0x75, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8B, 0x73, 
   0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x71, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x92, 
   0x6E, 0x01, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0xDC, 0x00, 0x22, 0xDC, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x25, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 
   0x27, 0xD8, 0x01, 0x28, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 
   0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x01, 
   0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 
   0xC5, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3C, 0xC4, 0x01, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x01, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 
   0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x00, 0x51, 
   0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 
   0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x78, 
   0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7D, 0x82, 0x00, 
   0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x84, 0x7C, 
   0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x01, 0x85, 0x79, 0x01, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8D, 0x71, 0x00, 
   0x8E, 0x70, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 
   0x00, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x98, 
   0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x00, 0x9B, 0x64, 0x00, 0x9C, 0x62, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 
   0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 
   0x26, 0xD8, 0x00, 0x26, 0xD7, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2F, 0xD1, 0x01, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 
   0xBE, 0x01, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 
   0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 
   0xB7, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 
   0x56, 0xA8, 0x00, 0x56, 0xA9, 0x01, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA2, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 
   0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x01, 
   0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 
   0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 
   0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 
   0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 
   0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x76, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x94, 0x6B, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 
   0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x66, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 
   0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 
   0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 
   0x25, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x01, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 
   0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x01, 0x38, 
   0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 
   0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 
   0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBB, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB8, 0x01, 0x49, 
   0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 
   0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 
   0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 
   0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 
   0x66, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 
   0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 
   0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 
   0x7D, 0x81, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x7F, 
   0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 
   0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 
   0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 
   0x70, 0x00, 0x90, 0x6E, 0x01, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 
   0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x97, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 
   0x01, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 
   0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD7, 0x01, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x01, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x01, 0x2F, 
   0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 
   0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 
   0x35, 0xC9, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 
   0xC7, 0x00, 0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 
   0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 
   0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3F, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x00, 0x43, 0xBD, 
   0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 
   0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x97, 0x00, 0x67, 
   0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 
   0x8F, 0x01, 0x70, 0x90, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 
   0x01, 0x73, 0x8C, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 
   0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 
   0x78, 0x01, 0x87, 0x78, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 
   0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 
   0x6F, 0x00, 0x8F, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x00, 
   0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 
   0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 
   0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x22, 0xDC, 
   0x01, 0x22, 0xDD, 0x00, 0x22, 0xDB, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x01, 
   0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x28, 
   0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 
   0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 
   0x01, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 
   0x45, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB6, 
   0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4C, 0xB2, 0x00, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x01, 0x4F, 
   0xB0, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAB, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA6, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 
   0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 
   0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 
   0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 
   0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 
   0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 
   0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7E, 0x01, 0x80, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 
   0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 
   0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x00, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x20, 0xDD, 0x00, 0x21, 0xDD, 
   0x01, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 
   0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD9, 0x00, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 
   0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 
   0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3C, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3E, 
   0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 
   0x00, 0x42, 0xBE, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 
   0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 
   0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 
   0x01, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 
   0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 
   0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 
   0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6A, 0x94, 0x00, 0x6C, 0x94, 0x01, 
   0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x00, 0x6E, 0x90, 0x01, 0x70, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x7A, 0x85, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7C, 0x84, 0x00, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x77, 
   0x01, 0x89, 0x75, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x73, 0x01, 
   0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 
   0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 
   0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x96, 0x69, 0x00, 0x95, 0x69, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 
   0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 
   0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 
   0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 
   0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x33, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 
   0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 
   0x44, 0xBB, 0x01, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 
   0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 
   0xA8, 0x01, 0x57, 0xA9, 0x00, 0x58, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 
   0x01, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 
   0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x90, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x76, 0x8A, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 
   0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x85, 
   0x79, 0x01, 0x87, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x00, 0x98, 0x67, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 
   0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 
   0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 
   0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD6, 
   0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 
   0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x01, 0x36, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 
   0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 
   0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 
   0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x49, 0xB7, 
   0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 
   0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x51, 0xAF, 
   0x01, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 
   0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 
   0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 
   0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 
   0x91, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x6F, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 
   0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 
   0x8A, 0x01, 0x76, 0x8A, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x77, 0x87, 
   0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 
   0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 
   0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 
   0x71, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 
   0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 
   0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 
   0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 
   0x61, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDD, 0x00, 
   0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xD9, 0x01, 0x25, 
   0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD8, 0x00, 0x27, 0xD7, 
   0x01, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 
   0xC9, 0x01, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC8, 0x01, 0x37, 0xC7, 
   0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 
   0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB8, 
   0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 
   0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 
   0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x01, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAB, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 
   0xA1, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 
   0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6C, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 
   0x00, 0x6F, 0x90, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 
   0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 
   0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x88, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 
   0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x7F, 
   0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 
   0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x86, 0x78, 0x00, 0x88, 0x78, 
   0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8D, 0x73, 0x01, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0xE1, 0x01, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 
   0x00, 0x1F, 0xDF, 0x00, 0x21, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 
   0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 
   0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 
   0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 
   0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBE, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 
   0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 
   0x4B, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x52, 0xAE, 0x00, 0x51, 0xAD, 0x01, 
   0x52, 0xAC, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 
   0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9A, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 
   0x01, 0x67, 0x98, 0x00, 0x68, 0x96, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 
   0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x75, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 
   0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 
   0x00, 0x80, 0x7F, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 
   0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x71, 
   0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6E, 0x00, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x01, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x95, 
   0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 
   0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xDF, 
   0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x01, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDB, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 
   0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 
   0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x34, 
   0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3D, 
   0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x43, 0xBB, 0x00, 0x44, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 
   0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 
   0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 
   0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x78, 0x86, 0x00, 
   0x79, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x80, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x81, 0x7E, 0x00, 0x80, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 
   0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x75, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0xE2, 0x00, 0x1D, 0xE1, 0x01, 0x1E, 0xE1, 0x01, 0x1E, 0xE1, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 
   0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 
   0x2A, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 
   0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 
   0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x31, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC4, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 
   0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 
   0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x01, 0x43, 0xBD, 0x00, 0x44, 0xBC, 0x01, 0x44, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x47, 0xB9, 
   0x00, 0x47, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x01, 0x4C, 0xB4, 0x01, 0x4C, 
   0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 
   0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x01, 
   0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 
   0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5D, 0xA0, 
   0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x93, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x86, 0x78, 0x01, 0x88, 0x77, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 
   0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 
   0x00, 0x8E, 0x70, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 
   0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x01, 0x93, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 
   0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0xE3, 0x00, 0x1C, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x01, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x01, 
   0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 
   0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x25, 0xD9, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 
   0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD3, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x01, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x34, 0xCC, 0x00, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x01, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 
   0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 
   0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 
   0x69, 0x97, 0x00, 0x68, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 
   0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x89, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7A, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 
   0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD7, 0x00, 
   0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 
   0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 
   0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCC, 0x01, 0x33, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x01, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 
   0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC5, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 
   0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x40, 0xBF, 0x00, 0x42, 0xBD, 0x00, 0x41, 0xBD, 0x01, 0x43, 0xBD, 0x00, 0x42, 
   0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 
   0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 
   0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 
   0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 
   0x9D, 0x01, 0x62, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 
   0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 
   0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x75, 0x8A, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 
   0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 
   0x00, 0x8D, 0x71, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x70, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 
   0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x69, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 
   0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 
   0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 
   0xDD, 0x01, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x01, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x00, 0x25, 0xDA, 
   0x00, 0x26, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 
   0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 
   0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 
   0xBD, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x00, 
   0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x50, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 
   0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 
   0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x65, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 
   0x01, 0x75, 0x8B, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7A, 0x84, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x85, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 
   0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 
   0x00, 0x94, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 
   0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 
   0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 
   0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 
   0x1F, 0xE0, 0x01, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 
   0xDD, 0x00, 0x23, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDA, 
   0x00, 0x25, 0xDA, 0x01, 0x25, 0xD9, 0x00, 0x25, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x26, 0xD8, 0x00, 
   0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2D, 0xD2, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 
   0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 
   0xC5, 0x01, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 
   0xBD, 0x01, 0x42, 0xBC, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBC, 0x01, 0x44, 0xBB, 
   0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 
   0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9E, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x61, 
   0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 
   0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 
   0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 
   0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x73, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x77, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 
   0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 
   0x7E, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 
   0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 
   0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 
   0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 
   0xDE, 0x01, 0x22, 0xDD, 0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDB, 0x01, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 
   0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 
   0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 
   0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x38, 0xC6, 0x00, 0x39, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 
   0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBC, 
   0x00, 0x44, 0xBA, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 
   0x47, 0xB9, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x01, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 
   0x57, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9B, 0x00, 0x63, 0x9B, 
   0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 
   0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 
   0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7F, 0x80, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x79, 0x01, 0x87, 0x79, 0x01, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x73, 
   0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 
   0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 
   0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 
   0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 
   0x00, 0x1B, 0xE2, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x01, 0x1D, 0xE1, 0x01, 
   0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x01, 0x1F, 0xDF, 0x00, 0x1F, 0xDE, 0x00, 0x20, 0xDE, 0x01, 0x20, 
   0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 
   0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2B, 0xD4, 0x01, 0x2B, 0xD4, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 
   0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x01, 
   0x37, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 
   0x00, 0x3C, 0xC4, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x01, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 
   0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x01, 
   0x47, 0xB8, 0x01, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x01, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 
   0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 
   0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x74, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7A, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x86, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x75, 
   0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 
   0x95, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x01, 0x1B, 0xE3, 
   0x00, 0x1C, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x01, 0x1D, 0xE1, 0x00, 
   0x1E, 0xE1, 0x00, 0x1F, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDD, 0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 
   0x00, 0x23, 0xDB, 0x01, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 
   0x25, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 
   0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x2A, 0xD5, 0x01, 0x2B, 0xD4, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x00, 0x2F, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 
   0xCE, 0x01, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x32, 0xCC, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 
   0x01, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x00, 0x41, 0xBF, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 
   0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 
   0x45, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 
   0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB1, 0x00, 
   0x4D, 0xB1, 0x01, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 
   0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 
   0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x77, 0x88, 0x00, 0x77, 0x89, 0x00, 0x77, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x86, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 
   0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x84, 0x7B, 0x00, 
   0x86, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x78, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 
   0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 
   0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1A, 0xE4, 
   0x00, 0x1A, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 
   0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x01, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x01, 0x25, 0xDA, 0x00, 
   0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 
   0xD7, 0x00, 0x28, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD5, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x01, 
   0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 
   0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 
   0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 
   0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 
   0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x01, 0x42, 0xBD, 
   0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 
   0x00, 0x4B, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 
   0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x4F, 
   0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 
   0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 
   0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 
   0x65, 0x99, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 
   0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 
   0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 
   0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 
   0x7D, 0x83, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 
   0x84, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x87, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 
   0x78, 0x01, 0x87, 0x77, 0x01, 0x89, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 
   0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 
   0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0xE6, 0x01, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 
   0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x01, 
   0x1D, 0xE2, 0x01, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x01, 0x1F, 
   0xDF, 0x00, 0x1F, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDC, 
   0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x01, 
   0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 
   0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 
   0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCD, 
   0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x38, 
   0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 
   0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 
   0xBF, 0x01, 0x40, 0xC0, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x47, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x4A, 0xB6, 
   0x01, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 
   0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 
   0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 
   0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x76, 
   0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x84, 0x7B, 0x01, 0x83, 0x7B, 0x01, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 
   0x78, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8B, 0x73, 0x01, 
   0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 
   0x95, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 
   0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1D, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1E, 
   0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 
   0x01, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x24, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD9, 0x00, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 
   0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 
   0xD0, 0x01, 0x30, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 
   0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 
   0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x46, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 
   0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB4, 0x01, 
   0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAB, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x67, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 
   0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 
   0x88, 0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7C, 0x83, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 
   0x78, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8F, 
   0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 
   0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x01, 0x19, 0xE6, 
   0x01, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1C, 0xE2, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x01, 0x1E, 0xE1, 0x00, 0x1E, 
   0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x01, 0x23, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x01, 0x26, 0xD9, 0x00, 0x26, 
   0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x00, 0x2A, 0xD5, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2B, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 
   0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 
   0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x01, 
   0x44, 0xBC, 0x00, 0x45, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB7, 
   0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x50, 0xAE, 
   0x01, 0x51, 0xAD, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 
   0x53, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5F, 
   0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x69, 0x97, 
   0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 
   0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x93, 0x6B, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x01, 0x18, 0xE6, 
   0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 
   0x1C, 0xE4, 0x01, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1D, 
   0xE1, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 
   0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 
   0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 
   0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 
   0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 
   0xD1, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 
   0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 
   0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC9, 0x01, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 
   0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 
   0x43, 0xBB, 0x01, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9A, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 
   0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 
   0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 
   0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x73, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x17, 0xE7, 
   0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 
   0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 
   0xE2, 0x01, 0x1D, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x01, 0x22, 0xDC, 0x00, 
   0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x23, 0xDA, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x26, 
   0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD6, 
   0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x2A, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCE, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCA, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x36, 
   0xC9, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 
   0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 
   0x01, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 
   0xB9, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB9, 0x01, 0x48, 0xB8, 0x00, 0x47, 0xB7, 
   0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 
   0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 
   0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 
   0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x01, 0x60, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 
   0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 
   0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 
   0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 
   0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x6F, 
   0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 
   0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 
   0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 
   0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x24, 0xDA, 0x01, 0x25, 0xDB, 0x00, 0x25, 
   0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 
   0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x33, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCB, 0x00, 0x34, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 
   0x01, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 
   0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 
   0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 
   0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x01, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x44, 
   0xBA, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 
   0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 
   0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 
   0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x01, 0x57, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 
   0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 
   0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 
   0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 
   0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x86, 0x78, 
   0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 
   0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8B, 0x73, 0x00, 0x8D, 
   0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 
   0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 
   0x00, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x01, 0x18, 0xE5, 0x00, 0x1A, 0xE6, 0x00, 
   0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1C, 
   0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x01, 0x1F, 0xE0, 
   0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDD, 0x01, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x23, 0xDB, 0x00, 0x24, 
   0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2A, 0xD4, 0x01, 0x2C, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 
   0x00, 0x30, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x33, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 
   0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 
   0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x42, 0xBD, 0x00, 
   0x41, 0xBD, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x43, 0xBC, 0x01, 0x44, 
   0xBB, 0x01, 0x44, 0xBB, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 
   0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 
   0xB3, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 
   0x51, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 
   0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 
   0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x84, 0x00, 0x7D, 0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8C, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8C, 0x72, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 
   0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE9, 0x01, 0x16, 0xE9, 
   0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x19, 0xE7, 0x00, 0x19, 0xE5, 0x00, 
   0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 
   0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDD, 0x00, 0x23, 0xDB, 0x00, 0x23, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x01, 
   0x29, 0xD6, 0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 
   0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2C, 0xD2, 0x01, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x32, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 
   0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 
   0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x47, 0xB9, 
   0x00, 0x46, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 
   0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 
   0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 
   0x69, 0x95, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x85, 0x00, 0x7C, 
   0x83, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7F, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 
   0x88, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 
   0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE7, 0x00, 
   0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 
   0xE3, 0x01, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x21, 0xDE, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 
   0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2B, 
   0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 
   0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 
   0xCB, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xC9, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x38, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x01, 0x3C, 
   0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x40, 0xBE, 0x01, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBD, 0x00, 0x43, 
   0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 
   0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 
   0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 
   0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x59, 0xA5, 0x00, 0x59, 0xA6, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x92, 
   0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 
   0x79, 0x86, 0x01, 0x78, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7B, 0x85, 0x00, 0x7B, 
   0x85, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7E, 0x82, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x80, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 
   0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7B, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x90, 0x6E, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0xEA, 0x00, 0x15, 0xEB, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 
   0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x01, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 
   0xE4, 0x01, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x28, 0xD7, 0x00, 
   0x28, 0xD7, 0x01, 0x29, 0xD5, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x01, 0x2F, 0xCF, 0x00, 
   0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x01, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 
   0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x01, 
   0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBD, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 
   0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 
   0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x52, 
   0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 
   0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA1, 
   0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 
   0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 
   0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 
   0x77, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 
   0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 
   0x87, 0x78, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x75, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x92, 0x6D, 0x00, 0x91, 0x6E, 0x01, 0x93, 
   0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0xEB, 0x00, 0x13, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x01, 0x17, 0xE7, 0x00, 
   0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 
   0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 
   0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x01, 0x1F, 0xE0, 0x01, 0x1F, 0xE0, 0x00, 
   0x20, 0xDF, 0x01, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 
   0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 
   0x2F, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 
   0x00, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x01, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 
   0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 
   0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 
   0xBC, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x01, 0x48, 0xB8, 0x01, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x01, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x50, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 
   0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 
   0x01, 0x84, 0x7B, 0x00, 0x86, 0x79, 0x01, 0x86, 0x7A, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 
   0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x73, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8E, 0x70, 0x00, 
   0x8F, 0x6F, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 
   0x00, 0x15, 0xEA, 0x01, 0x16, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x01, 0x17, 0xE7, 0x00, 
   0x18, 0xE8, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE5, 0x01, 0x1A, 0xE4, 0x00, 0x1A, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 
   0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 
   0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 
   0xDD, 0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 
   0x01, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD9, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD6, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 
   0xCD, 0x01, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x35, 0xCB, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 
   0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 
   0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 
   0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 
   0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 
   0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 
   0xAE, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA1, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 
   0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 
   0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 
   0x96, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 
   0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 
   0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 
   0x7E, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x7F, 0x80, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 
   0x7E, 0x01, 0x81, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 
   0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8F, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 
   0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0xEC, 0x00, 0x12, 0xEB, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 
   0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 
   0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE6, 0x00, 0x1A, 0xE5, 0x01, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE2, 
   0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 
   0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x01, 0x21, 0xDE, 0x00, 0x22, 
   0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 
   0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 
   0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2D, 0xD2, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 
   0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 
   0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 
   0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 
   0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 
   0xBE, 0x01, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 
   0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 
   0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 
   0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x57, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 
   0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 
   0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 
   0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x00, 0x7C, 0x83, 
   0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x00, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 
   0x77, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 
   0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x91, 0x6F, 0x01, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 
   0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x01, 
   0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 
   0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 
   0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 
   0xDD, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 
   0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD0, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 
   0x47, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 
   0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x01, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 
   0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x93, 
   0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 
   0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 
   0x76, 0x8A, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 
   0x7E, 0x82, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x01, 0x88, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 
   0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 
   0x8E, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 
   0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 
   0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1B, 0xE4, 
   0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 
   0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xE0, 0x00, 0x20, 0xDF, 0x01, 0x21, 
   0xDF, 0x00, 0x21, 0xDE, 0x01, 0x21, 0xDE, 0x01, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x01, 0x23, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 
   0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD6, 0x00, 0x29, 0xD5, 0x01, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 
   0x00, 0x2C, 0xD4, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 
   0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 
   0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 
   0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 
   0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 
   0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 
   0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 
   0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 
   0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 
   0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x62, 0x9C, 
   0x01, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x01, 
   0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 
   0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 
   0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x87, 
   0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8C, 0x72, 0x00, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 
   0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE8, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x01, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 
   0x00, 0x1A, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 
   0x1E, 0xE1, 0x01, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 
   0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 
   0x01, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x27, 
   0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 
   0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 
   0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 
   0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBC, 
   0x01, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x01, 0x4B, 0xB4, 
   0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 
   0xB0, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 
   0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9E, 0x00, 0x63, 0x9D, 
   0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x64, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 
   0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 
   0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 
   0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 
   0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x78, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x77, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x76, 
   0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8B, 0x74, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0xEE, 0x00, 0x10, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 
   0xE7, 0x01, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE4, 
   0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 
   0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDC, 
   0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDB, 0x00, 
   0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x28, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 
   0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 
   0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 
   0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 
   0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x43, 0xBD, 0x01, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 
   0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 
   0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4F, 
   0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAE, 
   0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAC, 0x01, 0x55, 0xAA, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 
   0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 
   0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x75, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 
   0x89, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x7A, 0x86, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 
   0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 
   0x01, 0x8A, 0x76, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x72, 0x01, 0x8F, 0x71, 0x00, 0x8F, 
   0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 
   0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x13, 0xEB, 0x01, 
   0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x01, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 
   0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 
   0x1C, 0xE3, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 
   0xE0, 0x01, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 
   0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 
   0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x43, 0xBB, 0x00, 
   0x45, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x49, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAD, 
   0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 
   0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x57, 0xA7, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 
   0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 
   0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x89, 0x75, 0x01, 0x8A, 0x76, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0xEF, 0x01, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 
   0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 
   0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 
   0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x01, 
   0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 
   0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 
   0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x01, 0x33, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 
   0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 
   0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x01, 0x3A, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3A, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3E, 0xC2, 0x00, 0x3E, 
   0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x01, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 
   0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x58, 0xA6, 
   0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x61, 0x9F, 0x01, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x78, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x79, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x01, 0x11, 0xEE, 
   0x00, 0x10, 0xED, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEC, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 
   0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 
   0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 
   0x00, 0x19, 0xE5, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 
   0x1C, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 
   0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 
   0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 
   0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xD9, 0x00, 0x25, 0xDA, 0x00, 0x26, 
   0xD8, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x01, 0x29, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 
   0x01, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 
   0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 
   0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x44, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 
   0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 
   0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 
   0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 
   0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9D, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 
   0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 
   0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 
   0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7B, 0x85, 0x01, 
   0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x86, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x73, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 
   0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEE, 0x01, 0x12, 0xEC, 0x00, 0x12, 0xED, 0x00, 
   0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x01, 0x15, 
   0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x01, 0x18, 0xE6, 
   0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE5, 0x00, 
   0x1B, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 
   0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 0xDF, 0x00, 0x1F, 0xDF, 
   0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDC, 0x01, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 
   0xDA, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD7, 
   0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x01, 
   0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3E, 0xC1, 0x00, 0x40, 0xC0, 0x00, 0x3F, 0xBF, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x01, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB4, 0x01, 
   0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 
   0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4F, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 
   0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x00, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 
   0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x00, 0x63, 0x9B, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 
   0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 
   0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 
   0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x79, 0x85, 0x01, 
   0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 
   0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 
   0x00, 0x10, 0xEE, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 
   0x13, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 
   0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 
   0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 
   0x1A, 0xE5, 0x01, 0x1B, 0xE4, 0x00, 0x1C, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1D, 
   0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 
   0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x21, 0xDD, 0x00, 
   0x23, 0xDD, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDB, 0x00, 0x25, 
   0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD8, 
   0x01, 0x28, 0xD6, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD0, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x01, 
   0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC2, 0x00, 0x3E, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 
   0x01, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 
   0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB6, 0x00, 
   0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x52, 0xAD, 0x00, 0x51, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 
   0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 
   0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 
   0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7B, 0x01, 0x83, 0x7B, 0x00, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 
   0x8A, 0x76, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x74, 0x00, 0x8D, 
   0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 
   0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x01, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 
   0x12, 0xEC, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 
   0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x01, 0x16, 0xE9, 0x00, 0x17, 0xE9, 0x00, 0x17, 0xE8, 
   0x00, 0x18, 0xE7, 0x01, 0x17, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 
   0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 
   0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x01, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x01, 
   0x29, 0xD4, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x01, 
   0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x35, 
   0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 
   0x01, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x39, 0xC7, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 
   0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 
   0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 
   0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 
   0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 
   0x49, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 
   0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 
   0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 
   0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x91, 
   0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 
   0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 
   0x00, 0x0F, 0xF0, 0x00, 0x10, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 
   0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 
   0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 
   0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 
   0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 
   0xE3, 0x00, 0x1C, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x01, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 
   0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 
   0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 
   0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 
   0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB7, 0x00, 
   0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 
   0xB4, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 
   0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 
   0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x63, 
   0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x96, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 
   0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 
   0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x82, 
   0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x84, 
   0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x87, 0x78, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 
   0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 
   0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 
   0x11, 0xED, 0x00, 0x12, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x01, 0x13, 0xEC, 0x00, 0x13, 
   0xEC, 0x00, 0x13, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE8, 
   0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE6, 0x01, 
   0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 
   0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDE, 0x00, 0x21, 0xDF, 0x00, 
   0x21, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 
   0xDC, 0x01, 0x23, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 
   0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 
   0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 
   0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 
   0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 
   0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 
   0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 
   0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 
   0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xAA, 
   0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA6, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 
   0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 
   0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 
   0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 
   0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 
   0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x7A, 
   0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x01, 0x8C, 0x74, 0x01, 0x8B, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 
   0x00, 0x0E, 0xF1, 0x01, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 
   0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x01, 0x12, 0xED, 0x00, 0x13, 
   0xEB, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xEA, 
   0x01, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 
   0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD6, 0x00, 
   0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 
   0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCE, 0x00, 
   0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 
   0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 
   0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xB9, 0x01, 0x47, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x56, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 
   0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 
   0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x66, 0x9A, 0x01, 0x66, 0x98, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x91, 
   0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 
   0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 
   0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0xF3, 0x01, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 
   0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 
   0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEC, 0x00, 0x12, 
   0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x01, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 
   0xE4, 0x00, 0x1B, 0xE4, 0x01, 0x1C, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 
   0x01, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 
   0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 
   0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 
   0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD8, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x01, 0x2A, 
   0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 
   0x00, 0x2E, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xD0, 0x00, 
   0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x32, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 
   0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3C, 0xC2, 
   0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 
   0x40, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 
   0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 
   0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 
   0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 
   0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 
   0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x89, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7A, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x00, 
   0x88, 0x77, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 
   0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 
   0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 
   0xED, 0x01, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEC, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEA, 
   0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 
   0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 
   0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE3, 0x01, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 
   0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x01, 
   0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 
   0xDD, 0x00, 0x23, 0xDD, 0x00, 0x22, 0xDC, 0x01, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 
   0x28, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x29, 
   0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 
   0x01, 0x2C, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 
   0xCD, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x34, 0xCB, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 
   0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 
   0xBD, 0x01, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 
   0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB6, 0x01, 0x49, 
   0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 
   0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x00, 
   0x50, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 
   0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xAA, 0x01, 0x57, 0xA9, 0x00, 0x56, 0xA8, 0x00, 
   0x58, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x01, 0x62, 
   0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 
   0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 
   0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 
   0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 
   0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 
   0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 
   0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 
   0x0E, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 
   0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x01, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 
   0x00, 0x14, 0xEB, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 
   0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE6, 0x00, 0x1A, 0xE5, 0x01, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 
   0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 
   0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x01, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 
   0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x25, 0xD9, 0x01, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 
   0x27, 0xD8, 0x01, 0x28, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x01, 0x29, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 
   0x2E, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCD, 0x00, 0x31, 
   0xCD, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 
   0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 
   0x00, 0x45, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB7, 0x01, 0x49, 
   0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x50, 0xAE, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 
   0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 
   0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9C, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 
   0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 
   0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 
   0x86, 0x00, 0x79, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7D, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 
   0x00, 0x0C, 0xF3, 0x01, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 
   0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x0F, 0xEE, 0x00, 0x10, 0xEE, 0x00, 0x10, 
   0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 
   0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 
   0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 
   0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 
   0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 
   0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 
   0xDD, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 
   0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 
   0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x01, 0x2C, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCF, 0x01, 0x30, 
   0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 
   0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC4, 
   0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBE, 0x01, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 
   0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 
   0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 
   0x56, 0xA8, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 
   0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x71, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 
   0x75, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 
   0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 
   0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 
   0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 
   0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x01, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x01, 0x14, 0xEA, 0x00, 0x16, 0xE9, 0x00, 
   0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 
   0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE2, 0x00, 
   0x1D, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 
   0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x22, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x00, 0x25, 0xDA, 0x01, 0x26, 0xDA, 0x01, 
   0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 
   0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 
   0x2E, 0xD1, 0x00, 0x2F, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x01, 0x33, 0xCC, 
   0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBF, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x49, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4A, 0xB5, 
   0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 
   0xAF, 0x01, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 
   0x01, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 
   0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 
   0x8F, 0x00, 0x71, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7C, 
   0x01, 0x82, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 
   0x00, 0x0B, 0xF4, 0x01, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF1, 0x00, 
   0x0D, 0xF1, 0x00, 0x0D, 0xF0, 0x00, 0x0F, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 
   0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xED, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEC, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 
   0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 
   0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x01, 0x1A, 0xE4, 
   0x01, 0x1B, 0xE4, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 
   0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 
   0x00, 0x23, 0xDC, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD7, 0x00, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2B, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 
   0x00, 0x33, 0xCC, 0x01, 0x34, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x01, 0x38, 
   0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x01, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x43, 0xBD, 
   0x00, 0x43, 0xBD, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 
   0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB9, 0x01, 0x48, 0xB8, 0x00, 0x47, 
   0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x4B, 0xB5, 
   0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x01, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x01, 0x51, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 
   0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 
   0x56, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA7, 0x00, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 
   0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 
   0x65, 0x99, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 
   0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 
   0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x79, 0x01, 0x88, 
   0x78, 0x00, 0x88, 0x78, 0x01, 0x89, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x01, 0x0A, 0xF4, 
   0x00, 0x0B, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF3, 0x00, 
   0x0D, 0xF2, 0x00, 0x0E, 0xF1, 0x01, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 
   0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 
   0xE7, 0x01, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 
   0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 
   0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 
   0x01, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 
   0xD7, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2D, 0xD3, 0x00, 
   0x2D, 0xD2, 0x01, 0x2E, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x39, 0xC5, 
   0x00, 0x3B, 0xC5, 0x01, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 
   0x3C, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 
   0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 
   0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 
   0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 
   0x5D, 0xA3, 0x00, 0x5E, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 
   0x9F, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 
   0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 
   0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 
   0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x80, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x00, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF5, 
   0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 
   0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 
   0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 
   0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE9, 0x00, 0x17, 
   0xE8, 0x01, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x19, 0xE5, 0x01, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 
   0xE0, 0x00, 0x20, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 
   0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x23, 0xDB, 0x00, 
   0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 
   0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x01, 0x2B, 0xD3, 0x01, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD1, 0x01, 0x2F, 
   0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 
   0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x34, 0xCB, 0x00, 
   0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC1, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 
   0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 
   0xB9, 0x00, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 
   0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x01, 0x52, 0xAE, 
   0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x01, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 
   0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 
   0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 
   0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 
   0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 
   0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0C, 0xF3, 0x00, 
   0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 
   0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 
   0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x01, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 
   0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 
   0xE8, 0x00, 0x17, 0xE7, 0x01, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE7, 0x00, 0x19, 0xE6, 
   0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE4, 0x00, 
   0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 
   0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x23, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 
   0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 
   0x00, 0x2A, 0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCD, 0x01, 0x32, 0xCB, 0x00, 0x34, 0xCC, 0x00, 
   0x33, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xC9, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 
   0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x01, 0x41, 0xBE, 
   0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBB, 0x00, 
   0x44, 0xBC, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB4, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x54, 0xAC, 0x00, 
   0x54, 0xAC, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 
   0xA8, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 
   0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 
   0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 
   0x01, 0x71, 0x8D, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 
   0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 
   0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 
   0x0C, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0E, 0xF2, 0x00, 0x0E, 
   0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 
   0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 
   0x13, 0xEC, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x01, 0x16, 0xEA, 0x00, 0x16, 
   0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE7, 
   0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 
   0x1B, 0xE3, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x01, 0x1E, 0xE1, 0x00, 0x1D, 
   0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x01, 0x20, 0xDE, 
   0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDC, 0x00, 0x23, 0xDD, 0x01, 0x23, 0xDC, 0x00, 
   0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 
   0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x27, 0xD7, 0x00, 0x29, 0xD7, 
   0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCE, 
   0x00, 0x30, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 
   0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 
   0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 
   0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 
   0x64, 0x9B, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x00, 0x66, 0x9A, 0x00, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF6, 
   0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 
   0x0B, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 
   0xF1, 0x00, 0x0D, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 
   0x00, 0x10, 0xEE, 0x01, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xED, 0x00, 
   0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 
   0xEA, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE7, 0x01, 0x18, 0xE7, 0x00, 0x18, 0xE6, 
   0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 
   0x1A, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 
   0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDD, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 
   0x23, 0xDC, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 
   0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 
   0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 
   0x2B, 0xD3, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xD0, 0x00, 0x2F, 0xCF, 
   0x01, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 
   0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 
   0x00, 0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 
   0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 
   0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 
   0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x54, 0xAB, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xAA, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x01, 0x59, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 
   0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 
   0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 
   0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x00, 0x6F, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 
   0x7A, 0x01, 0x86, 0x7A, 0x00, 0x85, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 
   0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x01, 0x0A, 0xF4, 0x00, 
   0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 
   0xF2, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x0F, 0xEF, 
   0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 
   0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 
   0xEA, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x01, 0x17, 0xE7, 
   0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE5, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 
   0x1B, 0xE5, 0x00, 0x1B, 0xE3, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 
   0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x24, 
   0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 
   0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x29, 0xD5, 0x00, 
   0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2B, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xD0, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCC, 0x01, 
   0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 
   0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x01, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 
   0x43, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 
   0xBA, 0x01, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x48, 0xB8, 
   0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 
   0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 
   0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 
   0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9B, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 
   0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 
   0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x8F, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 
   0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF8, 
   0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 
   0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 
   0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xEF, 
   0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xED, 0x00, 
   0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 
   0xEA, 0x00, 0x14, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 
   0x00, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 
   0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 
   0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x01, 0x1F, 0xE0, 
   0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 
   0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 
   0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 
   0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCF, 0x01, 0x30, 0xCD, 0x01, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x37, 0xC8, 
   0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x01, 
   0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 
   0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 
   0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 
   0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 
   0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x4E, 0xB1, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x01, 
   0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 
   0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9A, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 
   0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 
   0x92, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 
   0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 
   0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 
   0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 
   0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 0x00, 
   0x0A, 0xF5, 0x01, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 
   0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 
   0x00, 0x0E, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 
   0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 
   0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 
   0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 
   0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x01, 0x1A, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 
   0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x01, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 
   0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x01, 
   0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 
   0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x01, 0x2F, 0xD1, 
   0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 
   0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 
   0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x01, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 
   0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB3, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 
   0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA7, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x00, 0x5E, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 
   0x61, 0x9D, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 
   0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 
   0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 
   0x83, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 
   0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0xFA, 0x00, 0x05, 0xFA, 0x00, 0x06, 0xF9, 0x00, 0x05, 0xF8, 
   0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 
   0x09, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 
   0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0C, 0xF1, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 
   0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 
   0x10, 0xED, 0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 
   0xEB, 0x00, 0x13, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 
   0x00, 0x17, 0xE8, 0x00, 0x16, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x01, 0x18, 0xE7, 0x00, 
   0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 
   0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xE0, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 
   0x21, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDD, 0x00, 0x22, 0xDB, 0x00, 0x23, 
   0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 
   0x00, 0x27, 0xD8, 0x00, 0x26, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x01, 
   0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 
   0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x01, 0x3F, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xC0, 0x01, 0x41, 0xBF, 0x00, 
   0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 
   0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 
   0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA6, 0x00, 
   0x58, 0xA7, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA1, 
   0x01, 0x5E, 0xA0, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 
   0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 
   0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 
   0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0xFA, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 
   0x00, 0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 
   0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0B, 0xF5, 0x00, 0x0B, 
   0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 
   0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xF0, 0x00, 0x10, 0xEF, 0x00, 
   0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 
   0xEB, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE6, 0x00, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 
   0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x01, 0x1D, 0xE1, 0x00, 0x1D, 0xE2, 
   0x00, 0x1E, 0xE1, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x01, 
   0x21, 0xDE, 0x01, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x01, 0x25, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 
   0x29, 0xD6, 0x01, 0x29, 0xD6, 0x01, 0x2A, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xCF, 0x00, 0x30, 0xD0, 0x00, 0x30, 0xCE, 0x00, 
   0x31, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCD, 0x00, 0x33, 
   0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 
   0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 
   0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA6, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 
   0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 
   0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 
   0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x01, 0x76, 0x88, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x85, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0xFC, 0x00, 0x04, 0xFA, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xFA, 
   0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 
   0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 
   0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 
   0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x01, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 
   0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x01, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 
   0xEC, 0x00, 0x12, 0xEB, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xE9, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 
   0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1B, 
   0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 
   0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x01, 0x25, 0xDA, 
   0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 
   0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 
   0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 
   0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x01, 
   0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 
   0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x43, 
   0xBC, 0x00, 0x42, 0xBC, 0x01, 0x44, 0xBC, 0x00, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x47, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x48, 0xB7, 0x00, 
   0x47, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB3, 
   0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 
   0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5B, 
   0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 
   0x9D, 0x00, 0x62, 0x9D, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 
   0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0xFC, 0x01, 0x04, 0xFB, 0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 
   0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF8, 0x00, 
   0x07, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 
   0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 
   0x00, 0x0D, 0xF2, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 
   0x0F, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 
   0xEC, 0x01, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 
   0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 
   0x17, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 
   0xE5, 0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE4, 0x01, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 
   0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE0, 0x01, 0x1F, 0xE0, 0x01, 0x1F, 0xE0, 0x00, 
   0x20, 0xE0, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDE, 0x00, 0x22, 
   0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDA, 
   0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2B, 0xD2, 0x00, 0x2C, 0xD3, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 
   0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 
   0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x38, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 
   0xC5, 0x01, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 
   0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 
   0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBB, 
   0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 
   0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 
   0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 
   0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 
   0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x62, 0x9E, 0x01, 0x61, 
   0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9A, 
   0x00, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x7F, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0xFC, 0x00, 0x03, 0xFC, 0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 
   0x00, 0x05, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 
   0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 
   0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 
   0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0E, 0xF2, 0x01, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 
   0x0F, 0xEF, 0x00, 0x10, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 
   0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 
   0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x01, 0x16, 0xE8, 0x01, 0x16, 0xE8, 0x00, 
   0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x01, 0x19, 
   0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 
   0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 
   0x1E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 
   0xDE, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x23, 0xDA, 
   0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 
   0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x28, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 
   0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCC, 0x01, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 
   0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBD, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x43, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x4A, 
   0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 
   0xAE, 0x01, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 
   0x57, 0xA8, 0x01, 0x58, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 
   0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 
   0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x82, 0x7D, 0x01, 0x81, 0xFC, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFB, 0x00, 0x03, 0xFB, 
   0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF8, 0x00, 
   0x06, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x09, 0xF6, 0x00, 0x08, 
   0xF5, 0x01, 0x09, 0xF5, 0x01, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x01, 0x0B, 0xF3, 0x00, 0x0B, 0xF3, 
   0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 
   0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xEE, 0x01, 0x10, 
   0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 
   0x17, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x17, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 
   0xE6, 0x01, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 
   0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE0, 0x00, 
   0x1E, 0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 
   0xDE, 0x00, 0x22, 0xDE, 0x01, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDB, 0x00, 0x23, 0xDB, 
   0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x25, 0xD9, 0x00, 
   0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 
   0xD6, 0x01, 0x29, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2E, 0xD1, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x30, 
   0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 
   0x01, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x01, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 0x54, 0xAB, 
   0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x55, 0xA9, 0x00, 
   0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA8, 0x00, 0x58, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 
   0x01, 0x64, 0x9C, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x97, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x77, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 
   0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0xFD, 0x00, 0x02, 0xFC, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFC, 
   0x00, 0x04, 0xFB, 0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x05, 0xF9, 0x00, 
   0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 
   0xF6, 0x01, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 
   0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0D, 0xF1, 0x00, 
   0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xEF, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 
   0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x14, 0xEB, 0x01, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 
   0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x01, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 
   0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x01, 0x1C, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 
   0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x01, 0x21, 
   0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 
   0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 
   0x26, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 
   0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 
   0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 
   0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 
   0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x01, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 
   0x01, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 
   0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 
   0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBE, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB8, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x01, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4E, 0xB1, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 
   0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 
   0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9D, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x99, 0x01, 
   0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 
   0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 
   0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 
   0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0xFE, 0x00, 0x01, 0xFD, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFC, 
   0x00, 0x03, 0xFB, 0x00, 0x03, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 
   0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 0x08, 
   0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 
   0x00, 0x0A, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 
   0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x0F, 0xEF, 0x00, 0x10, 
   0xEF, 0x01, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 
   0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 
   0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 
   0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 
   0xDE, 0x00, 0x20, 0xDE, 0x01, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 
   0xD7, 0x00, 0x28, 0xD6, 0x01, 0x28, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 
   0x2E, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 
   0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 
   0x3E, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 
   0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 
   0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 
   0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 
   0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 
   0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 
   0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x60, 
   0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 
   0x6D, 0x91, 0x01, 0x6E, 0x92, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7B, 0x84, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0xFE, 0x00, 0x01, 0xFE, 0x00, 0x01, 0xFD, 0x00, 0x02, 0xFC, 
   0x00, 0x02, 0xFC, 0x00, 0x03, 0xFB, 0x00, 0x03, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x04, 0xFA, 0x00, 
   0x05, 0xFA, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 
   0xF7, 0x00, 0x08, 0xF7, 0x01, 0x09, 0xF7, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 
   0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 
   0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 
   0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 
   0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x15, 0xEA, 0x00, 
   0x14, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 
   0xE8, 0x00, 0x17, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x19, 0xE4, 
   0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE3, 0x00, 
   0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 
   0xDF, 0x01, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 
   0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 
   0xD7, 0x00, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x01, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 
   0x35, 0xC9, 0x01, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x01, 0x37, 0xC8, 0x00, 0x38, 
   0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 
   0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 
   0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x47, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 
   0x55, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 
   0xA8, 0x01, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA3, 0x01, 0x5E, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 
   0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 
   0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0xFE, 0x00, 0x01, 0xFF, 0x00, 0x01, 0xFE, 0x00, 0x01, 0xFD, 
   0x00, 0x02, 0xFD, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFB, 0x01, 0x03, 0xFB, 0x00, 0x04, 0xFA, 0x00, 
   0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 
   0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 
   0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 
   0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF1, 0x00, 0x0F, 
   0xEF, 0x01, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 
   0x00, 0x12, 0xED, 0x00, 0x13, 0xED, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 0x01, 0x14, 0xEA, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 
   0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 
   0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 
   0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x01, 0x23, 0xDC, 0x00, 0x24, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD5, 0x00, 0x2A, 0xD6, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 
   0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 
   0x34, 0xCA, 0x01, 0x34, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x37, 
   0xC8, 0x01, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 
   0x01, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 
   0x4D, 0xB2, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 
   0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAD, 
   0x00, 0x52, 0xAE, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA7, 0x01, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9C, 0x00, 
   0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0xFF, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x01, 0xFE, 
   0x00, 0x02, 0xFD, 0x00, 0x02, 0xFD, 0x00, 0x03, 0xFC, 0x00, 0x03, 0xFB, 0x00, 0x04, 0xFB, 0x00, 
   0x04, 0xFA, 0x00, 0x05, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 
   0xF8, 0x00, 0x07, 0xF8, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 
   0x00, 0x0A, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 
   0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 
   0xF0, 0x01, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 
   0x01, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 0x00, 
   0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 
   0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x01, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x01, 0x18, 0xE6, 
   0x00, 0x1A, 0xE6, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 
   0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 
   0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDD, 
   0x00, 0x22, 0xDE, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 
   0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 
   0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2F, 
   0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCD, 
   0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 
   0x34, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3F, 
   0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x01, 0x40, 0xBE, 
   0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 
   0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x53, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x60, 0x9F, 
   0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x97, 0x01, 0x68, 0x98, 0x00, 0x68, 0x96, 0x00, 0x68, 0x97, 
   0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 
   0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_texture(TEXT(MODULE_STRING), TEXT("texture.bmp"), g_texture, sizeof(g_texture));

extern "C" LPVOID PREPEND_MODULE(_texture) = (LPVOID)&g_rd_texture;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\harness\xbe\main.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    main.cpp

Abstract:

    Entry point and initialization routines for test harness

Environment:

    Xbox

Revision History:

--*/


#include <xtl.h>


extern "C"
DWORD
WINAPI
HarnessEntryPoint(
    VOID
    );


void __cdecl main()
{
    //
    // Call main routine of the tets harness library in harnesslib.lib
    //
    HarnessEntryPoint();
}


//
// Tell the linker to include the following symbols so that XIU and XTU
// sections inside CRT will get built and startup/cleanup routines in
// xtestlib will get executed
//

#pragma comment( linker, "/include:_xtestlib_startup" )
#pragma comment( linker, "/include:_xtestlib_cleanup" )
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\xgcompile\main.cpp ===
#define countof(x) (sizeof(x) / sizeof(x[0]))
#define MAXNUM 1500

extern "C" void DebugPrint(const char*, ...);
/*--
Copyright (c) 1999 - 2000 Microsoft Corporation - Xbox SDK

Module Name:

    Main.cpp

Abstract:

    Complete DX8 application to draw a screen space triangle.

Revision History:

    Derived from a DX8 sample.
--*/

//#include "SDKCommon.h"
#include <xtl.h>
#include <xgraphics.h>
#include <stdio.h>

extern "C"
{
    extern BOOL D3D__Parser;
}

IDirect3DDevice8*          pDev  = NULL;
IDirect3DVertexBuffer8*    pVertsVB = NULL;
IDirect3DTexture8*         pTexture = NULL;
DWORD                      VertsShader;

#define CheckHR(x) { HRESULT _hr = (x); if (FAILED(_hr)) { _asm { int 3 } } }

//------------------------------------------------------------------------------
// Geometry declarations

DWORD VertsShaderDeclaration[] =
{
    D3DVSD_STREAM(0),
    D3DVSD_REG(D3DVSDE_POSITION, D3DVSDT_FLOAT4), 
    D3DVSD_REG(D3DVSDE_TEXCOORD0, D3DVSDT_FLOAT2),
    D3DVSD_END()
};

static struct TheVerts { float x,y,z,w,tu,tv; } Verts[MAXNUM]/* =
{
    {320.0f,   0.0f, 0.5f, 1.0f,  0.5f, 0.0f},
    {527.0f, 360.0f, 0.5f, 1.0f,  1.0f, 1.0f},
    {113.0f, 360.0f, 0.5f, 1.0f,  0.0f, 1.0f},
}*/;

//------------------------------------------------------------------------------
bool InitD3D
(
    HWND hWnd
)
//--------------------------------------
{
    static int doneOnce; 
    if (!doneOnce)       
    {                    
        { ; }  
        doneOnce=1;      
    }                    

#if DBG
    D3D__Parser = TRUE;
#endif

    // Create D3D 8.
    IDirect3D8 *pD3D = Direct3DCreate8(D3D_SDK_VERSION);
    if (pD3D == NULL)
        return false;

    // Set the screen mode.
    D3DPRESENT_PARAMETERS d3dpp;
    ZeroMemory(&d3dpp, sizeof(d3dpp));

    d3dpp.BackBufferWidth           = 640;
    d3dpp.BackBufferHeight          = 480;
    d3dpp.BackBufferFormat          = D3DFMT_X8R8G8B8;
    d3dpp.BackBufferCount           = 1;
    d3dpp.Windowed                  = false;   // Must be false for Xbox.
    d3dpp.EnableAutoDepthStencil    = true;
    d3dpp.AutoDepthStencilFormat    = D3DFMT_D24S8;
    d3dpp.SwapEffect                = D3DSWAPEFFECT_DISCARD;
    d3dpp.FullScreen_RefreshRateInHz= 60;
    d3dpp.hDeviceWindow             = hWnd;
    d3dpp.MultiSampleType           = D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX;

    // Create the device.
    if (pD3D->CreateDevice
    (
        D3DADAPTER_DEFAULT,
        D3DDEVTYPE_HAL,
        hWnd,
        D3DCREATE_HARDWARE_VERTEXPROCESSING,
        &d3dpp,
        &pDev
    ) != S_OK)
    {
        return false;
    }

    // Now we no longer need the D3D interface so lets free it.
    pD3D->Release();

    return true;
}

//------------------------------------------------------------------------------
bool InitVB
(
)
//--------------------------------------
{
    void* pVerts;

    CheckHR( pDev->CreateVertexBuffer( sizeof(Verts), 0, 0, 0, &pVertsVB ) );

    pVertsVB->Lock( 0, sizeof(Verts), (BYTE **)(&pVerts), 0 );
    memcpy( (void*)pVerts, (void*)Verts, sizeof(Verts) );
    pVertsVB->Unlock();

    D3DLOCKED_RECT lockRect;
    D3DSURFACE_DESC desc;

    if ( pDev->CreateTexture( 256, 256, 1, 0, D3DFMT_P8, D3DPOOL_MANAGED, &pTexture ) != S_OK )
        return false;

    if ( pTexture->GetLevelDesc( 0, &desc ) != S_OK )
        return false;

    if ( pTexture->LockRect ( 0, &lockRect, NULL, 0 ) != S_OK)
        return false;

    PVOID pBits = LocalAlloc(0, 256 * 256 * 1);

    // Generate a set of vertical lines of varying color into a buffer.
    BYTE *pb = (BYTE *)pBits;
    DWORD y;
    
    for (y = 0; y < 256; y++)
    {
        for (DWORD x = 0; x < 256; x++)
        {
            *pb = (BYTE) x;

            pb++;
        }
    }

    // Now draw an 'X' using index 0:
    pb = (BYTE *)pBits;
    for (y = 0; y < 256; y++)
    {
        *pb = 0;

        pb += 257;
    }

    pb = (BYTE *)pBits + 255;
    for (y = 0; y < 256; y++)
    {
        *pb = 0;

        pb += 255;
    }


    XGSwizzleRect(pBits,
                  0,
                  NULL,
                  lockRect.pBits,
                  256,
                  256,
                  NULL,
                  1);

    LocalFree(pBits);

    // Unlock the map so it can be used
    pTexture->UnlockRect(0);

    pDev->SetTexture(0, pTexture);

    // Create and select a fake test palette
    IDirect3DPalette8* pFakePalette;
    if ( pDev->CreatePalette(D3DPALETTE_32, &pFakePalette) != S_OK )
        return false;

    D3DCOLOR* pColors;
    if ( pFakePalette->Lock(&pColors, 0) != S_OK )
        return false;

    memset(pColors, 0, 32 * sizeof(D3DCOLOR));

    if ( pFakePalette->Unlock() != S_OK )
        return false;

    if ( pDev->SetPalette(0, pFakePalette) != S_OK )
        return false;

    // Now create and select a real palette
    IDirect3DPalette8* pPalette;
    if ( pDev->CreatePalette(D3DPALETTE_256, &pPalette) != S_OK )
        return false;

    if ( pPalette->Lock(&pColors, 0) != S_OK )
        return false;

    pColors[0] = 0xffff0000;                    // Index 0 is red
    pColors[255] = 0xff00ff00;                  // Index 255 is green

    for (DWORD i = 1; i < 255; i++)
    {
        pColors[i] = 0xff000000 | i;            // Rest is a blue wash
    }

    if ( pPalette->Unlock() != S_OK )
        return false;

    if ( pPalette->GetSize() != D3DPALETTE_256 )
        return false;

    if ( pDev->SetPalette(0, pPalette) != S_OK )
        return false;

    IDirect3DPalette8* pGetPalette;
    if ( pDev->GetPalette(0, &pGetPalette) != S_OK )
        return false;

    if ( pGetPalette != pPalette )
        return false;

    pGetPalette->Release();

    if ( pFakePalette->Release() != 0 )
        return false;

    // Set the texture stage states appropriately
    pDev->SetTextureStageState(0, D3DTSS_COLOROP,  D3DTOP_SELECTARG1);
    pDev->SetTextureStageState(0, D3DTSS_MINFILTER,D3DTEXF_LINEAR);
    pDev->SetTextureStageState(0, D3DTSS_MAGFILTER,D3DTEXF_LINEAR);
    pDev->SetRenderState(D3DRS_ZENABLE, FALSE);
    pDev->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
	float PointSize = 5.0;
	pDev->SetRenderState(D3DRS_PATCHSEGMENTS, *((DWORD*)&PointSize));

    // Create the vertex shaders
    CheckHR( pDev->CreateVertexShader(VertsShaderDeclaration, NULL, &VertsShader, 0) );

    // Test some extra junk.

    CheckHR( pDev->Nop() );
    if (pDev->GetVertexBlendModelView(0, NULL) != S_FALSE)
        _asm int 3;

    D3DMATRIX mat[4];

    pDev->SetRenderState(D3DRS_VERTEXBLEND, TRUE);
    CheckHR( pDev->SetVertexBlendModelView(1, mat, mat) );
    CheckHR( pDev->SetVertexBlendModelView(4, mat, mat) );
    if (pDev->GetVertexBlendModelView(4, mat) != S_OK)
        _asm int 3;

    pDev->SetRenderState(D3DRS_VERTEXBLEND, FALSE);
    CheckHR(pDev->SetVertexBlendModelView(0, NULL, NULL));

    return true;
}

//------------------------------------------------------------------------------
void Paint
(
)
//--------------------------------------
{
	static DWORD num = 1;
	static int count = 0;
	count++;
	if(count == 40) { 
		count = 0; 
		if((num & 255) == 6) num += 240;
		num++;
		if(num > MAXNUM) num = 1;
	}
    // Exercise the synchornization code.
    TheVerts* pVerts;
    D3DPushBuffer* pb[10];

    DWORD i;
    DWORD offset;
    
    pVertsVB->Lock( 0, sizeof(Verts), (BYTE **)(&pVerts), 0 );

    // Transform the verticies to make the triangle spin so we can verify that
    // this actually works over a period of time.
    //
    static DWORD Time = GetTickCount();
    DWORD CurrentTime = GetTickCount();

    // 10 seconds per rotation
    float spin = 2 * 3.14159f * (float)(CurrentTime - Time) / 10000.0f;

    for (i = 0; i < num; i++)
    {

        float x = 320;
        float y = 0;

        x = x - 320.0f;
        y = y - 240.0f;

        pVerts[i].x = x * (float)cos(spin + (i * 2 * 3.14159265 / num)) - y * (float)sin(spin + (i * 2 * 3.14159265 / num));
        pVerts[i].y = x * (float)sin(spin + (i * 2 * 3.14159265 / num)) + y * (float)cos(spin + (i * 2 * 3.14159265 / num));

        pVerts[i].x += 320.0f;
        pVerts[i].y += 240.0f;
    }

    pVertsVB->Unlock();

    pDev->Clear(0, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, 0X00404040, 1.0, 0);

    D3DSTREAM_INPUT streamInput = { pVertsVB, sizeof(Verts[0]), 0 };
    pDev->SetStreamSource(0, pVertsVB, sizeof(Verts[0]));
    pDev->SetVertexShader(D3DFVF_XYZRHW|D3DFVF_TEX1);
    pDev->SetVertexShaderInput(VertsShader, 1, &streamInput);

    pDev->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

	for(i = 0; i < countof(pb) -1 ; i++) {
		CheckHR(pDev->CreatePushBuffer(4 * 4096, FALSE, &pb[i]));
	}

//set to FALSE to allow other tests to work
	pDev->CreatePushBuffer(4*4096, TRUE, &pb[countof(pb)-1]);

//*
	WORD ind[1500];
	for(i = 0; i < countof(ind); i++) {
		ind[i] = (WORD)i; 
	}

	DWORD size = 4096 * 4;
	XGCompileDrawIndexedVertices((void*)(pb[9]->Data), &size, D3DPT_LINELIST,num,ind);
		DebugPrint("Points: %d.  Size: %d\n", num, size); 

	pb[9]->Size = size;

//recursive RunPushBuffer test
/*
	for(i = countof(pb) - 2; i != ~0; i--) {
	    pDev->BeginPushBuffer(pb[i]);
		pDev->RunPushBuffer(pb[i+1], NULL);
		pDev->EndPushBuffer();
	}
*/
	pDev->RunPushBuffer(pb[9], NULL);

//simple record-play test
    // Record our rotating triangle:
//    pDev->BeginPushBuffer(pPushBuffer);
//	pDev->DrawIndexedVertices(D3DPT_POINTLIST, num, ind);
//	pDev->DrawPrimitive(D3DPT_POINTLIST,0,3);
//	pDev->RunPushBuffer(ppb2, NULL);
//    pDev->EndPushBuffer();
  //  pDev->RunPushBuffer(pPushBuffer, NULL);
/*/
//old test, with indexed vertices
    // Record our rotating triangle:
    pDev->BeginPushBuffer(pPushBuffer);
    pDev->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);
    pDev->EndPushBuffer();
    pDev->RunPushBuffer(pPushBuffer, NULL);
/**/
    // Flip the buffers.
    pDev->Present(NULL, NULL, NULL, NULL);

	for(i = 0; i < countof(pb); i++) {
		pb[i]->Release();
	}
}




void MemoryCompare(VOID* a, VOID* b, DWORD size)
{
    BOOL mismatch = FALSE;
    BYTE* pa = (BYTE*) a;
    BYTE* pb = (BYTE*) b;
    CHAR stringBuffer[200];

    while (size-- != 0)
    {
        if (*pa++ != *pb++)
        {
            sprintf(stringBuffer, "Mismatch at offset %li\n", pa - (BYTE*) a);
            OutputDebugStringA(stringBuffer);
            mismatch = TRUE;
        }
    }

    if (mismatch)
    {
        sprintf(stringBuffer, "a: %lx  b: %lx\n", a, b);
        OutputDebugStringA(stringBuffer);
        _asm int 3;
    }
}




void __cdecl main()
{
    _asm nop;
    _asm nop;

    InitD3D(NULL);
    InitVB();

    D3DVIEWPORT8 D3DViewport;

    D3DViewport.X      = 0;
    D3DViewport.Y      = 0;
    D3DViewport.Width  = 640;
    D3DViewport.Height = 480;
    D3DViewport.MinZ   = 0.0f;
    D3DViewport.MaxZ   = 1.0f;

    // Set our Viewport
    D3DDevice_SetViewport( &D3DViewport );

    while (TRUE)
    {
        Paint();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\3dmath.h ===
// 3DMath.h
//
// 3D math functions for use with direct3d.
//

#ifndef _3DMATH_H_
#define _3DMATH_H_

#include <math.h>
#include "dxlegacy.h"

D3DMATRIX ZeroMatrix(void);
D3DMATRIX IdentityMatrix(void);
D3DMATRIX ProjectionMatrix(const float fovy, const float aspect, const float zNear, const float zFar);
D3DMATRIX ProjectionMatrix(const float left, const float right, const float bottom, const float top, const float zNear, const float zFar);
D3DMATRIX ProjectionMatrix(const float near_plane, const float far_plane, const float fov);
D3DMATRIX OrthoMatrix(const float width, const float height, const float zNear, const float zFar);
D3DMATRIX OrthoMatrix(const float left, const float right, const float bottom, const float top, const float zNear, const float zFar);
D3DMATRIX ViewMatrix(const D3DVECTOR& from, const D3DVECTOR& at, const D3DVECTOR& world_up, const float roll=0.0f);
D3DMATRIX RotateXMatrix(const float rads);
D3DMATRIX RotateYMatrix(const float rads);
D3DMATRIX RotateZMatrix(const float rads);
D3DMATRIX TranslateMatrix(const float dx, const float dy, const float dz);
D3DMATRIX TranslateMatrix(const D3DVECTOR& v);
D3DMATRIX ScaleMatrix(const float size);
D3DMATRIX ScaleMatrix(const float a, const float b, const float c);
D3DMATRIX ScaleMatrix(const D3DVECTOR& v);
D3DMATRIX MatrixMult(const D3DMATRIX & a, const D3DMATRIX & b);
D3DMATRIX MatrixMult(const D3DMATRIX & a, const float scalar);
D3DVECTOR TransformVector(const D3DVECTOR& v, const D3DMATRIX & m);
D3DVECTOR TransformNormal(const D3DVECTOR& v, const D3DMATRIX & mat);
D3DMATRIX MatrixInverse(const D3DMATRIX & m);
D3DMATRIX MatrixTranspose(const D3DMATRIX & m);
void TextureMapSpherical(D3DVERTEX * pVertices, int nCount);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\harness\xbe\modules.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    modules.cpp

Abstract:

    List of all test modules

Environment:

    Xbox

Revision History:

--*/


//
// Tell the linker to include the following symbols so that "export table"
// of each test module will be placed and sorted in "export directory" inside
// the test harness
//

#pragma comment( linker, "/include:_address_ExportTableDirectory" )
#pragma comment( linker, "/include:_alphabld_ExportTableDirectory" )
#pragma comment( linker, "/include:_alphacmp_ExportTableDirectory" )
#pragma comment( linker, "/include:_basicrst_ExportTableDirectory" )
#pragma comment( linker, "/include:_blend_ExportTableDirectory" )
#pragma comment( linker, "/include:_bump_ExportTableDirectory" )
#pragma comment( linker, "/include:_clear_test_ExportTableDirectory" )
#pragma comment( linker, "/include:_compress_ExportTableDirectory" )
#pragma comment( linker, "/include:_cubemap_ExportTableDirectory" )
#pragma comment( linker, "/include:_emboss_ExportTableDirectory" )
#pragma comment( linker, "/include:_fog_ExportTableDirectory" )
#pragma comment( linker, "/include:_gradient_ExportTableDirectory" )
#pragma comment( linker, "/include:_lightmap_ExportTableDirectory" )
#pragma comment( linker, "/include:_linetex_ExportTableDirectory" )
#pragma comment( linker, "/include:_luminanc_ExportTableDirectory" )
#pragma comment( linker, "/include:_mapping_ExportTableDirectory" )
#pragma comment( linker, "/include:_mipfilter_ExportTableDirectory" )
#pragma comment( linker, "/include:_overdraw_ExportTableDirectory" )
#pragma comment( linker, "/include:_perspective_ExportTableDirectory" )
#pragma comment( linker, "/include:_pointsprite_ExportTableDirectory" )
#pragma comment( linker, "/include:_pointtex_ExportTableDirectory" )
#pragma comment( linker, "/include:_pshader_ExportTableDirectory" )
#pragma comment( linker, "/include:_srt_ExportTableDirectory" )
#pragma comment( linker, "/include:_stateblocks_ExportTableDirectory" )
#pragma comment( linker, "/include:_stencil_ExportTableDirectory" )
#pragma comment( linker, "/include:_texturestage_ExportTableDirectory" )
#pragma comment( linker, "/include:_tlvertexclip_ExportTableDirectory" )
#pragma comment( linker, "/include:_volume_ExportTableDirectory" )
#pragma comment( linker, "/include:_wbuffer_ExportTableDirectory" )
#pragma comment( linker, "/include:_wcmp_ExportTableDirectory" )
#pragma comment( linker, "/include:_zbuffer_ExportTableDirectory" )
#pragma comment( linker, "/include:_zcmp_ExportTableDirectory" )

#pragma comment( linker, "/include:_alphabnt_ExportTableDirectory" )
#pragma comment( linker, "/include:_ball_ExportTableDirectory" )
#pragma comment( linker, "/include:_basic_ExportTableDirectory" )
#pragma comment( linker, "/include:_bees_ExportTableDirectory" )
#pragma comment( linker, "/include:_bumpduv1_ExportTableDirectory" )
#pragma comment( linker, "/include:_clipping_ExportTableDirectory" )
#pragma comment( linker, "/include:_depthbuf_ExportTableDirectory" )
#pragma comment( linker, "/include:_dlight_ExportTableDirectory" )
#pragma comment( linker, "/include:_dxtnoise_ExportTableDirectory" )
#pragma comment( linker, "/include:_fsaa_ExportTableDirectory" )
#pragma comment( linker, "/include:_fvertex1_ExportTableDirectory" )
#pragma comment( linker, "/include:_gammarmp_ExportTableDirectory" )
#pragma comment( linker, "/include:_getrstat_ExportTableDirectory" )
#pragma comment( linker, "/include:_hightide_ExportTableDirectory" )
#pragma comment( linker, "/include:_ibuffer_ExportTableDirectory" )
#pragma comment( linker, "/include:_innrloop_ExportTableDirectory" )
#pragma comment( linker, "/include:_lighting_ExportTableDirectory" )
#pragma comment( linker, "/include:_lightball_ExportTableDirectory" )
#pragma comment( linker, "/include:_litetype_ExportTableDirectory" )
#pragma comment( linker, "/include:_lockdepth_ExportTableDirectory" )
#pragma comment( linker, "/include:_matsrc_ExportTableDirectory" )
#pragma comment( linker, "/include:_mstage1_ExportTableDirectory" )
#pragma comment( linker, "/include:_mstage2_ExportTableDirectory" )
#pragma comment( linker, "/include:_mstage4_ExportTableDirectory" )
#pragma comment( linker, "/include:_mstage5_ExportTableDirectory" )
#pragma comment( linker, "/include:_multilight_ExportTableDirectory" )
#pragma comment( linker, "/include:_mxpalskin_ExportTableDirectory" )
#pragma comment( linker, "/include:_obelisk_ExportTableDirectory" )
#pragma comment( linker, "/include:_palette0_ExportTableDirectory" )
#pragma comment( linker, "/include:_pslights_ExportTableDirectory" )
#pragma comment( linker, "/include:_psverify_ExportTableDirectory" )
#pragma comment( linker, "/include:_reflect0_ExportTableDirectory" )
#pragma comment( linker, "/include:_stencil0_ExportTableDirectory" )
#pragma comment( linker, "/include:_terrain_ExportTableDirectory" )
#pragma comment( linker, "/include:_texform_ExportTableDirectory" )
#pragma comment( linker, "/include:_texgen_ExportTableDirectory" )
#pragma comment( linker, "/include:_texgenxt_ExportTableDirectory" )
#pragma comment( linker, "/include:_textr1_ExportTableDirectory" )
#pragma comment( linker, "/include:_textr2_ExportTableDirectory" )
#pragma comment( linker, "/include:_textr3_ExportTableDirectory" )
#pragma comment( linker, "/include:_textr4_ExportTableDirectory" )
#pragma comment( linker, "/include:_textr5_ExportTableDirectory" )
#pragma comment( linker, "/include:_tunnel_ExportTableDirectory" )
#pragma comment( linker, "/include:_vbbatch_ExportTableDirectory" )
#pragma comment( linker, "/include:_vbib_ExportTableDirectory" )
#pragma comment( linker, "/include:_vpshadr1_ExportTableDirectory" )
#pragma comment( linker, "/include:_vshader_ExportTableDirectory" )
#pragma comment( linker, "/include:_wireframe_ExportTableDirectory" )

#pragma comment( linker, "/include:_chessbrd_ExportTableDirectory" )
#pragma comment( linker, "/include:_clockwrk_ExportTableDirectory" )
#pragma comment( linker, "/include:_rteapot_ExportTableDirectory" )
#pragma comment( linker, "/include:_skulls_ExportTableDirectory" )
#pragma comment( linker, "/include:_snowfall_ExportTableDirectory" )
#pragma comment( linker, "/include:_misorbit_ExportTableDirectory" )

#pragma comment( linker, "/include:_Ani_ExportTableDirectory" )
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\cshapes.h ===
//
//  CShapes.h
//
//  Header file for CShapes class.
//

// ============================================================================

#ifndef _CSHAPES_H_
#define _CSHAPES_H_

#define CS_NSHAPES 9
enum CS_SHAPES {
	CS_COMPOSITE,
	CS_BOX,
	CS_SPHERE,
	CS_PYRAMID,
	CS_CYLINDER,
	CS_CONE,
	CS_MESH,
	CS_BOID,
    CS_ICOSOHEDRON
};

class CShapes
{
public: // public data members
	D3DVERTEX *      m_pVertices;
	WORD *           m_pIndices;
	int              m_nVertices;
	int              m_nIndices;
	D3DVECTOR *      m_pCenter;    // the object's "center"
	CS_SHAPES        m_CurShape;
	bool             m_bWrapU;    // should D3DRENDERSTATE_WRAPU be used?
	bool             m_bWrapV;    // should D3DRENDERSTATE_WRAPV be used?

protected: // helper functions
	void Initialize();
	void Cleanup();

	// shape generation
	bool GenerateBox();
	bool GenerateSphere(const int nDivisions = 24);
	bool GeneratePyramid();
	bool GenerateCylinder(const int nDivisions = 16, const int hDivisions = 1);
	bool GenerateCone(const int nDivisions = 16);
	bool GenerateMesh(const int xDivisions = 1, const int yDivisions = 1);
	bool GenerateBoid();
    bool GenerateIcosohedron();

public: // constructors / destructors / operators
	CShapes();
	CShapes(const CShapes &Shape); // copy constructor
	~CShapes();
	CShapes &operator=(const CShapes &Shape);
    CShapes &operator+=(const CShapes &Shape);
	bool AddShape(const CShapes &Shape);
	bool CopyShape(const CShapes &Shape);
	
public: // member functions
	bool NewShape(
		CS_SHAPES Type,
		const int Divisions1 = 0,
		const int Divisions2 = 0,
		const int Divisions3 = 0);

	// shape manipulations
	void Rotate(float x, float y, float z);
	void Translate(float x, float y, float z);
	void Scale(float factor); // uniform scaling
	void Scale(float x, float y, float z); // non-uniform scaling
	void Orbit(D3DVECTOR point1, float xRot, float yRot, float ZRot);
	void Fit(D3DVECTOR point1, D3DVECTOR point2);
	void MoveTo(D3DVECTOR point1);
	void Transform(D3DMATRIX& Matrix, bool bTransformNormals);

	// misc functions
	PTSTR GetShapeName();
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\cd3dtest.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    cd3dtest.h

Author:

    Matt Bronder

Description:

    Framework library to facilitate the porting of Direct3D tests from the
    DirectX test team.

*******************************************************************************/

#ifndef __CD3DTEST_H__
#define __CD3DTEST_H__

#include "..\..\inc\dxlegacy.h"

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define CIL_MAKEPCT(x) ((float)x/255.0f)
#define CIL_MAKEDWORD(x) ((DWORD)(x * 255.0f))
#define CIL_RED(x) ( (x >> 16) & 0xFF)
#define CIL_GREEN(x) ( (x >> 8) & 0xFF)
#define CIL_BLUE(x) ( x & 0xFF)
#define CIL_ALPHA(x) ( (x >> 24) & 0xFF)

#define CIL_UNSIGNED 0x00000001

#define ALPHA_CHANNEL   3
#define   RED_CHANNEL   2
#define GREEN_CHANNEL   1
#define  BLUE_CHANNEL   0

#define D3DDP_DONOTCLIP             0x00000004l
#define D3DDP_DONOTUPDATEEXTENTS    0x00000008l
#define D3DDP_DONOTLIGHT            0x00000010l

//#define D3DFVF_RESERVED0        0x001
//#define D3DFVF_RESERVED1        0x020
//#define D3DFVF_RESERVED2        0xf000  // 4 reserved bits

#define MAX_D3D_TEXTURES        50
#define MAX_D3D_ZBUFFERS        20

// Additional constants for dwFlags argument of rendering functions
#define CD3D_SRC    0x80000000
#define CD3D_REF    0x40000000
#define CD3D_BOTH   (CD3D_SRC | CD3D_REF)

// Constants for texture coordinates size calculations
#define CDIRECT3D_TEXTUREFORMATS_SHIFT  16      // Number of bits to shift to get texture format descriptions
#define CDIRECT3D_TEXTUREFORMAT_MASK    0x03    // Mask to extract texture format description
#define CDIRECT3D_TEXTUREFORMAT_SIZE    2       // Number of bits for one texture format description

// Framework defines for Texture Filter type
#define TEXF_NONE                             0
#define TEXF_POINT                            1
#define TEXF_LINEAR                           2
#define TEXF_ANISOTROPIC                      3
#define TEXF_FLATCUBIC                        4
#define TEXF_GAUSSIANCUBIC                    5

// Release macro
#define RELEASE(x) { if(NULL != (x)) {(x)->Release(); (x)=NULL;} }

#define DECLARE(X)  X;
#define TESTFRAME(X) X

#define D3DVAL(x)   ((float)x)

// Legacy render state
#define D3DRENDERSTATE_TEXTUREMAPBLEND  ((D3DRENDERSTATETYPE)0x0DEF)

// Legacy texture blend caps
#define D3DPTBLENDCAPS_ADD              0x0001
#define D3DPTBLENDCAPS_COPY             0x0002
#define D3DPTBLENDCAPS_DECAL            0x0004
#define D3DPTBLENDCAPS_DECALALPHA       0x0008
#define D3DPTBLENDCAPS_DECALMASK        0x0010
#define D3DPTBLENDCAPS_MODULATE         0x0020
#define D3DPTBLENDCAPS_MODULATEALPHA    0x0040
#define D3DPTBLENDCAPS_MODULATEMASK     0x0080

//******************************************************************************
// Data types
//******************************************************************************

#ifdef UNDER_XBOX
typedef UCHAR UINT8;
typedef CHAR  INT8;
#endif // UNDER_XBOX

const float pi = 3.141592654f;

typedef enum _LEGACY_D3DTEXTUREBLEND { 
    D3DTBLEND_DECAL         = 1, 
    D3DTBLEND_MODULATE      = 2, 
    D3DTBLEND_DECALALPHA    = 3, 
    D3DTBLEND_MODULATEALPHA = 4, 
//    D3DTBLEND_DECALMASK     = 5, 
//    D3DTBLEND_MODULATEMASK  = 6, 
    D3DTBLEND_COPY          = 7, 
    D3DTBLEND_ADD           = 8, 
    D3DTBLEND_MODULATE_ALPHATEXTURE = 9, 
    D3DTBLEND_FORCE_DWORD   = 0x7fffffff, 
} LEGACY_D3DTEXTUREBLEND;

typedef struct _TRANGE {
    UINT            uStart;
    UINT            uStop;
    struct _TRANGE* ptrNext;
} TRANGE, *PTRANGE;

enum
{
    D3DTESTINIT_RUN=0,
    D3DTESTINIT_ABORT=1,
    D3DTESTINIT_SKIPALL=2,
};

enum
{
    D3DTESTFINISH_SKIPREMAINDER=0,
    D3DTESTFINISH_ABORT=1,
};

typedef struct
{
    bool    	fAllDevices;    // Specific to the primary
    bool    	fMultimon;      // Doing multi-mon is ok.
    bool    	fTextures;      // This test uses textures
    bool    	fCubemaps;      // This test uses cubemaps
    bool    	fVolumes;       // This test uses volumes
    DWORD       dwTexLoad;      // Enables different texture loading options
    bool    	fZBuffer;       // This test uses a Z Buffer
	bool		bFilterRes;		// Filter the resolutions to Common list
	DWORD		dwWinMode;		// Enables different windowing mode(full, etc)
    UINT    	uStencil;       // Requested Stencil format
    UINT    	uMinZBuffer;    // Minimum number of Z buffer bits
    UINT    	uMinTextureBits;// Minimum number of texture bits
    bool    	fFOURCCTexture; // FOURCC textures ok?
    bool    	fYUVTexture;    // YUV specific texture ok?
    bool    	fStress;        // Primarily a stress application?
    UINT    	uMinDXVersion;  // Minimum DX version required
    UINT    	uMaxDXVersion;  // Minimum DX version 
    bool    	fMultiThread;   // Enable multithread cycling
    bool    	fAntialias;     // Add HINTANTIALIAS during surface creation
    bool    	fReference;     // Does the test need reference device?
	bool		fAPI;			// API test flag
	bool		fRefEqualsSrc;  // Set the Ref = Src
	DWORD		dwDeviceTypes;  // Enable multiple HALs in conformance mode
	bool		bSWDevices;		// Enumerate software devices on SRC
    bool		bHWDevices;		// Enumerate hardware devices on SRC
	GUID		DefaultRef;		// Set the default reference device
	bool		bFlipVersions;	// Run the test on all supported versions
    bool		bConstructGroupNames;	// Generate group names(add device)
	bool		bFlipMultiSampleTypes;	// Run the test with different multisample types
} MODELISTOPTION, *PMODELISTOPTION;

typedef enum _RENDERPRMITIVEAPI // (Un/)Supported APIs
{
    RP_BE               = 0,    // Begin/Vertex/End
    RP_BIE              = 1,    // BeginIndexed/Index/End
    RP_DP               = 2,    // DrawPrimitive
    RP_DIP              = 3,    // DrawIndexedPrimitive
    RP_DPS              = 4,    // DrawPrimitiveStrided
    RP_DIPS             = 5,    // DrawIndexedPrimitiveStrided
    RP_DPVB             = 6,    // DrawPrimitiveVB
    RP_DIPVB            = 7,    // DrawIndexedPrimitiveVB
    RP_DPVB_PV          = 8,    // DrawPrimitiveVB after ProcessVertices
    RP_DIPVB_PV         = 9,    // DrawIndexedPrimitiveVB after ProcessVertices
    RP_DPVB_OPT         = 10,   // DrawPrimitiveVB with optimized vertex buffer
    RP_DIPVB_OPT        = 11,   // DrawIndexedPrimitiveVB with optimized vertex buffer
    RP_DPVB_OPT_PV      = 12,   // DrawPrimitiveVB after ProcessVertices with optimized vertex buffer
    RP_DIPVB_OPT_PV     = 13,   // DrawIndexedPrimitiveVB after ProcessVertices with optimized vertex buffer
    RP_DPVB_PVS         = 14,   // DrawPrimitiveVB after ProcessVerticesStrided
    RP_DIPVB_PVS        = 15,   // DrawIndexedPrimitiveVB after ProcessVerticesStrided
    RP_FORCE_DWORD      = 0x7fffffff
} RENDERPRIMITIVEAPI, *PRENDERPRIMITIVEAPI;

typedef FLOAT (*_fChannelFunction)(FLOAT u, FLOAT v);

typedef struct _ChannelData
{   
    DWORD dwAlpha;
    DWORD dwRed;
    DWORD dwGreen;
    DWORD dwBlue;
    _fChannelFunction fAlpha;
    _fChannelFunction fRed;
    _fChannelFunction fGreen;
    _fChannelFunction fBlue;
} CHANNELDATA, *PCHANNELDATA;

typedef float D3DVALUE;

//******************************************************************************
class CD3DTest : public CScene {

protected:

    PTRANGE                         m_ptrSkipList;
    D3DCAPS8                        m_d3dcaps;
    MODELISTOPTION                  m_ModeOptions;
    bool                            m_fInTestCase;
    DWORD                           m_dwNumFailed;

    HRESULT                         m_hrLastError;

    DWORD                           m_dwVersion;

    LPCTSTR                         m_szTestName;       // Short name used to describe the test
    LPCTSTR                         m_szCommandKey;     // Command key used to manually set test ranges

    UINT                            m_uLastTestNum;
    bool                            m_fIncrementForward;

    RENDERPRIMITIVEAPI              m_dwRPCurrentAPI;
    DWORD                           m_dwRPAPICyclingFrequency;
    PRENDERPRIMITIVEAPI             m_pRPAPIList;                   // Pointer to an array of APIs to cycle
    DWORD                           m_dwRPAPIListSize;              // Size of this array
    DWORD                           m_dwRPAPICyclingIndex;

    float                           m_fPassPercentage;

    static RENDERPRIMITIVEAPI       m_pRPDefaultAPIList[6];
    static RENDERPRIMITIVEAPI       m_pRPFullAPIList[16];
    static RENDERPRIMITIVEAPI       m_pRPFullDX5APIList[4];
    static RENDERPRIMITIVEAPI       m_pRPFullDX6APIList[14];
    static RENDERPRIMITIVEAPI       m_pRPFullDX7APIList[14];
    static RENDERPRIMITIVEAPI       m_pRPFullDX8APIList[6];
    static DWORD                    m_dwRPDefaultAPIListSize;
    static DWORD                    m_dwRPFullAPIListSize;
    static DWORD                    m_dwRPFullDX5APIListSize;
    static DWORD                    m_dwRPFullDX6APIListSize;
    static DWORD                    m_dwRPFullDX7APIListSize;
    static DWORD                    m_dwRPFullDX8APIListSize;

    LPVOID                          m_pRPVertexArray;               // Pointer to the internal buffer used in API conversion
    DWORD                           m_dwRPVertexArraySize;          // Size (in bytes) of this array
    LPWORD                          m_pRPIndexArray;                // Pointer to the internal buffer used in API conversion
    DWORD                           m_dwRPIndexArraySize;           // Size (in WORDs) of this array

    DWORD                           m_dwClearColor;
    UINT                            m_uCommonTextureFormats;
    D3DFORMAT                       m_fmtCommon[17];
    UINT                            m_uCommonZBufferFormats;
    D3DFORMAT                       m_fmtdCommon[17];
    UINT                            m_uCommonVolumeFormats;
    D3DFORMAT                       m_fmtvCommon[17];
    UINT                            m_uCommonTargetFormats;
    D3DFORMAT                       m_fmtrCommon[17];

    CDirect3D8*                     m_pD3D8;
    CDevice8*                       m_pSrcDevice8;

    D3DVIEWPORT8                    m_vpFull;
    D3DVIEWPORT8                    m_vpTest;

public:

                                    CD3DTest();
                                    ~CD3DTest();

//    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Initialize();
    virtual void                    Efface();
//    virtual void                    Update(float fTime);
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);

    virtual bool                    SetDefaultMatrices() { return true; };
    virtual bool                    SetDefaultMaterials() { return true; };
    virtual bool                    SetDefaultLights() { return true; };
    virtual bool                    SetDefaultLightStates() { return true; };
    virtual bool                    SetDefaultRenderStates() { return true; };

    virtual UINT                    TestInitialize() { return D3DTESTINIT_RUN; };
    virtual bool                    TestTerminate() { return true; };
    virtual void                    TestFinish(UINT uState) {};
    virtual bool                    ExecuteTest(UINT) { return false; };
    virtual void                    SceneRefresh(void) {};
    virtual bool                    ProcessFrame(void) { return true; };
    virtual bool                    CompareImages(void) { return true; };
    virtual bool                    GetCompareResult(float fColorVariation, float fColorRange = 0.78f, UINT uMinPixels=1, UINT uMax = INT_MAX);
    virtual bool                    KeySet(LPSTR pKey, bool bRemove=false) { return false; };
    virtual bool                    KeySet(LPWSTR pKey, bool bRemove=false) { return false; };

    virtual bool                    SetTestRange(UINT uStart, UINT uStop);
    virtual bool                    AddTestRange(UINT,UINT,bool fConstraint = false);
    virtual bool                    AddTest(UINT uTest);
    virtual bool                    SkipTests(UINT uCount);
    virtual void                    ClearRangeList();
    virtual void                    Pass(void);
    virtual void                    Fail(void);
    virtual void                    Abort(void);
    virtual void                    BeginTestCase(LPCSTR szTestCase, UINT uTestNumber = 0);
    virtual void                    BeginTestCase(LPCWSTR szTestCase, UINT uTestNumber = 0);
    virtual void                    EndTestCase(void);
    virtual void                    WriteToLog(LPCSTR szFormat, ...);
    virtual void                    WriteToLog(LPCWSTR szFormat, ...);
    virtual void                    WriteToLog(LOGLEVEL ll, LPCSTR szFormat, ...);
    virtual void                    WriteToLog(LOGLEVEL ll, LPCWSTR szFormat, ...);
    virtual void                    WriteStatus(const char *ptcsKey, const char *ptcsFmt,...) {};
    virtual void                    WriteStatus(const WCHAR *ptcsKey, const WCHAR *ptcsFmt,...) {};
    virtual void                    WriteStatus(int nLevel, const char *ptcsKey, const char *ptcsFmt,...) {};
    virtual void                    WriteStatus(int nLevel, const WCHAR *ptcsKey, const WCHAR *ptcsFmt,...) {};
    virtual void                    ReadInteger(LPSTR pKey, int iDefault, int * szValue, BOOL bRemove = FALSE);
    virtual void                    ReadInteger(LPWSTR pKey, int iDefault, int * szValue, BOOL bRemove = FALSE);

    virtual HRESULT                 GetLastError(void);
    virtual bool                    SetLastError(HRESULT);

    virtual bool                    BeginScene(void);
    virtual bool                    EndScene(void);
    virtual bool                    ClearFrame(void);
    virtual bool                    Clear(D3DCOLOR c);
#ifndef UNDER_XBOX
    virtual bool                    Clear(DWORD dwRGB, float fZ, DWORD dwStencil = 0, DWORD dwFlags = (0x01 | 0x02 | 0x04) /*D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL | D3DCLEAR_TARGET*/, DWORD dwCount=0, D3DRECT* lpRects=NULL);
#else
    virtual bool                    Clear(DWORD dwRGB, float fZ, DWORD dwStencil = 0, DWORD dwFlags = (0x000000f0l | 0x00000001l | 0x00000002l) /*D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL | D3DCLEAR_TARGET*/, DWORD dwCount=0, D3DRECT* lpRects=NULL);
#endif
    virtual bool                    SetTexture(int nIndex, CBaseTexture8* pTextures, DWORD dwFlags = 0);
    virtual bool                    SetRenderState(D3DRENDERSTATETYPE Type, DWORD dwValue, DWORD dwFlags = 0);
    virtual bool                    SetTransform(D3DTRANSFORMSTATETYPE Type, D3DMATRIX* Matrix, DWORD dwFlags = 0);
    virtual bool                    SetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE Type, DWORD dwValue, DWORD dwFlags = 0);
    virtual bool                    GetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE Type, DWORD *pdwSrcValue = NULL, DWORD *pdwRefValue = NULL, DWORD dwFlags = 0);
    virtual bool                    SetViewport(UINT nX, UINT nY, UINT nWidth, UINT nHeight, float fMinZ=0.0f, float fMaxZ=1.0f, DWORD dwFlags = CD3D_BOTH);
    virtual bool                    SetClipPlane(DWORD dwIndex, float* pPlane, DWORD dwFlags = CD3D_BOTH);
    virtual bool                    SetVertexShader(DWORD dwHandle, DWORD dwFlags = CD3D_BOTH);
    virtual bool                    SetStreamSource(DWORD dwStream, CVertexBuffer8 *pSrcVB, CVertexBuffer8 *pRefVB, DWORD dwStride, DWORD dwFlags);
    virtual bool                    SetIndices(CIndexBuffer8 *pSrcIB, CIndexBuffer8 *pRefIB, DWORD dwBaseVertexIndex, DWORD dwFlags);
    virtual bool                    LightEnable(DWORD dwLightNum, DWORD dwEnable, DWORD dwFlags = CD3D_BOTH);
    virtual bool                    CreateVertexShader(LPDWORD pdwDeclaration, LPDWORD pdwFunction, LPDWORD pdwHandle, DWORD dwUsage, DWORD dwFlags = CD3D_BOTH);
    virtual bool                    DeleteVertexShader(DWORD dwHandle);
    virtual bool                    SetVertexShaderConstant(DWORD dwRegister, LPVOID lpvConstantData, DWORD dwConstantCount, DWORD dwFlags = CD3D_BOTH);
    virtual bool                    ValidateDevice(HRESULT *phSrcResult = NULL, DWORD *pdwSrcPasses = NULL, HRESULT *phRefResult = NULL, DWORD *pdwRefPasses = NULL);
    virtual bool                    SetupViewport(void);

    virtual void                    SetAPI(RENDERPRIMITIVEAPI dwAPI);
    virtual void                    SetAPI(PRENDERPRIMITIVEAPI pAPIList, DWORD dwAPIListSize, DWORD dwAPICyclingFrequency);
    virtual void                    SwitchAPI(DWORD dwTestNumber);
    virtual RENDERPRIMITIVEAPI      GetAPI(void);
    virtual DWORD                   RemapAPI(DWORD dwCurrentAPI, D3DPRIMITIVETYPE d3dptPrimitiveType, DWORD dwVertexTypeDesc);

    virtual bool                    RenderPrimitive(D3DPRIMITIVETYPE d3dptPrimitiveType, DWORD dwVertexTypeDesc,
                                       LPVOID lpvVertices, DWORD dwVertexCount,
                                       LPWORD lpwIndices = NULL, DWORD dwIndexCount = 0, DWORD dwFlags = CD3D_BOTH);

    virtual DWORD                   GetVertexSize(DWORD dwVertexTypeDesc);
    virtual LPVOID                  CreateVertexArray(LPVOID lpvVertices, DWORD  dwVertexCount, DWORD dwVertexSize, LPWORD lpwIndices, DWORD  dwIndexCount);
    virtual LPWORD                  CreateIndexArray(DWORD dwSize);

    virtual CTexture8*              CreateCommonTexture(CDevice8* pDevice, UINT uWidth, UINT uHeight, UINT uFormat, LPCTSTR szName = NULL);
    virtual bool                    ColorFillTarget(DWORD dwRGB, LPRECT pRect = NULL);
    virtual TCHAR*                  D3DFmtToString(D3DFORMAT d3dfmt);
};

// Texture utility prototypes
CTexture8*                          CreateGradientTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                                        DWORD dwColors[4], D3DFORMAT fmt = D3DFMT_A8R8G8B8);
CVolumeTexture8*                    CreateGradientVolumeTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                                        DWORD dwDepth, DWORD* dwColors, DWORD dwColorStride, D3DFORMAT fmt = D3DFMT_A8R8G8B8);
CTexture8*                          CreateStripedTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                                        DWORD dwStripes, DWORD dwColorArray[], bool bHorizontal,
                                        bool bDiagonal = false, D3DFORMAT fmt = D3DFMT_A8R8G8B8);
CVolumeTexture8*                    CreateStripedVolumeTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                                        DWORD dwDepth, DWORD dwStripes, DWORD dwColorArray[], DWORD dwArrayStride, 
                                        bool bHorizontal, bool bDiagonal = false, D3DFORMAT fmt = D3DFMT_A8R8G8B8);
CTexture8*                          CreateChannelDataTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                                        PCHANNELDATA pData, D3DFORMAT fmt);

// Vertex utility prototypes
void                                SetVertex(D3DVERTEX *lpVrt, float x, float y, float z, float nx, float ny, float nz);
void                                SetVertex(D3DTLVERTEX *lpVrt, float x, float y, float z);

#endif //__CD3DTEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\d3dlocus.h ===
#ifdef UNDER_XBOX
#define _USE_XGMATH
#define D3DCOMPILE_BEGINSTATEBLOCK 1
#endif // UNDER_XBOX
#ifndef UNDER_XBOX
#include <windows.h>
#include <winsock2.h>
#else
#include <xtl.h>
#include <winsockx.h>
#include <xnetref.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#ifdef UNDER_XBOX
#include <xgraphics.h>
#endif // UNDER_XBOX
#include "modulex.h"
#include "..\frame\d3dlocus\cd3d.h"
#include "..\frame\d3dlocus\dtypes.h"
#include "..\frame\d3dlocus\misc.h"
#include "..\frame\d3dlocus\log.h"
#include "..\frame\d3dlocus\util.h"
#include "..\frame\d3dlocus\input.h"
#include "..\frame\d3dlocus\dxconio.h"
#include "..\frame\d3dlocus\enum.h"
#include "..\frame\d3dlocus\display.h"
#include "..\frame\d3dlocus\light.h"
#include "..\frame\d3dlocus\mesh.h"
#include "..\frame\d3dlocus\noise.h"
#include "..\frame\d3dlocus\palette.h"
#include "..\frame\d3dlocus\rsrcdata.h"
#include "..\frame\d3dlocus\scene.h"
#include "..\frame\d3dlocus\texture.h"
#include "..\frame\d3dlocus\vibuffer.h"
#include "..\frame\d3dlocus\vpshader.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\cshapesfvf.h ===
#ifndef _CSHAPESFVF_H_
#define _CSHAPESFVF_H_

#include "dxlegacy.h"

typedef struct 
{
    struct {
        union { 
            float tu; 
            float dvTU; 
        }; 
        union { 
            float tv; 
            float dvTV; 
        }; 
    } Pair[D3DDP_MAXTEXCOORD];
} TEXCOORDS, *LPTEXCOORDS;

class CShapesFVF : public CShapes
{
    public:
    
    // FVF strides

    D3DDRAWPRIMITIVESTRIDEDDATA m_StrideData;
    TEXCOORDS   *m_TexCoords;
    DWORD       m_FVFTypes;
    
    CShapesFVF();
    ~CShapesFVF();

    public:

    // Member functions for conversion to FVF format

    BOOL ConvertToFVF(DWORD dwFlags);
    void ScaleCoords(DWORD dwCoord, float uScale, float vScale);
    void OffsetCoords(DWORD dwCoord, float uOffset, float vOffset);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\d3dbase.h ===
#ifdef UNDER_XBOX
#define _USE_XGMATH
#endif // UNDER_XBOX
#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#ifdef UNDER_XBOX
#include <xgraphics.h>
#endif // UNDER_XBOX
#include "..\frame\d3dbase\object.h"
#include "..\frame\d3dbase\dtypes.h"
#include "..\frame\d3dbase\misc.h"
#include "..\frame\d3dbase\util.h"
#include "..\frame\d3dbase\input.h"
#include "..\frame\d3dbase\dxconio.h"
#include "..\frame\d3dbase\enum.h"
#include "..\frame\d3dbase\display.h"
#include "..\frame\d3dbase\light.h"
#include "..\frame\d3dbase\mesh.h"
#include "..\frame\d3dbase\palette.h"
#include "..\frame\d3dbase\noise.h"
#include "..\frame\d3dbase\rsrcdata.h"
#include "..\frame\d3dbase\scene.h"
#include "..\frame\d3dbase\texture.h"
#include "..\frame\d3dbase\vibuffer.h"
#include "..\frame\d3dbase\vpshader.h"

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif

#ifdef DEMO_HACK
#define D3DFMT_D24X4S4          ((D3DFORMAT)0xFFFF0002)
#define D3DFMT_D15S1            ((D3DFORMAT)0xFFFF0003)
#define D3DFMT_D32              ((D3DFORMAT)0xFFFF0004)
#define D3DFMT_R3G3B2           ((D3DFORMAT)0xFFFF0005)
#define D3DFMT_A4L4             ((D3DFORMAT)0xFFFF0006)
#define D3DFMT_A8R3G3B2         ((D3DFORMAT)0xFFFF0007)
#define D3DFMT_X4R4G4B4         ((D3DFORMAT)0xFFFF0008)
#define D3DFMT_A8P8             ((D3DFORMAT)0xFFFF0009)
#define D3DFMT_R8G8B8           ((D3DFORMAT)0xFFFF000A)
#define D3DFMT_W11V11U10        ((D3DFORMAT)0xFFFF000B)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\dxlegacy.h ===
#ifndef __DXLEGACY_H__
#define __DXLEGACY_H__

#define D3DTRANSFORMSTATE_WORLD                 D3DTS_WORLD
#define D3DTRANSFORMSTATE_VIEW                  D3DTS_VIEW
#define D3DTRANSFORMSTATE_PROJECTION            D3DTS_PROJECTION
#define D3DTRANSFORMSTATE_WORLD1                D3DTS_WORLD1
#define D3DTRANSFORMSTATE_WORLD2                D3DTS_WORLD2
#define D3DTRANSFORMSTATE_WORLD3                D3DTS_WORLD3
#define D3DTRANSFORMSTATE_TEXTURE0              D3DTS_TEXTURE0
#define D3DTRANSFORMSTATE_TEXTURE1              D3DTS_TEXTURE1
#define D3DTRANSFORMSTATE_TEXTURE2              D3DTS_TEXTURE2
#define D3DTRANSFORMSTATE_TEXTURE3              D3DTS_TEXTURE3
#define D3DTRANSFORMSTATE_TEXTURE4              D3DTS_TEXTURE4
#define D3DTRANSFORMSTATE_TEXTURE5              D3DTS_TEXTURE5
#define D3DTRANSFORMSTATE_TEXTURE6              D3DTS_TEXTURE6
#define D3DTRANSFORMSTATE_TEXTURE7              D3DTS_TEXTURE7
#define D3DTRANSFORMSTATE_FORCE_DWORD           D3DTS_FORCE_DWORD

#define D3DRENDERSTATE_ZENABLE                  D3DRS_ZENABLE
#define D3DRENDERSTATE_FILLMODE                 D3DRS_FILLMODE
#define D3DRENDERSTATE_SHADEMODE                D3DRS_SHADEMODE
#define D3DRENDERSTATE_LINEPATTERN              D3DRS_LINEPATTERN
#define D3DRENDERSTATE_ZWRITEENABLE             D3DRS_ZWRITEENABLE
#define D3DRENDERSTATE_ALPHATESTENABLE          D3DRS_ALPHATESTENABLE
#define D3DRENDERSTATE_LASTPIXEL                D3DRS_LASTPIXEL
#define D3DRENDERSTATE_SRCBLEND                 D3DRS_SRCBLEND
#define D3DRENDERSTATE_DESTBLEND                D3DRS_DESTBLEND
#define D3DRENDERSTATE_CULLMODE                 D3DRS_CULLMODE
#define D3DRENDERSTATE_ZFUNC                    D3DRS_ZFUNC
#define D3DRENDERSTATE_ALPHAREF                 D3DRS_ALPHAREF
#define D3DRENDERSTATE_ALPHAFUNC                D3DRS_ALPHAFUNC
#define D3DRENDERSTATE_DITHERENABLE             D3DRS_DITHERENABLE
#define D3DRENDERSTATE_ALPHABLENDENABLE         D3DRS_ALPHABLENDENABLE
#define D3DRENDERSTATE_FOGENABLE                D3DRS_FOGENABLE
#define D3DRENDERSTATE_SPECULARENABLE           D3DRS_SPECULARENABLE
#define D3DRENDERSTATE_ZVISIBLE                 D3DRS_ZVISIBLE
#define D3DRENDERSTATE_FOGCOLOR                 D3DRS_FOGCOLOR
#define D3DRENDERSTATE_FOGTABLEMODE             D3DRS_FOGTABLEMODE
#define D3DRENDERSTATE_FOGSTART                 D3DRS_FOGSTART
#define D3DRENDERSTATE_FOGEND                   D3DRS_FOGEND
#define D3DRENDERSTATE_FOGDENSITY               D3DRS_FOGDENSITY
#define D3DRENDERSTATE_EDGEANTIALIAS            D3DRS_EDGEANTIALIAS
#define D3DRENDERSTATE_ZBIAS                    D3DRS_ZBIAS
#define D3DRENDERSTATE_RANGEFOGENABLE           D3DRS_RANGEFOGENABLE
#define D3DRENDERSTATE_STENCILENABLE            D3DRS_STENCILENABLE
#define D3DRENDERSTATE_STENCILFAIL              D3DRS_STENCILFAIL
#define D3DRENDERSTATE_STENCILZFAIL             D3DRS_STENCILZFAIL
#define D3DRENDERSTATE_STENCILPASS              D3DRS_STENCILPASS
#define D3DRENDERSTATE_STENCILFUNC              D3DRS_STENCILFUNC
#define D3DRENDERSTATE_STENCILREF               D3DRS_STENCILREF
#define D3DRENDERSTATE_STENCILMASK              D3DRS_STENCILMASK
#define D3DRENDERSTATE_STENCILWRITEMASK         D3DRS_STENCILWRITEMASK
#define D3DRENDERSTATE_TEXTUREFACTOR            D3DRS_TEXTUREFACTOR
#define D3DRENDERSTATE_WRAP0                    D3DRS_WRAP0
#define D3DRENDERSTATE_WRAP1                    D3DRS_WRAP1
#define D3DRENDERSTATE_WRAP2                    D3DRS_WRAP2
#define D3DRENDERSTATE_WRAP3                    D3DRS_WRAP3
#ifndef UNDER_XBOX
#define D3DRENDERSTATE_WRAP4                    D3DRS_WRAP4
#define D3DRENDERSTATE_WRAP5                    D3DRS_WRAP5
#define D3DRENDERSTATE_WRAP6                    D3DRS_WRAP6
#define D3DRENDERSTATE_WRAP7                    D3DRS_WRAP7
#endif
#define D3DRENDERSTATE_CLIPPING                 D3DRS_CLIPPING
#define D3DRENDERSTATE_LIGHTING                 D3DRS_LIGHTING
#define D3DRENDERSTATE_EXTENTS                  D3DRS_EXTENTS
#define D3DRENDERSTATE_AMBIENT                  D3DRS_AMBIENT
#define D3DRENDERSTATE_FOGVERTEXMODE            D3DRS_FOGVERTEXMODE
#define D3DRENDERSTATE_COLORVERTEX              D3DRS_COLORVERTEX
#define D3DRENDERSTATE_LOCALVIEWER              D3DRS_LOCALVIEWER
#define D3DRENDERSTATE_NORMALIZENORMALS         D3DRS_NORMALIZENORMALS
#define D3DRENDERSTATE_DIFFUSEMATERIALSOURCE    D3DRS_DIFFUSEMATERIALSOURCE
#define D3DRENDERSTATE_SPECULARMATERIALSOURCE   D3DRS_SPECULARMATERIALSOURCE
#define D3DRENDERSTATE_AMBIENTMATERIALSOURCE    D3DRS_AMBIENTMATERIALSOURCE
#define D3DRENDERSTATE_EMISSIVEMATERIALSOURCE   D3DRS_EMISSIVEMATERIALSOURCE
#define D3DRENDERSTATE_VERTEXBLEND              D3DRS_VERTEXBLEND
#define D3DRENDERSTATE_CLIPPLANEENABLE          D3DRS_CLIPPLANEENABLE

#define D3DVBLEND_1WEIGHT                       D3DVBF_1WEIGHTS
#define D3DVBLEND_2WEIGHTS                      D3DVBF_2WEIGHTS
#define D3DVBLEND_3WEIGHTS                      D3DVBF_3WEIGHTS
#define D3DVBLEND_DISABLE                       D3DVBF_DISABLE

#define D3DFVF_VERTEX ( D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 )
//#define D3DFVF_LVERTEX ( D3DFVF_XYZ | D3DFVF_RESERVED1 | D3DFVF_DIFFUSE | \
//                         D3DFVF_SPECULAR | D3DFVF_TEX1 )
#define D3DFVF_TLVERTEX ( D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | \
                          D3DFVF_TEX1 )

typedef struct _D3DDP_PTRSTRIDE {
    LPVOID lpvData;
    DWORD  dwStride;
} D3DDP_PTRSTRIDE; 

typedef struct D3DDRAWPRIMITIVESTRIDEDDATA  {
    D3DDP_PTRSTRIDE position;
    D3DDP_PTRSTRIDE normal;
    D3DDP_PTRSTRIDE diffuse;
    D3DDP_PTRSTRIDE specular;
    D3DDP_PTRSTRIDE textureCoords[D3DDP_MAXTEXCOORD];
} D3DDRAWPRIMITIVESTRIDEDDATA , *LPD3DDRAWPRIMITIVESTRIDEDDATA;

typedef struct _D3DVERTEX {
    union { 
        float x; 
        float dvX; 
    }; 
    union { 
        float y; 
        float dvY; 
    }; 
    union { 
        float z; 
        float dvZ; 
    }; 
    union { 
        float nx; 
        float dvNX; 
    }; 
    union { 
        float ny; 
        float dvNY; 
    }; 
    union { 
        float nz; 
        float dvNZ; 
    }; 
    union { 
        float tu; 
        float dvTU; 
    }; 
    union { 
        float tv; 
        float dvTV; 
    }; 
    _D3DVERTEX() { }
    _D3DVERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _tu, float _tv)
        { x = v.x; y = v.y; z = v.z;
          nx = n.x; ny = n.y; nz = n.z;
          tu = _tu; tv = _tv;
        }
} D3DVERTEX, *LPD3DVERTEX;

typedef struct _D3DTLVERTEX { 
    union { 
        float sx; 
        float dvSX; 
    }; 
    union { 
        float sy; 
        float dvSY; 
    }; 
    union { 
        float sz; 
        float dvSZ; 
    }; 
    union { 
        float rhw; 
        float dvRHW; 
    }; 
    union { 
        D3DCOLOR color; 
        D3DCOLOR dcColor; 
    }; 
    union { 
        D3DCOLOR specular; 
        D3DCOLOR dcSpecular; 
    }; 
    union { 
        float tu; 
        float dvTU; 
    }; 
    union { 
        float tv; 
        float dvTV; 
    }; 
} D3DTLVERTEX, *LPD3DTLVERTEX; 


inline D3DVECTOR
cD3DVECTOR(float x, float y, float z)
{
    D3DVECTOR v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}

inline D3DVERTEX 
cD3DVERTEX(D3DVECTOR vPosition, D3DVECTOR vNormal, float u, float v) 
{
    D3DVERTEX r;
    r.x = vPosition.x;
    r.y = vPosition.y;
    r.z = vPosition.z;
    r.nx = vNormal.x;
    r.ny = vNormal.y;
    r.nz = vNormal.z;
    r.tu = u;
    r.tv = v;
    return r;
}

inline D3DTLVERTEX 
cD3DTLVERTEX(D3DVECTOR vPosition, float rhw, D3DCOLOR color, D3DCOLOR specular, float u, float v) 
{
    D3DTLVERTEX r;
    r.sx = vPosition.x;
    r.sy = vPosition.y;
    r.sz = vPosition.z;
    r.rhw = rhw;
    r.color = color;
    r.specular = specular;
    r.tu = u;
    r.tv = v;
    return r;
}

inline float
DotProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1.x*v2.x + v1.y * v2.y + v1.z*v2.z;
}

inline _D3DVECTOR
CrossProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
    _D3DVECTOR result;
 
    result.x = v1.y * v2.z - v1.z * v2.y;
    result.y = v1.z * v2.x - v1.x * v2.z;
    result.z = v1.x * v2.y - v1.y * v2.x;
 
    return result;
}

inline float
SquareMagnitude (const _D3DVECTOR& v)
{
   return v.x*v.x + v.y*v.y + v.z*v.z;
}


inline float
Magnitude (const _D3DVECTOR& v)
{
   return (float)sqrt(SquareMagnitude(v));
}


inline _D3DVECTOR
Normalize (const _D3DVECTOR& v)
{
   D3DVECTOR result;
   float     len = Magnitude(v);
   result.x = v.x / len;
   result.y = v.y / len;
   result.z = v.z / len;
   return result;
}

#endif // __DXLEGACY_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\bitfont.h ===
//-----------------------------------------------------------------------------
// FILE: BITFONT.H
//
// Desc: bit font header file
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#pragma once
#ifndef _BITFONT_H_
#define _BITFONT_H_


#ifdef XBOX
#include <xtl.h>
#else
#include <windows.h>
#include <d3d8.h>
#endif

// disable C4200: nonstandard extension used : zero-sized array in struct/union
#pragma warning(push)
#pragma warning(disable:4200)

// pack the structure as we're reading it from the disk
#pragma pack(1)

//----------------------------------------------------------------------------
// BXF file signature
#define BITFONT_SIG     '00BF'

//----------------------------------------------------------------------------
struct BitFontCharInfo
{
    BYTE bWidth;
    DWORD dwOffset;
};

//----------------------------------------------------------------------------
struct BitFontInfo
{
    DWORD   dwSig;
    DWORD   dwFontHeight;
    DWORD   cBfis;
    BitFontCharInfo rgBfi[];
};

#pragma warning(pop)
#pragma pack()


//----------------------------------------------------------------------------
// Draw flags
const DWORD DRAWTEXT_TRANSPARENTBKGND =     0x00000001;


//----------------------------------------------------------------------------
// A BitFont class that can be used with the DrawText routines above to
//  render text to various surfaces.
class BitFont
{
public:
    //----------------------------------------------------------------------------
    BitFont();

    //----------------------------------------------------------------------------
    ~BitFont();

#if 0

    //----------------------------------------------------------------------------
    // Load a BitFont font from a file
    bool Load(const WCHAR* filename);

#endif 0

    //----------------------------------------------------------------------------
    // Returns pixel height and width of string
    void GetTextStringLength(DWORD *pdwWidth, DWORD *pdwHeight, 
        const WCHAR* Message);

    //----------------------------------------------------------------------------
    // Draw the text to a surface
    void BitFont::DrawText
    (
        IDirect3DSurface8 *pSurface,
        const WCHAR*    str,
        int             iX,
        int             iY,
        DWORD           dwFlags,
        D3DCOLOR        colFore,
        D3DCOLOR        colBack
    );

private:
    //----------------------------------------------------------------------------
    // various pointers to font data, index tables and width tables
    BitFontInfo     *m_pBitFontInfo;
};

#endif // _BITFONT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\psgen.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    psgen.h

Author:

    Matt Bronder

Description:

    Direct3D shader generator.

*******************************************************************************/

#ifndef __PSGEN_H__
#define __PSGEN_H__

#define XVECTOR4    D3DXVECTOR4

// Pixel shader register flags
#define PSREG_ZERO          0x0001
#define PSREG_C0            0x0002
#define PSREG_C1            0x0004
#define PSREG_FOG           0x0008
#define PSREG_V0            0x0010
#define PSREG_V1            0x0020
#define PSREG_T0            0x0040
#define PSREG_T1            0x0080
#define PSREG_T2            0x0100
#define PSREG_T3            0x0200
#define PSREG_R0            0x0400
#define PSREG_R1            0x0800
#define PSREG_V1R0_SUM      0x1000
#define PSREG_EF_PROD       0x2000

//******************************************************************************
class CShaderGenerator {

protected:

    DWORD                           m_dwPSConstant[16];
    DWORD                           m_dwValidInputsRGB;
    DWORD                           m_dwValidInputsA;

    float                           m_fCascadeFrequency;

    LPSTR                           m_szAsm;
    UINT                            m_uAsmSize;
    UINT                            m_uAsmLength;

    LPSTR                           m_szDef;
    UINT                            m_uDefSize;
    UINT                            m_uDefLength;

public:

                                    CShaderGenerator();
                                    ~CShaderGenerator();

    BOOL                            GeneratePixelShader(D3DPIXELSHADERDEF* pd3dpsd, LPXGBUFFER* pxgbAsm = NULL, DWORD* pdwInputRegisters = NULL);

    void                            SetCascadeFrequency(float fFrequency);
    void                            Seed(DWORD dwSeed);

    void                            OutputPixelShaderDef(D3DPIXELSHADERDEF* pd3dpsd, LPXGBUFFER* pxgbDef);

protected:

    void                            GeneratePSConstants(D3DPIXELSHADERDEF* pd3dpsd);
    void                            GeneratePSTexAddress(D3DPIXELSHADERDEF* pd3dpsd);
    void                            GeneratePSCombiners(D3DPIXELSHADERDEF* pd3dpsd);
    void                            GeneratePSCombinersAsm(D3DPIXELSHADERDEF* pd3dpsd);

    void                            AppendCode(LPCSTR szCode, ...);
    void                            AppendDef(LPCSTR szDef, ...);

    inline void                     OutputError(LPCSTR szError);
};

#endif //__PSGEN_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\all.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 2000 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       all.cpp
 *  Content:    all tests
 *  History:
 *   Date       By       Reason
 *   ====       ==       ======
 *  04/20/01    jgould Created to test Xbox all
 *
 ****************************************************************************/

#include "all.h"

/****************************************************************************
 *
 * The Global Logging Handle
 *
 ****************************************************************************/

extern HANDLE g_hLog;

/****************************************************************************
 *
 *  all_BasicTest
 *
 *  Description:
 *      Basic Test for all
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      S_OK on success
 *      E_XX on failure
 *
 ****************************************************************************/

HRESULT all_BasicTest( void )
{
    HRESULT             hr              = S_OK;

    //
    // Return the Hresult
    //

    return hr;
}

/****************************************************************************
 *
 *  all_StartTest
 *
 *  Description:
 *      The Harness Entry into the all tests
 *
 *  Arguments:
 *      LogHandle - a handle to a logging object
 *
 *  Returns:  
 *		(void)
 *
 ****************************************************************************/

VOID WINAPI all_StartTest( HANDLE LogHandle )
{
    HRESULT             hr              = S_OK;

    //
    // the following tests will Assert (by design) in debug builds
    // to turn these tests on (they are off by default) define
    // CODE_COVERAGE when this file is compiled
    //

#ifdef CODE_COVERAGE

#endif // CODE_COVERAGE

    //
    // Test all in the mannor it was meant to be called
    //

    SETLOG( LogHandle, "jgould", "Core (s-d3d)", "all", "Basic" );
    EXECUTE( all_BasicTest() );

}

/****************************************************************************
 *
 *  all_EndTest
 *
 *  Description:
 *      The Exit function for the test harness
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *		(void)
 *
 ****************************************************************************/

VOID WINAPI all_EndTest( VOID )
{
}

/****************************************************************************
 *
 *  main
 *
 *  Description:
 *      the exe entry point
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ****************************************************************************/

#ifdef NOLOGGING
void __cdecl main( void )
{
    all_StartTest( NULL );
    all_EndTest();
}
#endif // NOLOGGING

/****************************************************************************
 *
 * Export Function Pointers for StartTest and EndTest
 *
 ****************************************************************************/

#pragma data_seg( EXPORT_SECTION_NAME )
DECLARE_EXPORT_DIRECTORY( all )
#pragma data_seg()

BEGIN_EXPORT_TABLE( all )
    EXPORT_TABLE_ENTRY( "StartTest", all_StartTest )
    EXPORT_TABLE_ENTRY( "EndTest", all_EndTest )
END_EXPORT_TABLE( all )
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\transprt.h ===
#ifndef __TRANSPRT_H__
#define __TRANSPRT_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define PORT_BROADCAST                  2201

#define PACKETID_SC_SUCCESS             0xFFFFFFFF
#define PACKETID_SC_FAULT               0xFFFFFFFE
#define PACKETID_SC_DEVICEAFFINITY      0xFFFFFFFD
#define PACKETID_SC_REFFRAMECRC32       0xFFFFFFFC
#define PACKETID_SC_REFFRAME            0xFFFFFFFB
#define PACKETID_CS_CHECKDEVICEAFFINITY 0xFFFFFFFA
#define PACKETID_CS_DIRECT3DCREATE8     0xFFFFFFF9
#define PACKETID_CS_GETREFFRAMECRC32    0xFFFFFFF8
#define PACKETID_CS_GETREFFRAME         0xFFFFFFF7
#define PACKETID_CS_GETKEYSTATE         0xFFFFFFF6

// Number of distinct classes requiring translation during marshalling (i.e. pixel shader handles)
#define TRANSLATION_TYPES               4

#define __ADDRESS                       0   // Object in memory
#define __VSHADER                       1   // Vertex shader handle
#define __PSHADER                       2   // Pixel shader handle
#define __SBLOCK                        3   // State block handle
#define __DATA                          9

#define _ADDRESS                        "0"
#define _VSHADER                        "1"
#define _PSHADER                        "2"
#define _SBLOCK                         "3"
#define _DATA                           "9"

#define GET_TRANSTYPE(t)                (t - '0')

// IN   - DWORD given to be passed in.  DWORD in, nothing out.
// DEL  - DWORD given to be passed in.  DWORD in, nothing out.  Cannot be used with _DATA
// PIN  - LPDWORD given pointing to buffer followed by DWORD containing buffer size.  DWORD offset and buffer in, nothing out.  Can only be used with _DATA
// POUT - LPDWORD given pointing to buffer to be filled followed by DWORD containing buffer size.  DWORD buffer size in.  DWORD offset and buffer out.  Can only be used with _DATA // RET(p) - LPDWORD given to be filled with return value followed by DWORD given with return value size.  Size in, DWORD with offset and buffer out.
// OUT  - LPDWORD given to be filled with a DWORD value on return.  Nothing in, returned DWORD value out.  _OUT cannot be used to transmit a NULL DWORD pointer for invalid parameter checking...if it is desired to do so, use a _POUT to send the NULL pointer across.  // RET(s) - LPDWORD given to be filled with return value.  Nothing in, DWORD out.
// ADD  - LPDWORD given to be filled with a DWORD value on return and containing translation DWORD on entry.  Translation DWORD in, returned DWORD value out.  Cannot be used with _DATA
// BI   - LPDWORD given to be filled with a DWORD value on return and containing a DWORD on entry.  DWORD in, returned DWORD value out.  Can only be used with _DATA.  Cannot be used with a NULL pointer to the bidirectional parameter.

#define _IN(t)       "i" t
#define _DEL(t)      "l" t
#define _PIN(t)      "n" t
#define _POUT(t)     "t" t
#define _OUT(t)      "o" t
#define _ADD(t)      "a" t
#define _BI(t)       "b" t
#define _VOID        ""

#define __IN         'i'
#define __PIN        'n'
#define __OUT        'o'
#define __POUT       't'
#define __ADD        'a'
#define __DEL        'l'
#define __BI         'b'

//******************************************************************************
// Packet Data Types and Structures
//******************************************************************************

typedef DWORD TRANSTYPE;

typedef DWORD PACKETID;

// Method identifiers (supplied as the packet ID)
#define SIG_MACRO(f,s)  MID_##f,
typedef enum _METHODID {
#include "sigs.h"
} METHODID, *PMETHODID;

// Enumeration identifier
typedef struct _ENUMERATION_ID {
    DWORD                       dwID[4];
    _ENUMERATION_ID()           {dwID[0] = 0x357fe46c; dwID[1] = 0x520a54d7; 
                                dwID[2] = 0x221bc940; dwID[3] = 0x9823E1CC;}
} ENUMERATION_ID, *PENUMERATION_ID;

// Enumeration packet
typedef struct _PACKET_ENUM {
    ENUMERATION_ID              enumid;
    IN_ADDR                     s_addrClient;
    UINT                        uPort;
} PACKET_ENUM, *PPACKET_ENUM;

// Packet data header
typedef struct _PACKET {
    DWORD                       dwSize;
    PACKETID                    packetID;
} PACKET, *PPACKET;

// Packet used to request device affinity from the server
typedef struct _PACKET_CS_CHECKDEVICEAFFINITY : public PACKET {
    LPVOID                      pvDirect3D;
    _PACKET_CS_CHECKDEVICEAFFINITY() {dwSize = sizeof(PACKET_CS_CHECKDEVICEAFFINITY);
                                packetID = PACKETID_CS_CHECKDEVICEAFFINITY;}
} PACKET_CS_CHECKDEVICEAFFINITY, *PPACKET_CS_CHECKDEVICEAFFINITY;

// Packet used to initiate a call to Direct3DCreate8
typedef struct _PACKET_CS_DIRECT3DCREATE8 : public PACKET {
    LPVOID                      pvDirect3D;
    _PACKET_CS_DIRECT3DCREATE8() {dwSize = sizeof(PACKET_CS_DIRECT3DCREATE8);
                                packetID = PACKETID_CS_DIRECT3DCREATE8;}
} PACKET_CS_DIRECT3DCREATE8, *PPACKET_CS_DIRECT3DCREATE8;

// Packet used to initiate a call to one of the methods of Direct3D
typedef struct _PACKET_CS_CALLMETHOD : public PACKET {
    LPVOID                      pvObject;
    DWORD                       pdwArguments[1];
} PACKET_CS_CALLMETHOD, *PPACKET_CS_CALLMETHOD;

// Packet used to request a CRC of the frame buffer
typedef struct _PACKET_CS_GETREFFRAMECRC32 : public PACKET {
    LPVOID                      pvDevice;
    _PACKET_CS_GETREFFRAMECRC32() {dwSize = sizeof(PACKET_CS_GETREFFRAMECRC32);
                                packetID = PACKETID_CS_GETREFFRAMECRC32;}
} PACKET_CS_GETREFFRAMECRC32, *PPACKET_CS_GETREFFRAMECRC32;

// Packet used to request the contents of the frame buffer
typedef struct _PACKET_CS_GETREFFRAME : public PACKET {
    LPVOID                      pvDevice;
    _PACKET_CS_GETREFFRAME()    {dwSize = sizeof(PACKET_CS_GETREFFRAME);
                                packetID = PACKETID_CS_GETREFFRAME;}
} PACKET_CS_GETREFFRAME, *PPACKET_CS_GETREFFRAME;

// Packet used to return the results from a call to one of the methods of Direct3D
typedef struct _PACKET_SC_METHODRESULT : public PACKET {
    DWORD                       pdwResult[1];
} PACKET_SC_METHODRESULT, *PPACKET_SC_METHODRESULT;

// Generic packet used to indicate a successful operation
typedef struct _PACKET_SC_SUCCESS : public PACKET {
    _PACKET_SC_SUCCESS()        {dwSize = sizeof(PACKET_SC_SUCCESS);
                                packetID = PACKETID_SC_SUCCESS;}
} PACKET_SC_SUCCESS, *PPACKET_SC_SUCCESS;

// Generic packet used to indicate an unspecified fault
typedef struct _PACKET_SC_FAULT : public PACKET {
    _PACKET_SC_FAULT()          {dwSize = sizeof(PACKET_SC_FAULT);
                                packetID = PACKETID_SC_FAULT;}
} PACKET_SC_FAULT, *PPACKET_SC_FAULT;

// Packet used to inidicate whether or not the video hardware on the server
// will produce rasterized images identical to that of the NV2A
typedef struct _PACKET_SC_DEVICEAFFINITY : public PACKET {
    BOOL                        bEquivalent;
    _PACKET_SC_DEVICEAFFINITY() {dwSize = sizeof(PACKET_SC_DEVICEAFFINITY);
                                packetID = PACKETID_SC_DEVICEAFFINITY;}
} PACKET_SC_DEVICEAFFINITY, *PPACKET_SC_DEVICEAFFINITY;

// Packet used to return the CRC of the frame buffer
typedef struct _PACKET_SC_REFFRAMECRC32 : public PACKET {
    DWORD                       dwRefCRC;
    _PACKET_SC_REFFRAMECRC32()  {dwSize = sizeof(PACKET_SC_REFFRAMECRC32);
                                packetID = PACKETID_SC_REFFRAMECRC32;}
} PACKET_SC_REFFRAMECRC32, *PPACKET_SC_REFFRAMECRC32;

// Packet used to return the contents of the frame buffer
typedef struct _PACKET_SC_REFFRAME : public PACKET {
    BYTE                        pBits[1];
    _PACKET_SC_REFFRAME()       {dwSize = sizeof(PACKET_SC_REFFRAME);
                                packetID = PACKETID_SC_REFFRAME;}
} PACKET_SC_REFFRAME, *PPACKET_SC_REFFRAME;

#endif // __TRANSPRT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\bitfont.cpp ===
//-----------------------------------------------------------------------------
// FILE: BITFONT.CPP
//
// Desc: bit font rasterizer
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#include "bitfont.h"
#include <stdio.h>
#include <assert.h>
#include <D3DX8Math.h>
#ifdef XBOX
#include <xgraphics.h>
#endif
DWORD dwColorFromD3DXColor(D3DFORMAT dwSurfaceFormat, D3DCOLOR color);

// default font: 'Small Fonts' size 7
static const DWORD rgSmallFont[] =
{
    0x30304246, 0x0000000b, 0x00000060, 0x00000002,
    0x000b0200, 0x16040000, 0x06000000, 0x00000021,
    0x00002c06, 0x00370700, 0x42060000, 0x02000000,
    0x0000004d, 0x00005803, 0x00630300, 0x6e030000,
    0x04000000, 0x00000079, 0x00008402, 0x008f0300,
    0x9a020000, 0x03000000, 0x000000a5, 0x0000b005,
    0x00bb0300, 0xc6050000, 0x05000000, 0x000000d1,
    0x0000dc05, 0x00e70500, 0xf2050000, 0x05000000,
    0x000000fd, 0x00010805, 0x01130500, 0x1e020000,
    0x02000001, 0x00000129, 0x00013405, 0x013f0500,
    0x4a050000, 0x05000001, 0x00000155, 0x00016009,
    0x01760700, 0x81070000, 0x07000001, 0x0000018c,
    0x00019707, 0x01a20600, 0xad060000, 0x07000001,
    0x000001b8, 0x0001c307, 0x01ce0200, 0xd9050000,
    0x06000001, 0x000001e4, 0x0001ef05, 0x01fa0900,
    0x10070000, 0x07000002, 0x0000021b, 0x00022607,
    0x02310700, 0x3c070000, 0x06000002, 0x00000247,
    0x00025206, 0x025d0600, 0x68060000, 0x08000002,
    0x00000273, 0x00027e06, 0x02890600, 0x94060000,
    0x03000002, 0x0000029f, 0x0002aa03, 0x02b50300,
    0xc0040000, 0x05000002, 0x000002cb, 0x0002d603,
    0x02e10500, 0xec050000, 0x05000002, 0x000002f7,
    0x00030205, 0x030d0500, 0x18030000, 0x05000003,
    0x00000323, 0x00032e05, 0x03390200, 0x44020000,
    0x05000003, 0x0000034f, 0x00035a02, 0x03650800,
    0x70050000, 0x06000003, 0x0000037b, 0x00038605,
    0x03910500, 0x9c030000, 0x05000003, 0x000003a7,
    0x0003b203, 0x03bd0500, 0xc8050000, 0x06000003,
    0x000003d3, 0x0003de04, 0x03e90400, 0xf4040000,
    0x03000003, 0x000003ff, 0x00040a02, 0x04150300,
    0x20050000, 0x02000004, 0x0000042b, 0xc0c0c0c0,
    0xc0c0c0c0, 0xc0c0c0c0, 0x808080c0, 0x80c08080,
    0xf0f0c0c0, 0xf0f0a0a0, 0xf0f0f0f0, 0xd4fcfcf0,
    0x80d480d4, 0xfcfcd4d4, 0xc4ecfcfc, 0xa8e4cca8,
    0xfefcecc4, 0x9a9cfefe, 0xb8d8eef6, 0xfefefefe,
    0xaadeacde, 0xfec8b4b6, 0x9efefefe, 0xf6eadeac,
    0xfefec8f4, 0xacdefefe, 0xb4b6aabe, 0xfedebea8,
    0xdeccbefe, 0xc8d4d6ca, 0xfefebede, 0xeafe8c9e,
    0xfee8f4f6, 0xfefefefe, 0x86dafefc, 0xfefef8d4,
    0xfcfefefe, 0xd4c6dafe, 0xfefebeb8, 0xfefcfefe,
    0xf8f486fa, 0xfefefefe, 0xfafefcfe, 0xfeb8f4c6,
    0xdefefefe, 0xa69adedc, 0xfefeb8b4, 0xb4cefefe,
    0xb4b6b2b6, 0xfefefec8, 0xd694cefe, 0xc8d4d6d2,
    0xfefefefe, 0xeaf6b4ce, 0xfe80bcde, 0xcefefefe,
    0xf6eaf6b4, 0xfefec8b4, 0xcceefefe, 0xec86aace,
    0xfefefee8, 0x8ebc86fe, 0xc8b4f6b2, 0xfefefefe,
    0x8abeb4ce, 0xfec8b4b6, 0x86fefefe, 0xdeeaeef4,
    0xfefed8dc, 0xb4cefefe, 0xb4b6cab6, 0xfefefec8,
    0xb6b4cefe, 0xc8b4f6c2, 0xfefefefe, 0x82f6f4ce,
    0xfe88f4f6, 0xcefefefe, 0xf682f6f4, 0xfebe88f4,
    0xfcfefefe, 0xdcbedaee, 0xfefefee8, 0xfefcfefe,
    0xf88cfe8a, 0xfefefefe, 0xdabefcfe, 0xfeb8dcee,
    0xcefefefe, 0xdeeaf6b4, 0xfefed8fc, 0x80ff80ff,
    0x80de80e1, 0x00ab00b3, 0x80b400ab, 0x80e180df,
    0xffff80ff, 0xdbdbe6e7, 0xffbdbcc3, 0x83ffffff,
    0xbd83bdbc, 0xffff83bc, 0xbcc3ffff, 0xbcbfbfbf,
    0xffffffc3, 0xbdbc83ff, 0x83bcbdbd, 0xffffffff,
    0x85bdbc83, 0xff83bcbd, 0x83ffffff, 0xbd85bdbc,
    0xffffbfbc, 0xbcc3ffff, 0xb8bdb1bf, 0xffffffc5,
    0xbdbcbdff, 0xbdbcbd81, 0xffffffff, 0x81bdbcbd,
    0xffbdbcbd, 0xf5ffffff, 0xb5f1f5f4, 0xffffcdb4,
    0xb4b9ffff, 0xb4ad9dad, 0xffffffb9, 0xbdbcb9ff,
    0x81bcbdbd, 0x80ffffff, 0x009e80ff, 0x00ad009e,
    0x00b300ad, 0x00bf00b3, 0x80ff80ff, 0x9c9cffff,
    0xb5b5adad, 0xffffffb9, 0xbdbcc2ff, 0xc3bdbdbd,
    0xffffffff, 0x83bdbc82, 0xffbfbfbf, 0xc2ffffff,
    0xb5bdbdbc, 0xfffdc3b9, 0xbc82ffff, 0xbdbd83bd,
    0xffffffbd, 0xbdb8c6ff, 0xc5b9f9c7, 0xffffffff,
    0xefedec82, 0xffededed, 0xbaffffff, 0xb9bbb9b8,
    0xffffc5b9, 0xb8baffff, 0xedd5d7d5, 0xffffffed,
    0xddbebeff, 0xebebd5d5, 0xffffffff, 0xedd5baba,
    0xffbbbbd5, 0xbaffffff, 0xededd5ba, 0xffffefef,
    0xfa82ffff, 0xbfddedf5, 0xffffff83, 0xb5ba82ff,
    0xa3bfbdad, 0xffff9fbf, 0xadb5bae2, 0xffc3df9d,
    0x82ffffff, 0xddcdd5da, 0x9fdfc3df, 0xaad2ffff,
    0xfffdfdf5, 0xfffffff3, 0xfdfafaff, 0xfbfffdfd,
    0xffff07ff, 0xfdfddaba, 0xfffbfffd, 0xfaffffe7,
    0xc5f5cdfa, 0xffffc3b7, 0xbabaffff, 0xb7b5b58d,
    0xffffff8b, 0xcdfafaff, 0xcbb7bdb5, 0xffffffff,
    0xb5c5f2f2, 0xffc3b7b5, 0xfaffffff, 0x85b5cdfa,
    0xffffcbbf, 0xbadaffff, 0xbfa595ad, 0xffffffab,
    0xc5fafaff, 0xc3b7b5b5, 0xffff8ff7, 0x95adbaba,
    0xffb3b7b5, 0xbaffffff, 0xb595adfa, 0xffffb3b7,
    0xfabaffff, 0xb7b595ad, 0xffbfbfb3, 0xadbabaff,
    0xb3af9d9d, 0xffffffff, 0x9dadbaba, 0xffb3af9d,
    0xffffffff, 0xb6b681ff, 0xffffb6b6, 0xffffffff,
    0xb6b6b689, 0xffffffb6, 0xc5ffffff, 0xc6bababa,
    0xffffffff, 0xb28dffff, 0xbf8eb2b2, 0xffffffbf,
    0xb2b2c5ff, 0xf7f7c6b2, 0xffffffff, 0xb2b2b285,
    0xfff7f7a6, 0xc5ffffff, 0x8ef2caba, 0xffffffff,
    0xba85bfff, 0xffceb2aa, 0xffffffff, 0xb2b2b5ff,
    0xffffc6b2, 0xffffffff, 0xcab2b2b5, 0xffffffce,
    0xb9ffffff, 0xd6d6aaaa, 0xffffffff, 0xaaa9ffff,
    0xffa6a6da, 0xffffffff, 0xaaaaa9ff, 0x9fefc6a6,
    0xffffffff, 0xb6daea89, 0xffffff86, 0xc9dfdfff,
    0xc6d69aca, 0xffffdfdf, 0x8a899fdf, 0x9f86969a,
    0xbfffffdf, 0xdaaaa9bf, 0xbfbfa6b6, 0xd7ffffff,
    0xfefafaa9, 0xfffffffe, 0xa997ffff, 0xbebebaba,
    0x0000ffbf, 0x0006fe21, 0x0fffff9d, 0x00000002,
};

//----------------------------------------------------------------------------
BitFont::BitFont()
{
    // start out with our default font
    m_pBitFontInfo = (BitFontInfo *)rgSmallFont;
}

//----------------------------------------------------------------------------
BitFont::~BitFont()
{
    if(m_pBitFontInfo != (BitFontInfo *)rgSmallFont)
        delete m_pBitFontInfo;
}

#if 0

//----------------------------------------------------------------------------
// Intialize a BitFont from a specified filename
bool BitFont::Load(const WCHAR* filename)
{
	bool retval = false;
	BitFontInfo *pBitFontInfo = NULL;

	HANDLE hFile = CreateFile(filename, 
		                      GENERIC_READ, 
							  FILE_SHARE_READ, 
							  NULL, 
							  OPEN_EXISTING, 
							  FILE_ATTRIBUTE_NORMAL, 
							  NULL);


    if (hFile == INVALID_HANDLE_VALUE)
    {
		goto err;
	}

    // Get the file size.
	BY_HANDLE_FILE_INFORMATION info;

	if (!GetFileInformationByHandle(hFile, &info))
	{
		goto err;
	}

    // need at least a BITFONT and one BITFONTINFO, but the
	// file can be too big as well.
	//
	if (info.nFileSizeLow < sizeof(BitFontInfo) + sizeof(BitFontCharInfo)
		|| info.nFileSizeHigh != 0)
	{
		goto err;
	}

	// Allocate the BITFONT.
	pBitFontInfo = (BitFontInfo *)new BYTE[info.nFileSizeLow];

	if (!pBitFontInfo)
	{
		goto err;
	}

	// Load it.
	if (!ReadFile(hFile, pBitFontInfo, info.nFileSizeLow, NULL, NULL))
	{
		goto err;
	}

    // if the sig doesn't match or we don't have any bitfontinfos then bail
    if (pBitFontInfo->dwSig != BITFONT_SIG || !pBitFontInfo->cBfis)
	{
        goto err;
	}

	// Delete any old fonts.
    if(m_pBitFontInfo != (BitFontInfo *)rgSmallFont)
	{
		delete m_pBitFontInfo;
	}

	// Set the new.
	m_pBitFontInfo = pBitFontInfo;
	pBitFontInfo = NULL;

	retval = true;

err:
	if (pBitFontInfo)
	{
		delete pBitFontInfo;
	}

    if (hFile != INVALID_HANDLE_VALUE)
	{
        CloseHandle(hFile);
	}

    return retval;
}

#endif 0

//----------------------------------------------------------------------------
// Returns pixel height and width of string
void BitFont::GetTextStringLength(DWORD *pdwWidth, DWORD *pdwHeight, const WCHAR *str)
{
    if(pdwHeight)
        *pdwHeight = m_pBitFontInfo->dwFontHeight;

    if(pdwWidth)
    {
        DWORD dwWidth = 0;

        // go through the string adding up the widths
        for(const WCHAR *sz = str; *sz; sz++)
        {
            DWORD iBfi = *sz - 32;

            if(iBfi >= m_pBitFontInfo->cBfis)
                iBfi = 0;

            dwWidth += m_pBitFontInfo->rgBfi[iBfi].bWidth;
        }

        *pdwWidth = dwWidth;
    }
}

//----------------------------------------------------------------------------
void DrawText16
(
    D3DSURFACE_DESC*    pDesc,
    D3DLOCKED_RECT*     pLock,
    BitFontInfo*        m_pBitFontInfo,
    const WCHAR*        str,
    int                 iX,
    int                 iY,
    DWORD               dwFlags,
    DWORD               dwcolFore,
    DWORD               dwcolBack
)
{
    bool fdrawBkgnd = !(dwFlags & DRAWTEXT_TRANSPARENTBKGND);

    // rgColor[0] is background color
    WORD rgColor[2] = { LOWORD(dwcolBack), LOWORD(dwcolFore) };

    // pointer to font bytestream data
    BYTE *lpData = (BYTE *)&m_pBitFontInfo->rgBfi[m_pBitFontInfo->cBfis];
    // pointer to end of dest surface
    WORD *pwSurfaceMaxY = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * pDesc->Height);

    // go through the string
    for(const WCHAR *sz = str; *sz; sz++)
    {
        DWORD iBfi = *sz - 32;

        if(iBfi >= m_pBitFontInfo->cBfis)
            iBfi = 0;

        // get data for this char
        BitFontCharInfo *pbfi = &m_pBitFontInfo->rgBfi[iBfi];
        BYTE *lpBits = &lpData[pbfi->dwOffset];

        // where we're drawing
        WORD *pwSurface = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + iX;
        // max x for the line we're on
        WORD *pwSurfaceMaxX = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + pDesc->Width;

        // go through bitfont drawing each line
        for(DWORD y = 0; y < m_pBitFontInfo->dwFontHeight; y++)
        {
            DWORD dwWidth = pbfi->bWidth;

            while(dwWidth)
            {
                DWORD dwByte = *lpBits++;
                DWORD dwNumBits = min(dwWidth, 8);

                dwWidth -= dwNumBits;

                // check number of bits and clipping
                while(dwNumBits-- && (pwSurface < pwSurfaceMaxX))
                {
                    DWORD iIndex = !(dwByte & 0x80);

                    if(fdrawBkgnd || iIndex)
                        *pwSurface = rgColor[iIndex];

                    pwSurface++;
                    dwByte <<= 1;
                }
            }

            // get next line data
            pwSurface = (WORD *)((BYTE *)(pwSurface - pbfi->bWidth - dwWidth) + pLock->Pitch);
            pwSurfaceMaxX = (WORD *)((BYTE *)pwSurfaceMaxX + pLock->Pitch);

            // check clipping
            if(pwSurface >= pwSurfaceMaxY)
                break;
        }

        // move to next char position
        iX += pbfi->bWidth;
    }
}

//----------------------------------------------------------------------------
void DrawText32
(
    D3DSURFACE_DESC*    pDesc,
    D3DLOCKED_RECT*     pLock,
    BitFontInfo*        m_pBitFontInfo,
    const WCHAR*        str,
    int                 iX,
    int                 iY,
    DWORD               dwFlags,
    DWORD               dwcolFore,
    DWORD               dwcolBack
)
{
    bool fdrawBkgnd = !(dwFlags & DRAWTEXT_TRANSPARENTBKGND);
    DWORD rgColor[2] = { dwcolBack, dwcolFore };

    BYTE *lpData = (BYTE *)&m_pBitFontInfo->rgBfi[m_pBitFontInfo->cBfis];
    DWORD *pdwSurfaceMaxY = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * pDesc->Height);

    for(const WCHAR *sz = str; *sz; sz++)
    {
        DWORD iBfi = *sz - 32;

        if(iBfi >= m_pBitFontInfo->cBfis)
            iBfi = 0;

        BitFontCharInfo *pbfi = &m_pBitFontInfo->rgBfi[iBfi];
        BYTE *lpBits = &lpData[pbfi->dwOffset];

        DWORD *pdwSurface = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + iX;
        DWORD *pdwSurfaceMaxX = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + pDesc->Width;

        for(DWORD y = 0; y < m_pBitFontInfo->dwFontHeight; y++)
        {
            DWORD dwWidth = pbfi->bWidth;

            while(dwWidth)
            {
                DWORD dwByte = *lpBits++;
                DWORD dwNumBits = min(dwWidth, 8);

                dwWidth -= dwNumBits;

                while(dwNumBits-- && (pdwSurface < pdwSurfaceMaxX))
                {
                    DWORD iIndex = !(dwByte & 0x80);

                    if(fdrawBkgnd || iIndex)
                        *pdwSurface = rgColor[iIndex];

                    pdwSurface++;
                    dwByte <<= 1;
                }
            }

            pdwSurface = (DWORD *)((BYTE *)(pdwSurface - pbfi->bWidth - dwWidth) + pLock->Pitch);
            pdwSurfaceMaxX = (DWORD *)((BYTE *)pdwSurfaceMaxX + pLock->Pitch);
            if(pdwSurface >= pdwSurfaceMaxY)
                break;
        }

        iX += pbfi->bWidth;
    }
}

//----------------------------------------------------------------------------
// Draw the specified text to a surface
void BitFont::DrawText
(
    IDirect3DSurface8 *pSurface,
    const WCHAR*    str,
    int             iX,
    int             iY,
    DWORD           dwFlags,
    D3DCOLOR        colFore,
    D3DCOLOR        colBack
)
{
    typedef void (*PFNDRAWTEXT)(
        D3DSURFACE_DESC*    pDesc,
        D3DLOCKED_RECT*     pLock,
        BitFontInfo*        m_pBitFontInfo,
        const WCHAR*        str,
        int                 iX,
        int                 iY,
        DWORD               dwFlags,
        DWORD               dwcolFore,
        DWORD               dwcolBack
    );

    PFNDRAWTEXT rgpfnDrawText[] =
    {
        DrawText16,
        DrawText32
    };
    D3DLOCKED_RECT lockRect;
    D3DSURFACE_DESC desc;
    (void)pSurface->GetDesc(&desc);

    if(pSurface->LockRect(&lockRect, NULL, D3DLOCK_TILED) != S_OK)
    {
        assert(FALSE);
        return;
    }

    UINT BitsPerPixel =

#ifdef XBOX
        (desc.Format == D3DFMT_X8R8G8B8 
          || desc.Format == D3DFMT_A8R8G8B8
          || desc.Format == D3DFMT_LIN_X8R8G8B8
          || desc.Format == D3DFMT_LIN_A8R8G8B8) ? 32 : 16;
#else
        (desc.Format == D3DFMT_X8R8G8B8 
          || desc.Format == D3DFMT_A8R8G8B8) ? 32 : 16;
#endif

    // use the correct draw routine for the job
    rgpfnDrawText[BitsPerPixel == 32](
        &desc,
        &lockRect,
        m_pBitFontInfo,
        str,
        iX,
        iY,
        dwFlags,
        dwColorFromD3DXColor(desc.Format, colFore),
        dwColorFromD3DXColor(desc.Format, colBack)
    );
    // Relase the lock on the surface
    pSurface->UnlockRect();
}

//----------------------------------------------------------------------------
// Given a surfaceformet and color, return the dude as a native pixel
DWORD dwColorFromD3DXColor(D3DFORMAT dwSurfaceFormat, D3DCOLOR color)
{
    DWORD dwColor;
    D3DXCOLOR col(color);

    switch(dwSurfaceFormat)
    {
    // 32-bit
    case D3DFMT_A8R8G8B8:
#ifdef XBOX
    case D3DFMT_LIN_A8R8G8B8:
#endif
        dwColor =
            (((long)(col.a * 255)) << 24) |
            (((long)(col.r * 255)) << 16) |
            (((long)(col.g * 255)) << 8) |
            (long)(col.b * 255);
        break;

    // 32-bit
    case D3DFMT_X8R8G8B8:
#ifdef XBOX
    case D3DFMT_LIN_X8R8G8B8:
#endif
        dwColor =
            0xff000000L |
            (((long)(col.r * 255)) << 16) |
            (((long)(col.g * 255)) << 8) |
            (long)(col.b * 255);
        break;

    // 16-bit
    case D3DFMT_R5G6B5:
#ifdef XBOX
    case D3DFMT_LIN_R5G6B5:
#endif
        dwColor =
            (((long)(col.r * 255)) << 11) |
            (((long)(col.g * 255)) << 5) |
            (long)(col.b * 255);
        break;
    case D3DFMT_X1R5G5B5:
#ifdef XBOX
    case D3DFMT_LIN_X1R5G5B5:
#endif
        dwColor =
            (1 << 15) |
            (((long)(col.r * 255)) << 10) |
            (((long)(col.g * 255)) << 5) |
            (long)(col.b * 255);
        break;
    case D3DFMT_A4R4G4B4:
#ifdef XBOX
    case D3DFMT_LIN_A4R4G4B4:
#endif
        dwColor =
            (((long)(col.a * 15)) << 12) |
            (((long)(col.r * 15)) << 8) |
            (((long)(col.g * 15)) << 4) |
            (long)(col.b * 15);
        break;
    case D3DFMT_A1R5G5B5:
#ifdef XBOX
    case D3DFMT_LIN_A1R5G5B5:
#endif
        dwColor =
            (((long)(col.a > .9f)) << 15) |
            (((long)(col.r * 31)) << 10) |
            (((long)(col.g * 31)) << 5) |
            (long)(col.b * 31);
        break;

    default:
        dwColor = 0;
        assert(FALSE);
        break;
    }
    return dwColor;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\benmark5.cpp ===
//-----------------------------------------------------------------------------
// FILE: BENMARK5.CPP
//
// Desc: Main BenMark file. This was all based on the dx7
//  BenMark5 Ribbons exe written by Ben DeWaal of nVidia.
//
// Ben says: "The key point here is NOT to use D3DVBCAPS_SYSTEMMEMORY.
//  It will halve the triangle rate."
//
// Copyright (c) 1999-2000 NVIDIA Corporation. All rights reserved.
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#define STRICT

#ifdef XBOX
#include <xtl.h>
#include <xgraphics.h>
#else
#include <windows.h>
#include <D3DX8.h>
#endif
#include <stdio.h>
#include <math.h>
#include "D3DApp.h"
#include "DXUtil.h"

#ifdef USE_SOUND
#include "dsound.h"

///
/// Set up necessary types
/// 

typedef short* LPSHORT;

///
/// Setup the frequency, and define PI
///

static const double FREQ = 440;
static const double PI = 3.1415926535;

///
/// Scaling factors
///
/// ISCALE is used to convert an interger [0, 44099] to a double [0, 2PI]
/// DATASCALE is used to conver a double [-1.0, 1.0] to an integer [-32767, 32767]

static const double ISCALE = 2.0 * PI / 44099.0;
static const double DATASCALE = 32767.0 / 1.0;

///
/// the main sine player code
///

HRESULT PlaySineWave( void )
{

	///
	/// create a dsound buffer and a data buffer
	///

    HRESULT hr = S_OK;
	LPDIRECTSOUNDBUFFER pDSBuffer = NULL;
	LPSHORT pData = NULL;

	///
	/// place to hold the number of bytes allocated by dsound
	///

	DWORD dwBytes = 0;

	///
	/// allocate space for calculate argument to sin, return value from sine, and actual integer value
	///

	double dArg = 0.0;
	double dSinVal = 0.0;
	SHORT sVal = 0;
   
	///
	/// allocate the dsound buffer description and the wave format
	///

	DSBUFFERDESC dsbd;
	WAVEFORMATEX wfx;

	///
	/// It's always safe to zero out stack allocated structs
	///

	ZeroMemory( &dsbd, sizeof( DSBUFFERDESC ) );
	ZeroMemory( &wfx, sizeof( DSBUFFERDESC ) );

	///
	/// setup the waveformat description to be PCM, 44100hz, 16bit, mono
    ///

	wfx.cbSize = 0;
	wfx.wFormatTag = WAVE_FORMAT_PCM;
	wfx.nChannels = 1;
	wfx.nSamplesPerSec = 44100;
	wfx.wBitsPerSample = 16;
	wfx.nBlockAlign = 2;
	wfx.nAvgBytesPerSec = wfx.nSamplesPerSec * wfx.nBlockAlign;

	///
	/// setup the dsound buffer description with the waveformatex
	///

	dsbd.dwBufferBytes = wfx.nAvgBytesPerSec;
	dsbd.dwFlags = 0;
	dsbd.dwSize = sizeof( DSBUFFERDESC );
	dsbd.lpwfxFormat = &wfx;
    //dsbd.dwMixBins = DSMIXBIN_FXSEND_0;

	/// 
	/// Create the dsound buffer
	///

	hr = DirectSoundCreateBuffer( &dsbd, &pDSBuffer );

	///
	/// start the dsound buffer playing in a loop mode
	///

	if ( SUCCEEDED( hr ) )
	{
		hr = pDSBuffer->Play( 0, 0, DSBPLAY_LOOPING );
	}

	///
	/// continue forever (or until an error occurs)
	///

	if ( SUCCEEDED( hr ) )
	{

		///
		/// get a buffer from dsound using lock
		///

		hr = pDSBuffer->Lock( 0, dsbd.dwBufferBytes, (LPVOID*) &pData, &dwBytes, NULL, NULL, 0 );

		///
		/// go through the buffer 2 bytes (1 short) at a time
		///

		for( DWORD i = 0; SUCCEEDED( hr ) && i < dsbd.dwBufferBytes / 2; i++ )
		{	
			///
			/// calculate the sin value
			///

			dArg = (double) i * ISCALE;
			dSinVal = sin( FREQ * dArg );
			sVal = (SHORT) ( dSinVal * DATASCALE );

			///
			/// copy the value into the dsound buffer
			///

			pData[i] = sVal;
		}

    }
    
    //
    // leave with the buffer still playing..
    //

    return hr;
}

#endif // USE_SOUND

extern "C" ULONG DebugPrint(PCHAR Format, ...);

const DWORD cdwRibbonCount  = 25;

const float cfRibbonCurl    = 60.0f * D3DX_PI;
const float cfRibbonPitch   = 3.25f;
const float cfRibbonWidth   = 0.04f;
const float cfRibbonRadius  = 0.05f;

const DWORD cdwSubsInLength = 1200;
const DWORD cdwSubsInWidth  = 5;

static ScenarioMenu s_Button7Menu = 
{
	MT_BUTTON7,
	L"Toggle Effects",
	{
		L"Toggle specular lighting",
		L"Toggle Z buffer",
		L"Toggle local view",
		NULL,
		NULL,
		NULL
	},
	3
};

static ScenarioMenu s_Button8Menu = 
{
	MT_BUTTON8,
	L"Lighting",
	{
		L"Add directional light",
		L"Add spot light",
		L"Add point light",
		L"Remove directional light",
		L"Remove spot light",
		L"Remove point light"
	},
	6
};

static ScenarioMenu s_Button9Menu = 
{
	MT_BUTTON9,
	L"Performance",
	{
		L"Toggle number of Textures from 0 - 2",
		L"Toggle Triangle List / Triangle Strip",
		L"Toggle Solid/Point/Wireframe fillmode",
		L"Toggle DrawIndexedPrimitive/DrawIndexedPrimitiveUP routine",
        L"Toggle realtime/precompiled draws",
        NULL
	},
	5
};

/*
 * Application class. The base class provides just about all the
 * functionality we want, so we're just supplying stubs to interface with
 * the non-C++ functions of the app.
 */

class BenMark : public CD3DApplication
{

public:

	/*
	 * Support structures.
	 */

	// The different options for the test.
	struct BMXSTATE
	{
		UINT        cApplyTextures;
		bool		bUseTriList;
		bool        bZenable;
		bool        bSpecularenable;
		bool        bLocalviewer;

		int         nDirectionalLights;
		int         nSpotLights;
		int         nPointLights;

		int         iDrawFunc;
        bool        fPrecompile;
		D3DFILLMODE iFillMode; 
	};

	/*
	 * Geometry Constants
	 */

    enum DRAWFUNC
    {
        DF_DRAWINDEXEDPRIMITIVE,    // use vertexbuffer drawprim
        DF_DRAWINDEXEDPRIMITIVEUP,  // use user ptr drawprim
        DRAWMAX
    };

	void DrawIndexedPrimitive(UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount);
	void DrawIndexedPrimitiveUP(UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount);
	void PrecompiledDraw(UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount);

    typedef void (BenMark::*PFNDRAWRIBBON)(
        UINT                iIndex,
        D3DPRIMITIVETYPE    Type,
        DWORD               PrimitiveCount);

    PFNDRAWRIBBON m_pfnDrawRibbon;

	/*
	 * Our materials
	 */

	D3DMATERIAL8 m_matIn;
	D3DMATERIAL8 m_matOut[cdwRibbonCount];

	/*
	 * Implementation
	 */

	void InitMaterials(D3DMATERIAL8 *pmatIn, D3DMATERIAL8 *pmatOut);
	void InitLights();
	IDirect3DTexture8 *CreateTexture(DWORD dwWidth, DWORD dwHeight);
	void InitIndices();
	void InitVBs();

    /* 
	 * Data members
	 */

	BMXSTATE				m_bmxState;
    WORD                   *m_pwIndices;    // user ptr to indices
    IDirect3DIndexBuffer8  *m_pIndexBuffer; // dx8 index buffer

    IDirect3DVertexBuffer8 *m_pVBRibbon[2]; // vb of verts
    BYTE                   *m_pVertices[2]; // user ptr to verts

#ifdef XBOX
    IDirect3DPushBuffer8   *m_pPushBuffer;  // precompiled push buffer
#endif

    IDirect3DTexture8      *m_pTexture1;    // texture1
    IDirect3DTexture8      *m_pTexture2;    // texture2
    IDirect3DSurface8      *m_pBackSurf;    // back surface ptr

    DWORD                   m_dwFVF;        // our current FVF
    DWORD                   m_dwFVFSize;    // FVF size

    DWORD                   m_dwIndexCount; // # indices
    DWORD                   m_dwNumVertices;// # verts

	DWORD					m_dwTotalTimes; // # of times the ribbons have been drawn

    DWORD                   m_dwTriCount;
    _D3DPRIMITIVETYPE       m_dwPrimType;
    float                   m_fDelta;

	int						m_nNumLights;	// # of allocated lights.

    LONG                    m_lDivides;
    int                     m_iMaxDivides;
    
	// long-term stats.
	double					m_fdAveTriPerSec;
	double					m_fdMaxTriPerSec;
	double					m_fdMinTriPerSec;

	DWORD					m_dwAveCount;

    // Background thread management.
    HANDLE                  m_hThread;
    bool                    m_fTerminateThread;

	/*
	 * Overridden members of the base class
	 */

    void InitDeviceObjects();
    void RestoreDeviceObjects();
    void DeleteDeviceObjects();
    void Render();
	void UpdateStats(float fElapsedTime);
	void ShowInfo(int iY, int cHeight);
	unsigned GetMenus(ScenarioMenu **rgMenus);
	void ProcessKeyPress(DWORD iMenu, DWORD iKey);

	/*
	 * Constructor
	 */

	BenMark();
};

//=========================================================================
// Entrypoint into the test.
//=========================================================================

#ifdef XBOX
void __cdecl main()
#else
INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR, INT )
#endif
{
#ifdef USE_SOUND
    PlaySineWave();
#endif // USE_SOUND

    BenMark app;

#ifdef XBOX
    app.Create(NULL);
#else
    app.Create(hInst);
#endif

    app.Run();

#ifndef XBOX
	return 0;
#endif  // ! XBOX
}

//=========================================================================
// BenMark constructor
//=========================================================================

BenMark::BenMark()
{
    m_pwIndices = NULL;
    m_pIndexBuffer = NULL;

    m_pVBRibbon[0] = NULL;
    m_pVBRibbon[1] = NULL;

    m_pVertices[0] = NULL;
    m_pVertices[1] = NULL;

#ifdef XBOX
    m_pPushBuffer  = NULL;
#endif

    m_pTexture1 = NULL;
    m_pTexture2 = NULL;
    m_pBackSurf = NULL;

    m_dwFVF = 0;
    m_dwFVFSize = 0;

    m_dwIndexCount = 0;
    m_dwNumVertices = 0;

    m_lDivides      = 0;
    m_dwAveCount     = 0;
    m_fdAveTriPerSec = 0.0;
    m_fdMaxTriPerSec = 0.0;
    m_fdMinTriPerSec = 1e199;

	m_nNumLights = 0;

    m_hThread = 0;

	ZeroMemory(&m_bmxState, sizeof(m_bmxState));

    m_bmxState.iDrawFunc   = DF_DRAWINDEXEDPRIMITIVE;
    m_bmxState.iFillMode   = D3DFILL_SOLID;

    m_bmxState.fPrecompile = false;

    m_bmxState.bZenable = true;

    m_bmxState.nDirectionalLights   = 1;
    m_bmxState.nSpotLights          = 0;
    m_bmxState.nPointLights         = 0;

    m_bUseDepthBuffer = TRUE;
    m_DepthBufferFormat = D3DFMT_D16;
}

//=========================================================================
// This creates all device-dependant managed objects, such as managed
// textures and managed vertex buffers.
//=========================================================================

void BenMark::InitDeviceObjects()
{
    InitMaterials(&m_matIn, m_matOut);

    m_pTexture1 = CreateTexture(8, 256);
    m_pTexture2 = CreateTexture(8, 256);
};

//=========================================================================
// Background thread loop.
//=========================================================================

DWORD WINAPI ThreadProc
(
  LPVOID lpParameter   // thread data
)
{
    BenMark *pMark = (BenMark *)lpParameter;

    while (!pMark->m_fTerminateThread)
    {
        for (volatile double i = 1000000000.0f; i != 0; i = i / 10.0f)
            ;

        InterlockedIncrement(&pMark->m_lDivides);
    }

    return 0;
}

//=========================================================================
// Restore device-memory objects and state after a device is created or 
// resized.
//
// This will manually get called any time an option changes so any
// option-specific initialization should go here.
//=========================================================================

void BenMark::RestoreDeviceObjects()
{
    // initalize our lights
    InitLights();

    // create our vertex buffers and indices
    InitVBs();

	// Set up our transformations.
    D3DXMATRIX mux;
    D3DXMatrixIdentity(&mux);
    D3DXMatrixTranslation(&mux, 0.0f, 0.0f, -10.0f);

    CheckHR(m_pDevice->SetTransform(D3DTS_VIEW, (D3DMATRIX*)&mux));

    D3DXMatrixPerspectiveFovRH(&mux,
                              D3DX_PI * 30.0f / 360.0f,
//                              (float)m_BackBufferDesc.Height / m_BackBufferDesc.Width,
                              (float)m_BackBufferDesc.Width / m_BackBufferDesc.Height,
                              1.0f,
                              19.0f);

    CheckHR(m_pDevice->SetTransform(D3DTS_PROJECTION, (D3DMATRIX*)&mux));

    // init some render states
    CheckHR(m_pDevice->SetRenderState(D3DRS_ZENABLE, m_bmxState.bZenable));
    CheckHR(m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, m_bmxState.bSpecularenable));
    CheckHR(m_pDevice->SetRenderState(D3DRS_LOCALVIEWER, m_bmxState.bLocalviewer));
	CheckHR(m_pDevice->SetRenderState(D3DRS_FILLMODE, m_bmxState.iFillMode));
    CheckHR(m_pDevice->SetRenderState(D3DRS_LIGHTING, TRUE));

	// init some random states.
    m_fDelta     = 0.75f * cfRibbonPitch / (cdwRibbonCount - 1);

    // Create the background thread.
    m_fTerminateThread = FALSE;
    m_hThread = CreateThread(NULL, 0, ThreadProc, this, 0, NULL);
    SetThreadPriority(m_hThread, THREAD_PRIORITY_BELOW_NORMAL);

    DWORD dwTime = GetTickCount();
    m_lDivides = 0;
    
    Sleep(2000);

    LONG Divides = InterlockedExchange(&m_lDivides, 0);
    dwTime = GetTickCount() - dwTime;

    m_iMaxDivides = Divides * 1000 / dwTime;
};

//=========================================================================
// Called when the app is exitting, or the device is being changed,
// this function deletes any device dependant objects.
//=========================================================================

void BenMark::DeleteDeviceObjects()
{
    if (m_hThread)
    {
        m_fTerminateThread = TRUE;
        WaitForSingleObject(m_hThread, 2000);
    }

    delete[] m_pwIndices;
    m_pwIndices = NULL;

    delete[] m_pVertices[0];
    m_pVertices[0] = NULL;

    delete[] m_pVertices[1];
    m_pVertices[1] = NULL;

    SAFE_RELEASE(m_pIndexBuffer);

    SAFE_RELEASE(m_pVBRibbon[0]);
    SAFE_RELEASE(m_pVBRibbon[1]);

    SAFE_RELEASE(m_pTexture1);
    SAFE_RELEASE(m_pTexture2);

#ifdef XBOX
    SAFE_RELEASE(m_pPushBuffer);
#endif
}

//=========================================================================
// Draw Ben's ribbons
//=========================================================================

void BenMark::Render()
{
    //float fRotation2 = 2.0f * D3DX_PI / 2047.0f * float(dwNow & 2047);
    float fRotation2 = 2.0f * D3DX_PI / 2047.0f * m_fTime * 1023;

    // clear -- worth moving this calculation?
    DWORD dwFlags = (m_Presentation.AutoDepthStencilFormat != D3DFMT_UNKNOWN) ?
        D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER : D3DCLEAR_TARGET;

    CheckHR(m_pDevice->Clear(0, NULL, dwFlags, 0x00000000, 1.0f, 0L));

    // begin scene
    CheckHR(m_pDevice->BeginScene());

	// Set up the world translation.
    D3DXMATRIX matWorld;
    D3DXMatrixTranslation(&matWorld, 0.0f, -0.5f * 0.75f * cfRibbonPitch, 0.0f);

    // draw ribbons
    for (DWORD i = 0; i < cdwRibbonCount ; i++)
    {
        // setup matrix
        D3DXMATRIX matWorldT;

        D3DXMatrixRotationAxis(&matWorldT, &D3DXVECTOR3(1.0f, 0.0f, 0.0f),
            fRotation2 + i * 0.4f);
        matWorldT *= matWorld;

        // translate y by fDelta for the next line
        matWorld.m[3][1] += m_fDelta;

        // set our world transform
        CheckHR(m_pDevice->SetTransform(D3DTS_WORLD, (D3DMATRIX*)&matWorldT));

        // draw outside
        if(m_bmxState.cApplyTextures)
        {
            CheckHR(m_pDevice->SetTexture          (0, m_pTexture1));

            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1,D3DTA_TEXTURE));
            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP,  D3DTOP_MODULATE));
            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2,D3DTA_DIFFUSE));

            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1,D3DTA_TEXTURE));
            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,  D3DTOP_MODULATE));
            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2,D3DTA_DIFFUSE));

            if(m_bmxState.cApplyTextures > 1)
            {
                CheckHR(m_pDevice->SetTexture          (1, m_pTexture2));

                CheckHR(m_pDevice->SetTextureStageState(1, D3DTSS_COLORARG1,D3DTA_TEXTURE));
                CheckHR(m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP,  D3DTOP_ADD));
                CheckHR(m_pDevice->SetTextureStageState(1, D3DTSS_COLORARG2,D3DTA_CURRENT));

                CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1,D3DTA_TEXTURE));
                CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,  D3DTOP_ADD));
                CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2,D3DTA_CURRENT));
            }
            else
            {
                CheckHR(m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP,  D3DTOP_DISABLE));
                CheckHR(m_pDevice->SetTextureStageState(1, D3DTSS_ALPHAOP,  D3DTOP_DISABLE));
            }
        }

        CheckHR(m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CW));
        CheckHR(m_pDevice->SetMaterial(&m_matOut[i]));

        // draw outside ribbon
        (this->*m_pfnDrawRibbon)(0, m_dwPrimType, m_dwTriCount);

        // draw inside
        if(m_bmxState.cApplyTextures)
        {
            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1,D3DTA_DIFFUSE));
            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP,  D3DTOP_SELECTARG1));
            CheckHR(m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP,  D3DTOP_DISABLE));

            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1,D3DTA_DIFFUSE));
            CheckHR(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,  D3DTOP_SELECTARG1));
            CheckHR(m_pDevice->SetTextureStageState(1, D3DTSS_ALPHAOP,  D3DTOP_DISABLE));
        }

        CheckHR(m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW));
        CheckHR(m_pDevice->SetMaterial(&m_matIn));

        // draw inside ribbon
        (this->*m_pfnDrawRibbon)(1, m_dwPrimType, m_dwTriCount);

        // next
        m_dwTotalTimes += 2;
    }

    // end
    CheckHR(m_pDevice->EndScene());
}

//=========================================================================
// Called once a second or after a test run to update the 
// test status string.
//=========================================================================

void BenMark::UpdateStats(float fElapsedTime)
{
    LONG Divides = InterlockedExchange(&m_lDivides, 0);

    // next experiment?
    double rcp = 1e-6 / (double)fElapsedTime;
    double tps = double(m_dwTotalTimes * m_dwTriCount) * rcp;
    double sps = double(m_dwTotalTimes * m_dwIndexCount) * rcp;
    double ips = double(m_dwTotalTimes * m_dwIndexCount * 2) * rcp;
    double vps = double(m_dwTotalTimes * m_dwIndexCount * m_dwFVFSize) * rcp;
    double dps = double(Divides) / (double)fElapsedTime;

    swprintf(m_szTestStats, L"%i KTri/s, %i KVerts/s, %i KB/s index traffic, "
        L"%iKB/s [effective] vertex traffic, %i background thread loops/second", 
             (INT) (tps * 1000.0f), (INT) (sps * 1000.0f), 
             (INT) (ips * 1000.0f), (INT) (vps * 1000.0f),
             (INT) (dps));

    static DWORD count = 0;

    if (count++ == 0)
    {
        count = 0;
    
        DebugPrint("%i KTri/s, %i KVerts/s, %i KB/s index traffic, "
              "%iKB/s [effective] vertex traffic, %i K/s background thread loops\n", 
             (INT) (tps * 1000.0f), (INT) (sps * 1000.0f), 
             (INT) (ips * 1000.0f), (INT) (vps * 1000.0f),
             (INT) (dps * 1000.0f));
    }

	static bool isFirst = true;
	
	if (!isFirst)
	{
		m_dwAveCount++;
		m_fdAveTriPerSec += tps;
		m_fdMaxTriPerSec = max(tps, m_fdMaxTriPerSec);
		m_fdMinTriPerSec = min(tps, m_fdMinTriPerSec);
	}

	isFirst = false;

	m_dwTotalTimes = 0;
}

//=========================================================================
// initialize our materials
//=========================================================================

void BenMark::InitMaterials(D3DMATERIAL8 *pmatIn, D3DMATERIAL8 *pmatOut)
{
    // set material
    ZeroMemory(pmatOut, sizeof(D3DMATERIAL8) * cdwRibbonCount);
    for (DWORD i = 0; i < cdwRibbonCount; i++)
    {
        float r = 0.3f + 0.5f * float(rand()) / float(RAND_MAX);
        float g = 0.3f + 0.5f * float(rand()) / float(RAND_MAX);
        float b = 0.3f + 0.5f * float(rand()) / float(RAND_MAX);

        pmatOut[i].Diffuse.r  = r;
        pmatOut[i].Diffuse.g  = g;
        pmatOut[i].Diffuse.b  = b;
        pmatOut[i].Diffuse.a  = 1.0f;
        pmatOut[i].Ambient.r  = r * 0.3f;
        pmatOut[i].Ambient.g  = g * 0.3f;
        pmatOut[i].Ambient.b  = b * 0.3f;
        pmatOut[i].Ambient.a  = 1.0f;
    }

    // set material
    ZeroMemory(pmatIn, sizeof(D3DMATERIAL8));
    pmatIn->Diffuse.r  = 0.7f;
    pmatIn->Diffuse.g  = 0.3f;
    pmatIn->Diffuse.b  = 0.3f;
    pmatIn->Diffuse.a  = 0.7f;
    pmatIn->Ambient.r  = 0.3f;
    pmatIn->Ambient.g  = 0.1f;
    pmatIn->Ambient.b  = 0.1f;
    pmatIn->Ambient.a  = 1.0f;
}

//=========================================================================
// initialize our lights
//=========================================================================

void BenMark::InitLights()
{
    // setup lights
    float fIntensity = 1.0f /
        (m_bmxState.nDirectionalLights +
         m_bmxState.nPointLights +
         m_bmxState.nSpotLights);

    // disable all our existing lights
    while(m_nNumLights--)
        CheckHR(m_pDevice->LightEnable(m_nNumLights, FALSE));

    // get a count of the new dudes
    m_nNumLights =
        m_bmxState.nDirectionalLights +
        m_bmxState.nPointLights +
        m_bmxState.nSpotLights;

    DWORD dwIndex = 0;
    for (int nT = 0; nT < m_bmxState.nDirectionalLights; nT++)
    {
        D3DLIGHT8 lig;

        ZeroMemory(&lig, sizeof(lig));
        lig.Type        =  D3DLIGHT_DIRECTIONAL;
        lig.Diffuse.r   =  1.0f * fIntensity;
        lig.Diffuse.g   =  1.0f * fIntensity;
        lig.Diffuse.b   =  1.0f * fIntensity;
        lig.Direction.x =  0.2f;
        lig.Direction.y =  0.3f;
        lig.Direction.z = -0.8f;
        CheckHR(m_pDevice->SetLight(dwIndex, &lig));
        CheckHR(m_pDevice->LightEnable(dwIndex, TRUE));

        dwIndex++;
    }
    for (nT = 0; nT < m_bmxState.nPointLights; nT++)
    {
        D3DLIGHT8 lig;

        ZeroMemory(&lig, sizeof(lig));
        lig.Type         =  D3DLIGHT_POINT;
        lig.Diffuse.r    =  1.0f * fIntensity;
        lig.Diffuse.g    =  1.0f * fIntensity;
        lig.Diffuse.b    =  1.0f * fIntensity;
        lig.Position.x   =  0.0f;
        lig.Position.y   =  0.0f;
        lig.Position.z   =  5.0f;
        lig.Range        = 9999.0f;
        lig.Attenuation0 = 1.0f;
        CheckHR(m_pDevice->SetLight(dwIndex, &lig));
        CheckHR(m_pDevice->LightEnable(dwIndex, TRUE));

        dwIndex++;
    }
    for (nT = 0; nT < m_bmxState.nSpotLights; nT++)
    {
        D3DLIGHT8 lig;

        ZeroMemory(&lig, sizeof(lig));
        lig.Type         =  D3DLIGHT_SPOT;
        lig.Diffuse.r    =  1.0f * fIntensity;
        lig.Diffuse.g    =  1.0f * fIntensity;
        lig.Diffuse.b    =  1.0f * fIntensity;
        lig.Position.x   = -1.0f;
        lig.Position.y   = -5.0f;
        lig.Position.z   =  6.0f;
        lig.Direction.x  =  0.1f;
        lig.Direction.y  =  0.5f;
        lig.Direction.z  = -0.6f;
        lig.Range        = 999.0f;
        lig.Theta        = 0.1f;
        lig.Phi          = 0.5f;
        lig.Falloff      = 1.0f;
        lig.Attenuation0 = 1.0f;
        CheckHR(m_pDevice->SetLight(dwIndex, &lig));
        CheckHR(m_pDevice->LightEnable(dwIndex, TRUE));

        dwIndex++;
    }
}


//=========================================================================
// create a texture
//=========================================================================

IDirect3DTexture8 *BenMark::CreateTexture(DWORD dwWidth, DWORD dwHeight)
{
    IDirect3DTexture8 *pTexture = NULL;

    CheckHR(D3DXCreateTexture(m_pDevice, dwWidth, dwHeight, 1, 0, D3DFMT_A4R4G4B4, D3DPOOL_MANAGED, &pTexture));
    if(pTexture)
    {
        D3DLOCKED_RECT lockRect;

        HRESULT hr = pTexture->LockRect(0, &lockRect, NULL, 0);

        D3DSURFACE_DESC desc;
        pTexture->GetLevelDesc(0, &desc);

#ifdef XBOX
        void *pBits = (void *)LocalAlloc(0, dwWidth * dwHeight * 16);
        DWORD dwLine = (DWORD)pBits;
#else
        DWORD dwLine = (DWORD)lockRect.pBits;
#endif

        LONG lPitch = lockRect.Pitch;

        for (DWORD y = 0; y < dwHeight; y++)
        {
            DWORD dwAddr = dwLine;
            BOOL  by     = y & 1;
            for (DWORD x = 0; x < dwWidth; x++)
            {
                DWORD c = x + (y >> 5);

                c = (c | (c << 4) | (c << 8) | 0xf000);

                if(by)
                    c ^= 0x0777;

                *(WORD*)dwAddr = (WORD)c;
                dwAddr += 2;
            }
            dwLine += lPitch;
        }

#ifdef XBOX
        XGSwizzleRect(pBits, 
                      0,
                      NULL,
                      lockRect.pBits,
                      dwWidth,
                      dwHeight,
                      NULL, 
                      2);

         LocalFree(pBits);
#endif

        // Unlock the map so it can be used
        pTexture->UnlockRect(0);
   }

   return pTexture;
}

//=========================================================================
// Renders geometric primitive using Vertex Buffer.
//=========================================================================

void BenMark::DrawIndexedPrimitive
(
	UINT iIndex,
    D3DPRIMITIVETYPE dwPrimType, 
	DWORD PrimitiveCount
)
{
    CheckHR(m_pDevice->SetVertexShader(m_dwFVF));
    CheckHR(m_pDevice->SetStreamSource(0, m_pVBRibbon[iIndex], m_dwFVFSize));
    CheckHR(m_pDevice->SetIndices(m_pIndexBuffer, 0));

    CheckHR(m_pDevice->DrawIndexedPrimitive(
        dwPrimType,         // PrimitiveType
        0,                  // minIndex
        m_dwNumVertices,    // NumIndices
        0,                  // startIndex
        PrimitiveCount));   // PrimitiveCount
}

//=========================================================================
// Renders geometric primitive with data specified by a user memory pointer.
//=========================================================================

void BenMark::DrawIndexedPrimitiveUP
(
	UINT iIndex,
    D3DPRIMITIVETYPE dwPrimType, 
	DWORD PrimitiveCount
)
{
    CheckHR(m_pDevice->DrawIndexedPrimitiveUP(
        dwPrimType,             // Type
        0,                      // MinVertexIndex
        m_dwNumVertices,        // NumVertexIndices
        PrimitiveCount,         // primCount
        m_pwIndices,            // pIndexData
        D3DFMT_INDEX16,         // IndexDataFormat
        m_pVertices[iIndex],    // pVertexStreamZeroData
        m_dwFVFSize));          // VertexStreamZeroStride
}

//=========================================================================
// Renders geometric primitive using Vertex Buffer.
//=========================================================================

void BenMark::PrecompiledDraw
(
	UINT iIndex,
    D3DPRIMITIVETYPE dwPrimType, 
	DWORD PrimitiveCount
)
{
    CheckHR(m_pDevice->SetVertexShader(m_dwFVF));
    CheckHR(m_pDevice->SetStreamSource(0, m_pVBRibbon[iIndex], m_dwFVFSize));

#ifdef XBOX
    m_pDevice->RunPushBuffer(m_pPushBuffer, 0);
#endif
}

//=========================================================================
// initialize our VBs
//=========================================================================

void BenMark::InitVBs()
{
    // clean these guys up if they've already been inited
    delete[] m_pwIndices;
    m_pwIndices = NULL;

    SAFE_RELEASE(m_pIndexBuffer);
    SAFE_RELEASE(m_pVBRibbon[0]);
    SAFE_RELEASE(m_pVBRibbon[1]);

    if (m_bmxState.fPrecompile)
    {
        m_pfnDrawRibbon = BenMark::PrecompiledDraw;
    }
    else if (m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        m_pfnDrawRibbon = BenMark::DrawIndexedPrimitive;
    }
    else
    {
        m_pfnDrawRibbon = BenMark::DrawIndexedPrimitiveUP;
    }

    // create vertex buffer
    m_dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL;

    if(m_bmxState.cApplyTextures > 1)
        m_dwFVF |= D3DFVF_TEX2;
    else if(m_bmxState.cApplyTextures)
        m_dwFVF |= D3DFVF_TEX1;

    m_dwFVFSize = D3DXGetFVFVertexSize(m_dwFVF);

    m_dwNumVertices = (cdwSubsInLength + 1) * (cdwSubsInWidth + 1);
    UINT Length = m_dwNumVertices * m_dwFVFSize;

    // Default when running is to NOT use D3DVBCAPS_SYSTEMMEMORY
    // Using this flag will slow the app to about half the triangle rate.
#ifdef XBOX
    DWORD dwCaps = D3DUSAGE_WRITEONLY;
#else
    DWORD dwCaps = D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC;
#endif
    D3DPOOL dwPool = D3DPOOL_DEFAULT;

    float *pfVerticesO;
    float *pfVerticesI;

    // Create our vertex buffers if we're using DrawIndexedPrimitive.
    if(m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        CheckHR(m_pDevice->CreateVertexBuffer(Length, dwCaps, m_dwFVF, dwPool, &m_pVBRibbon[0]));
        CheckHR(m_pDevice->CreateVertexBuffer(Length, dwCaps, m_dwFVF, dwPool, &m_pVBRibbon[1]));

        CheckHR(m_pVBRibbon[0]->Lock(0, Length, (BYTE **)&pfVerticesO, 0));
        CheckHR(m_pVBRibbon[1]->Lock(0, Length, (BYTE **)&pfVerticesI, 0));
    }
    else
    {
        // skip the vertex buffers and just use alloc'd mem
        m_pVertices[0] = new BYTE[Length];
        pfVerticesO = (float *)m_pVertices[0];

        m_pVertices[1] = new BYTE[Length];
        pfVerticesI = (float *)m_pVertices[1];
    }

    // populate with vertices
    for (DWORD y = 0; y <= cdwSubsInLength; y++)
    {
        for (DWORD x = 0; x <= cdwSubsInWidth; x++)
        {
            // compute point
            float angle  = cfRibbonCurl * float(y) / float(cdwSubsInLength);
            float height = cfRibbonWidth * float(x) / float(cdwSubsInWidth)
                         + cfRibbonPitch * float(y) / float(cdwSubsInLength)
                         - 0.5f * cfRibbonPitch;
            float fcosangle = cosf(angle);
            float fsinangle = sinf(angle);

            // start
            D3DXVECTOR3 n(0, fcosangle, fsinangle);
            D3DXVECTOR3 p(height, cfRibbonRadius * fcosangle,
                cfRibbonRadius * fsinangle);

            // copy to vertex buffer
            *(D3DXVECTOR3 *)&pfVerticesO[0] = p;
            *(D3DXVECTOR3 *)&pfVerticesO[3] = n;
            pfVerticesO += 6;

            *(D3DXVECTOR3 *)&pfVerticesI[0] = p;
            *(D3DXVECTOR3 *)&pfVerticesI[3] = -n;
            pfVerticesI += 6;

            if(m_bmxState.cApplyTextures)
            {
                float tv = float(y) / float(cdwSubsInLength);
                float tu = float(x) / float(cdwSubsInWidth);

                *pfVerticesO++ = tu;
                *pfVerticesO++ = tv;

                *pfVerticesI++ = tu;
                *pfVerticesI++ = tv;

                if(m_bmxState.cApplyTextures > 1)
                {
                    // add second set of texture coords
                    *pfVerticesO++ = tu;
                    *pfVerticesO++ = tv;

                    *pfVerticesI++ = tu;
                    *pfVerticesI++ = tv;
                }
            }
        }
    }

    if(m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        CheckHR(m_pVBRibbon[0]->Unlock());
        CheckHR(m_pVBRibbon[1]->Unlock());
    }

    // setup indices
    m_dwIndexCount = 1 + cdwSubsInLength * (cdwSubsInWidth * 2 + 1);
    m_dwPrimType = m_bmxState.bUseTriList ? D3DPT_TRIANGLELIST : D3DPT_TRIANGLESTRIP;
    m_dwTriCount = (m_dwIndexCount - 2)  / (m_bmxState.bUseTriList ? 3 : 1);

    m_pwIndices = new WORD[m_dwIndexCount];
    WORD  *pwIndex  = m_pwIndices;
    DWORD dwCurrent = 0;

    pwIndex[0] = 0; pwIndex++;

    for (y = 0; y < cdwSubsInLength; y++)
    {
        if (dwCurrent > 0xffff)
        {
            DisplayError(L"Index out of range - reduce geometry complexity", 0);
        }

        pwIndex[0] = WORD(dwCurrent + (cdwSubsInWidth + 1));
        pwIndex++;
        dwCurrent++;

        for (DWORD x = 0; x < cdwSubsInWidth; x++)
        {
            pwIndex[0]  = WORD(dwCurrent);
            pwIndex[1]  = WORD(dwCurrent + (cdwSubsInWidth + 1));
            pwIndex    += 2;
            dwCurrent  ++;
        }

        dwCurrent += (cdwSubsInWidth + 1) - 1;
        y++;

        if (y < cdwSubsInLength)
        {
            pwIndex[0] = WORD(dwCurrent + (cdwSubsInWidth + 1));
            pwIndex++;
            dwCurrent--;

            for (DWORD x = 0; x < cdwSubsInWidth; x++)
            {
                pwIndex[0]  = WORD(dwCurrent);
                pwIndex[1]  = WORD(dwCurrent + (cdwSubsInWidth + 1));
                pwIndex+= 2;
                dwCurrent --;
            }

            dwCurrent += (cdwSubsInWidth + 1) + 1;
        }
    }

    // if we use tri lists, we convert the strip to independent triangles here
    if(m_bmxState.bUseTriList)
    {
        DWORD dwNewIndexCount = (m_dwIndexCount - 2) * 3;
        WORD *pwNewIndices    = new WORD[dwNewIndexCount];

        DWORD a = m_pwIndices[0];
        DWORD b = m_pwIndices[1];
        for (DWORD i = 2,j = 0; i < m_dwIndexCount; i++,j+=3)
        {
            DWORD c = m_pwIndices[i];
            pwNewIndices[j + 0] = (WORD)a;
            pwNewIndices[j + 1] = (WORD)b;
            pwNewIndices[j + 2] = (WORD)c;
            if (i & 1)
                b = c;
            else
                a = c;
        }

        // adopt new
        delete[] m_pwIndices;
        m_dwIndexCount = dwNewIndexCount;
        m_pwIndices    = pwNewIndices;
    }

#ifdef XBOX

    // Create our precompiled push buffers
    if (m_bmxState.fPrecompile)
    {
        CheckHR(m_pDevice->CreatePushBuffer(256*1024, FALSE, &m_pPushBuffer));
        CheckHR(m_pDevice->BeginPushBuffer(m_pPushBuffer));
        CheckHR(m_pDevice->DrawIndexedVertices(m_dwPrimType, D3DVERTEXCOUNT(m_dwPrimType, m_dwTriCount), m_pwIndices));
        CheckHR(m_pDevice->EndPushBuffer());
    }
    else 
     
#endif 

    // Create our index buffer if we're using DrawIndexedPrimitive.
    if (m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        CheckHR(m_pDevice->CreateIndexBuffer(m_dwIndexCount * sizeof(WORD),
            dwCaps, D3DFMT_INDEX16, dwPool, &m_pIndexBuffer));

        WORD *pVertexIndices;
        CheckHR(m_pIndexBuffer->Lock(0, m_dwIndexCount * sizeof(WORD),
            (BYTE**)&pVertexIndices, 0));

        for(DWORD i = 0; i < m_dwIndexCount; i++)
            pVertexIndices[i] = m_pwIndices[i];

        m_pIndexBuffer->Unlock();

        delete[] m_pwIndices;
        m_pwIndices = NULL;
    }

#ifdef XBOX
    
    if(m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        m_pVBRibbon[0]->MoveResourceMemory(D3DMEM_VIDEO);
        m_pVBRibbon[1]->MoveResourceMemory(D3DMEM_VIDEO);
    }

#endif XBOX
}

//=========================================================================
// Given a D3DFORMAT, return string description.
//=========================================================================

const WCHAR *SzFmtName(D3DFORMAT d3dfmt)
{
    #define XTAG(x) {x, L#x}
    static const struct FMTD3DFMT
    {
        D3DFORMAT d3dfmt;
        WCHAR *szName;
    } rgFmtD3dFmt[] =
    {
        XTAG(D3DFMT_X8R8G8B8),
        XTAG(D3DFMT_A1R5G5B5),
        XTAG(D3DFMT_A8R8G8B8),
        XTAG(D3DFMT_A4R4G4B4),
        XTAG(D3DFMT_R5G6B5),
        XTAG(D3DFMT_A1R5G5B5),

        XTAG(D3DFMT_UNKNOWN),
    };
    static const WCHAR szD3dUnkwn[] = L"D3DFMT_???";

    for(int i = 0; i < sizeof(rgFmtD3dFmt) / sizeof(rgFmtD3dFmt[0]); i++)
    {
        if(d3dfmt == rgFmtD3dFmt[i].d3dfmt)
            return rgFmtD3dFmt[i].szName;
    }

    return szD3dUnkwn;
}

//=========================================================================
// Display the various options we we're started with.
//=========================================================================

void BenMark::ShowInfo(int iY, int cHeight)
{
    WCHAR str[128];
    D3DCOLOR colFore = D3DCOLOR_XRGB(255, 255, 0);

	iY += cHeight;

    _snwprintf(str, sizeof(str), L"Xbox BenMark");

    DisplayText(str, iY, colFore);
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Adapter: %S",
        m_Adapter.AdapterIdentifier.Description);
    DisplayText(str, iY, colFore);
    iY += cHeight;

    DWORD HighPart = m_Adapter.AdapterIdentifier.DriverVersion.HighPart;
    DWORD LowPart = m_Adapter.AdapterIdentifier.DriverVersion.LowPart;
    _snwprintf(str, sizeof(str), L"Driver: %S (%d.%d.%04d.%04d)",
        m_Adapter.AdapterIdentifier.Driver,
        HIWORD(HighPart), LOWORD(HighPart),
        HIWORD(LowPart), LOWORD(LowPart));
    DisplayText(str, iY, colFore);
    iY += cHeight * 2;

    _snwprintf(str, sizeof(str), L"Primitive Type: '%s'  Textures: %d",
        m_bmxState.bUseTriList ? L"trilist" : L"tristrip",
        m_bmxState.cApplyTextures);
    DisplayText(str, iY, colFore);
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Dirlights: %d  Spotlights: %d  Pointlights: %d",
        m_bmxState.nDirectionalLights,
        m_bmxState.nSpotLights,
        m_bmxState.nPointLights);
    DisplayText(str, iY, colFore);
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Z-Buffer: %s  Specular Lighting: %s  Local Viewer: %s",
        m_bmxState.bZenable ? L"true" : L"false",
        m_bmxState.bSpecularenable ? L"true" : L"false",
        m_bmxState.bLocalviewer ? L"true" : L"false");
    DisplayText(str, iY, colFore);
    iY += cHeight;

    static const WCHAR *rgszFillMode[] =
        { L"D3DFILL_POINT", L"D3DFILL_WIREFRAME", L"D3DFILL_SOLID" };
    static const WCHAR *rgszDrawFunc[] =
        { L"DrawIndexedPrimitive", L"DrawIndexedPrimitiveUP" };

    DWORD iFillMode = 0;
    switch (m_bmxState.iFillMode)
    {
    case D3DFILL_POINT: iFillMode = 0; break;
    case D3DFILL_WIREFRAME: iFillMode = 1; break;
    case D3DFILL_SOLID: iFillMode = 2; break;
    }

    _snwprintf(str, sizeof(str), L"Rendering: %s  Precompiled: %s  Fillmode: %s",
        rgszDrawFunc[m_bmxState.iDrawFunc], 
        m_bmxState.fPrecompile ? L"true" : L"false",
        rgszFillMode[iFillMode]);
    DisplayText(str, iY, colFore);
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Triangles: %d  Indices: %d  FVFSize: %d",
        m_dwTriCount,
        m_dwIndexCount,
        m_dwFVFSize);
    DisplayText(str, iY, colFore);
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Maximum possible background loops per second: %i", (int)m_iMaxDivides);
	DisplayText(str, iY, colFore);
	iY += cHeight * 2;

	if (m_fdMaxTriPerSec != 0)
	{
		_snwprintf(str, sizeof(str), L"AveTriPerSec(%d): %i  MaxTriPerSec: %i  MinTriPerSec: %i",
			m_dwAveCount,
			(INT) ((m_fdAveTriPerSec / m_dwAveCount) * 1000.0f),
			(INT) (m_fdMaxTriPerSec * 1000.0f),
			(INT) (m_fdMinTriPerSec * 1000.0f));
		DisplayText(str, iY, colFore);
		iY += cHeight;
	}

}

//=========================================================================
// Set up the menus.
//=========================================================================

unsigned BenMark::GetMenus(ScenarioMenu **rgMenus)
{
	rgMenus[0] = &s_Button7Menu;
	rgMenus[1] = &s_Button8Menu;
	rgMenus[2] = &s_Button9Menu;

	return 3;
}

//=========================================================================
// Handle keyboard input.
//=========================================================================

void BenMark::ProcessKeyPress(DWORD iMenu, DWORD iKey)
{
	switch(iMenu)
	{
	case MT_BUTTON7:
		switch(iKey)
		{
		case 0:
			m_bmxState.bSpecularenable = !m_bmxState.bSpecularenable;
			break;
		case 1:
			m_bmxState.bZenable = !m_bmxState.bZenable;
			break;
		case 2:
			m_bmxState.bLocalviewer = !m_bmxState.bLocalviewer;
			break;

		default:
			return;
		}
		break;

	case MT_BUTTON8:
		switch(iKey)
		{
		case 0:
			m_bmxState.nDirectionalLights++;
			break;

		case 1:
			m_bmxState.nSpotLights++;
			break;

		case 2:
			m_bmxState.nPointLights++;
			break;

		case 3:
			if (m_bmxState.nDirectionalLights)
			{
				m_bmxState.nDirectionalLights--;
			}
			else
			{
				return;
			}
			break;

		case 4:
			if (m_bmxState.nSpotLights)
			{
				m_bmxState.nSpotLights--;
			}
			else
			{
				return;
			}
			break;

		case 5:
			if (m_bmxState.nPointLights)
			{
				m_bmxState.nPointLights--;
			}
			else
			{
				return;
			}
			break;
		}

		InitLights();

		return;

	case MT_BUTTON9:
		switch(iKey)
		{
		case 0:
			m_bmxState.cApplyTextures = (m_bmxState.cApplyTextures + 1) % 3;
			break;
		case 1:
			m_bmxState.bUseTriList = !m_bmxState.bUseTriList;
			break;

		case 2:
			m_bmxState.iFillMode = D3DFILLMODE((m_bmxState.iFillMode + 1) % D3DFILL_SOLID + 1);
			break;

		case 3:
			m_bmxState.iDrawFunc = (DRAWFUNC)((m_bmxState.iDrawFunc + 1) % DRAWMAX);
			break;

#ifdef XBOX
        case 4:
            m_bmxState.fPrecompile = !m_bmxState.fPrecompile;
            break;
#endif 

		default:
			return;
		}
		break;

	default:
		return;
	}

	Change3DEnvironment();
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\all.h ===
/***************************************************************************
 *
 *  Copyright (C) 2000 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       all.h
 *  Content:    all utility interface
 *  History:
 *   Date       By       Reason
 *   ====       ==       ======
 *  04/20/01    jgould Created to test Xbox all
 *
 ****************************************************************************/

#pragma once

#include <xtl.h>
#include <xdbg.h>
#include <xlog.h>
#include <macros.h>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\inc\sigs.h ===
// IDirect3D8 methods
SIG_MACRO(D3D8_AddRef,                          _OUT(_DATA))
SIG_MACRO(D3D8_Release,                         _OUT(_DATA))
SIG_MACRO(D3D8_GetAdapterCount,                 _OUT(_DATA))
SIG_MACRO(D3D8_GetAdapterDisplayMode,           _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(D3D8_GetAdapterIdentifier,            _OUT(_DATA) _IN(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(D3D8_GetAdapterModeCount,             _OUT(_DATA) _IN(_DATA))
SIG_MACRO(D3D8_GetAdapterMonitor,               _OUT(_DATA) _IN(_DATA))
SIG_MACRO(D3D8_GetDeviceCaps,                   _OUT(_DATA) _IN(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(D3D8_EnumAdapterModes,                _OUT(_DATA) _IN(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(D3D8_RegisterSoftwareDevice,          _OUT(_DATA) _IN(_DATA)) // REVIEW: If these tests are ported to a test platform supporting RegisterSoftwareDevice, the initialization function pointer needs to be translated
SIG_MACRO(D3D8_CheckDeviceFormat,               _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(D3D8_CheckDeviceMultiSampleType,      _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(D3D8_CheckDeviceType,                 _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(D3D8_CheckDepthStencilMatch,          _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(D3D8_CreateDevice,                    _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _PIN(_DATA) _ADD(_ADDRESS))

// IDirect3DDevice8 methods
SIG_MACRO(DEV8_AddRef,                          _OUT(_DATA))
SIG_MACRO(DEV8_Release,                         _OUT(_DATA))
SIG_MACRO(DEV8_CreateAdditionalSwapChain,       _OUT(_DATA) _PIN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateCubeTexture,               _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateDepthStencilSurface,       _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateImageSurface,              _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateIndexBuffer,               _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateRenderTarget,              _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateTexture,                   _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateVertexBuffer,              _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_CreateVolumeTexture,             _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_ApplyStateBlock,                 _OUT(_DATA) _IN(_SBLOCK))
SIG_MACRO(DEV8_BeginStateBlock,                 _OUT(_DATA))
SIG_MACRO(DEV8_EndStateBlock,                   _OUT(_DATA) _ADD(_SBLOCK))
SIG_MACRO(DEV8_CreateStateBlock,                _OUT(_DATA) _IN(_DATA) _ADD(_SBLOCK))
SIG_MACRO(DEV8_DeleteStateBlock,                _OUT(_DATA) _DEL(_SBLOCK))
SIG_MACRO(DEV8_CaptureStateBlock,               _OUT(_DATA) _IN(_SBLOCK))
SIG_MACRO(DEV8_GetClipStatus,                   _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_SetClipStatus,                   _OUT(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_GetRenderState,                  _OUT(_DATA) _IN(_DATA) _OUT(_DATA))
SIG_MACRO(DEV8_SetRenderState,                  _OUT(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_GetRenderTarget,                 _OUT(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_SetRenderTarget,                 _OUT(_DATA) _IN(_ADDRESS) _IN(_ADDRESS))
SIG_MACRO(DEV8_GetTransform,                    _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_SetTransform,                    _OUT(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_MultiplyTransform,               _OUT(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_Clear,                           _OUT(_DATA) _IN(_DATA) _PIN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_GetViewport,                     _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_SetViewport,                     _OUT(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_GetClipPlane,                    _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_SetClipPlane,                    _OUT(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_GetLight,                        _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_SetLight,                        _OUT(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_LightEnable,                     _OUT(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_GetLightEnable,                  _OUT(_DATA) _IN(_DATA) _OUT(_DATA))
SIG_MACRO(DEV8_GetMaterial,                     _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_SetMaterial,                     _OUT(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_GetTexture,                      _OUT(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_SetTexture,                      _OUT(_DATA) _IN(_DATA) _IN(_ADDRESS))
SIG_MACRO(DEV8_GetTextureStageState,            _OUT(_DATA) _IN(_DATA) _IN(_DATA) _OUT(_DATA))
SIG_MACRO(DEV8_SetTextureStageState,            _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_UpdateTexture,                   _OUT(_DATA) _IN(_ADDRESS) _IN(_ADDRESS))
SIG_MACRO(DEV8_ValidateDevice,                  _OUT(_DATA) _OUT(_DATA))
SIG_MACRO(DEV8_GetCurrentTexturePalette,        _OUT(_DATA) _OUT(_DATA))
SIG_MACRO(DEV8_SetCurrentTexturePalette,        _OUT(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_GetPaletteEntries,               _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_SetPaletteEntries,               _OUT(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_CreateVertexShader,              _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _ADD(_VSHADER) _IN(_DATA))
SIG_MACRO(DEV8_DeleteVertexShader,              _OUT(_DATA) _DEL(_VSHADER))
SIG_MACRO(DEV8_GetVertexShader,                 _OUT(_DATA) _ADD(_VSHADER))
SIG_MACRO(DEV8_SetVertexShader,                 _OUT(_DATA) _IN(_VSHADER))
SIG_MACRO(DEV8_GetVertexShaderConstant,         _OUT(_DATA) _IN(_DATA) _POUT(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_SetVertexShaderConstant,         _OUT(_DATA) _IN(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_GetVertexShaderDeclaration,      _OUT(_DATA) _IN(_VSHADER) _POUT(_DATA) _BI(_DATA))
SIG_MACRO(DEV8_GetVertexShaderFunction,         _OUT(_DATA) _IN(_DATA) _POUT(_DATA) _BI(_DATA))
SIG_MACRO(DEV8_CreatePixelShader,               _OUT(_DATA) _PIN(_DATA) _ADD(_PSHADER))
SIG_MACRO(DEV8_DeletePixelShader,               _OUT(_DATA) _DEL(_PSHADER))
SIG_MACRO(DEV8_GetPixelShader,                  _OUT(_DATA) _ADD(_PSHADER))
SIG_MACRO(DEV8_SetPixelShader,                  _OUT(_DATA) _IN(_PSHADER))
SIG_MACRO(DEV8_GetPixelShaderConstant,          _OUT(_DATA) _IN(_DATA) _POUT(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_SetPixelShaderConstant,          _OUT(_DATA) _IN(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_GetPixelShaderFunction,          _OUT(_DATA) _IN(_DATA) _POUT(_DATA) _BI(_DATA))
SIG_MACRO(DEV8_Present,                         _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_Reset,                           _OUT(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_BeginScene,                      _OUT(_DATA))
SIG_MACRO(DEV8_EndScene,                        _OUT(_DATA))
SIG_MACRO(DEV8_DrawIndexedPrimitive,            _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_DrawIndexedPrimitiveUP,          _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_DrawPrimitive,                   _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_DrawPrimitiveUP,                 _OUT(_DATA) _IN(_DATA) _IN(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_DeletePatch,                     _OUT(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_DrawRectPatch,                   _OUT(_DATA) _IN(_DATA) _BI(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_DrawTriPatch,                    _OUT(_DATA) _IN(_DATA) _BI(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_GetStreamSource,                 _OUT(_DATA) _IN(_DATA) _ADD(_ADDRESS) _OUT(_DATA))
SIG_MACRO(DEV8_SetStreamSource,                 _OUT(_DATA) _IN(_DATA) _IN(_ADDRESS) _IN(_DATA))
SIG_MACRO(DEV8_GetIndices,                      _OUT(_DATA) _ADD(_ADDRESS) _OUT(_DATA))
SIG_MACRO(DEV8_SetIndices,                      _OUT(_DATA) _IN(_ADDRESS) _IN(_DATA))
SIG_MACRO(DEV8_GetAvailableTextureMem,          _OUT(_DATA))
SIG_MACRO(DEV8_GetCreationParameters,           _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_GetDeviceCaps,                   _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_GetDirect3D,                     _OUT(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_GetInfo,                         _OUT(_DATA) _IN(_DATA) _POUT(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_GetRasterStatus,                 _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_GetDisplayMode,                  _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(DEV8_GetBackBuffer,                   _OUT(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_GetDepthStencilSurface,          _OUT(_DATA) _ADD(_ADDRESS))
SIG_MACRO(DEV8_GetGammaRamp,                    _POUT(_DATA))
SIG_MACRO(DEV8_SetGammaRamp,                    _IN(_DATA) _PIN(_DATA))
SIG_MACRO(DEV8_CopyRects,                       _OUT(_DATA) _IN(_ADDRESS) _PIN(_DATA) _IN(_DATA) _IN(_ADDRESS) _PIN(_DATA))
SIG_MACRO(DEV8_GetFrontBuffer,                  _OUT(_DATA) _IN(_ADDRESS))
SIG_MACRO(DEV8_ProcessVertices,                 _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_DATA) _IN(_ADDRESS) _IN(_DATA))
SIG_MACRO(DEV8_ResourceManagerDiscardBytes,     _OUT(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_TestCooperativeLevel,            _OUT(_DATA))
SIG_MACRO(DEV8_SetCursorPosition,               _IN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(DEV8_SetCursorProperties,             _OUT(_DATA) _IN(_DATA) _IN(_DATA) _IN(_ADDRESS))
SIG_MACRO(DEV8_ShowCursor,                      _OUT(_DATA) _IN(_DATA))

// IDirect3DSurface8
SIG_MACRO(SUR8_AddRef,                          _OUT(_DATA))
SIG_MACRO(SUR8_Release,                         _OUT(_DATA))
SIG_MACRO(SUR8_GetContainer,                    _OUT(_DATA) _PIN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(SUR8_GetDevice,                       _OUT(_DATA) _ADD(_ADDRESS))
SIG_MACRO(SUR8_GetDesc,                         _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(SUR8_LockRect,                        _OUT(_DATA) _POUT(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(SUR8_UnlockRect,                      _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(SUR8_GetPrivateData,                  _OUT(_DATA) _PIN(_DATA) _POUT(_DATA) _BI(_DATA)) 
SIG_MACRO(SUR8_SetPrivateData,                  _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(SUR8_FreePrivateData,                 _OUT(_DATA) _PIN(_DATA))

// IDirect3DVolume8
SIG_MACRO(VOL8_AddRef,                          _OUT(_DATA))
SIG_MACRO(VOL8_Release,                         _OUT(_DATA))
SIG_MACRO(VOL8_GetContainer,                    _OUT(_DATA) _PIN(_DATA) _ADD(_ADDRESS))
SIG_MACRO(VOL8_GetDevice,                       _OUT(_DATA) _ADD(_ADDRESS))
SIG_MACRO(VOL8_GetDesc,                         _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(VOL8_LockBox,                         _OUT(_DATA) _POUT(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(VOL8_UnlockBox,                       _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(VOL8_GetPrivateData,                  _OUT(_DATA) _PIN(_DATA) _POUT(_DATA) _BI(_DATA)) 
SIG_MACRO(VOL8_SetPrivateData,                  _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(VOL8_FreePrivateData,                 _OUT(_DATA) _PIN(_DATA))

// IDirect3DResource8
SIG_MACRO(RES8_AddRef,                          _OUT(_DATA))
SIG_MACRO(RES8_Release,                         _OUT(_DATA))
SIG_MACRO(RES8_GetType,                         _OUT(_DATA))
SIG_MACRO(RES8_GetDevice,                       _OUT(_DATA) _ADD(_ADDRESS))
SIG_MACRO(RES8_GetPrivateData,                  _OUT(_DATA) _PIN(_DATA) _POUT(_DATA) _BI(_DATA)) 
SIG_MACRO(RES8_SetPrivateData,                  _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _IN(_DATA))
SIG_MACRO(RES8_FreePrivateData,                 _OUT(_DATA) _PIN(_DATA))
SIG_MACRO(RES8_GetPriority,                     _OUT(_DATA))
SIG_MACRO(RES8_SetPriority,                     _OUT(_DATA) _IN(_DATA))
SIG_MACRO(RES8_PreLoad,                         _VOID)

// IDirect3DBaseTexture8
SIG_MACRO(BTX8_GetLevelCount,                   _OUT(_DATA))
SIG_MACRO(BTX8_GetLOD,                          _OUT(_DATA))
SIG_MACRO(BTX8_SetLOD,                          _OUT(_DATA) _IN(_DATA))

// IDirect3DTexture8
SIG_MACRO(TEX8_GetLevelDesc,                    _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(TEX8_LockRect,                        _OUT(_DATA) _IN(_DATA) _POUT(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(TEX8_UnlockRect,                      _OUT(_DATA) _IN(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(TEX8_AddDirtyRect,                    _OUT(_DATA) _PIN(_DATA))
SIG_MACRO(TEX8_GetSurfaceLevel,                 _OUT(_DATA) _IN(_DATA) _ADD(_ADDRESS))

// IDirect3DCubeTexture8
SIG_MACRO(CTX8_GetLevelDesc,                    _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(CTX8_LockRect,                        _OUT(_DATA) _IN(_DATA) _IN(_DATA) _POUT(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(CTX8_UnlockRect,                      _OUT(_DATA) _IN(_DATA) _IN(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(CTX8_AddDirtyRect,                    _OUT(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(CTX8_GetCubeMapSurface,               _OUT(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))

// IDirect3DVolumeTexture8
SIG_MACRO(VTX8_GetLevelDesc,                    _OUT(_DATA) _IN(_DATA) _POUT(_DATA))
SIG_MACRO(VTX8_LockBox,                         _OUT(_DATA) _IN(_DATA) _POUT(_DATA) _PIN(_DATA) _IN(_DATA))
SIG_MACRO(VTX8_UnlockBox,                       _OUT(_DATA) _IN(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(VTX8_AddDirtyBox,                     _OUT(_DATA) _PIN(_DATA))
SIG_MACRO(VTX8_GetVolumeLevel,                  _OUT(_DATA) _IN(_DATA) _ADD(_ADDRESS))

// IDirect3DVertexBuffer8
SIG_MACRO(VRB8_GetDesc,                         _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(VRB8_Lock,                            _OUT(_DATA) _IN(_DATA) _IN(_DATA) _OUT(_DATA) _IN(_DATA))
SIG_MACRO(VRB8_Unlock,                          _OUT(_DATA) _IN(_DATA) _IN(_DATA) _PIN(_DATA))

// IDirect3DIndexBuffer8
SIG_MACRO(IXB8_GetDesc,                         _OUT(_DATA) _POUT(_DATA))
SIG_MACRO(IXB8_Lock,                            _OUT(_DATA) _IN(_DATA) _IN(_DATA) _OUT(_DATA) _IN(_DATA))
SIG_MACRO(IXB8_Unlock,                          _OUT(_DATA) _IN(_DATA) _IN(_DATA) _PIN(_DATA))

// IDirect3DSwapChain8
SIG_MACRO(SWC8_AddRef,                          _OUT(_DATA))
SIG_MACRO(SWC8_Release,                         _OUT(_DATA))
SIG_MACRO(SWC8_Present,                         _OUT(_DATA) _PIN(_DATA) _PIN(_DATA) _IN(_DATA) _PIN(_DATA))
SIG_MACRO(SWC8_GetBackBuffer,                   _OUT(_DATA) _IN(_DATA) _IN(_DATA) _ADD(_ADDRESS))

#undef SIG_MACRO
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\d3dapp.cpp ===
//-----------------------------------------------------------------------------
// File: D3DApp.cpp
//
// Desc: Application class for the Direct3D samples framework library.
//
// Copyright (c) 1998-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#define INITGUID

#include <stdio.h>
#ifdef XBOX
#include <xtl.h>
#else
#include <windows.h>
#endif

#if defined(PCBUILD)
#include <d3d8.h>
#include <d3dx8core.h>
#include <dinput.h>
#endif 

#include "D3DApp.h"
#include "DXUtil.h"

#ifndef XBOX

#define INITGUID
#include <objbase.h>
#include <rmxfguid.h>
#endif

// Define PCBUILD if building to run on a PC - we need to create a window.

static ScenarioMenu s_MainMenu = 
{
	MT_STARTBUTTON1,
	L"Main Menu",
	{
		L"Display statistics",
		L"Run a 20-second test",
		L"Pause",
		L"Step",
		L"Quit",
		NULL
	},
	5
};

static ScenarioMenu s_ToggleMenu = 
{
	MT_STARTBUTTON2,
	L"Main Toggle Menu",
	{
		L"Cycle screen mode",
		L"Cycle antialias mode",
		NULL,
		NULL,
		NULL,
		NULL
	},
	2
};

static const WCHAR *s_rgszMenuButtons[] =
{
	L"Left top trigger",
	L"Right top trigger",
	L"Left underside trigger",
	L"Right underside trigger",
	L"Top start button",
	L"Bottom start button",
};

//-----------------------------------------------------------------------------
// Class constructor.
//-----------------------------------------------------------------------------

CD3DApplication::CD3DApplication()
{
    m_pD3D              = NULL;
    m_pDevice           = NULL;
    m_hWnd              = NULL;
    m_bActive           = FALSE;
    m_bReady            = FALSE;

#if defined(PCBUILD)
	m_pDirectInput		= NULL;
	m_pKeyboard			= NULL;
	m_pGamepad          = NULL;
#else
    m_hDevice           = 0;
#endif 

	m_fShowHelp         = FALSE;
	m_fShowStats		= TRUE;
	m_iActiveMenu		= MT_NONE;
	m_iActiveKey		= -1;

	ZeroMemory(m_rgpMenus, sizeof(m_rgpMenus));

	m_cMenus			= 0;
	m_dwSpaceHeight		= 0;
	m_dwHelpWidth		= 0;	
	m_dwColumn1X		= 0;	
	m_dwColumn2X		= 0;

    m_bFrameMoving      = TRUE;
    m_bSingleStep       = FALSE;
	m_bRunFullTest      = FALSE;

    m_fFPS              = 0.0f;
    m_strFrameStats[0]  = 0;
	m_szTestStats[0]    = 0;

    m_bUseDepthBuffer   = FALSE;
    m_DepthBufferFormat = D3DFMT_D16;
	m_dwCurrentMode     = 0;

	m_dwSampleMask		= 0;
	m_iSampleType		= (D3DMULTISAMPLE_TYPE)0;

	m_dwFrames			= 0;
}

#if PCBUILD

//-----------------------------------------------------------------------------
// Dummy message handler for the window that the PC requires us to create.
//-----------------------------------------------------------------------------

LRESULT CALLBACK WndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    return DefWindowProc( hWnd, uMsg, wParam, lParam );
}

//-----------------------------------------------------------------------------
// Create the dummy window.
//-----------------------------------------------------------------------------

static HWND GetDummyWindow(HINSTANCE hInstance)
{
	HWND hWnd;

    // Register the windows class
    WNDCLASS wndClass = { 
						  CS_CLASSDC, 
		                  WndProc, 
						  0, 
						  0, 
						  hInstance,
                          NULL,
                          NULL, 
                          (HBRUSH)GetStockObject(WHITE_BRUSH),
                          NULL, 
						  L"Dummy Window" 
						};

    RegisterClass( &wndClass );

    // Create the render window
    hWnd = CreateWindow(L"Dummy Window", 
		                NULL,
                        WS_MINIMIZE,
                        0, 
						0,
                        1,
						1, 
						0,
                        NULL, 
                        hInstance, 
						0L);

    ShowWindow(hWnd, SW_SHOWNORMAL);
    ShowCursor(false);

	return hWnd;
}

#else !PCBUILD

//-----------------------------------------------------------------------------
// Stub so we won't try to create a window on the non-pc build.
//-----------------------------------------------------------------------------

inline HWND GetDummyWindow(HINSTANCE) { return NULL; }

#endif !PCBUILD

//-----------------------------------------------------------------------------
// Do the initial preparations for running the scenario.
//-----------------------------------------------------------------------------

void CD3DApplication::Create(HINSTANCE hInstance)
{

#if defined(XBOX)

#endif

    // Create the Direct3D object
    m_pD3D = Direct3DCreate8(D3D_SDK_VERSION);

    if( m_pD3D == NULL )
    {
		DisplayError(L"FATAL: Unable to create Direct3D.", 0);
    }

    // Build a list of Direct3D adapters, modes and devices. The ConfirmDevice() 
	// callback is used to confirm that only devices that meet the app's 
	// requirements are considered.
	//
    BuildDeviceList();

#if defined(PCBUILD)

	// Create the DirectInput object.
	CheckHR(DirectInput8Create(hInstance, 
		                       DIRECTINPUT_VERSION, 
							   IID_IDirectInput8, 
							   (void **)&m_pDirectInput, 
							   NULL));

	// Hook up to the keyboard and the gamepad if they're available.
	GetInputDevices();

#else
    //Initialize core peripheral port support
    XInitDevices(0,NULL);

    if(XDEVICE_PORT0_MASK&XGetDevices(XDEVICE_TYPE_GAMEPAD))
    {
        m_hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL);
    }

#endif

    // Get the windows class.
	m_hWnd = GetDummyWindow(hInstance);

    // Initialize the app's custom scene stuff
    OneTimeSceneInit();

    // Initialize the 3D environment for the app
    Initialize3DEnvironment();

	// Prepare the help information.
	InitializeHelpInformation();

    // Setup the app so it can support single-stepping
	DXUtil_Timer::Reset();

    // The app is ready to go
    m_bReady = TRUE;
}

//-----------------------------------------------------------------------------
// Callback function for sorting display modes.
//-----------------------------------------------------------------------------

int SortModesCallback( const VOID* arg1, const VOID* arg2 )
{
    D3DDISPLAYMODE* p1 = (D3DDISPLAYMODE*)arg1;
    D3DDISPLAYMODE* p2 = (D3DDISPLAYMODE*)arg2;

    if( p1->Format > p2->Format )   return -1;
    if( p1->Format < p2->Format )   return +1;
    if( p1->Width  < p2->Width )    return -1;
    if( p1->Width  > p2->Width )    return +1;
    if( p1->Height < p2->Height )   return -1;
    if( p1->Height > p2->Height )   return +1;

    return 0;
}

//-----------------------------------------------------------------------------
// Gather information about the adapter and what modes it supports.  This
// method assumes that we only have one adapter and that is supports the
// modes an capacities that we need.
//
// The method returns 'true' if it succeeds.
//-----------------------------------------------------------------------------

void CD3DApplication::BuildDeviceList()
{	
	// We only support one adapter.
	const unsigned iAdapter = 0;

	if (m_pD3D->GetAdapterCount() != 1)
	{
		DisplayError(L"FATAL: Multiple adapters found, only one adapter is supported.", 0);
	}

    // Get the adapter attributes
    CheckHR(m_pD3D->GetAdapterIdentifier(iAdapter, 0L, &m_Adapter.AdapterIdentifier));

    // Enumerate display modes
    D3DDISPLAYMODE modes[100];
    D3DFORMAT      formats[20];
    DWORD dwNumFormats      = 0;
    DWORD dwNumModes        = 0;
    DWORD dwNumAdapterModes = m_pD3D->GetAdapterModeCount(iAdapter);

    // Add the current desktop format to list of formats
    D3DDISPLAYMODE DesktopMode;
    CheckHR(m_pD3D->GetAdapterDisplayMode(iAdapter, &DesktopMode));
    if (DesktopMode.Format != 0)
    {
        formats[dwNumFormats++] = DesktopMode.Format;
    }

    for (UINT iMode = 0; iMode < dwNumAdapterModes; iMode++)
    {
        // Get the display mode attributes
        D3DDISPLAYMODE DisplayMode;

        CheckHR(m_pD3D->EnumAdapterModes(iAdapter, iMode, &DisplayMode));

        // Filter out unknown modes
        if (DisplayMode.Format == D3DFMT_UNKNOWN)
		{
            continue;
		}

        // Filter out low-resolution modes
        if (DisplayMode.Width  < 640 || DisplayMode.Height < 400) 
		{
            continue;
		}

        // Check if the mode already exists (to filter out refresh rates)
        for (DWORD m = 0; m < dwNumModes; m++)
        {
            if ((modes[m].Width  == DisplayMode.Width ) &&
                (modes[m].Height == DisplayMode.Height) &&
                (modes[m].Format == DisplayMode.Format)) 
			{
                break;
			}
        }

        // If we found a new mode, add it to the list
        if (m == dwNumModes)
        {
            modes[dwNumModes].Width       = DisplayMode.Width;
            modes[dwNumModes].Height      = DisplayMode.Height;
            modes[dwNumModes].Format      = DisplayMode.Format;
            modes[dwNumModes].RefreshRate = 0;
            dwNumModes++;

            // Check if the mode's format already exists
            for (DWORD f = 0; f < dwNumFormats; f++)
            {
                if (DisplayMode.Format == formats[f])
				{
                    break;
				}
            }

            // If the format is new, add it to the list
            if (f == dwNumFormats)
			{
                formats[dwNumFormats++] = DisplayMode.Format;
			}
        }
    }

    // Sort the list of display modes (by format, then width, then height)

    // Get the device attributes
    CheckHR(m_pD3D->GetDeviceCaps(iAdapter, D3DDEVTYPE_HAL, &m_Adapter.Caps));

    // Call the app's ConfirmDevice() callback to see if the device
    // caps and the enumerated formats meet the app's requirements.
	//
    BOOL  bFormatConfirmed[20];
    DWORD dwBehavior[20];

    for (DWORD f = 0; f < dwNumFormats; f++)
    {
		HRESULT hr;

        bFormatConfirmed[f] = FALSE;

        hr = m_pD3D->CheckDeviceFormat(iAdapter, 
			                           D3DDEVTYPE_HAL, 
                                       formats[f], 
									   D3DUSAGE_RENDERTARGET, 
                                       D3DRTYPE_SURFACE, 
									   formats[f]);

		if (FAILED(hr))
		{
            continue;
		}

        // Confirm the device for HW vertex processing
        if (m_Adapter.Caps.DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
        {
            dwBehavior[f] = D3DCREATE_HARDWARE_VERTEXPROCESSING;

            if (ConfirmDevice(&m_Adapter.Caps, dwBehavior[f], formats[f]))
			{
                bFormatConfirmed[f] = TRUE;
			}
        }

        // Confirm the device for SW vertex processing
        if (FALSE == bFormatConfirmed[f])
        {
            dwBehavior[f] = D3DCREATE_SOFTWARE_VERTEXPROCESSING;

            if (ConfirmDevice(&m_Adapter.Caps, dwBehavior[f], formats[f]))
			{
                bFormatConfirmed[f] = TRUE;
			}
        }
    }

    // Add all enumerated display modes with confirmed formats to the
    // device's list of valid modes
	//
    for (DWORD m = 0; m < dwNumModes; m++)
    {
        for (DWORD f = 0; f < dwNumFormats; f++)
        {
            if (modes[m].Format == formats[f])
            {
                if (bFormatConfirmed[f] == TRUE)
                {
                    // Add this mode to the device's list of valid modes
                    m_Adapter.modes[m_Adapter.dwNumModes].Width      = modes[m].Width;
                    m_Adapter.modes[m_Adapter.dwNumModes].Height     = modes[m].Height;
                    m_Adapter.modes[m_Adapter.dwNumModes].Format     = modes[m].Format;
                    m_Adapter.modes[m_Adapter.dwNumModes].dwBehavior = dwBehavior[f];
                    m_Adapter.dwNumModes++;
                }
            }
        }
    }

    // Select 640x480, 16-bit mode for default
    for (m = 0; m < m_Adapter.dwNumModes; m++)
    {
        if (m_Adapter.modes[m].Width==640 && 
			m_Adapter.modes[m].Height==480 
#ifdef XBOX
			 && m_Adapter.modes[m].Format == D3DFMT_LIN_R5G6B5
#endif
            )
        {
            m_dwCurrentMode = m;
            break;
        }
    }

	// Generate an error if we didn't find the default mode.
	if (m == m_Adapter.dwNumModes)
	{
		DisplayError(L"FATAL: Unable to obtain 640x480x16 mode.", 0);
	}
}

#if defined(PCBUILD)

//-----------------------------------------------------------------------------
// Callback to enumerate the devices.
//-----------------------------------------------------------------------------

BOOL _stdcall CALLBACK InputEnumCallback(const DIDEVICEINSTANCE *pdi, void *pvRef) 
{ 
	DIDEVICEINSTANCE *rgdi = (DIDEVICEINSTANCE *)pvRef;

	if (GET_DIDEVICE_TYPE(pdi->dwDevType) == DI8DEVTYPE_KEYBOARD)
	{
		// Only 'see' the first one.
		if (!rgdi[0].dwDevType)
		{
			rgdi[0] = *pdi;
		}
	}

	else if (GET_DIDEVICE_TYPE(pdi->dwDevType) == DI8DEVTYPE_JOYSTICK)
	{
		// Only 'see' the first one.
		if (!rgdi[1].dwDevType)
		{
			rgdi[1] = *pdi;
		}
	}

	if (rgdi[0].dwDevType && rgdi[1].dwDevType)
	{
		return DIENUM_STOP; 
	}
	else
	{
		return DIENUM_CONTINUE; 
	}
}

#endif

//-----------------------------------------------------------------------------
// Hook up to the keyboard and the gamepad if they're available.  If there
// aren't any devices then the scenario cannot be controlled and will 
// run forever.
//-----------------------------------------------------------------------------

#if defined(PCBUILD)

void CD3DApplication::GetInputDevices()
{

	DIDEVICEINSTANCE rgdi[2];

	// Zero the array we're going to fill in the enumeration.
	ZeroMemory(rgdi, sizeof(rgdi));

	// Enumerate all connected devices.
	CheckHR(m_pDirectInput->EnumDevices(DI8DEVCLASS_ALL, 
					                    InputEnumCallback, 
										(void *)&rgdi, 
										DIEDFL_ATTACHEDONLY));	

	// Initialize the keyboard device, if installed.
	if (rgdi[0].dwDevType)
	{
		CheckHR(m_pDirectInput->CreateDevice(rgdi[0].guidInstance, &m_pKeyboard, NULL));

		CheckHR(m_pKeyboard->SetDataFormat(&c_dfDIKeyboard))
		CheckHR(m_pKeyboard->Acquire());
	}

	// Initialize the gamepad device, if installed.
	if (rgdi[1].dwDevType)
	{
		CheckHR(m_pDirectInput->CreateDevice(rgdi[1].guidInstance, &m_pGamepad, NULL));

		// What should I set the format to?
		CheckHR(m_pGamepad->SetDataFormat(&c_dfDIJoystick ))
		CheckHR(m_pGamepad->Acquire());
	}

}

#endif

//-----------------------------------------------------------------------------
// Create the rendering device and set up the back buffers.
//-----------------------------------------------------------------------------

void CD3DApplication::Initialize3DEnvironment()
{
    Adapter::Mode *pModeInfo = &m_Adapter.modes[m_dwCurrentMode];

    // Set up the presentation parameters
    ZeroMemory(&m_Presentation, sizeof(m_Presentation));

    switch(pModeInfo->Format)
    {
#ifdef XBOX
    case D3DFMT_LIN_A8R8G8B8:
    case D3DFMT_LIN_X8R8G8B8:
#endif
    case D3DFMT_A8R8G8B8:
    case D3DFMT_X8R8G8B8:
        m_DepthBufferFormat = D3DFMT_D24S8;
        break;

#ifdef XBOX
    case D3DFMT_LIN_R5G6B5:
    case D3DFMT_LIN_X1R5G5B5:
#endif
    case D3DFMT_R5G6B5:
    case D3DFMT_X1R5G5B5:
        m_DepthBufferFormat = D3DFMT_D16;
        break;
    }

    m_Presentation.Windowed               = FALSE;
    m_Presentation.BackBufferCount        = 2;
    m_Presentation.MultiSampleType        = m_iSampleType;
    m_Presentation.SwapEffect             = D3DSWAPEFFECT_DISCARD;
    m_Presentation.EnableAutoDepthStencil = m_bUseDepthBuffer;
    m_Presentation.AutoDepthStencilFormat = m_DepthBufferFormat;
    m_Presentation.hDeviceWindow          = m_hWnd;
    m_Presentation.BackBufferWidth        = pModeInfo->Width;
    m_Presentation.BackBufferHeight       = pModeInfo->Height;
    m_Presentation.BackBufferFormat       = pModeInfo->Format;
    m_Presentation.Flags                  = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
    m_Presentation.FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;

    // Create the device
    CheckHR(m_pD3D->CreateDevice(0, 
		                     D3DDEVTYPE_HAL, 
                             m_hWnd, 
						     pModeInfo->dwBehavior, 
							 &m_Presentation, 
                             &m_pDevice));

    // Store device Caps
    CheckHR(m_pDevice->GetDeviceCaps(&m_Caps));

	// Figure out the FSAA modes that are supported by the device.
	m_dwSampleMask = 0;
	m_iSampleType = (D3DMULTISAMPLE_TYPE)0;

	for (unsigned i = 2; i < 32; i++)
	{
		HRESULT hr = m_pD3D->CheckDeviceMultiSampleType(0, 
			                                            D3DDEVTYPE_HAL, 
												        pModeInfo->Format, 
														FALSE, 
														(D3DMULTISAMPLE_TYPE)i);

		if (SUCCEEDED(hr))
		{
            m_dwSampleMask |= 1 << i;
		}
	}

    // Store render target surface descriptor

    CheckHR(m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &m_pBackBuffer));

    m_pBackBuffer->GetDesc(&m_BackBufferDesc);

    // Initialize the app's device-dependant objects
	InitDeviceObjects();
    RestoreDeviceObjects();

	m_bActive = TRUE;
}

//-----------------------------------------------------------------------------
// Helper to draw text on the screen.
//-----------------------------------------------------------------------------
void CD3DApplication::DisplayText(const WCHAR *sz, int iY, DWORD dwColor)
{
    m_Font.DrawText(m_pBackBuffer, sz, 0, iY, DRAWTEXT_TRANSPARENTBKGND, dwColor, 0);
}

//-----------------------------------------------------------------------------
// Handles driver, device, and/or mode changes for the app.
//-----------------------------------------------------------------------------

void CD3DApplication::Change3DEnvironment()
{
    // Release all scene objects that will be re-created for the new device
	InvalidateDeviceObjects();
    DeleteDeviceObjects();

    if (m_pBackBuffer)
	{
		m_pBackBuffer->Release();
		m_pBackBuffer = NULL;
	}

    // Release display objects, so a new device can be created
	//
	// UNDONE andrewso: Make sure this is a safe assumption.
	//
    if (m_pDevice->Release() > 0)
    {
		DisplayError(L"FATAL: Device still has an outstanding reference.", 0);
    }

	// Just to be safe.
	m_pDevice = NULL;

    // Inform the display class of the driver change. It will internally
    // re-create valid surfaces, a d3ddevice, etc.
	//
    Initialize3DEnvironment();

    // If the app is paused, trigger the rendering of the current frame
    if (FALSE == m_bFrameMoving)
    {
        m_bSingleStep = TRUE;

		DXUtil_Timer::Start();
		DXUtil_Timer::Stop();
    }
}

//-----------------------------------------------------------------------------
// Handle regaining the device.
//-----------------------------------------------------------------------------

void CD3DApplication::Resize3DEnvironment()
{
    // Release all vidmem objects
	InvalidateDeviceObjects();

    // Resize the device
    CheckHR(m_pDevice->Reset(&m_Presentation));

    // Store render target surface desc
    LPDIRECT3DSURFACE8 pBackBuffer;

    CheckHR(m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pBackBuffer));

    pBackBuffer->GetDesc(&m_BackBufferDesc);
    pBackBuffer->Release();

    // Initialize the app's device-dependant objects
    RestoreDeviceObjects();

    // If the app is paused, trigger the rendering of the current frame
    if (FALSE == m_bFrameMoving)
    {
        m_bSingleStep = TRUE;

		DXUtil_Timer::Start();
		DXUtil_Timer::Stop();
    }
}

//-----------------------------------------------------------------------------
// Cleanup scene objects
//-----------------------------------------------------------------------------

void CD3DApplication::Cleanup3DEnvironment()
{
    m_bActive = FALSE;
    m_bReady  = FALSE;

    if (m_pBackBuffer)
	{
		m_pBackBuffer->Release();
		m_pBackBuffer = NULL;
	}

    if (m_pDevice)
    {
        InvalidateDeviceObjects();
        DeleteDeviceObjects();

        m_pDevice->Release();
        m_pD3D->Release();
        
        m_pDevice = NULL;
        m_pD3D = NULL;
    }

#if defined(PCBUILD)
	if (m_pKeyboard)
	{
		m_pKeyboard->Release();
		m_pKeyboard = NULL;
	}

	if (m_pGamepad)
	{
		m_pGamepad->Release();
		m_pGamepad = NULL;
	}

	if (m_pDirectInput)
	{
		m_pDirectInput->Release();
		m_pDirectInput = NULL;
	}
#endif

    FinalCleanup();
}

//-----------------------------------------------------------------------------
// Run the scenario.
//-----------------------------------------------------------------------------

void CD3DApplication::Run()
{
	do
	{
		// Run a 'test'.  This disables everything, resets the stats,
		// runs the test for about 5 seconds, pauses and shows
		// the stats from the result.
		//
		if (m_bRunFullTest)
		{
			// Turn off everything.
			m_bFrameMoving = TRUE;
			m_bSingleStep = FALSE;
			m_fShowHelp = FALSE;
			m_fShowStats = FALSE;
			
			// Clear the stats.  This won't clear any 'lifetime' stats.
			UpdateAllStats();

			// Reset the timer and run for 5 seconds.
			DXUtil_Timer::Start();
			DXUtil_Timer::Reset();

			do
			{
				Render3DEnvironment();
			}
			while (m_fTime < 20.0f);

			// Update the stats.
			UpdateAllStats();

			// Pause.
			m_bFrameMoving = FALSE;
			DXUtil_Timer::Stop();

			// Show the stats.
			m_fShowStats = TRUE;

			// Don't do this agian.
			m_bRunFullTest = FALSE;
		}

        // Render a frame.
        if (m_bActive && m_bReady)
        {
            Render3DEnvironment();
        }
	}
	while(ProcessInput());
}

//-----------------------------------------------------------------------------
// Draws the scene.
//-----------------------------------------------------------------------------

void CD3DApplication::Render3DEnvironment()
{       
    // Get the app's time, in seconds.
    static float fLastAppTime = 0.0f;

    float fAppTime        = DXUtil_Timer::GetAppTime();
    float fElapsedAppTime = fAppTime - fLastAppTime;
    fLastAppTime          = fAppTime;

    // FrameMove (animate) the scene
    if (m_bFrameMoving || m_bSingleStep)
    {
        // Store the time for the app
        m_fTime        = fAppTime;
        m_fElapsedTime = fElapsedAppTime;

        // Frame move the scene
        FrameMove();

        m_bSingleStep = FALSE;
    }

    // Render the scene as normal
    Render();

	if (m_fShowStats)
	{
		int iY = 0;

		if (m_strFrameStats[0])
		{
			DisplayText(m_strFrameStats, 0, 0xffffff00);
			iY += m_dwSpaceHeight;
		}

		if (m_szTestStats[0])
		{
			DisplayText(m_szTestStats, iY, 0xffffff00);
			iY += m_dwSpaceHeight;
		}

		ShowInfo(iY, m_dwSpaceHeight);
	}

	if (m_fShowHelp)
	{
		ShowHelp(m_pBackBuffer);
	}

	// Keep track of the frame rate.
	m_dwFrames++;

	// Only update the stats if the scene is moving.
	if (m_fShowStats && m_bFrameMoving)
    {
		UpdateAllStats();
    }

    // Show the frame on the primary surface.
    CheckHR(m_pDevice->Present(NULL, NULL, NULL, NULL));
}

//-----------------------------------------------------------------------------
// Gets a string for an antialias mode.
//-----------------------------------------------------------------------------

static WCHAR *AntialiasModeName(D3DMULTISAMPLE_TYPE iType)
{
	switch(iType)
	{
    case D3DMULTISAMPLE_NONE:
		return L"D3DMULTISAMPLE_NONE";

	default:
		return L"unknown mode";
	}
}

//-----------------------------------------------------------------------------
// Update and reset all of the statistics.
//-----------------------------------------------------------------------------

void CD3DApplication::UpdateAllStats()
{
    static float fLastTime = 0.0f;

    float fTime = DXUtil_Timer::GetAbsoluteTime();

    // Update the scene stats once per second
    if (fTime - fLastTime > 1.0f)
    {
        m_fFPS     = m_dwFrames / (fTime - fLastTime);

        swprintf(m_strFrameStats, 
			     L"%.2f fps (%dx%dx%d) antialiasmode: %s", 
				 m_fFPS,
                 m_BackBufferDesc.Width, 
				 m_BackBufferDesc.Height, 
#ifdef XBOX
                 m_BackBufferDesc.Format == D3DFMT_LIN_X8R8G8B8 ? 32 : 16,
#else // XBOX
                 16,
#endif // XBOX
				 m_dwSampleMask ? AntialiasModeName(m_iSampleType) : L"not supported");

		// Let the subclass update its stats.
		UpdateStats(fTime - fLastTime);

		// Reset.
        fLastTime  = fTime;
        m_dwFrames = 0L;
    }
}

//-----------------------------------------------------------------------------
// Do all input processing.
//-----------------------------------------------------------------------------

bool CD3DApplication::ProcessInput()
{
	bool retval = true;

	DWORD rgActiveMenu[MT_MAX];
	BOOL rgKeyDown[6];

	unsigned cMenus = 0;

	DWORD iActiveMenu;
	DWORD iActiveKey;

	ZeroMemory(rgKeyDown, sizeof(rgKeyDown));
    ZeroMemory(rgActiveMenu, sizeof(rgActiveMenu));

	//
	// Get the state.
	//

#if defined(PCBUILD)

	// Get the state from the keyboard.
	if (m_pKeyboard)
	{
		BYTE rgKeys[256];

		CheckHR(m_pKeyboard->GetDeviceState(sizeof(rgKeys), &rgKeys));

		// Check the menu keys.
		if (rgKeys[DIK_LSHIFT] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON7;
		}

		if (rgKeys[DIK_RSHIFT] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON8;
		}
		
		if (rgKeys[DIK_LCONTROL] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON9;
		}
		
		if (rgKeys[DIK_RCONTROL] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON10;
		}
		
		if ((rgKeys[DIK_LMENU] & 0x80))
		{
			rgActiveMenu[cMenus++] = MT_STARTBUTTON1;
		}
	
		if ((rgKeys[DIK_RMENU] & 0x80))
		{
			rgActiveMenu[cMenus++] = MT_STARTBUTTON2;
		}

		// Check the action keys.
		if (rgKeys[DIK_A] & 0x80)
		{
			rgKeyDown[0] = TRUE;
		}

		if (rgKeys[DIK_B] & 0x80)
		{
			rgKeyDown[1] = TRUE;
		}

		if (rgKeys[DIK_C] & 0x80)
		{
			rgKeyDown[2] = TRUE;
		}

		if (rgKeys[DIK_D] & 0x80)
		{
			rgKeyDown[3] = TRUE;
		}

		if (rgKeys[DIK_E] & 0x80)
		{
			rgKeyDown[4] = TRUE;
		}

		if (rgKeys[DIK_F] & 0x80)
		{
			rgKeyDown[5] = TRUE;
		}

		// A couple of cheaters.  F1 brings up the main help menu
		// and ESC quits the app.
		//
		if (rgKeys[DIK_F1] & 0x80)
		{
			// This forces the main help menu.
			cMenus = 2;
		}

		if (rgKeys[DIK_ESCAPE] & 0x80)
		{
			// This forces a 'quit'.
			cMenus = 1;
			rgActiveMenu[0] = MT_STARTBUTTON1;

			ZeroMemory(rgKeyDown, sizeof(rgKeyDown));
			rgKeyDown[4] = TRUE;
		}
	}

	// Get the state from the gamepad.
	if (m_pGamepad)
	{
		DIJOYSTATE state;

		CheckHR(m_pGamepad->GetDeviceState(sizeof(state), &state));

		// Check the menu keys.
		if (state.rgbButtons[6] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON7;
		}

		if (state.rgbButtons[7] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON8;
		}
		
		if (state.rgbButtons[8] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON9;
		}
		
		if (state.rgbButtons[9] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON10;
		}
		
		if (state.rgbButtons[10] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_STARTBUTTON1;
		}
	
		if (state.rgbButtons[11] & 0x80)
		{
			rgActiveMenu[cMenus++] = MT_STARTBUTTON2;
		}

		// Check the action keys.
		for (unsigned i = 0; i < 6; i++)
		{
			if (state.rgbButtons[i] & 0x80)
			{
				rgKeyDown[i] = TRUE;
			}
		}
	}

#else // !PCBUILD

    //
    //  Check to see if a port 0 gamepad has come or gone.
    //
    DWORD dwInsertions, dwRemovals;
    if(XGetDeviceChanges(XDEVICE_TYPE_GAMEPAD, &dwInsertions, &dwRemovals))
    {
        if(dwRemovals&XDEVICE_PORT0_MASK)
        {
            if(m_hDevice)
            {
                XInputClose(m_hDevice);
                m_hDevice = NULL;
            }
        }
        if(dwInsertions&XDEVICE_PORT0_MASK)
        {
            m_hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL);
        }
    }

    // If we have a device, get its state.
    if (m_hDevice)
    {
        XINPUT_STATE InputState;

        XInputGetState(m_hDevice, &InputState);

		// Check the menu keys.
		if (InputState.Gamepad.bAnalogButtons[6])
		{
			rgActiveMenu[cMenus++] = MT_BUTTON7;
		}

		if (InputState.Gamepad.bAnalogButtons[7])
		{
			rgActiveMenu[cMenus++] = MT_BUTTON8;
		}
		
		if (InputState.Gamepad.wButtons & XINPUT_GAMEPAD_LEFT_THUMB)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON9;
		}
		
		if (InputState.Gamepad.wButtons & XINPUT_GAMEPAD_RIGHT_THUMB)
		{
			rgActiveMenu[cMenus++] = MT_BUTTON10;
		}
		
		if (InputState.Gamepad.wButtons & XINPUT_GAMEPAD_START)
		{
			rgActiveMenu[cMenus++] = MT_STARTBUTTON1;
		}
	
		if (InputState.Gamepad.wButtons & XINPUT_GAMEPAD_BACK)
		{
			rgActiveMenu[cMenus++] = MT_STARTBUTTON2;
		}

		// Check the action keys.
		for (unsigned i = 0; i < 6; i++)
		{
			if (InputState.Gamepad.bAnalogButtons[i])
			{
				rgKeyDown[i] = TRUE;
			}
		}
    }


#endif // !PCBUILD

	//
	// Process the inputs.
	//

	// We need to show help if at least one menu button is
	// pressed.
	//
	m_fShowHelp = cMenus;

	// Select the active menu.
	if (cMenus != 1 || !m_rgpMenus[rgActiveMenu[0]])
	{
		iActiveMenu = MT_NONE;
	}
	else
	{
		iActiveMenu = rgActiveMenu[0];
	}

	// Find the active key, if any (set to -1 if there is no key).  
	// Don't set the key if there are multiple menu buttons
	// pressed.
	//
	iActiveKey = -1;

	if (cMenus < 2) 
	{
		for (unsigned i = 0; i < 6; i++)
		{
			if (rgKeyDown[i])
			{
				if (iActiveKey == -1)
				{
					iActiveKey = i;
				}
				else
				{
					iActiveKey = -1;
					break;
				}
			}
		}
	}

	// Part of the above ESC hack, if ESC was pressed and is
	// no more, then remember the old menu.
	//
	if (iActiveKey == -1 && m_iActiveKey == 4 && m_iActiveMenu == MT_STARTBUTTON1)
	{
		iActiveMenu = m_iActiveMenu;;
	}

	// Figure out which key was actually pressed and
	// process it.
	//
	if (iActiveKey == -1 && m_iActiveKey != -1)
	{
		if (iActiveMenu == MT_STARTBUTTON1)
		{
			switch(m_iActiveKey)
			{
			// Display stats.
			case 0:
				m_fShowStats = !m_fShowStats;
				break;

			// Run a full test.
			case 1:
				m_bRunFullTest = TRUE;
				break;

			// Pause the test.
			case 2:
				// Toggle frame movement
				m_bFrameMoving = !m_bFrameMoving;

				if (m_bFrameMoving)
				{
					DXUtil_Timer::Start();
				}
				else
				{
					DXUtil_Timer::Stop();
				}
				break;

			// Single-step.
			case 3:
				// Single-step frame movement
				if (FALSE == m_bFrameMoving)
				{
					DXUtil_Timer::Advance();
				}

				DXUtil_Timer::Stop();
				m_bFrameMoving = FALSE;
				m_bSingleStep  = TRUE;

				break;

			// Quit?
			case 4:
				retval = false;
				break;
			}
		}	
		else if (iActiveMenu == MT_STARTBUTTON2)
		{
			switch(m_iActiveKey)
			{
			// Cycle the screen mode.
			case 0:
				m_dwCurrentMode = (m_dwCurrentMode + 1) % m_Adapter.dwNumModes;

				Change3DEnvironment();
				break;

			// Cycle to the next antialias mode.
			case 1:
				{
					unsigned i, iNewSampleType;

					// If no bits are set,then iNewSampleType will wind
					// up with the same value as m_iSampleType;
					//
					for (i = 1; i <= 32; i++)
					{
						iNewSampleType = (m_iSampleType + i) % 32;

						if (m_dwSampleMask & (1 << iNewSampleType ))
						{
							break;
						}
					}
							
					if (m_iSampleType != (D3DMULTISAMPLE_TYPE)iNewSampleType)
					{
						m_iSampleType = (D3DMULTISAMPLE_TYPE)iNewSampleType;						

						Change3DEnvironment();
					}
				}
				break;
			}
		}
		else
		{
			// Send it to the host.
			ProcessKeyPress(m_iActiveMenu, m_iActiveKey);
		}
	}

	// Save the existing state.
	m_iActiveMenu = iActiveMenu;
	m_iActiveKey = iActiveKey;

	return retval;
}

//-----------------------------------------------------------------------------
// Set up the per-app help information.  This pre-computes everything needed
// to draw the help box.
//-----------------------------------------------------------------------------

void CD3DApplication::InitializeHelpInformation()
{
	const unsigned cVertical = 3;		// Spaces for the vertial border
	const unsigned cBetween = 2;        // Space between the two columns.

	unsigned i;

	// Set up the default menu.
	m_rgpMenus[MT_STARTBUTTON1] = &s_MainMenu;
	m_rgpMenus[MT_STARTBUTTON2] = &s_ToggleMenu;
	m_cMenus = 2;

	// Collect menus from our subclass.
	ScenarioMenu *rgOtherMenus[10];
	unsigned iMenu, cMenus;

	cMenus = GetMenus(rgOtherMenus);

	for (iMenu = 0; iMenu < cMenus; iMenu++)
	{
		m_rgpMenus[rgOtherMenus[iMenu]->m_MenuType] = rgOtherMenus[iMenu];
	}

	m_cMenus += cMenus;

	DWORD dwSpaceWidth;
	DWORD dwColumn1Size = 0, dwColumn2Size = 0;

	// Use a big character (such as 'O') to get the height/width that
	// we'll use to create spaces.
	//
    m_Font.GetTextStringLength(&dwSpaceWidth, &m_dwSpaceHeight, L"O");

	// Decide on the size of the menu buttons...these are in column 1
	for (i = 0; i < sizeof(s_rgszMenuButtons) / sizeof(WCHAR *); i++)
	{
		DWORD dwWidth;

        m_Font.GetTextStringLength(&dwWidth, NULL, s_rgszMenuButtons[i]);

		if (dwWidth > dwColumn1Size)
		{
			dwColumn1Size = dwWidth;
		}
	}

	// Figure out the size of the menu names and menu items.
	for (i = 0; i < MT_MAX; i++)
	{
		DWORD dwWidth;

		if (m_rgpMenus[i])
		{
			// The first menu does not have a name.
			if (i != 0)
			{
                m_Font.GetTextStringLength(&dwWidth, NULL, m_rgpMenus[i]->m_szMenuName);

				if (dwWidth > dwColumn2Size)
				{
					dwColumn2Size = dwWidth;
				}
			}

			for (unsigned iItem = 0; iItem < 6; iItem++)
			{
				if (m_rgpMenus[i]->m_szActions[iItem])
				{
                    m_Font.GetTextStringLength(&dwWidth, NULL, m_rgpMenus[i]->m_szActions[iItem]);

					if (dwWidth > dwColumn2Size)
					{
						dwColumn2Size = dwWidth;
					}
				}
			}
		}
	}

	// Compute the values of each column and the total width of the box.  The height
	// can't be calculated until we know which menu is being displayed.
	//
	m_dwColumn1X = dwSpaceWidth * cVertical;
	m_dwColumn2X = m_dwColumn1X + dwColumn1Size + dwSpaceWidth * cBetween;
	m_dwHelpWidth = m_dwColumn2X + dwColumn2Size + dwSpaceWidth * cVertical;
}

//-----------------------------------------------------------------------------
// Draw a help screen on the display.  Make it look pretty.
//-----------------------------------------------------------------------------

void CD3DApplication::ShowHelp(IDirect3DSurface8 *pSurface)
{		
	const unsigned cHorizontal = 2;		// Spaces for the horizontal border

	// Which menu is being displayed?
	const ScenarioMenu *pMenu = m_rgpMenus[m_iActiveMenu];

	// How big is the box?
	unsigned dwHelpHeight = m_dwSpaceHeight * cHorizontal * 2 + m_cMenus * m_dwSpaceHeight;
	
	if (pMenu)
	{
		dwHelpHeight += m_dwSpaceHeight + pMenu->m_cActions * m_dwSpaceHeight;
	}

	// Is the box too big?
	DWORD dwBoxX, dwBoxY;

	// Box too big?
	if (m_Adapter.modes[m_dwCurrentMode].Height <= dwHelpHeight || 
		m_Adapter.modes[m_dwCurrentMode].Width <= m_dwHelpWidth)
	{
		DisplayError(L"FATAL: Help box is too big for this display mode.", 0);
	}

	// Center the box.
	dwBoxX = (m_Adapter.modes[m_dwCurrentMode].Width  - m_dwHelpWidth) / 2;
	dwBoxY = (m_Adapter.modes[m_dwCurrentMode].Height - dwHelpHeight) / 2;

	// Clear the box.
	D3DRECT rect = { dwBoxX, dwBoxY, dwBoxX + m_dwHelpWidth, dwBoxY + dwHelpHeight };
	CheckHR(m_pDevice->Clear(1, &rect, D3DCLEAR_TARGET, 0x00000000, 0.0f, 0L));

	// Paint the text.
	DWORD dwY = dwBoxY + m_dwSpaceHeight * cHorizontal;
	unsigned i, c;

	// Start with the menus.
	c = MT_MAX;

	for (i = 1; i < c; i++)
	{
		if (m_rgpMenus[i])
		{
            m_Font.DrawText(m_pBackBuffer, s_rgszMenuButtons[i - 1], m_dwColumn1X + dwBoxX, dwY, DRAWTEXT_TRANSPARENTBKGND, 0x00FFFFFF, 0);
            m_Font.DrawText(m_pBackBuffer, m_rgpMenus[i]->m_szMenuName, m_dwColumn2X + dwBoxX, dwY, DRAWTEXT_TRANSPARENTBKGND, 0x00FFFFFF, 0);

			dwY += m_dwSpaceHeight;
		}
	}

	// Menu items.
	if (pMenu)
	{
		dwY += m_dwSpaceHeight;

		for (i = 0; i < 6; i++)
		{
			if (pMenu->m_szActions[i])
			{
				WCHAR sz[2] = L"A";
				sz[0] += (WCHAR) i;

                m_Font.DrawText(m_pBackBuffer, sz, m_dwColumn1X + dwBoxX, dwY, DRAWTEXT_TRANSPARENTBKGND, 0x00FFFFFF, 0);
                m_Font.DrawText(m_pBackBuffer, pMenu->m_szActions[i], m_dwColumn2X + dwBoxX, dwY, DRAWTEXT_TRANSPARENTBKGND, 0x00FFFFFF, 0);

				dwY += m_dwSpaceHeight;
			}
		}
	}
}

//=========================================================================
// Map our 'new' directly to LocalAlloc
//=========================================================================

static void* __cdecl operator new(size_t size)
{
    return LocalAlloc(0, size);
}

//=========================================================================
// Map our 'delete' directly to LocalFree   
//=========================================================================

static VOID __cdecl operator delete(VOID* alloc)
{
    LocalFree(alloc);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\d3dfile.cpp ===
//-----------------------------------------------------------------------------
// File: D3DFile.cpp
//
// Desc: Support code for loading DirectX .X files.
//
// Copyright (c) 1997-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#define STRICT

#include <stdio.h>
#ifdef XBOX
#include <xtl.h>
#else
#include <windows.h>
#include <d3d8.h>
#include <d3dx8core.h>
#endif

#include <rmxfguid.h>
#include <rmxftmpl.h>

#include <dxfile.h>
#include "D3DFile.h"
#include "DXUtil.h"

//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DMesh::CD3DMesh( CHAR* strName )
{
    strcpy( m_strName, strName );
    m_pSysMemMesh        = NULL;
    m_pLocalMesh         = NULL;
    m_dwNumMaterials     = 0L;
    m_pMaterials         = NULL;
    m_pTextures          = NULL;
    m_bUseMaterials      = TRUE;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DMesh::~CD3DMesh()
{
    Destroy();
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DMesh::Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strFilename )
{
    CHAR        strPath[MAX_PATH];

    LPD3DXBUFFER pMtrlBuffer = NULL;

    // Find the path for the file
	DXUtil_FindMediaFile( strPath, strFilename );

    // Load the mesh

    CheckHR( D3DXLoadMeshFromX(strPath, D3DXMESH_SYSTEMMEM, 
                               pd3dDevice, NULL, &pMtrlBuffer, 
                               &m_dwNumMaterials, &m_pSysMemMesh ) );

    // Get material info for the mesh
    // Get the array of materials out of the buffer
    if( pMtrlBuffer && m_dwNumMaterials > 0 )
    {
        // Allocate memory for the materials and textures
        D3DXMATERIAL* d3dxMtrls = (D3DXMATERIAL*)pMtrlBuffer->GetBufferPointer();
        m_pMaterials = new D3DMATERIAL8[m_dwNumMaterials];
        m_pTextures  = new LPDIRECT3DTEXTURE8[m_dwNumMaterials];

        // Copy each material and create it's texture
        for( DWORD i=0; i<m_dwNumMaterials; i++ )
        {
			// Copy the material
            m_pMaterials[i]         = d3dxMtrls[i].MatD3D;
            m_pMaterials[i].Ambient = m_pMaterials[i].Diffuse;
			m_pTextures[i]          = NULL;

            // Create a texture
            if( d3dxMtrls[i].pTextureFilename )
            {
                CHAR strTexture[MAX_PATH];

				DXUtil_FindMediaFile( strTexture, d3dxMtrls[i].pTextureFilename );

                if( FAILED( D3DXCreateTextureFromFileA(pd3dDevice, 
													   strTexture, 
					                                   &m_pTextures[i] ) ) )
					m_pTextures[i] = NULL;
            }
        }
    }

    SAFE_RELEASE( pMtrlBuffer );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DMesh::Create( LPDIRECT3DDEVICE8 pd3dDevice,
                          LPDIRECTXFILEDATA pFileData )
{
    LPD3DXBUFFER pMtrlBuffer = NULL;

    // Load the mesh from the DXFILEDATA object
    CheckHR( D3DXLoadMeshFromXof( pFileData, D3DXMESH_SYSTEMMEM, pd3dDevice,
                              NULL, &pMtrlBuffer, &m_dwNumMaterials,
                              &m_pSysMemMesh ));

    // Get material info for the mesh
    // Get the array of materials out of the buffer
    if( pMtrlBuffer && m_dwNumMaterials > 0 )
    {
        // Allocate memory for the materials and textures
        D3DXMATERIAL* d3dxMtrls = (D3DXMATERIAL*)pMtrlBuffer->GetBufferPointer();
        m_pMaterials = new D3DMATERIAL8[m_dwNumMaterials];
        m_pTextures  = new LPDIRECT3DTEXTURE8[m_dwNumMaterials];

        // Copy each material and create it's texture
        for( DWORD i=0; i<m_dwNumMaterials; i++ )
        {
			// Copy the material
            m_pMaterials[i]         = d3dxMtrls[i].MatD3D;
            m_pMaterials[i].Ambient = m_pMaterials[i].Diffuse;
			m_pTextures[i]          = NULL;

            // Create a texture
            if( d3dxMtrls[i].pTextureFilename )
            {
                CHAR strTexture[MAX_PATH];

				DXUtil_FindMediaFile( strTexture, d3dxMtrls[i].pTextureFilename );

                if( FAILED( D3DXCreateTextureFromFileA(pd3dDevice, strTexture, 
					                                   &m_pTextures[i] ) ) )
					m_pTextures[i] = NULL;
            }
        }
    }

    SAFE_RELEASE( pMtrlBuffer );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DMesh::SetFVF( LPDIRECT3DDEVICE8 pd3dDevice, DWORD dwFVF )
{
    LPD3DXMESH pTempSysMemMesh = NULL;
    LPD3DXMESH pTempLocalMesh  = NULL;

    if( m_pSysMemMesh )
    {
        CheckHR( m_pSysMemMesh->CloneMeshFVF( D3DXMESH_SYSTEMMEM, dwFVF,
                                                 pd3dDevice, &pTempSysMemMesh ) );

    }
    if( m_pLocalMesh )
    {
        CheckHR( m_pLocalMesh->CloneMeshFVF( 0L, dwFVF, pd3dDevice, &pTempLocalMesh ) );
    }

    SAFE_RELEASE( m_pSysMemMesh );
    SAFE_RELEASE( m_pLocalMesh );

    if( pTempSysMemMesh ) m_pSysMemMesh = pTempSysMemMesh;
    if( pTempLocalMesh )  m_pLocalMesh  = pTempLocalMesh;

    // Compute normals in case the meshes have them
    if( m_pSysMemMesh )
        D3DXComputeNormals( m_pSysMemMesh );
    if( m_pLocalMesh )
        D3DXComputeNormals( m_pLocalMesh );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DMesh::RestoreDeviceObjects( LPDIRECT3DDEVICE8 pd3dDevice )
{
    // Make a local memory version of the mesh. Note: because we are passing in
    // no flags, the default behavior is to clone into local memory.
    CheckHR( m_pSysMemMesh->CloneMeshFVF( 0L, m_pSysMemMesh->GetFVF(),
                                             pd3dDevice, &m_pLocalMesh ) );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DMesh::InvalidateDeviceObjects()
{
    SAFE_RELEASE( m_pLocalMesh );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DMesh::Destroy()
{
    for( UINT i=0; i<m_dwNumMaterials; i++ )
        SAFE_RELEASE( m_pTextures[i] );
    SAFE_DELETE_ARRAY( m_pTextures );
    SAFE_DELETE_ARRAY( m_pMaterials );

    SAFE_RELEASE( m_pSysMemMesh );

    m_dwNumMaterials = 0L;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DMesh::Render( LPDIRECT3DDEVICE8 pd3dDevice, BOOL bDrawOpaqueSubsets,
                          BOOL bDrawAlphaSubsets )
{
    // Frist, draw the subsets without alpha
    if( bDrawOpaqueSubsets )
    {
        for( DWORD i=0; i<m_dwNumMaterials; i++ )
        {
            if( m_bUseMaterials )
            {
                if( m_pMaterials[i].Diffuse.a < 1.0f )
                    continue;
                CheckHR( pd3dDevice->SetMaterial( &m_pMaterials[i] ));
                CheckHR( pd3dDevice->SetTexture( 0, m_pTextures[i] ));
            }
            CheckHR( m_pLocalMesh->DrawSubset( i ));
        }
    }

    // Then, draw the subsets with alpha
    if( bDrawAlphaSubsets && m_bUseMaterials )
    {
        for( DWORD i=0; i<m_dwNumMaterials; i++ )
        {
            if( m_pMaterials[i].Diffuse.a == 1.0f )
                continue;

            // Set the material and texture
            CheckHR( pd3dDevice->SetMaterial( &m_pMaterials[i] ));
            CheckHR( pd3dDevice->SetTexture( 0, m_pTextures[i] ));
            CheckHR( m_pLocalMesh->DrawSubset( i ));
        }
    }
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DFrame::CD3DFrame( CHAR* strName )
{
    strcpy( m_strName, strName );
    D3DXMatrixIdentity( &m_mat );
    m_pMesh  = NULL;

    m_pChild = NULL;
    m_pNext  = NULL;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DFrame::~CD3DFrame()
{
    SAFE_DELETE( m_pChild );
    SAFE_DELETE( m_pNext );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
BOOL CD3DFrame::EnumMeshes( BOOL (*EnumMeshCB)(CD3DMesh*,VOID*),
                            VOID* pContext )
{
    if( m_pMesh )
        EnumMeshCB( m_pMesh, pContext );
    if( m_pChild )
        m_pChild->EnumMeshes( EnumMeshCB, pContext );
    if( m_pNext )
        m_pNext->EnumMeshes( EnumMeshCB, pContext );

    return TRUE;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DMesh* CD3DFrame::FindMesh( CHAR* strMeshName )
{
    CD3DMesh* pMesh;

    if( m_pMesh )
        if( !_strcmpi( m_pMesh->m_strName, strMeshName ) )
            return m_pMesh;

    if( m_pChild )
        if( NULL != ( pMesh = m_pChild->FindMesh( strMeshName ) ) )
            return pMesh;

    if( m_pNext )
        if( NULL != ( pMesh = m_pNext->FindMesh( strMeshName ) ) )
            return pMesh;

    return NULL;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DFrame* CD3DFrame::FindFrame( CHAR* strFrameName )
{
    CD3DFrame* pFrame;

    if( !_strcmpi( m_strName, strFrameName ) )
        return this;

    if( m_pChild )
        if( NULL != ( pFrame = m_pChild->FindFrame( strFrameName ) ) )
            return pFrame;

    if( m_pNext )
        if( NULL != ( pFrame = m_pNext->FindFrame( strFrameName ) ) )
            return pFrame;

    return NULL;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFrame::Destroy()
{
    if( m_pMesh )  m_pMesh->Destroy();
    if( m_pChild ) m_pChild->Destroy();
    if( m_pNext )  m_pNext->Destroy();

    SAFE_DELETE( m_pMesh );
    SAFE_DELETE( m_pNext );
    SAFE_DELETE( m_pChild );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFrame::RestoreDeviceObjects( LPDIRECT3DDEVICE8 pd3dDevice )
{
    if( m_pMesh )  m_pMesh->RestoreDeviceObjects( pd3dDevice );
    if( m_pChild ) m_pChild->RestoreDeviceObjects( pd3dDevice );
    if( m_pNext )  m_pNext->RestoreDeviceObjects( pd3dDevice );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFrame::InvalidateDeviceObjects()
{
    if( m_pMesh )  m_pMesh->InvalidateDeviceObjects();
    if( m_pChild ) m_pChild->InvalidateDeviceObjects();
    if( m_pNext )  m_pNext->InvalidateDeviceObjects();
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFrame::Render( LPDIRECT3DDEVICE8 pd3dDevice, BOOL bDrawOpaqueSubsets,
                           BOOL bDrawAlphaSubsets )
{
    D3DXMATRIX matSavedWorld, matWorld;
    CheckHR( pd3dDevice->GetTransform( D3DTS_WORLD, &matSavedWorld ));
    D3DXMatrixMultiply( &matWorld, &m_mat, &matSavedWorld );
    CheckHR( pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld ));

    if( m_pMesh )
        m_pMesh->Render( pd3dDevice, bDrawOpaqueSubsets, bDrawAlphaSubsets );

    if( m_pChild )
        m_pChild->Render( pd3dDevice, bDrawOpaqueSubsets, bDrawAlphaSubsets );

    CheckHR( pd3dDevice->SetTransform( D3DTS_WORLD, &matSavedWorld ));

    if( m_pNext )
        m_pNext->Render( pd3dDevice, bDrawOpaqueSubsets, bDrawAlphaSubsets );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFile::LoadFrame( LPDIRECT3DDEVICE8 pd3dDevice,
                             LPDIRECTXFILEDATA pFileData,
                             CD3DFrame* pParentFrame )
{
    LPDIRECTXFILEDATA   pChildData = NULL;
    LPDIRECTXFILEOBJECT pChildObj = NULL;
    const GUID* pGUID;
    DWORD       cbSize;
    CD3DFrame*  pCurrentFrame;

    // Get the type of the object
    CheckHR( pFileData->GetType( &pGUID ) );

    if( *pGUID == TID_D3DRMMesh )
    {
        LoadMesh( pd3dDevice, pFileData, pParentFrame );
    }
    if( *pGUID == TID_D3DRMFrameTransformMatrix )
    {
        D3DXMATRIX* pmatMatrix;
        CheckHR( pFileData->GetData( NULL, &cbSize, (VOID**)&pmatMatrix ));

        // Update the parents matrix with the new one
        pParentFrame->SetMatrix( pmatMatrix );
    }
    if( *pGUID == TID_D3DRMFrame )
    {
        // Get the frame name
        CHAR strName[MAX_PATH] = "";
        DWORD dwNameLength;
        CheckHR( pFileData->GetName( NULL, &dwNameLength ));
        if( dwNameLength > 0 )
		{
            CheckHR( pFileData->GetName( strName, &dwNameLength ));
		}

        // Create the frame
        pCurrentFrame = new CD3DFrame( strName );

        pCurrentFrame->m_pNext = pParentFrame->m_pChild;
        pParentFrame->m_pChild = pCurrentFrame;

        // Enumerate child objects
        while( SUCCEEDED( pFileData->GetNextObject( &pChildObj ) ) )
        {
            // Query the child for it's FileData
            CheckHR( pChildObj->QueryInterface( IID_IDirectXFileData,
                                            (VOID**)&pChildData ));

            LoadFrame( pd3dDevice, pChildData, pCurrentFrame );
            pChildData->Release();

            pChildObj->Release();
        }
    }
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFile::LoadMesh( LPDIRECT3DDEVICE8 pd3dDevice,
                            LPDIRECTXFILEDATA pFileData,
                            CD3DFrame* pParentFrame )
{
    // Currently only allowing one mesh per frame
    if( pParentFrame->m_pMesh )
	{
		DisplayError(L"FATAL: We only allow one mesh per frame", 0);
	}

    // Get the mesh name
    CHAR strName[MAX_PATH] = "";
    DWORD dwNameLength;
    pFileData->GetName( NULL, &dwNameLength );
    if( dwNameLength > 0 )
	{
        CheckHR( pFileData->GetName( strName, &dwNameLength ));
	}

    // Create the mesh
    pParentFrame->m_pMesh = new CD3DMesh( strName );
    pParentFrame->m_pMesh->Create( pd3dDevice, pFileData );
}

//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFile::Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strFilename )
{
    LPDIRECTXFILE           pDXFile   = NULL;
    LPDIRECTXFILEENUMOBJECT pEnumObj  = NULL;
    LPDIRECTXFILEDATA       pFileData = NULL;

    // Create a x file object
    CheckHR( DirectXFileCreate( &pDXFile ) );

    // Register templates for d3drm and patch extensions.
    CheckHR( pDXFile->RegisterTemplates( (VOID*)D3DRM_XTEMPLATES,
                                                 D3DRM_XTEMPLATE_BYTES ) );

    CHAR strPath[MAX_PATH];

	DXUtil_FindMediaFile( strPath, strFilename );

    // Create enum object
    CheckHR( pDXFile->CreateEnumObject( strPath, DXFILELOAD_FROMFILE, 
                                    &pEnumObj ));

    // Enumerate top level objects (which are always frames)
    while( SUCCEEDED( pEnumObj->GetNextDataObject( &pFileData ) ) )
    {
        LoadFrame( pd3dDevice, pFileData, this );
        pFileData->Release();
    }

    SAFE_RELEASE( pFileData );
    SAFE_RELEASE( pEnumObj );
    SAFE_RELEASE( pDXFile );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
void CD3DFile::Render( LPDIRECT3DDEVICE8 pd3dDevice )
{
    // Setup the world transformation
    D3DXMATRIX matSavedWorld, matWorld;
    CheckHR( pd3dDevice->GetTransform( D3DTS_WORLD, &matSavedWorld ));
    D3DXMatrixMultiply( &matWorld, &matSavedWorld, &m_mat );
    CheckHR( pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld ));

    // Render opaque subsets in the meshes
    if( m_pChild )
        m_pChild->Render( pd3dDevice, TRUE, FALSE );

    // Enable alpha blending
    CheckHR( pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE ));
    CheckHR( pd3dDevice->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_SRCALPHA ));
    CheckHR( pd3dDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA ));

    // Render alpha subsets in the meshes
    if( m_pChild )
        m_pChild->Render( pd3dDevice, FALSE, TRUE );

    // Restore state
    CheckHR( pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE ));
    CheckHR( pd3dDevice->SetTransform( D3DTS_WORLD, &matSavedWorld ));
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\d3dapp.h ===
//-----------------------------------------------------------------------------
// File: D3DApp.h
//
// Desc: Application class for the Direct3D samples framework library.
//
// Copyright (c) 1998-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef D3DAPP_H
#define D3DAPP_H

#include "bitfont.h"

interface IDirectInput8 ;
interface IDirectInputDevice8;

//-----------------------------------------------------------------------------
// Structure for holding information about an adapter, and its display modes.
//-----------------------------------------------------------------------------

struct Adapter
{
	struct Mode
	{
		// Mode data
		DWORD      Width;
		DWORD      Height;
		D3DFORMAT  Format;
		DWORD      dwBehavior;
	};
	
	// Adapter data
	D3DADAPTER_IDENTIFIER8 AdapterIdentifier;
	D3DCAPS8   Caps;

	// Mode data
	DWORD      dwNumModes;
	Mode       modes[150];

	Adapter()
	{
		ZeroMemory(this, sizeof(*this));
	}
};

//-----------------------------------------------------------------------------
// Structure used to define menus.
//-----------------------------------------------------------------------------

enum MenuTypes
{
	MT_NONE = 0,			// no menu button is pressed
	MT_BUTTON7 = 1,			// top left
	MT_BUTTON8 = 2,			// top right
	MT_BUTTON9 = 3,			// under left
	MT_BUTTON10 = 4,		// under right
	MT_STARTBUTTON1 = 5,	// reserved for the framework menu
	MT_STARTBUTTON2 = 6,	// reserved for the framework menu
	MT_MAX
};

struct ScenarioMenu
{

	MenuTypes m_MenuType;

	const WCHAR *m_szMenuName;

	const WCHAR *m_szActions[6]; // for A, B, C, D, E, F
	unsigned m_cActions;        // Number of filled actions.
};

//-----------------------------------------------------------------------------
// Name: class CD3DApplication8
// Desc: A base class for creating sample D3D8 applications. To create a simple
//       Direct3D application, simply derive this class into a class (such as
//       class CMyD3DApplication) and override the following functions, as 
//       needed:
//          OneTimeSceneInit()    - To initialize app data (alloc mem, etc.)
//          InitDeviceObjects()   - To initialize the 3D scene objects
//          FrameMove()           - To animate the scene
//          Render()              - To render the scene
//          DeleteDeviceObjects() - To cleanup the 3D scene objects
//          FinalCleanup()        - To cleanup app data (for exitting the app)
//-----------------------------------------------------------------------------

class CD3DApplication
{
	// Internal variables for the state of the app
    BOOL    m_bActive;
    BOOL    m_bReady;

    // Internal variables used for timing
    BOOL    m_bFrameMoving;
    BOOL    m_bSingleStep;
	BOOL    m_bRunFullTest;

	// FPS stats.
    FLOAT             m_fFPS;              // Instanteous frame rate
	WCHAR  m_strFrameStats[80];			   // String to hold frame rate stats
    DWORD m_dwFrames;

#if defined(PCBUILD)
	// Internal members used to manage input.
	IDirectInput8 *m_pDirectInput;
	IDirectInputDevice8 *m_pKeyboard;
	IDirectInputDevice8 *m_pGamepad;
#else
    HANDLE  m_hDevice;
#endif 

	BOOL    m_fShowHelp;				// Show a help menu.
	BOOL    m_fShowStats;               // Show statistics?
	DWORD	m_iActiveMenu;				// Which menu is currently active
	DWORD   m_iActiveKey;				// Which of ABCDEF is currently pressed?
	
	// Internal members for the menus.
	unsigned m_cMenus;					// How many menus are installed?

	ScenarioMenu *m_rgpMenus[MT_MAX];	// Descriptor for each menu.

	DWORD m_dwSpaceHeight;				// The height of a blank.
	DWORD m_dwHelpWidth;				// Width of the help box.
	DWORD m_dwColumn1X;					// Relative X for the first column
	DWORD m_dwColumn2X;                 // Relative X for the second column

	// Member used for output.  This variable is only valid for a short
	// period of time.
	//
	IDirect3DSurface8 *m_pBackBuffer;
	
    // Internal functions to manage and render the 3D scene
	void BuildDeviceList();

#if defined(PCBUILD)
	void GetInputDevices();
#endif 

    void UserChangeDevice();
    void Initialize3DEnvironment();
	void Resize3DEnvironment();
	void ToggleFullscreen();
    void Cleanup3DEnvironment();
    void Render3DEnvironment();
	bool ProcessInput();
	void InitializeHelpInformation();
	void ShowHelp(IDirect3DSurface8 *pSurface);
	void UpdateAllStats();

protected:

	// The adapter.
	Adapter          m_Adapter;

    // Main objects used for creating and rendering the 3D scene
	D3DPRESENT_PARAMETERS	m_Presentation;
    LPDIRECT3D8				m_pD3D;              // The D3D enumerator object
    LPDIRECT3DDEVICE8		m_pDevice;           // The D3D rendering device
    D3DCAPS8				m_Caps;              // Caps for the device
    D3DSURFACE_DESC			m_BackBufferDesc;    // Surface desc of the backbuffer
    HWND					m_hWnd;              // The main app window

	DWORD					m_dwSampleMask;      // Mask of available FSAA modes.
	D3DMULTISAMPLE_TYPE		m_iSampleType;       // Current sample mode.

    BitFont                 m_Font;

	// Variables for timing
    FLOAT             m_fTime;             // Current time in seconds
    FLOAT             m_fElapsedTime;      // Time elapsed since last frame

    // Overridable variables for the app
    BOOL      m_bUseDepthBuffer ;  // Whether to autocreate depthbuffer
    D3DFORMAT m_DepthBufferFormat; // Format used to create depthbuffer
	DWORD	  m_dwCurrentMode;	   // The current screen mode.
	WCHAR	  m_szTestStats[256];   // String to hold the test stats.

    // Overridable functions for the 3D scene created by the app
	virtual bool ConfirmDevice(D3DCAPS8*, DWORD, D3DFORMAT) { return true; }
    virtual void OneTimeSceneInit()                         { }
    virtual void InitDeviceObjects()                        { }
	virtual void RestoreDeviceObjects()                     { }
    virtual void FrameMove()                                { }
    virtual void Render()                                   { }
	virtual void InvalidateDeviceObjects()                  { }
    virtual void DeleteDeviceObjects()                      { }
    virtual void FinalCleanup()                             { }
	virtual void UpdateStats(float fElapsedTime)			{ }
	virtual void ShowInfo(int iY, int cHeight)              { }

	// Override this method to handle input. 
	virtual void ProcessKeyPress(DWORD iMenu, DWORD iKey)   { }

	// Override this method to set additional menus.  The
	// passed-in array has 10 elements, return the number 
	// of menus put into the array.
	//
	virtual unsigned GetMenus(ScenarioMenu **rgMenus)		{ return 0; }

	// Helper to draw the text on the screen.
    void DisplayText(const WCHAR *sz, int iY, DWORD dwColor);

	// Helper to reinitialize the 3d engine.
    void Change3DEnvironment();

public:

    // Functions to create, run, pause, and clean up the application
    virtual void Create(HINSTANCE hInstance);
    virtual void Run();

    // Internal constructor
    CD3DApplication();
};




#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\d3dfile.h ===
//-----------------------------------------------------------------------------
// File: D3DFile.h
//
// Desc: Support code for loading DirectX .X files.
//
// Copyright (c) 1997-1999 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef D3DFILE_H
#define D3DFILE_H
#define STRICT
#include <d3d8.h>
#include <d3dx8.h>




//-----------------------------------------------------------------------------
// Name: class CD3DMesh
// Desc: Class for loading and rendering file-based meshes
//-----------------------------------------------------------------------------
class CD3DMesh
{
public:
	CHAR                m_strName[512];

    LPD3DXMESH          m_pSysMemMesh;    // SysSem mesh, lives through resize
    LPD3DXMESH          m_pLocalMesh;     // Local mesh, rebuilt on resize
    
    DWORD               m_dwNumMaterials; // Materials for the mesh
    D3DMATERIAL8*       m_pMaterials;
    LPDIRECT3DTEXTURE8* m_pTextures;
	BOOL                m_bUseMaterials;

public:
	// Rendering
    void Render( LPDIRECT3DDEVICE8 pd3dDevice, 
		            BOOL bDrawOpaqueSubsets = TRUE,
		            BOOL bDrawAlphaSubsets = TRUE );

	// Mesh access
    LPD3DXMESH GetSysMemMesh() { return m_pSysMemMesh; }
    LPD3DXMESH GetLocalMesh()  { return m_pLocalMesh; }

	// Rendering options
	VOID    UseMeshMaterials( BOOL bFlag ) { m_bUseMaterials = bFlag; }
	void SetFVF( LPDIRECT3DDEVICE8 pd3dDevice, DWORD dwFVF );

	// Initializing
    void RestoreDeviceObjects( LPDIRECT3DDEVICE8 pd3dDevice );
    void InvalidateDeviceObjects();

	// Creation/destruction
	void Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strFilename );
	void Create( LPDIRECT3DDEVICE8 pd3dDevice, LPDIRECTXFILEDATA pFileData );
	void Destroy();

    CD3DMesh( CHAR* strName = "CD3DFile_Mesh" );
    virtual ~CD3DMesh();
};




//-----------------------------------------------------------------------------
// Name: class CD3DFrame
// Desc: Class for loading and rendering file-based meshes
//-----------------------------------------------------------------------------
class CD3DFrame
{
public:
	CHAR       m_strName[512];
	D3DXMATRIX m_mat;
	CD3DMesh*  m_pMesh;
	CHAR       m_strMeshName[512];

	CD3DFrame* m_pNext;
	CD3DFrame* m_pChild;

public:
	// Matrix access
    VOID        SetMatrix( D3DXMATRIX* pmat ) { m_mat = *pmat; }
    D3DXMATRIX* GetMatrix()                   { return &m_mat; }

	CD3DMesh*   FindMesh( CHAR* strMeshName );
	CD3DFrame*  FindFrame( CHAR* strFrameName );
    BOOL        EnumMeshes( BOOL (*EnumMeshCB)(CD3DMesh*,VOID*), 
		                    VOID* pContext );

	void Destroy();
    void RestoreDeviceObjects( LPDIRECT3DDEVICE8 pd3dDevice );
    void InvalidateDeviceObjects();
    void Render( LPDIRECT3DDEVICE8 pd3dDevice, 
		            BOOL bDrawOpaqueSubsets = TRUE,
		            BOOL bDrawAlphaSubsets = TRUE );
	
	CD3DFrame( CHAR* strName = "CD3DFile_Frame" );
	virtual ~CD3DFrame();
};




//-----------------------------------------------------------------------------
// Name: class CD3DFile
// Desc: Class for loading and rendering file-based meshes
//-----------------------------------------------------------------------------
class CD3DFile : public CD3DFrame
{
	void LoadMesh( LPDIRECT3DDEVICE8 pd3dDevice, LPDIRECTXFILEDATA pFileData, 
					  CD3DFrame* pParentFrame );
	void LoadFrame( LPDIRECT3DDEVICE8 pd3dDevice, LPDIRECTXFILEDATA pFileData, 
		               CD3DFrame* pParentFrame );
public:
	void Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strFilename );
	void Render( LPDIRECT3DDEVICE8 pd3dDevice );

	CD3DFile() : CD3DFrame( "CD3DFile_Root" ) {}
};




#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\d3dutil.cpp ===
//-----------------------------------------------------------------------------
// File: D3DUtil.cpp
//
// Desc: Shortcut macros and functions for using DX objects
//
//
// Copyright (c) 1997-1999 Microsoft Corporation. All rights reserved
//-----------------------------------------------------------------------------

#define STRICT

#include <stdio.h>
#ifdef XBOX
#include <xtl.h>
#include <xgraphics.h>
#else
#include <windows.h>
#endif

#include "D3DUtil.h"
#include "DXUtil.h"

//-----------------------------------------------------------------------------
// Name: D3DUtil_InitMaterial()
// Desc: Initializes a D3DMATERIAL8 structure, setting the diffuse and ambient
//       colors. It does not set emissive or specular colors.
//-----------------------------------------------------------------------------
VOID D3DUtil_InitMaterial( D3DMATERIAL8& mtrl, FLOAT r, FLOAT g, FLOAT b,
                           FLOAT a )
{
    ZeroMemory( &mtrl, sizeof(D3DMATERIAL8) );
    mtrl.Diffuse.r = mtrl.Ambient.r = r;
    mtrl.Diffuse.g = mtrl.Ambient.g = g;
    mtrl.Diffuse.b = mtrl.Ambient.b = b;
    mtrl.Diffuse.a = mtrl.Ambient.a = a;
}




//-----------------------------------------------------------------------------
// Name: D3DUtil_InitLight()
// Desc: Initializes a D3DLIGHT structure, setting the light position. The
//       diffuse color is set to white, specular and ambient left as black.
//-----------------------------------------------------------------------------
VOID D3DUtil_InitLight( D3DLIGHT8& light, D3DLIGHTTYPE ltType,
                        FLOAT x, FLOAT y, FLOAT z )
{
    ZeroMemory( &light, sizeof(D3DLIGHT8) );
    light.Type        = ltType;
    light.Diffuse.r   = 1.0f;
    light.Diffuse.g   = 1.0f;
    light.Diffuse.b   = 1.0f;
    light.Position.x   = light.Direction.x = x;
    light.Position.y   = light.Direction.y = y;
    light.Position.z   = light.Direction.z = z;
    light.Range        = 1000.0f;
}




//-----------------------------------------------------------------------------
// Name: D3DUtil_CreateTexture()
// Desc: Helper function to create a texture. It checks the root path first,
//       then tries the DXSDK media path (as specified in the system registry).
//-----------------------------------------------------------------------------
HRESULT D3DUtil_CreateTexture( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strTexture,
                               LPDIRECT3DTEXTURE8* ppTexture, D3DFORMAT d3dFormat )
{
	// Get the path to the texture
    CHAR strPath[512];
	DXUtil_FindMediaFile( strPath, strTexture );

	// Create the texture using D3DX
    return D3DXCreateTextureFromFileExA(pd3dDevice, strPath, 
		        D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, d3dFormat, 
				D3DPOOL_MANAGED, D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR, 
			    D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR, 0, NULL, NULL, ppTexture );
}


#if 0

//-----------------------------------------------------------------------------
// Name: D3DUtil_SetColorKey()
// Desc: Changes all texels matching the colorkey to transparent, black.
//-----------------------------------------------------------------------------
HRESULT D3DUtil_SetColorKey( LPDIRECT3DTEXTURE8 pTexture, DWORD dwColorKey )
{
    // Get colorkey's red, green, and blue components
    DWORD r = ((dwColorKey&0x00ff0000)>>16);
    DWORD g = ((dwColorKey&0x0000ff00)>>8);
    DWORD b = ((dwColorKey&0x000000ff)>>0);

    // Put the colorkey in the texture's native format
    D3DSURFACE_DESC d3dsd;    
    pTexture->GetLevelDesc( 0, &d3dsd );

    if( d3dsd.Format == D3DFMT_A4R4G4B4 )
        dwColorKey = 0xf000 + ((r>>4)<<8) + ((g>>4)<<4) + (b>>4);
    else if( d3dsd.Format == D3DFMT_A1R5G5B5 )
        dwColorKey = 0x8000 + ((r>>3)<<10) + ((g>>3)<<5) + (b>>3);
    else if( d3dsd.Format != D3DFMT_A8R8G8B8 )
        return E_FAIL;
    // Lock the texture
    D3DLOCKED_RECT  d3dlr;
#ifdef XBOX
    if( FAILED( pTexture->LockRect( 0, &d3dlr, 0, D3DLOCK_RAWDATA ) ) )
        return E_FAIL;

    PVOID pBits = Swizzler_GetUnswizzledBits(&d3dlr, &d3dsd);
    if (pBits == NULL)
    {
        pTexture->UnlockRect(0);
        return E_FAIL;
    }
#else
    if( FAILED( pTexture->LockRect( 0, &d3dlr, 0, 0 ) ) )
        return E_FAIL;
#endif

    // Scan through each pixel, looking for the colorkey to replace
    for( DWORD y=0; y<d3dsd.Height; y++ )
    {
        for( DWORD x=0; x<d3dsd.Width; x++ )
        {
            if( d3dsd.Format==D3DFMT_A8R8G8B8 )
            {
                // Handle 32-bit formats
#ifdef XBOX
                if( ((DWORD*)pBits)[d3dsd.Width*y+x] == dwColorKey )
                    ((DWORD*)pBits)[d3dsd.Width*y+x] = 0x00000000;
#else
                if( ((DWORD*)d3dlr.pBits)[d3dsd.Width*y+x] == dwColorKey )
                    ((DWORD*)d3dlr.pBits)[d3dsd.Width*y+x] = 0x00000000;
#endif
            }
            else
            {
                // Handle 16-bit formats
#ifdef XBOX
                if( ((WORD*)pBits)[d3dsd.Width*y+x] == dwColorKey )
                    ((WORD*)pBits)[d3dsd.Width*y+x] = 0x0000;
#else
                if( ((WORD*)d3dlr.pBits)[d3dsd.Width*y+x] == dwColorKey )
                    ((WORD*)d3dlr.pBits)[d3dsd.Width*y+x] = 0x0000;
#endif
            }
        }
    }

#ifdef XBOX
    Swizzler_SwizzleFromBits(pBits, &d3dlr, &d3dsd);
#endif

    // Unlock the texture and return OK.
    pTexture->UnlockRect(0);
    return S_OK;
}

#endif 0



//-----------------------------------------------------------------------------
// Name: D3DUtil_CreateVertexShader()
// Desc: Assembles and creates a file-based vertex shader
//-----------------------------------------------------------------------------
HRESULT D3DUtil_CreateVertexShader( LPDIRECT3DDEVICE8 pd3dDevice, 
								    WCHAR* strFilename, DWORD* pdwVertexDecl,
									DWORD* pdwVertexShader )
{
#if 1
    return E_NOTIMPL;
#else

    LPD3DXBUFFER pCode;
    WCHAR        strPath[512];
    HRESULT      hr;

	// Get the path to the vertex shader file
	DXUtil_FindMediaFile( strPath, strFilename );

	// Assemble the vertex shader file
    if( FAILED( hr = D3DXAssembleVertexShaderFromFile( strPath, &pCode, NULL ) ) )
		return hr;

	// Create the vertex shader
    hr = pd3dDevice->CreateVertexShader( pdwVertexDecl, 
		                                 (DWORD*)pCode->GetBufferPointer(),
                                         pdwVertexShader, 0 );
    pCode->Release();
	return hr;
#endif
}




//-----------------------------------------------------------------------------
// Name: D3DUtil_GetCubeMapViewMatrix()
// Desc: Returns a view matrix for rendering to a face of a cubemap.
//-----------------------------------------------------------------------------
D3DXMATRIX D3DUtil_GetCubeMapViewMatrix( DWORD dwFace )
{
    D3DXVECTOR3 vEyePt   = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
    D3DXVECTOR3 vLookDir = D3DXVECTOR3( 1.0f, 0.0f, 0.0f );
    D3DXVECTOR3 vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

    switch( dwFace )
    {
        case D3DCUBEMAP_FACE_POSITIVE_X:
            vLookDir = D3DXVECTOR3( 1.0f, 0.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
        case D3DCUBEMAP_FACE_NEGATIVE_X:
            vLookDir = D3DXVECTOR3(-1.0f, 0.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
        case D3DCUBEMAP_FACE_POSITIVE_Y:
            vLookDir = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );
            break;
        case D3DCUBEMAP_FACE_NEGATIVE_Y:
            vLookDir = D3DXVECTOR3( 0.0f,-1.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );
            break;
        case D3DCUBEMAP_FACE_POSITIVE_Z:
            vLookDir = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
        case D3DCUBEMAP_FACE_NEGATIVE_Z:
            vLookDir = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
    }

    // Set the view transform for this cubemap surface
    D3DXMATRIX matView;
    D3DXMatrixLookAtLH( &matView, &vEyePt, &vLookDir, &vUpDir );
    return matView;
}


#if 0

//-----------------------------------------------------------------------------
// Name: D3DUtil_GetRotationFromCursor()
// Desc: Returns a quaternion for the rotation implied by the window's cursor
//       position.
//-----------------------------------------------------------------------------
D3DXQUATERNION D3DUtil_GetRotationFromCursor( HWND hWnd,
                                              FLOAT fTrackBallRadius )
{
    POINT pt;
    RECT  rc;
    GetCursorPos( &pt );
    GetClientRect( hWnd, &rc );
    ScreenToClient( hWnd, &pt );
    FLOAT sx = ( ( ( 2.0f * pt.x ) / (rc.right-rc.left) ) - 1 );
    FLOAT sy = ( ( ( 2.0f * pt.y ) / (rc.bottom-rc.top) ) - 1 );
    FLOAT sz;

    if( sx == 0.0f && sy == 0.0f )
        return D3DXQUATERNION( 0.0f, 0.0f, 0.0f, 1.0f );

    FLOAT d1 = 0.0f;
    FLOAT d2 = sqrtf( sx*sx + sy*sy );

    if( d2 < fTrackBallRadius * 0.70710678118654752440 ) // Inside sphere
        sz = sqrtf( fTrackBallRadius*fTrackBallRadius - d2*d2 );
    else                                                 // On hyperbola
        sz = (fTrackBallRadius*fTrackBallRadius) / (2.0f*d2);

    // Get two points on trackball's sphere
    D3DXVECTOR3 p1( sx, sy, sz );
    D3DXVECTOR3 p2( 0.0f, 0.0f, fTrackBallRadius );

    // Get axis of rotation, which is cross product of p1 and p2
    D3DXVECTOR3 vAxis;
    D3DXVec3Cross( &vAxis, &p1, &p2);

    // Calculate angle for the rotation about that axis
    FLOAT t = D3DXVec3Length( &(p2-p1) ) / ( 2.0f*fTrackBallRadius );
    if( t > +1.0f) t = +1.0f;
    if( t < -1.0f) t = -1.0f;
    FLOAT fAngle = 2.0f * asinf( t );

    // Convert axis to Quaternion
    D3DXQUATERNION quat;
    D3DXQuaternionRotationAxis( &quat, &vAxis, fAngle );
    return quat;
}

#endif 0


//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DArcBall::CD3DArcBall()
{
    D3DXQuaternionIdentity( &m_qDown );
    D3DXQuaternionIdentity( &m_qNow );
    D3DXMatrixIdentity( &m_matRotation );
    D3DXMatrixIdentity( &m_matRotationDelta );
    D3DXMatrixIdentity( &m_matTranslation );
    D3DXMatrixIdentity( &m_matTranslationDelta );
    m_bDrag = FALSE;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
VOID CD3DArcBall::SetWindow( int iWidth, int iHeight, float fRadius )
{
    // Set ArcBall info
    m_iWidth  = iWidth;
    m_iHeight = iHeight;
    m_fRadius = fRadius;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
D3DXVECTOR3 CD3DArcBall::ScreenToVector( int sx, int sy )
{
    // Scale to screen
    FLOAT x   =  (sx - m_iWidth/2)  / (m_fRadius*m_iWidth/2);
    FLOAT y   = -(sy - m_iHeight/2) / (m_fRadius*m_iHeight/2);
    FLOAT z   = 0.0f;
    FLOAT mag = x*x + y*y;

    if( mag > 1.0f )
    {
        FLOAT scale = 1.0f/sqrtf(mag);
        x *= scale;
        y *= scale;
    }
    else
        z = sqrtf( 1.0f - mag );

    // Return vector
    return D3DXVECTOR3( x, y, z );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
VOID CD3DArcBall::SetRadius( FLOAT fRadius )
{
    m_fRadius2 = fRadius;
}

#if 0

//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
LRESULT CD3DArcBall::HandleMouseMessages( HWND hWnd, UINT uMsg, WPARAM wParam,
                                          LPARAM lParam )
{
    static int         iCurMouseX;      // Saved mouse position
    static int         iCurMouseY;
    static D3DXVECTOR3 m_vDown;         // Button down quaternion
    static D3DXVECTOR3 m_vCur;          // Current quaternion

    // Current mouse position
    int iMouseX = LOWORD(lParam);
    int iMouseY = HIWORD(lParam);

    switch( uMsg )
    {
        case WM_RBUTTONDOWN:
        case WM_MBUTTONDOWN:
            // Store off the position of the cursor when the button is pressed
            iCurMouseX = iMouseX;
            iCurMouseY = iMouseY;
            return TRUE;

        case WM_LBUTTONDOWN:
            // Start drag mode
            m_bDrag = TRUE;
            m_vDown = ScreenToVector( iMouseX, iMouseY );
            return TRUE;

        case WM_LBUTTONUP:
            // End drag mode
            m_bDrag = FALSE;
            m_qDown = m_qNow;
            return TRUE;

        case WM_MOUSEMOVE:
            // Drag object
            if( MK_LBUTTON&wParam )
            {
                if( m_bDrag )
                {
                    D3DXVECTOR3 vPart;
                    D3DXVECTOR3 vCur = ScreenToVector( iMouseX, iMouseY );
                    D3DXVec3Cross( &vPart, &m_vDown, &vCur );
                    m_qNow = m_qDown * D3DXQUATERNION( vPart.x, vPart.y, vPart.z,
                                                       D3DXVec3Dot( &m_vDown, &vCur ) );
                }

                D3DXQUATERNION qConj;
                D3DXQuaternionConjugate( &qConj, &m_qNow );

                D3DXMatrixRotationQuaternion( &m_matRotationDelta, &qConj );
                D3DXMatrixTranspose( &m_matRotationDelta, &m_matRotationDelta );
                D3DXMatrixMultiply( &m_matRotation, &m_matRotation, &m_matRotationDelta );

                D3DXQuaternionIdentity( &m_qDown );
                D3DXQuaternionIdentity( &m_qNow );
                m_vDown = ScreenToVector( iMouseX, iMouseY );
                m_bDrag = TRUE;
            }
            else if( (MK_RBUTTON&wParam) || (MK_MBUTTON&wParam) )
            {
                // Normalize based on size of window and bounding sphere radius
                FLOAT fDeltaX = ( iCurMouseX-iMouseX ) * m_fRadius2 / m_iWidth;
                FLOAT fDeltaY = ( iCurMouseY-iMouseY ) * m_fRadius2 / m_iHeight;

                if( wParam & MK_RBUTTON )
                {
                    D3DXMatrixTranslation( &m_matTranslationDelta, -2*fDeltaX, 2*fDeltaY, 0.0f );
                    D3DXMatrixMultiply( &m_matTranslation, &m_matTranslation, &m_matTranslationDelta );
                }
                else  // wParam & MK_MBUTTON
                {
                    D3DXMatrixTranslation( &m_matTranslationDelta, 0.0f, 0.0f, 5*fDeltaY );
                    D3DXMatrixMultiply( &m_matTranslation, &m_matTranslation, &m_matTranslationDelta );
                }

                // Store mouse coordinate
                iCurMouseX = iMouseX;
                iCurMouseY = iMouseY;
            }
            return TRUE;
    }

    return FALSE;
}

#endif 0


//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
CD3DCamera::CD3DCamera()
{
    // Set attributes for the view matrix
    SetViewParams( D3DXVECTOR3(0.0f,0.0f,0.0f), D3DXVECTOR3(0.0f,0.0f,1.0f),
                   D3DXVECTOR3(0.0f,1.0f,0.0f) );

    // Set attributes for the projection matrix
    SetProjParams( D3DX_PI/4, 1.0f, 1.0f, 1000.0f );
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
VOID CD3DCamera::SetViewParams( D3DXVECTOR3 &vEyePt, D3DXVECTOR3& vLookatPt,
                                D3DXVECTOR3& vUpVec )
{
    // Set attributes for the view matrix
    m_vEyePt    = vEyePt;
    m_vLookatPt = vLookatPt;
    m_vUpVec    = vUpVec;
    D3DXVec3Normalize( &m_vView, &(m_vLookatPt - m_vEyePt) );
    D3DXVec3Cross( &m_vCross, &m_vView, &m_vUpVec );

    D3DXMatrixLookAtLH( &m_matView, &m_vEyePt, &m_vLookatPt, &m_vUpVec );
    D3DXMatrixInverse( &m_matBillboard, NULL, &m_matView );
    m_matBillboard._41 = 0.0f;
    m_matBillboard._42 = 0.0f;
    m_matBillboard._43 = 0.0f;
}




//-----------------------------------------------------------------------------
// Name:
// Desc:
//-----------------------------------------------------------------------------
VOID CD3DCamera::SetProjParams( FLOAT fFOV, FLOAT fAspect, FLOAT fNearPlane,
                                FLOAT fFarPlane )
{
    // Set attributes for the projection matrix
    m_fFOV        = fFOV;
    m_fAspect     = fAspect;
    m_fNearPlane  = fNearPlane;
    m_fFarPlane   = fFarPlane;

    D3DXMatrixPerspectiveFovLH( &m_matProj, fFOV, fAspect, fNearPlane, fFarPlane );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\dxutil.cpp ===
//-----------------------------------------------------------------------------
// File: DXUtil.cpp
//
// Desc: Shortcut macros and functions for using DX objects
//
//
// Copyright (c) 1997-2000 Microsoft Corporation. All rights reserved
//-----------------------------------------------------------------------------

#define STRICT

#ifdef XBOX
#include <xtl.h>
#else
#include <windows.h>
#endif
#include <stdio.h> 
#include <stdarg.h>
#include <D3D8.h>
#include <d3dx8core.h>
#include "DXUtil.h"

FLOAT DXUtil_Timer::m_fSecsPerTick = 0.0f;
FLOAT DXUtil_Timer::m_fBaseTime    = 0.0f;
FLOAT DXUtil_Timer::m_fStopTime    = 0.0f;

//-----------------------------------------------------------------------------
// Helper to display error messages.  This just shoves them out through the
// debug console.
//-----------------------------------------------------------------------------

void DisplayError(const WCHAR *szCall, HRESULT hr)
{
    WCHAR szErr[512];
	unsigned cch;

	if (hr)
	{
		cch = _snwprintf(szErr, sizeof(szErr), L"FATAL: %s failed 0x%08lX: ", szCall, hr);

		D3DXGetErrorString(hr, &szErr[cch], sizeof(szErr));
	}
	else
	{
		wcscpy(szErr, szCall);
	}

    wcscat(szErr, L"\n");

    OutputDebugString(szErr);

    _asm int 3;
}

//-----------------------------------------------------------------------------
// Name: DXUtil_FindMediaFile()
// Desc: Returns a valid path to a DXSDK media file
//-----------------------------------------------------------------------------
void DXUtil_FindMediaFile( CHAR* strPath, CHAR* strFilename )
{
    HANDLE file;

    if ( NULL==strFilename || NULL==strPath )
	{
		DisplayError(L"FATAL: Bad arguments to DXUtil_FindMediaFile", 0);
	}

    // Check if the file exists in the current directory
    strcpy( strPath, strFilename );

    file = CreateFileA( strPath, GENERIC_READ, FILE_SHARE_READ, NULL,
                       OPEN_EXISTING, 0, NULL );
    if( INVALID_HANDLE_VALUE != file )
    {
        CloseHandle( file );
        return;
    }

    // Check if the file exists in the media directory
#ifdef PCBUILD
    sprintf( strPath, "c:\\Media\\%s", strFilename );
#else
    sprintf( strPath, "T:\\Media\\%s", strFilename );
#endif 

    file = CreateFileA(strPath, GENERIC_READ, FILE_SHARE_READ, NULL, 
                       OPEN_EXISTING, 0, NULL );
    if( INVALID_HANDLE_VALUE != file )
    {
        CloseHandle( file );
		return;
    }

	DisplayError(L"FATAL: Unable to open a file.", 0);
}

#ifdef PCBUILD

extern "C" ULONG DebugPrint(const char *Format, ...)
{
    char sz[2048];

    va_list args;
    va_start(args, Format);

    _vsnprintf(sz, 2048, Format, args);
    OutputDebugStringA(sz);

    va_end(args);

    return 0;
}


#endif PCBUILD
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\d3dutil.h ===
//-----------------------------------------------------------------------------
// File: D3DUtil.h
//
// Desc: Helper functions and typing shortcuts for Direct3D programming.
//
// Copyright (c) 1997-1999 Microsoft Corporation. All rights reserved
//-----------------------------------------------------------------------------
#ifndef D3DUTIL_H
#define D3DUTIL_H
#include <D3D8.h>
#include <D3DX8Math.h>




//-----------------------------------------------------------------------------
// Name: D3DUtil_InitMaterial()
// Desc: Initializes a D3DMATERIAL8 structure, setting the diffuse and ambient
//       colors. It does not set emissive or specular colors.
//-----------------------------------------------------------------------------
VOID D3DUtil_InitMaterial( D3DMATERIAL8& mtrl, FLOAT r=0.0f, FLOAT g=0.0f,
                                               FLOAT b=0.0f, FLOAT a=1.0f );




//-----------------------------------------------------------------------------
// Name: D3DUtil_InitLight()
// Desc: Initializes a D3DLIGHT structure, setting the light position. The
//       diffuse color is set to white, specular and ambient left as black.
//-----------------------------------------------------------------------------
VOID D3DUtil_InitLight( D3DLIGHT8& light, D3DLIGHTTYPE ltType,
                        FLOAT x=0.0f, FLOAT y=0.0f, FLOAT z=0.0f );




//-----------------------------------------------------------------------------
// Name: D3DUtil_CreateTexture()
// Desc: Helper function to create a texture. It checks the root path first,
//       then tries the DXSDK media path (as specified in the system registry).
//-----------------------------------------------------------------------------
HRESULT D3DUtil_CreateTexture( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strTexture,
                               LPDIRECT3DTEXTURE8* ppTexture,
                               D3DFORMAT d3dFormat = D3DFMT_UNKNOWN );




//-----------------------------------------------------------------------------
// Name: D3DUtil_SetColorKey()
// Desc: Changes all texels matching the colorkey to transparent, black.
//-----------------------------------------------------------------------------
HRESULT D3DUtil_SetColorKey( LPDIRECT3DTEXTURE8 pTexture, DWORD dwColorKey );




//-----------------------------------------------------------------------------
// Name: D3DUtil_CreateVertexShader()
// Desc: Assembles and creates a file-based vertex shader
//-----------------------------------------------------------------------------
HRESULT D3DUtil_CreateVertexShader( LPDIRECT3DDEVICE8 pd3dDevice, 
								    WCHAR* strFilename, DWORD* pdwVertexDecl,
									DWORD* pdwVertexShader );

									
									
									
//-----------------------------------------------------------------------------
// Name: D3DUtil_GetCubeMapViewMatrix()
// Desc: Returns a view matrix for rendering to a face of a cubemap.
//-----------------------------------------------------------------------------
D3DXMATRIX D3DUtil_GetCubeMapViewMatrix( DWORD dwFace );




//-----------------------------------------------------------------------------
// Name: D3DUtil_GetRotationFromCursor()
// Desc: Returns a quaternion for the rotation implied by the window's cursor
//       position.
//-----------------------------------------------------------------------------
D3DXQUATERNION D3DUtil_GetRotationFromCursor( HWND hWnd,
                                              FLOAT fTrackBallRadius=1.0f );




//-----------------------------------------------------------------------------
// Name: class CD3DArcBall
// Desc:
//-----------------------------------------------------------------------------
class CD3DArcBall
{
	INT            m_iWidth;   // ArcBall's window width
	INT            m_iHeight;  // ArcBall's window height
	FLOAT          m_fRadius;  // ArcBall's radius in screen coords
	FLOAT          m_fRadius2; // ArcBall's radius in screen coords

	D3DXQUATERNION m_qDown;               // Quaternion before button down
	D3DXQUATERNION m_qNow;                // Composite quaternion for current drag
	D3DXMATRIX     m_matRotation;         // Matrix for arcball's orientation
	D3DXMATRIX     m_matRotationDelta;    // Matrix for arcball's orientation
	D3DXMATRIX     m_matTranslation;      // Matrix for arcball's position
	D3DXMATRIX     m_matTranslationDelta; // Matrix for arcball's position
	BOOL           m_bDrag;               // Whether user is dragging arcball

	D3DXVECTOR3 ScreenToVector( int sx, int sy );

public:
	LRESULT     HandleMouseMessages( HWND, UINT, WPARAM, LPARAM );

	D3DXMATRIX* GetRotationMatrix()         { return &m_matRotation; }
	D3DXMATRIX* GetRotationDeltaMatrix()    { return &m_matRotationDelta; }
	D3DXMATRIX* GetTranslationMatrix()      { return &m_matTranslation; }
	D3DXMATRIX* GetTranslationDeltaMatrix() { return &m_matTranslationDelta; }
	BOOL        IsBeingDragged()            { return m_bDrag; }

	VOID        SetRadius( FLOAT fRadius );
	VOID        SetWindow( int w, int h, float r=0.9 );

	CD3DArcBall();
};




//-----------------------------------------------------------------------------
// Name: class CD3DCamera
// Desc:
//-----------------------------------------------------------------------------
class CD3DCamera
{
	D3DXVECTOR3 m_vEyePt;       // Attributes for view matrix
	D3DXVECTOR3 m_vLookatPt;
	D3DXVECTOR3 m_vUpVec;

	D3DXVECTOR3 m_vView;
	D3DXVECTOR3 m_vCross;

	D3DXMATRIX  m_matView;
	D3DXMATRIX  m_matBillboard; // Special matrix for billboarding effects

	FLOAT       m_fFOV;         // Attributes for projection matrix
	FLOAT       m_fAspect;
	FLOAT       m_fNearPlane;
	FLOAT       m_fFarPlane;
	D3DXMATRIX  m_matProj;

public:
	// Access functions
	D3DXVECTOR3 GetEyePt()           { return m_vEyePt; }
	D3DXVECTOR3 GetPookatPt()        { return m_vLookatPt; }
	D3DXVECTOR3 GetUpVec()           { return m_vUpVec; }
	D3DXVECTOR3 GetViewDir()         { return m_vView; }
	D3DXVECTOR3 GetCross()           { return m_vCross; }

	D3DXMATRIX  GetViewMatrix()      { return m_matView; }
	D3DXMATRIX  GetBillboardMatrix() { return m_matBillboard; }
	D3DXMATRIX  GetProjMatrix()      { return m_matProj; }

	VOID SetViewParams( D3DXVECTOR3 &vEyePt, D3DXVECTOR3& vLookatPt,
						D3DXVECTOR3& vUpVec );
	VOID SetProjParams( FLOAT fFOV, FLOAT fAspect, FLOAT fNearPlane,
						FLOAT fFarPlane );

	CD3DCamera();
};




//-----------------------------------------------------------------------------
// Helper macros for pixel shader instructions
//-----------------------------------------------------------------------------

// Parameter writemasks
#define D3DPSP_WRITEMASK_B   D3DSP_WRITEMASK_0
#define D3DPSP_WRITEMASK_G   D3DSP_WRITEMASK_1
#define D3DPSP_WRITEMASK_R   D3DSP_WRITEMASK_2
#define D3DPSP_WRITEMASK_A   D3DSP_WRITEMASK_3
#define D3DPSP_WRITEMASK_C   (D3DPSP_WRITEMASK_B|D3DPSP_WRITEMASK_G|D3DPSP_WRITEMASK_R)
#define D3DPSP_WRITEMASK_ALL (D3DSP_WRITEMASK_0|D3DSP_WRITEMASK_1|D3DSP_WRITEMASK_2|D3DSP_WRITEMASK_3)
#define D3DPSP_WRITEMASK_10  (D3DSP_WRITEMASK_0|D3DSP_WRITEMASK_1)
#define D3DPSP_WRITEMASK_32  (D3DSP_WRITEMASK_2|D3DSP_WRITEMASK_3)

// Source and destination parameter token
#define D3DPS_REGNUM_MASK(_Num)   ( (1L<<31) | ((_Num)&D3DSP_REGNUM_MASK) )
#define D3DPS_DST(_Num)           ( D3DPS_REGNUM_MASK(_Num) | D3DSPR_TEMP | D3DPSP_WRITEMASK_ALL )
#define D3DPS_SRC_TEMP(_Num)      ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_TEMP )
#define D3DPS_SRC_INPUT(_Num)     ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_INPUT )
#define D3DPS_SRC_CONST(_Num)     ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_CONST )
#define D3DPS_SRC_TEXTURE(_Num)   ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_TEXTURE )
#define D3DVS_SRC_ADDR(_Num)      ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_ADDR )
#define D3DVS_SRC_RASTOUT(_Num)   ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_RASTOUT )
#define D3DVS_SRC_ATTROUT(_Num)   ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_ATTROUT )
#define D3DVS_SRC_TEXCRDOUT(_Num) ( D3DPS_REGNUM_MASK(_Num) | D3DSP_NOSWIZZLE | D3DSPR_TEXCRDOUT )


// Temp destination registers
#define D3DS_DR0   D3DPS_DST(0)
#define D3DS_DR1   D3DPS_DST(1)
#define D3DS_DR2   D3DPS_DST(2)
#define D3DS_DR3   D3DPS_DST(3)
#define D3DS_DR4   D3DPS_DST(4)
#define D3DS_DR5   D3DPS_DST(5)
#define D3DS_DR6   D3DPS_DST(6)
#define D3DS_DR7   D3DPS_DST(7)

// Temp source registers
#define D3DS_SR0   D3DPS_SRC_TEMP(0)
#define D3DS_SR1   D3DPS_SRC_TEMP(1)
#define D3DS_SR2   D3DPS_SRC_TEMP(2)
#define D3DS_SR3   D3DPS_SRC_TEMP(3)
#define D3DS_SR4   D3DPS_SRC_TEMP(4)
#define D3DS_SR5   D3DPS_SRC_TEMP(5)
#define D3DS_SR6   D3DPS_SRC_TEMP(6)
#define D3DS_SR7   D3DPS_SRC_TEMP(7)

// Texture parameters
#define D3DS_T0   D3DPS_SRC_TEXTURE(0)
#define D3DS_T1   D3DPS_SRC_TEXTURE(1)
#define D3DS_T2   D3DPS_SRC_TEXTURE(2)
#define D3DS_T3   D3DPS_SRC_TEXTURE(3)
#define D3DS_T4   D3DPS_SRC_TEXTURE(4)
#define D3DS_T5   D3DPS_SRC_TEXTURE(5)
#define D3DS_T6   D3DPS_SRC_TEXTURE(6)
#define D3DS_T7   D3DPS_SRC_TEXTURE(7)

// Constant (factor) source parameters
#define D3DS_C0     D3DPS_SRC_CONST(0)
#define D3DS_C1     D3DPS_SRC_CONST(1)
#define D3DS_C2     D3DPS_SRC_CONST(2)
#define D3DS_C3     D3DPS_SRC_CONST(3)
#define D3DS_C4     D3DPS_SRC_CONST(4)
#define D3DS_C5     D3DPS_SRC_CONST(5)
#define D3DS_C6     D3DPS_SRC_CONST(6)
#define D3DS_C7     D3DPS_SRC_CONST(7)

// Interated source parameters (0==Diffuse, 1==specular)
#define D3DS_V0     D3DPS_SRC_INPUT(0)
#define D3DS_V1     D3DPS_SRC_INPUT(1)




#endif // D3DUTIL_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\fillrate.cpp ===
//-----------------------------------------------------------------------------
// FILE: FILLRATE.CPP
//
// Desc: a stupid fillrate test
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <stdio.h>
#include <assert.h>

#include <d3d8perf.h>

// don't use the VisibilityTest apis
// #define NO_VIS_TEST

#include "utils.h"
#include "inifile.h"
#include "fillrate.h"

/*
 * globals
 */
IDirect3DDevice8       *g_pDev = NULL;                  // our device
IDirect3DVertexBuffer8 *g_pVB = NULL;                   // our vertex buffer
IDirect3DBaseTexture8  *g_pTexture[4] = { NULL };       // 4 textures
IDirect3DSurface8      *g_pBackBuffer = NULL;

DWORD                   g_ShaderHandle = 0;             // pixel shader handle

DWORD                   g_dwFVFSize;                    // FVF size

UINT                    g_cindices = 0;                 // count of indices
WORD*                   g_pindices = NULL;              // indices allocation

HANDLE                  g_hInpDevice = NULL;            // input device

CScrText                g_scrtext;                      // text helper
CIniFile                g_inifile("d:\\fillrate.ini");  // Ini file

bool                    g_fRedrawScreen = true;         // refresh screen?
bool                    g_fdumpZ = false;               // dump Z val

FRSETTINGS              g_var = {0};                    // current settings

struct
{
    LPCSTR szDesc;
    void (*pfnTest)();
} g_rgTests[] =
{
    { "Current",        DoQuickTimedTest },
    { "MultiSample",    DoMultiSampleTimedTest },
    { "FillRate",       DoCompleteTimedTest },
    { "Texture Test",   DoTextureTest },
};
UINT g_iCurTest = 0;

//=========================================================================
// Init Direct3d
//=========================================================================
bool InitD3D()
{
    static D3DPRESENT_PARAMETERS d3dppCur = {0};
    D3DPRESENT_PARAMETERS d3dpp = {0};

    // Set the screen mode.
    d3dpp.BackBufferWidth                   = UINT(g_var.screenwidth);
    d3dpp.BackBufferHeight                  = UINT(g_var.screenheight);
    d3dpp.BackBufferFormat                  = g_var.BackBufferFormat;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.EnableAutoDepthStencil            = !!g_var.AutoDepthStencilFormat;
    d3dpp.AutoDepthStencilFormat            = g_var.AutoDepthStencilFormat;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.FullScreen_RefreshRateInHz        = 60;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.Flags                             = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;

    if(g_var.MSType != D3DMULTISAMPLE_NONE)
        d3dpp.MultiSampleType = (D3DMULTISAMPLE_TYPE)((DWORD)(g_var.MSType) | (DWORD)(g_var.MSFormat));

    // if nothing has changed - don't reinit
    if(!memcmp(&d3dppCur, &d3dpp, sizeof(D3DPRESENT_PARAMETERS)))
        return true;
    d3dppCur = d3dpp;

    if(g_pDev)
    {
        if(g_ShaderHandle)
        {
            CheckHR(g_pDev->SetPixelShader(0));
            CheckHR(g_pDev->DeletePixelShader(g_ShaderHandle));
            g_ShaderHandle = 0;
        }

        // make sure everything is freed
        RELEASE(g_pVB);
        for(int itex = 0; itex < 4; itex++)
            RELEASE(g_pTexture[itex]);

        RELEASE(g_pBackBuffer);
        RELEASE(g_pDev);
    }

    // Create the device.
    if(Direct3D_CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL,
        NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &g_pDev))
    {
        CheckHR(E_FAIL);
        return false;
    }

    D3DDevice_GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &g_pBackBuffer);
    return true;
}

//=========================================================================
// Fill a volume texture with shtuff
//=========================================================================
void FillTextureBits3D(D3DLOCKED_BOX *plockVol,
    D3DFORMAT d3dFormat, DWORD dwHeight, DWORD dwWidth, DWORD dwDepth)
{
    DWORD dwBits = BitsPerPixelOfD3DFORMAT(d3dFormat);

    assert(!IsLinearFormat(d3dFormat));

    BYTE *pBits = (BYTE *)plockVol->pBits;
    for(DWORD d = 0; d < dwDepth; d++)
    {
        for(DWORD y = 0; y < dwHeight; y++)
        {
            for(DWORD x = 0; x < dwWidth; x++)
            {
                DWORD c = (~y & 1) * (y + 1) * 0xff / dwHeight;
                DWORD c2 = d * 0xff / (dwDepth - 1);

                switch(dwBits)
                {
                case 4:
                    x++;
                case 8:
                    *pBits++ = LOBYTE(c);
                    break;
                case 16:
                    *(WORD *)pBits = MAKEWORD(c2, c);
                    pBits += 2;
                    break;
                case 32:
                    *(DWORD *)pBits = MAKELONG(MAKEWORD(c2, c), MAKEWORD(c2, c));
                    pBits += 4;
                    break;
                default:
                    CheckHR(E_FAIL);
                    break;
                }
            }
        }
    }
}

//=========================================================================
// Fill a 2D cubemap face or texture with shtuff
//=========================================================================
void FillTextureBits(D3DLOCKED_RECT *plockRect,
    D3DFORMAT d3dFormat, DWORD dwHeight, DWORD dwWidth)
{
    bool fIsLinear = IsLinearFormat(d3dFormat);
    DWORD dwBits = BitsPerPixelOfD3DFORMAT(d3dFormat);
    DWORD dwLine = (DWORD)plockRect->pBits;

    for (DWORD y = 0; y < dwHeight; y++)
    {
        DWORD dwAddr = dwLine;
        DWORD c = (~y & 1) * (y + 1) * 0xff / dwHeight;

        for (DWORD x = 0; x < dwWidth; x++)
        {
            switch(dwBits)
            {
            case 4:
                *(BYTE *)dwAddr = LOBYTE(c);
                dwAddr += 1;
                x++;
                break;
            case 8:
                *(BYTE *)dwAddr = LOBYTE(c);
                dwAddr += 1;
                break;
            case 16:
                *(WORD *)dwAddr = MAKEWORD(c, c);
                dwAddr += 2;
                break;
            case 32:
                *(DWORD *)dwAddr = MAKELONG(MAKEWORD(c, c), MAKEWORD(c, c));
                dwAddr += 4;
                break;
            }
        }

        // pitch is only valid for linear textures
        if(fIsLinear)
            dwLine += plockRect->Pitch;
        else
            dwLine += dwWidth * dwBits / 8;
    }
}

//=========================================================================
// Create a texture
//=========================================================================
IDirect3DBaseTexture8 *MyCreateTexture(D3DRESOURCETYPE d3dtype,
    D3DFORMAT d3dFormat, DWORD dwWidth, DWORD dwHeight)
{
    IDirect3DBaseTexture8 *pTexRet = NULL;

    if(d3dtype == D3DRTYPE_TEXTURE)
    {
        D3DLOCKED_RECT lockRect;
        IDirect3DTexture8 *pTexture = NULL;

        CheckHR(g_pDev->CreateTexture(dwWidth, dwHeight, 1, 0, d3dFormat,
            D3DPOOL_MANAGED, &pTexture));

        CheckHR(pTexture->LockRect(0, &lockRect, NULL, 0));
        FillTextureBits(&lockRect, d3dFormat, dwHeight, dwWidth);
        CheckHR(pTexture->UnlockRect(0));

        pTexRet = pTexture;
    }
    else if(d3dtype == D3DRTYPE_CUBETEXTURE)
    {
        D3DLOCKED_RECT lockRect;
        IDirect3DCubeTexture8 *pCubeTexture = NULL;

        CheckHR(g_pDev->CreateCubeTexture(dwWidth, 1, 0, d3dFormat,
            D3DPOOL_MANAGED, &pCubeTexture));

        for(int iFace = 0; iFace < D3DCUBEMAP_FACE_NEGATIVE_Z; iFace++)
        {
            D3DCUBEMAP_FACES cmFace = (D3DCUBEMAP_FACES)iFace;

            CheckHR(pCubeTexture->LockRect(cmFace, 0, &lockRect, NULL, 0));
            FillTextureBits(&lockRect, d3dFormat, dwHeight, dwWidth);
            CheckHR(pCubeTexture->UnlockRect(cmFace, 0));
        }

        pTexRet = pCubeTexture;
    }
    else
    {
        assert(d3dtype == D3DRTYPE_VOLUMETEXTURE);

        D3DLOCKED_BOX lockVol;
        IDirect3DVolumeTexture8 *pVolumeTexture = NULL;

        CheckHR(g_pDev->CreateVolumeTexture(dwWidth, dwHeight, dwHeight, 1, 0,
            d3dFormat, D3DPOOL_MANAGED, &pVolumeTexture));

        CheckHR(pVolumeTexture->LockBox(0, &lockVol, NULL, 0));
        FillTextureBits3D(&lockVol, d3dFormat, dwHeight, dwWidth, dwWidth);
        CheckHR(pVolumeTexture->UnlockBox(0));

        pTexRet = pVolumeTexture;
    }

   return pTexRet;
}

//=========================================================================
// Create a quadlist vb with X quads and decreasing z values
//=========================================================================
void CreateQuadList(int nquads)
{
    RELEASE(g_pVB);

    if(g_cindices)
    {
        delete [] g_pindices;
        g_cindices = 0;
    }

    g_dwFVFSize = D3DXGetFVFVertexSize(g_var.FVF);

    if(g_var.verboselevel >= 2)
        dprintf("FVF:0x%08lx, FVFSize: %d\n", g_var.FVF, g_dwFVFSize);

    UINT VBLength = g_dwFVFSize * 4 * nquads;

    CheckHR(g_pDev->CreateVertexBuffer(VBLength,
        D3DUSAGE_WRITEONLY, g_var.FVF, D3DPOOL_MANAGED, &g_pVB));

    float *pVerts;
    CheckHR(g_pVB->Lock(0, g_dwFVFSize, (BYTE **)&pVerts, 0));

    float texscale = g_var.rgtex[0].type && IsLinearFormat(g_var.rgtex[0].d3dFormat) ?
        g_var.rgtex[0].texsize : 1.0f;

    float dz = 1.0f / (nquads * 2);
    float zval = 1.0f - dz;
    for(int iquad = 0; iquad < nquads; iquad++, zval -= dz)
    {
        for(int y = 0; y <= 1; y++)
        {
            for(int x = 0; x <= 1; x++)
            {
                D3DXVECTOR4 pos;
                D3DXVECTOR4 tex0;

                // position
                pos.x = g_var.quadx + x * g_var.quadwidth;
                pos.y = g_var.quady + y * g_var.quadheight;
                pos.z = zval;
                pos.w = 1.0f;

                // texture coordinates
                if(g_var.rotatetex)
                {
                    tex0.x = (1.0f - y) * texscale;
                    tex0.y = x * texscale;
                }
                else
                {
                    tex0.x = x * texscale;
                    tex0.y = y * texscale;
                }
                tex0.z = (1.0f - x) * texscale;
                tex0.w = 1.0f;

                // diffuse color
                DWORD diffuse = D3DCOLOR_COLORVALUE(tex0.x,
                    tex0.y, 1.0f - tex0.x, 2.0f / 0xff);

                if(g_var.FVF & D3DFVF_XYZRHW)
                {
                    *(D3DXVECTOR4 *)pVerts = pos;
                    pVerts += 4;
                }
                else if(g_var.FVF & D3DFVF_XYZ)
                {
                    *(D3DXVECTOR3 *)pVerts = *(D3DXVECTOR3 *)&pos;
                    pVerts += 3;
                }

                if(g_var.FVF & D3DFVF_NORMAL)
                {
                    *(D3DXVECTOR3 *)pVerts = D3DXVECTOR3(0, .707f, .707f);
                    pVerts += 3;
                }

                if(g_var.FVF & D3DFVF_DIFFUSE)
                    *(DWORD *)pVerts++ = diffuse;

                if(g_var.FVF & D3DFVF_SPECULAR)
                    *(DWORD *)pVerts++ = ~diffuse;

                // Texture coordinates
                UINT uNumTexCoords = (((g_var.FVF) & D3DFVF_TEXCOUNT_MASK) >> D3DFVF_TEXCOUNT_SHIFT);
                UINT uTextureFormats = g_var.FVF >> 16;

                if(uTextureFormats)
                {
                    for(UINT i = 0; i < uNumTexCoords; i++)
                    {
                        switch(uTextureFormats & 3)
                        {
                        case D3DFVF_TEXTUREFORMAT1:     // u
                            *pVerts++ = tex0.x;
                            break;
                        case D3DFVF_TEXTUREFORMAT2:     // u,v
                            *(D3DXVECTOR2 *)pVerts = *(D3DXVECTOR2 *)&tex0;
                            pVerts += 2;
                            break;
                        case D3DFVF_TEXTUREFORMAT3:     // s,t,r
                            *(D3DXVECTOR3 *)pVerts = *(D3DXVECTOR3 *)&tex0;
                            pVerts += 3;
                            break;
                        case D3DFVF_TEXTUREFORMAT4:     // s,t,r,q
                            *(D3DXVECTOR4 *)pVerts = tex0;
                            pVerts += 4;
                            break;
                        }

                        uTextureFormats >>= 2;
                    }
                }
                else while(uNumTexCoords--)
                {
                    // u,v
                    *(D3DXVECTOR2 *)pVerts = *(D3DXVECTOR2 *)&tex0;
                    pVerts += 2;
                }
            }
        }
    }

    CheckHR(g_pVB->Unlock());
    g_pVB->MoveResourceMemory(D3DMEM_VIDEO);

    // create out index buffer
    g_cindices = nquads * 4;
    g_pindices = new WORD [g_cindices];

    WORD *pindices = g_pindices;

    for(iquad = 0; iquad < nquads; iquad++)
    {
        *pindices++ = iquad * 4 + 0;
        *pindices++ = iquad * 4 + 1;
        *pindices++ = iquad * 4 + 3;
        *pindices++ = iquad * 4 + 2;
    }
}

//=========================================================================
// Initialize fillrate app
//=========================================================================
bool InitFR(bool freadINIFile)
{
    if(freadINIFile && !ReadFRIniFile())
        dprintf("%s not found", g_inifile.GetFileName());

    // init d3d
    if(!InitD3D())
    {
        dprintf("InitD3D failed.\n");
        return false;
    }

    CheckHR(g_pDev->SetRenderState(D3DRS_SWATHWIDTH, g_var.SwathWidth));
    CheckHR(g_pDev->SetRenderState(D3DRS_FILLMODE, g_var.d3dfillmode));
    CheckHR(g_pDev->SetRenderState(D3DRS_COLORWRITEENABLE, g_var.colorwriteenable));

    CheckHR(g_pDev->SetRenderState(D3DRS_ZENABLE, g_var.zenable));
    CheckHR(g_pDev->SetRenderState(D3DRS_ZWRITEENABLE, g_var.zwriteenable));
    CheckHR(g_pDev->SetRenderState(D3DRS_ZFUNC, g_var.d3dcmpfunc));

    CheckHR(g_pDev->SetRenderState(D3DRS_ALPHABLENDENABLE, g_var.alphablendenable));
    CheckHR(g_pDev->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA));
    CheckHR(g_pDev->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA));

    CheckHR(g_pDev->SetRenderState(D3DRS_ALPHATESTENABLE, g_var.alphatestenable));
    CheckHR(g_pDev->SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_ALWAYS));
    CheckHR(g_pDev->SetRenderState(D3DRS_ALPHAREF, 0x00000001));

    if(g_var.userpixelshader)
        CheckHR(g_pDev->CreatePixelShader(&g_var.shaderdef, &g_ShaderHandle));

    for(int itex = 0; itex < 4; itex++)
    {
        RELEASE(g_pTexture[itex]);

        if(g_var.rgtex[itex].type)
        {
            assert(g_var.rgtex[itex].type < TEX_Max);
            g_var.rgtex[itex].type = min(g_var.rgtex[itex].type, TEX_Max - 1);

            static const D3DRESOURCETYPE rgrestype[] =
                { D3DRTYPE_TEXTURE, D3DRTYPE_CUBETEXTURE, D3DRTYPE_VOLUMETEXTURE };
            assert(TEX_2d == 1 && TEX_Cubemap == 2 && TEX_Volume == 3);

            g_pTexture[itex] = MyCreateTexture(
                rgrestype[g_var.rgtex[itex].type - 1],
                g_var.rgtex[itex].d3dFormat,
                g_var.rgtex[itex].texsize,
                g_var.rgtex[itex].texsize);

            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_MINFILTER, g_var.rgtex[itex].filtertype));
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_MAGFILTER, g_var.rgtex[itex].filtertype));

            // Set the texture stage states appropriately
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_COLORARG1, D3DTA_TEXTURE));
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_COLOROP, g_var.ColorOp));
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_COLORARG2, D3DTA_DIFFUSE));

            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_ALPHAARG1, D3DTA_TEXTURE));
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_ALPHAOP, g_var.AlphaOp));
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE));
        }
        else
        {
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_COLOROP, D3DTOP_DISABLE));
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_ALPHAOP, D3DTOP_DISABLE));

            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_MINFILTER, D3DTEXF_LINEAR));
            CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_MAGFILTER, D3DTEXF_LINEAR));
        }

        CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP));
        CheckHR(g_pDev->SetTextureStageState(itex, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP));
    }

    CreateQuadList(g_var.overdraw);
    return true;
}

//=========================================================================
// Dump the first entry in the z buffer
//=========================================================================
void DumpZ()
{
    D3DLOCKED_RECT lockRect;
    D3DSURFACE_DESC desc;
    IDirect3DSurface8 *pZBuffer = NULL;

    if(!g_var.AutoDepthStencilFormat)
        return;

    CheckHR(g_pDev->GetDepthStencilSurface(&pZBuffer));

    CheckHR(pZBuffer->LockRect(&lockRect, NULL, D3DLOCK_READONLY));
    CheckHR(pZBuffer->GetDesc(&desc));

    DWORD dwVal;
    switch(desc.Format)
    {
    case D3DFMT_LIN_D16:
    case D3DFMT_D16:
        // v = z[15:0]  0.0 to 65535.0
        dprintf("D3DFMT_D16: 0x%08lx", *(WORD *)lockRect.pBits);
        break;
    case D3DFMT_LIN_D24S8:
    case D3DFMT_D24S8:
        // v = z[24:0] 0.0 to 16,777,215.0  (0 to FFFFFF)
        dwVal = (*(DWORD *)lockRect.pBits);
        dprintf("D3DFMT_D24S8: 0x%08lx:%02lx %.2f", dwVal >> 8, LOBYTE(dwVal),
            (dwVal >> 8) / 16777215.0f);
        // 0x3ffffffe, 0x7ffffffe, 0xbffffffe
        // 0.25f, 0.75f, 0.5f
        break;
    case D3DFMT_LIN_F16:
    case D3DFMT_F16:
        // e4m12
        // e = z[15:12]
        // m = z[11:0]
        // value = 2^(e-7) * (1 + m/4096)
        // value = 0.0 when e == 0 and m == 0
        dprintf("D3DFMT_F16: 0x%08lx", *(WORD *)lockRect.pBits);
        break;
    case D3DFMT_LIN_F24S8:
    case D3DFMT_F24S8:
        // e8m16
        // e = z[23:16]
        // m = z[15:0]
        // value = 2^(e-127) * (1 + m/65536)
        // value = 0.0 when e == 0 and m == 0
        dprintf("D3DFMT_F24S8: 0x%08lx", *(DWORD *)lockRect.pBits);
        break;
    }

    pZBuffer->UnlockRect();

    RELEASE(pZBuffer);
}

//=========================================================================
// render the quads X # of times
//=========================================================================
void RenderFrame(int overdraw)
{
    UINT coverdrawverts = overdraw * 4;

    // clear stuff
    DWORD dwCFlags = g_var.clearflags;
    if(!g_var.AutoDepthStencilFormat)
        dwCFlags &= ~(D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);

    CheckHR(g_pDev->Clear(0, NULL, dwCFlags, g_var.cclearval,
        g_var.zclearval, g_var.sclearval));

    // begin scene
    CheckHR(g_pDev->BeginScene());

    // set textures
    for(int itex = 0; itex < 4; itex++)
        CheckHR(g_pDev->SetTexture(itex, g_pTexture[itex]));

    CheckHR(g_pDev->SetVertexShader(g_var.FVF));
    CheckHR(g_pDev->SetStreamSource(0, g_pVB, g_dwFVFSize));

    CheckHR(g_pDev->SetPixelShader(g_ShaderHandle));

    if(g_var.zenable && g_var.primez)
    {
        // prime the z buffer to 0.5f
        CheckHR(g_pDev->SetRenderState(D3DRS_ZFUNC, g_var.primezcmpfunc));
        CheckHR(g_pDev->SetRenderState(D3DRS_ZWRITEENABLE, TRUE));

        // draw one quad (not the first one) to prime the z buffer
        CheckHR(g_pDev->DrawIndexedVertices(D3DPT_QUADLIST, 4, g_pindices + 4));
        coverdrawverts -= 4;

        CheckHR(g_pDev->SetRenderState(D3DRS_ZFUNC, g_var.d3dcmpfunc));
        CheckHR(g_pDev->SetRenderState(D3DRS_ZWRITEENABLE, g_var.zwriteenable));
    }

    while(coverdrawverts)
    {
        UINT VertexCount = min(g_cindices, coverdrawverts);
        CheckHR(g_pDev->DrawIndexedVertices(D3DPT_QUADLIST, VertexCount, g_pindices));

        coverdrawverts -= VertexCount;
    }

    if(g_fdumpZ)
        DumpZ();

    CheckHR(g_pDev->EndScene());
}

//=========================================================================
// Handle joystick input
//=========================================================================
void HandleInput(DWORD dwTicks)
{
    if(g_inifile.FileChanged())
    {
        dprintf("g_inifile.FileChanged()\n");
        InitFR(true);

        if(g_var.runtestonreload)
            g_var.runtestonreload = 2;

        g_fRedrawScreen = true;
    }

    // If we don't have a device don't let them start any tests.
    // They're going to have to change their settings in fillrate.ini
    // and just try again.
    if(!g_pDev)
        return;

    if(!g_hInpDevice)
        g_hInpDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL);

    if(g_hInpDevice)
    {
        XINPUT_STATE xinpstate;
        static XINPUT_STATE xinpstatelast;
#define FButtonDown(_btn) \
        (xinpstate.Gamepad.bAnalogButtons[_btn] && \
            (!xinpstate.Gamepad.bAnalogButtons[_btn] != !xinpstatelast.Gamepad.bAnalogButtons[_btn]))

        XInputGetState(g_hInpDevice, &xinpstate);

        if((g_var.runtestonreload == 2) ||
            FButtonDown(XINPUT_GAMEPAD_A))
        {
            g_var.runtestonreload = 1;

            // run current test
            g_rgTests[g_iCurTest].pfnTest();

            // draw one frame with current settings
            RenderFrame(1);

            // flip that dude to the front
            CheckHR(g_pDev->Present(NULL, NULL, NULL, NULL));

            g_scrtext.drawtext(g_var.verboselevel >= 1);
            g_fRedrawScreen = false;
        }

#if DBG

        if(FButtonDown(XINPUT_GAMEPAD_B))
        {
            D3DPUSHBUFFERINFO PushBufferInfo;
            D3DPERF_GetPushBufferInfo(&PushBufferInfo);

            D3DPERF_Dump();
            D3DPERF_Reset();
        }

#endif

        if(FButtonDown(XINPUT_GAMEPAD_LEFT_TRIGGER))
        {
            g_iCurTest = (g_iCurTest + ARRAYSIZE(g_rgTests) - 1) % ARRAYSIZE(g_rgTests);
            g_fRedrawScreen = true;
        }

        if(FButtonDown(XINPUT_GAMEPAD_RIGHT_TRIGGER))
        {
            g_iCurTest = (g_iCurTest + 1) % ARRAYSIZE(g_rgTests);
            g_fRedrawScreen = true;
        }

        if(FButtonDown(XINPUT_GAMEPAD_X))
        {
            InitFR(true);
            g_fRedrawScreen = true;
        }

        if(FButtonDown(XINPUT_GAMEPAD_Y))
        {
            // toggle wireframe and solid fill modes
            g_var.d3dfillmode = (g_var.d3dfillmode == D3DFILL_WIREFRAME) ?
                D3DFILL_SOLID : D3DFILL_WIREFRAME;
            CheckHR(g_pDev->SetRenderState(D3DRS_FILLMODE, g_var.d3dfillmode));
            g_fRedrawScreen = true;
        }

        xinpstatelast = xinpstate;
    }
}

//=========================================================================
// Run through a suite of multisample/supersample tests
//=========================================================================
void DoMultiSampleTimedTest()
{
    D3DMULTISAMPLE_TYPE rgMSType[] =
    {
        D3DMS_NONE,
        D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR,
        D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX,
        D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR,
        D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN,
        D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN,
        D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR,
        D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR,
        D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR,
        D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN,
        D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN
    };
    static const int cMSTypes = ARRAYSIZE(rgMSType);

    D3DFORMAT rgBackBuf[] = { D3DFMT_R5G6B5, D3DFMT_X8R8G8B8 };
    static const cBBufs = ARRAYSIZE(rgBackBuf);

    g_scrtext.cls();
    for(int iBuf = 0; iBuf < cBBufs; iBuf++)
    {
        g_scrtext.printf("BackBufFmt: %-38s %-8s %-8s %s",
            GetD3DFormatStr(rgBackBuf[iBuf]), "MPix/s", "fps", "frames");

        for(int iType = 0; iType < cMSTypes; iType++)
        {
            TIMETESTRESULTS ttres;

            g_var.MSType = rgMSType[iType];
            g_var.BackBufferFormat = rgBackBuf[iBuf];

            InitFR(false);
            DoTimedTest(&ttres);

            g_scrtext.printf("    %-45s %7.2f  %8.2f  %d",
                GetMultiSampleStr(rgMSType[iType]),
                ttres.fillrate, ttres.fps, ttres.cFrames);
        }
    }

    // restore settings from ini file
    InitFR(true);
}

//=========================================================================
// Do a quick test with the current settings
//=========================================================================
void DoQuickTimedTest()
{
    TIMETESTRESULTS ttres;

    DoTimedTest(&ttres);

    g_scrtext.cls();
    DumpCurrentSettings();

    g_scrtext.printf(" ");
    g_scrtext.printf("fillrate: %.2fMP/s",  ttres.fillrate);
    g_scrtext.printf("fps:      %.2f",      ttres.fps);
    g_scrtext.printf("frames:   %d",        ttres.cFrames);
    g_scrtext.printf("time:     %.2fms",    ttres.TimeTillIdle);
    g_scrtext.printf("pixels:   %I64u",     ttres.cNumPixelsDrawn);
}

//=========================================================================
// Texture fillrate test
//=========================================================================
void DoTextureTest()
{
    D3DFORMAT rgFormats[] =
    {
        D3DFMT_A4R4G4B4,
        D3DFMT_A8R8G8B8,
        D3DFMT_DXT1,
        D3DFMT_DXT2,
        D3DFMT_P8,
        D3DFMT_LIN_A8R8G8B8
    };
    int rgTexSize[] = { 1, 16, 256 };
    float rgResults[ARRAYSIZE(rgTexSize)];

    g_scrtext.cls();

    g_scrtext.printf("%-20s %-10s %-10s %-10s",
        "texturefmt", "1x1", "16x16", "256x256");

    for(int id3dformat = 0; id3dformat < ARRAYSIZE(rgFormats); id3dformat++)
    {
        char szBuf[128];

        szBuf[0] = 0;
        for(int itexsize = 0; itexsize < ARRAYSIZE(rgTexSize); itexsize++)
        {
            g_var.rgtex[0].type = TEX_2d;
            g_var.rgtex[0].texsize = rgTexSize[itexsize];
            g_var.rgtex[0].d3dFormat = rgFormats[id3dformat];

            InitFR(false);
            rgResults[itexsize] = DoTimedTest();
        }

        g_scrtext.printf(
            "%-20s %-10.2f %-10.2f %-10.2f",
            GetD3DFormatStr(g_var.rgtex[0].d3dFormat),
            rgResults[0], rgResults[1], rgResults[2]);
    }

    // restore settings from ini file
    InitFR(true);
}

//=========================================================================
// Run through a suite of fillrate tests
//=========================================================================
void DoCompleteTimedTest()
{
    D3DFORMAT rgFormats[] = { D3DFMT_DXT1, D3DFMT_A8R8G8B8, D3DFMT_A4R4G4B4 };

    g_scrtext.cls();

    g_scrtext.printf(
        "zwrite zread texturefmt      texturesize fillrate  (alphablendenable:%d)",
        g_var.alphablendenable);

    for(int id3dformat = 0; id3dformat < ARRAYSIZE(rgFormats); id3dformat++)
    {
        for(int texsize = 0; texsize <= 512; texsize += 256)
        {
            for(int zenable = 0; zenable < 2; zenable++)
            {
                for(int zwriteenable = 0; zwriteenable < 2; zwriteenable++)
                {
                    g_var.zenable = !!zenable;
                    g_var.zwriteenable = !!zwriteenable;

                    g_var.d3dcmpfunc = D3DCMP_NOTEQUAL;

                    g_var.rgtex[0].texsize = texsize;
                    g_var.rgtex[0].type = !!texsize;
                    g_var.rgtex[0].d3dFormat = rgFormats[id3dformat];

                    if(!g_var.zenable && zwriteenable)
                        continue;

                    if(!g_var.rgtex[0].type && id3dformat)
                        continue;

                    InitFR(false);
                    float fResult = DoTimedTest();

                    g_scrtext.printf(
                        "%-6d %-5d %-15s %-11d %.2f",
                        g_var.zwriteenable,
                        g_var.zenable,
                        texsize ? GetD3DFormatStr(g_var.rgtex[0].d3dFormat) : "",
                        texsize,
                        fResult);
                }
            }
        }
    }

    // restore settings from ini file
    InitFR(true);
}

//=========================================================================
// Dump the current options
//=========================================================================
void DumpCurrentSettings()
{
    g_scrtext.printf("Btn A) run '%s' test.", g_rgTests[g_iCurTest].szDesc);

    g_scrtext.printf(
        "AutoDepthStencilFormat:%s "
        "BackBufferFormat:%s ",
        g_var.AutoDepthStencilFormat ? GetD3DFormatStr(g_var.AutoDepthStencilFormat) : "none",
        GetD3DFormatStr(g_var.BackBufferFormat));

    g_scrtext.printf(
        "MultiSampleType:%s ",
        GetMultiSampleStr(g_var.MSType));

    g_scrtext.printf(
        "MultiSampleFormat:%s",
        GetMultiSampleStr(g_var.MSFormat));

    g_scrtext.printf(
        "zenable:%d "
        "z-write:%d "
        "d3dcmpfunc:%s",
        g_var.zenable,
        g_var.zenable && g_var.zwriteenable,
        GetD3DCMPStr(g_var.d3dcmpfunc));

    g_scrtext.printf(
        "alpha-blend:%d "
        "alpha-test:%d "
        "swathwidth:%d ",
        g_var.alphablendenable,
        g_var.alphatestenable,
        (g_var.SwathWidth == D3DSWATH_OFF) ? -1 : (0x8 << g_var.SwathWidth));

    g_scrtext.printf(
        "timeflags:%s%s",
        (g_var.timeflags & TIME_Render) ? "TIME_Render " : "",
        (g_var.timeflags & TIME_Present) ? "TIME_Present" : "");

    for(int itex = 0; itex < 4; itex++)
    {
        if(g_var.rgtex[itex].type)
        {
            g_scrtext.printf(
                "%d) texfmt:%s "
                "texel size (bytes):%0.1f "
                "texsize: %d",
                itex,
                GetD3DFormatStr(g_var.rgtex[itex].d3dFormat),
                BitsPerPixelOfD3DFORMAT(g_var.rgtex[itex].d3dFormat) / 8.0f,
                g_var.rgtex[itex].texsize);
        }
    }

    if(g_var.userpixelshader)
    {
        g_scrtext.printf(
            "CombinerCount:%d",
            g_var.shaderdef.PSCombinerCount & 0xf);

        UINT TexModes = g_var.shaderdef.PSTextureModes;
        for(int texmode = 0; texmode < 4; texmode++, TexModes >>= 5)
        {
            if(TexModes & 0x1f)
            {
                g_scrtext.printf( "  T%d Mode:%s",
                    texmode, GetTextureModeStr(TexModes & 0x1f));
            }
        }
    }
}

//=========================================================================
//
//=========================================================================
float EstimateTimeForScene()
{
    CTimer timer;
    int overdraw = min(10, g_var.overdraw);

    // update the screen
    RenderFrame(1);
    CheckHR(g_pDev->Present(NULL, NULL, NULL, NULL));

    // wait until everything is cleared out
    g_pDev->BlockUntilIdle();

    // start timing
    timer.Start();

    if(g_var.timeflags & TIME_Render)
        RenderFrame(10);
    if(g_var.timeflags & TIME_Present)
    {
        CheckHR(g_pDev->Present(NULL, NULL, NULL, NULL));
    }

    // wait until GPU is idle again
    g_pDev->BlockUntilIdle();

    // stop timer
    timer.Stop();

    return g_var.overdraw * timer.getTime() / overdraw;
}

//=========================================================================
// Do a timed test and spit out the results
//=========================================================================
float DoTimedTest(TIMETESTRESULTS *pttres)
{
    CTimer timer;
    int frames = 0;
    int visibilityindex = 0;
    float TimeTillDoneDrawing = 0;

    // wait until everything is cleared out
    g_pDev->BlockUntilIdle();

    int numberscenes = g_var.numberscenes;

    if(!numberscenes)
    {
        // if there isn't an explicit count of scenes to render
        // guesstimate the time required for each scene
        float fEstimatedTimePerScene = EstimateTimeForScene();

        // and figure out how many scenes to render
        numberscenes = int(g_var.testtime / fEstimatedTimePerScene);
    }

    // put an upper cap and lower bound on the number of scenes
    numberscenes = max(2, min(numberscenes, 2047));

    // start timing
    timer.Start();

    // render X number of scenes
    for(frames = 0; frames < numberscenes; frames++)
    {
#ifndef NO_VIS_TEST
        CheckHR(g_pDev->BeginVisibilityTest());
#endif

        if(g_var.timeflags & TIME_Render)
            RenderFrame(g_var.overdraw);
        if(g_var.timeflags & TIME_Present)
        {
            CheckHR(g_pDev->Present(NULL, NULL, NULL, NULL));
        }

#ifndef NO_VIS_TEST
        CheckHR(g_pDev->EndVisibilityTest(visibilityindex++));
#endif
    }

    TimeTillDoneDrawing = timer.getTime();

    // wait until GPU is idle again
    g_pDev->BlockUntilIdle();

    // stop timer
    timer.Stop();
    float TimeTillIdle = timer.getTime();

    // get count of pixels drawn
    UINT64 dwNumPixelsDrawn = 0;

#ifdef NO_VIS_TEST

    dwNumPixelsDrawn = (UINT64)g_var.screenwidth * (UINT64)g_var.screenheight *
        g_var.overdraw * frames;

#else

    for(int ivis = 0; ivis < visibilityindex; ivis++)
    {
        // Check the number of pixels drawn.
        UINT dwT;
        while(g_pDev->GetVisibilityTestResult(ivis, &dwT, NULL) == D3DERR_TESTINCOMPLETE)
            ;

        if(g_var.verboselevel >= 2)
            dprintf("pass:%d  %ld pixels\n", ivis, dwT);

        if(dwT == 0xffffffff)
            dwT = 0;
        dwNumPixelsDrawn += dwT;
    }

#endif

    /*
     * Calculate fillrate
     */
    float fillrate = 0.0f;

    if((g_var.timeflags & TIME_Present) == TIME_Present)
    {
        // if we're just calculating present fillrate the pixels count
        // should be fairly accurate.
        fillrate = dwNumPixelsDrawn / (TimeTillIdle * 1000.0f);
    }
    else
    {
        // get backbuffer size
        D3DSURFACE_DESC Desc;
        CheckHR(g_pBackBuffer->GetDesc(&Desc));

        // The visibility counters count the number of pixels drawn to the backbuffer
        // which is larger when multisampling. So your fillrate gets skewed.
        // So scale those buggers by the backbuffer size.
        float fScale = (Desc.Width * Desc.Height) / (g_var.screenwidth * g_var.screenheight);
        fillrate = dwNumPixelsDrawn / (TimeTillIdle * 1000.0f * fScale);

        if((g_var.timeflags & TIME_Render) == TIME_Render)
        {
            // For the render case verify that the fillrate numbers match what we think
            // they should be.
            float fillrate2 = g_var.screenwidth * g_var.screenheight *
                g_var.overdraw * frames / (TimeTillIdle * 1000.0f);

            if(fabsf(fillrate - fillrate2) > 1.0f)
            {
                dprintf("*** Fillrate numbers don't add up: %.2f != %.2f",
                    fillrate, fillrate2);
            }
        }
    }

    if(pttres)
    {
        pttres->fillrate = fillrate;
        pttres->fps = frames * 1000 / TimeTillIdle;
        pttres->cFrames = frames;
        pttres->TimeTillDoneDrawing = TimeTillDoneDrawing;
        pttres->TimeTillIdle = TimeTillIdle;
        pttres->cNumPixelsDrawn = dwNumPixelsDrawn;
    }

    return fillrate;
}

//=========================================================================
// macros to help read entries from the ini file
//=========================================================================
static const char g_szOpts[] = "options";
#define get_option_val(_var)          g_inifile.GetIniInt(g_szOpts, #_var, g_var._var)
#define get_option_valf(_var)         g_inifile.GetIniFloat(g_szOpts, #_var, g_var._var)
#define get_option_val3(_s, _var, _d) g_inifile.GetIniInt(_s, _var, _d)

//=========================================================================
// Read ini file and update all fr settings
//=========================================================================
bool ReadFRIniFile()
{
    if(!g_inifile.ReadFile())
        return false;

    if(g_ShaderHandle)
    {
        assert(g_pDev);
        CheckHR(g_pDev->SetPixelShader(0));
        CheckHR(g_pDev->DeletePixelShader(g_ShaderHandle));
        g_ShaderHandle = 0;
    }

    // read the verbose flag(s) first
    g_inifile.m_fverbose            = !!get_option_val3(g_szOpts, "verboseinireads", false);
    g_var.verboselevel              = get_option_val(verboselevel);

    g_var.runtestonreload           = !!get_option_val(runtestonreload);

    g_var.AutoDepthStencilFormat    = (D3DFORMAT)get_option_val(AutoDepthStencilFormat);
    g_var.BackBufferFormat          = (D3DFORMAT)get_option_val(BackBufferFormat);

    g_var.MSType                    = (D3DMULTISAMPLE_TYPE)get_option_val(MSType);
    g_var.MSFormat                  = (D3DMULTISAMPLE_TYPE)get_option_val(MSFormat);

    g_var.zenable                   = !!get_option_val(zenable);
    g_var.zwriteenable              = !!get_option_val(zwriteenable);
    g_var.d3dcmpfunc                = (D3DCMPFUNC)get_option_val(d3dcmpfunc);

    g_var.primez                    = !!get_option_val(primez);
    g_var.primezcmpfunc             =  (D3DCMPFUNC)get_option_val(primezcmpfunc);

    g_var.alphablendenable          = !!get_option_val(alphablendenable);
    g_var.alphatestenable           = !!get_option_val(alphatestenable);

    g_var.rotatetex                 = !!get_option_val(rotatetex);

    g_var.testtime                  = get_option_valf(testtime);
    g_var.numberscenes              = get_option_val(numberscenes);
    g_var.timeflags                 = get_option_val(timeflags);

    g_var.SwathWidth                = (D3DSWATHWIDTH)get_option_val(SwathWidth);

    g_var.colorwriteenable          = get_option_val(colorwriteenable);

    g_var.quadwidth                 = get_option_valf(quadwidth);
    g_var.quadheight                = get_option_valf(quadheight);

    g_var.quadx                     = (g_var.screenwidth - min(g_var.screenwidth, g_var.quadwidth)) / 2;
    g_var.quady                     = (g_var.screenheight - min(g_var.screenheight, g_var.quadheight)) / 2;
    g_var.quadx                     = get_option_valf(quadx);
    g_var.quady                     = get_option_valf(quady);

    g_var.FVF                       = get_option_val(FVF);

    g_var.clearflags                = get_option_val(clearflags);
    g_var.zclearval                 = get_option_valf(zclearval);
    g_var.sclearval                 = get_option_val(sclearval);
    g_var.cclearval                 = get_option_val(cclearval);

    g_var.userpixelshader           = !!get_option_val(userpixelshader);
    if(g_var.userpixelshader)
        ReadPixelShaderIni(&g_var.shaderdef);

    for(int itex = 0; itex < 4; itex++)
    {
        char szSect[128];
        _snprintf(szSect, sizeof(szSect), "texture%d", itex);

        g_var.rgtex[itex].type = get_option_val3(szSect, "type", TEX_None);
        g_var.rgtex[itex].texsize = get_option_val3(szSect, "texsize", 8);
        g_var.rgtex[itex].d3dFormat = (D3DFORMAT)get_option_val3(szSect, "d3dFormat", D3DFMT_DXT1);
        g_var.rgtex[itex].filtertype = (D3DTEXTUREFILTERTYPE)get_option_val3(szSect, "filtertype", D3DTEXF_LINEAR);
    }

    return true;
}

#if DBG

extern "C" { extern DWORD D3D__DeadlockTimeOutVal; }

#endif

//=========================================================================
// main
//=========================================================================
void __cdecl main()
{
#if DBG

    // bump the dbg deadlock timeout value to 20 seconds
    D3D__DeadlockTimeOutVal = 20000;

#endif

    /*
     * init vars
     */
    g_var.screenwidth = 640.0f;
    g_var.screenheight = 480.0f;

    g_var.quadwidth = 640;
    g_var.quadheight = 480;

    g_var.quadx = (g_var.screenwidth - min(g_var.screenwidth, g_var.quadwidth)) / 2;
    g_var.quady = (g_var.screenheight - min(g_var.screenheight, g_var.quadheight)) / 2;

    g_var.FVF = D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1;

    g_var.alphablendenable = false;
    g_var.alphatestenable = false;

    // default to drawing 10 seconds
    g_var.numberscenes = 0;
    g_var.overdraw = 100;
    g_var.testtime = 10000.0f;
    g_var.timeflags = TIME_Render;

    g_var.SwathWidth = D3DSWATH_128;

    g_var.colorwriteenable = D3DCOLORWRITEENABLE_ALL;

    g_var.ColorOp = D3DTOP_SELECTARG1;
    g_var.AlphaOp = D3DTOP_SELECTARG1;
    g_var.d3dfillmode = D3DFILL_SOLID;

    g_var.zenable = false;
    g_var.zwriteenable = false;

    g_var.d3dcmpfunc = D3DCMP_NOTEQUAL;

    g_var.primez = false;
    g_var.primezcmpfunc = D3DCMP_ALWAYS;

    g_var.BackBufferFormat = D3DFMT_A8R8G8B8;
    g_var.AutoDepthStencilFormat = D3DFMT_D24S8;

    g_var.clearflags = D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL;
    g_var.cclearval = 0x00006688;

    /*
     * Init fillrate
     */
    XInitDevices(0, NULL);

    if(!InitFR(true))
        return;

    DWORD dwLastTickCount = GetTickCount();
    for(;;)
    {
        DWORD dwTickCount = GetTickCount();
        DWORD dwTicks = dwTickCount - dwLastTickCount;

        dwLastTickCount = dwTickCount;

        HandleInput(dwTicks);

        if(g_pDev)
        {
            if(g_fRedrawScreen)
            {
                // clear back buffer
                RenderFrame(1);

                // swap that guy to the front
                CheckHR(g_pDev->Present(NULL, NULL, NULL, NULL));

                // clear new back buffer
                RenderFrame(1);

                // display current options on front buffer
                g_scrtext.cls();
                DumpCurrentSettings();
                g_scrtext.drawtext(g_var.verboselevel >= 1);

                g_fRedrawScreen = false;
            }
            else
            {
                // 33.3 fps baby!
                Sleep(30);
            }
        }
    }
}

//=========================================================================
// Initialize and create our pixel shader
//=========================================================================
void ReadPixelShaderIni(D3DPIXELSHADERDEF *pshaderdef)
{
    enum
    {
        SE_PSTextureModes,
        SE_PSDotMapping,
        SE_PSInputTexture,
        SE_PSCompareMode,
        SE_PSCombinerCount,
        SE_PSFinalCombinerConstant0,
        SE_PSFinalCombinerConstant1,
        SE_PSFinalCombinerInputsABCD,
        SE_PSFinalCombinerInputsEFG,
        SE_Max
    };

#define SE_ENTRY(_x) SE_##_x, #_x
    struct ShaderEntry
    {
        DWORD dwSectionID;
        LPCSTR szSectionName;
        LPCSTR rgkeys[4];
        int rgvals[4];
    } rgEntries[] =
    {
        { SE_ENTRY(PSTextureModes),             { "t0", "t1", "t2", "t3" } },
        { SE_ENTRY(PSDotMapping),               { "t0", "t1", "t2", "t3" } },
        { SE_ENTRY(PSInputTexture),             { "t2", "t3" } },
        { SE_ENTRY(PSCompareMode),              { "t0", "t1", "t2", "t3" } },
        { SE_ENTRY(PSCombinerCount),            { "count", "flags" } },
        { SE_ENTRY(PSFinalCombinerConstant0),   { "c" } },
        { SE_ENTRY(PSFinalCombinerConstant1),   { "c" } },
        { SE_ENTRY(PSFinalCombinerInputsABCD),  { "A", "B", "C", "D" } },
        { SE_ENTRY(PSFinalCombinerInputsEFG),   { "E", "F", "G", "flags" } },
    };

    enum
    {
        SSE_PSConstant0,
        SSE_PSConstant1,
        SSE_PSRGBInputs,
        SSE_PSAlphaInputs,
        SSE_PSRGBOutputs,
        SSE_PSAlphaOutputs,
        SSE_Max
    };

#define SSE_ENTRY(_x) SSE_##_x, #_x
    struct ShaderStageEntry
    {
        DWORD dwSectionID;
        LPCSTR szSectionName;
        LPCSTR rgkeys[4];
        int rgvals[4][8];
    } rgStageEntries[] =
    {
        { SSE_ENTRY(PSConstant0),       { "c" } },
        { SSE_ENTRY(PSConstant1),       { "c" } },
        { SSE_ENTRY(PSRGBInputs),       { "A", "B", "C", "D" } },
        { SSE_ENTRY(PSAlphaInputs),     { "A", "B", "C", "D" } },
        { SSE_ENTRY(PSRGBOutputs),      { "ab", "cd", "mux_sum", "flags" } },
        { SSE_ENTRY(PSAlphaOutputs),    { "ab", "cd", "mux_sum", "flags" } },
    };

    // read all the shader entries
    for(int iSE = 0; iSE < SE_Max; iSE++)
    {
        ShaderEntry *pse = &rgEntries[iSE];

        for(int ikey = 0; ikey < 4; ikey++)
        {
            if(pse->rgkeys[ikey])
            {
                int val = g_inifile.GetIniInt(pse->szSectionName, pse->rgkeys[ikey], -1);
                if(val != -1)
                {
                    pse->rgvals[ikey] = val;
                    if(g_var.verboselevel >= 2)
                    {
                        dprintf("%s.%s = 0x%lx\n",
                            pse->szSectionName,
                            pse->rgkeys[ikey],
                            val);
                    }
                }
            }
        }
    }

    // read all the shader stage entries
    for(int iSSE = 0; iSSE < SSE_Max; iSSE++)
    {
        char szKey[128];
        ShaderStageEntry *psse = &rgStageEntries[iSSE];

        for(int ikey = 0; ikey < 4; ikey++)
        {
            if(psse->rgkeys[ikey])
            {
                for(int istage = 0; istage < 8; istage++)
                {
                    _snprintf(szKey, sizeof(szKey), "%s%d", psse->rgkeys[ikey], istage);
                    int val = g_inifile.GetIniInt(psse->szSectionName, szKey, -1);
                    if(val != -1)
                    {
                        psse->rgvals[ikey][istage] = val;
                        if(g_var.verboselevel >= 2)
                        {
                            dprintf("%s.%s[%d] = 0x%lx\n",
                                psse->szSectionName,
                                psse->rgkeys[ikey],
                                istage,
                                val);
                        }
                    }
                }
            }
        }
    }

    ZeroMemory(pshaderdef, sizeof(*pshaderdef));

    /*---------------------------------------------------------------------------*/
    /*  Texture configuration - The following members of the D3DPixelShaderDef   */
    /*  structure define the addressing modes of each of the four texture stages */
    /*---------------------------------------------------------------------------*/
    pshaderdef->PSTextureModes = PS_TEXTUREMODES(
        rgEntries[SE_PSTextureModes].rgvals[0],
        rgEntries[SE_PSTextureModes].rgvals[1],
        rgEntries[SE_PSTextureModes].rgvals[2],
        rgEntries[SE_PSTextureModes].rgvals[3]);

    pshaderdef->PSDotMapping = PS_DOTMAPPING(
        rgEntries[SE_PSDotMapping].rgvals[0],
        rgEntries[SE_PSDotMapping].rgvals[1],
        rgEntries[SE_PSDotMapping].rgvals[2],
        rgEntries[SE_PSDotMapping].rgvals[3]);

    pshaderdef->PSInputTexture = PS_INPUTTEXTURE(
        rgEntries[SE_PSInputTexture].rgvals[0],
        rgEntries[SE_PSInputTexture].rgvals[1],
        rgEntries[SE_PSInputTexture].rgvals[2],  // 0 and 1 valid
        rgEntries[SE_PSInputTexture].rgvals[3]); // 0, 1, and 2 valid

    pshaderdef->PSCompareMode = PS_COMPAREMODE(
        rgEntries[SE_PSCompareMode].rgvals[0],
        rgEntries[SE_PSCompareMode].rgvals[1],
        rgEntries[SE_PSCompareMode].rgvals[2],
        rgEntries[SE_PSCompareMode].rgvals[3]);

    /*---------------------------------------------------------------------------------*/
    /*  Color combiners - The following members of the D3DPixelShaderDef structure     */
    /*  define the state for the eight stages of color combiners                       */
    /*---------------------------------------------------------------------------------*/
    pshaderdef->PSCombinerCount = PS_COMBINERCOUNT(
        rgEntries[SE_PSCombinerCount].rgvals[0],
        rgEntries[SE_PSCombinerCount].rgvals[1]);

    for(int istage = 0; istage < 8; istage++)
    {
        pshaderdef->PSConstant0[istage] = rgStageEntries[SSE_PSConstant0].rgvals[0][istage];
        pshaderdef->PSConstant1[istage] = rgStageEntries[SSE_PSConstant1].rgvals[0][istage];

        // R0_ALPHA is initialized to T0_ALPHA in stage0

        // a,b,c,d each contain a value from PS_REGISTER, PS_CHANNEL, and PS_INPUTMAPPING
        pshaderdef->PSRGBInputs[istage] = PS_COMBINERINPUTS(
            rgStageEntries[SSE_PSRGBInputs].rgvals[0][istage],      // A
            rgStageEntries[SSE_PSRGBInputs].rgvals[1][istage],      // B
            rgStageEntries[SSE_PSRGBInputs].rgvals[2][istage],      // C
            rgStageEntries[SSE_PSRGBInputs].rgvals[3][istage]);     // D

        // R0_ALPHA is initialized to T0_ALPHA in stage0
        pshaderdef->PSAlphaInputs[istage] = PS_COMBINERINPUTS(
            rgStageEntries[SSE_PSAlphaInputs].rgvals[0][istage],    // A
            rgStageEntries[SSE_PSAlphaInputs].rgvals[1][istage],    // B
            rgStageEntries[SSE_PSAlphaInputs].rgvals[2][istage],    // C
            rgStageEntries[SSE_PSAlphaInputs].rgvals[3][istage]);   // D

        // mux_sum must be DISCARD if either AB_DOT_PRODUCT or CD_DOT_PRODUCT are set
        //  ie: Dot / Dot / Discard || Dot / Mult / Discard || Mult / Dot / Discard

        // ab,cd,mux_sum contain a value from PS_REGISTER
        // flags contains values from PS_COMBINEROUTPUT
        pshaderdef->PSRGBOutputs[istage] = PS_COMBINEROUTPUTS(
            rgStageEntries[SSE_PSRGBOutputs].rgvals[0][istage],     // ab
            rgStageEntries[SSE_PSRGBOutputs].rgvals[1][istage],     // cd
            rgStageEntries[SSE_PSRGBOutputs].rgvals[2][istage],     // mux_sum
            rgStageEntries[SSE_PSRGBOutputs].rgvals[3][istage]);    // flags
        pshaderdef->PSAlphaOutputs[istage] = PS_COMBINEROUTPUTS(
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[0][istage],   // ab
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[1][istage],   // cd
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[2][istage],   // mux_sum
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[3][istage]);  // flags
    }

    pshaderdef->PSFinalCombinerConstant0 = rgEntries[SE_PSFinalCombinerConstant0].rgvals[0];
    pshaderdef->PSFinalCombinerConstant1 = rgEntries[SE_PSFinalCombinerConstant1].rgvals[0];

    // FOG ALPHA is only available in final combiner
    // V1R0_SUM and EF_PROD are only available in final combiner A,B,C,D inputs
    // V1R0_SUM_ALPHA and EF_PROD_ALPHA are not available

    // AB + (1-A)C + D
    pshaderdef->PSFinalCombinerInputsABCD = PS_COMBINERINPUTS(
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[0],          // A
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[1],          // B
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[2],          // C
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[3]);         // D

    // E,F,G contain a value from PS_REGISTER, PS_CHANNEL, and PS_INPUTMAPPING
    // flags contains values from PS_FINALCOMBINERSETTING:
    //    PS_FINALCOMBINERSETTING_CLAMP_SUM         // V1+R0 sum clamped to [0,1]
    //    PS_FINALCOMBINERSETTING_COMPLEMENT_V1     // unsigned invert mapping
    //    PS_FINALCOMBINERSETTING_COMPLEMENT_R0     // unsigned invert mapping
    pshaderdef->PSFinalCombinerInputsEFG = PS_COMBINERINPUTS(
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[0],           // E
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[1],           // F
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[2],           // G (alpha)
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[3]);          // flags
}

//=========================================================================
// Callback from inifile.cpp to get float string value
//=========================================================================
bool GetIniConstf(const char *szStr, int cchStr, float *pval)
{
    return false;
}

//=========================================================================
// Callback from inifile.cpp to get int string value
//=========================================================================
bool GetIniConst(const char *szStr, int cchStr, int *pval)
{
    #undef XTAG
    #define XTAG(_tag) { _tag, #_tag }
    static const struct
    {
        int Val;
        const char *szStr;
    } rgszConsts[] =
    {
        // Pixel Shaders
        XTAG(PS_TEXTUREMODES_NONE), XTAG(PS_TEXTUREMODES_PROJECT2D), XTAG(PS_TEXTUREMODES_PROJECT3D),
        XTAG(PS_TEXTUREMODES_CUBEMAP), XTAG(PS_TEXTUREMODES_PASSTHRU), XTAG(PS_TEXTUREMODES_CLIPPLANE),
        XTAG(PS_TEXTUREMODES_BUMPENVMAP), XTAG(PS_TEXTUREMODES_BUMPENVMAP_LUM), XTAG(PS_TEXTUREMODES_BRDF),
        XTAG(PS_TEXTUREMODES_DOT_ST), XTAG(PS_TEXTUREMODES_DOT_ZW), XTAG(PS_TEXTUREMODES_DOT_RFLCT_DIFF),
        XTAG(PS_TEXTUREMODES_DOT_RFLCT_SPEC), XTAG(PS_TEXTUREMODES_DOT_STR_3D), XTAG(PS_TEXTUREMODES_DOT_STR_CUBE),
        XTAG(PS_TEXTUREMODES_DPNDNT_AR), XTAG(PS_TEXTUREMODES_DPNDNT_GB), XTAG(PS_TEXTUREMODES_DOTPRODUCT),
        XTAG(PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST), XTAG(PS_COMPAREMODE_S_LT), XTAG(PS_COMPAREMODE_S_GE),
        XTAG(PS_COMPAREMODE_T_LT), XTAG(PS_COMPAREMODE_T_GE), XTAG(PS_COMPAREMODE_R_LT),
        XTAG(PS_COMPAREMODE_R_GE), XTAG(PS_COMPAREMODE_Q_LT), XTAG(PS_COMPAREMODE_Q_GE),
        XTAG(PS_COMBINERCOUNT_MUX_LSB), XTAG(PS_COMBINERCOUNT_MUX_MSB), XTAG(PS_COMBINERCOUNT_SAME_C0),
        XTAG(PS_COMBINERCOUNT_UNIQUE_C0), XTAG(PS_COMBINERCOUNT_SAME_C1), XTAG(PS_COMBINERCOUNT_UNIQUE_C1),
        XTAG(PS_INPUTMAPPING_UNSIGNED_IDENTITY), XTAG(PS_INPUTMAPPING_UNSIGNED_INVERT), XTAG(PS_INPUTMAPPING_EXPAND_NORMAL),
        XTAG(PS_INPUTMAPPING_EXPAND_NEGATE), XTAG(PS_INPUTMAPPING_HALFBIAS_NORMAL), XTAG(PS_INPUTMAPPING_HALFBIAS_NEGATE),
        XTAG(PS_INPUTMAPPING_SIGNED_IDENTITY), XTAG(PS_INPUTMAPPING_SIGNED_NEGATE), XTAG(PS_REGISTER_ZERO),
        XTAG(PS_REGISTER_DISCARD), XTAG(PS_REGISTER_C0), XTAG(PS_REGISTER_C1),
        XTAG(PS_REGISTER_FOG), XTAG(PS_REGISTER_V0), XTAG(PS_REGISTER_V1),
        XTAG(PS_REGISTER_T0), XTAG(PS_REGISTER_T1), XTAG(PS_REGISTER_T2),
        XTAG(PS_REGISTER_T3), XTAG(PS_REGISTER_R0), XTAG(PS_REGISTER_R1),
        XTAG(PS_REGISTER_V1R0_SUM), XTAG(PS_REGISTER_EF_PROD), XTAG(PS_REGISTER_ONE),
        XTAG(PS_REGISTER_NEGATIVE_ONE), XTAG(PS_REGISTER_ONE_HALF), XTAG(PS_REGISTER_NEGATIVE_ONE_HALF),
        XTAG(PS_CHANNEL_RGB), XTAG(PS_CHANNEL_BLUE), XTAG(PS_CHANNEL_ALPHA),
        XTAG(PS_FINALCOMBINERSETTING_CLAMP_SUM), XTAG(PS_FINALCOMBINERSETTING_COMPLEMENT_V1), XTAG(PS_FINALCOMBINERSETTING_COMPLEMENT_R0),
        XTAG(PS_COMBINEROUTPUT_IDENTITY), XTAG(PS_COMBINEROUTPUT_BIAS), XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_1),
        XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_1_BIAS), XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_2), XTAG(PS_COMBINEROUTPUT_SHIFTRIGHT_1),
        XTAG(PS_COMBINEROUTPUT_AB_BLUE_TO_ALPHA), XTAG(PS_COMBINEROUTPUT_CD_BLUE_TO_ALPHA), XTAG(PS_COMBINEROUTPUT_AB_MULTIPLY),
        XTAG(PS_COMBINEROUTPUT_AB_DOT_PRODUCT), XTAG(PS_COMBINEROUTPUT_CD_MULTIPLY), XTAG(PS_COMBINEROUTPUT_CD_DOT_PRODUCT),
        XTAG(PS_COMBINEROUTPUT_AB_CD_SUM), XTAG(PS_COMBINEROUTPUT_AB_CD_MUX),
        XTAG(PS_DOTMAPPING_ZERO_TO_ONE), XTAG(PS_DOTMAPPING_MINUS1_TO_1_D3D), XTAG(PS_DOTMAPPING_MINUS1_TO_1_GL),
        XTAG(PS_DOTMAPPING_MINUS1_TO_1), XTAG(PS_DOTMAPPING_HILO_1), XTAG(PS_DOTMAPPING_HILO_HEMISPHERE_D3D), XTAG(PS_DOTMAPPING_HILO_HEMISPHERE_GL),
        XTAG(PS_DOTMAPPING_HILO_HEMISPHERE),

        // D3DFORMATs
        XTAG(D3DFMT_A8R8G8B8), XTAG(D3DFMT_X8R8G8B8), XTAG(D3DFMT_R5G6B5), XTAG(D3DFMT_R6G5B5),
        XTAG(D3DFMT_X1R5G5B5), XTAG(D3DFMT_A1R5G5B5), XTAG(D3DFMT_A4R4G4B4), XTAG(D3DFMT_A8),
        XTAG(D3DFMT_A8B8G8R8), XTAG(D3DFMT_B8G8R8A8), XTAG(D3DFMT_R4G4B4A4), XTAG(D3DFMT_R5G5B5A1),
        XTAG(D3DFMT_R8G8B8A8), XTAG(D3DFMT_R8B8), XTAG(D3DFMT_G8B8), XTAG(D3DFMT_P8),
        XTAG(D3DFMT_L8), XTAG(D3DFMT_A8L8), XTAG(D3DFMT_AL8), XTAG(D3DFMT_L16),
        XTAG(D3DFMT_V8U8), XTAG(D3DFMT_L6V5U5), XTAG(D3DFMT_X8L8V8U8), XTAG(D3DFMT_Q8W8V8U8),
        XTAG(D3DFMT_V16U16), XTAG(D3DFMT_D16_LOCKABLE), XTAG(D3DFMT_D16), XTAG(D3DFMT_D24S8),
        XTAG(D3DFMT_F16), XTAG(D3DFMT_F24S8), XTAG(D3DFMT_UYVY), XTAG(D3DFMT_YUY2),
        XTAG(D3DFMT_DXT1), XTAG(D3DFMT_DXT2), XTAG(D3DFMT_DXT3), XTAG(D3DFMT_DXT4),
        XTAG(D3DFMT_DXT5), XTAG(D3DFMT_LIN_A1R5G5B5), XTAG(D3DFMT_LIN_A4R4G4B4), XTAG(D3DFMT_LIN_A8),
        XTAG(D3DFMT_LIN_A8B8G8R8), XTAG(D3DFMT_LIN_A8R8G8B8), XTAG(D3DFMT_LIN_B8G8R8A8), XTAG(D3DFMT_LIN_G8B8),
        XTAG(D3DFMT_LIN_R4G4B4A4), XTAG(D3DFMT_LIN_R5G5B5A1), XTAG(D3DFMT_LIN_R5G6B5), XTAG(D3DFMT_LIN_R6G5B5),
        XTAG(D3DFMT_LIN_R8B8), XTAG(D3DFMT_LIN_R8G8B8A8), XTAG(D3DFMT_LIN_X1R5G5B5), XTAG(D3DFMT_LIN_X8R8G8B8),
        XTAG(D3DFMT_LIN_A8L8), XTAG(D3DFMT_LIN_AL8), XTAG(D3DFMT_LIN_L16), XTAG(D3DFMT_LIN_L8),
        XTAG(D3DFMT_LIN_D24S8), XTAG(D3DFMT_LIN_F24S8), XTAG(D3DFMT_LIN_D16), XTAG(D3DFMT_LIN_F16),

        XTAG(D3DMULTISAMPLE_NONE), XTAG(D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8),

        XTAG(D3DMS_NONE), XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMS_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMS_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMS_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMS_PREFILTER_FORMAT_A8R8G8B8),

        XTAG(D3DCLEAR_TARGET), XTAG(D3DCLEAR_ZBUFFER), XTAG(D3DCLEAR_STENCIL),

        // FVFs
        XTAG(D3DFVF_XYZ), XTAG(D3DFVF_XYZRHW), XTAG(D3DFVF_NORMAL), XTAG(D3DFVF_DIFFUSE),
        XTAG(D3DFVF_SPECULAR), XTAG(D3DFVF_TEX0), XTAG(D3DFVF_TEX1), XTAG(D3DFVF_TEX2),
        XTAG(D3DFVF_TEX3), XTAG(D3DFVF_TEX4),

        // textcoord sizes
        XTAG(T0_SIZE1), XTAG(T0_SIZE2), XTAG(T0_SIZE3), XTAG(T0_SIZE4),
        XTAG(T1_SIZE1), XTAG(T1_SIZE2), XTAG(T1_SIZE3), XTAG(T1_SIZE4),
        XTAG(T2_SIZE1), XTAG(T2_SIZE2), XTAG(T2_SIZE3), XTAG(T2_SIZE4),
        XTAG(T3_SIZE1), XTAG(T3_SIZE2), XTAG(T3_SIZE3), XTAG(T3_SIZE4),

        // D3DCMPs
        XTAG(D3DCMP_NEVER), XTAG(D3DCMP_LESS), XTAG(D3DCMP_EQUAL), XTAG(D3DCMP_LESSEQUAL),
        XTAG(D3DCMP_GREATER), XTAG(D3DCMP_NOTEQUAL), XTAG(D3DCMP_GREATEREQUAL), XTAG(D3DCMP_ALWAYS),

        XTAG(D3DTEXF_NONE), XTAG(D3DTEXF_POINT), XTAG(D3DTEXF_LINEAR), XTAG(D3DTEXF_ANISOTROPIC),
        XTAG(D3DTEXF_QUINCUNX), XTAG(D3DTEXF_GAUSSIANCUBIC),

        XTAG(TEX_None), XTAG(TEX_2d), XTAG(TEX_Cubemap), XTAG(TEX_Volume),

        XTAG(TIME_Present), XTAG(TIME_Render),

        // swaths
        XTAG(D3DSWATH_8), XTAG(D3DSWATH_16), XTAG(D3DSWATH_32),
        XTAG(D3DSWATH_64), XTAG(D3DSWATH_128), XTAG(D3DSWATH_OFF),

        XTAG(D3DCOLORWRITEENABLE_RED), XTAG(D3DCOLORWRITEENABLE_GREEN), XTAG(D3DCOLORWRITEENABLE_BLUE),
        XTAG(D3DCOLORWRITEENABLE_ALPHA), XTAG(D3DCOLORWRITEENABLE_ALL),

        // misc
        XTAG(FALSE), XTAG(TRUE)
    };

    for(int ifmt = 0; ifmt < ARRAYSIZE(rgszConsts); ifmt++)
    {
        if(!_strnicmp(rgszConsts[ifmt].szStr, szStr, cchStr))
        {
            // set val
            *pval = rgszConsts[ifmt].Val;
            return true;
        }
    }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\dxutil.h ===
//-----------------------------------------------------------------------------
// File: DXUtil.h
//
// Desc: Helper functions and typing shortcuts for DirectX programming.
//
// Copyright (c) 1997-2000 Microsoft Corporation. All rights reserved
//-----------------------------------------------------------------------------
#ifndef DXUTIL_H
#define DXUTIL_H

//-----------------------------------------------------------------------------
// Helpers for handling errors.
//-----------------------------------------------------------------------------

void DisplayError(const WCHAR *szCall, HRESULT hr);

#define CheckHR(x) { HRESULT _hr = (x); if (FAILED(_hr)) { DisplayError(L#x, _hr); } }

//-----------------------------------------------------------------------------
// Miscellaneous helper functions
//-----------------------------------------------------------------------------
#define SAFE_DELETE(p)       { if(p) { delete (p);     (p)=NULL; } }
#define SAFE_DELETE_ARRAY(p) { if(p) { delete[] (p);   (p)=NULL; } }
#define SAFE_RELEASE(p)      { if(p) { (p)->Release(); (p)=NULL; } }

//-----------------------------------------------------------------------------
// Name: DXUtil_GetDXSDKMediaPath() and DXUtil_FindMediaFile() 
// Desc: Find a file in the media directory
//-----------------------------------------------------------------------------
void   DXUtil_FindMediaFile( CHAR* strPath, CHAR* strFilename );

//-----------------------------------------------------------------------------
// Name: DXUtil_Timer()
// Desc: Performs timer opertations. Must be reset before use.
//-----------------------------------------------------------------------------

class DXUtil_Timer
{
	static float GetTime() 
	{
        LARGE_INTEGER qwTime;

        QueryPerformanceCounter( &qwTime );
        return ((float)qwTime.QuadPart) * m_fSecsPerTick;
	}

	static FLOAT m_fSecsPerTick;
	static FLOAT m_fBaseTime;
	static FLOAT m_fStopTime;

public:

	static void Reset()
	{
        LARGE_INTEGER qwTicksPerSec;

        QueryPerformanceFrequency(&qwTicksPerSec);

        m_fSecsPerTick = 1.0f / (FLOAT)qwTicksPerSec.QuadPart;

        m_fBaseTime = GetTime();
	}

	static float GetAppTime()
	{
        return GetTime() - m_fBaseTime;
	}

	static float GetAbsoluteTime()
	{
        return GetTime();
	}

	static void Start()
	{
        m_fBaseTime += GetTime() - m_fStopTime;
	}

	static void Stop()
	{
        m_fStopTime = GetTime();
	}

	static void Advance()
	{
        m_fBaseTime += GetTime() - ( m_fStopTime + 0.1f );
	}
};

VOID DXUtil_ConvertWideStringToAnsi( CHAR* strDestination, const WCHAR* wstrSource, 
                                     int cchDestChar );
VOID DXUtil_ConvertGenericStringToAnsi( CHAR* strDestination, const TCHAR* tstrSource, 
                                        int cchDestChar );

#endif // DXUTIL_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\fillrate.h ===
//-----------------------------------------------------------------------------
// FILE: FILLRATE.H
//
// Desc: fillrate header
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

enum { TEX_None, TEX_2d, TEX_Cubemap, TEX_Volume, TEX_Max };
enum { TIME_Present = 0x1, TIME_Render = 0x2 };

struct TIMETESTRESULTS
{
    float   fillrate;
    float   fps;
    int     cFrames;
    float   TimeTillDoneDrawing;
    float   TimeTillIdle;
    UINT64  cNumPixelsDrawn;
};

struct FRSETTINGS
{
    UINT overdraw;                      // number of overdraws in a scene
    UINT verboselevel;                  // chatty when loading pixelshader defs, etc.
    UINT runtestonreload;               // after reloading fillrate.ini run test

    float screenwidth;                  // screen width
    float screenheight;                 // screen height
    D3DFORMAT BackBufferFormat;         // back buffer d3dformat
    D3DFORMAT AutoDepthStencilFormat;   // z buffer format (0 for none)

    D3DMULTISAMPLE_TYPE MSType;         // multisample type
    D3DMULTISAMPLE_TYPE MSFormat;       // multisample format

    DWORD FVF;                          // fvf type
    float quadwidth;                    // quad width
    float quadheight;                   // quad height
    float quadx;
    float quady;

    bool zenable;                       // enable z buffer
    bool zwriteenable;                  // enable z write
    D3DCMPFUNC d3dcmpfunc;              // z compare function

    bool primez;                        // prime z with quad/D3DCMP_ALWAYS before drawing scene
    D3DCMPFUNC primezcmpfunc;           // z prime compare function

    UINT timeflags;                     // what to time: TIME_Present, TIME_Render, ...
    int numberscenes;                   // number of scenes to time (0 to use testtime)
    float testtime;                     // number of seconds to time

    DWORD clearflags;                   // Clear() flags
    DWORD cclearval;                    // color clear val
    float zclearval;                    // z clear val
    DWORD sclearval;                    // stencil clear val

    bool userpixelshader;               // use a userpixelshader
    D3DPIXELSHADERDEF shaderdef;        // the users pixel shader def

    bool alphablendenable;              // turn on alphablending
    bool alphatestenable;               // turn on alphatesting
    bool rotatetex;                     // rotate texture

    struct FRTEX
    {
        UINT type;                      // type of texture (TEX_None, TEX_2d, TEX_Cubemap, TEX_Volume)
        UINT texsize;                   // size of texture
        D3DFORMAT d3dFormat;            // format of tetxure
        D3DTEXTUREFILTERTYPE filtertype;// filtertype
    } rgtex[4];

    D3DSWATHWIDTH SwathWidth;           // swadth width

    D3DTEXTUREOP ColorOp;               // color op (if !userpixelshader)
    D3DTEXTUREOP AlphaOp;               // alpha op (if !userpixelshader)

    D3DFILLMODE d3dfillmode;            // SOLID, WIREFRAME, ...
    DWORD colorwriteenable;             // D3DRS_COLORWRITEENABLE flags
};

// macros to help us define the size of our texcoords in fillrate.ini
static const DWORD T0_SIZE1 = D3DFVF_TEXCOORDSIZE1(0);
static const DWORD T0_SIZE2 = D3DFVF_TEXCOORDSIZE2(0);
static const DWORD T0_SIZE3 = D3DFVF_TEXCOORDSIZE3(0);
static const DWORD T0_SIZE4 = D3DFVF_TEXCOORDSIZE4(0);

static const DWORD T1_SIZE1 = D3DFVF_TEXCOORDSIZE1(1);
static const DWORD T1_SIZE2 = D3DFVF_TEXCOORDSIZE2(1);
static const DWORD T1_SIZE3 = D3DFVF_TEXCOORDSIZE3(1);
static const DWORD T1_SIZE4 = D3DFVF_TEXCOORDSIZE4(1);

static const DWORD T2_SIZE1 = D3DFVF_TEXCOORDSIZE1(2);
static const DWORD T2_SIZE2 = D3DFVF_TEXCOORDSIZE2(2);
static const DWORD T2_SIZE3 = D3DFVF_TEXCOORDSIZE3(2);
static const DWORD T2_SIZE4 = D3DFVF_TEXCOORDSIZE4(2);

static const DWORD T3_SIZE1 = D3DFVF_TEXCOORDSIZE1(3);
static const DWORD T3_SIZE2 = D3DFVF_TEXCOORDSIZE2(3);
static const DWORD T3_SIZE3 = D3DFVF_TEXCOORDSIZE3(3);
static const DWORD T3_SIZE4 = D3DFVF_TEXCOORDSIZE4(3);

// fillrate.cpp
float DoTimedTest(TIMETESTRESULTS *pttres = NULL);
void DoCompleteTimedTest();
void DoQuickTimedTest();
void DoMultiSampleTimedTest();
void DumpCurrentSettings();
void DoTextureTest();

void ReadPixelShaderIni(D3DPIXELSHADERDEF *pshaderdef);
bool ReadFRIniFile();
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\fsaa.cpp ===
/*--
Copyright (c) 1999 - 2000 Microsoft Corporation - Xbox SDK

Module Name:

    Main.cpp

Abstract:

    Illustrates effects of various FSAA modes

Revision History:

    Derived from a DX8 sample.
--*/

#include "SDKCommon.h"
#include <xgraphics.h>
#include <TCHAR.h>

bool                       bQuit   = false;
INT                        g_iType = 0;
INT                        g_iFormat = 0;
INT                        g_iFlicker = 4;

DWORD                      dwFVF = D3DFVF_XYZRHW|D3DFVF_DIFFUSE;

IDirect3D8*                g_pD3D = NULL;
HANDLE                     g_hDevice = 0;      // handle of the gamepad
BOOL                       g_KeyDown[6];
BYTE                       g_PreviousState[6];
BOOL                       g_Pause = false;
BOOL                       g_UseReset = true;  // Use Reset API instead of CreateDevice/Release

// objects that need to be released:
IDirect3DDevice8*          g_pDev  = NULL;
IDirect3DVertexBuffer8*    g_pVB   = NULL;

#define NUMPRIMS 240
#define DA (360.0/(NUMPRIMS*2.0))
#define DR (DA*3.141592654/180.0)
// Define our screen space triangles.

static struct TheVerts { float x,y,z,w; DWORD color; } Verts[NUMPRIMS*3];

//------------------------------------------------------------------------------

struct StateDescription 
{
    DWORD MultisampleFormat;
    WCHAR* Text;
};

StateDescription g_AntialiasTypes[] =
{
    D3DMULTISAMPLE_NONE,                                    L"NONE", 
    D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR,            L"2_SAMPLES_MULTISAMPLE_LINEAR",
    D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX,          L"2_SAMPELS_MULTISAMPLE_QUINCUNX",
    D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR, L"2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR",
    D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR,   L"2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR",
    D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR,            L"4_SAMPLES_MULTISAMPLE_LINEAR",
    D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN,          L"4_SAMPLES_MULTISAMPLE_GAUSSIAN",
    D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR,            L"4_SAMPLES_SUPERSAMPLE_LINEAR",
    D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN,          L"4_SAMPLES_SUPERSAMPLE_GAUSSIAN",
    D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN,          L"9_SAMPLES_MULTISAMPLE_GAUSSIAN",
    D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN,          L"9_SAMPLES_SUPERSAMPLE_GAUSSIAN",
};

INT g_AntialiasTypesCount = sizeof(g_AntialiasTypes) / sizeof(g_AntialiasTypes[0]);

StateDescription g_AntialiasFormats[] =
{
    D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5,   L"PREFILTER_FORMAT_X1R5G5B5",
    D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5,     L"PREFILTER_FORMAT_R5G6B5",
    D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8,   L"PREFILTER_FORMAT_X8R8G8B8",
    D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8,   L"PREFILTER_FORMAT_A8R8G8B8",
};

INT g_AntialiasFormatsCount = sizeof(g_AntialiasFormats) / sizeof(g_AntialiasFormats[0]);

//------------------------------------------------------------------------------
void InitPresentationParameters(D3DPRESENT_PARAMETERS *ppp)
{
    ZeroMemory(ppp, sizeof(*ppp));

    ppp->BackBufferWidth           = 640;
    ppp->BackBufferHeight          = 480;
    ppp->BackBufferFormat          = D3DFMT_X8R8G8B8;
    ppp->BackBufferCount           = 2;
    ppp->Windowed                  = false;   // Must be false for Xbox.
    ppp->EnableAutoDepthStencil    = true;
    ppp->AutoDepthStencilFormat    = D3DFMT_D24S8;
    ppp->SwapEffect                = D3DSWAPEFFECT_DISCARD;
    ppp->FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;
    if (g_iType != 0)
        ppp->MultiSampleType       = g_AntialiasTypes[g_iType].MultisampleFormat
                                    | g_AntialiasFormats[g_iFormat].MultisampleFormat;

    WCHAR buf[1024];
    swprintf(buf, L"Flicker: %li  FSAA type: %s | %s\n", 
             g_iFlicker,
             g_AntialiasTypes[g_iType].Text,
             g_AntialiasFormats[g_iFormat].Text);
    OutputDebugString(buf);
}

//------------------------------------------------------------------------------
bool Init()
{
    // Create D3D 8.
    if(g_pD3D == NULL)
    {
        g_pD3D = Direct3DCreate8(D3D_SDK_VERSION);
        if (g_pD3D == NULL)
            return false;
    }

    // Set the screen mode.
    D3DPRESENT_PARAMETERS d3dpp;
    InitPresentationParameters(&d3dpp);

    // Create the device.
    if (g_pD3D->CreateDevice(D3DADAPTER_DEFAULT,
                             D3DDEVTYPE_HAL,
                             0,
                             D3DCREATE_HARDWARE_VERTEXPROCESSING,
                             &d3dpp,
                             &g_pDev) != S_OK)
        return false;

    // Create the vertex buffer.
    void* pVerts;

    UINT v = 0;
    for(UINT i=0; i<NUMPRIMS; i++)
    {
        Verts[v].x = 320.0f;
        Verts[v].y = 240.0f;
        Verts[v].z = 0.5f;
        Verts[v].w = 1.0f;
        Verts[v].color = 0xffffffff;
        v++;

        Verts[v].x = (FLOAT)(320. + 320.*(cos(i*2.0*DR)));
        Verts[v].y = (FLOAT)(240. + 320.*(sin(i*2.0*DR)));
        Verts[v].z = 0.5f;
        Verts[v].w = 1.0f;
        Verts[v].color = 0xffffffff;
        v++;

        Verts[v].x = (FLOAT)(320. + 320.*(cos((i*2.0+1.0)*DR)));
        Verts[v].y = (FLOAT)(240. + 320.*(sin((i*2.0+1.0)*DR)));
        Verts[v].z = 0.5f;
        Verts[v].w = 1.0f;
        Verts[v].color = 0xffffffff;
        v++;
    }
    if ( g_pDev->CreateVertexBuffer( sizeof(Verts), D3DUSAGE_WRITEONLY, dwFVF, D3DPOOL_MANAGED, &g_pVB ) != S_OK)
        return false;

    g_pVB->Lock( 0, sizeof(Verts), (BYTE **)(&pVerts), 0 );
    memcpy( (void*)pVerts, (void*)Verts, sizeof(Verts) );
    g_pVB->Unlock();

    g_pDev->SetFlickerFilter(g_iFlicker);

    return true;
}

//------------------------------------------------------------------------------
void Uninit()
{
    g_pVB->Release();
    g_pVB = NULL;

    g_pDev->Release();
    g_pDev = NULL;

    g_pD3D->Release();
    g_pD3D = NULL;
}

//------------------------------------------------------------------------------
bool InitGammaRamp()
{
    D3DGAMMARAMP ramp;
    DWORD i;

    for (i = 0; i <= 255; i++)
    {
        FLOAT f = i / 255.0f;

        // sRGB is a gamma of 2.2, but we'll approximate with 2:

        f = (FLOAT) sqrt(f);

        // Normalize and round:

        BYTE b = (BYTE) (f * 255.0f + 0.5f);

        ramp.red[i] = b;
        ramp.green[i] = b;
        ramp.blue[i] = b;
    }

    g_pDev->SetGammaRamp(0, &ramp);

    return true;
}

//------------------------------------------------------------------------------
void Paint()
{
    DWORD minFilter;
    DWORD magFilter;

    // Exercise the synchornization code.
    TheVerts* pVerts;
    
    g_pVB->Lock( 0, sizeof(Verts), (BYTE **)(&pVerts), 0 );

    // Transform the verticies to make the triangle spin so we can verify that
    // this actually works over a period of time.
    //
    static DWORD Time = GetTickCount();
    static DWORD CurrentTime;
     
    // If paused, just use the same time as last time:
    if (!g_Pause)
        CurrentTime = GetTickCount();

    // 180 seconds per rotation
    float spin = 2 * 3.14159f * (float)(CurrentTime - Time) / 180000.0f;

    DWORD i;

    for (i = 0; i < NUMPRIMS*3; i++)
    {

        float x = Verts[i].x;
        float y = Verts[i].y;

        x = x - 320.0f;
        y = y - 240.0f;

        pVerts[i].x = x * (float)cos(spin) - y * (float)sin(spin);
        pVerts[i].y = x * (float)sin(spin) + y * (float)cos(spin);

        pVerts[i].x += 320.0f;
        pVerts[i].y += 240.0f;
    }

    g_pVB->Unlock();

    // Clear the frame buffer, Zbuffer.
    g_pDev->Clear(0, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, 0X00000000, 1.0, 0);

    // Draw the vertex streamsetup in stream 0.
    g_pDev->BeginScene();

    g_pDev->SetStreamSource( 0, g_pVB, sizeof(Verts[0]) );
    g_pDev->SetVertexShader( dwFVF );
    g_pDev->DrawPrimitive( D3DPT_TRIANGLELIST, 0, NUMPRIMS );      // Draw a single triangle.

    g_pDev->EndScene();

    // Flip the buffers.
    g_pDev->SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_POINT);
    g_pDev->SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_POINT);
    g_pDev->SetShaderConstantMode(D3DSCM_192CONSTANTS);
    g_pDev->Present(NULL, NULL, NULL, NULL);
    g_pDev->SetShaderConstantMode(D3DSCM_96CONSTANTS);
    g_pDev->GetTextureStageState(0, D3DTSS_MINFILTER, &minFilter);
    g_pDev->GetTextureStageState(0, D3DTSS_MAGFILTER, &magFilter);

    if ((minFilter != D3DTEXF_POINT) || (magFilter != D3DTEXF_POINT))
        _asm int 3;
}

//------------------------------------------------------------------------------
INT CheckInput()
{
    DWORD dwInsertions, dwRemovals, i;
    INT key = -1;
    
    //
    //  Check to see if a port 0 gamepad has come or gone.
    //
    if(XGetDeviceChanges(XDEVICE_TYPE_GAMEPAD, &dwInsertions, &dwRemovals))
    {
        if(dwRemovals&XDEVICE_PORT0_MASK)
        {
            if(g_hDevice)
            {
                XInputClose(g_hDevice);
                g_hDevice = NULL;
            }
        }
        if(dwInsertions&XDEVICE_PORT0_MASK)
        {
            g_hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL);
        }
    }

    // If we have a device, get its state.
    if (g_hDevice)
    {
        XINPUT_STATE InputState;

        XInputGetState(g_hDevice, &InputState);
        // check to see if we need to change modes
        for (i = 0; i < 6; i++)
        {
            if ((InputState.Gamepad.bAnalogButtons[i] == 0) != 
                (g_PreviousState[i] == 0))
            {
                g_KeyDown[i] = !g_KeyDown[i];
                if (g_KeyDown[i])
                    key = i;
            }
            g_PreviousState[i] = InputState.Gamepad.bAnalogButtons[i];
        }
    }

    return key;
}

//-----------------------------------------------------------------------------
// Name: AddModulus()
//-----------------------------------------------------------------------------
INT AddModulus(INT Value, INT Increment, INT Max)
{
    Value += Increment;
    if (Value >= Max)
        Value -= Max;
    if (Value < 0)
        Value += Max;

    return Value;
}

//-----------------------------------------------------------------------------
// Name: main()
// Desc: The application's entry point
//-----------------------------------------------------------------------------
void __cdecl main()
{
    D3DPRESENT_PARAMETERS pp;
    INT keyDown;

    //Initialize core peripheral port support
    XInitDevices(0,NULL);
    
    // Initialize the gamepad
    if(XDEVICE_PORT0_MASK & XGetDevices(XDEVICE_TYPE_GAMEPAD))
    {
        g_hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL);
    }

    if (!Init() || !InitGammaRamp())
    {
        OutputDebugString( L"Could not initialize\n");
        _asm int 3;
    }

    while (TRUE)
    {
        while (TRUE)
        {
            Paint();

            keyDown = CheckInput();

            if (keyDown == XINPUT_GAMEPAD_BLACK)
                g_Pause = !g_Pause;
            else if (keyDown == XINPUT_GAMEPAD_A)
            {
                g_iType = AddModulus(g_iType, 1, g_AntialiasTypesCount);
                break;
            }
            else if (keyDown == XINPUT_GAMEPAD_B)
            {
                g_iType = AddModulus(g_iType, -1, g_AntialiasTypesCount);
                break;
            }
            else if (keyDown == XINPUT_GAMEPAD_X)
            {
                g_iFlicker = AddModulus(g_iFlicker, 1, 5);
                break;
            }
            else if (keyDown == XINPUT_GAMEPAD_Y)
            {
                g_iFlicker = AddModulus(g_iFlicker, -1, 5);
                break;
            }
        }

        g_pDev->PersistDisplay();

        if (g_UseReset)
        {
            InitPresentationParameters(&pp);
            if (g_pDev->Reset(&pp) != S_OK)
            {
                OutputDebugString( L"Could not Reset\n");
                _asm int 3;
            }
        }
        else
        {
            Uninit();
            if (!Init() || !InitGammaRamp())
            {
                OutputDebugString( L"Could not initialize\n");
                _asm int 3;
            }
        }

        g_pDev->SetFlickerFilter(g_iFlicker);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\inifile.cpp ===
//-----------------------------------------------------------------------------
// FILE: INIFILE.CPP
//
// Desc: fake ini file routines
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <stdio.h>
#include <assert.h>

#include "utils.h"
#include "inifile.h"

//=========================================================================
// Get the value of a constant
//=========================================================================
LPCSTR CIniFile::GetIniConstValue(const char *szStr, INIVAL *pinival)
{
    // skip whitespace
    while(*szStr == ' ' || *szStr == '\t')
        szStr++;

    if((*szStr >= '0' && *szStr <= '9') || (*szStr == '.'))
    {
        char *endptr;
        int base = 10;

        if(szStr[1] == 'x')
        {
            // hexadecimal: skip over leading '0x'
            base = 16;
            szStr += 2;
        }
        else if(pinival->type == INIVAL_FLOAT)
        {
            // check for floating point value
            for(const char *szT = szStr;
                *szT && ((*szT >= '0' && *szStr <= '9') || *szT == '.');
                szT++)
            {
                if(*szT == '.')
                {
                    for(szT++; *szT && (*szT >= '0' && *szStr <= '9'); szT++)
                        ;

                    // check for trailing f
                    if(*szT == 'f')
                        szT++;

                    pinival->SetVal((float)atof(szStr));
                    return szT;
                }
            }
        }

        pinival->SetVal((int)strtoul(szStr, &endptr, base));
        return endptr;
    }

    // token length
    int cchStr = 0;

    // find token length
    for(const char *szT = szStr; *szT && (*szT != ';') && (*szT != '|') && !isspace(*szT); szT++)
        cchStr++;

    // see if the token is known by the app
    if(GetIniConstf(szStr, cchStr, &pinival->valf))
    {
        pinival->val = (int)pinival->valf;
        return szStr + cchStr;
    }
    else if(GetIniConst(szStr, cchStr, &pinival->val))
    {
        pinival->valf = (float)pinival->val;
        return szStr + cchStr;
    }

    // couldn't find token - search in [defines] section
    if(m_recurselevel < 10)
    {
        char szKeyName[64];
        static const char szSectName[] = "defines";

        lstrcpynA(szKeyName, szStr, min(sizeof(szKeyName), cchStr + 1));

        LPCSTR szLineStart;
        LPCSTR szLine = GetIniStr(szSectName, szKeyName, NULL, &szLineStart);

        if(szLine)
        {
            bool fFoundDefine = false;

            m_recurselevel++;

            // did not find entry - search in defines section
            if(pinival->type == INIVAL_FLOAT)
            {
                fFoundDefine = ParseFloatVal(szLineStart, szLine, &pinival->valf);
                pinival->val = (int)pinival->valf;
            }
            else
            {
                fFoundDefine = ParseIntVal(szLineStart, szLine, &pinival->val);
                pinival->valf = (float)pinival->val;
            }

            m_recurselevel--;

            if(fFoundDefine)
                return szStr + cchStr;
        }
    }

    return NULL;
}

//=========================================================================
// Read a file and return malloc'd pointer to data
//=========================================================================
char *SzReadFile(LPCSTR szFileName)
{

    HANDLE hFile = CreateFile(szFileName,
                          GENERIC_READ,
                          FILE_SHARE_READ,
                          NULL,
                          OPEN_EXISTING,
                          FILE_ATTRIBUTE_NORMAL,
                          NULL);
    if(hFile != INVALID_HANDLE_VALUE)
    {
        DWORD dwSize = GetFileSize(hFile, NULL);
        char *szFile = (char *)malloc(dwSize + 1);

        DWORD NumberOfBytesRead;
        ReadFile(hFile, szFile, dwSize, &NumberOfBytesRead, NULL);

        assert(dwSize == NumberOfBytesRead);
        szFile[NumberOfBytesRead] = 0;

        CloseHandle(hFile);
        return szFile;
    }

    return NULL;
}

//=========================================================================
// Read/refresh ini file
//=========================================================================
bool CIniFile::ReadFile()
{
    if(m_szFile)
    {
        free(m_szFile);
        m_szFile = NULL;
    }

    m_szFile = SzReadFile(m_szFileName);
    if(!m_szFile)
    {
        // if file read failed - sleep a short bit in case xbcp
        // had file open still.
        Sleep(500);
        m_szFile = SzReadFile(m_szFileName);
    }

    if(m_szFile)
    {
        m_ftFileReadTime = GetFileTime(m_szFileName);
        return true;
    }

    return false;
}

//=========================================================================
// Find the next real line and return pointer
//=========================================================================
LPCSTR GetLine(LPCSTR szLine)
{
    for(;;)
    {
        // skip whitespace
        while(isspace(*szLine))
            szLine++;

        // check for comments
        if(*szLine == ';' || (szLine[0] == '/' && szLine[1] == '/'))
        {
            // found a comment - cruise to end of line
            while(*szLine && *szLine != '\n')
                szLine++;
            continue;
        }

        return szLine;
    }
}

//=========================================================================
// Get first line of INI file
//=========================================================================
LPCSTR FindFirstLine(LPCSTR szFile)
{
    if(szFile)
        return GetLine(szFile);

    return NULL;
}

//=========================================================================
// Get line after szLine
//=========================================================================
LPCSTR FindNextLine(LPCSTR szLine)
{
    if(szLine)
    {
        while(*szLine && *szLine++ != '\n')
            ;
        return GetLine(szLine);
    }

    return NULL;
}

//=========================================================================
// Find the next token's first char
//=========================================================================
char FindNextChar(LPCSTR szLine, LPCSTR *ppszLine = NULL)
{
    // skip whitespace
    while(*szLine == ' ' || *szLine == '\t')
        szLine++;

    if(ppszLine)
        *ppszLine = szLine;
    return *szLine;
}

//=========================================================================
// Print out error message for something we couldn't parse
//=========================================================================
void OutputLineErr(LPCSTR szErr, LPCSTR szLine)
{
    LPCSTR szEnd = szLine;
    while(*szEnd && (*szEnd != '\r' && *szEnd != '\n'))
        szEnd++;

    char chSav = *szEnd;
    *(char *)szEnd = 0;

    OutputDebugStringA(szErr);
    OutputDebugStringA(":");
    OutputDebugStringA(szLine);
    OutputDebugStringA("\n");

    *(char *)szEnd = chSav;
}

//=========================================================================
// Parse a token stream and return the value
//=========================================================================
bool CIniFile::ParseFloatVal(LPCSTR szLineStart, LPCSTR szLine, float *pval)
{
    INIVAL valT = { INIVAL_FLOAT };
    if(GetIniConstValue(szLine, &valT))
    {
        *pval = valT.valf;
        return true;
    }

    OutputLineErr("unknown token", szLineStart);
    return false;
}

//=========================================================================
// Parse a token stream and return the value
//=========================================================================
bool CIniFile::ParseIntVal(LPCSTR szLineStart, LPCSTR szLine, int *pval)
{
    INIVAL valT = { INIVAL_INT };
    int val = 0;

    while(szLine = GetIniConstValue(szLine, &valT))
    {
        val |= valT.val;

        char ch = FindNextChar(szLine, &szLine);
        switch(ch)
        {
        case '|':
            szLine++;
            break;
        case '\r':
        case '\n':
        case '\0':
        case ';':
            // end of the line
            *pval = val;
            return true;
        default:
            OutputLineErr("unknown char", szLineStart);
            return false;
        }
    }

    OutputLineErr("unknown token", szLineStart);
    return false;
}

//=========================================================================
// Get float value for ini entry
//=========================================================================
float CIniFile::GetIniFloat(LPCSTR lpSectionName, LPCSTR lpKeyName, float nDefault)
{
    LPCSTR szLineStart;
    LPCSTR szLine = GetIniStr(lpSectionName, lpKeyName, NULL, &szLineStart);

    if(!szLine)
        return nDefault;

    ParseFloatVal(szLineStart, szLine, &nDefault);
    return nDefault;
}

//=========================================================================
// Get int value for ini entry
//=========================================================================
int CIniFile::GetIniInt(LPCSTR lpSectionName, LPCSTR lpKeyName, int nDefault)
{
    LPCSTR szLineStart;
    LPCSTR szLine = GetIniStr(lpSectionName, lpKeyName, NULL, &szLineStart);

    if(!szLine)
        return nDefault;

    ParseIntVal(szLineStart, szLine, &nDefault);
    return nDefault;
}

//=========================================================================
// Check if an ini entry exists
//=========================================================================
bool CIniFile::IniEntryExists(LPCSTR lpSectionName, LPCSTR lpKeyName)
{
    bool fverboseBak = m_fverbose;
    m_fverbose = false;

    LPCSTR szLine = GetIniStr(lpSectionName, lpKeyName, NULL, NULL);

    m_fverbose = fverboseBak;
    return !!szLine;
}

//=========================================================================
// Get an INI string and shtuff it into a buffer
//=========================================================================
bool CIniFile::GetIniStrBuf(LPCSTR lpSectionName, LPCSTR lpKeyName,
    LPCSTR szDefault, char *buf, int buflen)
{
    LPCSTR szLine = GetIniStr(lpSectionName, lpKeyName, NULL, NULL);
    if(szLine)
    {
        strncpy(buf, szLine, buflen);

        for(int nT = 0; nT < buflen; nT++)
        {
            if(buf[nT] == '\n' || buf[nT] == '\r' || buf[nT] == ';')
            {
                buf[nT] = 0;
                break;
            }
        }
    }
    else
    {
        strncpy(buf, szDefault, buflen);
    }

    buf[buflen - 1] = 0;
    return !!szLine;
}

//=========================================================================
// Return non-nil terminated string for keyname
//=========================================================================
LPCSTR CIniFile::GetIniStr(LPCSTR lpSectionName, LPCSTR lpKeyName, LPCSTR szDefault,
    LPCSTR *ppszLineStart)
{
    assert(m_szFile);
    if(!m_szFile)
        return szDefault;

    bool finsection = false;
    int cchSectionName = lstrlenA(lpSectionName);
    int cchKeyName = lstrlenA(lpKeyName);
    LPCSTR szLine = FindFirstLine(m_szFile);

    while(szLine && *szLine)
    {
        if(ppszLineStart)
            *ppszLineStart = szLine;

        if(finsection)
        {
            if(*szLine == '[')
            {
                // new section - not found
                break;
            }
            else if(!_strnicmp(lpKeyName, szLine, cchKeyName) &&
                (FindNextChar(szLine + cchKeyName, &szLine) == '='))
            {
                // skip over '='
                szLine++;

                // skip whitespace
                while(*szLine == ' ' || *szLine == '\t')
                    szLine++;

                return szLine;
            }
        }
        else if(*szLine == '[')
        {
            // section name matches?
            szLine++;
            finsection = !_strnicmp(lpSectionName, szLine, cchSectionName) &&
                (FindNextChar(szLine + cchSectionName) == ']');
        }

        szLine = FindNextLine(szLine);
    }

    if(m_fverbose)
        dprintf("entry [%s]/%s not found\n", lpSectionName, lpKeyName);
    return szDefault;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\perf.cpp ===
/*--Copyright (c) 1999 - 2000 Microsoft Corporation - Xbox SDK

Module Name:

    Main.cpp

Abstract:

    Complete DX8 application to draw a screen space triangle.

Revision History:

    Derived from a DX8 sample.
--*/

extern "C"
{
    #include <ntos.h>
    #include <nturtl.h>
    #include <ani.h>
};

#include "SDKCommon.h"
#include <xgraphics.h>
#include <xmetal.h>

D3DDevice *pDevice;

extern DWORD PushBufferSize;
extern DWORD Repeat;

void Setup();
void Draw();
void Verify();

typedef enum
{
    SUBCH_UNUSED0            = 0,
    SUBCH_UNUSED1            = 1,
    SUBCH_UNUSED2            = 2,
    SUBCH_UNUSED3            = 3,
    SUBCH_UNUSED4            = 4,
    SUBCH_SW                 = 5,   // NVX_SOFTWARE_CLASS_HANDLE
    SUBCH_3D                 = 6,   // D3D_KELVIN_PRIMITIVE (0x097)
    SUBCH_MEMCOPY            = 7,   // D3D_MEMORY_TO_MEMORY_COPY (0x039)

} SubChannel;

#define PUSHER_METHOD(subch, method, count) \
            (((count) << 18) + ((subch) << 13) + (method))

extern "C" { extern volatile DWORD *D3D__GpuGet; }
extern "C" { extern volatile DWORD *D3D__GpuPut; }
extern "C" { extern volatile DWORD *D3D__GpuReg; }
extern "C" { extern volatile DWORD *D3D__GpuTime; }
extern "C" { extern DWORD *D3D__PushBase; }
extern "C" { extern DWORD *D3D__PushLimit; }
extern "C" { extern ULONGLONG D3D__TestTime; }

__forceinline ULONGLONG GetTime()
{
    _asm rdtsc
}


VOID FlushWCCache()
{
    DWORD* pPut = g_pPushBuffer->m_pPut;
    DWORD* pPushBase = D3D__PushBase;
    DWORD* pPushMiddle = D3D__PushBase + (D3D__PushLimit - D3D__PushBase) / 2;
    DWORD* pPushLimit = D3D__PushLimit;

    // The following is to combat a problem we're seeing where the write-
    // combine cache doesn't seem to get properly flushed using an 'sfence'.
    // An easy way to repro is to run Quake, and do a KickOffAndWaitForEmpty()
    // after every DrawPrimitive.

    _asm 
    {
        mov esi, pPut
        mov edi, pPushLimit
        add edi, 1020
        mov eax, [esi]
        xchg eax, [edi]

        xor eax, eax
        mov esi, pPushBase
        or [esi], eax
        mov esi, pPushMiddle
        or [esi], eax
    }

    // Flush the write-combine cache:

    _asm sfence
}

void __cdecl main()
{
    // Set the screen mode.
    D3DPRESENT_PARAMETERS d3dpp;
    ZeroMemory(&d3dpp, sizeof(d3dpp));

    d3dpp.BackBufferWidth           = 640;
    d3dpp.BackBufferHeight          = 480;
    d3dpp.BackBufferFormat          = D3DFMT_X8R8G8B8;
    d3dpp.BackBufferCount           = 1;
    d3dpp.EnableAutoDepthStencil    = true;
    d3dpp.AutoDepthStencilFormat    = D3DFMT_D24S8;
    d3dpp.SwapEffect                = D3DSWAPEFFECT_DISCARD;
    d3dpp.FullScreen_RefreshRateInHz= 60;
//    d3dpp.MultiSampleType           = D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX;

    Direct3D_SetPushBufferSize(PushBufferSize, PushBufferSize / 16);

    // Create the device.
    Direct3D_CreateDevice(D3DADAPTER_DEFAULT,
                          D3DDEVTYPE_HAL,
                          NULL,
                          D3DCREATE_HARDWARE_VERTEXPROCESSING,
                          &d3dpp,
                          &pDevice);

    DbgPrint("Generating the commands to test.\n");

    /* 
     * Do setup...stuff we dont' want to time.
     */

    Setup();

    /*
     * Do some cheating to remember what is getting pushed.
     */

    D3DDevice_BlockUntilIdle();

    DWORD *pStartPush = g_pPushBuffer->m_pPut;

    // Hork the threshold so we won't kick off.  If you go beyond
    // then this whole thing will fall apart.
    //
    g_pPushBuffer->m_pThreshold = D3D__PushLimit;

    /*
     * Draw the commands to time.
     */

    Draw();

    /*
     * Snapshot what was drawn
     */

    DWORD *pEndPush = g_pPushBuffer->m_pPut;

    DWORD Size = (pEndPush - pStartPush) * 4;
    void *pCode = malloc(Size);

    memcpy(pCode, pStartPush, Size);

    /*
     * Do any verification (i.e Present) needed to see if this worked.
     */
    
    Verify();

    D3DDevice_BlockUntilIdle();

    /*
     * Prepare to run the test.
     */

    #define HwOffset(x)    ((DWORD)(x) & 0x0FFFFFFF)
    
    volatile DWORD *GpuGet  = D3D__GpuGet;
    volatile DWORD *GpuPut  = D3D__GpuPut;
    volatile DWORD *GpuReg  = D3D__GpuReg;
    volatile DWORD *GpuTime = D3D__GpuTime;

    DWORD *pPushBase = D3D__PushBase;
    DWORD *pPushLimit = D3D__PushLimit;

    DWORD *pPut = g_pPushBuffer->m_pPut;

    //
    // Reset the push buffer back to zero.
    //

    // Set reference.
    *(pPut++) = PUSHER_METHOD(SUBCH_3D, 0x00000050, 1);
    *(pPut++) = 0;

    // Jump to start of pb.
    *(pPut++) = (0x00000001 + HwOffset(pPushBase));

    FlushWCCache();

    // Run it.
    *GpuPut = HwOffset(pPushBase);

    // Wait until it finishes.
    while (*GpuGet != HwOffset(pPushBase))
    {
        Sleep(100);
    }

    while (GpuReg[0x00400700 / 4])
    {
        Sleep(100);
    }

    //
    // Figure out how many times we can run the commands.
    // 

    DbgPrint("Filling the push buffer.\n");

    DWORD ActualPushBufferSize = (pPushLimit - pPushBase - 5) * 4;
    DWORD Count = ActualPushBufferSize / Size;

    if (Count == 0)
    {
        _asm int 3;
    }

    BYTE *pDest = (BYTE *)pPushBase;

    for (DWORD i = 0; i < Count; i++)
    {
        memcpy(pDest, pCode, Size);

        pDest+= Size;
    }

    pPut = (DWORD *)pDest;

    //
    // Do the run.
    //

    DbgPrint("Executing the test.\n");

    // Write a funky value to the semaphore to indicate the end of the run.

    *(pPut++) = PUSHER_METHOD(SUBCH_3D, 0x00001d70, 1);
    *(pPut++) = 0x80088008;

    // Add a jump back to zero at the end of the buffer so we can rerun this test.
    *pPut = (0x00000001 + HwOffset(pPushBase));

    FlushWCCache();

    DWORD FinalPut = HwOffset(pPut);
    ULONGLONG TotalTime = 0;

    for (DWORD i = 0; i < Repeat; i++)
    {
        *GpuTime = 0;

        // 
        // Run the test.
        //

        ULONGLONG Begin, End;

        Begin = GetTime();

        *GpuPut = FinalPut;

        while (*GpuTime != 0x80088008)
            ;

        End = GetTime();

        ULONGLONG Time = End - Begin;
        TotalTime += Time;

        if (Count == 0)
        {
            DbgPrint("%I64u cycles.\n", Time);
        }
        else
        {
            DbgPrint("Time = %d cycles/iteration (%I64u cycles for %d iterations).\n", (DWORD)(Time / (ULONGLONG)Count), Time, Count);
        }

        //
        // Reset back to zero.
        //

        *GpuPut = HwOffset(pPushBase);

        // Wait until it finishes.
        while (*GpuGet != HwOffset(pPushBase))
        {
            Sleep(100);
        }

        while (GpuReg[0x00400700 / 4])
        {
            Sleep(100);
        }
    }

    if (Count == 0)
    {
        DbgPrint("\nAverage Time - %I64u cycles.\n", TotalTime / (ULONGLONG)Repeat);
    }
    else
    {
        DbgPrint("\nAverages: %d cycles/iteration, %I64u cycles.\n", (DWORD)(TotalTime / (ULONGLONG)Count / (ULONGLONG)Repeat), TotalTime / (ULONGLONG)Repeat);
    }

    _asm int 3;

    HalReturnToFirmware(HalQuickRebootRoutine);    
}


/***
 *** The tests. Uncomment something to go.
 **/

/*
 * Fill the buffer with NOPs.
 */

#if 0

// Variation, use KELVIN nops insteads.
#define USE_KELVIN_NOPS 0

DWORD PushBufferSize = (16 * 1024 * 1024);
DWORD Repeat = 10;

void Setup()
{
}

void Draw()
{
    DWORD *pPush = XMETAL_StartPush(g_pPushBuffer);

#if USE_KELVIN_NOPS

    *(pPush + 0) = PUSHER_METHOD(SUBCH_3D, 0x00000100, 1);
    *(pPush + 1) = 0;

    XMETAL_PushedRaw(pPush + 2);
    XMETAL_EndPush(g_pPushBuffer, pPush + 2);

#else 

    *(pPush + 0) = 0;

    XMETAL_PushedRaw(pPush + 1);
    XMETAL_EndPush(g_pPushBuffer, pPush + 1);

#endif
}

void Verify()
{
}

#endif

/*
 * Draw 4 triangles, each of which covers half of the screen.  The triangles
 * are textured from a very large linear 32-bit texture.
 */

#if 0

// Variation, push a 'wait for idle' after each set of 4 triangles.
#define ADD_WAIT_FOR_IDLE 0

DWORD PushBufferSize = (4 * 1024 * 1024);
DWORD Repeat = 5;

DWORD dwFVF = D3DFVF_XYZRHW|D3DFVF_TEX1;

//------------------------------------------------------------------------------
// Define our screen space triangle.

static struct TheVerts { float x,y,z,w,tu,tv; } Verts[] =
{
    {   0.0f,    0.0f, 0.5f, 1.0f,   0.0f,   0.0f},
    { 640.0f,    0.0f, 0.5f, 1.0f, 255.0f,   0.0f},
    {   0.0f,  480.0f, 0.5f, 1.0f,   0.0f, 127.0f},
    {   0.0f,  480.0f, 0.5f, 1.0f,   0.0f, 127.0f},
    { 640.0f,    0.0f, 0.5f, 1.0f, 255.0f,   0.0f},
    { 640.0f,  480.0f, 0.5f, 1.0f, 255.0f, 127.0f},

    {   0.0f,    0.0f, 0.5f, 1.0f,   0.0f, 128.0f},
    { 640.0f,    0.0f, 0.5f, 1.0f, 255.0f, 128.0f},
    {   0.0f,  480.0f, 0.5f, 1.0f,   0.0f, 255.0f},
    {   0.0f,  480.0f, 0.5f, 1.0f,   0.0f, 255.0f},
    { 640.0f,    0.0f, 0.5f, 1.0f, 255.0f, 128.0f},
    { 640.0f,  480.0f, 0.5f, 1.0f, 255.0f, 255.0f},
    };

void Setup()
{
    // Create the texture.
    D3DTexture *pTexture;
    D3DLOCKED_RECT lockRect;
    D3DSURFACE_DESC desc;

    D3DDevice_CreateTexture(256, 256, 1, 0, D3DFMT_LIN_X8R8G8B8, D3DPOOL_MANAGED, &pTexture);

    pTexture->GetLevelDesc(0, &desc);
    pTexture->LockRect(0, &lockRect, NULL, D3DLOCK_RAWDATA);

    // Make the texture half white, half blue.
    DWORD *pb = (DWORD *)lockRect.pBits;
    DWORD y;
    
    for (y = 0; y < 256; y++)
    {
        for (DWORD x = 0; x < 256; x++)
        {
            if (y >= 128)
            {
                *pb = 0xFFFFFFFF;
            }
            else
            {
                *pb = 0xFF0000FF;
            }

            pb++;
        }
    }

    // Create a vertex buffer.
    D3DVertexBuffer *pVB;
    void *pVerts;

    D3DDevice_CreateVertexBuffer(sizeof(Verts), 0, 0, 0, &pVB);

    pVB->Lock(0, sizeof(Verts), (BYTE **)(&pVerts), 0);
    memcpy((void *)pVerts, (void *)Verts, sizeof(Verts));
    pVB->Unlock();

    // Set the states to ready for the render.
    D3DDevice_SetTexture(0, pTexture);
    D3DDevice_SetStreamSource(0, pVB, sizeof(Verts[0]));
    D3DDevice_SetVertexShader(dwFVF);

    D3DDevice_SetTextureStageState(0, D3DTSS_COLORARG1,D3DTA_TEXTURE);
    D3DDevice_SetTextureStageState(0, D3DTSS_COLOROP,  D3DTOP_MODULATE);
    D3DDevice_SetTextureStageState(0, D3DTSS_COLORARG2,D3DTA_DIFFUSE);
    D3DDevice_SetTextureStageState(0, D3DTSS_ALPHAARG1,D3DTA_TEXTURE);
    D3DDevice_SetTextureStageState(0, D3DTSS_ALPHAOP,  D3DTOP_MODULATE);
    D3DDevice_SetTextureStageState(0, D3DTSS_ALPHAARG2,D3DTA_DIFFUSE);
    D3DDevice_SetTextureStageState(0, D3DTSS_MINFILTER,D3DTEXF_LINEAR);
    D3DDevice_SetTextureStageState(0, D3DTSS_MAGFILTER,D3DTEXF_LINEAR);
    D3DDevice_SetTextureStageState(0, D3DTSS_ADDRESSU ,D3DTADDRESS_CLAMP);
    D3DDevice_SetTextureStageState(0, D3DTSS_ADDRESSV ,D3DTADDRESS_CLAMP);

    D3DDevice_Clear(0, NULL, D3DCLEAR_TARGET, 0, 1.0, 0);
}

void Draw()
{
    D3DDevice_DrawVertices(D3DPT_TRIANGLELIST, 0, 12); 

#if ADD_WAIT_FOR_IDLE

    DWORD *pPush = XMETAL_StartPush(g_pPushBuffer);

    *(pPush + 0) = PUSHER_METHOD(SUBCH_3D, 0x00000110, 1);
    *(pPush + 1) = 0;

    XMETAL_PushedRaw(pPush + 2);
    XMETAL_EndPush(g_pPushBuffer, pPush + 2);

#endif
}

void Verify()
{
    D3DDevice_Present(NULL, NULL, NULL, NULL);
}

#endif 0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\sdkcommon.h ===
/*--
Copyright (c) 1999 - 2000 Microsoft Corporation - Xbox SDK

Module Name:

    SDKCommon.h

Abstract:

    Common header files and macros for the Xbox SDK

Revision History:

--*/

#if !defined(SDK_HEADER_SDKCOMMON_H)
#define SDK_HEADER_SDKCOMMON_H

#if defined (_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#ifndef STRICT
#define STRICT 1
#endif
#undef D3D_OVERLOADS

// Windows headers

#ifdef XBOX
#include <xtl.h>
#else
#include "Windows.h"
#include "D3D8.h"
#endif

#if defined(__cplusplus)
extern "C" {
#endif // __cplusplus

#pragma warning (disable:4850)

// __$ReturnUdt is the address of the destination when returning a structure
// It is Microsoft specific so will need to be adjusted to work with other
// compilers. The best way is to declare a local of the correct type and
// then return in.
#define that_ptr __$ReturnUdt

#if defined(__cplusplus)
}
#endif // __cplusplus

#endif //#ifndef SDK_HEADER_RENDERSURFACE_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\sources.inc ===
INCLUDES =          $(PRIVATE_INC_PATH);                               \
                    $(BASEDIR)\private\test\inc;                       \
                    $(BASEDIR)\private\test\multimedia\inc;              \
                    $(SDK_INC_PATH);              \
					$(BASEDIR)\private\ntos\inc; 



SOURCES= 			                                       \
    ..\all.cpp                                       \
	..\benmark5.cpp                                       \
	..\fillrate.cpp                                       \
	..\inifile.cpp                                       \
	..\bitfont.cpp                                       \
	..\fsaa.cpp                                       \
	..\perf.cpp                                       \
  ..\utils.cpp                                       \
..\d3dapp.cpp \
..\d3dfile.cpp \
..\d3dutil.cpp  \
..\dxutil.cpp    \
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\inifile.h ===
//-----------------------------------------------------------------------------
// FILE: INIFILE.H
//
// Desc: Quick and dirty INI file routines
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

// Routines supplied by the main application to return the values for a given
// string found in an ini file.
bool GetIniConst(const char *szStr, int cchStr, int *pval);
bool GetIniConstf(const char *szStr, int cchStr, float *pval);

//=========================================================================
// IniFile class
//=========================================================================
class CIniFile
{
public:
    CIniFile(LPCSTR szFileName) : m_szFile(NULL), m_ftFileReadTime(0), m_fverbose(false), m_recurselevel(0)
        { lstrcpyA(m_szFileName, szFileName); }
    ~CIniFile()
    {
        if(m_szFile)
        {
            free(m_szFile);
            m_szFile = NULL;
        }
    };

    // get int entry
    int GetIniInt(LPCSTR lpSectionName, LPCSTR lpKeyName, int nDefault);

    // get float entry
    float GetIniFloat(LPCSTR lpSectionName, LPCSTR lpKeyName, float nDefault);

    // check for entry existance
    bool IniEntryExists(LPCSTR lpSectionName, LPCSTR lpKeyName);

    // get ini string value. Up to caller to parse and check for end '\n' or ';'
    bool GetIniStrBuf(LPCSTR lpSectionName, LPCSTR lpKeyName,
        LPCSTR szDefault, char *buf, int buflen);

    // get ini string value. Up to caller to parse and check for end '\n' or ';'
    LPCSTR GetIniStr(LPCSTR lpSectionName, LPCSTR lpKeyName,
        LPCSTR szDefault, LPCSTR *ppszLineStart);

    // read/refresh an ini file
    bool ReadFile();

    // get name of ini file
    LPCSTR GetFileName()
        { return m_szFileName; }

    // has ini file timestamp changed?
    bool FileChanged()
        { return GetFileTime(m_szFileName) != m_ftFileReadTime; }

    bool m_fverbose;

private:
    enum { INIVAL_INT, INIVAL_FLOAT };
    struct INIVAL
    {
        int type;

        int val;
        float valf;

        void SetVal(int newval)
            { val = newval; valf = (float)newval; }
        void SetVal(float newval)
            { val = (int)newval; valf = newval; }
    };

    LPCSTR GetIniConstValue(const char *szStr, INIVAL *pinival);

    bool ParseIntVal(LPCSTR szLineStart, LPCSTR szLine, int *pval);
    bool ParseFloatVal(LPCSTR szLineStart, LPCSTR szLine, float *pval);

    char m_szFileName[MAX_PATH];
    char *m_szFile;
    UINT64 m_ftFileReadTime;

    UINT m_recurselevel;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\clockwork\clockwork.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    clockwork.h

Author:

    Matt Bronder

Description:

    Direct3D test functions.

*******************************************************************************/

#ifndef __CLOCKWORK_H__
#define __CLOCKWORK_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define ORBIT_FRAMES            420

#define SPHERE_U                16
#define SPHERE_V                16

#define BOUND_RADIUS            48.0f//(D3DVAL(NUM_GEARS) * 0.5f)
#define VIEW_Z                  (-(BOUND_RADIUS + 16.0f))

//******************************************************************************
class CStateChangePerf : public CScene {

protected:

    D3DXMATRIX                      m_mWorld;
    D3DXMATRIX                      m_mProj;
    PVERTEX                         m_prSphere;
    DWORD                           m_dwSphereVertices;
    LPWORD                          m_pwSphere;
    DWORD                           m_dwSphereIndices;
    DWORD                           m_dwSpherePrimitives;
    LPDIRECT3DVERTEXBUFFER8         m_pd3drSphere;
    LPDIRECT3DINDEXBUFFER8          m_pd3diSphere;
    CClockwork*                     m_pClockwork;
    LPDIRECT3DTEXTURE8              m_pd3dtBackground;
    D3DMATERIAL8                    m_material;
    D3DLIGHT8                       m_light;
    float                           m_fOrbitAngle;
    CAMERA                          m_cam;

    float                           m_fTimeFreq;
    float                           m_fStartTime;
    UINT                            m_uOrbitFrame;

    FRAMESTATS                      m_fsStats;
    BOOL                            m_bProgShader;

    DWORD                           m_dwVShader;
    DWORD                           m_dwPShader;

public:

                                    CStateChangePerf();
                                    ~CStateChangePerf();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__CLOCKWORK_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\clockwork\clockwork.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    clockwork.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include "d3dbase.h"
#include "cogs.h"
#include "clockwork.h"

//******************************************************************************
BOOL CreateSphereV(float fRadius, PVERTEX* pprVertices, LPDWORD pdwNumVertices,
                  LPWORD* ppwIndices, LPDWORD pdwNumIndices) {

    PVERTEX     prVertices;
    PVERTEX     pr;
    DWORD       dwNumVertices;
    LPWORD      pwIndices;
    DWORD       dwNumIndices;
    UINT        uIndex = 0;
    UINT        uStepsU = SPHERE_U, uStepsV = SPHERE_V;
    UINT        i, j;
    float       fX, fY, fTX, fSinY, fCosY;

    if (!pprVertices || !pdwNumVertices || !ppwIndices || !pdwNumIndices) {
        return FALSE;
    }

    *pprVertices = NULL;
    *pdwNumVertices = 0;
    *ppwIndices = NULL;
    *pdwNumIndices = 0;

    dwNumVertices = (uStepsU + 1) * uStepsV;

    // Allocate memory for the vertices
    prVertices = (PVERTEX)MemAlloc32(dwNumVertices * sizeof(VERTEX));
    if (!prVertices) {
        return FALSE;
    }

    // Allocate memory for the indices
    dwNumIndices = uStepsU * (uStepsV - 1) * 6;

    pwIndices = new WORD[dwNumIndices];
    if (!pwIndices) {
        MemFree32(prVertices);
        return FALSE;
    }

    // Create the sphere
    for (j = 0; j < uStepsV; j++) {

        fY = (float)(j) / (float)(uStepsV - 1);
        fSinY = (float)(sin(fY * M_PI));
        fCosY = (float)(cos(fY * M_PI));

        for (i = 0; i <= uStepsU; i++) {

            pr = &prVertices[(uStepsU + 1) * j + i];
            fX = (float)(i) / (float)(uStepsU);
            fTX = fX * M_2PI;

            pr->vNormal.x = -(float)(sin(fTX));// * fSinY;
            pr->vNormal.y = -fCosY;
            pr->vNormal.z = (float)(cos(fTX));// * fSinY;
            pr->vPosition.x = -pr->vNormal.x * fRadius;
            pr->vPosition.y = -pr->vNormal.y * fRadius;
            pr->vPosition.z = -pr->vNormal.z * fRadius;
            pr->u0 = fX * 4.0f;
            pr->v0 = fY * 4.0f;
        }
    }

    for (j = 0; j < uStepsU; j++) {

        for (i = 0; i < uStepsV - 1; i++) {

            pwIndices[uIndex++] = i * (uStepsU + 1) + j;
            pwIndices[uIndex++] = (i + 1) * (uStepsU + 1) + j + 1;
            pwIndices[uIndex++] = i * (uStepsU + 1) + j + 1;
            pwIndices[uIndex++] = i * (uStepsU + 1) + j;
            pwIndices[uIndex++] = (i + 1) * (uStepsU + 1) + j;
            pwIndices[uIndex++] = (i + 1) * (uStepsU + 1) + j + 1;
        }
    }

    *pprVertices = prVertices;
    *pdwNumVertices = dwNumVertices;
    *ppwIndices = pwIndices;
    *pdwNumIndices = dwNumIndices;

    return TRUE;
}

//******************************************************************************
void ReleaseSphereV(PVERTEX* ppr, LPWORD* ppw) {

    if (ppr && *ppr) {
        MemFree32(*ppr);
    }
    if (ppw && *ppw) {
        delete [] *ppw;
    }
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
BOOL ExhibitScene(CDisplay* pDisplay, int* pnExitCode) {

    CStateChangePerf* pStateChangePerf;
    BOOL              bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pStateChangePerf = new CStateChangePerf();
    if (!pStateChangePerf) {
        return FALSE;
    }

    // Initialize the scene
    if (!pStateChangePerf->Create(pDisplay)) {
        pStateChangePerf->Release();
        return FALSE;
    }

    bRet = pStateChangePerf->Exhibit(pnExitCode);

    // Clean up the scene
    pStateChangePerf->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
BOOL ValidateDisplay(LPDIRECT3D8 pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CStateChangePerf
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CStateChangePerf
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CStateChangePerf::CStateChangePerf() {

    m_pClockwork = NULL;
    m_fStartTime = 0.0f;
    m_uOrbitFrame = 0;
    m_bProgShader = FALSE;
    m_fOrbitAngle = 0.0f;
    m_dwVShader = INVALID_SHADER_HANDLE;
    m_dwPShader = INVALID_SHADER_HANDLE;
    m_pd3dtBackground = NULL;
    m_bShowFPS = TRUE;
}

//******************************************************************************
//
// Method:
//
//     ~CStateChangePerf
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CStateChangePerf::~CStateChangePerf() {
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CStateChangePerf::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CStateChangePerf::Exhibit(int *pnExitCode) {

    return CScene::Exhibit(pnExitCode);
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CStateChangePerf::Prepare() {

    LARGE_INTEGER   qwCounter;
    DWORD           dwSeed;

    dwSeed = GetTickCount();
    dwSeed = 2993;
//    dwSeed = 1011451159;
//    dwSeed = 1016517294;
//    dwSeed = 1021200919;

    srand(dwSeed);
    DebugString(TEXT("Seeded the pseudo-random number generator with %d"), dwSeed);

    m_mWorld = m_mIdentity;

    QueryPerformanceFrequency(&qwCounter);
    m_fTimeFreq = 1.0f / (float)qwCounter.QuadPart;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CStateChangePerf::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CStateChangePerf::Initialize() {

    DWORD   dwSDecl[] = {
                D3DVSD_STREAM(0),
                D3DVSD_REG(D3DVSDE_POSITION, D3DVSDT_FLOAT3),
                D3DVSD_REG(D3DVSDE_NORMAL, D3DVSDT_FLOAT3),
                D3DVSD_REG(D3DVSDE_TEXCOORD0, D3DVSDT_FLOAT2),
                D3DVSD_END()
            };

    SetPerspectiveProjection(&m_mProj, m_cam.fNearPlane, m_cam.fFarPlane, 
            m_cam.fFieldOfView, (float)m_pDisplay->GetHeight() / (float)m_pDisplay->GetWidth());

    SetDirectionalLight(&m_light, D3DXVECTOR3(0.0f, -1.0f, 1.0f));
    SetMaterial(&m_material, RGB_MAKE(255, 255, 255));

    m_pDevice->LightEnable(0, TRUE);

    // Initialize the vertices
    if (!CreateSphereV(BOUND_RADIUS + 8.0f, &m_prSphere, &m_dwSphereVertices, &m_pwSphere, &m_dwSphereIndices)) {
        return FALSE;
    }
    m_dwSpherePrimitives = m_dwSphereIndices / 3;

    m_pClockwork = new CClockwork();
    if (!m_pClockwork) {
        return FALSE;
    }

    if (!m_pClockwork->Create(m_pDevice, &m_cam, (float)m_pDisplay->GetHeight(), (float)m_pDisplay->GetWidth())) {
        return FALSE;
    }

    m_pd3dtBackground = (LPDIRECT3DTEXTURE8)CreateTexture(m_pDevice, TEXT("backcogs.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, D3DPOOL_MANAGED, 256, 256);
    if (!m_pd3dtBackground) {
        return FALSE;
    }
#ifdef UNDER_XBOX
    m_pd3dtBackground->MoveResourceMemory(D3DMEM_VIDEO);
#endif // UNDER_XBOX

    m_pd3drSphere = CreateVertexBuffer(m_pDevice, m_prSphere, m_dwSphereVertices * sizeof(VERTEX), 0, FVF_VERTEX);
    if (!m_pd3drSphere) {
        return FALSE;
    }

    m_pd3diSphere = CreateIndexBuffer(m_pDevice, m_pwSphere, m_dwSphereIndices * sizeof(WORD));
    if (!m_pd3diSphere) {
        return FALSE;
    }
/*
    m_dwVShader = CreateVertexShader(m_pDevice, dwSDecl, TEXT("ldir.vsh"));
    if (m_dwVShader == INVALID_SHADER_HANDLE) {
        return FALSE;
    }

    m_dwPShader = CreatePixelShader(m_pDevice, TEXT("texdfmod.psh"));
    if (m_dwPShader == INVALID_SHADER_HANDLE) {
        return FALSE;
    }
*/
    m_bFade = TRUE;

    memset(&m_fsStats, 0, sizeof(FRAMESTATS));

    // Add a change for the view transform
    m_fsStats.dwTransforms++;

    // Add a change for the sphere vertex shader
    m_fsStats.dwVShaders++;

    // Add a change for the sphere world transform
    m_fsStats.dwTransforms++;

    // Add a change for the background texture
    m_fsStats.dwTextures++;

    m_fsStats.dwMaterials++;

    m_fsStats.dwLights++;

    // Add a change for the sphere vertex buffer
    m_fsStats.dwVBuffers++;

    // Add a change for the sphere index buffer
    m_fsStats.dwIBuffers++;

    // Add mesh and polygon changes for the sphere
    m_fsStats.dwMeshes++;
    m_fsStats.dwPolygons += m_dwSpherePrimitives;

    // Get the frame stats from clockwork
    m_pClockwork->GetFrameStats(&m_fsStats);

    OutputString(TEXT("Frame statistics:"));
    OutputString(TEXT("    %d polygons"), m_fsStats.dwPolygons);
    OutputString(TEXT("    %d meshes"), m_fsStats.dwMeshes);
    OutputString(TEXT("    %d vertex buffer changes"), m_fsStats.dwVBuffers);
    OutputString(TEXT("    %d index buffer changes"), m_fsStats.dwIBuffers);
    OutputString(TEXT("    %d transform changes"), m_fsStats.dwTransforms);
    OutputString(TEXT("    %d texture changes"), m_fsStats.dwTextures);
    OutputString(TEXT("    %d material changes"), m_fsStats.dwMaterials);
    OutputString(TEXT("    %d light changes"), m_fsStats.dwLights);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CStateChangePerf::Efface() {

    ReleaseVertexShader(m_pDevice, m_dwVShader);
    ReleasePixelShader(m_pDevice, m_dwPShader);
    ReleaseTexture(m_pd3dtBackground);
    m_pd3dtBackground = NULL;
    delete m_pClockwork;
    ReleaseSphereV(&m_prSphere, &m_pwSphere);

    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CStateChangePerf::Update() {

    m_pClockwork->Update(m_fTimeDilation);

    m_fOrbitAngle += (M_2PI / (float)ORBIT_FRAMES * m_fTimeDilation);
    if (m_fOrbitAngle > M_2PI) {
        m_fOrbitAngle -= M_2PI;
    }

    m_cam.vPosition.x = (float)(sin(m_fOrbitAngle)) * VIEW_Z;
    m_cam.vPosition.z = (float)(cos(m_fOrbitAngle)) * VIEW_Z;
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CStateChangePerf::Render() {

    D3DXMATRIX      mView;
    DWORD           dwClearFlags = D3DCLEAR_TARGET;
    HRESULT         hr;

    if (!m_bCreated) {
        return FALSE;
    }

#ifndef UNDER_XBOX
    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }
#endif // !UNDER_XBOX

    SetView(&mView, &m_cam.vPosition, &m_cam.vInterest, 
            &D3DXVECTOR3((float)sin(m_cam.fRoll), (float)cos(m_cam.fRoll), 
            0.0f));

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }

    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

m_bProgShader = FALSE;
    if (!m_bProgShader) {

        m_pDevice->SetTransform(D3DTS_VIEW, &mView);

        m_pDevice->SetVertexShader(FVF_VERTEX);
        m_pDevice->SetPixelShader(NULL);

        m_pDevice->SetTransform(D3DTS_WORLD, &m_mWorld);

        m_pDevice->SetTexture(0, m_pd3dtBackground);

#ifndef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_CLIPPING, TRUE);
#endif

        m_pDevice->SetRenderState(D3DRS_AMBIENT, (DWORD)RGBA_MAKE(255, 255, 255, 255));

        m_pDevice->SetMaterial(&m_material);
        m_pDevice->SetLight(0, &m_light);
        m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, FALSE);

        m_pDevice->SetStreamSource(0, m_pd3drSphere, sizeof(VERTEX));
        m_pDevice->SetIndices(m_pd3diSphere, 0);

        m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, m_dwSphereVertices,
                0, m_dwSpherePrimitives);

        m_pClockwork->Render();
    }
    else {

        D3DXVECTOR4 vPower, vDBase, vLightDir, vDOffset, vSBase;
        D3DXVECTOR3 vAmbient;
        D3DXMATRIX  mR1, mR2;

        m_pDevice->SetVertexShader(m_dwVShader);
        m_pDevice->SetPixelShader(m_dwPShader);

        m_pDevice->SetVertexShaderConstant(5, &m_cam.vPosition, 1);

        vPower = D3DXVECTOR4(m_material.Power, 0.0f, 1.0f, 0.0f);
        m_pDevice->SetVertexShaderConstant(6, &vPower, 1);

        vDBase = D3DXVECTOR4(m_light.Diffuse.r * m_material.Diffuse.r, m_light.Diffuse.g * m_material.Diffuse.g, m_light.Diffuse.b * m_material.Diffuse.b, m_material.Diffuse.a);
        m_pDevice->SetVertexShaderConstant(7, &vDBase, 1);

        D3DXVec3Normalize((D3DXVECTOR3*)&vLightDir, (D3DXVECTOR3*)&m_light.Direction);
        m_pDevice->SetVertexShaderConstant(4, &vLightDir, 1);

        vAmbient = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

        vDOffset = D3DXVECTOR4((vAmbient.x + m_light.Ambient.r) * m_material.Ambient.r + m_material.Emissive.r,
                               (vAmbient.y + m_light.Ambient.g) * m_material.Ambient.g + m_material.Emissive.g,
                               (vAmbient.z + m_light.Ambient.b) * m_material.Ambient.b + m_material.Emissive.b,
                               0.0f);
        m_pDevice->SetVertexShaderConstant(8, &vDOffset, 1);

        vSBase = D3DXVECTOR4(m_light.Specular.r * m_material.Specular.r, m_light.Specular.g * m_material.Specular.g, m_light.Specular.b * m_material.Specular.b, m_material.Specular.a);
        m_pDevice->SetVertexShaderConstant(9, &vSBase, 1);

        D3DXMatrixMultiply(&mR1, &m_mWorld, &mView);
        D3DXMatrixMultiply(&mR2, &mR1, &m_mProj);
        D3DXMatrixTranspose(&mR1, &mR2);

        m_pDevice->SetVertexShaderConstant(0, &mR1, 4);

        m_pDevice->SetTexture(0, m_pd3dtBackground);

#ifndef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_CLIPPING, TRUE);
#endif

        m_pDevice->SetStreamSource(0, m_pd3drSphere, sizeof(VERTEX));
        m_pDevice->SetIndices(m_pd3diSphere, 0);

        m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, m_dwSphereVertices,
                0, m_dwSpherePrimitives);

        m_pClockwork->Render(&mView);
    }

    // Display the adapter mode
//    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
//    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
//    if (m_pfnFade) {
//        (this->*m_pfnFade)();
//    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    if (++m_uOrbitFrame >= ORBIT_FRAMES) {

        LARGE_INTEGER qwCounter;
//        float         fEndTime;
        float         fAvgFrameTime;

        // Get the end time
//        QueryPerformanceCounter(&qwCounter);
//        fEndTime = (float)qwCounter.QuadPart * m_fTimeFreq;

        fAvgFrameTime = (m_fTime - m_fStartTime) / (float)ORBIT_FRAMES;
        m_fStartTime = m_fTime;
        OutputString(TEXT("%s vertex and pixel shaders:"), m_bProgShader ? TEXT("Programmable") : TEXT("Fixed-function"));
        OutputString(TEXT("    Clockwork took an average of %3.3f ms to render a frame"), fAvgFrameTime * 1000.0f);
        OutputString(TEXT("    (%d polygons per second)"), (UINT)(1.0f / fAvgFrameTime * (float)m_fsStats.dwPolygons));
        m_bProgShader = !m_bProgShader;
        m_uOrbitFrame = 0;

        // Get the start time
//        QueryPerformanceCounter(&qwCounter);
//        m_fStartTime = (float)qwCounter.QuadPart * m_fTimeFreq;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CStateChangePerf::ProcessInput() {

    CScene::ProcessInput();
}
//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CStateChangePerf::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, VIEW_Z);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);
    memcpy(&m_cam, &m_camInitial, sizeof(CAMERA));

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CStateChangePerf::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\utils.h ===
//-----------------------------------------------------------------------------
// FILE: UTILS.H
//
// Desc: utils header file
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#define ARRAYSIZE(_a)     (sizeof(_a) / sizeof((_a)[0]))

//=========================================================================
// Release helper function
//=========================================================================
template <class T> inline void RELEASE(T& punk)
{
    if(punk)
    {
        punk->Release();
        punk = NULL;
    }
}

//=========================================================================
// Class to help time things
//=========================================================================
class CTimer
{
public:
    // constructor
    CTimer()
    {
        QueryPerformanceFrequency((LARGE_INTEGER*)&ticksPerSecond);
        ticksPerSecond /= 1000;
    }

    ~CTimer() {};

    void Start()
        { frunning = true; QueryPerformanceCounter((LARGE_INTEGER *)&ticksstart); }

    void Stop()
        { frunning = false; QueryPerformanceCounter((LARGE_INTEGER *)&ticksend); }

    float getTime()
        {
            if(frunning)
                QueryPerformanceCounter((LARGE_INTEGER *)&ticksend);
            return ((ticksend - ticksstart) * 1.0f / ticksPerSecond);
        }

    bool frunning;
    _int64 ticksstart;
    _int64 ticksend;
    _int64 ticksPerSecond;
};

//=========================================================================
// Screen Text helper class
//=========================================================================
class CScrText
{
public:
    CScrText()
        { cls(); }

    ~CScrText() {}

    void cls()
    {
        m_iLine = 0;
        for(int i = 0; i < NUM_LINES; i++)
            m_rgText[i][0] = 0;
    }
    void _cdecl printf(LPCSTR lpFmt, ...);
    void drawtext(bool fDebugSquirty);

private:
    enum { LINE_WIDTH = 80, NUM_LINES = 40 };
    char m_rgText[NUM_LINES][LINE_WIDTH];
    int m_iLine;
};

// redefine these guys to make them shorter and remove the misleading D3DMULTISAMPLE_ part
#define D3DMS_NONE                                         D3DMULTISAMPLE_NONE
#define D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR                 D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR
#define D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX               D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX
#define D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR      D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR
#define D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR        D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR
#define D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR                 D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR
#define D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN               D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN
#define D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR                 D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR
#define D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN               D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN
#define D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN               D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN
#define D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN               D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN
#define D3DMS_PREFILTER_FORMAT_DEFAULT                     D3DMULTISAMPLE_PREFILTER_FORMAT_DEFAULT
#define D3DMS_PREFILTER_FORMAT_X1R5G5B5                    D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5
#define D3DMS_PREFILTER_FORMAT_R5G6B5                      D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5
#define D3DMS_PREFILTER_FORMAT_X8R8G8B8                    D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8
#define D3DMS_PREFILTER_FORMAT_A8R8G8B8                    D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8

// utils.cpp
bool IsLinearFormat(DWORD Format);
DWORD BitsPerPixelOfD3DFORMAT(DWORD Format);
LPCSTR GetD3DCMPStr(D3DCMPFUNC d3dcmpfunc);
LPCSTR GetD3DFormatStr(D3DFORMAT d3dformat);
LPCSTR GetMultiSampleStr(DWORD mstype);
LPCSTR GetTextureModeStr(DWORD TextureMode);
UINT64 GetFileTime(LPCSTR lpFileName);

void DisplayError(const char *szCall, HRESULT hr);
#define CheckHR(x) { HRESULT _hr = (x); if (FAILED(_hr)) { DisplayError(#x, _hr); } }
void _cdecl dprintf(LPCSTR lpFmt, ...);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\clockwork\cogs.h ===
#define NUM_MATERIALS           14
#define NUM_LIGHTS              24

#define NUM_COG_TEXTURES        17
#define NUM_SHAFT_TEXTURES      7

#define GEAR_ROTATION_ANGLE     (M_PI / 4.0f)

#define NUM_GEARS               200

#define SHAFT_RADIUS            0.375f
#define S_COG_RADIUS            (SHAFT_RADIUS * 4.0f / 1.5f)
#define M_COG_RADIUS            (SHAFT_RADIUS * 6.0f / 1.5f)
#define L_COG_RADIUS            (SHAFT_RADIUS * 10.0f / 1.5f)
#define S_COG_WIDTH             (SHAFT_RADIUS * 4.0f / 1.5f)
#define M_COG_WIDTH             (SHAFT_RADIUS * 2.0f / 1.5f)
#define L_COG_WIDTH             (SHAFT_RADIUS * 1.0f / 1.5f)
#define TOOTH_HEIGHT            (SHAFT_RADIUS * 2.6f / 1.5f)
#define TOOTH_WIDTH_BASE        (SHAFT_RADIUS * 2.6f / 1.5f)
#define TOOTH_WIDTH_TOP         (SHAFT_RADIUS * 1.54f / 1.5f)
#define MIN_COG_SPACING         ((L_COG_RADIUS + TOOTH_HEIGHT) * 2.0f)
#define S_COG_SIDES             6
#define M_COG_SIDES             8
#define L_COG_SIDES             12

//#define FRND(x)                 ((D3DVAL(rand() % RAND_MAX) / D3DVAL(RAND_MAX)) * (x))

#define GEAR_LENGTH             ((3.0f * MIN_COG_SPACING) + FRND(5.0f))

#define CYLCAPS_NONE            0
#define CYLCAPS_TOP             1
#define CYLCAPS_BOTTOM          2
#define CYLCAPS_BOTH            3

typedef enum _COGSIZE {
    COGSIZE_SMALL = 0,
    COGSIZE_MEDIUM = 1,
    COGSIZE_LARGE = 2
} COGSIZE, *PCOGSIZE;

typedef struct _LIGHTDATA {
    D3DLIGHT8                   light;
    D3DCOLOR                    cAmbient;
    BOOL                        bSpecular;
    DWORD                       dwVShader;
} LIGHTDATA, *PLIGHTDATA;

typedef struct _FRAMESTATS {
    DWORD                       dwPolygons;
    DWORD                       dwMeshes;
    DWORD                       dwVBuffers;
    DWORD                       dwIBuffers;
    DWORD                       dwTextures;
    DWORD                       dwMaterials;
    DWORD                       dwTransforms;
    DWORD                       dwLights;
    DWORD                       dwVShaders;
    DWORD                       dwPShaders;
    DWORD                       dwShaderConstants;
} FRAMESTATS, *PFRAMESTATS;

typedef struct _D3DRECT3D {
    D3DVECTOR                   v1;     // -x,-y,-z
    D3DVECTOR                   v2;     // +x,+y,+z
} D3DRECT3D, *PD3DRECT3D;

typedef struct _COG {

    DWORD                       dwSides;
    LPDIRECT3DVERTEXBUFFER8     pd3drCenter;
    DWORD                       dwCenterVertices;
    LPDIRECT3DINDEXBUFFER8      pd3diCenter;
    DWORD                       dwCenterIndices;
    DWORD                       dwCenterPrimitives;
    LPDIRECT3DVERTEXBUFFER8     pd3drTeeth;
    DWORD                       dwTextureIndex;

} COG, *PCOG;

typedef struct _GEAR {

    COG                         cog[3];
    LPDIRECT3DVERTEXBUFFER8     pd3drShaft;
    D3DXMATRIX                  mWorld;
    D3DXMATRIX                  mRotate;
    DWORD                       dwClip[4];

    DWORD                       dwShaftTextureIndex;
    int                         nMaterialIndex;
    int                         nLightIndex;

    D3DXVECTOR3                 vPos;
    D3DXVECTOR3                 vDir;
    float                       fAngularVelocity;
    float                       fSpin;
    COGSIZE                     csCogSize[2];
    float                       fCogOffset[2];

    struct _GEAR*               pgearNext[2];

} GEAR, *PGEAR;

class CClockwork {

private:

    LPDIRECT3DDEVICE8           m_pDevice;
    float                       m_fFieldOfView;
    D3DXMATRIX                  m_mProj;
    D3DXMATRIX*                 m_pmView;

    PVERTEX                     m_prUnitShaft;

    DWORD                       m_dwShaftVertices;
    LPDIRECT3DINDEXBUFFER8      m_pd3diShaft;
    DWORD                       m_dwShaftIndices;
    DWORD                       m_dwShaftPrimitives;

    DWORD                       m_dwToothVertices;
    LPDIRECT3DINDEXBUFFER8      m_pd3diTooth;
    DWORD                       m_dwToothIndices;
    DWORD                       m_dwToothPrimitives;

    PGEAR                       m_pgearRoot;

    LPDIRECT3DTEXTURE8          m_pd3dtCog[NUM_COG_TEXTURES];
    LPDIRECT3DTEXTURE8          m_pd3dtShaft[NUM_SHAFT_TEXTURES];

    D3DMATERIAL8                m_material[NUM_MATERIALS];
    LIGHTDATA                   m_ldLight[NUM_LIGHTS];

    D3DMATERIAL8                m_matCurrent;
    D3DLIGHT8                   m_litCurrent;

    D3DRECT3D                   m_rectBox[NUM_GEARS * 4 + 6];
    UINT                        m_uNumBoxes;
    UINT                        m_uNumGears;
    UINT                        m_uNumMaterials;
    UINT                        m_uNumLights;
    DWORD                       m_dwMaxDepth;

    UINT                        m_uCogTextures;
    UINT                        m_uShaftTextures;

private:

    BOOL                        CreateCog(PCOG pcog, DWORD dwSides, float fRadius, 
                                            float fWidth, float fOffset = 0.0f);
    void                        ReleaseCog(PCOG pcog);

    PGEAR                       CreateGear(PCOGSIZE pcsCogSize, float* pfCogOffset, 
                                            D3DXVECTOR3* pvPos, D3DXVECTOR3* pvDir, 
                                            float fAngularVelocity, float fRotation, 
                                            PD3DRECT3D prectBox, DWORD dwDepth = 1);
    PGEAR                       AddAttachedGear(PGEAR pgearParent, UINT uCog, 
                                            DWORD dwDepth);
    void                        AddGear(PGEAR pgear, DWORD dwDepth = 1);
    void                        RotateGear(PGEAR pgear, float fTheta);
    void                        RenderGear(PGEAR pgear);
    void                        RenderGearP(PGEAR pgear);
    void                        ReleaseGear(PGEAR pgear);

    BOOL                        CreateCylinder(PVERTEX* pprVertices, LPDWORD pdwNumVertices, 
                                            LPWORD* ppwIndices, LPDWORD pdwNumIndices, 
                                            DWORD dwSides, float fRadius, float fWidth,
                                            DWORD dwCylinderCaps = CYLCAPS_BOTH);

    void                        ReleaseCylinder(PVERTEX prVertices, LPWORD pwIndices);

    void                        SetRect3D(PD3DRECT3D prect, D3DXVECTOR3* pv1, 
                                            D3DXVECTOR3* pv2);
    BOOL                        GearCollision(PD3DRECT3D prectBox1, PD3DRECT3D prectBox2);

    void                        GetGearStats(PGEAR pgear, PFRAMESTATS pfs);

public:

                                CClockwork();
                                ~CClockwork();

    BOOL                        Create(LPDIRECT3DDEVICE8 pDevice, PCAMERA pcam, float fWidth, float fHeight);
    void                        Update(float fTimeDilation);
    void                        Render();
    void                        Render(D3DXMATRIX* pmView);

    void                        GetFrameStats(PFRAMESTATS pfs);
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\clockwork\cogs.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    cogs.cpp

Description:

    Direct3D Immediate-Mode Sample.

*******************************************************************************/

#include "d3dbase.h"
#include "cogs.h"
#include "clockwork.h"

static struct _LIGHTINIT {
    D3DLIGHTTYPE            d3dlt;
    BOOL                    bSpecular;
    TCHAR                   szVShader[32];
    float                   fRatio;
} g_liLightInit[NUM_LIGHTS] =
{
    {D3DLIGHT_DIRECTIONAL,  FALSE,  TEXT("ldir.vsh"),       0.1f},
    {D3DLIGHT_SPOT,         FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_POINT,        FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_DIRECTIONAL,  TRUE,   TEXT("ldirspec.vsh"),   0.05f},
    {D3DLIGHT_SPOT,         TRUE,   TEXT("ldirspec.vsh"),   0.025f},
    {D3DLIGHT_POINT,        TRUE,   TEXT("ldirspec.vsh"),   0.025f},
    {D3DLIGHT_DIRECTIONAL,  FALSE,  TEXT("ldir.vsh"),       0.1f},
    {D3DLIGHT_SPOT,         FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_POINT,        FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_DIRECTIONAL,  TRUE,   TEXT("ldirspec.vsh"),   0.05f},
    {D3DLIGHT_SPOT,         TRUE,   TEXT("ldirspec.vsh"),   0.025f},
    {D3DLIGHT_POINT,        TRUE,   TEXT("ldirspec.vsh"),   0.025f},
    {D3DLIGHT_DIRECTIONAL,  FALSE,  TEXT("ldir.vsh"),       0.1f},
    {D3DLIGHT_SPOT,         FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_POINT,        FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_DIRECTIONAL,  TRUE,   TEXT("ldirspec.vsh"),   0.05f},
    {D3DLIGHT_SPOT,         TRUE,   TEXT("ldirspec.vsh"),   0.025f},
    {D3DLIGHT_POINT,        TRUE,   TEXT("ldirspec.vsh"),   0.025f},
    {D3DLIGHT_DIRECTIONAL,  FALSE,  TEXT("ldir.vsh"),       0.1f},
    {D3DLIGHT_SPOT,         FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_POINT,        FALSE,  TEXT("ldir.vsh"),       0.025f},
    {D3DLIGHT_DIRECTIONAL,  TRUE,   TEXT("ldirspec.vsh"),   0.05f},
    {D3DLIGHT_SPOT,         TRUE,   TEXT("ldirspec.vsh"),   0.025f},
    {D3DLIGHT_POINT,        TRUE,   TEXT("ldirspec.vsh"),   0.025f},
};
/*
{
    {D3DLIGHT_DIRECTIONAL,  FALSE,  TEXT("ldir.vsh"),       0.4f},
    {D3DLIGHT_SPOT,         FALSE,  TEXT("ldir.vsh"),       0.1f},
    {D3DLIGHT_POINT,        FALSE,  TEXT("ldir.vsh"),       0.1f},
    {D3DLIGHT_DIRECTIONAL,  TRUE,   TEXT("ldirspec.vsh"),   0.2f},
    {D3DLIGHT_SPOT,         TRUE,   TEXT("ldirspec.vsh"),   0.1f},
    {D3DLIGHT_POINT,        TRUE,   TEXT("ldirspec.vsh"),   0.1f},
};
*/
/*
static struct _LIGHTINIT {
    D3DLIGHTTYPE            d3dlt;
    BOOL                    bSpecular;
    TCHAR                   szVShader[32];
    float                   fRatio;
} g_liLightInit[NUM_LIGHTS] =
{
    {D3DLIGHT_DIRECTIONAL,  FALSE,  TEXT("ldir.vsh"),       0.4f},
    {D3DLIGHT_SPOT,         FALSE,  TEXT("lspt.vsh"),       0.1f},
    {D3DLIGHT_POINT,        FALSE,  TEXT("lpnt.vsh"),       0.1f},
    {D3DLIGHT_DIRECTIONAL,  TRUE,   TEXT("ldirspec.vsh"),   0.2f},
    {D3DLIGHT_SPOT,         TRUE,   TEXT("lsptspec.vsh"),   0.1f},
    {D3DLIGHT_POINT,        TRUE,   TEXT("lpntspec.vsh"),   0.1f},
};
*/
/*
static struct _LIGHTINIT {
    LIGHTTYPE               ltType;
    D3DXVECTOR3             vDir;
    D3DCOLOR                cAmbient;
    float                   fRatio;
    TCHAR                   szVShader[32];
} g_ltdLightData[NUM_LIGHTS] =
{
    {LIGHT_DIRECTIONAL,          D3DXVECTOR3(0.0f, -1.0f, 1.0f), RGB_MAKE(64, 64, 64), 0.4f, TEXT("ldir.vsh")},
    {LIGHT_SPOT,                 D3DXVECTOR3(0.0f,  0.0f, 1.0f), RGB_MAKE(48, 48, 48), 0.1f, TEXT("lspt.vsh")},
    {LIGHT_POINT,                D3DXVECTOR3(0.0f,  0.0f, 1.0f), RGB_MAKE(16, 16, 16), 0.1f, TEXT("lpnt.vsh")},
    {LIGHT_SPECULAR_DIRECTIONAL, D3DXVECTOR3(0.0f, -1.0f, 1.0f), RGB_MAKE(32, 32, 32), 0.2f, TEXT("ldirspec.vsh")},
    {LIGHT_SPECULAR_SPOT,        D3DXVECTOR3(0.0f,  0.0f, 1.0f), RGB_MAKE(16, 16, 16), 0.1f, TEXT("lsptspec.vsh")},
    {LIGHT_SPECULAR_POINT,       D3DXVECTOR3(0.0f,  0.0f, 1.0f), RGB_MAKE(48, 48, 48), 0.1f, TEXT("lpntspec.vsh")},
};
*/

//******************************************************************************
CClockwork::CClockwork() {

    UINT i;
    m_pDevice = NULL;
    m_prUnitShaft = NULL;
    m_pd3diShaft = NULL;
    m_pd3diTooth = NULL;
    m_pgearRoot = NULL;
    memset(m_pd3dtCog, 0, NUM_COG_TEXTURES * sizeof(LPDIRECT3DTEXTURE8));
    memset(m_pd3dtShaft, 0, NUM_SHAFT_TEXTURES * sizeof(LPDIRECT3DTEXTURE8));
    for (i = 0; i < NUM_LIGHTS; i++) {
        m_ldLight[i].dwVShader = INVALID_SHADER_HANDLE;
    }
}

//******************************************************************************
BOOL CClockwork::CreateCog(PCOG pcog, DWORD dwSides, float fRadius, float fWidth, float fOffset) {

    PVERTEX     prCenter, prTeeth;
    LPWORD      pwCenter;
    D3DXVECTOR3 vN;
    float       fToothZ, fToothX, fTheta;
    D3DXMATRIX  mRotate;
    UINT        i, j, k;

    if (!pcog) {
        return FALSE;
    }

    memset(pcog, 0, sizeof(COG));

    pcog->dwSides = dwSides;

    pcog->pd3drTeeth = CreateVertexBuffer(m_pDevice, NULL, dwSides * 8 * sizeof(VERTEX), 0, FVF_VERTEX);
    if (!pcog->pd3drTeeth) {
        ReleaseCog(pcog);
        return FALSE;
    }        

    if (!CreateCylinder(&prCenter, &pcog->dwCenterVertices, 
                        &pwCenter, &pcog->dwCenterIndices, 
                        pcog->dwSides, fRadius, fWidth, 
                        CYLCAPS_BOTH))
    {
        ReleaseCog(pcog);
        return FALSE;
    }
    pcog->dwCenterPrimitives = pcog->dwCenterIndices / 3;

    // Position the first tooth
    fToothX = fWidth / 2.0f * 0.9f;
    fToothZ = prCenter[0].vPosition.z - ((TOOTH_WIDTH_BASE / 2.0f) / 
            (prCenter[2].vPosition.y / (prCenter[0].vPosition.z - 
            prCenter[2].vPosition.z)));

    pcog->pd3drTeeth->Lock(0, 0, (LPBYTE*)&prTeeth, 0);

    prTeeth[0] = VERTEX(D3DXVECTOR3( fToothX, -TOOTH_WIDTH_BASE / 2.0f, fToothZ), *D3DXVec3Normalize(&vN, &D3DXVECTOR3( 1.0f, -1.0f, 0.0f)), 0.0f, 1.0f);
    prTeeth[1] = VERTEX(D3DXVECTOR3(-fToothX, -TOOTH_WIDTH_BASE / 2.0f, fToothZ), *D3DXVec3Normalize(&vN, &D3DXVECTOR3(-1.0f, -1.0f, 0.0f)), 0.0f, 1.0f);
    prTeeth[2] = VERTEX(D3DXVECTOR3( fToothX, -TOOTH_WIDTH_TOP  / 2.0f, fToothZ + TOOTH_HEIGHT), *D3DXVec3Normalize(&vN, &D3DXVECTOR3( 1.0f, -1.0f, 1.0f)), 1.0f, 1.0f);
    prTeeth[3] = VERTEX(D3DXVECTOR3(-fToothX, -TOOTH_WIDTH_TOP  / 2.0f, fToothZ + TOOTH_HEIGHT), *D3DXVec3Normalize(&vN, &D3DXVECTOR3(-1.0f, -1.0f, 1.0f)), 1.0f, 1.0f);
    prTeeth[4] = VERTEX(D3DXVECTOR3( fToothX,  TOOTH_WIDTH_TOP  / 2.0f, fToothZ + TOOTH_HEIGHT), *D3DXVec3Normalize(&vN, &D3DXVECTOR3( 1.0f,  1.0f, 1.0f)), 1.0f, 0.0f);
    prTeeth[5] = VERTEX(D3DXVECTOR3(-fToothX,  TOOTH_WIDTH_TOP  / 2.0f, fToothZ + TOOTH_HEIGHT), *D3DXVec3Normalize(&vN, &D3DXVECTOR3(-1.0f,  1.0f, 1.0f)), 1.0f, 0.0f);
    prTeeth[6] = VERTEX(D3DXVECTOR3( fToothX,  TOOTH_WIDTH_BASE / 2.0f, fToothZ), *D3DXVec3Normalize(&vN, &D3DXVECTOR3( 1.0f,  1.0f, 0.0f)), 0.0f, 0.0f);
    prTeeth[7] = VERTEX(D3DXVECTOR3(-fToothX,  TOOTH_WIDTH_BASE / 2.0f, fToothZ), *D3DXVec3Normalize(&vN, &D3DXVECTOR3(-1.0f,  1.0f, 0.0f)), 0.0f, 0.0f);

    // Rotate the first tooth around the cog
    fTheta = M_2PI / (float)dwSides;
    InitMatrix(&mRotate,
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, (float)cos(fTheta), (float)sin(fTheta), 0.0f,
        0.0f, (float)-sin(fTheta), (float)cos(fTheta), 0.0f,
        0.0f,  0.0f, 0.0f, 1.0f
    );

    for (i = 1; i < dwSides; i++) {
        for (j = 0; j < 8; j++) {
            D3DXVec3TransformCoord(&prTeeth[i * 8 + j].vPosition, &prTeeth[(i - 1) * 8 + j].vPosition, &mRotate);
            D3DXVec3TransformCoord(&prTeeth[i * 8 + j].vNormal, &prTeeth[(i - 1) * 8 + j].vNormal, &mRotate);
            memcpy(&prTeeth[i * 8 + j].u0, &prTeeth[(i - 1) * 8 + j].u0, 2 * sizeof(float));
        }
    }

    // Offset the cog along the x axis
    for (i = 0; i < pcog->dwCenterVertices; i++)  {
        prCenter[i].vPosition.x += fOffset;
    }
    for (i = 0; i < dwSides; i++) {
        for (j = 0; j < 8; j++) {
            prTeeth[i * 8 + j].vPosition.x += fOffset;
        }
    }

    pcog->pd3drTeeth->Unlock();

#ifdef UNDER_XBOX
    pcog->pd3drTeeth->MoveResourceMemory(D3DMEM_VIDEO);
#endif

    pcog->pd3drCenter = CreateVertexBuffer(m_pDevice, prCenter, pcog->dwCenterVertices * sizeof(VERTEX), 0, FVF_VERTEX);
    if (!pcog->pd3drCenter) {
        ReleaseCylinder(prCenter, pwCenter);
        ReleaseCog(pcog);
        return FALSE;
    }

#ifdef UNDER_XBOX
    pcog->pd3drCenter->MoveResourceMemory(D3DMEM_VIDEO);
#endif

    pcog->pd3diCenter = CreateIndexBuffer(m_pDevice, pwCenter, pcog->dwCenterIndices * sizeof(WORD));
    if (!pcog->pd3diCenter) {
        ReleaseCylinder(prCenter, pwCenter);
        ReleaseCog(pcog);
        return FALSE;
    }

    ReleaseCylinder(prCenter, pwCenter);

    return TRUE;
}

//******************************************************************************
void CClockwork::ReleaseCog(PCOG pcog) {

    UINT i, j;

    if (pcog->pd3drCenter) {
        ReleaseVertexBuffer(pcog->pd3drCenter);
    }

    if (pcog->pd3diCenter) {
        ReleaseIndexBuffer(pcog->pd3diCenter);
    }

    if (pcog->pd3drTeeth) {
        ReleaseVertexBuffer(pcog->pd3drTeeth);
    }

    memset(pcog, 0, sizeof(COG));
}

//******************************************************************************
PGEAR CClockwork::CreateGear(PCOGSIZE pcsCogSize, float* pfCogOffset, 
                 D3DXVECTOR3* pvPos, D3DXVECTOR3* pvDir, float fAngularVelocity, 
                 float fRotation, PD3DRECT3D prectBox, DWORD dwDepth)
{
    PVERTEX         prShaft;
    PGEAR           pgear;
    D3DXMATRIX      mTranslate, mRotate, mWorld;
    float           fOrient, fAngle, fClipHeight, fClipRadius;
    UINT            uLight, i, j;
    BOOL            bRet;
    float f1, f2;

    if (m_uNumGears == NUM_GEARS || dwDepth > m_dwMaxDepth) {
        return NULL;
    }

    if (!pvPos || !pvDir) {
        return NULL;
    }

    if (pfCogOffset[1] < (3.0f * MIN_COG_SPACING)) {
        return NULL;
    }

    pgear = new GEAR;
    if (!pgear) {
        return NULL;
    }

    memset(pgear, 0, sizeof(GEAR));

    pgear->pd3drShaft = CreateVertexBuffer(m_pDevice, NULL, m_dwShaftVertices * sizeof(VERTEX), 0, FVF_VERTEX);
    if (!pgear->pd3drShaft) {
        ReleaseGear(pgear);
        return NULL;
    }

    pgear->pd3drShaft->Lock(0, 0, (LPBYTE*)&prShaft, 0);

    for (i = 0; i < m_dwShaftVertices; i++) {
        prShaft[i] = m_prUnitShaft[i];
        prShaft[i].vPosition.x *= pfCogOffset[1];
    }

    pgear->pd3drShaft->Unlock();

#ifdef UNDER_XBOX
    pgear->pd3drShaft->MoveResourceMemory(D3DMEM_VIDEO);
#endif

    for (j = 0; j < 3; j++) {

        switch (pcsCogSize[j]) {
            case COGSIZE_SMALL:
                bRet = CreateCog(&pgear->cog[j], S_COG_SIDES, S_COG_RADIUS, S_COG_WIDTH, !j ? 0.0f : pfCogOffset[j-1]);
                if (!j) {
                    fAngle = fRotation + M_PI / (float)S_COG_SIDES;
                }
                else {
                    pgear->csCogSize[j-1] = COGSIZE_SMALL;
                }
                break;
            case COGSIZE_MEDIUM:
                bRet = CreateCog(&pgear->cog[j], M_COG_SIDES, M_COG_RADIUS, M_COG_WIDTH, !j ? 0.0f : pfCogOffset[j-1]);
                if (!j) {
                    fAngle = fRotation + M_PI / (float)M_COG_SIDES;
                }
                else {
                    pgear->csCogSize[j-1] = COGSIZE_MEDIUM;
                }
                break;
            case COGSIZE_LARGE:
                bRet = CreateCog(&pgear->cog[j], L_COG_SIDES, L_COG_RADIUS, L_COG_WIDTH, !j ? 0.0f : pfCogOffset[j-1]);
                if (!j) {
                    fAngle = fRotation + M_PI / (float)L_COG_SIDES;
                }
                else {
                    pgear->csCogSize[j-1] = COGSIZE_LARGE;
                }
                break;
        }

        if (!bRet) {
            ReleaseGear(pgear);
            return NULL;
        }
    }

    pgear->fCogOffset[0] = pfCogOffset[0];
    pgear->fCogOffset[1] = pfCogOffset[1];

    for (i = 0; i < 3; i++) {
        pgear->cog[i].dwTextureIndex = m_uCogTextures++ % NUM_COG_TEXTURES;
    }
    pgear->dwShaftTextureIndex = m_uShaftTextures++ % NUM_SHAFT_TEXTURES;

    // Set up the rotation matrix
    InitMatrix(&pgear->mRotate,
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
    );

    // Orient the gear in space
    if (pvDir->x != 0.0f) {

        fOrient = (pvDir->x > 0.0f) ? 0.0f : M_PI;

        InitMatrix(&mRotate,
            (float)( cos(fOrient)), (float)( 0.0f), (float)(-sin(fOrient)), (float)( 0.0f),
            (float)( 0.0f), (float)( 1.0f), (float)( 0.0f), (float)( 0.0f),
            (float)( sin(fOrient)), (float)( 0.0f), (float)( cos(fOrient)), (float)( 0.0f),
            (float)( 0.0f), (float)( 0.0f), (float)( 0.0f), (float)( 1.0f)
        );
    }
    else if (pvDir->y != 0.0f) {

        fOrient = (pvDir->y > 0.0f) ? M_PIDIV2 : -M_PIDIV2;

        InitMatrix(&mRotate,
            (float)( cos(fOrient)), (float)( sin(fOrient)), (float)( 0.0f), (float)( 0.0f),
            (float)(-sin(fOrient)), (float)( cos(fOrient)), (float)( 0.0f), (float)( 0.0f),
            (float)( 0.0f), (float)( 0.0f), (float)( 1.0f), (float)( 0.0f),
            (float)( 0.0f), (float)( 0.0f), (float)( 0.0f), (float)( 1.0f)
        );
    }
    else if (pvDir->z != 0.0f) {

        fOrient = (pvDir->z > 0.0f) ? -M_PIDIV2 : M_PIDIV2;

        InitMatrix(&mRotate,
            (float)( cos(fOrient)), (float)( 0.0f), (float)(-sin(fOrient)), (float)( 0.0f),
            (float)( 0.0f), (float)( 1.0f), (float)( 0.0f), (float)( 0.0f),
            (float)( sin(fOrient)), (float)( 0.0f), (float)( cos(fOrient)), (float)( 0.0f),
            (float)( 0.0f), (float)( 0.0f), (float)( 0.0f), (float)( 1.0f)
        );
    }
    else {
        ReleaseGear(pgear);
        return NULL;
    }

    InitMatrix(&mTranslate,
        (float)( 1.0f), (float)( 0.0f), (float)( 0.0f), (float)( 0.0f),
        (float)( 0.0f), (float)( 1.0f), (float)( 0.0f), (float)( 0.0f),
        (float)( 0.0f), (float)( 0.0f), (float)( 1.0f), (float)( 0.0f),
        (float)( pvPos->x), (float)( pvPos->y), (float)( pvPos->z), (float)( 1.0f)
    );

    D3DXMatrixMultiply(&mWorld, &mRotate, &mTranslate);

    InitMatrix(&mRotate,
        (float)( 1.0f), (float)( 0.0f), (float)( 0.0f), (float)( 0.0f),
        (float)( 0.0f), (float)( cos(fAngle)), (float)( sin(fAngle)), (float)( 0.0f),
        (float)( 0.0f), (float)(-sin(fAngle)), (float)( cos(fAngle)), (float)( 0.0f),
        (float)( 0.0f), (float)( 0.0f), (float)( 0.0f), (float)( 1.0f)
    );

    D3DXMatrixMultiply(&pgear->mWorld, &mRotate, &mWorld);

    if (m_uNumGears == m_uNumMaterials * (UINT)((float)NUM_GEARS / (float)NUM_MATERIALS + 0.5f)) {
        pgear->nMaterialIndex = (int)m_uNumMaterials;
        m_uNumMaterials++;
    }
    else {
        pgear->nMaterialIndex = -1;
    }

    for (i = 0, uLight = 0; i < m_uNumLights; i++) {
        uLight += (UINT)((float)NUM_GEARS * g_liLightInit[i].fRatio + 0.5f);
    }
    if (m_uNumGears == uLight) {
        pgear->nLightIndex = (int)m_uNumLights;
        m_uNumLights++;
    }
    else {
        pgear->nLightIndex = -1;
    }

    fClipHeight = (float)(tan(((m_fFieldOfView / 2.0f) * 480.0f) / 640.0f)) * ((float)(fabs(VIEW_Z)) - 32.0f);

    for (i = 0; i < 4; i++) {

        m_rectBox[m_uNumBoxes++] = prectBox[i];

        pgear->dwClip[i] = TRUE;

        if (prectBox[i].v1.y > -fClipHeight && prectBox[i].v2.y < fClipHeight) {

            fClipRadius = (float)(cos(m_fFieldOfView / 2.0f)) * (float)(fabs(VIEW_Z));

            if (D3DXVec3Length(&D3DXVECTOR3(prectBox[i].v1.x, 0.0f, prectBox[i].v2.z)) < fClipRadius &&
                D3DXVec3Length(&D3DXVECTOR3(prectBox[i].v2.x, 0.0f, prectBox[i].v2.z)) < fClipRadius) 
            {
                pgear->dwClip[i] = FALSE;
            }
        }
    }

    m_uNumGears++;

    pgear->vPos = *pvPos;
    pgear->vDir = *pvDir;
    pgear->fAngularVelocity = fAngularVelocity;
    pgear->fSpin = fAngle;

    // Create attached gears
    for (i = 0; i < 2; i++) {
        pgear->pgearNext[i] = AddAttachedGear(pgear, i, dwDepth);
    }

    return pgear;
}

//******************************************************************************
PGEAR CClockwork::AddAttachedGear(PGEAR pgearParent, UINT uCog, DWORD dwDepth) {

    PGEAR           pgear = NULL;
    COGSIZE         csCogSize[3];
    D3DXVECTOR3     vPos, vDir, vOffset;
    float           fCogOffset[2];
    float           fRotate, fAngle2;
    UINT            uDir, uBlocked, uBlockedDir[6];
    D3DRECT3D       rectBox[4];
    BOOL            bCollision;
    UINT            i, j;
    static float    fCogRadius[3] = {
                        S_COG_RADIUS,
                        M_COG_RADIUS,
                        L_COG_RADIUS
                    };
    static float    fCogWidth[3] = {
                        S_COG_WIDTH,
                        M_COG_WIDTH,
                        L_COG_WIDTH
                    };
    static float    fGearRatio[3] = {
                        (float)(S_COG_SIDES) / (float)(S_COG_SIDES),
                        (float)(M_COG_SIDES) / (float)(S_COG_SIDES),
                        (float)(L_COG_SIDES) / (float)(S_COG_SIDES)
                    };

    // Choose cog sizes for the attached gear
    for (j = 0; j < 3; j++) {
        switch (rand() % 3) {
            case 0:
                csCogSize[j] = COGSIZE_SMALL;
                break;
            case 1:
                csCogSize[j] = COGSIZE_MEDIUM;
                break;
            case 2:
                csCogSize[j] = COGSIZE_LARGE;
                break;
        }
    }

    // Space the cogs out
    fCogOffset[1] = GEAR_LENGTH;
    fCogOffset[0] = MIN_COG_SPACING + (FRND(fCogOffset[1] - 2.0f * MIN_COG_SPACING));

    memset(uBlockedDir, 0, 6 * sizeof(UINT));

    // Disallow parallel shafts connected to the center gear
    if (!uCog) {
        if (pgearParent->vDir.x != 0.0f) {
            uBlockedDir[0] = 1;
            uBlockedDir[1] = 1;
        }
        else if (pgearParent->vDir.y != 0.0f) {
            uBlockedDir[2] = 1;
            uBlockedDir[3] = 1;
        }
        else {
            uBlockedDir[4] = 1;
            uBlockedDir[5] = 1;
        }
        uBlocked = 2;
    }
    else {
        uBlocked = 0;
    }

    do {

        vPos = pgearParent->vPos + (pgearParent->vDir * pgearParent->fCogOffset[uCog]);

        do {
            uDir = rand() % 6;
        } while (uBlockedDir[uDir]);

        switch (uDir) {
            case 0:
                vDir = D3DXVECTOR3(1.0f, 0.0f, 0.0f);
                break;
            case 1:
                vDir = D3DXVECTOR3(-1.0f, 0.0f, 0.0f);
                break;
            case 2:
                vDir = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
                break;
            case 3:
                vDir = D3DXVECTOR3(0.0f, -1.0f, 0.0f);
                break;
            case 4:
                vDir = D3DXVECTOR3(0.0f, 0.0f, 1.0f);
                break;
            case 5:
                vDir = D3DXVECTOR3(0.0f, 0.0f, -1.0f);
                break;
        }

        if ((pgearParent->vDir.x != 0.0f && vDir.x != 0.0f) ||
            (pgearParent->vDir.y != 0.0f && vDir.y != 0.0f) ||
            (pgearParent->vDir.z != 0.0f && vDir.z != 0.0f))   // Parallel shafts
        {
            vOffset = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
            if (vDir.x != 0.0f) {
                if (rand() % 2) {
                    vOffset.y = (rand() % 2) ? 1.0f : -1.0f;
                }
                else {
                    vOffset.z = (rand() % 2) ? 1.0f : -1.0f;
                }
            }
            else if (vDir.y != 0.0f) {
                if (rand() % 2) {
                    vOffset.x = (rand() % 2) ? 1.0f : -1.0f;
                }
                else {
                    vOffset.z = (rand() % 2) ? 1.0f : -1.0f;
                }
            }
            else {
                if (rand() % 2) {
                    vOffset.y = (rand() % 2) ? 1.0f : -1.0f;
                }
                else {
                    vOffset.x = (rand() % 2) ? 1.0f : -1.0f;
                }
            }

            vOffset *= (fCogRadius[pgearParent->csCogSize[uCog]] + fCogRadius[csCogSize[0]] + TOOTH_HEIGHT);
            vPos += vOffset;

            if (pgearParent->vDir == vDir) {
                fRotate = -1.0f;
            }
            else {
                fRotate = 1.0f;
            }
        }
        else {

            vOffset = vDir * (fCogRadius[pgearParent->csCogSize[uCog]] + fCogWidth[csCogSize[0]] / 2.0f);
            fRotate = (rand() % 2) ? 1.0f : -1.0f;
            vOffset += (pgearParent->vDir * (fRotate * (fCogRadius[csCogSize[0]] + fCogWidth[pgearParent->csCogSize[uCog]] / 2.0f)));
            vPos += vOffset;
        }

        if ((pgearParent->vDir.x != 0.0f && vOffset.y > 0.0f) || (pgearParent->vDir.y != 0.0f && vOffset.x > 0.0f) || (pgearParent->vDir.z != 0.0f && vOffset.y > 0.0f)) {
            fAngle2 = M_PIDIV2 * (fGearRatio[pgearParent->csCogSize[uCog]] / fGearRatio[csCogSize[0]]) + M_PIDIV2;
        }
        else if ((pgearParent->vDir.x != 0.0f && vOffset.y < 0.0f) || (pgearParent->vDir.y != 0.0f && vOffset.x < 0.0f) || (pgearParent->vDir.z != 0.0f && vOffset.y < 0.0f)) {
            fAngle2 = M_PIDIV2 * (fGearRatio[pgearParent->csCogSize[uCog]] / fGearRatio[csCogSize[0]]) + M_3PIDIV2;
        }
        else if ((pgearParent->vDir.x != 0.0f && vOffset.z > 0.0f) || (pgearParent->vDir.y != 0.0f && vOffset.z > 0.0f) || (pgearParent->vDir.z != 0.0f && vOffset.x < 0.0f)) {
            fAngle2 = M_PIDIV2 * (fGearRatio[pgearParent->csCogSize[uCog]] / fGearRatio[csCogSize[0]]) + M_PI;
        }
        else {
            fAngle2 = 0.0f;
        }

        fAngle2 += fRotate * pgearParent->fSpin * (fGearRatio[pgearParent->csCogSize[uCog]] / fGearRatio[csCogSize[0]]);
        if (fRotate > 0.0f) {
            fAngle2 += M_PI;
        }

        if (vDir.x > 0.0f) {
            SetRect3D(&rectBox[0], &D3DXVECTOR3(vPos.x - (fCogWidth[csCogSize[0]] / 2.0f), vPos.y - SHAFT_RADIUS, vPos.z - SHAFT_RADIUS), &D3DXVECTOR3(vPos.x + fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f), vPos.y + SHAFT_RADIUS, vPos.z + SHAFT_RADIUS));
            SetRect3D(&rectBox[1], &D3DXVECTOR3(vPos.x - (fCogWidth[csCogSize[0]] / 2.0f), vPos.y - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.z - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogWidth[csCogSize[0]] / 2.0f), vPos.y + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.z + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[2], &D3DXVECTOR3(vPos.x + fCogOffset[0] - (fCogWidth[csCogSize[1]] / 2.0f), vPos.y - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + fCogOffset[0] + (fCogWidth[csCogSize[1]] / 2.0f), vPos.y + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[3], &D3DXVECTOR3(vPos.x + fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f), vPos.y - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f), vPos.y + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)));
        }
        else if (vDir.x < 0.0f) {
            SetRect3D(&rectBox[0], &D3DXVECTOR3(vPos.x - fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f), vPos.y - SHAFT_RADIUS, vPos.z - SHAFT_RADIUS), &D3DXVECTOR3(vPos.x + (fCogWidth[csCogSize[0]] / 2.0f), vPos.y + SHAFT_RADIUS, vPos.z + SHAFT_RADIUS));
            SetRect3D(&rectBox[1], &D3DXVECTOR3(vPos.x - (fCogWidth[csCogSize[0]] / 2.0f), vPos.y - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.z - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogWidth[csCogSize[0]] / 2.0f), vPos.y + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.z + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[2], &D3DXVECTOR3(vPos.x - fCogOffset[0] - (fCogWidth[csCogSize[1]] / 2.0f), vPos.y - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x - fCogOffset[0] + (fCogWidth[csCogSize[1]] / 2.0f), vPos.y + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[3], &D3DXVECTOR3(vPos.x - fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f), vPos.y - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x - fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f), vPos.y + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)));
        }
        else if (vDir.y > 0.0f) {
            SetRect3D(&rectBox[0], &D3DXVECTOR3(vPos.x - SHAFT_RADIUS, vPos.y - (fCogWidth[csCogSize[0]] / 2.0f), vPos.z - SHAFT_RADIUS), &D3DXVECTOR3(vPos.x + SHAFT_RADIUS, vPos.y + fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f), vPos.z + SHAFT_RADIUS));
            SetRect3D(&rectBox[1], &D3DXVECTOR3(vPos.x - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.y - (fCogWidth[csCogSize[0]] / 2.0f), vPos.z - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.y + (fCogWidth[csCogSize[0]] / 2.0f), vPos.z + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[2], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y + fCogOffset[0] - (fCogWidth[csCogSize[1]] / 2.0f), vPos.z - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y + fCogOffset[0] + (fCogWidth[csCogSize[1]] / 2.0f), vPos.z + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[3], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y + fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f), vPos.z - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y + fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f), vPos.z + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)));
        }
        else if (vDir.y < 0.0f) {
            SetRect3D(&rectBox[0], &D3DXVECTOR3(vPos.x - SHAFT_RADIUS, vPos.y - fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f), vPos.z - SHAFT_RADIUS), &D3DXVECTOR3(vPos.x + SHAFT_RADIUS, vPos.y + (fCogWidth[csCogSize[0]] / 2.0f), vPos.z + SHAFT_RADIUS));
            SetRect3D(&rectBox[1], &D3DXVECTOR3(vPos.x - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.y - (fCogWidth[csCogSize[0]] / 2.0f), vPos.z - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.y + (fCogWidth[csCogSize[0]] / 2.0f), vPos.z + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[2], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y - fCogOffset[0] - (fCogWidth[csCogSize[1]] / 2.0f), vPos.z - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y - fCogOffset[0] + (fCogWidth[csCogSize[1]] / 2.0f), vPos.z + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT)));
            SetRect3D(&rectBox[3], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y - fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f), vPos.z - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y - fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f), vPos.z + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT)));
        }
        else if (vDir.z > 0.0f) {
            SetRect3D(&rectBox[0], &D3DXVECTOR3(vPos.x - SHAFT_RADIUS, vPos.y - SHAFT_RADIUS, vPos.z - (fCogWidth[csCogSize[0]] / 2.0f)), &D3DXVECTOR3(vPos.x + SHAFT_RADIUS, vPos.y + SHAFT_RADIUS, vPos.z + fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f)));
            SetRect3D(&rectBox[1], &D3DXVECTOR3(vPos.x - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.y - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.z - (fCogWidth[csCogSize[0]] / 2.0f)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.y + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.z + (fCogWidth[csCogSize[0]] / 2.0f)));
            SetRect3D(&rectBox[2], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z + fCogOffset[0] - (fCogWidth[csCogSize[1]] / 2.0f)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z + fCogOffset[0] + (fCogWidth[csCogSize[1]] / 2.0f)));
            SetRect3D(&rectBox[3], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z + fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z + fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f)));
        }
        else {
            SetRect3D(&rectBox[0], &D3DXVECTOR3(vPos.x - SHAFT_RADIUS, vPos.y - SHAFT_RADIUS, vPos.z - fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f)), &D3DXVECTOR3(vPos.x + SHAFT_RADIUS, vPos.y + SHAFT_RADIUS, vPos.z + (fCogWidth[csCogSize[0]] / 2.0f)));
            SetRect3D(&rectBox[1], &D3DXVECTOR3(vPos.x - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.y - (fCogWidth[csCogSize[0]] + TOOTH_HEIGHT), vPos.z - (fCogWidth[csCogSize[0]] / 2.0f)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.y + (fCogRadius[csCogSize[0]] + TOOTH_HEIGHT), vPos.z + (fCogWidth[csCogSize[0]] / 2.0f)));
            SetRect3D(&rectBox[2], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y - (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z - fCogOffset[0] - (fCogWidth[csCogSize[1]] / 2.0f)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.y + (fCogRadius[csCogSize[1]] + TOOTH_HEIGHT), vPos.z - fCogOffset[0] + (fCogWidth[csCogSize[1]] / 2.0f)));
            SetRect3D(&rectBox[3], &D3DXVECTOR3(vPos.x - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y - (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z - fCogOffset[1] - (fCogWidth[csCogSize[2]] / 2.0f)), &D3DXVECTOR3(vPos.x + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.y + (fCogRadius[csCogSize[2]] + TOOTH_HEIGHT), vPos.z - fCogOffset[1] + (fCogWidth[csCogSize[2]] / 2.0f)));
        }

        bCollision = FALSE;

        for (j = 0; j < 4 && !bCollision; j++) {
            for (i = 0; i < m_uNumBoxes && !bCollision; i++) {
                bCollision = GearCollision(&rectBox[j], &m_rectBox[i]);
            }
        }

        if (bCollision) {
            uBlockedDir[uDir] = 1;
            uBlocked++;
        }

    } while (bCollision && uBlocked < 6);

    if (uBlocked < 6) {
        pgear = CreateGear(csCogSize, fCogOffset, &vPos, &vDir, fRotate * pgearParent->fAngularVelocity * (fGearRatio[pgearParent->csCogSize[uCog]] / fGearRatio[csCogSize[0]]), fAngle2, rectBox, dwDepth+1);
    }

    return pgear;
}

//******************************************************************************
void CClockwork::AddGear(PGEAR pgear, DWORD dwDepth) {

    UINT i;

    if (m_uNumGears == NUM_GEARS || dwDepth > m_dwMaxDepth) {
        return;
    }

    for (i = 0; i < 2; i++) {

        if (!pgear->pgearNext[i]) {
            pgear->pgearNext[i] = AddAttachedGear(pgear, i, dwDepth);
        }
        else {
            AddGear(pgear->pgearNext[i], dwDepth + 1);
        }
    }
}

//******************************************************************************
void CClockwork::RotateGear(PGEAR pgear, float fTheta) {

    float       fAngularVelocity;
    D3DXMATRIX  r;
    UINT        i;

    if (!pgear) {
        return;
    }

    fAngularVelocity = fTheta * pgear->fAngularVelocity;
    pgear->mRotate._22 = (float)(cos(fAngularVelocity));
    pgear->mRotate._23 = (float)(sin(fAngularVelocity));
    pgear->mRotate._32 = -pgear->mRotate._23;
    pgear->mRotate._33 = pgear->mRotate._22;

    D3DXMatrixMultiply(&r, &pgear->mRotate, &pgear->mWorld);

    memcpy(&pgear->mWorld, &r, sizeof(D3DMATRIX));

    for (i = 0; i < 2; i++) {
        RotateGear(pgear->pgearNext[i], fTheta);
    }
}

//******************************************************************************
void CClockwork::RenderGear(PGEAR pgear) {

    UINT i, j;

    if (!pgear) {
        return;
    }

    // Set light states if necessary
    if (pgear->nMaterialIndex >= 0) {
        m_pDevice->SetMaterial(&m_material[pgear->nMaterialIndex]);
    }
    if (pgear->nLightIndex >= 0) {
        m_pDevice->SetLight(0, &m_ldLight[pgear->nLightIndex].light);
        m_pDevice->SetRenderState(D3DRS_AMBIENT, m_ldLight[pgear->nLightIndex].cAmbient);
        m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, m_ldLight[pgear->nLightIndex].bSpecular);
    }

    // Set the world transform
    m_pDevice->SetTransform(D3DTS_WORLD, &pgear->mWorld);

    m_pDevice->SetTexture(0, m_pd3dtShaft[pgear->dwShaftTextureIndex]);

#ifndef UNDER_XBOX
    m_pDevice->SetRenderState(D3DRS_CLIPPING, pgear->dwClip[0]);
#endif

    m_pDevice->SetStreamSource(0, pgear->pd3drShaft, sizeof(VERTEX));
    m_pDevice->SetIndices(m_pd3diShaft, 0);

    // Draw the shaft
    m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, m_dwShaftVertices,
                    0, m_dwShaftPrimitives);

    for (i = 0; i < 3; i++) {

        m_pDevice->SetTexture(0, m_pd3dtCog[pgear->cog[i].dwTextureIndex]);

#ifndef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_CLIPPING, pgear->dwClip[i+1]);
#endif

        m_pDevice->SetStreamSource(0, pgear->cog[i].pd3drCenter, sizeof(VERTEX));
        m_pDevice->SetIndices(pgear->cog[i].pd3diCenter, 0);

        m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0,
                    pgear->cog[i].dwCenterVertices, 0, pgear->cog[i].dwCenterPrimitives);

        m_pDevice->SetStreamSource(0, pgear->cog[i].pd3drTeeth, sizeof(VERTEX));

        for (j = 0; j < pgear->cog[i].dwSides; j++) {

            m_pDevice->SetIndices(m_pd3diTooth, j * 8);
            m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0,
                    m_dwToothVertices, 0, m_dwToothPrimitives);
        }
    }

    for (i = 0; i < 2; i++) {
        RenderGear(pgear->pgearNext[i]);
    }
}

//******************************************************************************
void CClockwork::RenderGearP(PGEAR pgear) {

    D3DXMATRIX mR1, mR2;
    UINT i, j;

    if (!pgear) {
        return;
    }

    if (pgear->nMaterialIndex >= 0) {

        D3DXVECTOR4 vPower, vDBase;

        memcpy(&m_matCurrent, &m_material[pgear->nMaterialIndex], sizeof(D3DMATERIAL8));

        vPower = D3DXVECTOR4(m_matCurrent.Power, 0.0f, 1.0f, 0.0f);
        m_pDevice->SetVertexShaderConstant(6, &vPower, 1);

        vDBase = D3DXVECTOR4(m_litCurrent.Diffuse.r * m_matCurrent.Diffuse.r, m_litCurrent.Diffuse.g * m_matCurrent.Diffuse.g, m_litCurrent.Diffuse.b * m_matCurrent.Diffuse.b, m_matCurrent.Diffuse.a);
        m_pDevice->SetVertexShaderConstant(7, &vDBase, 1);
    }

    if (pgear->nLightIndex >= 0) {

        D3DXVECTOR4 vLightDir, vDOffset, vSBase;
        D3DXVECTOR3 vAmbient;

        memcpy(&m_litCurrent, &m_ldLight[pgear->nLightIndex].light, sizeof(D3DMATERIAL8));

        D3DXVec3Normalize((D3DXVECTOR3*)&vLightDir, (D3DXVECTOR3*)&m_litCurrent.Direction);
        m_pDevice->SetVertexShaderConstant(4, &vLightDir, 1);

        vAmbient = D3DXVECTOR3((float)RGBA_GETRED(m_ldLight[pgear->nLightIndex].cAmbient) / 255.0f,
                               (float)RGBA_GETGREEN(m_ldLight[pgear->nLightIndex].cAmbient) / 255.0f,
                               (float)RGBA_GETBLUE(m_ldLight[pgear->nLightIndex].cAmbient) / 255.0f);

        vDOffset = D3DXVECTOR4((vAmbient.x + m_litCurrent.Ambient.r) * m_matCurrent.Ambient.r + m_matCurrent.Emissive.r,
                               (vAmbient.y + m_litCurrent.Ambient.g) * m_matCurrent.Ambient.g + m_matCurrent.Emissive.g,
                               (vAmbient.z + m_litCurrent.Ambient.b) * m_matCurrent.Ambient.b + m_matCurrent.Emissive.b,
                               0.0f);
        m_pDevice->SetVertexShaderConstant(8, &vDOffset, 1);

        vSBase = D3DXVECTOR4(m_litCurrent.Specular.r * m_matCurrent.Specular.r, m_litCurrent.Specular.g * m_matCurrent.Specular.g, m_litCurrent.Specular.b * m_matCurrent.Specular.b, m_matCurrent.Specular.a);
        m_pDevice->SetVertexShaderConstant(9, &vSBase, 1);

        m_pDevice->SetVertexShader(m_ldLight[pgear->nLightIndex].dwVShader);
    }

    D3DXMatrixMultiply(&mR1, &pgear->mWorld, m_pmView);
    D3DXMatrixMultiply(&mR2, &mR1, &m_mProj);
    D3DXMatrixTranspose(&mR1, &mR2);

    m_pDevice->SetVertexShaderConstant(0, &mR1, 4);

    m_pDevice->SetTexture(0, m_pd3dtShaft[pgear->dwShaftTextureIndex]);

#ifndef UNDER_XBOX
    m_pDevice->SetRenderState(D3DRS_CLIPPING, pgear->dwClip[0]);
#endif

    m_pDevice->SetStreamSource(0, pgear->pd3drShaft, sizeof(VERTEX));
    m_pDevice->SetIndices(m_pd3diShaft, 0);

    // Draw the shaft
    m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, m_dwShaftVertices,
                    0, m_dwShaftPrimitives);

    for (i = 0; i < 3; i++) {

        m_pDevice->SetTexture(0, m_pd3dtCog[pgear->cog[i].dwTextureIndex]);

#ifndef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_CLIPPING, pgear->dwClip[i+1]);
#endif

        m_pDevice->SetStreamSource(0, pgear->cog[i].pd3drCenter, sizeof(VERTEX));
        m_pDevice->SetIndices(pgear->cog[i].pd3diCenter, 0);

        m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0,
                    pgear->cog[i].dwCenterVertices, 0, pgear->cog[i].dwCenterPrimitives);

        m_pDevice->SetStreamSource(0, pgear->cog[i].pd3drTeeth, sizeof(VERTEX));

        for (j = 0; j < pgear->cog[i].dwSides; j++) {

            m_pDevice->SetIndices(m_pd3diTooth, j * 8);
            m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0,
                    m_dwToothVertices, 0, m_dwToothPrimitives);
        }
    }

    for (i = 0; i < 2; i++) {
        RenderGear(pgear->pgearNext[i]);
    }
}

//******************************************************************************
void CClockwork::ReleaseGear(PGEAR pgear) {

    if (pgear) {
        UINT i;
        for (i = 0; i < 2; i++) {
            if (pgear->pgearNext[i]) {
                ReleaseGear(pgear->pgearNext[i]);
            }
        }
        ReleaseVertexBuffer(pgear->pd3drShaft);
        for (i = 0; i < 3; i++) {
            ReleaseCog(&pgear->cog[i]);
        }
        delete [] pgear;
        pgear = NULL;
    }
}

//******************************************************************************
BOOL CClockwork::Create(LPDIRECT3DDEVICE8 pDevice, PCAMERA pcam, float fWidth, float fHeight) {

    COGSIZE   csCogSize[3];
    float     fCogOffset[2];
    D3DRECT3D rectBox[4];
    float     fBoundHeight = BOUND_RADIUS * (fHeight / fWidth);
    UINT      i, j, uIndex;
    LPWORD    pwShaft, pwTooth;
    TCHAR     szTexture[256];
    DWORD     dwSDecl[] = {
                    D3DVSD_STREAM(0),
                    D3DVSD_REG(D3DVSDE_POSITION, D3DVSDT_FLOAT3),
                    D3DVSD_REG(D3DVSDE_NORMAL, D3DVSDT_FLOAT3),
                    D3DVSD_REG(D3DVSDE_TEXCOORD0, D3DVSDT_FLOAT2),
                    D3DVSD_END()
              };

    m_pDevice = pDevice;

    SetPerspectiveProjection(&m_mProj, pcam->fNearPlane, pcam->fFarPlane, 
            pcam->fFieldOfView, fHeight / fWidth);

    m_fFieldOfView = pcam->fFieldOfView;

    // Create textures
    for (i = 0; i < NUM_COG_TEXTURES; i++) {
        _stprintf(szTexture, TEXT("cog%d.bmp"), i);
        m_pd3dtCog[i] = (LPDIRECT3DTEXTURE8)CreateTexture(pDevice, szTexture, D3DFMT_X8R8G8B8);
        if (!m_pd3dtCog[i]) {
            return FALSE;
        }
#ifdef UNDER_XBOX
        m_pd3dtCog[i]->MoveResourceMemory(D3DMEM_VIDEO);
#endif // UNDER_XBOX
    }

    for (i = 0; i < NUM_SHAFT_TEXTURES; i++) {
        _stprintf(szTexture, TEXT("shaft%d.bmp"), i);
        m_pd3dtShaft[i] = (LPDIRECT3DTEXTURE8)CreateTexture(pDevice, szTexture, D3DFMT_X8R8G8B8);
        if (!m_pd3dtShaft[i]) {
            return FALSE;
        }
#ifdef UNDER_XBOX
        m_pd3dtShaft[i]->MoveResourceMemory(D3DMEM_VIDEO);
#endif // UNDER_XBOX
    }

    // Create materials
    for (i = 0; i < NUM_MATERIALS; i++) {
        SetMaterial(&m_material[i], RGB_MAKE(144+rand()%112,144+rand()%112,144+rand()%112), 
                            RGB_MAKE(196,196,196), 
                            RGB_MAKE(128+rand()%64,128+rand()%64,128+rand()%64), 
                            0, FRND(100.0f));
    }

    // Create lights
    for (i = 0; i < NUM_LIGHTS; i++) {
        SetLight(&m_ldLight[i].light, g_liLightInit[i].d3dlt, D3DXVECTOR3(0.0f, 0.0f, VIEW_Z),
                            D3DXVECTOR3(0.0f, -1.0f, 1.0f), 0xFFFFFFFF, RGB_MAKE(196, 196, 196),
                            RGB_MAKE(255, 255, 255), D3DLIGHT_RANGE_MAX, 1.0f, 1.0f, 0.0f, 0.0f,
                            1.57f, 2.35f);
        m_ldLight[i].cAmbient = RGB_MAKE(96 + rand() % 32, 96 + rand() % 32, 96 + rand() % 32);
        m_ldLight[i].bSpecular = g_liLightInit[i].bSpecular;

        // Create vertex shaders
//        m_ldLight[i].dwVShader = CreateVertexShader(pDevice, dwSDecl, g_liLightInit[i].szVShader);
//        if (m_ldLight[i].dwVShader == INVALID_SHADER_HANDLE) {
//            return FALSE;
//        }
    }

    // Create a pentagonal shaft cylinder of length 1.0
    if (!CreateCylinder((PVERTEX*)&m_prUnitShaft, &m_dwShaftVertices, &pwShaft, 
                        &m_dwShaftIndices, 5, SHAFT_RADIUS, 1.0f, CYLCAPS_NONE))
    {
        return FALSE;
    }
    m_dwShaftPrimitives = m_dwShaftIndices / 3;

    for (i = 0; i < m_dwShaftVertices; i++) {
        m_prUnitShaft[i].vPosition.x += 0.5f;
    }

    m_pd3diShaft = CreateIndexBuffer(pDevice, pwShaft, m_dwShaftIndices * sizeof(WORD));

    MemFree(pwShaft);

    if (!m_pd3diShaft) {
        return FALSE;
    }

    // Initialize tooth vertices and indices
    m_dwToothVertices = 8;
    m_dwToothIndices = 30;
    m_dwToothPrimitives = 10;

    m_pd3diTooth = CreateIndexBuffer(pDevice, NULL, m_dwToothIndices * sizeof(WORD));
    if (!m_pd3diTooth) {
        return FALSE;
    }

    m_pd3diTooth->Lock(0, 0, (LPBYTE*)&pwTooth, 0);

    for (i = 0, uIndex = 0; i < 3; i++) {
        pwTooth[uIndex++] = i * 2;
        pwTooth[uIndex++] = i * 2 + 2;
        pwTooth[uIndex++] = i * 2 + 3;
        pwTooth[uIndex++] = i * 2;
        pwTooth[uIndex++] = i * 2 + 3;
        pwTooth[uIndex++] = i * 2 + 1;
    }

    for (i = 1; i < 3; i++) {
        pwTooth[uIndex++] = 0;
        pwTooth[uIndex++] = (i + 1) * 2;
        pwTooth[uIndex++] = i * 2;
    }

    for (i = 1; i < 3; i++) {
        pwTooth[uIndex++] = 1;
        pwTooth[uIndex++] = i * 2 + 1;
        pwTooth[uIndex++] = (i + 1) * 2 + 1;
    }

    m_pd3diTooth->Unlock();

    // Create six bounding boxes to enclose the gears
    SetRect3D(&m_rectBox[0], &D3DXVECTOR3(-BOUND_RADIUS - 1.0f, -fBoundHeight, -BOUND_RADIUS), &D3DXVECTOR3(-BOUND_RADIUS, fBoundHeight, BOUND_RADIUS));
    SetRect3D(&m_rectBox[1], &D3DXVECTOR3(BOUND_RADIUS, -fBoundHeight, -BOUND_RADIUS), &D3DXVECTOR3(BOUND_RADIUS + 1.0f, fBoundHeight, BOUND_RADIUS));
    SetRect3D(&m_rectBox[2], &D3DXVECTOR3(-BOUND_RADIUS, -fBoundHeight - 1.0f, -BOUND_RADIUS), &D3DXVECTOR3(BOUND_RADIUS, -fBoundHeight, BOUND_RADIUS));
    SetRect3D(&m_rectBox[3], &D3DXVECTOR3(-BOUND_RADIUS, fBoundHeight, -BOUND_RADIUS), &D3DXVECTOR3(BOUND_RADIUS, fBoundHeight + 1.0f, BOUND_RADIUS));
    SetRect3D(&m_rectBox[4], &D3DXVECTOR3(-BOUND_RADIUS, -fBoundHeight, -BOUND_RADIUS - 1.0f), &D3DXVECTOR3(BOUND_RADIUS, fBoundHeight, -BOUND_RADIUS));
    SetRect3D(&m_rectBox[5], &D3DXVECTOR3(-BOUND_RADIUS, -fBoundHeight, BOUND_RADIUS), &D3DXVECTOR3(BOUND_RADIUS, fBoundHeight, BOUND_RADIUS + 1.0f));

    m_uNumBoxes = 6;

    m_uNumGears = 0;
    m_uNumMaterials = 0;
    m_uNumLights = 0;

    m_uCogTextures = 0;
    m_uShaftTextures = 0;

    m_dwMaxDepth = ((UINT)((float)(log((double)NUM_GEARS)) / (float)(log(2.0))) + 1);

    csCogSize[0] = COGSIZE_SMALL;
    csCogSize[1] = COGSIZE_LARGE;
    csCogSize[2] = COGSIZE_MEDIUM;
    fCogOffset[1] = GEAR_LENGTH;
    fCogOffset[0] = fCogOffset[1] / 2.0f;
    SetRect3D(&rectBox[0], &D3DXVECTOR3(-10.0f - (S_COG_WIDTH / 2.0f), -SHAFT_RADIUS, -SHAFT_RADIUS), &D3DXVECTOR3(-10.0f + fCogOffset[1] + (M_COG_WIDTH / 2.0f), SHAFT_RADIUS, SHAFT_RADIUS));
    SetRect3D(&rectBox[1], &D3DXVECTOR3(-10.0f - (S_COG_WIDTH / 2.0f), -(S_COG_RADIUS + TOOTH_HEIGHT), -(S_COG_RADIUS + TOOTH_HEIGHT)), &D3DXVECTOR3(-10.0f + (S_COG_WIDTH / 2.0f), (S_COG_RADIUS + TOOTH_HEIGHT), (S_COG_RADIUS + TOOTH_HEIGHT)));
    SetRect3D(&rectBox[2], &D3DXVECTOR3(-10.0f + fCogOffset[0] - (L_COG_WIDTH / 2.0f), -(L_COG_RADIUS + TOOTH_HEIGHT), -(L_COG_RADIUS + TOOTH_HEIGHT)), &D3DXVECTOR3(-10.0f + fCogOffset[0] + (L_COG_WIDTH / 2.0f), (L_COG_RADIUS + TOOTH_HEIGHT), (L_COG_RADIUS + TOOTH_HEIGHT)));
    SetRect3D(&rectBox[3], &D3DXVECTOR3(-10.0f + fCogOffset[1] - (M_COG_WIDTH / 2.0f), -(M_COG_RADIUS + TOOTH_HEIGHT), -(M_COG_RADIUS + TOOTH_HEIGHT)), &D3DXVECTOR3(-10.0f + fCogOffset[1] + (M_COG_WIDTH / 2.0f), (M_COG_RADIUS + TOOTH_HEIGHT), (M_COG_RADIUS + TOOTH_HEIGHT)));

    m_pgearRoot = CreateGear(csCogSize, fCogOffset, &D3DXVECTOR3(-10.0f, 0.0f, 0.0f), &D3DXVECTOR3(1.0f, 0.0f, 0.0f), M_PI / 20.0f, 0.0f, rectBox);
    if (!m_pgearRoot) {
        return FALSE;
    }

//DebugString(TEXT("Created gears: %d"), m_uNumGears);

    for (m_dwMaxDepth++; m_uNumGears < NUM_GEARS && m_dwMaxDepth <= 15; m_dwMaxDepth++) {
        AddGear(m_pgearRoot);
    }

//DebugString(TEXT("Created gears: %d"), g_uNumGears);

    if (m_uNumGears != NUM_GEARS) {
        OutputString(TEXT("WARNING: The requested number of gears (%d) could ")
                    TEXT("not be created: only %d gears fit into the scene.\r\n")
                    TEXT("Please lower the number of gears requested or change ")
                    TEXT("the seed for the pseudo-random number generator to\r\n")
                    TEXT("obtain a different gear set"), NUM_GEARS, m_uNumGears);
    }

    return TRUE;
}

//******************************************************************************
CClockwork::~CClockwork() {

    UINT i;

    MemFree32(m_prUnitShaft);
    ReleaseIndexBuffer(m_pd3diShaft);
    ReleaseIndexBuffer(m_pd3diTooth);

    for (i = 0; i < NUM_LIGHTS; i++) {
        if (m_ldLight[i].dwVShader != INVALID_SHADER_HANDLE) {
            ReleaseVertexShader(m_pDevice, m_ldLight[i].dwVShader);
        }
    }

    for (i = 0; i < NUM_COG_TEXTURES; i++) {
        if (m_pd3dtCog[i]) {
            ReleaseTexture(m_pd3dtCog[i]);
        }
    }
    for (i = 0; i < NUM_SHAFT_TEXTURES; i++) {
        if (m_pd3dtShaft[i]) {
            ReleaseTexture(m_pd3dtShaft[i]);
        }
    }

    ReleaseGear(m_pgearRoot);
}

//******************************************************************************
void CClockwork::Update(float fTimeDilation) {

//    RotateGear(m_pgearRoot, M_PI / 40.0f * fTimeDilation);
    RotateGear(m_pgearRoot, GEAR_ROTATION_ANGLE * fTimeDilation);
}

//******************************************************************************
void CClockwork::Render() {

    RenderGear(m_pgearRoot);
}

//******************************************************************************
void CClockwork::Render(D3DXMATRIX* pmView) {

    m_pmView = pmView;

    RenderGearP(m_pgearRoot);
}

//******************************************************************************
// Create a cylinder oriented along the x axis
BOOL CClockwork::CreateCylinder(PVERTEX* pprVertices, LPDWORD pdwNumVertices, 
                    LPWORD* ppwIndices, LPDWORD pdwNumIndices, 
                    DWORD dwSides, float fRadius, float fWidth,
                    DWORD dwCylinderCaps) 
{
    PVERTEX     prVertices;
    DWORD       dwNumVertices;
    LPWORD      pwIndices;
    DWORD       dwNumIndices;
    float       fSin, fCos, fTheta, fDelta;
    D3DXVECTOR3 vN;
    UINT        uIndex;
    UINT        i;

    if (!pprVertices || !pdwNumVertices || !ppwIndices || !pdwNumIndices) {
        return FALSE;
    }

    dwNumVertices = dwSides * 2;

    prVertices = (PVERTEX)MemAlloc32(dwNumVertices * sizeof(VERTEX));
    if (!prVertices) {
        return FALSE;
    }

    fDelta = M_2PI / (float)dwSides;

    for (i = 0, fTheta = 0.0f; i < dwSides; i++, fTheta += fDelta) {

        fSin = (float)(sin(fTheta));
        fCos = (float)(cos(fTheta));

        prVertices[i*2]   = VERTEX(D3DXVECTOR3(fWidth / 2.0f, fSin * fRadius, fCos * fRadius),
                                      *D3DXVec3Normalize(&vN, &D3DXVECTOR3(1.0f, fSin, fCos)), 
                                      1.0f - ((fCos + 1.0f) / 2.0f), 1.0f - ((fSin + 1.0f) / 2.0f));
        prVertices[i*2+1] = VERTEX(D3DXVECTOR3(-fWidth / 2.0f, fSin * fRadius, fCos * fRadius),
                                      *D3DXVec3Normalize(&vN, &D3DXVECTOR3(-1.0f, fSin, fCos)), 
                                      (fCos + 1.0f) / 2.0f, 1.0f - ((fSin + 1.0f) / 2.0f));
    }

    dwNumIndices = 6 * dwSides;
    if (dwCylinderCaps & CYLCAPS_TOP) {
        dwNumIndices += 3 * (dwSides - 2);
    }
    if (dwCylinderCaps & CYLCAPS_BOTTOM) {
        dwNumIndices += 3 * (dwSides - 2);
    }

    pwIndices = (LPWORD)MemAlloc(dwNumIndices * sizeof(WORD));
    if (!pwIndices) {
        MemFree32(prVertices);
        return FALSE;
    }

    for (i = 0, uIndex = 0; i < dwSides - 1; i++) {
        pwIndices[uIndex++] = i * 2;
        pwIndices[uIndex++] = i * 2 + 2;
        pwIndices[uIndex++] = i * 2 + 3;
        pwIndices[uIndex++] = i * 2;
        pwIndices[uIndex++] = i * 2 + 3;
        pwIndices[uIndex++] = i * 2 + 1;
    }

    pwIndices[uIndex++] = i * 2;
    pwIndices[uIndex++] = 0;
    pwIndices[uIndex++] = 1;
    pwIndices[uIndex++] = i * 2;
    pwIndices[uIndex++] = 1;
    pwIndices[uIndex++] = i * 2 + 1;

    if (dwCylinderCaps & CYLCAPS_TOP) {

        for (i = 1; i < dwSides - 1; i++) {
            pwIndices[uIndex++] = 0;
            pwIndices[uIndex++] = (i + 1) * 2;
            pwIndices[uIndex++] = i * 2;
        }
    }

    if (dwCylinderCaps & CYLCAPS_BOTTOM) {

        for (i = 1; i < dwSides - 1; i++) {
            pwIndices[uIndex++] = 1;
            pwIndices[uIndex++] = i * 2 + 1;
            pwIndices[uIndex++] = (i + 1) * 2 + 1;
        }
    }

    *pprVertices = prVertices;
    *pdwNumVertices = dwNumVertices;
    *ppwIndices = pwIndices;
    *pdwNumIndices = dwNumIndices;

    return TRUE;
}

//******************************************************************************
void CClockwork::ReleaseCylinder(PVERTEX prVertices, LPWORD pwIndices) {

    if (prVertices) {
        MemFree32(prVertices);
    }

    if (pwIndices) {
        MemFree(pwIndices);
    }
}

//******************************************************************************
void CClockwork::SetRect3D(PD3DRECT3D prect, D3DXVECTOR3* pv1, D3DXVECTOR3* pv2) {
    
    prect->v1 = *pv1;
    prect->v2 = *pv2;
}

//******************************************************************************
BOOL CClockwork::GearCollision(PD3DRECT3D prectBox1, PD3DRECT3D prectBox2) {

    return !((prectBox1->v1.x >= prectBox2->v2.x || prectBox1->v2.x <= prectBox2->v1.x) ||
             (prectBox1->v1.y >= prectBox2->v2.y || prectBox1->v2.y <= prectBox2->v1.y) ||
             (prectBox1->v1.z >= prectBox2->v2.z || prectBox1->v2.z <= prectBox2->v1.z));
}

//******************************************************************************
void CClockwork::GetFrameStats(PFRAMESTATS pfs) {

    if (!pfs) {
        return;
    }

    GetGearStats(m_pgearRoot, pfs);
}

//******************************************************************************
void CClockwork::GetGearStats(PGEAR pgear, PFRAMESTATS pfs) {

    UINT i, j;

    if (!pgear) {
        return;
    }

    if (pgear->nMaterialIndex >= 0) {
        pfs->dwMaterials++;
    }
    if (pgear->nLightIndex >= 0) {
        pfs->dwLights++;
    }

    pfs->dwTransforms++;

    pfs->dwTextures++;

    pfs->dwVBuffers++;
    pfs->dwIBuffers++;

    pfs->dwMeshes++;
    pfs->dwPolygons += m_dwShaftPrimitives;

    for (i = 0; i < 3; i++) {

        pfs->dwTextures++;

        pfs->dwVBuffers++;
        pfs->dwIBuffers++;

        pfs->dwMeshes++;
        pfs->dwPolygons += pgear->cog[i].dwCenterPrimitives;

        pfs->dwVBuffers++;

        for (j = 0; j < pgear->cog[i].dwSides; j++) {

            // ##REVIEW: Since the SetIndices call for the gear teeth doesn't change the index buffer
            // but instead only changes the offset to add to the indices, should it be counted the 
            // same as other SetIndices calls?
            pfs->dwIBuffers++;
    
            pfs->dwMeshes++;
            pfs->dwPolygons += m_dwToothPrimitives;
        }
    }

    for (i = 0; i < 2; i++) {
        GetGearStats(pgear->pgearNext[i], pfs);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\clockwork\sources.inc ===
TARGETNAME=clockwork
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dbase.lib

SOURCES=\
    main.cpp \
    clockwork.cpp \
    cogs.cpp \
    clockwork.rc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\all\utils.cpp ===
//-----------------------------------------------------------------------------
// FILE: FILLRATE.CPP
//
// Desc: a stupid fillrate test
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <stdio.h>

#include "bitfont.h"
#include "utils.h"

// CScrText font class
BitFont g_bitfont;

//=========================================================================
// Stringtize PS_TEXTUREMODES_*
//=========================================================================
LPCSTR GetTextureModeStr(DWORD TextureMode)
{
    #undef XTAG
    #define XTAG(_tag) { PS_TEXTUREMODES##_tag, "PS_TM" #_tag }
    static const struct
    {
        DWORD texturemode;
        const char *szD3DMSStr;
    } rgszTMStr[] =
    {
        XTAG(_NONE), XTAG(_PROJECT2D), XTAG(_PROJECT3D),
        XTAG(_CUBEMAP), XTAG(_PASSTHRU), XTAG(_CLIPPLANE),
        XTAG(_BUMPENVMAP), XTAG(_BUMPENVMAP_LUM), XTAG(_BRDF),
        XTAG(_DOT_ST), XTAG(_DOT_ZW), XTAG(_DOT_RFLCT_DIFF),
        XTAG(_DOT_RFLCT_SPEC), XTAG(_DOT_STR_3D), XTAG(_DOT_STR_CUBE),
        XTAG(_DPNDNT_AR), XTAG(_DPNDNT_GB), XTAG(_DOTPRODUCT),
        XTAG(_DOT_RFLCT_SPEC_CONST),
    };
    static const int cFmts = sizeof(rgszTMStr) / sizeof(rgszTMStr[0]);

    for(int ifmt = 0; ifmt < cFmts; ifmt++)
    {
        if(rgszTMStr[ifmt].texturemode == TextureMode)
            return rgszTMStr[ifmt].szD3DMSStr;
    }

    return rgszTMStr[cFmts - 1].szD3DMSStr;
}

//=========================================================================
// Stringtize D3DMS_*
//=========================================================================
LPCSTR GetMultiSampleStr(DWORD mstype)
{
    #undef XTAG
    #define XTAG(_tag) { _tag, #_tag }
    static const struct
    {
        DWORD mstype;
        const char *szD3DMSStr;
    } rgszMSStr[] =
    {
        XTAG(D3DMS_NONE), XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMS_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMS_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMS_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMS_PREFILTER_FORMAT_A8R8G8B8),
    };
    static const int cFmts = sizeof(rgszMSStr) / sizeof(rgszMSStr[0]);

    for(int ifmt = 0; ifmt < cFmts; ifmt++)
    {
        if(rgszMSStr[ifmt].mstype == mstype)
            return rgszMSStr[ifmt].szD3DMSStr;
    }

    return rgszMSStr[cFmts - 1].szD3DMSStr;
}

//=========================================================================
// Stringtize D3DCMP_*
//=========================================================================
LPCSTR GetD3DCMPStr(D3DCMPFUNC d3dcmpfunc)
{
    static const char *rgszD3DCmp[] =
    {
        "D3DCMP_NEVER",         // 0x200,
        "D3DCMP_LESS",          // 0x201,
        "D3DCMP_EQUAL",         // 0x202,
        "D3DCMP_LESSEQUAL",     // 0x203,
        "D3DCMP_GREATER",       // 0x204,
        "D3DCMP_NOTEQUAL",      // 0x205,
        "D3DCMP_GREATEREQUAL",  // 0x206,
        "D3DCMP_ALWAYS",        // 0x207,
        "??",
    };

    DWORD id3dcmp = min(d3dcmpfunc & 0xf, sizeof(rgszD3DCmp) / sizeof(rgszD3DCmp[0]));
    return rgszD3DCmp[id3dcmp];
}

//=========================================================================
// Stringtize D3DFMT_*
//=========================================================================
LPCSTR GetD3DFormatStr(D3DFORMAT d3dformat)
{
    #undef XTAG
    #define XTAG(_tag) { _tag, #_tag }
    static const struct
    {
        D3DFORMAT d3dformat;
        const char *szD3DFormat;
    } rgszD3DFmt[] =
    {
        XTAG(D3DFMT_A8R8G8B8), XTAG(D3DFMT_X8R8G8B8), XTAG(D3DFMT_R5G6B5),
        XTAG(D3DFMT_R6G5B5), XTAG(D3DFMT_X1R5G5B5), XTAG(D3DFMT_A1R5G5B5),
        XTAG(D3DFMT_A4R4G4B4), XTAG(D3DFMT_A8), XTAG(D3DFMT_A8B8G8R8),
        XTAG(D3DFMT_B8G8R8A8), XTAG(D3DFMT_R4G4B4A4), XTAG(D3DFMT_R5G5B5A1),
        XTAG(D3DFMT_R8G8B8A8), XTAG(D3DFMT_R8B8), XTAG(D3DFMT_G8B8),
        XTAG(D3DFMT_P8), XTAG(D3DFMT_L8), XTAG(D3DFMT_A8L8),
        XTAG(D3DFMT_AL8), XTAG(D3DFMT_L16), XTAG(D3DFMT_V8U8),
        XTAG(D3DFMT_L6V5U5), XTAG(D3DFMT_X8L8V8U8), XTAG(D3DFMT_Q8W8V8U8),
        XTAG(D3DFMT_V16U16), XTAG(D3DFMT_D16_LOCKABLE), XTAG(D3DFMT_D16),
        XTAG(D3DFMT_D24S8), XTAG(D3DFMT_F16), XTAG(D3DFMT_F24S8),
        XTAG(D3DFMT_UYVY), XTAG(D3DFMT_YUY2), XTAG(D3DFMT_DXT1),
        XTAG(D3DFMT_DXT2), XTAG(D3DFMT_DXT3), XTAG(D3DFMT_DXT4),
        XTAG(D3DFMT_DXT5), XTAG(D3DFMT_LIN_A1R5G5B5), XTAG(D3DFMT_LIN_A4R4G4B4),
        XTAG(D3DFMT_LIN_A8), XTAG(D3DFMT_LIN_A8B8G8R8), XTAG(D3DFMT_LIN_A8R8G8B8),
        XTAG(D3DFMT_LIN_B8G8R8A8), XTAG(D3DFMT_LIN_G8B8), XTAG(D3DFMT_LIN_R4G4B4A4),
        XTAG(D3DFMT_LIN_R5G5B5A1), XTAG(D3DFMT_LIN_R5G6B5), XTAG(D3DFMT_LIN_R6G5B5),
        XTAG(D3DFMT_LIN_R8B8), XTAG(D3DFMT_LIN_R8G8B8A8), XTAG(D3DFMT_LIN_X1R5G5B5),
        XTAG(D3DFMT_LIN_X8R8G8B8), XTAG(D3DFMT_LIN_A8L8), XTAG(D3DFMT_LIN_AL8),
        XTAG(D3DFMT_LIN_L16), XTAG(D3DFMT_LIN_L8), XTAG(D3DFMT_LIN_D24S8),
        XTAG(D3DFMT_LIN_F24S8), XTAG(D3DFMT_LIN_D16), XTAG(D3DFMT_LIN_F16),
        XTAG(D3DFMT_UNKNOWN),
    };
    static const int cFmts = sizeof(rgszD3DFmt) / sizeof(rgszD3DFmt[0]);

    for(int ifmt = 0; ifmt < cFmts; ifmt++)
    {
        if(rgszD3DFmt[ifmt].d3dformat == d3dformat)
            return rgszD3DFmt[ifmt].szD3DFormat;
    }

    return rgszD3DFmt[cFmts - 1].szD3DFormat;
}

//=========================================================================
// Check whether specified format is linear
//=========================================================================
bool IsLinearFormat(DWORD Format)
{
    switch(Format)
    {
    case D3DFMT_LIN_A1R5G5B5:
    case D3DFMT_LIN_A4R4G4B4:
    case D3DFMT_LIN_A8:
    case D3DFMT_LIN_A8B8G8R8:
    case D3DFMT_LIN_A8R8G8B8:
    case D3DFMT_LIN_B8G8R8A8:
    case D3DFMT_LIN_G8B8:
    case D3DFMT_LIN_R4G4B4A4:
    case D3DFMT_LIN_R5G5B5A1:
    case D3DFMT_LIN_R5G6B5:
    case D3DFMT_LIN_R6G5B5:
    case D3DFMT_LIN_R8B8:
    case D3DFMT_LIN_R8G8B8A8:
    case D3DFMT_LIN_X1R5G5B5:
    case D3DFMT_LIN_X8R8G8B8:

    case D3DFMT_LIN_A8L8:
    case D3DFMT_LIN_AL8:
    case D3DFMT_LIN_L16:
    case D3DFMT_LIN_L8:

    case D3DFMT_LIN_D24S8:
    case D3DFMT_LIN_F24S8:
    case D3DFMT_LIN_D16:
    case D3DFMT_LIN_F16:
        return true;
    }

    return false;
}

//=========================================================================
// Return number of bits per pixel/texel.
//=========================================================================
DWORD BitsPerPixelOfD3DFORMAT(DWORD Format)
{
    DWORD retval = 0;

    switch(Format)
    {
    case D3DFMT_A8R8G8B8:   // Q8W8V8U8
    case D3DFMT_X8R8G8B8:   // X8L8V8U8
    case D3DFMT_A8B8G8R8:
    case D3DFMT_B8G8R8A8:
    case D3DFMT_R8G8B8A8:
    case D3DFMT_V16U16:
    case D3DFMT_D24S8:
    case D3DFMT_F24S8:
    case D3DFMT_UYVY:
    case D3DFMT_YUY2:
    case D3DFMT_LIN_A8B8G8R8:
    case D3DFMT_LIN_A8R8G8B8:
    case D3DFMT_LIN_B8G8R8A8:
    case D3DFMT_LIN_R8G8B8A8:
    case D3DFMT_LIN_X8R8G8B8:
    case D3DFMT_LIN_D24S8:
    case D3DFMT_LIN_F24S8:
        retval = 32;
        break;

    case D3DFMT_R5G6B5:
    case D3DFMT_X1R5G5B5:
    case D3DFMT_A1R5G5B5:
    case D3DFMT_A4R4G4B4:
    case D3DFMT_R4G4B4A4:
    case D3DFMT_R5G5B5A1:
    case D3DFMT_R8B8:
    case D3DFMT_G8B8:   // V8U8
    case D3DFMT_A8L8:
    case D3DFMT_L16:
    case D3DFMT_L6V5U5:
    case D3DFMT_D16_LOCKABLE:  // D16
    case D3DFMT_F16:
    case D3DFMT_LIN_A1R5G5B5:
    case D3DFMT_LIN_A4R4G4B4:
    case D3DFMT_LIN_G8B8:
    case D3DFMT_LIN_R4G4B4A4:
    case D3DFMT_LIN_R5G5B5A1:
    case D3DFMT_LIN_R5G6B5:
    case D3DFMT_LIN_R6G5B5:
    case D3DFMT_LIN_R8B8:
    case D3DFMT_LIN_X1R5G5B5:
    case D3DFMT_LIN_A8L8:
    case D3DFMT_LIN_L16:
    case D3DFMT_LIN_D16:
    case D3DFMT_LIN_F16:
        retval = 16;
        break;

    case D3DFMT_A8:
    case D3DFMT_P8:
    case D3DFMT_L8:
    case D3DFMT_AL8:
    case D3DFMT_LIN_A8:
    case D3DFMT_LIN_AL8:
    case D3DFMT_LIN_L8:
        retval = 8;
        break;

    case D3DFMT_DXT1:
        retval = 4;
        break;

    case D3DFMT_DXT2: // DXT3
    case D3DFMT_DXT4: // DXT5
        retval = 8;
        break;

    default:
        CheckHR(E_FAIL);
        retval = 0;
        break;
    }

    return retval;
}

//=========================================================================
// Return file's last write time
//=========================================================================
UINT64 GetFileTime(LPCSTR lpFileName)
{
    WIN32_FILE_ATTRIBUTE_DATA fad;

    GetFileAttributesExA(lpFileName, GetFileExInfoStandard, &fad);
    return *(UINT64 *)&fad.ftLastWriteTime;
}

//=========================================================================
// Display d3d error then break into debugger
//=========================================================================
void DisplayError(const char *szCall, HRESULT hr)
{
    char szErr[512];

    if(hr)
    {
        UINT cch = _snprintf(szErr, sizeof(szErr), "FATAL: %s failed 0x%08lX: ", szCall, hr);

        D3DXGetErrorStringA(hr, &szErr[cch], sizeof(szErr) - cch - 1);
    }
    else
    {
        lstrcpynA(szErr, szCall, sizeof(szErr) - 1);
    }

    lstrcatA(szErr, "\n");
    OutputDebugStringA(szErr);

    _asm int 3;
}

//=========================================================================
// Formatted debug squirty
//=========================================================================
void _cdecl dprintf(LPCSTR lpFmt, ...)
{
    va_list arglist;
    char lpOutput[256];

    va_start(arglist, lpFmt);
    _vsnprintf(lpOutput, sizeof(lpOutput), lpFmt, arglist);
    va_end(arglist);

    OutputDebugStringA(lpOutput);
}

//=========================================================================
// Draw CScrText text buffer to front buffer
//=========================================================================
void CScrText::drawtext(bool fDebugSquirty)
{
    IDirect3DSurface8 *pFrontBuffer = NULL;

    D3DDevice_GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pFrontBuffer);
    if(pFrontBuffer)
    {
        // render results to the frontbuffer
        DWORD dx = 40;
        DWORD dy = 20;
        DWORD dwHeight;

        g_bitfont.GetTextStringLength(NULL, &dwHeight, NULL);
        dwHeight += 2;

        for(int iBuf = 0; iBuf < m_iLine; iBuf++)
        {
            if(fDebugSquirty)
                dprintf("%s\n", m_rgText[iBuf]);

            if(m_rgText[iBuf][0])
//                g_bitfont.DrawText(pFrontBuffer, m_rgText[iBuf], dx, dy, 0, 0xff9f9f9f, 0);

            dy += dwHeight;
        }

        RELEASE(pFrontBuffer);
    }
}

//=========================================================================
// Add a string to the CScrText string buffer
//=========================================================================
void _cdecl CScrText::printf(LPCSTR lpFmt, ...)
{
    va_list arglist;

    va_start(arglist, lpFmt);
    _vsnprintf(m_rgText[m_iLine], LINE_WIDTH, lpFmt, arglist);
    va_end(arglist);

    m_iLine = (m_iLine + 1) % NUM_LINES;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\bitfont.h ===
//-----------------------------------------------------------------------------
// FILE: BITFONT.H
//
// Desc: bit font header file
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#pragma once
#ifndef _BITFONT_H_
#define _BITFONT_H_


#ifdef XBOX
#include <xtl.h>
#else
#include <windows.h>
#include <d3d8.h>
#endif

// disable C4200: nonstandard extension used : zero-sized array in struct/union
#pragma warning(push)
#pragma warning(disable:4200)

// pack the structure as we're reading it from the disk
#pragma pack(1)

//----------------------------------------------------------------------------
// BXF file signature
#define BITFONT_SIG     '00BF'

//----------------------------------------------------------------------------
struct BitFontCharInfo
{
    BYTE bWidth;
    DWORD dwOffset;
};

//----------------------------------------------------------------------------
struct BitFontInfo
{
    DWORD   dwSig;
    DWORD   dwFontHeight;
    DWORD   cBfis;
    BitFontCharInfo rgBfi[];
};

#pragma warning(pop)
#pragma pack()


//----------------------------------------------------------------------------
// Draw flags
const DWORD DRAWTEXT_TRANSPARENTBKGND =     0x00000001;


//----------------------------------------------------------------------------
// A BitFont class that can be used with the DrawText routines above to
//  render text to various surfaces.
class BitFont
{
public:
    //----------------------------------------------------------------------------
    BitFont();

    //----------------------------------------------------------------------------
    ~BitFont();

#if 0

    //----------------------------------------------------------------------------
    // Load a BitFont font from a file
    bool Load(const WCHAR* filename);

#endif 0

    //----------------------------------------------------------------------------
    // Returns pixel height and width of string
    void GetTextStringLength(DWORD *pdwWidth, DWORD *pdwHeight, 
        const WCHAR* Message);

    //----------------------------------------------------------------------------
    // Draw the text to a surface
    void BitFont::DrawText
    (
        IDirect3DSurface8 *pSurface,
        const WCHAR*    str,
        int             iX,
        int             iY,
        DWORD           dwFlags,
        D3DCOLOR        colFore,
        D3DCOLOR        colBack
    );

private:
    //----------------------------------------------------------------------------
    // various pointers to font data, index tables and width tables
    BitFontInfo     *m_pBitFontInfo;
};

#endif // _BITFONT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\clockwork\main.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    main.cpp

Author:

    Matt Bronder

Description:

    Direct3D Immediate-Mode Framework.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// Function prototypes
//******************************************************************************

#ifdef UNDER_XBOX

typedef enum _FIRMWARE_REENTRY {
    HalHaltRoutine,
    HalRebootRoutine,
    HalQuickRebootRoutine,
    HalKdRebootRoutine,
    HalMaximumRoutine
} FIRMWARE_REENTRY, *PFIRMWARE_REENTRY;

extern "C" VOID HalReturnToFirmware(IN FIRMWARE_REENTRY Routine);

#endif // UNDER_XBOX

int         ExhibitScene(CDisplay* pDisplay, int *pnExitCode);
BOOL        ValidateDisplay(LPDIRECT3D8 pd3d, D3DCAPS8* pd3dcaps, 
                            D3DDISPLAYMODE* pd3ddm);

//******************************************************************************
// WinMain
//******************************************************************************

#ifndef UNDER_XBOX
#define RETURN(x)   return x
#else
#define RETURN(x)   return
#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
#ifndef UNDER_XBOX
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, int nCmdShow) 
#else
void __cdecl main()
#endif // UNDER_XBOX
{
    CDisplay*       pDisplay;
    D3DCREATIONDESC d3dcd;
    int             ret;

    // Allow global access to the instance handle
#ifndef UNDER_XBOX
    RegisterInstance(hInstance);
#else
    RegisterInstance(NULL);
#endif

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        RETURN(0);
    }

    // Set the validation procedure for the device
    InitCheckDisplayProc(ValidateDisplay);

    // Initialize creation parameters
    memset(&d3dcd, 0, sizeof(D3DCREATIONDESC));
    d3dcd.d3ddt = D3DDEVTYPE_HAL;
    d3dcd.bWindowed = FALSE;
    d3dcd.d3ddm.Width = 640;
    d3dcd.d3ddm.Height = 480;
    d3dcd.d3ddm.Format = D3DFMT_X8R8G8B8;
//    SetRect(&d3dcd.rectWnd, 20, 20, 320, 320);
    d3dcd.bDepthBuffer = TRUE;
    d3dcd.fmtd = D3DFMT_D24S8;
    d3dcd.uPresentInterval = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dcd.mst = D3DMULTISAMPLE_NONE;

    // Create the display
    pDisplay = new CDisplay();
    if (!pDisplay) {
        ReleaseHeap();
        RETURN(0);
    }

    // Initialize the display
    if (!pDisplay->Create(&d3dcd)) {
        DebugString(TEXT("CDisplay::Create failed"));
        pDisplay->Release();
        ReleaseHeap();
        RETURN(0);
    }

    // Render the 3D scene
    ExhibitScene(pDisplay, &ret);

    // Clean up
    pDisplay->Release();

    // Release the heap
    ReleaseHeap();

    // Reboot on Xbox
#ifdef UNDER_XBOX
    HalReturnToFirmware(HalQuickRebootRoutine);
#endif

    RETURN(ret);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Benmark5.cpp ===
//-----------------------------------------------------------------------------
// FILE: BENMARK5.CPP
//
// Desc: Main BenMark file. This was all based on the dx7
//  BenMark5 Ribbons exe written by Ben DeWaal of nVidia.
//
// Ben says: "The key point here is NOT to use D3DVBCAPS_SYSTEMMEMORY.
//  It will halve the triangle rate."
//
// Copyright (c) 1999-2000 NVIDIA Corporation. All rights reserved.
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#define STRICT


#include <stdio.h>
#include <math.h>
#include <xtl.h>
#include <xdbg.h>
#include <xtestlib.h>
#include <xlog.h>
#include <macros.h>
#include <xgraphics.h>

#include "benmark5.h"

static ScenarioMenu s_LeftTriggerMenu = 
{
	XINPUT_GAMEPAD_LEFT_TRIGGER,
	L"Toggle Effects",
	{
		L"Toggle specular lighting",
		L"Toggle Z buffer",
		L"Toggle local view",
		NULL,
		NULL,
		NULL
	},
	3
};

static ScenarioMenu s_RightTriggerMenu = 
{
	XINPUT_GAMEPAD_RIGHT_TRIGGER,
	L"Lighting",
	{
		L"Add directional light",
		L"Add spot light",
		L"Add point light",
		L"Remove directional light",
		L"Remove spot light",
		L"Remove point light"
	},
	6
};

static ScenarioMenu s_LeftThumbMenu = 
{
	XINPUT_GAMEPAD_LEFT_THUMB,
	L"Performance",
	{
		L"Toggle number of Textures from 0 - 2",
		L"Toggle Triangle List / Triangle Strip",
		L"Toggle Solid/Point/Wireframe fillmode",
		L"Toggle DrawIndexedPrimitive/DrawIndexedPrimitiveUP routine",
        L"Toggle realtime/precompiled draws",
        NULL
	},
	5
};

//=========================================================================
// Given a D3DFORMAT, return string description.
//=========================================================================

const WCHAR *SzFmtName(D3DFORMAT d3dfmt)
{
    #define XTAG(x) {x, L#x}
    static const struct FMTD3DFMT
    {
        D3DFORMAT d3dfmt;
        WCHAR *szName;
    } rgFmtD3dFmt[] =
    {
        XTAG(D3DFMT_X8R8G8B8),
        XTAG(D3DFMT_A1R5G5B5),
        XTAG(D3DFMT_A8R8G8B8),
        XTAG(D3DFMT_A4R4G4B4),
        XTAG(D3DFMT_R5G6B5),
        XTAG(D3DFMT_A1R5G5B5),

        XTAG(D3DFMT_UNKNOWN),
    };
    static const WCHAR szD3dUnkwn[] = L"D3DFMT_???";

    for(int i = 0; i < sizeof(rgFmtD3dFmt) / sizeof(rgFmtD3dFmt[0]); i++)
    {
        if(d3dfmt == rgFmtD3dFmt[i].d3dfmt)
            return rgFmtD3dFmt[i].szName;
    }

    return szD3dUnkwn;
}

//=========================================================================
// Background thread loop.
//=========================================================================

DWORD WINAPI ThreadProc
(
  LPVOID lpParameter   // thread data
)
{
    CBenMark *pMark = (CBenMark *)lpParameter;

    while (!pMark->m_fTerminateThread)
    {
        for (volatile double i = 1000000000.0f; i != 0; i = i / 10.0f)
            ;

        InterlockedIncrement(&pMark->m_lDivides);
    }

    return 0;
}


//=========================================================================
// CBenMark constructor
//=========================================================================

CBenMark::CBenMark()
//	: m_IniFile( BENMARK_INI_PATH )
{
    m_pwIndices = NULL;
    m_pIndexBuffer = NULL;

    m_pVBRibbon[0] = NULL;
    m_pVBRibbon[1] = NULL;

    m_pVertices[0] = NULL;
    m_pVertices[1] = NULL;

    m_pPushBuffer  = NULL;

    m_pTexture1 = NULL;
    m_pTexture2 = NULL;
    m_pBackSurf = NULL;

    m_dwFVF = 0;
    m_dwFVFSize = 0;

    m_dwIndexCount = 0;
    m_dwNumVertices = 0;

    m_lDivides      = 0;
    m_dwAveCount     = 0;
    m_fdAveTriPerSec = 0.0;
    m_fdMaxTriPerSec = 0.0;
    m_fdMinTriPerSec = 1e199;

	m_nNumLights = 0;

    m_hThread = 0;

	m_wLoop			= 0;
	m_wLoops			= GetPrivateProfileIntA( "BENMARK5", "Loops", 1, BENMARK_INI_PATH );
	ReadIni();

    m_bUseDepthBuffer = TRUE;
    m_DepthBufferFormat = D3DFMT_D16;

	m_hGamePad1		=	NULL;

	m_bShowHelp = FALSE;
	m_bShowStats = TRUE;
	ZeroMemory(m_rgpMenus, sizeof(m_rgpMenus));
	m_iActiveKey = -1;
	m_iActiveMenu = 0;
	m_bRunFullTest = FALSE;
	m_bFrameMoving = TRUE;
	m_bSingleStep = FALSE;
	m_dwCurrentMode = 0;
	m_iSampleType = (D3DMULTISAMPLE_TYPE)0;		 // Current sample mode.
	m_dwSampleMask = 0;      // Mask of available FSAA modes.

	m_dwTotalTimes = 0;

	m_dwStartLoopTime = 0;
}

HRESULT CBenMark::ReadIni()
{
	HRESULT hr = S_OK;

	CHAR szSectionName[256];

	sprintf( szSectionName, "LOOP%d", m_wLoop );

	ZeroMemory(&m_bmxState, sizeof(m_bmxState));

	m_bmxState.cApplyTextures	= GetPrivateProfileIntA( szSectionName, "ApplyTextures", 0, BENMARK_INI_PATH );
	m_bmxState.bUseTriList		= GetPrivateProfileIntA( szSectionName, "UseTriList", 0, BENMARK_INI_PATH );
	m_bmxState.bZenable			= GetPrivateProfileIntA( szSectionName, "Zenable", TRUE, BENMARK_INI_PATH );
	m_bmxState.bSpecularenable	= GetPrivateProfileIntA( szSectionName, "Specularenable", 0, BENMARK_INI_PATH );
	m_bmxState.bLocalviewer		= GetPrivateProfileIntA( szSectionName, "Localviewer", 0, BENMARK_INI_PATH );
	
	m_bmxState.nDirectionalLights = GetPrivateProfileIntA( szSectionName, "DirectionalLights", 1, BENMARK_INI_PATH );
	m_bmxState.nSpotLights		= GetPrivateProfileIntA( szSectionName, "SpotLights", 0, BENMARK_INI_PATH );
	m_bmxState.nPointLights		= GetPrivateProfileIntA( szSectionName, "PointLights", 0, BENMARK_INI_PATH );
	
	m_bmxState.iDrawFunc		= GetPrivateProfileIntA( szSectionName, "DrawFunc", DF_DRAWINDEXEDPRIMITIVE, BENMARK_INI_PATH );
	m_bmxState.fPrecompile		= GetPrivateProfileIntA( szSectionName, "Precompile", 0, BENMARK_INI_PATH );
	m_bmxState.iFillMode		= (D3DFILLMODE)GetPrivateProfileIntA( szSectionName, "FillMode", D3DFILL_SOLID, BENMARK_INI_PATH );

	m_bmxState.dwTime			= GetPrivateProfileIntA( szSectionName, "Time", 60000, BENMARK_INI_PATH );

	return hr;
}

HRESULT CBenMark::InitGraphics()
{
	HRESULT hr = S_OK;

	Initialize3DEnvironment();

	m_dwStartLoopTime = timeGetTime();

	return hr;
}

//=========================================================================
// Called when the app is exitting, or the device is being changed,
// this function deletes any device dependant objects.
//=========================================================================
HRESULT CBenMark::DestroyGraphics()
{
	HRESULT hr = S_OK;

	UpdateStats( (FLOAT)(m_dwCurrentTime-m_dwStartLoopTime) );

	if (m_hThread)
    {
        m_fTerminateThread = TRUE;
        WaitForSingleObject(m_hThread, 2000);
    }
	
    delete[] m_pwIndices;
    m_pwIndices = NULL;
	
    delete[] m_pVertices[0];
    m_pVertices[0] = NULL;
	
    delete[] m_pVertices[1];
    m_pVertices[1] = NULL;
	
    RELEASE(m_pIndexBuffer);
	
    RELEASE(m_pVBRibbon[0]);
    RELEASE(m_pVBRibbon[1]);

    RELEASE(m_pTexture1);
    RELEASE(m_pTexture2);

    RELEASE(m_pPushBuffer);

	RELEASE( m_pBackBuffer );

	RELEASE( m_pDevice );

	RELEASE( m_pD3D );

	return hr;
}

HRESULT CBenMark::DestroyInput()
{
	HRESULT hr = S_OK;

	XInputClose( m_hGamePad1 );

	return hr;
}

HRESULT CBenMark::Update()
{
	HRESULT hr = S_OK;

	if ( m_dwCurrentTime-m_dwStartLoopTime > m_bmxState.dwTime ) // run for time specified in ini file
	{
		m_wLoop++;
		if ( m_wLoop >= m_wLoops )
		{
			m_bQuit = TRUE;
		}
		else
		{
			EXECUTE( DestroyGraphics() );
			EXECUTE( ReadIni() );
			EXECUTE( InitGraphics() );
		}
	}

	return hr;
}

//=========================================================================
// Draw Ben's ribbons
//=========================================================================
HRESULT CBenMark::Render()
{
	HRESULT hr = S_OK;

    FLOAT fRotation2 = 2.0f * D3DX_PI / 2047.0f * (FLOAT)(m_dwCurrentTime-m_dwStartTime)/1000 * 1023;

    // clear -- worth moving this calculation?
    DWORD dwFlags = (m_Presentation.AutoDepthStencilFormat != D3DFMT_UNKNOWN) ?
        D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER : D3DCLEAR_TARGET;

    EXECUTE(m_pDevice->Clear(0, NULL, dwFlags, 0x00000000, 1.0f, 0L));

    // begin scene
    EXECUTE(m_pDevice->BeginScene());

	// Set up the world translation.
    D3DXMATRIX matWorld;
    D3DXMatrixTranslation(&matWorld, 0.0f, -0.5f * 0.75f * cfRibbonPitch, 0.0f);

    // draw ribbons
    for (DWORD i = 0; i < cdwRibbonCount ; i++)
    {
        // setup matrix
        D3DXMATRIX matWorldT;

        D3DXMatrixRotationAxis(&matWorldT, &D3DXVECTOR3(1.0f, 0.0f, 0.0f),
            fRotation2 + i * 0.4f);
        matWorldT *= matWorld;

        // translate y by fDelta for the next line
        matWorld.m[3][1] += m_fDelta;

        // set our world transform
        EXECUTE(m_pDevice->SetTransform(D3DTS_WORLD, (D3DMATRIX*)&matWorldT));

        // draw outside
        if(m_bmxState.cApplyTextures)
        {
            EXECUTE(m_pDevice->SetTexture          (0, m_pTexture1));

            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1,D3DTA_TEXTURE));
            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP,  D3DTOP_MODULATE));
            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2,D3DTA_DIFFUSE));

            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1,D3DTA_TEXTURE));
            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,  D3DTOP_MODULATE));
            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2,D3DTA_DIFFUSE));

            if(m_bmxState.cApplyTextures > 1)
            {
                EXECUTE(m_pDevice->SetTexture          (1, m_pTexture2));

                EXECUTE(m_pDevice->SetTextureStageState(1, D3DTSS_COLORARG1,D3DTA_TEXTURE));
                EXECUTE(m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP,  D3DTOP_ADD));
                EXECUTE(m_pDevice->SetTextureStageState(1, D3DTSS_COLORARG2,D3DTA_CURRENT));

                EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1,D3DTA_TEXTURE));
                EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,  D3DTOP_ADD));
                EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2,D3DTA_CURRENT));
            }
            else
            {
                EXECUTE(m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP,  D3DTOP_DISABLE));
                EXECUTE(m_pDevice->SetTextureStageState(1, D3DTSS_ALPHAOP,  D3DTOP_DISABLE));
            }
        }

        EXECUTE(m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CW));
        EXECUTE(m_pDevice->SetMaterial(&m_matOut[i]));

        // draw outside ribbon
        (this->*m_pfnDrawRibbon)(0, m_dwPrimType, m_dwTriCount);

        // draw inside
        if(m_bmxState.cApplyTextures)
        {
            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1,D3DTA_DIFFUSE));
            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP,  D3DTOP_SELECTARG1));
            EXECUTE(m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP,  D3DTOP_DISABLE));

            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1,D3DTA_DIFFUSE));
            EXECUTE(m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,  D3DTOP_SELECTARG1));
            EXECUTE(m_pDevice->SetTextureStageState(1, D3DTSS_ALPHAOP,  D3DTOP_DISABLE));
        }

        EXECUTE(m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW));
        EXECUTE(m_pDevice->SetMaterial(&m_matIn));

        // draw inside ribbon
        (this->*m_pfnDrawRibbon)(1, m_dwPrimType, m_dwTriCount);

        // next
        m_dwTotalTimes += 1;//2;
    }


	//ShowInfo( 35, 12 );


	if ( m_iActiveMenu )
	{
		ShowMenu();
	}

    // end
    EXECUTE(m_pDevice->EndScene());
	EXECUTE( m_pDevice->Present( NULL, NULL, NULL, NULL));

	//UpdateStats( (FLOAT)(m_dwCurrentTime-m_dwStartTime) );

	return hr;
}


//=========================================================================
// This creates all device-dependant managed objects, such as managed
// textures and managed vertex buffers.
//=========================================================================

void CBenMark::InitDeviceObjects()
{
	HRESULT hr = S_OK;

    InitMaterials(&m_matIn, m_matOut);

    m_pTexture1 = CreateTexture(8, 256);
    m_pTexture2 = CreateTexture(8, 256);
};

//=========================================================================
// Restore device-memory objects and state after a device is created or 
// resized.
//
// This will manually get called any time an option changes so any
// option-specific initialization should go here.
//=========================================================================

void CBenMark::RestoreDeviceObjects()
{
	HRESULT hr = S_OK;
    // initalize our lights
    InitLights();

    // create our vertex buffers and indices
    InitVBs();

	// Set up our transformations.
    D3DXMATRIX mux;
    D3DXMatrixIdentity(&mux);
    D3DXMatrixTranslation(&mux, 0.0f, 0.0f, -10.0f);

    EXECUTE(m_pDevice->SetTransform(D3DTS_VIEW, (D3DMATRIX*)&mux));

    D3DXMatrixPerspectiveFovRH(&mux,
                              D3DX_PI * 30.0f / 360.0f,
                              (float)m_BackBufferDesc.Width / m_BackBufferDesc.Height,
                              1.0f,
                              19.0f);

    EXECUTE(m_pDevice->SetTransform(D3DTS_PROJECTION, (D3DMATRIX*)&mux));

    // init some render states
    EXECUTE(m_pDevice->SetRenderState(D3DRS_ZENABLE, m_bmxState.bZenable));
    EXECUTE(m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, m_bmxState.bSpecularenable));
    EXECUTE(m_pDevice->SetRenderState(D3DRS_LOCALVIEWER, m_bmxState.bLocalviewer));
	EXECUTE(m_pDevice->SetRenderState(D3DRS_FILLMODE, m_bmxState.iFillMode));
    EXECUTE(m_pDevice->SetRenderState(D3DRS_LIGHTING, TRUE));

	// init some random states.
    m_fDelta     = 0.75f * cfRibbonPitch / (cdwRibbonCount - 1);

    // Create the background thread.
    m_fTerminateThread = FALSE;
    m_hThread = CreateThread(NULL, 0, ThreadProc, this, 0, NULL);
    SetThreadPriority(m_hThread, THREAD_PRIORITY_BELOW_NORMAL);

    DWORD dwTime = GetTickCount();
    m_lDivides = 0;
    
    Sleep(2000);

    LONG Divides = InterlockedExchange(&m_lDivides, 0);
    dwTime = GetTickCount() - dwTime;

    m_iMaxDivides = Divides * 1000 / dwTime;
};


//=========================================================================
// Called once a second or after a test run to update the 
// test status string.
//=========================================================================

void CBenMark::UpdateStats(float fElapsedTime)
{
    LONG Divides = InterlockedExchange(&m_lDivides, 0);

    // next experiment?
    double rcp = 1e-6 / (double)fElapsedTime;
	//double rcp = 1.0;
    double tps = (double)m_dwTotalTimes * (double)m_dwTriCount * rcp;
    double sps = (double)m_dwTotalTimes * (double)m_dwIndexCount * rcp;
    double ips = (double)m_dwTotalTimes * (double)m_dwIndexCount * 2.0 * rcp;
    double vps = (double)m_dwTotalTimes * (double)m_dwIndexCount * (double)m_dwFVFSize * rcp;
    double dps = (double)Divides / (double)fElapsedTime;

    swprintf(m_szTestStats, L"%i KTri/s, %i KVerts/s, %i KB/s index traffic, "
        L"%iKB/s [effective] vertex traffic, %i background thread loops/second", 
             (INT) (tps * 1000.0f), (INT) (sps * 1000.0f), 
             (INT) (ips * 1000.0f), (INT) (vps * 1000.0f),
             (INT) (dps));

    static DWORD count = 0;

    if (count++ == 0)
    {
        count = 0;
    
        DbgPrint("\n%i KTri/s, %i KVerts/s, %i KB/s index traffic, "
              "%iKB/s [effective] vertex traffic, %i K/s background thread loops "
			  "%d seconds, %d times\n\n", 
             (INT) (tps * 1000.0f), (INT) (sps * 1000.0f), 
             (INT) (ips * 1000.0f), (INT) (vps * 1000.0f),
             (INT) (dps * 1000.0f), (DWORD)fElapsedTime, m_dwTotalTimes);
    }

	static bool isFirst = true;
	
	if (!isFirst)
	{
		m_dwAveCount++;
		m_fdAveTriPerSec += tps;
		m_fdMaxTriPerSec = max(tps, m_fdMaxTriPerSec);
		m_fdMinTriPerSec = min(tps, m_fdMinTriPerSec);
	}

	isFirst = false;

	m_dwTotalTimes = 0;
}

//=========================================================================
// initialize our materials
//=========================================================================

void CBenMark::InitMaterials(D3DMATERIAL8 *pmatIn, D3DMATERIAL8 *pmatOut)
{
    // set material
    ZeroMemory(pmatOut, sizeof(D3DMATERIAL8) * cdwRibbonCount);
    for (DWORD i = 0; i < cdwRibbonCount; i++)
    {
        float r = 0.3f + 0.5f * float(rand()) / float(RAND_MAX);
        float g = 0.3f + 0.5f * float(rand()) / float(RAND_MAX);
        float b = 0.3f + 0.5f * float(rand()) / float(RAND_MAX);

        pmatOut[i].Diffuse.r  = r;
        pmatOut[i].Diffuse.g  = g;
        pmatOut[i].Diffuse.b  = b;
        pmatOut[i].Diffuse.a  = 1.0f;
        pmatOut[i].Ambient.r  = r * 0.3f;
        pmatOut[i].Ambient.g  = g * 0.3f;
        pmatOut[i].Ambient.b  = b * 0.3f;
        pmatOut[i].Ambient.a  = 1.0f;
    }

    // set material
    ZeroMemory(pmatIn, sizeof(D3DMATERIAL8));
    pmatIn->Diffuse.r  = 0.7f;
    pmatIn->Diffuse.g  = 0.3f;
    pmatIn->Diffuse.b  = 0.3f;
    pmatIn->Diffuse.a  = 0.7f;
    pmatIn->Ambient.r  = 0.3f;
    pmatIn->Ambient.g  = 0.1f;
    pmatIn->Ambient.b  = 0.1f;
    pmatIn->Ambient.a  = 1.0f;
}

//=========================================================================
// initialize our lights
//=========================================================================

void CBenMark::InitLights()
{
	HRESULT hr = S_OK;
    // setup lights
    float fIntensity = 1.0f /
        (m_bmxState.nDirectionalLights +
         m_bmxState.nPointLights +
         m_bmxState.nSpotLights);

    // disable all our existing lights
    while(m_nNumLights--)
        EXECUTE(m_pDevice->LightEnable(m_nNumLights, FALSE));

    // get a count of the new dudes
    m_nNumLights =
        m_bmxState.nDirectionalLights +
        m_bmxState.nPointLights +
        m_bmxState.nSpotLights;

    DWORD dwIndex = 0;
    for (int nT = 0; nT < m_bmxState.nDirectionalLights; nT++)
    {
        D3DLIGHT8 lig;

        ZeroMemory(&lig, sizeof(lig));
        lig.Type        =  D3DLIGHT_DIRECTIONAL;
        lig.Diffuse.r   =  1.0f * fIntensity;
        lig.Diffuse.g   =  1.0f * fIntensity;
        lig.Diffuse.b   =  1.0f * fIntensity;
        lig.Direction.x =  0.2f;
        lig.Direction.y =  0.3f;
        lig.Direction.z = -0.8f;
        EXECUTE(m_pDevice->SetLight(dwIndex, &lig));
        EXECUTE(m_pDevice->LightEnable(dwIndex, TRUE));

        dwIndex++;
    }
    for (nT = 0; nT < m_bmxState.nPointLights; nT++)
    {
        D3DLIGHT8 lig;

        ZeroMemory(&lig, sizeof(lig));
        lig.Type         =  D3DLIGHT_POINT;
        lig.Diffuse.r    =  1.0f * fIntensity;
        lig.Diffuse.g    =  1.0f * fIntensity;
        lig.Diffuse.b    =  1.0f * fIntensity;
        lig.Position.x   =  0.0f;
        lig.Position.y   =  0.0f;
        lig.Position.z   =  5.0f;
        lig.Range        = 9999.0f;
        lig.Attenuation0 = 1.0f;
        EXECUTE(m_pDevice->SetLight(dwIndex, &lig));
        EXECUTE(m_pDevice->LightEnable(dwIndex, TRUE));

        dwIndex++;
    }
    for (nT = 0; nT < m_bmxState.nSpotLights; nT++)
    {
        D3DLIGHT8 lig;

        ZeroMemory(&lig, sizeof(lig));
        lig.Type         =  D3DLIGHT_SPOT;
        lig.Diffuse.r    =  1.0f * fIntensity;
        lig.Diffuse.g    =  1.0f * fIntensity;
        lig.Diffuse.b    =  1.0f * fIntensity;
        lig.Position.x   = -1.0f;
        lig.Position.y   = -5.0f;
        lig.Position.z   =  6.0f;
        lig.Direction.x  =  0.1f;
        lig.Direction.y  =  0.5f;
        lig.Direction.z  = -0.6f;
        lig.Range        = 999.0f;
        lig.Theta        = 0.1f;
        lig.Phi          = 0.5f;
        lig.Falloff      = 1.0f;
        lig.Attenuation0 = 1.0f;
        EXECUTE(m_pDevice->SetLight(dwIndex, &lig));
        EXECUTE(m_pDevice->LightEnable(dwIndex, TRUE));

        dwIndex++;
    }
}


//=========================================================================
// create a texture
//=========================================================================

IDirect3DTexture8 *CBenMark::CreateTexture(DWORD dwWidth, DWORD dwHeight)
{
	HRESULT hr = S_OK;
    IDirect3DTexture8 *pTexture = NULL;

    EXECUTE(D3DXCreateTexture(m_pDevice, dwWidth, dwHeight, 1, 0, D3DFMT_A4R4G4B4, D3DPOOL_MANAGED, &pTexture));
    if(pTexture)
    {
        D3DLOCKED_RECT lockRect;

        HRESULT hr = pTexture->LockRect(0, &lockRect, NULL, 0);

        D3DSURFACE_DESC desc;
        pTexture->GetLevelDesc(0, &desc);

        void *pBits = (void *)LocalAlloc(0, dwWidth * dwHeight * 16);
        DWORD dwLine = (DWORD)pBits;

        LONG lPitch = lockRect.Pitch;

        for (DWORD y = 0; y < dwHeight; y++)
        {
            DWORD dwAddr = dwLine;
            BOOL  by     = y & 1;
            for (DWORD x = 0; x < dwWidth; x++)
            {
                DWORD c = x + (y >> 5);

                c = (c | (c << 4) | (c << 8) | 0xf000);

                if(by)
                    c ^= 0x0777;

                *(WORD*)dwAddr = (WORD)c;
                dwAddr += 2;
            }
            dwLine += lPitch;
        }
		
        XGSwizzleRect(pBits, 0, NULL, lockRect.pBits, dwWidth, dwHeight, NULL, 2);
		
		LocalFree(pBits);
		
        // Unlock the map so it can be used
        pTexture->UnlockRect(0);
	}

   return pTexture;
}

//=========================================================================
// Renders geometric primitive using Vertex Buffer.
//=========================================================================

void CBenMark::DrawIndexedPrimitive( UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount )
{
	HRESULT hr = S_OK;

    EXECUTE(m_pDevice->SetVertexShader(m_dwFVF));
    EXECUTE(m_pDevice->SetStreamSource(0, m_pVBRibbon[iIndex], m_dwFVFSize));
    EXECUTE(m_pDevice->SetIndices(m_pIndexBuffer, 0));

    EXECUTE(m_pDevice->DrawIndexedPrimitive(
        dwPrimType,         // PrimitiveType
        0,                  // minIndex
        m_dwNumVertices,    // NumIndices
        0,                  // startIndex
        PrimitiveCount));   // PrimitiveCount
}

//=========================================================================
// Renders geometric primitive with data specified by a user memory pointer.
//=========================================================================

void CBenMark::DrawIndexedPrimitiveUP( UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount )
{
	HRESULT hr = S_OK;

    EXECUTE(m_pDevice->DrawIndexedPrimitiveUP(
        dwPrimType,             // Type
        0,                      // MinVertexIndex
        m_dwNumVertices,        // NumVertexIndices
        PrimitiveCount,         // primCount
        m_pwIndices,            // pIndexData
        D3DFMT_INDEX16,         // IndexDataFormat
        m_pVertices[iIndex],    // pVertexStreamZeroData
        m_dwFVFSize));          // VertexStreamZeroStride
}

//=========================================================================
// Renders geometric primitive using Vertex Buffer.
//=========================================================================

void CBenMark::PrecompiledDraw( UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount )
{
	HRESULT hr = S_OK;

    EXECUTE(m_pDevice->SetVertexShader(m_dwFVF));
    EXECUTE(m_pDevice->SetStreamSource(0, m_pVBRibbon[iIndex], m_dwFVFSize));

    m_pDevice->RunPushBuffer(m_pPushBuffer, 0);
}

//=========================================================================
// initialize our VBs
//=========================================================================

void CBenMark::InitVBs()
{
	HRESULT hr = S_OK;
    // clean these guys up if they've already been inited
    delete[] m_pwIndices;
    m_pwIndices = NULL;

    RELEASE(m_pIndexBuffer);
    RELEASE(m_pVBRibbon[0]);
    RELEASE(m_pVBRibbon[1]);

    if (m_bmxState.fPrecompile)
    {
        m_pfnDrawRibbon = CBenMark::PrecompiledDraw;
    }
    else if (m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        m_pfnDrawRibbon = CBenMark::DrawIndexedPrimitive;
    }
    else
    {
        m_pfnDrawRibbon = CBenMark::DrawIndexedPrimitiveUP;
    }

    // create vertex buffer
    m_dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL;

    if(m_bmxState.cApplyTextures > 1)
        m_dwFVF |= D3DFVF_TEX2;
    else if(m_bmxState.cApplyTextures)
        m_dwFVF |= D3DFVF_TEX1;

    m_dwFVFSize = D3DXGetFVFVertexSize(m_dwFVF);

    m_dwNumVertices = (cdwSubsInLength + 1) * (cdwSubsInWidth + 1);
    UINT Length = m_dwNumVertices * m_dwFVFSize;

    // Default when running is to NOT use D3DVBCAPS_SYSTEMMEMORY
    // Using this flag will slow the app to about half the triangle rate.

    DWORD dwCaps = D3DUSAGE_WRITEONLY;
    D3DPOOL dwPool = D3DPOOL_DEFAULT;

    float *pfVerticesO;
    float *pfVerticesI;

    // Create our vertex buffers if we're using DrawIndexedPrimitive.
    if(m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        EXECUTE(m_pDevice->CreateVertexBuffer(Length, dwCaps, m_dwFVF, dwPool, &m_pVBRibbon[0]));
        EXECUTE(m_pDevice->CreateVertexBuffer(Length, dwCaps, m_dwFVF, dwPool, &m_pVBRibbon[1]));

        EXECUTE(m_pVBRibbon[0]->Lock(0, Length, (BYTE **)&pfVerticesO, 0));
        EXECUTE(m_pVBRibbon[1]->Lock(0, Length, (BYTE **)&pfVerticesI, 0));
    }
    else
    {
        // skip the vertex buffers and just use alloc'd mem
        m_pVertices[0] = new BYTE[Length];
        pfVerticesO = (float *)m_pVertices[0];

        m_pVertices[1] = new BYTE[Length];
        pfVerticesI = (float *)m_pVertices[1];
    }

    // populate with vertices
    for (DWORD y = 0; y <= cdwSubsInLength; y++)
    {
        for (DWORD x = 0; x <= cdwSubsInWidth; x++)
        {
            // compute point
            float angle  = cfRibbonCurl * float(y) / float(cdwSubsInLength);
            float height = cfRibbonWidth * float(x) / float(cdwSubsInWidth)
                         + cfRibbonPitch * float(y) / float(cdwSubsInLength)
                         - 0.5f * cfRibbonPitch;
            float fcosangle = cosf(angle);
            float fsinangle = sinf(angle);

            // start
            D3DXVECTOR3 n(0, fcosangle, fsinangle);
            D3DXVECTOR3 p(height, cfRibbonRadius * fcosangle,
                cfRibbonRadius * fsinangle);

            // copy to vertex buffer
            *(D3DXVECTOR3 *)&pfVerticesO[0] = p;
            *(D3DXVECTOR3 *)&pfVerticesO[3] = n;
            pfVerticesO += 6;

            *(D3DXVECTOR3 *)&pfVerticesI[0] = p;
            *(D3DXVECTOR3 *)&pfVerticesI[3] = -n;
            pfVerticesI += 6;

            if(m_bmxState.cApplyTextures)
            {
                float tv = float(y) / float(cdwSubsInLength);
                float tu = float(x) / float(cdwSubsInWidth);

                *pfVerticesO++ = tu;
                *pfVerticesO++ = tv;

                *pfVerticesI++ = tu;
                *pfVerticesI++ = tv;

                if(m_bmxState.cApplyTextures > 1)
                {
                    // add second set of texture coords
                    *pfVerticesO++ = tu;
                    *pfVerticesO++ = tv;

                    *pfVerticesI++ = tu;
                    *pfVerticesI++ = tv;
                }
            }
        }
    }

    if(m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        EXECUTE(m_pVBRibbon[0]->Unlock());
        EXECUTE(m_pVBRibbon[1]->Unlock());
    }

    // setup indices
    m_dwIndexCount = 1 + cdwSubsInLength * (cdwSubsInWidth * 2 + 1);
    m_dwPrimType = m_bmxState.bUseTriList ? D3DPT_TRIANGLELIST : D3DPT_TRIANGLESTRIP;
    m_dwTriCount = (m_dwIndexCount - 2)  / (m_bmxState.bUseTriList ? 3 : 1);

    m_pwIndices = new WORD[m_dwIndexCount];
    WORD  *pwIndex  = m_pwIndices;
    DWORD dwCurrent = 0;

    pwIndex[0] = 0; pwIndex++;

    for (y = 0; y < cdwSubsInLength; y++)
    {
        if (dwCurrent > 0xffff)
        {
            DbgPrint("Index out of range - reduce geometry complexity", 0);
        }

        pwIndex[0] = WORD(dwCurrent + (cdwSubsInWidth + 1));
        pwIndex++;
        dwCurrent++;

        for (DWORD x = 0; x < cdwSubsInWidth; x++)
        {
            pwIndex[0]  = WORD(dwCurrent);
            pwIndex[1]  = WORD(dwCurrent + (cdwSubsInWidth + 1));
            pwIndex    += 2;
            dwCurrent  ++;
        }

        dwCurrent += (cdwSubsInWidth + 1) - 1;
        y++;

        if (y < cdwSubsInLength)
        {
            pwIndex[0] = WORD(dwCurrent + (cdwSubsInWidth + 1));
            pwIndex++;
            dwCurrent--;

            for (DWORD x = 0; x < cdwSubsInWidth; x++)
            {
                pwIndex[0]  = WORD(dwCurrent);
                pwIndex[1]  = WORD(dwCurrent + (cdwSubsInWidth + 1));
                pwIndex+= 2;
                dwCurrent --;
            }

            dwCurrent += (cdwSubsInWidth + 1) + 1;
        }
    }

    // if we use tri lists, we convert the strip to independent triangles here
    if(m_bmxState.bUseTriList)
    {
        DWORD dwNewIndexCount = (m_dwIndexCount - 2) * 3;
        WORD *pwNewIndices    = new WORD[dwNewIndexCount];

        DWORD a = m_pwIndices[0];
        DWORD b = m_pwIndices[1];
        for (DWORD i = 2,j = 0; i < m_dwIndexCount; i++,j+=3)
        {
            DWORD c = m_pwIndices[i];
            pwNewIndices[j + 0] = (WORD)a;
            pwNewIndices[j + 1] = (WORD)b;
            pwNewIndices[j + 2] = (WORD)c;
            if (i & 1)
                b = c;
            else
                a = c;
        }

        // adopt new
        delete[] m_pwIndices;
        m_dwIndexCount = dwNewIndexCount;
        m_pwIndices    = pwNewIndices;
    }

    // Create our precompiled push buffers
    if (m_bmxState.fPrecompile)
    {
        EXECUTE(m_pDevice->CreatePushBuffer(256*1024, FALSE, &m_pPushBuffer));
        EXECUTE(m_pDevice->BeginPushBuffer(m_pPushBuffer));
        EXECUTE(m_pDevice->DrawIndexedVertices(m_dwPrimType, D3DVERTEXCOUNT(m_dwPrimType, m_dwTriCount), m_pwIndices));
        EXECUTE(m_pDevice->EndPushBuffer());
    }
	// Create our index buffer if we're using DrawIndexedPrimitive.
    else if (m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        EXECUTE(m_pDevice->CreateIndexBuffer(m_dwIndexCount * sizeof(WORD),
            dwCaps, D3DFMT_INDEX16, dwPool, &m_pIndexBuffer));

        WORD *pVertexIndices;
        EXECUTE(m_pIndexBuffer->Lock(0, m_dwIndexCount * sizeof(WORD),
            (BYTE**)&pVertexIndices, 0));

        for(DWORD i = 0; i < m_dwIndexCount; i++)
            pVertexIndices[i] = m_pwIndices[i];

        m_pIndexBuffer->Unlock();

        delete[] m_pwIndices;
        m_pwIndices = NULL;
    }
    
    if(m_bmxState.iDrawFunc == DF_DRAWINDEXEDPRIMITIVE)
    {
        m_pVBRibbon[0]->MoveResourceMemory(D3DMEM_VIDEO);
        m_pVBRibbon[1]->MoveResourceMemory(D3DMEM_VIDEO);
    }
}

//=========================================================================
// Display the various options we we're started with.
//=========================================================================

void CBenMark::ShowInfo(int iY, int cHeight)
{
    WCHAR str[128];
    D3DCOLOR colFore = D3DCOLOR_XRGB(255, 255, 128);
	D3DCOLOR colBack = D3DCOLOR_XRGB(0, 0, 0);
	DWORD dwFlags = 0;//DRAWTEXT_TRANSPARENTBKGND;

	iY += cHeight;
	INT iX = 35;

    _snwprintf(str, sizeof(str), L"Xbox BenMark");

	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO: DisplayText(str, iY, colFore);" )
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Adapter: %S",
        m_Adapter.AdapterIdentifier.Description);
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
// #pragma MESSAGE( "TODO:    DisplayText(str, iY, colFore); ")
    iY += cHeight;

    DWORD HighPart = m_Adapter.AdapterIdentifier.DriverVersion.HighPart;
    DWORD LowPart = m_Adapter.AdapterIdentifier.DriverVersion.LowPart;
    _snwprintf(str, sizeof(str), L"Driver: %S (%d.%d.%04d.%04d)",
        m_Adapter.AdapterIdentifier.Driver,
        HIWORD(HighPart), LOWORD(HighPart),
        HIWORD(LowPart), LOWORD(LowPart));
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO:     DisplayText(str, iY, colFore); ")
    iY += cHeight * 2;

    _snwprintf(str, sizeof(str), L"Primitive Type: '%s'  Textures: %d",
        m_bmxState.bUseTriList ? L"trilist" : L"tristrip",
        m_bmxState.cApplyTextures);
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO:     DisplayText(str, iY, colFore); ")
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Dirlights: %d  Spotlights: %d  Pointlights: %d",
        m_bmxState.nDirectionalLights,
        m_bmxState.nSpotLights,
        m_bmxState.nPointLights);
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO:     DisplayText(str, iY, colFore); ")
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Z-Buffer: %s  Specular Lighting: %s  Local Viewer: %s",
        m_bmxState.bZenable ? L"true" : L"false",
        m_bmxState.bSpecularenable ? L"true" : L"false",
        m_bmxState.bLocalviewer ? L"true" : L"false");
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO:     DisplayText(str, iY, colFore); ")
    iY += cHeight;

    static const WCHAR *rgszFillMode[] =
        { L"D3DFILL_POINT", L"D3DFILL_WIREFRAME", L"D3DFILL_SOLID" };
    static const WCHAR *rgszDrawFunc[] =
        { L"DrawIndexedPrimitive", L"DrawIndexedPrimitiveUP" };

    DWORD iFillMode = 0;
    switch (m_bmxState.iFillMode)
    {
    case D3DFILL_POINT: iFillMode = 0; break;
    case D3DFILL_WIREFRAME: iFillMode = 1; break;
    case D3DFILL_SOLID: iFillMode = 2; break;
    }

    _snwprintf(str, sizeof(str), L"Rendering: %s  Precompiled: %s  Fillmode: %s",
        rgszDrawFunc[m_bmxState.iDrawFunc], 
        m_bmxState.fPrecompile ? L"true" : L"false",
        rgszFillMode[iFillMode]);
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO:     DisplayText(str, iY, colFore); ")
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Triangles: %d  Indices: %d  FVFSize: %d",
        m_dwTriCount,
        m_dwIndexCount,
        m_dwFVFSize);
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO:     DisplayText(str, iY, colFore); ")
    iY += cHeight;

    _snwprintf(str, sizeof(str), L"Maximum possible background loops per second: %i", (int)m_iMaxDivides);
	m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO: 	DisplayText(str, iY, colFore); ")
	iY += cHeight * 2;

	if (m_fdMaxTriPerSec != 0)
	{
		_snwprintf(str, sizeof(str), L"AveTriPerSec(%d): %i  MaxTriPerSec: %i  MinTriPerSec: %i",
			m_dwAveCount,
			(INT) ((m_fdAveTriPerSec / m_dwAveCount) * 1000.0f),
			(INT) (m_fdMaxTriPerSec * 1000.0f),
			(INT) (m_fdMinTriPerSec * 1000.0f));
		m_Font.DrawText( m_pBackBuffer, str, iX, iY, dwFlags, colFore, colBack);
//#pragma MESSAGE( "TODO: 		DisplayText(str, iY, colFore); ")
		iY += cHeight;
	}

}

VOID CBenMark::ShowMenu()
{

	ScenarioMenu* pMenu;
	D3DCOLOR colFore = D3DCOLOR_XRGB( 255, 255, 128 );
	D3DCOLOR colBack = D3DCOLOR_XRGB( 0, 0, 0 );
	DWORD dwFlags = 0;
	INT iX, iY;

	switch ( m_iActiveMenu )
	{
	case XINPUT_GAMEPAD_LEFT_TRIGGER:
		pMenu = &s_LeftTriggerMenu;
		break;
	case XINPUT_GAMEPAD_RIGHT_TRIGGER:
		pMenu = &s_RightTriggerMenu;
		break;
	case XINPUT_GAMEPAD_LEFT_THUMB:
		pMenu = &s_LeftThumbMenu;
		break;
	default:
		return;
	}

	iX = 240;
	iY = 200;
	m_Font.DrawText( m_pBackBuffer, pMenu->m_szMenuName, iX, iY, dwFlags, colFore, colBack);
	for ( UINT i=0; i<pMenu->m_cActions; i++ )
	{
		iY += 12;
		m_Font.DrawText( m_pBackBuffer, pMenu->m_szActions[i], iX, iY, dwFlags, colFore, colBack);
	}
}

//=========================================================================
// Handle input.
//=========================================================================
HRESULT CBenMark::ProcessInput()
{
	HRESULT hr = S_OK;

	DWORD dwDeviceMap;
	DWORD dwSuccess;
	BOOL bDeviceChanges;
	DWORD dwInsertions;
	DWORD dwRemovals;

	bDeviceChanges = XGetDeviceChanges( XDEVICE_TYPE_GAMEPAD, &dwInsertions, &dwRemovals );
	if ( bDeviceChanges )
	{
		if ( dwInsertions & XDEVICE_PORT0_MASK )
		{
			m_hGamePad1 = XInputOpen( XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL );
			if ( m_hGamePad1 == NULL )
			{
				DbgPrint( "Error Opening Input\n" );
				return E_FAIL;
			}
		}
		
		if ( dwRemovals & XDEVICE_PORT0_MASK )
		{
			DbgPrint( "Gamepad removed from Port 0\n" );
			return E_FAIL;
		}
	}

	dwDeviceMap = XGetDevices( XDEVICE_TYPE_GAMEPAD );
	if ( !(dwDeviceMap & XDEVICE_PORT0_MASK) ) 
	{
		//DbgPrint( "No Device in Port 0\n" );
		//return E_FAIL;
		return S_OK; // live with it!
	}

	dwSuccess = XInputGetState( m_hGamePad1, &m_InputState );
	if ( dwSuccess != ERROR_SUCCESS )
	{
		DbgPrint( "Error Getting Input State\n" );
		return E_FAIL;
	}

	//------------------------------------------------------------------------------
	//	Fgure out which menu to display
	//------------------------------------------------------------------------------
#if 0
	if ( m_iActiveMenu )
	{
		if ( m_iActiveMenu == XINPUT_GAMEPAD_LEFT_TRIGGER || m_iActiveMenu == XINPUT_GAMEPAD_RIGHT_TRIGGER )
		{
			if ( !m_InputState.Gamepad.bAnalogButtons[m_iActiveMenu])
			{
				m_iActiveMenu = 0;
			}
		}
		else
		{
			if ( !(m_InputState.Gamepad.wButtons & m_iActiveMenu) )
			{
				m_iActiveMenu = 0;
			}
		}
	}
	
	if ( !m_iActiveMenu )
	{
		if (m_InputState.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER])
		{
			m_iActiveMenu = XINPUT_GAMEPAD_LEFT_TRIGGER; 
		} 
		else if (m_InputState.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER])
		{
			m_iActiveMenu = XINPUT_GAMEPAD_RIGHT_TRIGGER;
		} 
		else if (m_InputState.Gamepad.wButtons & XINPUT_GAMEPAD_LEFT_THUMB)
		{
			m_iActiveMenu = XINPUT_GAMEPAD_LEFT_THUMB;
		} 
		else if (m_InputState.Gamepad.wButtons & XINPUT_GAMEPAD_RIGHT_THUMB)
		{
			m_iActiveMenu = XINPUT_GAMEPAD_RIGHT_THUMB;
		} 
		else if (m_InputState.Gamepad.wButtons & XINPUT_GAMEPAD_START)
		{
			m_iActiveMenu = XINPUT_GAMEPAD_START;
		} 
		else if (m_InputState.Gamepad.wButtons & XINPUT_GAMEPAD_BACK)
		{
			m_iActiveMenu = XINPUT_GAMEPAD_BACK;
		}
	}

	if ( !m_iActiveMenu )
	{
		return hr;
	}
	
	//------------------------------------------------------------------------------
	//	Figure out which action key is active
	//------------------------------------------------------------------------------
	
	m_iActiveKey = -1;
	for (unsigned i = 0; i < 6; i++)
	{
		if ( m_InputState.Gamepad.bAnalogButtons[i] > 50 )
		{
			m_iActiveKey = i;
			break;
		}
	}

	switch ( m_iActiveMenu )
	{

	case XINPUT_GAMEPAD_START:
		switch(m_iActiveKey)
		{
			// Display stats.
		case XINPUT_GAMEPAD_A:
			m_bShowStats = !m_bShowStats;
			break;
			
			// Run a full test.
		case XINPUT_GAMEPAD_B:
			m_bRunFullTest = TRUE;
			break;
			
			// Pause the test.
		case XINPUT_GAMEPAD_X:
			// Toggle frame movement
			m_bFrameMoving = !m_bFrameMoving;
			if (m_bFrameMoving)
			{
				TimeStart();
			}
			else
			{
				TimeStop();
			}
			break;
			
			// Single-step.
		case XINPUT_GAMEPAD_Y:
			// Single-step frame movement
			if (FALSE == m_bFrameMoving)
			{
				TimeAdvance();
			}
			
			TimeStop();
			m_bFrameMoving = FALSE;
			m_bSingleStep  = TRUE;
			break;
			
			// Quit?
		case XINPUT_GAMEPAD_BLACK:
			m_bQuit = TRUE;
			break;

		default:
			break;
		}
		break;


	case XINPUT_GAMEPAD_BACK:
		switch(m_iActiveKey)
		{
			// Cycle the screen mode.
		case XINPUT_GAMEPAD_A:
			m_dwCurrentMode = (m_dwCurrentMode + 1) % m_Adapter.dwNumModes;
			
			Change3DEnvironment(); 
			break;
			
			// Cycle to the next antialias mode.
		case XINPUT_GAMEPAD_B:
			UINT i, iNewSampleType;
			
			// If no bits are set,then iNewSampleType will wind
			// up with the same value as m_iSampleType;
			//
			for (i = 1; i <= 32; i++)
			{
				iNewSampleType = (m_iSampleType + i) % 32;
				
				if (m_dwSampleMask & (1 << iNewSampleType ))
				{
					break;
				}
			}
			
			if (m_iSampleType != (D3DMULTISAMPLE_TYPE)iNewSampleType)
			{
				m_iSampleType = (D3DMULTISAMPLE_TYPE)iNewSampleType;						
				
				Change3DEnvironment();
			}
			break;

		default:
			break;
		}
		break;

	default:
		ProcessKeyPress(m_iActiveMenu, m_iActiveKey);
		break;
	}
#endif 0
	return hr;
}


VOID CBenMark::ProcessKeyPress(DWORD iMenu, DWORD iKey)
{
	switch(iMenu)
	{
	case XINPUT_GAMEPAD_LEFT_TRIGGER:
		switch(iKey)
		{
		case 0:
			m_bmxState.bSpecularenable = !m_bmxState.bSpecularenable;
			break;
		case 1:
			m_bmxState.bZenable = !m_bmxState.bZenable;
			break;
		case 2:
			m_bmxState.bLocalviewer = !m_bmxState.bLocalviewer;
			break;

		default:
			return;
		}
		break;

	case XINPUT_GAMEPAD_RIGHT_TRIGGER:
		switch(iKey)
		{
		case 0:
			m_bmxState.nDirectionalLights++;
			break;

		case 1:
			m_bmxState.nSpotLights++;
			break;

		case 2:
			m_bmxState.nPointLights++;
			break;

		case 3:
			if (m_bmxState.nDirectionalLights)
			{
				m_bmxState.nDirectionalLights--;
			}
			else
			{
				return;
			}
			break;

		case 4:
			if (m_bmxState.nSpotLights)
			{
				m_bmxState.nSpotLights--;
			}
			else
			{
				return;
			}
			break;

		case 5:
			if (m_bmxState.nPointLights)
			{
				m_bmxState.nPointLights--;
			}
			else
			{
				return;
			}
			break;
		}

		InitLights();

		return;

	case XINPUT_GAMEPAD_LEFT_THUMB:
		switch(iKey)
		{
		case 0:
			m_bmxState.cApplyTextures = (m_bmxState.cApplyTextures + 1) % 3;
			break;
		case 1:
			m_bmxState.bUseTriList = !m_bmxState.bUseTriList;
			break;

		case 2:
			m_bmxState.iFillMode = D3DFILLMODE((m_bmxState.iFillMode + 1) % D3DFILL_SOLID + 1);
			break;

		case 3:
			m_bmxState.iDrawFunc = (DRAWFUNC)((m_bmxState.iDrawFunc + 1) % DRAWMAX);
			break;

        case 4:
            m_bmxState.fPrecompile = !m_bmxState.fPrecompile;
            break;

		default:
			return;
		}
		break;

	default:
		return;
	}

	Change3DEnvironment(); 
}

//-----------------------------------------------------------------------------
// Create the rendering device and set up the back buffers.
//-----------------------------------------------------------------------------

void CBenMark::Initialize3DEnvironment()
{
	HRESULT hr = S_OK;
	DWORD dwCurrentMode;

	m_pD3D = Direct3DCreate8(D3D_SDK_VERSION);
    if( m_pD3D == NULL )
    {
		DbgPrint( "FATAL: Unable to create Direct3D.");
    }


	// We only support one adapter.
	const unsigned iAdapter = 0;

	if (m_pD3D->GetAdapterCount() != 1)
	{
		DbgPrint( "FATAL: Multiple adapters found, only one adapter is supported." );
	}

    // Get the adapter attributes
    EXECUTE(m_pD3D->GetAdapterIdentifier(iAdapter, 0L, &m_Adapter.AdapterIdentifier));

    // Enumerate display modes
    D3DDISPLAYMODE modes[100];
    D3DFORMAT      formats[20];
    DWORD dwNumFormats      = 0;
    DWORD dwNumModes        = 0;
    DWORD dwNumAdapterModes = m_pD3D->GetAdapterModeCount(iAdapter);

    // Add the current desktop format to list of formats
    D3DDISPLAYMODE DesktopMode;
    EXECUTE(m_pD3D->GetAdapterDisplayMode(iAdapter, &DesktopMode));
    if (DesktopMode.Format != 0)
    {
        formats[dwNumFormats++] = DesktopMode.Format;
    }

    for (UINT iMode = 0; iMode < dwNumAdapterModes; iMode++)
    {
        // Get the display mode attributes
        D3DDISPLAYMODE DisplayMode;

        EXECUTE(m_pD3D->EnumAdapterModes(iAdapter, iMode, &DisplayMode));

        // Filter out unknown modes
        if (DisplayMode.Format == D3DFMT_UNKNOWN)
		{
            continue;
		}

        // Filter out low-resolution modes
        if (DisplayMode.Width  < 640 || DisplayMode.Height < 400) 
		{
            continue;
		}

        // Check if the mode already exists (to filter out refresh rates)
        for (DWORD m = 0; m < dwNumModes; m++)
        {
            if ((modes[m].Width  == DisplayMode.Width ) &&
                (modes[m].Height == DisplayMode.Height) &&
                (modes[m].Format == DisplayMode.Format)) 
			{
                break;
			}
        }

        // If we found a new mode, add it to the list
        if (m == dwNumModes)
        {
            modes[dwNumModes].Width       = DisplayMode.Width;
            modes[dwNumModes].Height      = DisplayMode.Height;
            modes[dwNumModes].Format      = DisplayMode.Format;
            modes[dwNumModes].RefreshRate = 0;
            dwNumModes++;

            // Check if the mode's format already exists
            for (DWORD f = 0; f < dwNumFormats; f++)
            {
                if (DisplayMode.Format == formats[f])
				{
                    break;
				}
            }

            // If the format is new, add it to the list
            if (f == dwNumFormats)
			{
                formats[dwNumFormats++] = DisplayMode.Format;
			}
        }
    }

    // Sort the list of display modes (by format, then width, then height)

    // Get the device attributes
    EXECUTE(m_pD3D->GetDeviceCaps(iAdapter, D3DDEVTYPE_HAL, &m_Adapter.Caps));

    // Call the app's ConfirmDevice() callback to see if the device
    // caps and the enumerated formats meet the app's requirements.
	//
    BOOL  bFormatConfirmed[20];
    DWORD dwBehavior[20];

    for (DWORD f = 0; f < dwNumFormats; f++)
    {
		HRESULT hr;

        bFormatConfirmed[f] = FALSE;

        hr = m_pD3D->CheckDeviceFormat(iAdapter, 
			                           D3DDEVTYPE_HAL, 
                                       formats[f], 
									   D3DUSAGE_RENDERTARGET, 
                                       D3DRTYPE_SURFACE, 
									   formats[f]);

		if (FAILED(hr))
		{
            continue;
		}

#ifdef XBOX
		dwBehavior[f] = D3DCREATE_HARDWARE_VERTEXPROCESSING;
		bFormatConfirmed[f] = TRUE;
#else // !XBOX

        // Confirm the device for HW vertex processing
        if (m_Adapter.Caps.DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
        {
            dwBehavior[f] = D3DCREATE_HARDWARE_VERTEXPROCESSING;

            if (ConfirmDevice(&m_Adapter.Caps, dwBehavior[f], formats[f]))
			{
                bFormatConfirmed[f] = TRUE;
			}
        }

        // Confirm the device for SW vertex processing
        if (FALSE == bFormatConfirmed[f])
        {
            dwBehavior[f] = D3DCREATE_SOFTWARE_VERTEXPROCESSING;

            if (ConfirmDevice(&m_Adapter.Caps, dwBehavior[f], formats[f]))
			{
                bFormatConfirmed[f] = TRUE;
			}
        }
#endif // XBOX
    }


    // Add all enumerated display modes with confirmed formats to the
    // device's list of valid modes
	//
    for (DWORD m = 0; m < dwNumModes; m++)
    {
        for (DWORD f = 0; f < dwNumFormats; f++)
        {
            if (modes[m].Format == formats[f])
            {
                if (bFormatConfirmed[f] == TRUE)
                {
                    // Add this mode to the device's list of valid modes
                    m_Adapter.modes[m_Adapter.dwNumModes].Width      = modes[m].Width;
                    m_Adapter.modes[m_Adapter.dwNumModes].Height     = modes[m].Height;
                    m_Adapter.modes[m_Adapter.dwNumModes].Format     = modes[m].Format;
                    m_Adapter.modes[m_Adapter.dwNumModes].dwBehavior = dwBehavior[f];
                    m_Adapter.dwNumModes++;
                }
            }
        }
    }

    // Select 640x480, 16-bit mode for default
    for (m = 0; m < m_Adapter.dwNumModes; m++)
    {
        if (m_Adapter.modes[m].Width==640 && 
			m_Adapter.modes[m].Height==480 
#ifdef XBOX
			 && m_Adapter.modes[m].Format == D3DFMT_LIN_R5G6B5
#endif
            )
        {
            dwCurrentMode = m;
            break;
        }
    }

	// Generate an error if we didn't find the default mode.
	if (m == m_Adapter.dwNumModes)
	{
		DbgPrint( "FATAL: Unable to obtain 640x480x16 mode." );
	}



    Adapter::Mode *pModeInfo = &m_Adapter.modes[dwCurrentMode];

    // Set up the presentation parameters
    ZeroMemory(&m_Presentation, sizeof(m_Presentation));

    switch(pModeInfo->Format)
    {
#ifdef XBOX
    case D3DFMT_LIN_A8R8G8B8:
    case D3DFMT_LIN_X8R8G8B8:
#endif
    case D3DFMT_A8R8G8B8:
    case D3DFMT_X8R8G8B8:
        m_DepthBufferFormat = D3DFMT_D24S8;
        break;

#ifdef XBOX
    case D3DFMT_LIN_R5G6B5:
    case D3DFMT_LIN_X1R5G5B5:
#endif
    case D3DFMT_R5G6B5:
    case D3DFMT_X1R5G5B5:
        m_DepthBufferFormat = D3DFMT_D16;
        break;
    }

    m_Presentation.Windowed               = FALSE;
    m_Presentation.BackBufferCount        = 2;
    m_Presentation.MultiSampleType        = m_iSampleType;
    m_Presentation.SwapEffect             = D3DSWAPEFFECT_DISCARD;
    m_Presentation.EnableAutoDepthStencil = m_bUseDepthBuffer;
    m_Presentation.AutoDepthStencilFormat = m_DepthBufferFormat;
    m_Presentation.hDeviceWindow          = NULL;
    m_Presentation.BackBufferWidth        = pModeInfo->Width;
    m_Presentation.BackBufferHeight       = pModeInfo->Height;
    m_Presentation.BackBufferFormat       = pModeInfo->Format;
    m_Presentation.Flags                  = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
    m_Presentation.FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;

    // Create the device
    EXECUTE(m_pD3D->CreateDevice(0, 
		                     D3DDEVTYPE_HAL, 
                             NULL, 
						     pModeInfo->dwBehavior, 
							 &m_Presentation, 
                             &m_pDevice));

    // Store device Caps
//    EXECUTE(m_pDevice->GetDeviceCaps(&m_Caps));

	// Figure out the FSAA modes that are supported by the device.
	m_dwSampleMask = 0;
	m_iSampleType = (D3DMULTISAMPLE_TYPE)0;

	for (unsigned i = 2; i < 32; i++)
	{
		HRESULT hr = m_pD3D->CheckDeviceMultiSampleType(0, 
			                                            D3DDEVTYPE_HAL, 
												        pModeInfo->Format, 
														FALSE, 
														(D3DMULTISAMPLE_TYPE)i);

		if (SUCCEEDED(hr))
		{
            m_dwSampleMask |= 1 << i;
		}
	}

    // Store render target surface descriptor
    EXECUTE(m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &m_pBackBuffer));
    m_pBackBuffer->GetDesc(&m_BackBufferDesc);

    // Initialize the app's device-dependant objects
	InitDeviceObjects();
    RestoreDeviceObjects();

//	m_bActive = TRUE;
}

//-----------------------------------------------------------------------------
// Handles driver, device, and/or mode changes for the app.
//-----------------------------------------------------------------------------

VOID CBenMark::Change3DEnvironment()
{
    // Release all scene objects that will be re-created for the new device
//	InvalidateDeviceObjects();
//    DeleteDeviceObjects();

    if (m_pBackBuffer)
	{
		m_pBackBuffer->Release();
		m_pBackBuffer = NULL;
	}

    // Release display objects, so a new device can be created
	//
	// UNDONE andrewso: Make sure this is a safe assumption.
	//
    if (m_pDevice->Release() > 0)
    {
		DbgPrint( "FATAL: Device still has an outstanding reference." );
    }

	// Just to be safe.
	m_pDevice = NULL;

    // Inform the display class of the driver change. It will internally
    // re-create valid surfaces, a d3ddevice, etc.
	//
    Initialize3DEnvironment();

    // If the app is paused, trigger the rendering of the current frame
    if (FALSE == m_bFrameMoving)
    {
        m_bSingleStep = TRUE;
		
		TimeStart();
		TimeStop();
    }
}


VOID CBenMark::TimeStart()
{
	m_fBaseTime += GetTime() - m_fStopTime;
}

VOID CBenMark::TimeStop()
{
	m_fStopTime = GetTime();
}

VOID CBenMark::TimeAdvance()
{
	m_fBaseTime += GetTime() - ( m_fStopTime + 0.1f );
}

FLOAT CBenMark::GetTime() 
{
	LARGE_INTEGER qwTime;
	LARGE_INTEGER qwTicksPerSec;
	
	QueryPerformanceCounter( &qwTime );
	QueryPerformanceFrequency(&qwTicksPerSec);

	return ((float)qwTime.QuadPart) * 1.0f / (FLOAT)qwTicksPerSec.QuadPart;
}

#ifdef USE_SOUND
#include "dsound.h"

///
/// Set up necessary types
/// 

typedef short* LPSHORT;

///
/// Setup the frequency, and define PI
///

static const double FREQ = 440;
static const double PI = 3.1415926535;

///
/// Scaling factors
///
/// ISCALE is used to convert an interger [0, 44099] to a double [0, 2PI]
/// DATASCALE is used to conver a double [-1.0, 1.0] to an integer [-32767, 32767]

static const double ISCALE = 2.0 * PI / 44099.0;
static const double DATASCALE = 32767.0 / 1.0;

///
/// the main sine player code
///

HRESULT PlaySineWave( void )
{

	///
	/// create a dsound buffer and a data buffer
	///

    HRESULT hr = S_OK;
	LPDIRECTSOUNDBUFFER pDSBuffer = NULL;
	LPSHORT pData = NULL;

	///
	/// place to hold the number of bytes allocated by dsound
	///

	DWORD dwBytes = 0;

	///
	/// allocate space for calculate argument to sin, return value from sine, and actual integer value
	///

	double dArg = 0.0;
	double dSinVal = 0.0;
	SHORT sVal = 0;
   
	///
	/// allocate the dsound buffer description and the wave format
	///

	DSBUFFERDESC dsbd;
	WAVEFORMATEX wfx;

	///
	/// It's always safe to zero out stack allocated structs
	///

	ZeroMemory( &dsbd, sizeof( DSBUFFERDESC ) );
	ZeroMemory( &wfx, sizeof( DSBUFFERDESC ) );

	///
	/// setup the waveformat description to be PCM, 44100hz, 16bit, mono
    ///

	wfx.cbSize = 0;
	wfx.wFormatTag = WAVE_FORMAT_PCM;
	wfx.nChannels = 1;
	wfx.nSamplesPerSec = 44100;
	wfx.wBitsPerSample = 16;
	wfx.nBlockAlign = 2;
	wfx.nAvgBytesPerSec = wfx.nSamplesPerSec * wfx.nBlockAlign;

	///
	/// setup the dsound buffer description with the waveformatex
	///

	dsbd.dwBufferBytes = wfx.nAvgBytesPerSec;
	dsbd.dwFlags = 0;
	dsbd.dwSize = sizeof( DSBUFFERDESC );
	dsbd.lpwfxFormat = &wfx;
    //dsbd.dwMixBins = DSMIXBIN_FXSEND_0;

	/// 
	/// Create the dsound buffer
	///

	hr = DirectSoundCreateBuffer( &dsbd, &pDSBuffer );

	///
	/// start the dsound buffer playing in a loop mode
	///

	if ( SUCCEEDED( hr ) )
	{
		hr = pDSBuffer->Play( 0, 0, DSBPLAY_LOOPING );
	}

	///
	/// continue forever (or until an error occurs)
	///

	if ( SUCCEEDED( hr ) )
	{

		///
		/// get a buffer from dsound using lock
		///

		hr = pDSBuffer->Lock( 0, dsbd.dwBufferBytes, (LPVOID*) &pData, &dwBytes, NULL, NULL, 0 );

		///
		/// go through the buffer 2 bytes (1 short) at a time
		///

		for( DWORD i = 0; SUCCEEDED( hr ) && i < dsbd.dwBufferBytes / 2; i++ )
		{	
			///
			/// calculate the sin value
			///

			dArg = (double) i * ISCALE;
			dSinVal = sin( FREQ * dArg );
			sVal = (SHORT) ( dSinVal * DATASCALE );

			///
			/// copy the value into the dsound buffer
			///

			pData[i] = sVal;
		}

    }
    
    //
    // leave with the buffer still playing..
    //

    return hr;
}

#endif // USE_SOUND
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Benmark5.h ===
//-----------------------------------------------------------------------------
// FILE: BENMARK5.H
//
// Desc: benmark5 header
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#ifndef _BENMARK_5_H_
#define _BENMARK_5_H_

#include "Test.h"
#include "BitFont.h"
//#include "Inifile.h"

#define BENMARK_INI_PATH	"D:\\benmark5.ini"

const DWORD cdwRibbonCount  = 25;

const FLOAT cfRibbonCurl    = 60.0f * D3DX_PI;
const FLOAT cfRibbonPitch   = 3.25f;
const FLOAT cfRibbonWidth   = 0.04f;
const FLOAT cfRibbonRadius  = 0.05f;

const DWORD cdwSubsInLength = 1200;
const DWORD cdwSubsInWidth  = 5;


// Ripped from dxutil.h


struct ScenarioMenu
{
	BYTE m_MenuType;

	const WCHAR *m_szMenuName;

	const WCHAR *m_szActions[6]; // for A, B, C, D, E, F
	unsigned m_cActions;        // Number of filled actions.
};

#define BENMARK_NUM_MENUS 3

//-----------------------------------------------------------------------------
// Structure for holding information about an adapter, and its display modes.
//-----------------------------------------------------------------------------

struct Adapter
{
	struct Mode
	{
		// Mode data
		DWORD      Width;
		DWORD      Height;
		D3DFORMAT  Format;
		DWORD      dwBehavior;
	};
	
	// Adapter data
	D3DADAPTER_IDENTIFIER8 AdapterIdentifier;
	D3DCAPS8   Caps;

	// Mode data
	DWORD      dwNumModes;
	Mode       modes[150];

	Adapter()
	{
		ZeroMemory(this, sizeof(*this));
	}
};


// end Ripped from dxutil.h

/*
* Geometry Constants
*/

enum DRAWFUNC
{
	DF_DRAWINDEXEDPRIMITIVE=0,    // use vertexbuffer drawprim
    DF_DRAWINDEXEDPRIMITIVEUP=1,  // use user ptr drawprim
    DRAWMAX=2
};

class CBenMark : public CTest
{

public:
	/*
	* Constructor
	*/
	
	CBenMark();

	// Background thread management.
    HANDLE                  m_hThread;
    BOOL                    m_fTerminateThread;

	LONG                    m_lDivides;
    INT                     m_iMaxDivides;

private:

	/*
	 * Support structures.
	 */

	// The different options for the test.
	struct BMXSTATE
	{
		UINT        cApplyTextures;
		BOOL		bUseTriList;
		BOOL        bZenable;
		BOOL        bSpecularenable;
		BOOL        bLocalviewer;

		INT         nDirectionalLights;
		INT         nSpotLights;
		INT         nPointLights;

		INT         iDrawFunc;
        BOOL        fPrecompile;
		D3DFILLMODE iFillMode; 

		DWORD		dwTime;
	};

	BMXSTATE				m_bmxState;
	//CIniFile				m_IniFile;


    typedef VOID (CBenMark::*PFNDRAWRIBBON)(
        UINT                iIndex,
        D3DPRIMITIVETYPE    Type,
        DWORD               PrimitiveCount);

    PFNDRAWRIBBON m_pfnDrawRibbon;

	/*
	 * Our materials
	 */

	D3DMATERIAL8 m_matIn;
	D3DMATERIAL8 m_matOut[cdwRibbonCount];

    /* 
	 * Data members
	 */

	// the following variables were added to remove dependencies on d3dapp
	LPDIRECT3D8				m_pD3D;
	LPDIRECT3DDEVICE8		m_pDevice;
	D3DPRESENT_PARAMETERS	m_Presentation;
	WCHAR					m_szTestStats[256];   // String to hold the test stats.
	Adapter					m_Adapter;
	HANDLE					m_hDevice;			// handle to gamepad device
	BOOL					m_bUseDepthBuffer;
    D3DFORMAT				m_DepthBufferFormat;
	IDirect3DSurface8	   *m_pBackBuffer;
	D3DSURFACE_DESC			m_BackBufferDesc;    // Surface desc of the backbuffer
	HANDLE					m_hGamePad1;
	XINPUT_STATE			m_InputState;
	BitFont					m_Font;
	// menu variables
	BOOL					m_bShowHelp;
	BOOL					m_bShowStats;
	ScenarioMenu*			m_rgpMenus[BENMARK_NUM_MENUS];	// Descriptor for each menu.
	DWORD					m_iActiveKey;
	DWORD					m_iActiveMenu;
	BOOL					m_bRunFullTest;
	BOOL					m_bFrameMoving;
	BOOL					m_bSingleStep;
	DWORD					m_dwCurrentMode;
	D3DMULTISAMPLE_TYPE		m_iSampleType;		 // Current sample mode.
	DWORD					m_dwSampleMask;      // Mask of available FSAA modes.
	// timing variables
	FLOAT					m_fBaseTime;
	FLOAT					m_fStopTime;
	DWORD					m_dwStartLoopTime;
	UINT					m_wLoops;
	UINT					m_wLoop;

    WORD                   *m_pwIndices;    // user ptr to indices
    IDirect3DIndexBuffer8  *m_pIndexBuffer; // dx8 index buffer
    IDirect3DVertexBuffer8 *m_pVBRibbon[2]; // vb of verts
    BYTE                   *m_pVertices[2]; // user ptr to verts

#ifdef XBOX
    IDirect3DPushBuffer8   *m_pPushBuffer;  // precompiled push buffer
#endif

    IDirect3DTexture8      *m_pTexture1;    // texture1
    IDirect3DTexture8      *m_pTexture2;    // texture2
    IDirect3DSurface8      *m_pBackSurf;    // back surface ptr

    DWORD                   m_dwFVF;        // our current FVF
    DWORD                   m_dwFVFSize;    // FVF size
    DWORD                   m_dwIndexCount; // # indices
    DWORD                   m_dwNumVertices;// # verts
	DWORD					m_dwTotalTimes; // # of times the ribbons have been drawn
    DWORD                   m_dwTriCount;
    _D3DPRIMITIVETYPE       m_dwPrimType;
    FLOAT                   m_fDelta;

	INT						m_nNumLights;	// # of allocated lights.
    
	// long-term stats.
	double					m_fdAveTriPerSec;
	double					m_fdMaxTriPerSec;
	double					m_fdMinTriPerSec;

	DWORD					m_dwAveCount;


	/*
	 * Overridden members of the base class
	 */

	HRESULT Render();
	HRESULT Update();
	HRESULT InitGraphics();
	HRESULT DestroyGraphics();
	HRESULT ProcessInput();
	HRESULT DestroyInput();

	HRESULT ReadIni();

	/*
	 * Implementation
	 */

	VOID InitMaterials(D3DMATERIAL8 *pmatIn, D3DMATERIAL8 *pmatOut);
	VOID InitLights();
	IDirect3DTexture8 *CreateTexture(DWORD dwWidth, DWORD dwHeight);
	VOID InitIndices();
	VOID InitVBs();

	VOID DrawIndexedPrimitive(UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount);
	VOID DrawIndexedPrimitiveUP(UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount);
	VOID PrecompiledDraw(UINT iIndex, D3DPRIMITIVETYPE dwPrimType, DWORD PrimitiveCount);

    VOID InitDeviceObjects();
    VOID RestoreDeviceObjects();
	VOID UpdateStats(FLOAT fElapsedTime);
	VOID ShowInfo(INT iY, INT cHeight);
	VOID ShowMenu();
	VOID ProcessKeyPress(DWORD iMenu, DWORD iKey);
	VOID Initialize3DEnvironment();
	VOID Change3DEnvironment();
	
	VOID TimeStart();
	VOID TimeStop();
	VOID TimeAdvance();
	FLOAT GetTime();

};

#endif // #ifndef _BENMARK_5_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Fillrate.cpp ===
//-----------------------------------------------------------------------------
// FILE: FILLRATE.CPP
//
// Desc: a stupid fillrate test
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <xdbg.h>
#include <xtestlib.h>
#include <xlog.h>
#include <macros.h>
#include <stdio.h>
#include <assert.h>

#include <d3d8perf.h>

// don't use the VisibilityTest apis
// #define NO_VIS_TEST

#include "fillrate.h"
#include "Ini.h"


CFillRate::CFillRate()
{
	m_pDevice			= NULL; 
	m_pVB				= NULL;			// our vertex buffer
	m_pBackBuffer		= NULL;
	m_pIndices			= NULL;			// indices allocation
	m_hInpDevice		= NULL;			// input device

	for ( UINT i=0; i<FILLRATE_NUM_TEXTURES; i++ )
	{
		m_pTexture[i]	= NULL;
	}
	
	m_ShaderHandle		= 0;             // pixel shader handle
	m_dwFVFSize			= 0;             // FVF size
	m_cIndices			= 0;             // count of indices
	
	m_fRedrawScreen		= TRUE;			// refresh screen?
	m_fdumpZ			= FALSE;		// dump Z val

	m_wLoops			= GetPrivateProfileIntA( "FILLRATE", "Loops", 1, FILLRATE_INI_PATH );
	m_wLoop				= 0;
//	m_dwStartLoopTime	= 0;
	
	m_iCurTest			= 0;

	struct
	{
		LPCSTR szDesc;
		void (CFillRate::*pFunc)();
	} rgTests[] =
	{
		{ "Current",        DoQuickTimedTest },
		{ "MultiSample",    DoMultiSampleTimedTest },
		{ "FillRate",       DoCompleteTimedTest },
		{ "Texture Test",   DoTextureTest },
	};
	memcpy( &m_rgTests, rgTests, sizeof(m_rgTests) );
}

HRESULT CFillRate::InitGraphics()
{
	HRESULT hr = S_OK;

	if ( !InitFR( true ) )
	{
        return E_FAIL;
	}

//	m_dwStartLoopTime = timeGetTime();

	return hr;
}

HRESULT CFillRate::DestroyGraphics()
{
	HRESULT hr = S_OK;

	RELEASE( m_pVB );

	RELEASE( m_pBackBuffer );

	for ( UINT i=0; i<FILLRATE_NUM_TEXTURES; i++ )
	{
		RELEASE( m_pTexture[i] );
	}

	RELEASE( m_pDevice );

	return hr;
}


HRESULT CFillRate::DestroyInput()
{
	HRESULT hr = S_OK;

	if ( NULL != m_hInpDevice )
	{
		XInputClose( m_hInpDevice );
		m_hInpDevice = NULL;
	}

	return hr;
}


HRESULT CFillRate::ProcessInput()
{
	HRESULT hr = S_OK;

	DWORD dwDeviceMap;
	DWORD dwSuccess;
	BOOL bDeviceChanges;
	DWORD dwInsertions;
	DWORD dwRemovals;

	XINPUT_STATE xinpstate;

	bDeviceChanges = XGetDeviceChanges( XDEVICE_TYPE_GAMEPAD, &dwInsertions, &dwRemovals );
	if ( bDeviceChanges )
	{
		if ( dwInsertions & XDEVICE_PORT0_MASK )
		{
			m_hInpDevice = XInputOpen( XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL );
			if ( m_hInpDevice == NULL )
			{
				DbgPrint( "Error Opening Input\n" );
				return E_FAIL;
			}
		}
		
		if ( dwRemovals & XDEVICE_PORT0_MASK )
		{
			DbgPrint( "Gamepad removed from Port 0\n" );
			return E_FAIL;
		}
	}

	dwDeviceMap = XGetDevices( XDEVICE_TYPE_GAMEPAD );
	if ( !(dwDeviceMap & XDEVICE_PORT0_MASK) ) 
	{
		//DbgPrint( "No Device in Port 0\n" );
		return S_OK; // live with it!
	}
	else if ( NULL == m_hInpDevice )
	{
		m_hInpDevice = XInputOpen( XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL );
		if ( m_hInpDevice == NULL )
		{
			DWORD dwError;
			dwError = GetLastError();
			DbgPrint( "Error Opening Input. Error#: %d\n", dwError);
			return E_FAIL;
		}
	}

	dwSuccess = XInputGetState( m_hInpDevice, &xinpstate );
	if ( dwSuccess != ERROR_SUCCESS )
	{
		DbgPrint( "Error Getting Input State\n" );
		return dwSuccess;
	}

	return hr;
}


HRESULT CFillRate::Update()
{
	HRESULT hr = S_OK;

	for ( m_iCurTest=0; m_iCurTest < FILLRATE_NUM_TESTS; m_iCurTest++ )
	{
		m_var.runtestonreload = 1;
		(this->*m_rgTests[m_iCurTest].pFunc)();
		// draw one frame with current settings
		RenderFrame(1);
		// flip that dude to the front
		CheckHR(m_pDevice->Present(NULL, NULL, NULL, NULL));
		// restore settings from ini file
		InitFR( FALSE );
		// dump any stats here
		// dump some settings
#ifdef DBG
		D3DPUSHBUFFERINFO PushBufferInfo;
		D3DPERF_GetPushBufferInfo(&PushBufferInfo);
		
		D3DPERF_Dump();
		D3DPERF_Reset();
#endif DBG
	}

	m_wLoop++;
	if ( m_wLoop >= m_wLoops )
	{
		m_bQuit = TRUE;
	}
	else
	{
		//EXECUTE( DestroyGraphics() ); //included in init
		EXECUTE( InitGraphics() );
		if ( FAILED( hr ) )
		{
			return hr;
		}
	}

	return hr;
}


HRESULT CFillRate::Render()
{
	HRESULT hr = S_OK;

#if 0
	if(m_fRedrawScreen)
	{
		// clear back buffer
		RenderFrame(1);
		
		// swap that guy to the front
		//CheckHR(m_pDevice->Present(NULL, NULL, NULL, NULL));
		
		// clear new back buffer
		RenderFrame(1);
		
		// display current options on front buffer
//		m_scrtext.cls();
//		DumpCurrentSettings();
//		m_scrtext.drawtext(m_var.verboselevel >= 1);
//		m_Font.DrawText( m_pBackBuffer, (wchar_t *)"TEST", 300, 200, 0, D3DCOLOR_XRGB( 255, 255, 255 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
		m_pDevice->Present( NULL, NULL, NULL, NULL );
		
		m_fRedrawScreen = false;
	}
	else
	{
		// 33.3 fps baby!
		Sleep(30);
		m_fRedrawScreen = true;
	}
#endif 0

	return hr;
}


//=========================================================================
// Initialize fillrate app
//=========================================================================
BOOL CFillRate::InitFR(BOOL freadINIFile)
{
	// make sure we're starting from scratch
	DestroyGraphics();

    if(freadINIFile && !ReadFRIniFile())
        dprintf("%s not found\n", FILLRATE_INI_PATH );

    // init d3d
    if(!InitD3D())
    {
        dprintf("InitD3D failed.\n");
        return false;
    }

    CheckHR(m_pDevice->SetRenderState(D3DRS_SWATHWIDTH, m_var.SwathWidth));
    CheckHR(m_pDevice->SetRenderState(D3DRS_FILLMODE, m_var.d3dfillmode));
    CheckHR(m_pDevice->SetRenderState(D3DRS_COLORWRITEENABLE, m_var.colorwriteenable));

    CheckHR(m_pDevice->SetRenderState(D3DRS_ZENABLE, m_var.zenable));
    CheckHR(m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, m_var.zwriteenable));
    CheckHR(m_pDevice->SetRenderState(D3DRS_ZFUNC, m_var.d3dcmpfunc));

    CheckHR(m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, m_var.alphablendenable));
    CheckHR(m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA));
    CheckHR(m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA));

    CheckHR(m_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, m_var.alphatestenable));
    CheckHR(m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_ALWAYS));
    CheckHR(m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0x00000001));

    if(m_var.userpixelshader)
        CheckHR(m_pDevice->CreatePixelShader(&m_var.shaderdef, &m_ShaderHandle));

    for(int itex = 0; itex < 4; itex++)
    {
        RELEASE(m_pTexture[itex]);

        if(m_var.rgtex[itex].type)
        {
            assert(m_var.rgtex[itex].type < TEX_Max);
            m_var.rgtex[itex].type = min(m_var.rgtex[itex].type, TEX_Max - 1);

            static const D3DRESOURCETYPE rgrestype[] =
                { D3DRTYPE_TEXTURE, D3DRTYPE_CUBETEXTURE, D3DRTYPE_VOLUMETEXTURE };
            assert(TEX_2d == 1 && TEX_Cubemap == 2 && TEX_Volume == 3);

            m_pTexture[itex] = MyCreateTexture(
                rgrestype[m_var.rgtex[itex].type - 1],
                m_var.rgtex[itex].d3dFormat,
                m_var.rgtex[itex].texsize,
                m_var.rgtex[itex].texsize);

            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_MINFILTER, m_var.rgtex[itex].filtertype));
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_MAGFILTER, m_var.rgtex[itex].filtertype));

            // Set the texture stage states appropriately
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_COLORARG1, D3DTA_TEXTURE));
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_COLOROP, m_var.ColorOp));
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_COLORARG2, D3DTA_DIFFUSE));

            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_ALPHAARG1, D3DTA_TEXTURE));
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_ALPHAOP, m_var.AlphaOp));
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE));
        }
        else
        {
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_COLOROP, D3DTOP_DISABLE));
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_ALPHAOP, D3DTOP_DISABLE));

            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_MINFILTER, D3DTEXF_LINEAR));
            CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_MAGFILTER, D3DTEXF_LINEAR));
        }

        CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP));
        CheckHR(m_pDevice->SetTextureStageState(itex, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP));
    }

    CreateQuadList(m_var.overdraw);

//	m_dwStartLoopTime = 0;

    return true;
}

//=========================================================================
// Init Direct3d
//=========================================================================
BOOL CFillRate::InitD3D()
{
	//D3DPRESENT_PARAMETERS d3dppCur = {0};
    D3DPRESENT_PARAMETERS d3dpp = {0};

	HRESULT hr = S_OK;

    // Set the screen mode.
    d3dpp.BackBufferWidth                   = UINT(m_var.screenwidth);
    d3dpp.BackBufferHeight                  = UINT(m_var.screenheight);
    d3dpp.BackBufferFormat                  = m_var.BackBufferFormat;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.EnableAutoDepthStencil            = !!m_var.AutoDepthStencilFormat;
    d3dpp.AutoDepthStencilFormat            = m_var.AutoDepthStencilFormat;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.FullScreen_RefreshRateInHz        = 60;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.Flags                             = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;

    if(m_var.MSType != D3DMULTISAMPLE_NONE)
        d3dpp.MultiSampleType = (D3DMULTISAMPLE_TYPE)((DWORD)(m_var.MSType) | (DWORD)(m_var.MSFormat));

#if 0
    // if nothing has changed - don't reinit
    if(!memcmp(&d3dppCur, &d3dpp, sizeof(D3DPRESENT_PARAMETERS)))
        return FALSE;
    d3dppCur = d3dpp;

    if(m_pDevice)
    {
        if(m_ShaderHandle)
        {
            CheckHR(m_pDevice->SetPixelShader(0));
            CheckHR(m_pDevice->DeletePixelShader(m_ShaderHandle));
            m_ShaderHandle = 0;
        }

        // make sure everything is freed
        RELEASE(m_pVB);
        for(int itex = 0; itex < 4; itex++)
            RELEASE(m_pTexture[itex]);

        RELEASE(m_pBackBuffer);
        RELEASE(m_pDevice);
    }
#endif 0

    // Create the device.
    EXECUTE(Direct3D_CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL,
        NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice))
    if ( FAILED ( hr ) )
	{
        return FALSE;
    }

    D3DDevice_GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &m_pBackBuffer);
    return TRUE;
}

//=========================================================================
// Fill a volume texture with shtuff
//=========================================================================
void FillTextureBits3D(D3DLOCKED_BOX *plockVol,
    D3DFORMAT d3dFormat, DWORD dwHeight, DWORD dwWidth, DWORD dwDepth)
{
    DWORD dwBits = BitsPerPixelOfD3DFORMAT(d3dFormat);

    assert(!IsLinearFormat(d3dFormat));

    BYTE *pBits = (BYTE *)plockVol->pBits;
    for(DWORD d = 0; d < dwDepth; d++)
    {
        for(DWORD y = 0; y < dwHeight; y++)
        {
            for(DWORD x = 0; x < dwWidth; x++)
            {
                DWORD c = (~y & 1) * (y + 1) * 0xff / dwHeight;
                DWORD c2 = d * 0xff / (dwDepth - 1);

                switch(dwBits)
                {
                case 4:
                    x++;
                case 8:
                    *pBits++ = LOBYTE(c);
                    break;
                case 16:
                    *(WORD *)pBits = MAKEWORD(c2, c);
                    pBits += 2;
                    break;
                case 32:
                    *(DWORD *)pBits = MAKELONG(MAKEWORD(c2, c), MAKEWORD(c2, c));
                    pBits += 4;
                    break;
                default:
                    CheckHR(E_FAIL);
                    break;
                }
            }
        }
    }
}

//=========================================================================
// Fill a 2D cubemap face or texture with shtuff
//=========================================================================
void FillTextureBits(D3DLOCKED_RECT *plockRect,
    D3DFORMAT d3dFormat, DWORD dwHeight, DWORD dwWidth)
{
    bool fIsLinear = IsLinearFormat(d3dFormat);
    DWORD dwBits = BitsPerPixelOfD3DFORMAT(d3dFormat);
    DWORD dwLine = (DWORD)plockRect->pBits;

    for (DWORD y = 0; y < dwHeight; y++)
    {
        DWORD dwAddr = dwLine;
        DWORD c = (~y & 1) * (y + 1) * 0xff / dwHeight;

        for (DWORD x = 0; x < dwWidth; x++)
        {
            switch(dwBits)
            {
            case 4:
                *(BYTE *)dwAddr = LOBYTE(c);
                dwAddr += 1;
                x++;
                break;
            case 8:
                *(BYTE *)dwAddr = LOBYTE(c);
                dwAddr += 1;
                break;
            case 16:
                *(WORD *)dwAddr = MAKEWORD(c, c);
                dwAddr += 2;
                break;
            case 32:
                *(DWORD *)dwAddr = MAKELONG(MAKEWORD(c, c), MAKEWORD(c, c));
                dwAddr += 4;
                break;
            }
        }

        // pitch is only valid for linear textures
        if(fIsLinear)
            dwLine += plockRect->Pitch;
        else
            dwLine += dwWidth * dwBits / 8;
    }
}

//=========================================================================
// Create a texture
//=========================================================================
IDirect3DBaseTexture8 *CFillRate::MyCreateTexture(D3DRESOURCETYPE d3dtype,
    D3DFORMAT d3dFormat, DWORD dwWidth, DWORD dwHeight)
{
    IDirect3DBaseTexture8 *pTexRet = NULL;

    if(d3dtype == D3DRTYPE_TEXTURE)
    {
        D3DLOCKED_RECT lockRect;
        IDirect3DTexture8 *pTexture = NULL;

        CheckHR(m_pDevice->CreateTexture(dwWidth, dwHeight, 1, 0, d3dFormat,
            D3DPOOL_MANAGED, &pTexture));

        CheckHR(pTexture->LockRect(0, &lockRect, NULL, 0));
        FillTextureBits(&lockRect, d3dFormat, dwHeight, dwWidth);
        CheckHR(pTexture->UnlockRect(0));

        pTexRet = pTexture;
    }
    else if(d3dtype == D3DRTYPE_CUBETEXTURE)
    {
        D3DLOCKED_RECT lockRect;
        IDirect3DCubeTexture8 *pCubeTexture = NULL;

        CheckHR(m_pDevice->CreateCubeTexture(dwWidth, 1, 0, d3dFormat,
            D3DPOOL_MANAGED, &pCubeTexture));

        for(int iFace = 0; iFace < D3DCUBEMAP_FACE_NEGATIVE_Z; iFace++)
        {
            D3DCUBEMAP_FACES cmFace = (D3DCUBEMAP_FACES)iFace;

            CheckHR(pCubeTexture->LockRect(cmFace, 0, &lockRect, NULL, 0));
            FillTextureBits(&lockRect, d3dFormat, dwHeight, dwWidth);
            CheckHR(pCubeTexture->UnlockRect(cmFace, 0));
        }

        pTexRet = pCubeTexture;
    }
    else
    {
        assert(d3dtype == D3DRTYPE_VOLUMETEXTURE);

        D3DLOCKED_BOX lockVol;
        IDirect3DVolumeTexture8 *pVolumeTexture = NULL;

        CheckHR(m_pDevice->CreateVolumeTexture(dwWidth, dwHeight, dwHeight, 1, 0,
            d3dFormat, D3DPOOL_MANAGED, &pVolumeTexture));

        CheckHR(pVolumeTexture->LockBox(0, &lockVol, NULL, 0));
        FillTextureBits3D(&lockVol, d3dFormat, dwHeight, dwWidth, dwWidth);
        CheckHR(pVolumeTexture->UnlockBox(0));

        pTexRet = pVolumeTexture;
    }

   return pTexRet;
}

//=========================================================================
// Create a quadlist vb with X quads and decreasing z values
//=========================================================================
void CFillRate::CreateQuadList(int nquads)
{
    RELEASE(m_pVB);

    if(m_cIndices)
    {
        delete [] m_pIndices;
        m_cIndices = 0;
    }

    m_dwFVFSize = D3DXGetFVFVertexSize(m_var.FVF);

    if(m_var.verboselevel >= 2)
        dprintf("FVF:0x%08lx, FVFSize: %d\n", m_var.FVF, m_dwFVFSize);

    UINT VBLength = m_dwFVFSize * 4 * nquads;

    CheckHR(m_pDevice->CreateVertexBuffer(VBLength,
        D3DUSAGE_WRITEONLY, m_var.FVF, D3DPOOL_MANAGED, &m_pVB));

    float *pVerts;
    CheckHR(m_pVB->Lock(0, m_dwFVFSize, (BYTE **)&pVerts, 0));

    float texscale = m_var.rgtex[0].type && IsLinearFormat(m_var.rgtex[0].d3dFormat) ?
        m_var.rgtex[0].texsize : 1.0f;

    float dz = 1.0f / (nquads * 2);
    float zval = 1.0f - dz;
    for(int iquad = 0; iquad < nquads; iquad++, zval -= dz)
    {
        for(int y = 0; y <= 1; y++)
        {
            for(int x = 0; x <= 1; x++)
            {
                D3DXVECTOR4 pos;
                D3DXVECTOR4 tex0;

                // position
                pos.x = m_var.quadx + x * m_var.quadwidth;
                pos.y = m_var.quady + y * m_var.quadheight;
                pos.z = zval;
                pos.w = 1.0f;

                // texture coordinates
                if(m_var.rotatetex)
                {
                    tex0.x = (1.0f - y) * texscale;
                    tex0.y = x * texscale;
                }
                else
                {
                    tex0.x = x * texscale;
                    tex0.y = y * texscale;
                }
                tex0.z = (1.0f - x) * texscale;
                tex0.w = 1.0f;

                // diffuse color
                DWORD diffuse = D3DCOLOR_COLORVALUE(tex0.x,
                    tex0.y, 1.0f - tex0.x, 2.0f / 0xff);

                if(m_var.FVF & D3DFVF_XYZRHW)
                {
                    *(D3DXVECTOR4 *)pVerts = pos;
                    pVerts += 4;
                }
                else if(m_var.FVF & D3DFVF_XYZ)
                {
                    *(D3DXVECTOR3 *)pVerts = *(D3DXVECTOR3 *)&pos;
                    pVerts += 3;
                }

                if(m_var.FVF & D3DFVF_NORMAL)
                {
                    *(D3DXVECTOR3 *)pVerts = D3DXVECTOR3(0, .707f, .707f);
                    pVerts += 3;
                }

                if(m_var.FVF & D3DFVF_DIFFUSE)
                    *(DWORD *)pVerts++ = diffuse;

                if(m_var.FVF & D3DFVF_SPECULAR)
                    *(DWORD *)pVerts++ = ~diffuse;

                // Texture coordinates
                UINT uNumTexCoords = (((m_var.FVF) & D3DFVF_TEXCOUNT_MASK) >> D3DFVF_TEXCOUNT_SHIFT);
                UINT uTextureFormats = m_var.FVF >> 16;

                if(uTextureFormats)
                {
                    for(UINT i = 0; i < uNumTexCoords; i++)
                    {
                        switch(uTextureFormats & 3)
                        {
                        case D3DFVF_TEXTUREFORMAT1:     // u
                            *pVerts++ = tex0.x;
                            break;
                        case D3DFVF_TEXTUREFORMAT2:     // u,v
                            *(D3DXVECTOR2 *)pVerts = *(D3DXVECTOR2 *)&tex0;
                            pVerts += 2;
                            break;
                        case D3DFVF_TEXTUREFORMAT3:     // s,t,r
                            *(D3DXVECTOR3 *)pVerts = *(D3DXVECTOR3 *)&tex0;
                            pVerts += 3;
                            break;
                        case D3DFVF_TEXTUREFORMAT4:     // s,t,r,q
                            *(D3DXVECTOR4 *)pVerts = tex0;
                            pVerts += 4;
                            break;
                        }

                        uTextureFormats >>= 2;
                    }
                }
                else while(uNumTexCoords--)
                {
                    // u,v
                    *(D3DXVECTOR2 *)pVerts = *(D3DXVECTOR2 *)&tex0;
                    pVerts += 2;
                }
            }
        }
    }

    CheckHR(m_pVB->Unlock());
    m_pVB->MoveResourceMemory(D3DMEM_VIDEO);

    // create out index buffer
    m_cIndices = nquads * 4;
    m_pIndices = new WORD [m_cIndices];

    WORD *pindices = m_pIndices;

    for(iquad = 0; iquad < nquads; iquad++)
    {
        *pindices++ = iquad * 4 + 0;
        *pindices++ = iquad * 4 + 1;
        *pindices++ = iquad * 4 + 3;
        *pindices++ = iquad * 4 + 2;
    }
}



//=========================================================================
// Dump the first entry in the z buffer
//=========================================================================
void CFillRate::DumpZ()
{
    D3DLOCKED_RECT lockRect;
    D3DSURFACE_DESC desc;
    IDirect3DSurface8 *pZBuffer = NULL;

    if(!m_var.AutoDepthStencilFormat)
        return;

    CheckHR(m_pDevice->GetDepthStencilSurface(&pZBuffer));

    CheckHR(pZBuffer->LockRect(&lockRect, NULL, D3DLOCK_READONLY));
    CheckHR(pZBuffer->GetDesc(&desc));

    DWORD dwVal;
    switch(desc.Format)
    {
    case D3DFMT_LIN_D16:
    case D3DFMT_D16:
        // v = z[15:0]  0.0 to 65535.0
        dprintf("D3DFMT_D16: 0x%08lx", *(WORD *)lockRect.pBits);
        break;
    case D3DFMT_LIN_D24S8:
    case D3DFMT_D24S8:
        // v = z[24:0] 0.0 to 16,777,215.0  (0 to FFFFFF)
        dwVal = (*(DWORD *)lockRect.pBits);
        dprintf("D3DFMT_D24S8: 0x%08lx:%02lx %.2f", dwVal >> 8, LOBYTE(dwVal),
            (dwVal >> 8) / 16777215.0f);
        // 0x3ffffffe, 0x7ffffffe, 0xbffffffe
        // 0.25f, 0.75f, 0.5f
        break;
    case D3DFMT_LIN_F16:
    case D3DFMT_F16:
        // e4m12
        // e = z[15:12]
        // m = z[11:0]
        // value = 2^(e-7) * (1 + m/4096)
        // value = 0.0 when e == 0 and m == 0
        dprintf("D3DFMT_F16: 0x%08lx", *(WORD *)lockRect.pBits);
        break;
    case D3DFMT_LIN_F24S8:
    case D3DFMT_F24S8:
        // e8m16
        // e = z[23:16]
        // m = z[15:0]
        // value = 2^(e-127) * (1 + m/65536)
        // value = 0.0 when e == 0 and m == 0
        dprintf("D3DFMT_F24S8: 0x%08lx", *(DWORD *)lockRect.pBits);
        break;
    }

    pZBuffer->UnlockRect();

    RELEASE(pZBuffer);
}

//=========================================================================
// render the quads X # of times
//=========================================================================
void CFillRate::RenderFrame(int overdraw)
{
    UINT coverdrawverts = overdraw * 4;

    // clear stuff
    DWORD dwCFlags = m_var.clearflags;
    if(!m_var.AutoDepthStencilFormat)
        dwCFlags &= ~(D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);

    CheckHR(m_pDevice->Clear(0, NULL, dwCFlags, m_var.cclearval,
        m_var.zclearval, m_var.sclearval));

    // begin scene
    CheckHR(m_pDevice->BeginScene());

    // set textures
    for(int itex = 0; itex < 4; itex++)
        CheckHR(m_pDevice->SetTexture(itex, m_pTexture[itex]));

    CheckHR(m_pDevice->SetVertexShader(m_var.FVF));
    CheckHR(m_pDevice->SetStreamSource(0, m_pVB, m_dwFVFSize));

    CheckHR(m_pDevice->SetPixelShader(m_ShaderHandle));

    if(m_var.zenable && m_var.primez)
    {
        // prime the z buffer to 0.5f
        CheckHR(m_pDevice->SetRenderState(D3DRS_ZFUNC, m_var.primezcmpfunc));
        CheckHR(m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, TRUE));

        // draw one quad (not the first one) to prime the z buffer
        CheckHR(m_pDevice->DrawIndexedVertices(D3DPT_QUADLIST, 4, m_pIndices + 4));
        coverdrawverts -= 4;

        CheckHR(m_pDevice->SetRenderState(D3DRS_ZFUNC, m_var.d3dcmpfunc));
        CheckHR(m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, m_var.zwriteenable));
    }

    while(coverdrawverts)
    {
        UINT VertexCount = min(m_cIndices, coverdrawverts);
        CheckHR(m_pDevice->DrawIndexedVertices(D3DPT_QUADLIST, VertexCount, m_pIndices));

        coverdrawverts -= VertexCount;
    }

    if(m_fdumpZ)
        DumpZ();

	CheckHR(m_pDevice->Present( NULL, NULL, NULL, NULL ));
    CheckHR(m_pDevice->EndScene());
}


//=========================================================================
// Run through a suite of multisample/supersample tests
//=========================================================================
void CFillRate::DoMultiSampleTimedTest()
{
    D3DMULTISAMPLE_TYPE rgMSType[] =
    {
        D3DMS_NONE,
        D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR,
        D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX,
        D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR,
        D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN,
        D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN,
        D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR,
        D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR,
        D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR,
        D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN,
        D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN
    };
    static const int cMSTypes = ARRAYSIZE(rgMSType);

    D3DFORMAT rgBackBuf[] = { D3DFMT_R5G6B5, D3DFMT_X8R8G8B8 };
    static const cBBufs = ARRAYSIZE(rgBackBuf);

//    m_scrtext.cls();
    for(int iBuf = 0; iBuf < cBBufs; iBuf++)
    {
		CHAR str[255];
		sprintf( str, "BackBufFmt: %-38s %-8s %-8s %s\n", GetD3DFormatStr(rgBackBuf[iBuf]), "MPix/s", "fps", "frames");
		//m_Font.DrawText(m_pBackBuffer, str, 50, 50, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
		DbgPrint( str );
        //m_scrtext.printf("BackBufFmt: %-38s %-8s %-8s %s",
        //    GetD3DFormatStr(rgBackBuf[iBuf]), "MPix/s", "fps", "frames");

        for(int iType = 0; iType < cMSTypes; iType++)
        {
            TIMETESTRESULTS ttres;

            m_var.MSType = rgMSType[iType];
            m_var.BackBufferFormat = rgBackBuf[iBuf];

            InitFR(false);
            DoTimedTest(&ttres);

            //m_scrtext.printf();
			sprintf( str, "\n    %-45s %7.2f  %8.2f  %d\n\n",
                GetMultiSampleStr(rgMSType[iType]),
                ttres.fillrate, ttres.fps, ttres.cFrames);
			//m_Font.DrawText(m_pBackBuffer, str, 50, 50, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
			DbgPrint( str );
        }
    }
}

//=========================================================================
// Do a quick test with the current settings
//=========================================================================
void CFillRate::DoQuickTimedTest()
{
    TIMETESTRESULTS ttres;

    DoTimedTest(&ttres);

//    m_scrtext.cls();
    DumpCurrentSettings();
	CHAR str[512];
	sprintf( str, "\n fillrate: %.2fMP/s\n \
					fps:      %.2f\n\
					frames:   %d\n\
					time:     %.2fms\n\
					pixels:   %I64u\n\n",
					ttres.fillrate,
					ttres.fps,
					ttres.cFrames,
					ttres.TimeTillIdle,
					ttres.cNumPixelsDrawn);


	//m_Font.DrawText(m_pBackBuffer, str, 50, 50, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	DbgPrint( str );
}

//=========================================================================
// Texture fillrate test
//=========================================================================
void CFillRate::DoTextureTest()
{
    D3DFORMAT rgFormats[] = 
    {
        D3DFMT_A4R4G4B4,
        D3DFMT_A8R8G8B8,
        D3DFMT_DXT1,
        D3DFMT_DXT2,
        D3DFMT_P8,
        D3DFMT_LIN_A8R8G8B8
    };
    int rgTexSize[] = { 1, 16, 256 };
    float rgResults[ARRAYSIZE(rgTexSize)];

//    m_scrtext.cls();
	CHAR str[512];

	sprintf( str, "%-20s %-10s %-10s %-10s\n",
        "texturefmt", "1x1", "16x16", "256x256");
	//m_Font.DrawText( m_pBackBuffer, str, 50, 50, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	DbgPrint( str );

    //m_scrtext.printf("%-20s %-10s %-10s %-10s",
    //    "texturefmt", "1x1", "16x16", "256x256");

    for(int id3dformat = 0; id3dformat < ARRAYSIZE(rgFormats); id3dformat++)
    {
        char szBuf[128];

        szBuf[0] = 0;
        for(int itexsize = 0; itexsize < ARRAYSIZE(rgTexSize); itexsize++)
        {
            m_var.rgtex[0].type = TEX_2d;
            m_var.rgtex[0].texsize = rgTexSize[itexsize];
            m_var.rgtex[0].d3dFormat = rgFormats[id3dformat];

            InitFR(false);
            rgResults[itexsize] = DoTimedTest();
        }

		sprintf( str, "\n%-20s %-10.2f %-10.2f %-10.2f\n\n",
            GetD3DFormatStr(m_var.rgtex[0].d3dFormat),
            rgResults[0], rgResults[1], rgResults[2]);
		//m_Font.DrawText( m_pBackBuffer, str, 50, 50, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
		DbgPrint( str );
        //m_scrtext.printf(
        //    "%-20s %-10.2f %-10.2f %-10.2f",
        //    GetD3DFormatStr(m_var.rgtex[0].d3dFormat),
        //    rgResults[0], rgResults[1], rgResults[2]);
    }
}

//=========================================================================
// Run through a suite of fillrate tests
//=========================================================================
void CFillRate::DoCompleteTimedTest()
{
    D3DFORMAT rgFormats[] = { D3DFMT_DXT1, D3DFMT_A8R8G8B8, D3DFMT_A4R4G4B4 };

//    m_scrtext.cls();
	CHAR str[512];

	sprintf( str, "zwrite zread texturefmt      texturesize fillrate  (alphablendenable:%d)\n",
        m_var.alphablendenable);
	//m_Font.DrawText(m_pBackBuffer, str, 50, 50, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	DbgPrint( str );
        

    for(int id3dformat = 0; id3dformat < ARRAYSIZE(rgFormats); id3dformat++)
    {
        for(int texsize = 0; texsize <= 512; texsize += 256)
        {
            for(int zenable = 0; zenable < 2; zenable++)
            {
                for(int zwriteenable = 0; zwriteenable < 2; zwriteenable++)
                {
                    m_var.zenable = !!zenable;
                    m_var.zwriteenable = !!zwriteenable;

                    m_var.d3dcmpfunc = D3DCMP_NOTEQUAL;

                    m_var.rgtex[0].texsize = texsize;
                    m_var.rgtex[0].type = !!texsize;
                    m_var.rgtex[0].d3dFormat = rgFormats[id3dformat];

                    if(!m_var.zenable && zwriteenable)
                        continue;

                    if(!m_var.rgtex[0].type && id3dformat)
                        continue;

                    InitFR(false);
                    float fResult = DoTimedTest();

                    sprintf( str, "\n%-6d %-5d %-15s %-11d %.2f\n\n",
                        m_var.zwriteenable,
                        m_var.zenable,
                        texsize ? GetD3DFormatStr(m_var.rgtex[0].d3dFormat) : "",
                        texsize,
                        fResult);
					//m_Font.DrawText(m_pBackBuffer, str, 50, 50, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
					DbgPrint( str );
                }
            }
        }
    }
}

//=========================================================================
// Dump the current options
//=========================================================================
void CFillRate::DumpCurrentSettings()
{
	WCHAR str[512];
	INT iX, iY;

	iX = 35;
	iY = 100;

    swprintf( str, (wchar_t *)"Btn A) run '%s' test.", m_rgTests[m_iCurTest].szDesc);
	m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	iY+=12;

    swprintf( str, (wchar_t *)"AutoDepthStencilFormat:%s "
        "BackBufferFormat:%s ",
        m_var.AutoDepthStencilFormat ? GetD3DFormatStr(m_var.AutoDepthStencilFormat) : "none",
        GetD3DFormatStr(m_var.BackBufferFormat));
	m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	iY+=12;

    swprintf( str, (wchar_t *)"MultiSampleType:%s ",
        GetMultiSampleStr(m_var.MSType));
	m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	iY+=12;

    swprintf( str, (wchar_t *)"MultiSampleFormat:%s",
        GetMultiSampleStr(m_var.MSFormat));
	m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	iY+=12;

    swprintf( str, (wchar_t *)"zenable:%d "
        "z-write:%d "
        "d3dcmpfunc:%s",
        m_var.zenable,
        m_var.zenable && m_var.zwriteenable,
        GetD3DCMPStr(m_var.d3dcmpfunc));
	m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	iY+=12;

    swprintf( str, (wchar_t *)"alpha-blend:%d "
        "alpha-test:%d "
        "swathwidth:%d ",
        m_var.alphablendenable,
        m_var.alphatestenable,
        (m_var.SwathWidth == D3DSWATH_OFF) ? -1 : (0x8 << m_var.SwathWidth));
	m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	iY+=12;

    swprintf( str, (wchar_t *)"timeflags:%s%s",
        (m_var.timeflags & TIME_Render) ? "TIME_Render " : "",
        (m_var.timeflags & TIME_Present) ? "TIME_Present" : "");
	m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
	iY+=12;

    for(int itex = 0; itex < 4; itex++)
    {
        if(m_var.rgtex[itex].type)
        {
            swprintf( str, (wchar_t *)"%d) texfmt:%s "
                "texel size (bytes):%0.1f "
                "texsize: %d",
                itex,
                GetD3DFormatStr(m_var.rgtex[itex].d3dFormat),
                BitsPerPixelOfD3DFORMAT(m_var.rgtex[itex].d3dFormat) / 8.0f,
                m_var.rgtex[itex].texsize);
			m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
			iY+=12;
        }
    }

    if(m_var.userpixelshader)
    {
        swprintf( str, (wchar_t *)"CombinerCount:%d",
            m_var.shaderdef.PSCombinerCount & 0xf);
		m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
		iY+=12;

        UINT TexModes = m_var.shaderdef.PSTextureModes;
        for(int texmode = 0; texmode < 4; texmode++, TexModes >>= 5)
        {
            if(TexModes & 0x1f)
            {
                swprintf( str, (wchar_t *)"  T%d Mode:%s",
                    texmode, GetTextureModeStr(TexModes & 0x1f));
				m_Font.DrawText(m_pBackBuffer, str, iX, iY, 0, D3DCOLOR_XRGB( 255, 255, 128 ), D3DCOLOR_XRGB( 0, 0, 0 ) );
				iY+=12;
            }
        }
    }
}

//=========================================================================
//
//=========================================================================
FLOAT CFillRate::EstimateTimeForScene()
{
    CTimer timer;
    int overdraw = min(10, m_var.overdraw);

    // update the screen
    RenderFrame(1);
    //CheckHR(m_pDevice->Present(NULL, NULL, NULL, NULL));

    // wait until everything is cleared out
    m_pDevice->BlockUntilIdle();

    // start timing
    timer.Start();

    if(m_var.timeflags & TIME_Render)
        RenderFrame(10);
    if(m_var.timeflags & TIME_Present)
    {
        //CheckHR(m_pDevice->Present(NULL, NULL, NULL, NULL));
    }

    // wait until GPU is idle again
    m_pDevice->BlockUntilIdle();

    // stop timer
    timer.Stop();

    return m_var.overdraw * timer.getTime() / overdraw;
}

//=========================================================================
// Do a timed test and spit out the results
//=========================================================================
float CFillRate::DoTimedTest(TIMETESTRESULTS *pttres)
{
    CTimer timer;
    int frames = 0;
    int visibilityindex = 0;
    float TimeTillDoneDrawing = 0;

    // wait until everything is cleared out
    m_pDevice->BlockUntilIdle();

    int numberscenes = m_var.numberscenes;

    if(!numberscenes)
    {
        // if there isn't an explicit count of scenes to render
        // guesstimate the time required for each scene
        float fEstimatedTimePerScene = EstimateTimeForScene();

        // and figure out how many scenes to render
        numberscenes = int(m_var.testtime / fEstimatedTimePerScene);
    }

    // put an upper cap and lower bound on the number of scenes
    numberscenes = max(2, min(numberscenes, 2047));

    // start timing
    timer.Start();

    // render X number of scenes
    for(frames = 0; frames < numberscenes; frames++)
    {
#ifndef NO_VIS_TEST
        CheckHR(m_pDevice->BeginVisibilityTest());
#endif

        if(m_var.timeflags & TIME_Render)
            RenderFrame(m_var.overdraw);
        if(m_var.timeflags & TIME_Present)
        {
            //CheckHR(m_pDevice->Present(NULL, NULL, NULL, NULL));
        }

#ifndef NO_VIS_TEST
        CheckHR(m_pDevice->EndVisibilityTest(visibilityindex++));
#endif
    }

    TimeTillDoneDrawing = timer.getTime();

    // wait until GPU is idle again
    m_pDevice->BlockUntilIdle();

    // stop timer
    timer.Stop();
    float TimeTillIdle = timer.getTime();

    // get count of pixels drawn
    UINT64 dwNumPixelsDrawn = 0;

#ifdef NO_VIS_TEST

    dwNumPixelsDrawn = (UINT64)m_var.screenwidth * (UINT64)m_var.screenheight *
        m_var.overdraw * frames;

#else

    for(int ivis = 0; ivis < visibilityindex; ivis++)
    {
        // Check the number of pixels drawn.
        UINT dwT;
        while(m_pDevice->GetVisibilityTestResult(ivis, &dwT, NULL) == D3DERR_TESTINCOMPLETE)
            ;

        if(m_var.verboselevel >= 2)
            dprintf("pass:%d  %ld pixels\n", ivis, dwT);

        if(dwT == 0xffffffff)
            dwT = 0;
        dwNumPixelsDrawn += dwT;
    }

#endif

    /*
     * Calculate fillrate
     */
    float fillrate = 0.0f;

    if((m_var.timeflags & TIME_Present) == TIME_Present)
    {
        // if we're just calculating present fillrate the pixels count
        // should be fairly accurate.
        fillrate = dwNumPixelsDrawn / (TimeTillIdle * 1000.0f);
    }
    else
    {
        // get backbuffer size
        D3DSURFACE_DESC Desc;
        CheckHR(m_pBackBuffer->GetDesc(&Desc));

        // The visibility counters count the number of pixels drawn to the backbuffer
        // which is larger when multisampling. So your fillrate gets skewed.
        // So scale those buggers by the backbuffer size.
        float fScale = (Desc.Width * Desc.Height) / (m_var.screenwidth * m_var.screenheight);
        fillrate = dwNumPixelsDrawn / (TimeTillIdle * 1000.0f * fScale);

        if((m_var.timeflags & TIME_Render) == TIME_Render)
        {
            // For the render case verify that the fillrate numbers match what we think
            // they should be.
            float fillrate2 = m_var.screenwidth * m_var.screenheight *
                m_var.overdraw * frames / (TimeTillIdle * 1000.0f);

            if(fabsf(fillrate - fillrate2) > 1.0f)
            {
                dprintf("*** Fillrate numbers don't add up: %.2f != %.2f\n",
                    fillrate, fillrate2);
            }
        }
    }

    if(pttres)
    {
        pttres->fillrate = fillrate;
        pttres->fps = frames * 1000 / TimeTillIdle;
        pttres->cFrames = frames;
        pttres->TimeTillDoneDrawing = TimeTillDoneDrawing;
        pttres->TimeTillIdle = TimeTillIdle;
        pttres->cNumPixelsDrawn = dwNumPixelsDrawn;
    }

    return fillrate;
}

//=========================================================================
// macros to help read entries from the ini file
//=========================================================================
/*static const char g_szOpts[] = "options";
#define get_option_val(_var)          m_inifile.GetIniInt(g_szOpts, #_var, m_var._var)
#define get_option_valf(_var)         m_inifile.GetIniFloat(g_szOpts, #_var, m_var._var)
#define get_option_val3(_s, _var, _d) m_inifile.GetIniInt(_s, _var, _d)*/



#define get_option_val(_var, _d)          GetPrivateProfileIntA(szSectionName, #_var, _d, FILLRATE_INI_PATH)
#define get_option_valc(_var, _d)          GetPrivateProfileConst((LPCTSTR)szSectionName, (LPCTSTR)#_var, _d, (LPCTSTR)FILLRATE_INI_PATH)
#define get_option_valf(_var, _d)         GetPrivateProfileFloat((LPCTSTR)szSectionName, (LPCTSTR)#_var, _d, (LPCTSTR)FILLRATE_INI_PATH)
#define get_option_val3(_s, _var, _d) GetPrivateProfileConst((LPCTSTR)_s, (LPCTSTR)_var, _d, (LPCTSTR)FILLRATE_INI_PATH)

//=========================================================================
// Read ini file and update all fr settings
//=========================================================================
BOOL CFillRate::ReadFRIniFile()
{
	CHAR szSectionName[256];

	sprintf( szSectionName, "LOOP%d", m_wLoop );

    if(m_ShaderHandle)
    {
        assert(m_pDevice);
        CheckHR(m_pDevice->SetPixelShader(0));
        CheckHR(m_pDevice->DeletePixelShader(m_ShaderHandle));
        m_ShaderHandle = 0;
    }

	ZeroMemory(&m_var, sizeof(FRSETTINGS) );

	m_var.overdraw = 100;
    m_var.verboselevel              = get_option_val(				verboselevel,			1);
    m_var.runtestonreload           = !!get_option_val(				runtestonreload,		1);

	m_var.screenwidth				= get_option_valf(				screenwidth,			640.0f);
	m_var.screenheight				= get_option_valf(				screenheight,			480.0f);
	m_var.BackBufferFormat          = (D3DFORMAT)get_option_valc(	BackBufferFormat,		D3DFMT_A8R8G8B8);
    m_var.AutoDepthStencilFormat    = (D3DFORMAT)get_option_valc(	AutoDepthStencilFormat, D3DFMT_D24S8);

    m_var.MSType                    = (D3DMULTISAMPLE_TYPE)get_option_valc(MSType,			D3DMS_NONE);
    m_var.MSFormat                  = (D3DMULTISAMPLE_TYPE)get_option_valc(MSFormat,		D3DMS_PREFILTER_FORMAT_DEFAULT);

	m_var.FVF                       = get_option_valc(				FVF,					D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1);
    m_var.quadwidth                 = get_option_valf(				quadwidth,				640);
    m_var.quadheight                = get_option_valf(				quadheight,				480);
    m_var.quadx                     = get_option_valf(				quadx,					(m_var.screenwidth - min(m_var.screenwidth, m_var.quadwidth)) / 2);
    m_var.quady                     = get_option_valf(				quady,					(m_var.screenheight - min(m_var.screenheight, m_var.quadheight)) / 2);

    m_var.zenable                   = !!get_option_val(				zenable,				FALSE);
    m_var.zwriteenable              = !!get_option_val(				zwriteenable,			FALSE);
    m_var.d3dcmpfunc                = (D3DCMPFUNC)get_option_valc(	d3dcmpfunc,				D3DCMP_NOTEQUAL);

    m_var.primez                    = !!get_option_val(				primez,					FALSE);
    m_var.primezcmpfunc             =  (D3DCMPFUNC)get_option_valc(	primezcmpfunc,			D3DCMP_ALWAYS);

	m_var.testtime                  = get_option_valf(				testtime,				10000.0f);
    m_var.numberscenes              = get_option_val(				numberscenes,			0);
    m_var.timeflags                 = get_option_valc(				timeflags,				TIME_Render);

	m_var.clearflags                = get_option_valc(				clearflags,				D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_var.zclearval                 = get_option_valf(				zclearval,				1.0f);
    m_var.sclearval                 = get_option_val(				sclearval,				0);
    m_var.cclearval                 = get_option_val(				cclearval,				D3DCOLOR_XRGB(0,0,0));

	m_var.userpixelshader           = !!get_option_val(				userpixelshader,		0x00006688);
    if ( m_var.userpixelshader )
	{
        ReadPixelShaderIni(&m_var.shaderdef);
	}

    m_var.alphablendenable          = !!get_option_val(				alphablendenable,		FALSE);
    m_var.alphatestenable           = !!get_option_val(				alphatestenable,		FALSE);
	m_var.rotatetex                 = !!get_option_val(				rotatetex,				0);

    m_var.SwathWidth                = (D3DSWATHWIDTH)get_option_valc(SwathWidth,			D3DSWATH_128);

	m_var.ColorOp					= D3DTOP_SELECTARG1;
    m_var.AlphaOp					= D3DTOP_SELECTARG1;
	
    m_var.d3dfillmode				= D3DFILL_SOLID;
    m_var.colorwriteenable          = get_option_valc(				colorwriteenable,		D3DCOLORWRITEENABLE_ALL);

    for(int itex = 0; itex < 4; itex++)
    {
        char szSect[128];
        _snprintf(szSect, sizeof(szSect), "texture%d", itex);

        m_var.rgtex[itex].type = get_option_val3(szSect, "type", TEX_None);
        m_var.rgtex[itex].texsize = get_option_val3(szSect, "texsize", 8);
        m_var.rgtex[itex].d3dFormat = (D3DFORMAT)get_option_val3(szSect, "d3dFormat", D3DFMT_DXT1);
        m_var.rgtex[itex].filtertype = (D3DTEXTUREFILTERTYPE)get_option_val3(szSect, "filtertype", D3DTEXF_LINEAR);
    }

    return true;
}

#if DBG

extern "C" { extern DWORD D3D__DeadlockTimeOutVal; }

#endif


//=========================================================================
// Initialize and create our pixel shader
//=========================================================================
void CFillRate::ReadPixelShaderIni(D3DPIXELSHADERDEF *pshaderdef)
{
    enum
    {
        SE_PSTextureModes,
        SE_PSDotMapping,
        SE_PSInputTexture,
        SE_PSCompareMode,
        SE_PSCombinerCount,
        SE_PSFinalCombinerConstant0,
        SE_PSFinalCombinerConstant1,
        SE_PSFinalCombinerInputsABCD,
        SE_PSFinalCombinerInputsEFG,
        SE_Max
    };

#define SE_ENTRY(_x) SE_##_x, #_x
    struct ShaderEntry
    {
        DWORD dwSectionID;
        LPCSTR szSectionName;
        LPCSTR rgkeys[4];
        int rgvals[4];
    } rgEntries[] =
    {
        { SE_ENTRY(PSTextureModes),             { "t0", "t1", "t2", "t3" } },
        { SE_ENTRY(PSDotMapping),               { "t0", "t1", "t2", "t3" } },
        { SE_ENTRY(PSInputTexture),             { "t2", "t3" } },
        { SE_ENTRY(PSCompareMode),              { "t0", "t1", "t2", "t3" } },
        { SE_ENTRY(PSCombinerCount),            { "count", "flags" } },
        { SE_ENTRY(PSFinalCombinerConstant0),   { "c" } },
        { SE_ENTRY(PSFinalCombinerConstant1),   { "c" } },
        { SE_ENTRY(PSFinalCombinerInputsABCD),  { "A", "B", "C", "D" } },
        { SE_ENTRY(PSFinalCombinerInputsEFG),   { "E", "F", "G", "flags" } },
    };

    enum
    {
        SSE_PSConstant0,
        SSE_PSConstant1,
        SSE_PSRGBInputs,
        SSE_PSAlphaInputs,
        SSE_PSRGBOutputs,
        SSE_PSAlphaOutputs,
        SSE_Max
    };

#define SSE_ENTRY(_x) SSE_##_x, #_x
    struct ShaderStageEntry
    {
        DWORD dwSectionID;
        LPCSTR szSectionName;
        LPCSTR rgkeys[4];
        int rgvals[4][8];
    } rgStageEntries[] =
    {
        { SSE_ENTRY(PSConstant0),       { "c" } },
        { SSE_ENTRY(PSConstant1),       { "c" } },
        { SSE_ENTRY(PSRGBInputs),       { "A", "B", "C", "D" } },
        { SSE_ENTRY(PSAlphaInputs),     { "A", "B", "C", "D" } },
        { SSE_ENTRY(PSRGBOutputs),      { "ab", "cd", "mux_sum", "flags" } },
        { SSE_ENTRY(PSAlphaOutputs),    { "ab", "cd", "mux_sum", "flags" } },
    };

    // read all the shader entries
    for(int iSE = 0; iSE < SE_Max; iSE++)
    {
        ShaderEntry *pse = &rgEntries[iSE];

        for(int ikey = 0; ikey < 4; ikey++)
        {
            if(pse->rgkeys[ikey])
            {
                int val = get_option_val3(pse->szSectionName, pse->rgkeys[ikey], -1);
                if(val != -1)
                {
                    pse->rgvals[ikey] = val;
                    if(m_var.verboselevel >= 2)
                    {
                        dprintf("%s.%s = 0x%lx\n",
                            pse->szSectionName,
                            pse->rgkeys[ikey],
                            val);
                    }
                }
            }
        }
    }

    // read all the shader stage entries
    for(int iSSE = 0; iSSE < SSE_Max; iSSE++)
    {
        char szKey[128];
        ShaderStageEntry *psse = &rgStageEntries[iSSE];

        for(int ikey = 0; ikey < 4; ikey++)
        {
            if(psse->rgkeys[ikey])
            {
                for(int istage = 0; istage < 8; istage++)
                {
                    _snprintf(szKey, sizeof(szKey), "%s%d", psse->rgkeys[ikey], istage);
                    int val = get_option_val3(psse->szSectionName, szKey, -1);
                    if(val != -1)
                    {
                        psse->rgvals[ikey][istage] = val;
                        if(m_var.verboselevel >= 2)
                        {
                            dprintf("%s.%s[%d] = 0x%lx\n",
                                psse->szSectionName,
                                psse->rgkeys[ikey],
                                istage,
                                val);
                        }
                    }
                }
            }
        }
    }

    ZeroMemory(pshaderdef, sizeof(*pshaderdef));

    /*---------------------------------------------------------------------------*/
    /*  Texture configuration - The following members of the D3DPixelShaderDef   */
    /*  structure define the addressing modes of each of the four texture stages */
    /*---------------------------------------------------------------------------*/
    pshaderdef->PSTextureModes = PS_TEXTUREMODES(
        rgEntries[SE_PSTextureModes].rgvals[0],
        rgEntries[SE_PSTextureModes].rgvals[1],
        rgEntries[SE_PSTextureModes].rgvals[2],
        rgEntries[SE_PSTextureModes].rgvals[3]);

    pshaderdef->PSDotMapping = PS_DOTMAPPING(
        rgEntries[SE_PSDotMapping].rgvals[0],
        rgEntries[SE_PSDotMapping].rgvals[1],
        rgEntries[SE_PSDotMapping].rgvals[2],
        rgEntries[SE_PSDotMapping].rgvals[3]);

    pshaderdef->PSInputTexture = PS_INPUTTEXTURE(
        rgEntries[SE_PSInputTexture].rgvals[0],
        rgEntries[SE_PSInputTexture].rgvals[1],
        rgEntries[SE_PSInputTexture].rgvals[2],  // 0 and 1 valid
        rgEntries[SE_PSInputTexture].rgvals[3]); // 0, 1, and 2 valid

    pshaderdef->PSCompareMode = PS_COMPAREMODE(
        rgEntries[SE_PSCompareMode].rgvals[0],
        rgEntries[SE_PSCompareMode].rgvals[1],
        rgEntries[SE_PSCompareMode].rgvals[2],
        rgEntries[SE_PSCompareMode].rgvals[3]);

    /*---------------------------------------------------------------------------------*/
    /*  Color combiners - The following members of the D3DPixelShaderDef structure     */
    /*  define the state for the eight stages of color combiners                       */
    /*---------------------------------------------------------------------------------*/
    pshaderdef->PSCombinerCount = PS_COMBINERCOUNT(
        rgEntries[SE_PSCombinerCount].rgvals[0],
        rgEntries[SE_PSCombinerCount].rgvals[1]);

    for(int istage = 0; istage < 8; istage++)
    {
        pshaderdef->PSConstant0[istage] = rgStageEntries[SSE_PSConstant0].rgvals[0][istage];
        pshaderdef->PSConstant1[istage] = rgStageEntries[SSE_PSConstant1].rgvals[0][istage];

        // R0_ALPHA is initialized to T0_ALPHA in stage0

        // a,b,c,d each contain a value from PS_REGISTER, PS_CHANNEL, and PS_INPUTMAPPING
        pshaderdef->PSRGBInputs[istage] = PS_COMBINERINPUTS(
            rgStageEntries[SSE_PSRGBInputs].rgvals[0][istage],      // A
            rgStageEntries[SSE_PSRGBInputs].rgvals[1][istage],      // B
            rgStageEntries[SSE_PSRGBInputs].rgvals[2][istage],      // C
            rgStageEntries[SSE_PSRGBInputs].rgvals[3][istage]);     // D

        // R0_ALPHA is initialized to T0_ALPHA in stage0
        pshaderdef->PSAlphaInputs[istage] = PS_COMBINERINPUTS(
            rgStageEntries[SSE_PSAlphaInputs].rgvals[0][istage],    // A
            rgStageEntries[SSE_PSAlphaInputs].rgvals[1][istage],    // B
            rgStageEntries[SSE_PSAlphaInputs].rgvals[2][istage],    // C
            rgStageEntries[SSE_PSAlphaInputs].rgvals[3][istage]);   // D

        // mux_sum must be DISCARD if either AB_DOT_PRODUCT or CD_DOT_PRODUCT are set
        //  ie: Dot / Dot / Discard || Dot / Mult / Discard || Mult / Dot / Discard

        // ab,cd,mux_sum contain a value from PS_REGISTER
        // flags contains values from PS_COMBINEROUTPUT
        pshaderdef->PSRGBOutputs[istage] = PS_COMBINEROUTPUTS(
            rgStageEntries[SSE_PSRGBOutputs].rgvals[0][istage],     // ab
            rgStageEntries[SSE_PSRGBOutputs].rgvals[1][istage],     // cd
            rgStageEntries[SSE_PSRGBOutputs].rgvals[2][istage],     // mux_sum
            rgStageEntries[SSE_PSRGBOutputs].rgvals[3][istage]);    // flags
        pshaderdef->PSAlphaOutputs[istage] = PS_COMBINEROUTPUTS(
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[0][istage],   // ab
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[1][istage],   // cd
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[2][istage],   // mux_sum
            rgStageEntries[SSE_PSAlphaOutputs].rgvals[3][istage]);  // flags
    }

    pshaderdef->PSFinalCombinerConstant0 = rgEntries[SE_PSFinalCombinerConstant0].rgvals[0];
    pshaderdef->PSFinalCombinerConstant1 = rgEntries[SE_PSFinalCombinerConstant1].rgvals[0];

    // FOG ALPHA is only available in final combiner
    // V1R0_SUM and EF_PROD are only available in final combiner A,B,C,D inputs
    // V1R0_SUM_ALPHA and EF_PROD_ALPHA are not available

    // AB + (1-A)C + D
    pshaderdef->PSFinalCombinerInputsABCD = PS_COMBINERINPUTS(
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[0],          // A
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[1],          // B
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[2],          // C
        rgEntries[SE_PSFinalCombinerInputsABCD].rgvals[3]);         // D

    // E,F,G contain a value from PS_REGISTER, PS_CHANNEL, and PS_INPUTMAPPING
    // flags contains values from PS_FINALCOMBINERSETTING:
    //    PS_FINALCOMBINERSETTING_CLAMP_SUM         // V1+R0 sum clamped to [0,1]
    //    PS_FINALCOMBINERSETTING_COMPLEMENT_V1     // unsigned invert mapping
    //    PS_FINALCOMBINERSETTING_COMPLEMENT_R0     // unsigned invert mapping
    pshaderdef->PSFinalCombinerInputsEFG = PS_COMBINERINPUTS(
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[0],           // E
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[1],           // F
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[2],           // G (alpha)
        rgEntries[SE_PSFinalCombinerInputsEFG].rgvals[3]);          // flags
}

#if 0
//=========================================================================
// Callback from inifile.cpp to get float string value
//=========================================================================
bool GetIniConstf(const char *szStr, int cchStr, float *pval)
{
    return false;
}

//=========================================================================
// Callback from inifile.cpp to get int string value
//=========================================================================
bool GetIniConst(const char *szStr, int cchStr, int *pval)
{
    #undef XTAG
    #define XTAG(_tag) { _tag, #_tag }
    static const struct
    {
        int Val;
        const char *szStr;
    } rgszConsts[] =
    {
        // Pixel Shaders
        XTAG(PS_TEXTUREMODES_NONE), XTAG(PS_TEXTUREMODES_PROJECT2D), XTAG(PS_TEXTUREMODES_PROJECT3D),
        XTAG(PS_TEXTUREMODES_CUBEMAP), XTAG(PS_TEXTUREMODES_PASSTHRU), XTAG(PS_TEXTUREMODES_CLIPPLANE),
        XTAG(PS_TEXTUREMODES_BUMPENVMAP), XTAG(PS_TEXTUREMODES_BUMPENVMAP_LUM), XTAG(PS_TEXTUREMODES_BRDF),
        XTAG(PS_TEXTUREMODES_DOT_ST), XTAG(PS_TEXTUREMODES_DOT_ZW), XTAG(PS_TEXTUREMODES_DOT_RFLCT_DIFF),
        XTAG(PS_TEXTUREMODES_DOT_RFLCT_SPEC), XTAG(PS_TEXTUREMODES_DOT_STR_3D), XTAG(PS_TEXTUREMODES_DOT_STR_CUBE),
        XTAG(PS_TEXTUREMODES_DPNDNT_AR), XTAG(PS_TEXTUREMODES_DPNDNT_GB), XTAG(PS_TEXTUREMODES_DOTPRODUCT),
        XTAG(PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST), XTAG(PS_COMPAREMODE_S_LT), XTAG(PS_COMPAREMODE_S_GE),
        XTAG(PS_COMPAREMODE_T_LT), XTAG(PS_COMPAREMODE_T_GE), XTAG(PS_COMPAREMODE_R_LT),
        XTAG(PS_COMPAREMODE_R_GE), XTAG(PS_COMPAREMODE_Q_LT), XTAG(PS_COMPAREMODE_Q_GE),
        XTAG(PS_COMBINERCOUNT_MUX_LSB), XTAG(PS_COMBINERCOUNT_MUX_MSB), XTAG(PS_COMBINERCOUNT_SAME_C0),
        XTAG(PS_COMBINERCOUNT_UNIQUE_C0), XTAG(PS_COMBINERCOUNT_SAME_C1), XTAG(PS_COMBINERCOUNT_UNIQUE_C1),
        XTAG(PS_INPUTMAPPING_UNSIGNED_IDENTITY), XTAG(PS_INPUTMAPPING_UNSIGNED_INVERT), XTAG(PS_INPUTMAPPING_EXPAND_NORMAL),
        XTAG(PS_INPUTMAPPING_EXPAND_NEGATE), XTAG(PS_INPUTMAPPING_HALFBIAS_NORMAL), XTAG(PS_INPUTMAPPING_HALFBIAS_NEGATE),
        XTAG(PS_INPUTMAPPING_SIGNED_IDENTITY), XTAG(PS_INPUTMAPPING_SIGNED_NEGATE), XTAG(PS_REGISTER_ZERO),
        XTAG(PS_REGISTER_DISCARD), XTAG(PS_REGISTER_C0), XTAG(PS_REGISTER_C1),
        XTAG(PS_REGISTER_FOG), XTAG(PS_REGISTER_V0), XTAG(PS_REGISTER_V1),
        XTAG(PS_REGISTER_T0), XTAG(PS_REGISTER_T1), XTAG(PS_REGISTER_T2),
        XTAG(PS_REGISTER_T3), XTAG(PS_REGISTER_R0), XTAG(PS_REGISTER_R1),
        XTAG(PS_REGISTER_V1R0_SUM), XTAG(PS_REGISTER_EF_PROD), XTAG(PS_REGISTER_ONE),
        XTAG(PS_REGISTER_NEGATIVE_ONE), XTAG(PS_REGISTER_ONE_HALF), XTAG(PS_REGISTER_NEGATIVE_ONE_HALF),
        XTAG(PS_CHANNEL_RGB), XTAG(PS_CHANNEL_BLUE), XTAG(PS_CHANNEL_ALPHA),
        XTAG(PS_FINALCOMBINERSETTING_CLAMP_SUM), XTAG(PS_FINALCOMBINERSETTING_COMPLEMENT_V1), XTAG(PS_FINALCOMBINERSETTING_COMPLEMENT_R0),
        XTAG(PS_COMBINEROUTPUT_IDENTITY), XTAG(PS_COMBINEROUTPUT_BIAS), XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_1),
        XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_1_BIAS), XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_2), XTAG(PS_COMBINEROUTPUT_SHIFTRIGHT_1),
        XTAG(PS_COMBINEROUTPUT_AB_BLUE_TO_ALPHA), XTAG(PS_COMBINEROUTPUT_CD_BLUE_TO_ALPHA), XTAG(PS_COMBINEROUTPUT_AB_MULTIPLY),
        XTAG(PS_COMBINEROUTPUT_AB_DOT_PRODUCT), XTAG(PS_COMBINEROUTPUT_CD_MULTIPLY), XTAG(PS_COMBINEROUTPUT_CD_DOT_PRODUCT),
        XTAG(PS_COMBINEROUTPUT_AB_CD_SUM), XTAG(PS_COMBINEROUTPUT_AB_CD_MUX),
        XTAG(PS_DOTMAPPING_ZERO_TO_ONE), XTAG(PS_DOTMAPPING_MINUS1_TO_1_D3D), XTAG(PS_DOTMAPPING_MINUS1_TO_1_GL),
        XTAG(PS_DOTMAPPING_MINUS1_TO_1), XTAG(PS_DOTMAPPING_HILO_1), XTAG(PS_DOTMAPPING_HILO_HEMISPHERE_D3D), XTAG(PS_DOTMAPPING_HILO_HEMISPHERE_GL),
        XTAG(PS_DOTMAPPING_HILO_HEMISPHERE),

        // D3DFORMATs
        XTAG(D3DFMT_A8R8G8B8), XTAG(D3DFMT_X8R8G8B8), XTAG(D3DFMT_R5G6B5), XTAG(D3DFMT_R6G5B5),
        XTAG(D3DFMT_X1R5G5B5), XTAG(D3DFMT_A1R5G5B5), XTAG(D3DFMT_A4R4G4B4), XTAG(D3DFMT_A8),
        XTAG(D3DFMT_A8B8G8R8), XTAG(D3DFMT_B8G8R8A8), XTAG(D3DFMT_R4G4B4A4), XTAG(D3DFMT_R5G5B5A1),
        XTAG(D3DFMT_R8G8B8A8), XTAG(D3DFMT_R8B8), XTAG(D3DFMT_G8B8), XTAG(D3DFMT_P8),
        XTAG(D3DFMT_L8), XTAG(D3DFMT_A8L8), XTAG(D3DFMT_AL8), XTAG(D3DFMT_L16),
        XTAG(D3DFMT_V8U8), XTAG(D3DFMT_L6V5U5), XTAG(D3DFMT_X8L8V8U8), XTAG(D3DFMT_Q8W8V8U8),
        XTAG(D3DFMT_V16U16), XTAG(D3DFMT_D16_LOCKABLE), XTAG(D3DFMT_D16), XTAG(D3DFMT_D24S8),
        XTAG(D3DFMT_F16), XTAG(D3DFMT_F24S8), XTAG(D3DFMT_UYVY), XTAG(D3DFMT_YUY2),
        XTAG(D3DFMT_DXT1), XTAG(D3DFMT_DXT2), XTAG(D3DFMT_DXT3), XTAG(D3DFMT_DXT4),
        XTAG(D3DFMT_DXT5), XTAG(D3DFMT_LIN_A1R5G5B5), XTAG(D3DFMT_LIN_A4R4G4B4), XTAG(D3DFMT_LIN_A8),
        XTAG(D3DFMT_LIN_A8B8G8R8), XTAG(D3DFMT_LIN_A8R8G8B8), XTAG(D3DFMT_LIN_B8G8R8A8), XTAG(D3DFMT_LIN_G8B8),
        XTAG(D3DFMT_LIN_R4G4B4A4), XTAG(D3DFMT_LIN_R5G5B5A1), XTAG(D3DFMT_LIN_R5G6B5), XTAG(D3DFMT_LIN_R6G5B5),
        XTAG(D3DFMT_LIN_R8B8), XTAG(D3DFMT_LIN_R8G8B8A8), XTAG(D3DFMT_LIN_X1R5G5B5), XTAG(D3DFMT_LIN_X8R8G8B8),
        XTAG(D3DFMT_LIN_A8L8), XTAG(D3DFMT_LIN_AL8), XTAG(D3DFMT_LIN_L16), XTAG(D3DFMT_LIN_L8),
        XTAG(D3DFMT_LIN_D24S8), XTAG(D3DFMT_LIN_F24S8), XTAG(D3DFMT_LIN_D16), XTAG(D3DFMT_LIN_F16),

        XTAG(D3DMULTISAMPLE_NONE), XTAG(D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8),

        XTAG(D3DMS_NONE), XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMS_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMS_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMS_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMS_PREFILTER_FORMAT_A8R8G8B8),

        XTAG(D3DCLEAR_TARGET), XTAG(D3DCLEAR_ZBUFFER), XTAG(D3DCLEAR_STENCIL),

        // FVFs
        XTAG(D3DFVF_XYZ), XTAG(D3DFVF_XYZRHW), XTAG(D3DFVF_NORMAL), XTAG(D3DFVF_DIFFUSE),
        XTAG(D3DFVF_SPECULAR), XTAG(D3DFVF_TEX0), XTAG(D3DFVF_TEX1), XTAG(D3DFVF_TEX2),
        XTAG(D3DFVF_TEX3), XTAG(D3DFVF_TEX4),

        // textcoord sizes
        XTAG(T0_SIZE1), XTAG(T0_SIZE2), XTAG(T0_SIZE3), XTAG(T0_SIZE4),
        XTAG(T1_SIZE1), XTAG(T1_SIZE2), XTAG(T1_SIZE3), XTAG(T1_SIZE4),
        XTAG(T2_SIZE1), XTAG(T2_SIZE2), XTAG(T2_SIZE3), XTAG(T2_SIZE4),
        XTAG(T3_SIZE1), XTAG(T3_SIZE2), XTAG(T3_SIZE3), XTAG(T3_SIZE4),

        // D3DCMPs
        XTAG(D3DCMP_NEVER), XTAG(D3DCMP_LESS), XTAG(D3DCMP_EQUAL), XTAG(D3DCMP_LESSEQUAL),
        XTAG(D3DCMP_GREATER), XTAG(D3DCMP_NOTEQUAL), XTAG(D3DCMP_GREATEREQUAL), XTAG(D3DCMP_ALWAYS),

        XTAG(D3DTEXF_NONE), XTAG(D3DTEXF_POINT), XTAG(D3DTEXF_LINEAR), XTAG(D3DTEXF_ANISOTROPIC),
        XTAG(D3DTEXF_QUINCUNX), XTAG(D3DTEXF_GAUSSIANCUBIC),

        XTAG(TEX_None), XTAG(TEX_2d), XTAG(TEX_Cubemap), XTAG(TEX_Volume),

        XTAG(TIME_Present), XTAG(TIME_Render),

        // swaths
        XTAG(D3DSWATH_8), XTAG(D3DSWATH_16), XTAG(D3DSWATH_32),
        XTAG(D3DSWATH_64), XTAG(D3DSWATH_128), XTAG(D3DSWATH_OFF),

        XTAG(D3DCOLORWRITEENABLE_RED), XTAG(D3DCOLORWRITEENABLE_GREEN), XTAG(D3DCOLORWRITEENABLE_BLUE),
        XTAG(D3DCOLORWRITEENABLE_ALPHA), XTAG(D3DCOLORWRITEENABLE_ALL),

        // misc
        XTAG(FALSE), XTAG(TRUE)
    };

    for(int ifmt = 0; ifmt < ARRAYSIZE(rgszConsts); ifmt++)
    {
        if(!_strnicmp(rgszConsts[ifmt].szStr, szStr, cchStr))
        {
            // set val
            *pval = rgszConsts[ifmt].Val;
            return true;
        }
    }

    return false;
}
#endif 0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\bitfont.cpp ===
//-----------------------------------------------------------------------------
// FILE: BITFONT.CPP
//
// Desc: bit font rasterizer
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#include "bitfont.h"
#include <stdio.h>
#include <assert.h>
#include <D3DX8Math.h>
#ifdef XBOX
#include <xgraphics.h>
#endif
DWORD dwColorFromD3DXColor(D3DFORMAT dwSurfaceFormat, D3DCOLOR color);

// default font: 'Small Fonts' size 7
static const DWORD rgSmallFont[] =
{
    0x30304246, 0x0000000b, 0x00000060, 0x00000002,
    0x000b0200, 0x16040000, 0x06000000, 0x00000021,
    0x00002c06, 0x00370700, 0x42060000, 0x02000000,
    0x0000004d, 0x00005803, 0x00630300, 0x6e030000,
    0x04000000, 0x00000079, 0x00008402, 0x008f0300,
    0x9a020000, 0x03000000, 0x000000a5, 0x0000b005,
    0x00bb0300, 0xc6050000, 0x05000000, 0x000000d1,
    0x0000dc05, 0x00e70500, 0xf2050000, 0x05000000,
    0x000000fd, 0x00010805, 0x01130500, 0x1e020000,
    0x02000001, 0x00000129, 0x00013405, 0x013f0500,
    0x4a050000, 0x05000001, 0x00000155, 0x00016009,
    0x01760700, 0x81070000, 0x07000001, 0x0000018c,
    0x00019707, 0x01a20600, 0xad060000, 0x07000001,
    0x000001b8, 0x0001c307, 0x01ce0200, 0xd9050000,
    0x06000001, 0x000001e4, 0x0001ef05, 0x01fa0900,
    0x10070000, 0x07000002, 0x0000021b, 0x00022607,
    0x02310700, 0x3c070000, 0x06000002, 0x00000247,
    0x00025206, 0x025d0600, 0x68060000, 0x08000002,
    0x00000273, 0x00027e06, 0x02890600, 0x94060000,
    0x03000002, 0x0000029f, 0x0002aa03, 0x02b50300,
    0xc0040000, 0x05000002, 0x000002cb, 0x0002d603,
    0x02e10500, 0xec050000, 0x05000002, 0x000002f7,
    0x00030205, 0x030d0500, 0x18030000, 0x05000003,
    0x00000323, 0x00032e05, 0x03390200, 0x44020000,
    0x05000003, 0x0000034f, 0x00035a02, 0x03650800,
    0x70050000, 0x06000003, 0x0000037b, 0x00038605,
    0x03910500, 0x9c030000, 0x05000003, 0x000003a7,
    0x0003b203, 0x03bd0500, 0xc8050000, 0x06000003,
    0x000003d3, 0x0003de04, 0x03e90400, 0xf4040000,
    0x03000003, 0x000003ff, 0x00040a02, 0x04150300,
    0x20050000, 0x02000004, 0x0000042b, 0xc0c0c0c0,
    0xc0c0c0c0, 0xc0c0c0c0, 0x808080c0, 0x80c08080,
    0xf0f0c0c0, 0xf0f0a0a0, 0xf0f0f0f0, 0xd4fcfcf0,
    0x80d480d4, 0xfcfcd4d4, 0xc4ecfcfc, 0xa8e4cca8,
    0xfefcecc4, 0x9a9cfefe, 0xb8d8eef6, 0xfefefefe,
    0xaadeacde, 0xfec8b4b6, 0x9efefefe, 0xf6eadeac,
    0xfefec8f4, 0xacdefefe, 0xb4b6aabe, 0xfedebea8,
    0xdeccbefe, 0xc8d4d6ca, 0xfefebede, 0xeafe8c9e,
    0xfee8f4f6, 0xfefefefe, 0x86dafefc, 0xfefef8d4,
    0xfcfefefe, 0xd4c6dafe, 0xfefebeb8, 0xfefcfefe,
    0xf8f486fa, 0xfefefefe, 0xfafefcfe, 0xfeb8f4c6,
    0xdefefefe, 0xa69adedc, 0xfefeb8b4, 0xb4cefefe,
    0xb4b6b2b6, 0xfefefec8, 0xd694cefe, 0xc8d4d6d2,
    0xfefefefe, 0xeaf6b4ce, 0xfe80bcde, 0xcefefefe,
    0xf6eaf6b4, 0xfefec8b4, 0xcceefefe, 0xec86aace,
    0xfefefee8, 0x8ebc86fe, 0xc8b4f6b2, 0xfefefefe,
    0x8abeb4ce, 0xfec8b4b6, 0x86fefefe, 0xdeeaeef4,
    0xfefed8dc, 0xb4cefefe, 0xb4b6cab6, 0xfefefec8,
    0xb6b4cefe, 0xc8b4f6c2, 0xfefefefe, 0x82f6f4ce,
    0xfe88f4f6, 0xcefefefe, 0xf682f6f4, 0xfebe88f4,
    0xfcfefefe, 0xdcbedaee, 0xfefefee8, 0xfefcfefe,
    0xf88cfe8a, 0xfefefefe, 0xdabefcfe, 0xfeb8dcee,
    0xcefefefe, 0xdeeaf6b4, 0xfefed8fc, 0x80ff80ff,
    0x80de80e1, 0x00ab00b3, 0x80b400ab, 0x80e180df,
    0xffff80ff, 0xdbdbe6e7, 0xffbdbcc3, 0x83ffffff,
    0xbd83bdbc, 0xffff83bc, 0xbcc3ffff, 0xbcbfbfbf,
    0xffffffc3, 0xbdbc83ff, 0x83bcbdbd, 0xffffffff,
    0x85bdbc83, 0xff83bcbd, 0x83ffffff, 0xbd85bdbc,
    0xffffbfbc, 0xbcc3ffff, 0xb8bdb1bf, 0xffffffc5,
    0xbdbcbdff, 0xbdbcbd81, 0xffffffff, 0x81bdbcbd,
    0xffbdbcbd, 0xf5ffffff, 0xb5f1f5f4, 0xffffcdb4,
    0xb4b9ffff, 0xb4ad9dad, 0xffffffb9, 0xbdbcb9ff,
    0x81bcbdbd, 0x80ffffff, 0x009e80ff, 0x00ad009e,
    0x00b300ad, 0x00bf00b3, 0x80ff80ff, 0x9c9cffff,
    0xb5b5adad, 0xffffffb9, 0xbdbcc2ff, 0xc3bdbdbd,
    0xffffffff, 0x83bdbc82, 0xffbfbfbf, 0xc2ffffff,
    0xb5bdbdbc, 0xfffdc3b9, 0xbc82ffff, 0xbdbd83bd,
    0xffffffbd, 0xbdb8c6ff, 0xc5b9f9c7, 0xffffffff,
    0xefedec82, 0xffededed, 0xbaffffff, 0xb9bbb9b8,
    0xffffc5b9, 0xb8baffff, 0xedd5d7d5, 0xffffffed,
    0xddbebeff, 0xebebd5d5, 0xffffffff, 0xedd5baba,
    0xffbbbbd5, 0xbaffffff, 0xededd5ba, 0xffffefef,
    0xfa82ffff, 0xbfddedf5, 0xffffff83, 0xb5ba82ff,
    0xa3bfbdad, 0xffff9fbf, 0xadb5bae2, 0xffc3df9d,
    0x82ffffff, 0xddcdd5da, 0x9fdfc3df, 0xaad2ffff,
    0xfffdfdf5, 0xfffffff3, 0xfdfafaff, 0xfbfffdfd,
    0xffff07ff, 0xfdfddaba, 0xfffbfffd, 0xfaffffe7,
    0xc5f5cdfa, 0xffffc3b7, 0xbabaffff, 0xb7b5b58d,
    0xffffff8b, 0xcdfafaff, 0xcbb7bdb5, 0xffffffff,
    0xb5c5f2f2, 0xffc3b7b5, 0xfaffffff, 0x85b5cdfa,
    0xffffcbbf, 0xbadaffff, 0xbfa595ad, 0xffffffab,
    0xc5fafaff, 0xc3b7b5b5, 0xffff8ff7, 0x95adbaba,
    0xffb3b7b5, 0xbaffffff, 0xb595adfa, 0xffffb3b7,
    0xfabaffff, 0xb7b595ad, 0xffbfbfb3, 0xadbabaff,
    0xb3af9d9d, 0xffffffff, 0x9dadbaba, 0xffb3af9d,
    0xffffffff, 0xb6b681ff, 0xffffb6b6, 0xffffffff,
    0xb6b6b689, 0xffffffb6, 0xc5ffffff, 0xc6bababa,
    0xffffffff, 0xb28dffff, 0xbf8eb2b2, 0xffffffbf,
    0xb2b2c5ff, 0xf7f7c6b2, 0xffffffff, 0xb2b2b285,
    0xfff7f7a6, 0xc5ffffff, 0x8ef2caba, 0xffffffff,
    0xba85bfff, 0xffceb2aa, 0xffffffff, 0xb2b2b5ff,
    0xffffc6b2, 0xffffffff, 0xcab2b2b5, 0xffffffce,
    0xb9ffffff, 0xd6d6aaaa, 0xffffffff, 0xaaa9ffff,
    0xffa6a6da, 0xffffffff, 0xaaaaa9ff, 0x9fefc6a6,
    0xffffffff, 0xb6daea89, 0xffffff86, 0xc9dfdfff,
    0xc6d69aca, 0xffffdfdf, 0x8a899fdf, 0x9f86969a,
    0xbfffffdf, 0xdaaaa9bf, 0xbfbfa6b6, 0xd7ffffff,
    0xfefafaa9, 0xfffffffe, 0xa997ffff, 0xbebebaba,
    0x0000ffbf, 0x0006fe21, 0x0fffff9d, 0x00000002,
};

//----------------------------------------------------------------------------
BitFont::BitFont()
{
    // start out with our default font
    m_pBitFontInfo = (BitFontInfo *)rgSmallFont;
}

//----------------------------------------------------------------------------
BitFont::~BitFont()
{
    if(m_pBitFontInfo != (BitFontInfo *)rgSmallFont)
        delete m_pBitFontInfo;
}

#if 0

//----------------------------------------------------------------------------
// Intialize a BitFont from a specified filename
bool BitFont::Load(const WCHAR* filename)
{
	bool retval = false;
	BitFontInfo *pBitFontInfo = NULL;

	HANDLE hFile = CreateFile(filename, 
		                      GENERIC_READ, 
							  FILE_SHARE_READ, 
							  NULL, 
							  OPEN_EXISTING, 
							  FILE_ATTRIBUTE_NORMAL, 
							  NULL);


    if (hFile == INVALID_HANDLE_VALUE)
    {
		goto err;
	}

    // Get the file size.
	BY_HANDLE_FILE_INFORMATION info;

	if (!GetFileInformationByHandle(hFile, &info))
	{
		goto err;
	}

    // need at least a BITFONT and one BITFONTINFO, but the
	// file can be too big as well.
	//
	if (info.nFileSizeLow < sizeof(BitFontInfo) + sizeof(BitFontCharInfo)
		|| info.nFileSizeHigh != 0)
	{
		goto err;
	}

	// Allocate the BITFONT.
	pBitFontInfo = (BitFontInfo *)new BYTE[info.nFileSizeLow];

	if (!pBitFontInfo)
	{
		goto err;
	}

	// Load it.
	if (!ReadFile(hFile, pBitFontInfo, info.nFileSizeLow, NULL, NULL))
	{
		goto err;
	}

    // if the sig doesn't match or we don't have any bitfontinfos then bail
    if (pBitFontInfo->dwSig != BITFONT_SIG || !pBitFontInfo->cBfis)
	{
        goto err;
	}

	// Delete any old fonts.
    if(m_pBitFontInfo != (BitFontInfo *)rgSmallFont)
	{
		delete m_pBitFontInfo;
	}

	// Set the new.
	m_pBitFontInfo = pBitFontInfo;
	pBitFontInfo = NULL;

	retval = true;

err:
	if (pBitFontInfo)
	{
		delete pBitFontInfo;
	}

    if (hFile != INVALID_HANDLE_VALUE)
	{
        CloseHandle(hFile);
	}

    return retval;
}

#endif 0

//----------------------------------------------------------------------------
// Returns pixel height and width of string
void BitFont::GetTextStringLength(DWORD *pdwWidth, DWORD *pdwHeight, const WCHAR *str)
{
    if(pdwHeight)
        *pdwHeight = m_pBitFontInfo->dwFontHeight;

    if(pdwWidth)
    {
        DWORD dwWidth = 0;

        // go through the string adding up the widths
        for(const WCHAR *sz = str; *sz; sz++)
        {
            DWORD iBfi = *sz - 32;

            if(iBfi >= m_pBitFontInfo->cBfis)
                iBfi = 0;

            dwWidth += m_pBitFontInfo->rgBfi[iBfi].bWidth;
        }

        *pdwWidth = dwWidth;
    }
}

//----------------------------------------------------------------------------
void DrawText16
(
    D3DSURFACE_DESC*    pDesc,
    D3DLOCKED_RECT*     pLock,
    BitFontInfo*        m_pBitFontInfo,
    const WCHAR*        str,
    int                 iX,
    int                 iY,
    DWORD               dwFlags,
    DWORD               dwcolFore,
    DWORD               dwcolBack
)
{
    bool fdrawBkgnd = !(dwFlags & DRAWTEXT_TRANSPARENTBKGND);

    // rgColor[0] is background color
    WORD rgColor[2] = { LOWORD(dwcolBack), LOWORD(dwcolFore) };

    // pointer to font bytestream data
    BYTE *lpData = (BYTE *)&m_pBitFontInfo->rgBfi[m_pBitFontInfo->cBfis];
    // pointer to end of dest surface
    WORD *pwSurfaceMaxY = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * pDesc->Height);

    // go through the string
    for(const WCHAR *sz = str; *sz; sz++)
    {
        DWORD iBfi = *sz - 32;

        if(iBfi >= m_pBitFontInfo->cBfis)
            iBfi = 0;

        // get data for this char
        BitFontCharInfo *pbfi = &m_pBitFontInfo->rgBfi[iBfi];
        BYTE *lpBits = &lpData[pbfi->dwOffset];

        // where we're drawing
        WORD *pwSurface = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + iX;
        // max x for the line we're on
        WORD *pwSurfaceMaxX = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + pDesc->Width;

        // go through bitfont drawing each line
        for(DWORD y = 0; y < m_pBitFontInfo->dwFontHeight; y++)
        {
            DWORD dwWidth = pbfi->bWidth;

            while(dwWidth)
            {
                DWORD dwByte = *lpBits++;
                DWORD dwNumBits = min(dwWidth, 8);

                dwWidth -= dwNumBits;

                // check number of bits and clipping
                while(dwNumBits-- && (pwSurface < pwSurfaceMaxX))
                {
                    DWORD iIndex = !(dwByte & 0x80);

                    if(fdrawBkgnd || iIndex)
                        *pwSurface = rgColor[iIndex];

                    pwSurface++;
                    dwByte <<= 1;
                }
            }

            // get next line data
            pwSurface = (WORD *)((BYTE *)(pwSurface - pbfi->bWidth - dwWidth) + pLock->Pitch);
            pwSurfaceMaxX = (WORD *)((BYTE *)pwSurfaceMaxX + pLock->Pitch);

            // check clipping
            if(pwSurface >= pwSurfaceMaxY)
                break;
        }

        // move to next char position
        iX += pbfi->bWidth;
    }
}

//----------------------------------------------------------------------------
void DrawText32
(
    D3DSURFACE_DESC*    pDesc,
    D3DLOCKED_RECT*     pLock,
    BitFontInfo*        m_pBitFontInfo,
    const WCHAR*        str,
    int                 iX,
    int                 iY,
    DWORD               dwFlags,
    DWORD               dwcolFore,
    DWORD               dwcolBack
)
{
    bool fdrawBkgnd = !(dwFlags & DRAWTEXT_TRANSPARENTBKGND);
    DWORD rgColor[2] = { dwcolBack, dwcolFore };

    BYTE *lpData = (BYTE *)&m_pBitFontInfo->rgBfi[m_pBitFontInfo->cBfis];
    DWORD *pdwSurfaceMaxY = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * pDesc->Height);

    for(const WCHAR *sz = str; *sz; sz++)
    {
        DWORD iBfi = *sz - 32;

        if(iBfi >= m_pBitFontInfo->cBfis)
            iBfi = 0;

        BitFontCharInfo *pbfi = &m_pBitFontInfo->rgBfi[iBfi];
        BYTE *lpBits = &lpData[pbfi->dwOffset];

        DWORD *pdwSurface = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + iX;
        DWORD *pdwSurfaceMaxX = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + pDesc->Width;

        for(DWORD y = 0; y < m_pBitFontInfo->dwFontHeight; y++)
        {
            DWORD dwWidth = pbfi->bWidth;

            while(dwWidth)
            {
                DWORD dwByte = *lpBits++;
                DWORD dwNumBits = min(dwWidth, 8);

                dwWidth -= dwNumBits;

                while(dwNumBits-- && (pdwSurface < pdwSurfaceMaxX))
                {
                    DWORD iIndex = !(dwByte & 0x80);

                    if(fdrawBkgnd || iIndex)
                        *pdwSurface = rgColor[iIndex];

                    pdwSurface++;
                    dwByte <<= 1;
                }
            }

            pdwSurface = (DWORD *)((BYTE *)(pdwSurface - pbfi->bWidth - dwWidth) + pLock->Pitch);
            pdwSurfaceMaxX = (DWORD *)((BYTE *)pdwSurfaceMaxX + pLock->Pitch);
            if(pdwSurface >= pdwSurfaceMaxY)
                break;
        }

        iX += pbfi->bWidth;
    }
}

//----------------------------------------------------------------------------
// Draw the specified text to a surface
void BitFont::DrawText
(
    IDirect3DSurface8 *pSurface,
    const WCHAR*    str,
    int             iX,
    int             iY,
    DWORD           dwFlags,
    D3DCOLOR        colFore,
    D3DCOLOR        colBack
)
{
    typedef void (*PFNDRAWTEXT)(
        D3DSURFACE_DESC*    pDesc,
        D3DLOCKED_RECT*     pLock,
        BitFontInfo*        m_pBitFontInfo,
        const WCHAR*        str,
        int                 iX,
        int                 iY,
        DWORD               dwFlags,
        DWORD               dwcolFore,
        DWORD               dwcolBack
    );

    PFNDRAWTEXT rgpfnDrawText[] =
    {
        DrawText16,
        DrawText32
    };
    D3DLOCKED_RECT lockRect;
    D3DSURFACE_DESC desc;
    (void)pSurface->GetDesc(&desc);

    if(pSurface->LockRect(&lockRect, NULL, D3DLOCK_TILED) != S_OK)
    {
        assert(FALSE);
        return;
    }

    UINT BitsPerPixel =

#ifdef XBOX
        (desc.Format == D3DFMT_X8R8G8B8 
          || desc.Format == D3DFMT_A8R8G8B8
          || desc.Format == D3DFMT_LIN_X8R8G8B8
          || desc.Format == D3DFMT_LIN_A8R8G8B8) ? 32 : 16;
#else
        (desc.Format == D3DFMT_X8R8G8B8 
          || desc.Format == D3DFMT_A8R8G8B8) ? 32 : 16;
#endif

    // use the correct draw routine for the job
    rgpfnDrawText[BitsPerPixel == 32](
        &desc,
        &lockRect,
        m_pBitFontInfo,
        str,
        iX,
        iY,
        dwFlags,
        dwColorFromD3DXColor(desc.Format, colFore),
        dwColorFromD3DXColor(desc.Format, colBack)
    );
    // Relase the lock on the surface
    pSurface->UnlockRect();
}

//----------------------------------------------------------------------------
// Given a surfaceformet and color, return the dude as a native pixel
DWORD dwColorFromD3DXColor(D3DFORMAT dwSurfaceFormat, D3DCOLOR color)
{
    DWORD dwColor;
    D3DXCOLOR col(color);

    switch(dwSurfaceFormat)
    {
    // 32-bit
    case D3DFMT_A8R8G8B8:
#ifdef XBOX
    case D3DFMT_LIN_A8R8G8B8:
#endif
        dwColor =
            (((long)(col.a * 255)) << 24) |
            (((long)(col.r * 255)) << 16) |
            (((long)(col.g * 255)) << 8) |
            (long)(col.b * 255);
        break;

    // 32-bit
    case D3DFMT_X8R8G8B8:
#ifdef XBOX
    case D3DFMT_LIN_X8R8G8B8:
#endif
        dwColor =
            0xff000000L |
            (((long)(col.r * 255)) << 16) |
            (((long)(col.g * 255)) << 8) |
            (long)(col.b * 255);
        break;

    // 16-bit
    case D3DFMT_R5G6B5:
#ifdef XBOX
    case D3DFMT_LIN_R5G6B5:
#endif
        dwColor =
            (((long)(col.r * 255)) << 11) |
            (((long)(col.g * 255)) << 5) |
            (long)(col.b * 255);
        break;
    case D3DFMT_X1R5G5B5:
#ifdef XBOX
    case D3DFMT_LIN_X1R5G5B5:
#endif
        dwColor =
            (1 << 15) |
            (((long)(col.r * 255)) << 10) |
            (((long)(col.g * 255)) << 5) |
            (long)(col.b * 255);
        break;
    case D3DFMT_A4R4G4B4:
#ifdef XBOX
    case D3DFMT_LIN_A4R4G4B4:
#endif
        dwColor =
            (((long)(col.a * 15)) << 12) |
            (((long)(col.r * 15)) << 8) |
            (((long)(col.g * 15)) << 4) |
            (long)(col.b * 15);
        break;
    case D3DFMT_A1R5G5B5:
#ifdef XBOX
    case D3DFMT_LIN_A1R5G5B5:
#endif
        dwColor =
            (((long)(col.a > .9f)) << 15) |
            (((long)(col.r * 31)) << 10) |
            (((long)(col.g * 31)) << 5) |
            (long)(col.b * 31);
        break;

    default:
        dwColor = 0;
        assert(FALSE);
        break;
    }
    return dwColor;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\framework.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 2000 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       framework.cpp
 *  Content:    framework tests
 *  History:
 *   Date       By       Reason
 *   ====       ==       ======
 *  04/22/01    jeffsul Created to test Xbox performance with framework
 *
 ****************************************************************************/

#include "framework.h"

#include "Benmark5.h"
#include "Fillrate.h"
#include "FSAA.h"
//#include "Perf.h"

/****************************************************************************
 *
 * The Global Logging Handle
 *
 ****************************************************************************/

extern HANDLE g_hLog;

/****************************************************************************
 *
 *  framework_BasicTest
 *
 *  Description:
 *      Basic Test for framework
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      S_OK on success
 *      E_XX on failure
 *
 ****************************************************************************/

HRESULT framework_BasicTest( void )
{
    HRESULT             hr              =	S_OK;

	BOOL				bRunBenMark, 
						bRunFillRate, 
						bRunFsaa;

	bRunBenMark			=	GetPrivateProfileIntA( FRAMEWORK_APP_NAME, "RunBenMark",	FALSE, FRAMEWORK_INI_PATH );
	bRunFillRate		=	GetPrivateProfileIntA( FRAMEWORK_APP_NAME, "RunFillRate",	FALSE, FRAMEWORK_INI_PATH );
	bRunFsaa			=	GetPrivateProfileIntA( FRAMEWORK_APP_NAME, "RunFsaa",		FALSE, FRAMEWORK_INI_PATH );
	//bRunPerf			=	GetPrivateProfileIntA( FRAMEWORK_APP_NAME, "RunPerf",		FALSE, FRAMEWORK_INI_PATH );

	if ( bRunBenMark )
	{
		CBenMark BenMark;
		BenMark.Run();
	}

	if ( bRunFsaa )
	{
		CFsaa Fsaa;
		Fsaa.Run();
	}

	/*if ( bRunPerf )
	{
		CPerf Perf;
		Perf.Run();
	}*/

	if ( bRunFillRate )
	{
		CFillRate FillRate;
		FillRate.Run();
	}

	XLaunchNewImage( NULL, NULL );

    //
    // Return the Hresult
    //

    return hr;
}

/****************************************************************************
 *
 *  framework_StartTest
 *
 *  Description:
 *      The Harness Entry into the framework tests
 *
 *  Arguments:
 *      LogHandle - a handle to a logging object
 *
 *  Returns:  
 *		(void)
 *
 ****************************************************************************/

VOID WINAPI framework_StartTest( HANDLE LogHandle )
{
    HRESULT             hr              = S_OK;

    //
    // the following tests will Assert (by design) in debug builds
    // to turn these tests on (they are off by default) define
    // CODE_COVERAGE when this file is compiled
    //

#ifdef CODE_COVERAGE

#endif // CODE_COVERAGE

    //
    // Test framework in the mannor it was meant to be called
    //

    SETLOG( LogHandle, "jeffsul", "MCPX", "framework", "Basic" );
    EXECUTE( framework_BasicTest() );

}

/****************************************************************************
 *
 *  framework_EndTest
 *
 *  Description:
 *      The Exit function for the test harness
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *		(void)
 *
 ****************************************************************************/

VOID WINAPI framework_EndTest( VOID )
{
}

/****************************************************************************
 *
 *  main
 *
 *  Description:
 *      the exe entry point
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ****************************************************************************/

#ifdef NOLOGGING
void __cdecl main( void )
{
    framework_StartTest( NULL );
    framework_EndTest();
}
#endif // NOLOGGING

/****************************************************************************
 *
 * Export Function Pointers for StartTest and EndTest
 *
 ****************************************************************************/

#pragma data_seg( EXPORT_SECTION_NAME )
DECLARE_EXPORT_DIRECTORY( framework )
#pragma data_seg()

BEGIN_EXPORT_TABLE( framework )
    EXPORT_TABLE_ENTRY( "StartTest", framework_StartTest )
    EXPORT_TABLE_ENTRY( "EndTest", framework_EndTest )
END_EXPORT_TABLE( framework )
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\framework.h ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

	framework.h

Abstract:

	framework utility interface - Created to test Xbox performance with framework

Author:

	Jeff Sullivan (jeffsul) 27-Jun-2001

Revision History:

	27-Jun-2001 jeffsul
		Initial Version

--*/

#pragma once

#include <xtl.h>
#include <xdbg.h>
#include <xtestlib.h>
#include <xlog.h>
#include <macros.h>

#define FRAMEWORK_INI_PATH "D:\\framework.ini"
#define FRAMEWORK_APP_NAME "FRAMEWORK"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Fillrate.h ===
//-----------------------------------------------------------------------------
// FILE: FILLRATE.H
//
// Desc: fillrate header
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#ifndef _FILL_RATE_H_
#define _FILL_RATE_H_
	
#include "Test.h"

#include "utils.h"
//#include "inifile.h"
#include "Bitfont.h"

#define FILLRATE_INI_PATH "D:\\fillrate.ini"
#define FILLRATE_NUM_TEXTURES 4
#define FILLRATE_NUM_TESTS 4

enum { TEX_None, TEX_2d, TEX_Cubemap, TEX_Volume, TEX_Max };
enum { TIME_Present = 0x1, TIME_Render = 0x2 };

struct TIMETESTRESULTS
{
    float   fillrate;
    float   fps;
    int     cFrames;
    float   TimeTillDoneDrawing;
    float   TimeTillIdle;
    UINT64  cNumPixelsDrawn;
};

struct FRSETTINGS
{
    UINT					overdraw;				// number of overdraws in a scene
    UINT					verboselevel;			// chatty when loading pixelshader defs, etc.
    UINT					runtestonreload;		// after reloading fillrate.ini run test

    FLOAT					screenwidth;			// screen width
    FLOAT					screenheight;			// screen height
    D3DFORMAT				BackBufferFormat;       // back buffer d3dformat
    D3DFORMAT				AutoDepthStencilFormat; // z buffer format (0 for none)

    D3DMULTISAMPLE_TYPE		MSType;					// multisample type
    D3DMULTISAMPLE_TYPE		MSFormat;				// multisample format

    DWORD					FVF;					// fvf type
    FLOAT					quadwidth;				// quad width
    FLOAT					quadheight;				// quad height
    FLOAT					quadx;
    FLOAT					quady;

    BOOL					zenable;				// enable z buffer
    BOOL					zwriteenable;			// enable z write
    D3DCMPFUNC				d3dcmpfunc;				// z compare function

    BOOL					primez;					// prime z with quad/D3DCMP_ALWAYS before drawing scene
    D3DCMPFUNC				primezcmpfunc;			// z prime compare function

    UINT					timeflags;				// what to time: TIME_Present, TIME_Render, ...
    INT						numberscenes;			// number of scenes to time (0 to use testtime)
    FLOAT					testtime;				// number of seconds to time

    DWORD					clearflags;				// Clear() flags
    DWORD					cclearval;				// color clear val
    FLOAT					zclearval;				// z clear val
    DWORD					sclearval;				// stencil clear val

    BOOL					userpixelshader;		// use a userpixelshader
    D3DPIXELSHADERDEF		shaderdef;				// the users pixel shader def

    BOOL					alphablendenable;		// turn on alphablending
    BOOL					alphatestenable;		// turn on alphatesting
    BOOL					rotatetex;				// rotate texture

	D3DSWATHWIDTH			SwathWidth;				// swadth width

    D3DTEXTUREOP			ColorOp;				// color op (if !userpixelshader)
    D3DTEXTUREOP			AlphaOp;				// alpha op (if !userpixelshader)

    D3DFILLMODE				d3dfillmode;            // SOLID, WIREFRAME, ...
    DWORD					colorwriteenable;		// D3DRS_COLORWRITEENABLE flags

    struct FRTEX
    {
        UINT				type;					// type of texture (TEX_None, TEX_2d, TEX_Cubemap, TEX_Volume)
        UINT				texsize;				// size of texture
        D3DFORMAT			d3dFormat;				// format of tetxure
        D3DTEXTUREFILTERTYPE filtertype;			// filtertype
    } rgtex[FILLRATE_NUM_TEXTURES];
};

// macros to help us define the size of our texcoords in fillrate.ini
static const DWORD T0_SIZE1 = D3DFVF_TEXCOORDSIZE1(0);
static const DWORD T0_SIZE2 = D3DFVF_TEXCOORDSIZE2(0);
static const DWORD T0_SIZE3 = D3DFVF_TEXCOORDSIZE3(0);
static const DWORD T0_SIZE4 = D3DFVF_TEXCOORDSIZE4(0);

static const DWORD T1_SIZE1 = D3DFVF_TEXCOORDSIZE1(1);
static const DWORD T1_SIZE2 = D3DFVF_TEXCOORDSIZE2(1);
static const DWORD T1_SIZE3 = D3DFVF_TEXCOORDSIZE3(1);
static const DWORD T1_SIZE4 = D3DFVF_TEXCOORDSIZE4(1);

static const DWORD T2_SIZE1 = D3DFVF_TEXCOORDSIZE1(2);
static const DWORD T2_SIZE2 = D3DFVF_TEXCOORDSIZE2(2);
static const DWORD T2_SIZE3 = D3DFVF_TEXCOORDSIZE3(2);
static const DWORD T2_SIZE4 = D3DFVF_TEXCOORDSIZE4(2);

static const DWORD T3_SIZE1 = D3DFVF_TEXCOORDSIZE1(3);
static const DWORD T3_SIZE2 = D3DFVF_TEXCOORDSIZE2(3);
static const DWORD T3_SIZE3 = D3DFVF_TEXCOORDSIZE3(3);
static const DWORD T3_SIZE4 = D3DFVF_TEXCOORDSIZE4(3);


class CFillRate : public CTest
{

public:
	CFillRate();
	HRESULT InitGraphics();
	HRESULT DestroyGraphics();
	HRESULT DestroyInput();

	HRESULT ProcessInput();
	HRESULT Update();
	HRESULT Render();

	// fillrate.cpp
	float DoTimedTest(TIMETESTRESULTS *pttres = NULL);
	void DoCompleteTimedTest();
	void DoQuickTimedTest();
	void DoMultiSampleTimedTest();
	void DumpCurrentSettings();
	void DoTextureTest();
	
	void ReadPixelShaderIni(D3DPIXELSHADERDEF *pshaderdef);
	BOOL ReadFRIniFile();

	IDirect3DBaseTexture8* MyCreateTexture(D3DRESOURCETYPE d3dtype, D3DFORMAT d3dFormat, DWORD dwWidth, DWORD dwHeight);
	void CreateQuadList(int nquads);
	BOOL InitFR(BOOL freadINIFile);
	BOOL InitD3D();
	void DumpZ();
	void RenderFrame(int overdraw);
	FLOAT EstimateTimeForScene();

private:
	LPDIRECT3DDEVICE8		m_pDevice;
	LPDIRECT3DVERTEXBUFFER8 m_pVB;                   // our vertex buffer
	LPDIRECT3DBASETEXTURE8	m_pTexture[FILLRATE_NUM_TEXTURES];       // 4 textures
	LPDIRECT3DSURFACE8      m_pBackBuffer;
	HANDLE                  m_hInpDevice;            // input device
	DWORD                   m_ShaderHandle;             // pixel shader handle
	UINT                    m_cIndices;                // count of indices
	WORD*                   m_pIndices;              // indices allocation

	DWORD                   m_dwFVFSize;                    // FVF size

	FRSETTINGS              m_var;                    // current settings

	BitFont					m_Font;
	
	BOOL                    m_fRedrawScreen;         // refresh screen?
	BOOL                    m_fdumpZ;               // dump Z val

	UINT					m_wLoops;
	UINT					m_wLoop;

	struct
	{
		LPCSTR szDesc;
		void (CFillRate::*pFunc)();
	} m_rgTests[FILLRATE_NUM_TESTS];
	UINT m_iCurTest;

};

#endif // #ifndef _FILL_RATE_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\FSAA.h ===
//-----------------------------------------------------------------------------
// FILE: FSAA.H
//
// Desc: fsaa header
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#ifndef _FSAA_H_
#define _FSAA_H_

#include "Test.h"


#define NUMPRIMS 240
#define DA (360.0/(NUMPRIMS*2.0))
#define DR (DA*3.141592654/180.0)
// Define our screen space triangles.

static struct TheVerts { float x,y,z,w; DWORD color; } Verts[NUMPRIMS*3];

//------------------------------------------------------------------------------

struct StateDescription 
{
    DWORD MultisampleFormat;
    WCHAR* Text;
};

#define FSAA_INI_PATH "D:\\fsaa.ini"
#define FSAA_NUM_AA_TYPES 11
#define FSAA_NUM_AA_FORMATS 4

class CFsaa : public CTest
{
public:
	CFsaa();

protected:
	HRESULT InitGraphics();
	HRESULT DestroyGraphics();
	HRESULT InitResources();
	HRESULT DestroyResources();

	HRESULT ReadIni();

	HRESULT ProcessInput();
	HRESULT Update();
	HRESULT Render();

private:
	LPDIRECT3D8					m_pD3D;
	LPDIRECT3DDEVICE8			m_pDevice;                  // our device
	LPDIRECT3DVERTEXBUFFER8		m_pVB;                   // our vertex buffer

	UINT						m_wLoops;
	UINT						m_wLoop;
	DWORD						m_dwStartLoopTime;
	
	INT							m_iType;
	INT							m_iFormat;
	INT							m_iFlicker;
	DWORD						m_dwTime;
	
	DWORD						m_dwFVF;
	
	HANDLE						m_hDevice;      // handle of the gamepad
	BOOL						m_bKeyDown[6];
	BYTE						m_PreviousState[6];

	BOOL						m_bPause;
	BOOL						m_bUseReset;  // Use Reset API instead of CreateDevice/Release
	BOOL						m_bUpdate;

	StateDescription			m_AntialiasTypes[FSAA_NUM_AA_TYPES];
	StateDescription			m_AntialiasFormats[FSAA_NUM_AA_FORMATS];

	DWORD						m_dwFrames;


	VOID InitPresentationParameters(D3DPRESENT_PARAMETERS *ppp);
	BOOL InitGammaRamp();
	VOID DumpStats();
};

#endif // #ifndef _FSAA_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\fr