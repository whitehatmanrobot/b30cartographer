ef request.LicenseLength);
                                //Console.WriteLine("***FuzzedValue: " + request.LanguageId.ToString());
                                break;

                            case FuzzParameter.license:
                                //Console.WriteLine("***OriginalValue: " + request.Offers.ToString());
                                FclFuzzer.Fuzz("License", ref request.License);
                                //Console.WriteLine("***FuzzedValue: " + request.Offers.ToString());
                                break;
                            
                            case FuzzParameter.RandomFuzz:
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserId", ref request.UserId);
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachineId", ref request.MachineId);
                                    request.Slot.machinePuid = request.MachineId;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "LicenseLength", ref request.LicenseLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("License", ref request.License);
                                break;

                            default:

                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeContentRefreshLicense execute failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeContentRefreshLicense returned XErr=0x{0:x}", request.XErr));
                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XeContentRefreshLicense Fuzzing Tests
        //*******************************************
        //  Stress Fuzzing tests for all parameters
        [StressTest(TargetTPS = 1)]
        public class Billing_XeContentRefreshLicense_userId : FuncToStressAdapter
        {
            public Billing_XeContentRefreshLicense_userId()
                : base(new P_XeContentRefreshLicense(P_XeContentRefreshLicense.FuzzParameter.userId))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeContentRefreshLicense_machineId : FuncToStressAdapter
        {
            public Billing_XeContentRefreshLicense_machineId()
                : base(new P_XeContentRefreshLicense(P_XeContentRefreshLicense.FuzzParameter.machineId))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeContentRefreshLicense_licenseLength : FuncToStressAdapter
        {
            public Billing_XeContentRefreshLicense_licenseLength()
                : base(new P_XeContentRefreshLicense(P_XeContentRefreshLicense.FuzzParameter.licenseLength))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeContentRefreshLicense_license : FuncToStressAdapter
        {
            public Billing_XeContentRefreshLicense_license()
                : base(new P_XeContentRefreshLicense(P_XeContentRefreshLicense.FuzzParameter.license))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeContentRefreshLicense_RandomFuzz : FuncToStressAdapter
        {
            public Billing_XeContentRefreshLicense_RandomFuzz()
                : base(new P_XeContentRefreshLicense(P_XeContentRefreshLicense.FuzzParameter.RandomFuzz))
            { }
        }
        //*********************************************
        #endregion

        #endregion

        #region XeOfferVerifyToken

        //formerly P_HttpAuth this one might not be enough but
        //it was the simplist of the ones in the test file
        /// <summary>
        /// The base class for test cases
        /// </summary>
        public class XeOfferingVerifyTokenTestBase : TestBase
        {
            protected uint Expected_XErr = 0;

            protected XRLXeOfferingVerifyToken request = null;
            protected byte CountryId = 103;
            protected string Voucher = "";

            protected ulong OfferId = 0;
            protected uint OfferType = (uint)OfferingTypeEnum.Content;

            public virtual void Init()
            {
                request = new XRLXeOfferingVerifyToken();
                request.CountryId = CountryId;
                request.Voucher = Voucher;
            }

            protected override void Execute()
            {
                Init();

                XRLXeOfferingVerifyTokenResponse response = new XRLXeOfferingVerifyTokenResponse();
                bool ret = request.Execute(out response);
                if (Expected_XErr != 0)
                {
                    if (ret)
                        throw new UnexpectedTestResultException("XRLXeOfferingVerifyToken should have failed.");
                    if (request.XErr != Expected_XErr)
                        throw new UnexpectedTestResultException(String.Format("XRLXeOfferingVerifyToken returned unexpected error XErr=0x{0:X}, expected XErr=0x{1:X}", request.XErr, Expected_XErr));
                }
                else
                {
                    if (!ret)
                        throw new UnexpectedTestResultException("XRLXeOfferingVerifyToken failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK)
                        throw new UnexpectedTestResultException(String.Format("XRLXeOfferingVerifyToken returned XErr=0x{0:x}", request.XErr));
                    VerifyResponse(response, OfferId, OfferType);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }

            public static void VerifyResponse(XRLXeOfferingVerifyTokenResponse response, ulong offerId, uint offerType)
            {
                PrintResponse(response);
                ValueCheck.Test("Offer Id", offerId, response.OfferId);
                ValueCheck.Test("Offer type", offerType, response.OfferTypeId);
            }

            public static void PrintResponse(XRLXeOfferingVerifyTokenResponse response)
            {
                Global.RO.Info("Offer Id: 0x{0:X}", response.OfferId);
                Global.RO.Info("Offer Type: " + response.OfferTypeId);
            }
        }

        [TestCase]
        public class P_XeOfferingVerifyToken : UserTestBase
        {
            #region Constructors and Enum values
            //*************************************************************
            //  This variable and constructor will allow us to tell the test
            //  which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeOfferingVerifyToken() { }
            public P_XeOfferingVerifyToken(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            //This value will be used to help the test know which parameter to fuzz
            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                countryId,
                voucherLength,
                voucher,
            }
            //**************************************************************
            #endregion

            override protected void Execute()
            {
                XRLXeOfferingVerifyToken request = new XRLXeOfferingVerifyToken();
                XRLXeOfferingVerifyTokenResponse response = new XRLXeOfferingVerifyTokenResponse();

                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetSilverAccount("XeContentRefreshLicense");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");

                // I've added this try so that I can properly free up the account
                try
                {
                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.Voucher = Offers.GetBaseOfferPrepaidVoucherCode(Offers.BaseOffers.GoldPP1Month);
                    request.UseHttpAuth = true;

                    #region Parameter Fuzzing Switch Statements
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.countryId:
                                FclFuzzer.Fuzz("CountryId", ref request.CountryId);
                                break;

                            case FuzzParameter.voucherLength:
                                FclFuzzer.Fuzz("", "VoucherLength", ref request.VoucherLength);
                                break;

                            case FuzzParameter.voucher:
                                FclFuzzer.Fuzz("Voucher", ref request.Voucher);
                                break;

                            case FuzzParameter.RandomFuzz:
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("CountryId", ref request.CountryId);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "VoucherLength", ref request.VoucherLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("Voucher", ref request.Voucher);
                                break;

                            default:

                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xbos_int), out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeOfferingVerifyToken failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeOfferingVerifyToken returned XErr=0x{0:x}", request.XErr));
                    if (!LMATests.m_EnableFuzzTesting)
                    {
                        XeOfferingVerifyTokenTestBase.VerifyResponse(response, Offers.GetBaseOfferId(Offers.BaseOffers.GoldPP1Month),
                            (uint)OfferingTypeEnum.Subscription);
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XeOfferingVerifyToken Fuzzing Tests
        //*******************************************
        //  Stress Fuzzing tests for all parameters
        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferingVerifyToken_countryId : FuncToStressAdapter
        {
            public Billing_XeOfferingVerifyToken_countryId()
                : base(new P_XeOfferingVerifyToken(P_XeOfferingVerifyToken.FuzzParameter.countryId))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferingVerifyToken_voucherLength : FuncToStressAdapter
        {
            public Billing_XeOfferingVerifyToken_voucherLength()
                : base(new P_XeOfferingVerifyToken(P_XeOfferingVerifyToken.FuzzParameter.voucherLength))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferingVerifyToken_voucher : FuncToStressAdapter
        {
            public Billing_XeOfferingVerifyToken_voucher()
                : base(new P_XeOfferingVerifyToken(P_XeOfferingVerifyToken.FuzzParameter.voucher))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferingVerifyToken_RandomFuzz : FuncToStressAdapter
        {
            public Billing_XeOfferingVerifyToken_RandomFuzz()
                : base(new P_XeOfferingVerifyToken(P_XeOfferingVerifyToken.FuzzParameter.RandomFuzz))
            { }
        }

        //*********************************************
        #endregion

        #endregion

        #region XeOfferPurchase

        private const int cost_of_item = 21;
        private const uint TITLE_ID = 0x2D5A7DFF;
        private const uint CONTENT_REVENUE_SKU_ID = 5001; // using test SKU. old 0x05;
        private const string CONTENT_REVENUE_SKU = "XBX-00005";
        private const uint OFFER_CAMPAIGN = 0x00ff1234;
        public static ulong CreateContentOffer(byte tier, PaymentTypeEnum paymentType, int priceWhole, int priceFractional)
        {
            // *** TITLE ***
            XbosTitle title = new XbosTitle(TITLE_ID, false);
            title.Create();

            // *** OFFER ***
            RandomEx RandGen = new RandomEx();
            ulong offerId = ((ulong)TITLE_ID << 32) + (ulong)RandGen.Next(1, int.MaxValue);

            ContentOfferLoader.AddOffer(TITLE_ID,
                offerId,
                1000,
                2000,
                0,
                0x0002,  // content offer
                "Test Premium Content for Test Title",
                true);
            ContentOfferLoader.AddOfferRegion(offerId,
                103,
                tier,
                (int)paymentType,
                DateTime.UtcNow.AddYears(-1),
                DateTime.UtcNow.AddYears(1),
                "", // not used for content offers
                priceWhole,
                priceFractional,
                0);
            ContentOfferLoader.AddOfferCultureDetails(offerId,
                1033,
                "Test Premium Content for Test Title",
                "No sell text here - this is a test offer.");
            ContentOfferLoader.AddOfferSku((int)CONTENT_REVENUE_SKU_ID,
                OfferingSKUType.RevenueSKU,
                CONTENT_REVENUE_SKU,
                "Test SKU");
            ContentOfferLoader.AddOfferCampaign((int)OFFER_CAMPAIGN,
                "Test campaign");
            ContentOfferLoader.AddDmpOfferDetails(offerId,
                (int)CONTENT_REVENUE_SKU_ID,
                2, // premium content
                (int)OFFER_CAMPAIGN);

            if (paymentType == PaymentTypeEnum.Token)
            {
                TokendbWS.UnuseVoucher(XbosOffer.OFFER_VOUCHER_HASH);
                TokendbWS.DeleteVoucher(XbosOffer.OFFER_VOUCHER_HASH);
                TokendbWS.AddVoucherForOffer(XbosOffer.OFFER_VOUCHER_HASH, offerId, 1, 0, 2);
            }

            // the offers are cached by Offer.CreateInstance(), have to flush them
            // using random offer id now, cacheflush is not needed
            //Global.XEnv.ExecuteXmgmtCommand(Interface.xbos_billing_offering, "e :xbos CacheFlush");

            return offerId;
        }

        [TestCase]
        public class P_XeOfferPurchase : TestBase
        {
            #region Constructors and Enum values
            //*************************************************************
            //  This variable and constructor will allow us to tell the test
            //  which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeOfferPurchase() { }
            public P_XeOfferPurchase(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            //This value will be used to help the test know which parameter to fuzz
            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                userPuid,
                countryID,
                languageID,
                tier,
                machinePuid,
                offerIDLength,
                offerIDs,
                offerID,
                paymentType,
                paymentInstrumentIDLength,
                paymentInstrumentID,
                billingTokenLength,
                billingToken,
            }
            //**************************************************************
            #endregion

            public readonly uint _SchemaVersion = WireData.MakeSchemaVersion(2, 0);
            public readonly bool _UseHttpAuth = false;

            protected override void Execute()
            {
                XRLXeOfferPurchase request = new XRLXeOfferPurchase(_SchemaVersion, _UseHttpAuth);

                // wait for Xcbk
                //XeUser user = XbosUser.XenonGoldUser(CountryId.US, false);
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetSilverAccount("XeOfferPurchase");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");

                //  This try block was added to make sure we free the user account
                try
                {
                    user.AddPoints_500();

                    ulong offerId = CreateContentOffer(3, PaymentTypeEnum.Points, 500, 0);
                    
                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.UserPuid = user.UserPuid;
                    request.Tier = (byte)UodbWS.GetUserTier(user.UserPuid);
                    request.OfferID = offerId;
                    request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                              //check on the SG was catching that the numbers didn't match
                    
                    //request.SchemaVersion = WireData.MakeSchemaVersion(1,0);

                    #region Parameter Fuzzing Switch Statements
                    //****************************************
                    //  Mark XeUser as LMA account

                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.userPuid:
                                FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                break;

                            case FuzzParameter.countryID:
                                FclFuzzer.Fuzz("CountryId", ref request.CountryID);
                                break;

                            case FuzzParameter.languageID:
                                FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
                                break;

                            case FuzzParameter.tier:
                                FclFuzzer.Fuzz("Tier", ref request.Tier);
                                break;

                            case FuzzParameter.machinePuid:
                                FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachinePuid;
                                break;

                            case FuzzParameter.offerIDLength:
                                FclFuzzer.Fuzz("", "OfferIDLength", ref request.OfferIDLength);
                                break;

                            case FuzzParameter.offerIDs:
                                FclFuzzer.FuzzArray("", "OfferIDs", ref request.OfferIDs);
                                break;

                            case FuzzParameter.offerID:
                                FclFuzzer.Fuzz("", "OfferID", ref request.OfferID);
                                break;

                            case FuzzParameter.paymentType:
                                FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
                                break;

                            case FuzzParameter.paymentInstrumentIDLength:
                                FclFuzzer.Fuzz("", "PaymentInstrumentIDLength", ref request.PaymentInstrumentIDLength);
                                break;

                            case FuzzParameter.paymentInstrumentID:
                                FclFuzzer.Fuzz("PaymentInstrumentID", ref request.PaymentInstrumentID);
                                break;

                            case FuzzParameter.billingTokenLength:
                                FclFuzzer.Fuzz("", "BillingTokenLength", ref request.BillingTokenLength);
                                break;

                            case FuzzParameter.billingToken:
                                FclFuzzer.Fuzz("BillingToken", ref request.BillingToken);
                                break;

                            case FuzzParameter.RandomFuzz:
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("CountryId", ref request.CountryID);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("Tier", ref request.Tier);
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                    request.Slot.machinePuid = request.MachinePuid;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "OfferIDLength", ref request.OfferIDLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.FuzzArray("", "OfferIDs", ref request.OfferIDs);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "OfferID", ref request.OfferID);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "PaymentInstrumentIDLength", ref request.PaymentInstrumentIDLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("PaymentInstrumentID", ref request.PaymentInstrumentID);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "BillingTokenLength", ref request.BillingTokenLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("BillingToken", ref request.BillingToken);
                                break;

                            default:

                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute() && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeOfferPurchase failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeOfferPurchase returned XErr=0x{0:x}", request.XErr));
                    
                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }

                
            }
        }

        #region XeOfferPurchase Fuzzing Tests
        //*******************************************
        //  Stress Fuzzing tests for all parameters
        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_userPuid : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_userPuid()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.userPuid))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_countryID : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_countryID()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.countryID))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_languageID : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_languageID()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.languageID))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_tier : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_tier()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.tier))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_machinePuid : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_machinePuid()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.machinePuid))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_offerIDLength : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_offerIDLength()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.offerIDLength))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_offerIDs : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_offerIDs()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.offerIDs))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_offerID : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_offerID()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.offerID))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_paymentType : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_paymentType()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.paymentType))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_paymentInstrumentIDLength : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_paymentInstrumentIDLength()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.paymentInstrumentIDLength))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_paymentInstrumentID : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_paymentInstrumentID()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.paymentInstrumentID))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_billingTokenLength : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_billingTokenLength()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.billingTokenLength))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_billingToken : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_billingToken()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.billingToken))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchase_RandomFuzz : FuncToStressAdapter
        {
            public Billing_XeOfferPurchase_RandomFuzz()
                : base(new P_XeOfferPurchase(P_XeOfferPurchase.FuzzParameter.RandomFuzz))
            { }
        }
        //*********************************************
        #endregion

        #endregion

        #region XeOfferPurchaseGamertag

        [TestCase]
        class P_XeOfferPurchaseGamertag : UserTestBase
        {

            #region Constructors and Enum values
            //*************************************************************
            //  This variable and constructor will allow us to tell the test
            //  which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeOfferPurchaseGamertag() { }
            public P_XeOfferPurchaseGamertag(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            //This value will be used to help the test know which parameter to fuzz
            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                userPuid,
                countryID,
                languageID,
                tier,
                machinePuid,
                offerID,
                paymentType,
                billingTokenLength,
                billingToken,
                gamertagLength,
                gamertag,
            }
            //**************************************************************
            #endregion

            override protected void Execute()
            {
                XRLXeOfferPurchaseGamertag request = new XRLXeOfferPurchaseGamertag();
                XRLXeOfferPurchaseGamertagResponse response = new XRLXeOfferPurchaseGamertagResponse();

                //XeUser user = XbosUser.XenonSilverUser();
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetSilverAccount("XePurchaseGamertag");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");

                //  This try block was added to make sure we free the user account
                try
                {
                    #region Add points to the account to make sure we have enough
                    //XbosOffer.RewardUSUser1600Points(user);
                    XRLXeGetPointsBalance balanceRequest = new XRLXeGetPointsBalance();
                    XRLXeGetPointsBalanceResponse balanceResponse;

                    //  This is the code that marks the request from a PC LMA account
                    balanceRequest.ManualPopulateSlot();
                    balanceRequest.Slot.authDataFlags |= 0x20;             //  LMA flag
                    balanceRequest.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    balanceRequest.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    balanceRequest.userPuid = user.UserPuid;
                    balanceRequest.machinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                    //check on the SG was catching that the numbers didn't match

                    if (!balanceRequest.Execute(out balanceResponse))
                    {
                        //couldn't get the balance just add the points
                        user.AddPoints_500();
                        user.AddPoints_500();
                        user.AddPoints_500();
                        user.AddPoints_500();
                    }
                    else if (balanceResponse.PointsBalance < 1600)
                    {
                        user.AddPoints_500();
                        user.AddPoints_500();
                        user.AddPoints_500();
                        user.AddPoints_500();
                    }
                    else
                    {
                        Console.WriteLine("Don't need to add points :)");
                    }
                    #endregion

                    RandomEx rnd = new RandomEx();
                    string newGamerTag = rnd.GenerateRandomString("XEN", 15);

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.UserPuid = user.UserPuid;
                    request.PaymentType = (uint)PaymentTypeEnum.Points;
                    request.Gamertag = newGamerTag;
                    request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                            //check on the SG was catching that the numbers didn't match

                    #region Parameter Fuzzing Switch Statements
                    
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.userPuid:
                                FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                break;

                            case FuzzParameter.countryID:
                                FclFuzzer.Fuzz("CountryId", ref request.CountryID);
                                break;

                            case FuzzParameter.languageID:
                                FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
                                break;

                            case FuzzParameter.tier:
                                FclFuzzer.Fuzz("Tier", ref request.Tier);
                                break;

                            case FuzzParameter.machinePuid:
                                FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachinePuid;
                                break;

                            case FuzzParameter.offerID:
                                FclFuzzer.Fuzz("", "OfferID", ref request.OfferID);
                                break;

                            case FuzzParameter.paymentType:
                                FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
                                break;

                            case FuzzParameter.billingTokenLength:
                                FclFuzzer.Fuzz("", "BillingTokenLength", ref request.BillingTokenLength);
                                break;

                            case FuzzParameter.billingToken:
                                FclFuzzer.Fuzz("BillingToken", ref request.BillingToken);
                                break;

                            case FuzzParameter.gamertagLength:
                                FclFuzzer.Fuzz("", "PaymentInstrumentIDLength", ref request.GamertagLength);
                                break;

                            case FuzzParameter.gamertag:
                                FclFuzzer.Fuzz("PaymentInstrumentID", ref request.Gamertag);
                                break;

                            case FuzzParameter.RandomFuzz:
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("CountryId", ref request.CountryID);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("Tier", ref request.Tier);
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                    request.Slot.machinePuid = request.MachinePuid;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "OfferID", ref request.OfferID);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "BillingTokenLength", ref request.BillingTokenLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("BillingToken", ref request.BillingToken);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "PaymentInstrumentIDLength", ref request.GamertagLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("PaymentInstrumentID", ref request.Gamertag);
                                break;
                            
                            default:

                                break;
                        }
                    }
                    #endregion

                    Global.RO.Info("Changing user 0x" + user.UserPuid.ToString("X") + " gamertag from " + user.Gamertag + " to " + newGamerTag);
                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeOfferPurchaseGamertag failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeOfferPurchaseGamertag returned XErr=0x{0:x}", request.XErr));


                    // validate that the gamertag changed
                    if (!LMATests.m_EnableFuzzTesting)
                    {
                        //we might be running this multiple times so we really don't care I guess about this.
                        //XeXbos.Functional.XeOfferPurchaseGamertag.XRLXeOfferPurchaseGamertagTestBase.VerifyResponse(response, user.UserPuid, user.Gamertag, newGamerTag);
                    }
                    this.ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }               
            }
        }

        #region XeOfferPurchaseGamertag Fuzzing Tests
        //*******************************************
        //  Stress Fuzzing tests for all parameters
        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_userPuid : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_userPuid()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.userPuid))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_countryID : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_countryID()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.countryID))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_languageID : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_languageID()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.languageID))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_tier : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_tier()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.tier))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_machinePuid : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_machinePuid()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.machinePuid))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_offerID : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_offerID()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.offerID))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_paymentType : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_paymentType()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.paymentType))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_billingTokenLength : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_billingTokenLength()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.billingTokenLength))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_billingToken : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_billingToken()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.billingToken))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_gamertagLength : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_gamertagLength()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.gamertagLength))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_gamertag : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_gamertag()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.gamertag))
            { }
        }
        
        [StressTest(TargetTPS = 1)]
        public class Billing_XeOfferPurchaseGamertag_RandomFuzz : FuncToStressAdapter
        {
            public Billing_XeOfferPurchaseGamertag_RandomFuzz()
                : base(new P_XeOfferPurchaseGamertag(P_XeOfferPurchaseGamertag.FuzzParameter.RandomFuzz))
            { }
        }
        //*********************************************
        #endregion

        #endregion

        #region AutoupdReferral
        
        //  TROUBLESHOOTING TIP:  If you run this function and are getting an error it is probably due
        //  to the fact that the update you are targeting in the test code does not exist on the server
        //  or Xblob.  You will need to either prop the title update or switch the values used in the
        //  request to an existing update.  The values listed below are for my own xblob with an update
        //  that we have for panorama.  You can get the update from \\xspanafile01\scratch\cagood\xblob\update.
        //  Copy that file to a file on your hard drive, then open up a command prompt and type the following:
        //  
        //  livecontent /action:build /package:585207d7.ds.ms.cab /titleid:585207d7 /site:1 /update:full /overwrite
        //
        //  You will probably have to share the webroot\download_content folder as 'Content' with the admin group
        //  _xbluser, and _xbladmin.  I have commented out the values that I think testnet and certnet will use
        //  in the code below.
        [Test]
        class P_AutoupdReferral : TestBase
        {
            #region Constructors and Enum values
            //*************************************************************
            //  This variable and constructor will allow us to tell the test
            //  which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_AutoupdReferral() { }
            public P_AutoupdReferral(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            //This value will be used to help the test know which parameter to fuzz
            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                machinePuid,
                titleId,
                baseVersion,
                
            }
            //**************************************************************
            #endregion

            override protected void Execute()
            {
                XRLAutoUpdateReferral request = new XRLAutoUpdateReferral();
                //XRLAutoupdReferralResponse response; //AutoUpdateReferralResponse response;
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetSilverAccount("XePurchaseGamertag");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");

                //  This try block was added to make sure we free the user account
                try
                {

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.MachineId = 0xfb00000000000001;
                    
                    //these two values are to target the Panorama Update on my own xblob that I had to prop
                    //myself
                    request.TitleId = 0x585207d7;
                    request.dwBaseVersion = 0x20001c1;

                    //these are the original values that I found and are probably what Testnet and Stressnet use
                    //request.TitleId = 0xDEADBEEF;
                    //request.dwBaseVersion = 0x0101;


                    #region Parameter Fuzzing Switch Statements

                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.machinePuid:
                                FclFuzzer.Fuzz("", "MachinePuid", ref request.MachineId);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachineId;
                                break;

                            case FuzzParameter.titleId:
                                FclFuzzer.Fuzz("", "TitleId", ref request.TitleId);
                                break;

                            case FuzzParameter.baseVersion:
                                FclFuzzer.Fuzz("", "BaseVersion", ref request.dwBaseVersion);
                                break;

                            case FuzzParameter.RandomFuzz:
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachinePuid", ref request.MachineId);
                                    request.Slot.machinePuid = request.MachineId;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "TitleId", ref request.TitleId);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "BaseVersion", ref request.dwBaseVersion);

                                break;

                            default:

                                break;
                        }
                    }
                    #endregion

                    if (request.Execute() && !LMATests.m_EnableFuzzTesting)
                    {
                        foreach (XRLAutoUpdateReferralLocation loc in request.Locs)
                        {
                            Console.WriteLine(loc.Xrl);
                        }
                    }
                    else if (!LMATests.m_EnableFuzzTesting)
                    {
                        throw new UnexpectedTestResultException(request.GetDumpString());
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region AutoupdReferral Stress Tests
        [StressTest(TargetTPS = 1)]
        public class Billing_AutoupdReferral_machinePuid : FuncToStressAdapter
        {
            public Billing_AutoupdReferral_machinePuid()
                : base(new P_AutoupdReferral(P_AutoupdReferral.FuzzParameter.machinePuid))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_AutoupdReferral_titleId : FuncToStressAdapter
        {
            public Billing_AutoupdReferral_titleId()
                : base(new P_AutoupdReferral(P_AutoupdReferral.FuzzParameter.titleId))
            { }
        }

        [StressTest(TargetTPS = 1)]
        public class Billing_AutoupdReferral_baseVersion : FuncToStressAdapter
        {
            public Billing_AutoupdReferral_baseVersion()
                : base(new P_AutoupdReferral(P_AutoupdReferral.FuzzParameter.baseVersion))
            { }
        }
        
        [StressTest(TargetTPS = 1)]
        public class Billing_AutoupdReferral_RandomFuzz : FuncToStressAdapter
        {
            public Billing_AutoupdReferral_RandomFuzz()
                : base(new P_AutoupdReferral(P_AutoupdReferral.FuzzParameter.RandomFuzz))
            { }
        }
        #endregion
        #endregion

        #region these tests were originally LMA allowed and the code to test them as such is commented out
        //#region XeSubscriptionDetails

        ////formely P_User_Silver_Subscribed
        //[TestCase]
        //class P_XeSubscriptionDetails : XeXbos.Functional.XeSubscriptionDetails.XeSubDetailsTestBase
        //{
        //    #region Constructors and Enum values
        //    //*************************************************************
        //    //  This variable and constructor will allow us to tell the test
        //    //  which parameter we want it to fuzz
        //    public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

        //    public P_XeSubscriptionDetails() { }
        //    public P_XeSubscriptionDetails(FuzzParameter paramToFuzz)
        //    {
        //        m_ParmToFuzz = paramToFuzz;
        //    }

        //    //This value will be used to help the test know which parameter to fuzz
        //    public enum FuzzParameter
        //    {
        //        None = 0,
        //        RandomFuzz,
        //        userPuid,
        //        machinePuid,
        //        countryID,
        //        languageID,
        //        offerID,
        //        paymentType,
        //        tierRequired,
        //        ratingSystem,
        //    }
        //    //**************************************************************
        //    #endregion

        //    override protected void Execute()
        //    {
        //        XRLXeSubscriptionDetails request;
        //        XRLXeSubscriptionDetailsResponse response;

        //        //XeUser user = SetUpXenonUser(3, true);
        //        BillingAccounts Accounts = BillingAccounts.Instance;
        //        XeUser user = Accounts.GetSilverAccount("XeSubscriptionDetails");
        //        if (user == null)
        //            throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
        //        try
        //        {
        //            //SetDefaultsForExistingSub(user, 3, out request);  //should we set tier required to 3?
        //            request = new XRLXeSubscriptionDetails();

        //            //  This is the code that marks the request from a PC LMA account
        //            request.ManualPopulateSlot();
        //            request.Slot.authDataFlags |= 0x20;             //  LMA flag
        //            request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
        //            request.Slot.userPuid0 = user.UserPuid;

        //            //  Parameters for the API 
        //            request.UserPuid = user.UserPuid;
        //            request.OfferID = user.OfferId;
        //            request.PaymentType = 0xffffffff;
        //            request.TierRequired = (byte)3;
        //            request.RatingSystem = 0;
        //            request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
        //                                                      //check on the SG was catching that the numbers didn't match
        //            #region Parameter Fuzzing Switch Statements

        //            if (LMATests.m_EnableFuzzTesting)
        //            {
        //                switch (m_ParmToFuzz)
        //                {
        //                    case FuzzParameter.userPuid:
        //                        FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
        //                        break;

        //                    case FuzzParameter.machinePuid:
        //                        FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
        //                        //this is so that we can get around the security check that the slot and request MachineId don't match
        //                        request.Slot.machinePuid = request.MachinePuid;
        //                        break;

        //                    case FuzzParameter.countryID:
        //                        FclFuzzer.Fuzz("CountryId", ref request.CountryID);
        //                        break;

        //                    case FuzzParameter.languageID:
        //                        FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
        //                        break;

        //                    case FuzzParameter.offerID:
        //                        FclFuzzer.Fuzz("", "OfferID", ref request.OfferID);
        //                        break;

        //                    case FuzzParameter.paymentType:
        //                        FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
        //                        break;

        //                    case FuzzParameter.tierRequired:
        //                        FclFuzzer.Fuzz("", "TierRequired", ref request.TierRequired);
        //                        break;

        //                    case FuzzParameter.ratingSystem:
        //                        FclFuzzer.Fuzz("RatingSystem", ref request.RatingSystem);
        //                        break;

        //                    case FuzzParameter.RandomFuzz:
        //                        Random randomNum = new Random();
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
        //                        if (randomNum.Next(2) == 1)
        //                        {
        //                            FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
        //                            request.Slot.machinePuid = request.MachinePuid;
        //                        }
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("CountryId", ref request.CountryID);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "OfferID", ref request.OfferID);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "TierRequired", ref request.TierRequired);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("RatingSystem", ref request.RatingSystem);
                                
        //                        break;
                            
        //                    default:

        //                        break;
        //                }
        //            }
        //            #endregion

        //            ExecuteRequest(request, out response);

        //            if (!LMATests.m_EnableFuzzTesting)
        //            {
        //                XeXbos.Functional.XeSubscriptionDetails.FixedResponse expected = new XeXbos.Functional.XeSubscriptionDetails.FixedResponse(user.UserPuid, user.OfferId, 0xffffffff, 3);  //tier
        //                //to 3?
        //                SetResultCode(CompareAnswers(expected, response));
        //            }
                    
                    
        //            this.ResultCode = TEST_RESULTS.PASSED;
                    
        //        }
        //        finally
        //        {
        //            Accounts.ReturnAccount(user.UserPuid);
        //        }
        //    }

        //}

        //#region XeSubscriptionDetails Fuzzing Tests
        ////*******************************************
        ////  Stress Fuzzing tests for all parameters
        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_userPuid : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_userPuid()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.userPuid))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_machinePuid : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_machinePuid()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.machinePuid))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_countryID : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_countryID()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.countryID))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_languageID : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_languageID()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.languageID))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_offerID : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_offerID()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.offerID))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_paymentType : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_paymentType()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.paymentType))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_tierRequired : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_tierRequired()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.tierRequired))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_ratingSystem : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_ratingSystem()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.ratingSystem))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionDetails_RandomFuzz : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionDetails_RandomFuzz()
        //        : base(new P_XeSubscriptionDetails(P_XeSubscriptionDetails.FuzzParameter.RandomFuzz))
        //    { }
        //}
        ////*********************************************
        //#endregion

        //#endregion

        //#region XeSubscriptionEnumerate

        //[TestCase]
        //public class P_XeSubscriptionEnumerate : XeXbos.Functional.XeSubscriptionEnumerate.XeSubEnumerateTestBase
        //{
        //    #region Constructors and Enum values
        //    //*************************************************************
        //    //  This variable and constructor will allow us to tell the test
        //    //  which parameter we want it to fuzz
        //    public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

        //    public P_XeSubscriptionEnumerate() { }
        //    public P_XeSubscriptionEnumerate(FuzzParameter paramToFuzz)
        //    {
        //        m_ParmToFuzz = paramToFuzz;
        //    }

        //    //This value will be used to help the test know which parameter to fuzz
        //    public enum FuzzParameter
        //    {
        //        None = 0,
        //        RandomFuzz,
        //        userPuid,
        //        machinePuid,
        //        userTier,
        //        countryID,
        //        languageID,
        //        gameRating,
        //        offerType,
        //        paymentType,
        //        titleID,
        //        titleCategories,
        //        requestFlags,
        //        startingIndex,
        //        maxResults,
        //    }
        //    //**************************************************************
        //    #endregion

        //    public enum QueryType : ushort
        //    {
        //        NEW = 0x0001,
        //        RENEWAL = 0x0002,
        //        CURRENT = 0x0004,
        //        EXPIRED = 0x0008,
        //        SUSPENDED = 0x0010
        //    };

        //    //formerly the P_Silver_User test (mainline didn't seem to actually request the stuff)
        //    protected override void Execute()
        //    {
        //        XRLXeSubscriptionEnumerate request = new XRLXeSubscriptionEnumerate();
        //        XRLXeSubscriptionEnumerateResponse response = new XRLXeSubscriptionEnumerateResponse();

        //        //XeUser user = XbosUser.XenonSilverUser();
        //        BillingAccounts Accounts = BillingAccounts.Instance;
        //        XeUser user = Accounts.GetSilverAccount("XeSubscriptionEnumerate");
        //        if (user == null)
        //            throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
        //        try
        //        {
        //            //  This is the code that marks the request from a PC LMA account
        //            request.ManualPopulateSlot();
        //            request.Slot.authDataFlags |= 0x20;             //  LMA flag
        //            request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
        //            request.Slot.userPuid0 = user.UserPuid;

        //            //  Parameters for the API 
        //            //SetDefaultsForSubEnum(user, out request);
        //            request.PaymentType = (uint)PaymentTypeEnum.CreditCard;
        //            request.OfferType = (uint)OfferingTypeEnum.Subscription;
        //            request.RequestFlags = (ushort)(QueryType.NEW | QueryType.RENEWAL | QueryType.CURRENT);
        //            request.GameRating = 255; //catch all possible game ratings.
        //            request.UserPuid = user.UserPuid;
        //            request.RequestFlags = (ushort)QueryType.CURRENT;
        //            request.UserTier = 3; //silver user
        //            request.MachinePuid = 0xfb00000000000001;

        //            #region Parameter Fuzzing Switch Statements

        //            if (LMATests.m_EnableFuzzTesting)
        //            {
        //                switch (m_ParmToFuzz)
        //                {
        //                    case FuzzParameter.userPuid:
        //                        FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
        //                        break;

        //                    case FuzzParameter.machinePuid:
        //                        FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
        //                        //this is so that we can get around the security check that the slot and request MachineId don't match
        //                        request.Slot.machinePuid = request.MachinePuid;
        //                        break;

        //                    case FuzzParameter.userTier:
        //                        FclFuzzer.Fuzz("", "UserTier", ref request.UserTier);
        //                        break;

        //                    case FuzzParameter.countryID:
        //                        FclFuzzer.Fuzz("CountryId", ref request.CountryID);
        //                        break;

        //                    case FuzzParameter.languageID:
        //                        FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
        //                        break;

        //                    case FuzzParameter.gameRating:
        //                        FclFuzzer.Fuzz("", "GameRating", ref request.GameRating);
        //                        break;

        //                    case FuzzParameter.offerType:
        //                        FclFuzzer.Fuzz("", "OfferType", ref request.OfferType);
        //                        break;

        //                    case FuzzParameter.paymentType:
        //                        FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
        //                        break;

        //                    case FuzzParameter.titleID:
        //                        FclFuzzer.Fuzz("", "TitleID", ref request.TitleID);
        //                        break;

        //                    case FuzzParameter.titleCategories:
        //                        FclFuzzer.Fuzz("", "TitleCategories", ref request.TitleCategories);
        //                        break;

        //                    case FuzzParameter.requestFlags:
        //                        FclFuzzer.Fuzz("", "RequestFlags", ref request.RequestFlags);
        //                        break;

        //                    case FuzzParameter.startingIndex:
        //                        FclFuzzer.Fuzz("", "StartingIndex", ref request.StartingIndex);
        //                        break;

        //                    case FuzzParameter.maxResults:
        //                        FclFuzzer.Fuzz("", "MaxResults", ref request.MaxResults);
        //                        break;

        //                    case FuzzParameter.RandomFuzz:
        //                        Random randomNum = new Random();
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
        //                        if (randomNum.Next(2) == 1)
        //                        {
        //                            FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
        //                            request.Slot.machinePuid = request.MachinePuid;
        //                        }
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "UserTier", ref request.UserTier);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("CountryId", ref request.CountryID);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageID);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "GameRating", ref request.GameRating);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "OfferType", ref request.OfferType);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "PaymentType", ref request.PaymentType);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "TitleID", ref request.TitleID);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "TitleCategories", ref request.TitleCategories);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "RequestFlags", ref request.RequestFlags);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "StartingIndex", ref request.StartingIndex);
        //                        if (randomNum.Next(2) == 1)
        //                            FclFuzzer.Fuzz("", "MaxResults", ref request.MaxResults);
                                
        //                        break;

        //                    default:

        //                        break;
        //                }
        //            }
        //            #endregion

        //            ExecuteRequest(request, out response);

        //            if (!LMATests.m_EnableFuzzTesting)
        //            {
        //                //PrintEnum(response);
        //                //verify response has the gold sub in it, nothing else.
        //                ulong[] expectedSubs = { user.OfferId };
        //                SetResultCode(VerifyEnum(expectedSubs, request, response));
        //            }
        //            this.ResultCode = TEST_RESULTS.PASSED;
        //        }
        //        finally
        //        {
        //            Accounts.ReturnAccount(user.UserPuid);
        //        }
        //    }
        //}

        //#region XeSubscriptionDetails Fuzzing Tests
        ////*******************************************
        ////  Stress Fuzzing tests for all parameters
        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_userPuid : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_userPuid()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.userPuid))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_machinePuid : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_machinePuid()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.machinePuid))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_userTier : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_userTier()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.userTier))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_countryID : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_countryID()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.countryID))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_languageID : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_languageID()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.languageID))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_gameRating : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_gameRating()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.gameRating))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_offerType : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_offerType()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.offerType))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_paymentType : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_paymentType()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.paymentType))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_titleID : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_titleID()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.titleID))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_titleCategories : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_titleCategories()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.titleCategories))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_requestFlags : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_requestFlags()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.requestFlags))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_startingIndex : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_startingIndex()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.startingIndex))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_maxResults : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_maxResults()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.maxResults))
        //    { }
        //}

        //[StressTest(TargetTPS = 1)]
        //public class Billing_XeSubscriptionEnumerate_RandomFuzz : FuncToStressAdapter
        //{
        //    public Billing_XeSubscriptionEnumerate_RandomFuzz()
        //        : base(new P_XeSubscriptionEnumerate(P_XeSubscriptionEnumerate.FuzzParameter.RandomFuzz))
        //    { }
        //}

        ////*********************************************
        //#endregion

        //#endregion

        #endregion
        
        #endregion

        #region LMA Disabled Tests
        ////////////////////////////////
        //  LMA Disabled API's
        ////////////////////////////////

        //These two tests are now blocked so here is the code to test them as such (the tests to verify 
        //LMA allowed are commented out above

        [TestCase]
        public class D_XeSubscriptionDetails : TestBase
        {
            protected override void Execute()
            {
                XRLXeSubscriptionDetails request = new XRLXeSubscriptionDetails();
                XRLXeSubscriptionDetailsResponse response = new XRLXeSubscriptionDetailsResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.GameRating = 1;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeSubscriptionEnumerate : TestBase
        {
            protected override void Execute()
            {
                XRLXeSubscriptionEnumerate request = new XRLXeSubscriptionEnumerate();
                XRLXeSubscriptionEnumerateResponse response = new XRLXeSubscriptionEnumerateResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.GameRating = 1;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeEnumerateGenres : TestBase
        {
            protected override void Execute()
            {
                XRLXeEnumerateGenres request = new XRLXeEnumerateGenres();
                XRLXeEnumerateGenresResponse response = new XRLXeEnumerateGenresResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.GameRating = 1;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeEnumerateTitlesByFilter : TestBase
        {
            protected override void Execute()
            {
                XRLXeEnumerateTitlesByFilter request = new XRLXeEnumerateTitlesByFilter();
                XRLXeEnumerateTitlesByFilterResponse response = new XRLXeEnumerateTitlesByFilterResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 12345679; // XeXbos.XbosGlobal.SilverUser.UserPuid;
                request.CountryId = 103;        // US
                request.LanguageId = 1;         // English
                request.StartIndex = 1;         // zero based
                request.MaxCount = 10;
                request.GameRating = XeXbos.XbosGlobal.ConstructRating(0, 6);  // US, Teen
                request.TierRequired = (byte)TierEnum.Silver;
                request.GenreId = (int)0x0000;  // all genres
                request.OfferType = (uint)OfferingTypeEnum.GameDemo | (uint)OfferingTypeEnum.GameTrailer;
                request.RequestFlags = 0x0;     // no flags

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeGetPointsPurchaseStatus : TestBase
        {
            protected override void Execute()
            {
                XRLXeGetPointsPurchaseStatusRequest request = new XRLXeGetPointsPurchaseStatusRequest();
                XRLXeGetPointsPurchaseStatusResponse response = new XRLXeGetPointsPurchaseStatusResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                
                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeGetTitleDetails : TestBase
        {
            protected override void Execute()
            {
                
                XRLXeGetTitleDetails request = new XRLXeGetTitleDetails();
                XRLXeGetTitleDetailsResponse response = new XRLXeGetTitleDetailsResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.TitleId = 0xffff0d14;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }
     
        [TestCase]
        public class D_XeAcknowledgeLicenseDelivery : TestBase
        {
            protected override void Execute()
            {
                
                XRLXeAcknowledgeLicenseDeliveryRequest request = new XRLXeAcknowledgeLicenseDeliveryRequest();
                XRLXeAcknowledgeLicenseDeliveryResponse response = new XRLXeAcknowledgeLicenseDeliveryResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.TitleId = 0xffff0d14;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }

        }

        [TestCase]
        public class D_XeBannerGetList : TestBase
        {
            protected override void Execute()
            {
                //bool success = true;
                XRLXeBannerGetList request = new XRLXeBannerGetList();
                XRLXeBannerGetListResponse_BaseList baselist = new XRLXeBannerGetListResponse_BaseList();
                XRLXeBannerGetListResponse_HotList hotlist = new XRLXeBannerGetListResponse_HotList();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;
                request.LangId = 1;

                // First test BannerList
                request.Level = (byte)XRLXeBannerGetList.BannerListLevel.BannerOnly;
                if (!request.Execute(out baselist))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeContentAvailable : TestBase
        {
            protected override void Execute()
            {

                XRLXeContentAvailable request = new XRLXeContentAvailable();
                XRLXeContentAvailableResponse response = new XRLXeContentAvailableResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeContentEnumerate2 : TestBase
        {
            protected override void Execute()
            {
                XRLXeContentEnumerate2 request = new XRLXeContentEnumerate2();
                XRLXeContentEnumerateResponse2 response = new XRLXeContentEnumerateResponse2();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789; 
                request.GameRating = 0xff;
                request.TierRequired = 3;
                request.TitleID = 0;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }
        }

        [TestCase]
        class D_XeContentHistoryEnumerate : TestBase
        {
            protected override void Execute()
            {
                XRLXeContentHistoryEnumerate request = new XRLXeContentHistoryEnumerate();
                XRLXeContentHistoryEnumerateResponse response = new XRLXeContentHistoryEnumerateResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                
                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeContentReferral : UserTestBase
        {
            //actual test
            override protected void Execute()
            {
                XRLXeContentReferral request = new XRLXeContentReferral();
                XRLXeContentReferralResponse response = new XRLXeContentReferralResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                
                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.ContentId = 45663216; 
                request.UserId = 123456798;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeContentUpdateAccessTimes : UserTestBase
        {
            private const uint _defaultTitle = 0x2D5A7D45;

            override protected void Execute()
            {
                XRLXeContentUpdateAccessTimes request = new XRLXeContentUpdateAccessTimes();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                
                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;
                request.TitleID = 0xff80524a;
                request.TitleCategories = 0xffffffff;

                //added to catch exceptions and free the user account
                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_ContentAvailable : TestBase
        {
            override protected void Execute()
            {
                XRLContentAvailable request = new XRLContentAvailable();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.CountryId = 103;
                request.TitleId = 0xffff0dff;
                request.BitFilter = 0xFFFF;
                request.EsrbRating = 0;
                request.LastChangeDate = DateTime.Now.AddYears(-10);
                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeGetRevocationList : TestBase
        {
            override protected void Execute()
            {
                XeGetRevocationListRequest request = new XeGetRevocationListRequest();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeAcquireVideoContentURL : TestBase
        {
            protected override void Execute()
            {
                XRLXeAcquireVideoContentURLRequest request = new XRLXeAcquireVideoContentURLRequest();
                XRLXeAcquireVideoContentURLResponse response = new XRLXeAcquireVideoContentURLResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeOfferPurchaseMusic : TestBase
        {
            protected override void Execute()
            {
                XRLXeOfferPurchaseMusicRequest request = new XRLXeOfferPurchaseMusicRequest();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeOfferPurchaseVideo : TestBase
        {
            protected override void Execute()
            {
                XRLXeOfferPurchaseVideoRequest request = new XRLXeOfferPurchaseVideoRequest();
                XRLXeOfferPurchaseVideoResponse response = new XRLXeOfferPurchaseVideoResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeAcquireVideoLicense : TestBase
        {
            protected override void Execute()
            {
                XRLXeAcquireVideoLicenseRequest request = new XRLXeAcquireVideoLicenseRequest();
                XRLXeAcquireVideoLicenseResponse response = new XRLXeAcquireVideoLicenseResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_XeWmdrmCreateCertificateRequest : TestBase
        {
            protected override void Execute()
            {
                XRLXeWmdrmCreateCertificateRequest request = new XRLXeWmdrmCreateCertificateRequest();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_OfferingEnumerate : TestBase
        {
            protected override void Execute()
            {
                XRLOfferingEnumerate request = new XRLOfferingEnumerate();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_OfferingDetailsNoUser : TestBase
        {
            protected override void Execute()
            {
                XRLOfferingDetailsNoUser request = new XRLOfferingDetailsNoUser();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_OfferingDetails : TestBase
        {
            protected override void Execute()
            {
                XRLOfferingDetails request = new XRLOfferingDetails();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_OfferingCancel : TestBase
        {
            protected override void Execute()
            {
                XRLOfferingCancel request = new XRLOfferingCancel();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_ContentReferral : TestBase
        {
            protected override void Execute()
            {
                XRLContentReferral request = new XRLContentReferral();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_VerifyNickname : TestBase
        {
            protected override void Execute()
            {
                XRLVerifyNickname request = new XRLVerifyNickname();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class D_OfferingPurchase : TestBase
        {
            protected override void Execute()
            {
                XRLOfferingPurchase request = new XRLOfferingPurchase();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks the

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        //[TestCase]
        //TODO:Cagood - I was unable to get this one to compile properly and so I had to take it out for now.
        //public class D_GetTitleActivationList : TestBase
        //{
        //    protected override void Execute()
        //    {
        //        GetTitleActivationListRequest request = new GetTitleActivationListRequest();
        //        //  This is the code that marks the request from a PC LMA account
        //        request.ManualPopulateSlot();
        //        request.Slot.authDataFlags |= 0x20;             //  LMA flag
        //        request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

        //        //  Parameters for the API (You really don't need to even fill these in, it should 
        //        //  block before it even checks the

        //        if (!request.Execute())
        //        {
        //            //  Verify that the the httpStatus is 404 -> NotFound after the request fails
        //            if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
        //                throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
        //            else
        //                ResultCode = TEST_RESULTS.PASSED;
        //        }
        //    }
        //}

        [TestCase]
        class D_TransferMachineLicense : UserTestBase
        {
            override protected void Execute()
            {
                XRLTransferMachineLicense request = new XRLTransferMachineLicense();
                
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_AssetConsume : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeAssetConsume request = new XRLXeAssetConsume();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_AssetEnumerate : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeAssetEnumerate request = new XRLXeAssetEnumerate();
                XRLXeAssetEnumerateResponse response = new XRLXeAssetEnumerateResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeMigrateXbox1User : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeMigrateXbox1User request = new XRLXeMigrateXbox1User();
                XRLXeMigrateXbox1UserResponse response = new XRLXeMigrateXbox1UserResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\Post.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.service;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.config;


namespace LMATests
{
    public class DvtUtil
    {
        public enum ValueTypes
        {
            Int32 = 0x1,
            Int64 = 0x2,
            Double = 0x4,
            All = 0x7
        }

        /// <summary>
        /// GenerateValues
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <param name="types">Count of different types to use (1, 2, or 3)</param>
        /// <returns>Array of values</returns>
        /// <remarks>
        /// Generates a range of values that fit the pattern:
        /// Int32, Int64, Double
        /// </remarks>
        public static ArrayList GenerateValues(int count, int seed, int step, ValueTypes types)
        {
            ArrayList values = new ArrayList(count);
            int currentType = (int)ValueTypes.All;

            if (types == 0)
            {
                throw new Exception("No value types specified");
            }

            for (int i = 0; i < count; i++)
            {
                // Pick the next type
                do
                {
                    currentType = currentType << 1;

                    if (currentType > (int)ValueTypes.All)
                    {
                        // Reset
                        currentType = (int)ValueTypes.Int32;
                    }
                } while ((currentType & (int)types) == 0);

                switch ((ValueTypes)currentType)
                {
                    case ValueTypes.Int32:
                        values.Add((Int32)(seed + (i * step)));
                        break;
                    case ValueTypes.Int64:
                        values.Add((Int64)(seed + (i * step)));
                        break;
                    case ValueTypes.Double:
                        values.Add((Double)(seed + (i * step)));
                        break;
                }
            }

            return values;
        }

        /// <summary>
        /// GenerateValues
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <returns>Array of Int16 values</returns>
        /// <remarks>
        /// Generates Int16 values that start with seed and increase with given step amount
        /// </remarks>
        public static ArrayList GenerateValues(int count, short seed, short step)
        {
            ArrayList values = new ArrayList(count);

            for (short i = 0; i < count; i++)
            {
                values.Add((Int16)seed + (Int16)(i * step));
            }

            return values;
        }

        /// <summary>
        /// GenerateInt32Values
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <returns>Array of Int32 values</returns>
        /// <remarks>
        /// Generates Int32 values that start with seed and increase with given step amount
        /// </remarks>
        public static ArrayList GenerateValues(int count, int seed, int step)
        {
            ArrayList values = new ArrayList(count);

            for (int i = 0; i < count; i++)
            {
                values.Add((Int32)seed + (Int32)(i * step));
            }

            return values;
        }

        /// <summary>
        /// GenerateValues
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <returns>Array of Int64 values</returns>
        /// <remarks>
        /// Generates Int64 values that start with seed and increase with given step amount
        /// </remarks>
        public static ArrayList GenerateValues(int count, long seed, long step)
        {
            ArrayList values = new ArrayList(count);

            for (long i = 0; i < count; i++)
            {
                values.Add((Int64)seed + (Int64)(i * step));
            }

            return values;
        }

        /// <summary>
        /// GenerateUser
        /// </summary>
        /// <returns>Randomly generated user id</returns>
        /// <remarks>
        /// Generates random user id value
        /// </remarks>
        public static UInt64 GenerateUser()
        {
            Random rnd = new Random();
            return ((UInt64)(0x0009FFFF00000000 + (ulong)(rnd.Next())));
        }

        /// <summary>
        /// GenerateUsers
        /// </summary>
        /// <param name="count">Count of user id's to create</param>
        /// <returns>List of user id's</returns>
        /// <remarks>
        /// Generates random user id values up to the count specified
        /// </remarks>
        public static ArrayList GenerateUsers(int count)
        {
            return GenerateUsers(count, false);
        }

        public static ArrayList GenerateUsers(int count, bool bKnownSeed)
        {
            Console.WriteLine("Generate {0} user id's", count);
            ArrayList users = new ArrayList((int)count);
            Random rnd = null;

            if (bKnownSeed)
                rnd = new Random(0); //helps with repeated debugging
            else
                rnd = new Random();

            for (int i = 0; i < count; i++)
            {
                users.Add((UInt64)(0x0009FFFF00000000 + (ulong)(rnd.Next())));
            }

            return users;
        }

        /// <summary>
        /// GenerateColumnIds
        /// </summary>
        /// <param name="count">Count of column id's to generate</param>
        /// <param name="seed">Starting value of column id's</param>
        /// <param name="step">Step value between each id</param>
        /// <returns>Array of column id values</returns>
        /// <remarks>
        /// Generates 1-based column ID's.
        /// Useful for statid's in a leaderboard
        /// </remarks>
        public static ArrayList GenerateColumnIds(ushort count, ushort seed, ushort step)
        {
            ArrayList columnIds = new ArrayList();

            for (ushort i = 0; i < count; i += step)
            {
                columnIds.Add((UInt16)(i + seed));
            }

            return columnIds;
        }

        /// <summary>
        /// GetStatParamType
        /// </summary>
        /// <param name="data">Data value</param>
        /// <returns>StatParam type</returns>
        /// <remarks>
        /// Takes data's .Net type and returns a compatible StatParam type
        /// </remarks>
        public static byte GetStatParamType(object data)
        {
            byte type;

            if (data is System.Byte)
            {
                type = StatParam.Int8;
            }
            else if (data is System.Int16)
            {
                type = StatParam.Int16;
            }
            else if (data is System.Int32)
            {
                type = StatParam.Int32;
            }
            else if (data is System.Int64)
            {
                type = StatParam.Int64;
            }
            else if (data is System.Double)
            {
                type = StatParam.Float;
            }
            else if (data is System.String)
            {
                type = StatParam.Utf8string;
            }
            else
            {
                throw new Exception("Invalid type " + data.GetType().ToString() + " for StatParam");
            }

            return type;
        }

        /// <summary>
        /// AddValueArrays
        /// </summary>
        /// <param name="values1">Input array 1</param>
        /// <param name="values2">Input array 2</param>
        /// <returns>Array of results</returns>
        /// <remarks>
        /// Adds each value from one array to the other and returns the resulting array.
        /// Types are managed properly to match the StatParam type.
        /// </remarks>
        public static ArrayList AddValueArrays(ArrayList values1, ArrayList values2)
        {
            if (values1.Count != values2.Count)
            {
                throw new Exception("values1 and values2 are not equal size");
            }

            ArrayList results = new ArrayList(values1.Count);

            for (int i = 0; i < values1.Count; i++)
            {
                switch (GetStatParamType(values1[i]))
                {
                    case StatParam.Int8:
                        results.Add((Byte)((int)values1[i] + (int)values2[i]));
                        break;
                    case StatParam.Int16:
                        results.Add((Int16)((int)values1[i] + (int)values2[i]));
                        break;
                    case StatParam.Int32:
                        results.Add((Int32)((int)values1[i] + (int)values2[i]));
                        break;
                    case StatParam.Int64:
                    case StatParam.Puid:
                        {
                            long val = (long)values1[i] + (long)values2[i];
                            results.Add((Int64)((long)values1[i] + (long)values2[i]));
                        }
                        break;
                    case StatParam.Float:
                        {
                            double val = (double)values1[i] + (double)values2[i];
                            results.Add((Double)((double)values1[i] + (double)values2[i]));
                        }
                        break;
                }
            }

            return results;
        }

        /// <summary>
        /// MaxValueArrays
        /// </summary>
        /// <param name="values1">Input array 1</param>
        /// <param name="values2">Input array 2</param>
        /// <returns>Array of results</returns>
        /// <remarks>
        /// Pick max value from one array against the other and returns the resulting array.
        /// Types are managed properly to match the StatParam type.
        /// </remarks>
        public static ArrayList MaxValueArrays(ArrayList values1, ArrayList values2)
        {
            if (values1.Count != values2.Count)
            {
                throw new Exception("values1 and values2 are not equal size");
            }

            ArrayList results = new ArrayList(values1.Count);

            for (int i = 0; i < values1.Count; i++)
            {
                switch (GetStatParamType(values1[i]))
                {
                    case StatParam.Int8:
                    case StatParam.Int16:
                    case StatParam.Int32:
                        if ((int)values1[i] > (int)values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Int64:
                    case StatParam.Puid:
                        if ((long)values1[i] > (long)values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Float:
                        if ((double)values1[i] > (double)values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                }
            }

            return results;
        }

        /// <summary>
        /// MinValueArrays
        /// </summary>
        /// <param name="values1">Input array 1</param>
        /// <param name="values2">Input array 2</param>
        /// <returns>Array of results</returns>
        /// <remarks>
        /// Pick min value from one array against the other and returns the resulting array.
        /// Types are managed properly to match the StatParam type.
        /// </remarks>
        public static ArrayList MinValueArrays(ArrayList values1, ArrayList values2)
        {
            if (values1.Count != values2.Count)
            {
                throw new Exception("values1 and values2 are not equal size");
            }

            ArrayList results = new ArrayList(values1.Count);

            for (int i = 0; i < values1.Count; i++)
            {
                switch (GetStatParamType(values1[i]))
                {
                    case StatParam.Int8:
                    case StatParam.Int16:
                    case StatParam.Int32:
                        if ((int)values1[i] < (int)values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Int64:
                    case StatParam.Puid:
                        if ((long)values1[i] < (long)values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Float:
                        if ((double)values1[i] < (double)values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                }
            }

            return results;
        }
    }

    public class LMAStatsPost : TestNode
    {
        [TestCase]
        public void StatPost()
        {
            byte[] responseData;
            byte[] bytes = new byte [256];
            string data = "test";
            string authData = new HTTPAuthData().ConstructBase64String();
            XrlRequest req = new XrlRequest();
            
            uint hr = XRLUtil.PostXrlRequest(XOService.Stats, data, (string)null, bytes, (WebHeaderCollection)null, out responseData);
            Console.WriteLine("HR: " + hr.ToString("x8"));
            if (responseData == null)
                Console.WriteLine("No Data returned");
            else
                Console.WriteLine(ByteConvert.ToFormattedStrings(responseData));
       

        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\LMATests.cs ===
using System;
using System.IO;
using System.Net;
using System.Xml;
using System.Text;
using System.Collections;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.UserSettings;
using xonline.common.config;
using xonline.common.service;
using MS.Swi.Mitm;
using MS.Swi.Mitm.Services;
using ServerTestFramework.LiveService.Achievement;
using ServerTestFramework.Utilities.FclFuzzer;
using LMATests.Functional;
using LMATests.Attacks;



namespace LMATests
{
    /// <summary>
    /// Limited Machine Account Fuzz and Verification testing of LIVE API's
    /// For more information, see: http://xblwiki/default.aspx/XboxLive/LMATests.html
    /// </summary>
    public class LMATests : ServerTestFramework.TestSuite
    {
        public static bool m_EnableFuzzTesting = false;

        public LMATests()
        {
            // TODO: Constructor logic if needed

            //functional tests
            AddChild(new LMAXeUacs());
            AddChild(new LMABilling());
            AddChild(new LMAttacks());
            AddChild(new LMAStats());;
            AddChild(new Query());
            AddChild(new Presence());
            AddChild(new FuncCron());
            AddChild(new LMAStatsPost());
            AddChild(new StringSvrTests());
            AddChild(new XMatchTests());
            AddChild(new XStoreTests());
            AddChild(new FeedbackTests());

            //stress tests
            System.Collections.Generic.List<System.Type> stress=new System.Collections.Generic.List<System.Type>();
            GetUacsStressTests(ref stress);
            GetBillingStressTests(ref stress);
            GetStringSvcTests(ref stress);
            GetFeedbackTests(ref stress);

            foreach (System.Type t in stress)
            {
                TestNode n=TestNode.ConstructFromType(t);
                AddChild(n, false, true);
            }
        }

        public override void InitializeStress(XmlDocument config)
        {
            FclFuzzer.Initialize();
            m_EnableFuzzTesting = true;
        }

        override public void Initialize(XmlDocument config)
        {
            FclFuzzer.Initialize();
            m_EnableFuzzTesting = true;

            int needflush = -1;
            // Let the fake SG know where to send state updates
            GlobalFakeSG.FakeSG.SetStateEndpoint(Global.XEnv.GetVirtualInterface(VirtualInterface.xpnfd_presence).ToString());

            //DBHelper.ClearTestSettings();

            //Clear the cached profile settings (from possibly last run of these tests) from XBanc
            XBanc xb = new XBanc();
            //all the profile keys start with the common prefix profile, so remove them by prefix!
            byte[] key = new byte[] { (byte)'P', (byte)'r', (byte)'o', (byte)'f', (byte)'i', (byte)'l', (byte)'e' };
            xb.Remove(key, false);

            Type UserSettings = typeof(TestUSetting);

            foreach (string s in Enum.GetNames(UserSettings))
            {
                if (s == "Test_Activity")
                    needflush = DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", PROFILE_FLG.XPROFILE_SETTING_ENFORCE_ACTIVITY);
                else if (s == "Test_UCC")
                    DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", PROFILE_FLG.XPROFILE_SETTING_ENFORCE_UCC);
                else if (s == "Test_Console_RO")
                    DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", PROFILE_FLG.XPROFILE_SETTING_ENFORCE_CONSOLE_RO);
                else if (s == "Test_Web_RO")
                    DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", PROFILE_FLG.XPROFILE_SETTING_ENFORCE_WEB_RO);
                else if (s == "Test_Title_RO")
                    DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", PROFILE_FLG.XPROFILE_SETTING_ENFORCE_TITLE_RO);
                else if (s == "Test_Not_Shared")
                    DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", PROFILE_FLG.XPROFILE_SETTING_ENFORCE_NOT_SHARED);
                else if (s == "Test_Friend_Only")
                    DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", PROFILE_FLG.XPROFILE_SETTING_ENFORCE_FRIENDS_ONLY);
                else
                    DBHelper.AddSetting(((int)Enum.Parse(UserSettings, s)), s, "t_user_settings", 0);

            }

            int max = 128;
            for (int i = 1; i < max; i++)
            {
                needflush = DBHelper.AddSetting((int)TestUSetting.Test_bMaxNo + i, (TestUSetting.Test_bMaxNo.ToString() + i), "t_user_settings", 0);

            }

            //if(needflush>0)
            Global.XEnv.ExecuteXmgmtCommand(Interface.xstatsfd, "e :xstatsfd cacheflush");

            int maxuser = GSLimits.XONLINE_MAX_SETTING_USERS + 5;
            if (UserSettingBase.gusers.Count != maxuser)
            {
                for (int i = 1; i <= maxuser; i++)
                {
                    UserSettingBase.gusers.Add("User" + i, (ulong)(9000 + i));

                }
                GetSettingBase.gusers = UserSettingBase.gusers;
            }

            uint[] titles = new uint[47];
            for (int tidx = 0; tidx < 45; tidx++)
            {
                titles[tidx] = (uint)(50 + tidx);
            }
            titles[45] = (uint)150;
            titles[46] = (uint)151;

            TitleBase.gconfig.Load(titles);
            EnumBase.gconfig = TitleBase.gconfig;
            AchivementBase.gconfig = TitleBase.gconfig;
        }

        public void GetUacsStressTests(ref System.Collections.Generic.List<TestNode> Tests)
        {
            if (Tests != null)
            {
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeABCHGetContactlistGamertags_userPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeABCHGetContactlistGamertags_profile));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeABCHGetContactlistGamertags_queryAtLoginForUsersInABCHandXBL));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeABCHGetContactlistGamertags_queryAtSignupForUsersInABCHandXBL));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeABCHGetContactlistGamertags_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserWebInfo_userPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserWebInfo_serviceType));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserWebInfo_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpsUpdateProfile_profileLength));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpsUpdateProfile_profile));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpsUpdateProfile_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserSubscriptionDetails_userPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserSubscriptionDetails_machinePuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserSubscriptionDetails_offerId));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserSubscriptionDetails_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeAcknowledgeDowngrade_userPuid));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetAccountInfoFromPassport_signedPassportPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetAccountInfoFromPassport_machinePuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetAccountInfoFromPassport_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserInfo_machinePuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserInfo_userPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserInfo_titleId));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetUserInfo_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XePassportGetUserData_sessionToken));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeRecoverAccount_machinePuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeRecoverAccount_signedPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeRecoverAccount_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_machinePuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_titleId));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_signedParentPassportPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_parentPassportmemberNameLength));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_parentPassportmemberName));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_languageId));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_countryId));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_firstNameLength));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_firstName));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_lastNameLength));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_lastName));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_emailLength));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_email));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_addressInfo));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_phoneInfo));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_creditCardInfo));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeVerifyParentCreditCard_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetPointsBalance_machinePuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetPointsBalance_userPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeGetPointsBalance_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpdateParentalControls_userPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpdateParentalControls_userGrantPrivileges));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpdateParentalControls_userRestrictPrivileges));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpdateParentalControls_sourceLength));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpdateParentalControls_source));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpdateParentalControls_RandomFuzz));

                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpsGetProfile_userPuid));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpsGetProfile_attributesLength));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpsGetProfile_attributes));
                Tests.Add(typeof(LMAXeUacs.XeUacs_XeUpsGetProfile_RandomFuzz));
            }
        }

        public void GetBillingStressTests(ref System.Collections.Generic.List<TestNode> Tests)
        {
            if (Tests != null)
            {
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_countryID));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_languageID));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_offerID));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_offerIDs));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_offers));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_paymentType));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_ratingSystem));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_tierRequired));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_userPuid));
                Tests.Add(typeof(LMABilling.Billing_XeContentDetails_RandomFuzz));

                Tests.Add(typeof(LMABilling.Billing_XeContentRefreshLicense_userId));
                Tests.Add(typeof(LMABilling.Billing_XeContentRefreshLicense_machineId));
                Tests.Add(typeof(LMABilling.Billing_XeContentRefreshLicense_licenseLength));
                Tests.Add(typeof(LMABilling.Billing_XeContentRefreshLicense_license));
                Tests.Add(typeof(LMABilling.Billing_XeContentRefreshLicense_RandomFuzz));

                Tests.Add(typeof(LMABilling.Billing_XeOfferingVerifyToken_countryId));
                Tests.Add(typeof(LMABilling.Billing_XeOfferingVerifyToken_voucherLength));
                Tests.Add(typeof(LMABilling.Billing_XeOfferingVerifyToken_voucher));
                Tests.Add(typeof(LMABilling.Billing_XeOfferingVerifyToken_RandomFuzz));

                //  These are commented out because they were dropped as LMA allowed
                //  However I have left the code intact but commented out if they are ever
                //  LMA allowed once again.
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_userPuid));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_machinePuid));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_countryID));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_languageID));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_offerID));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_paymentType));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_tierRequired));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_ratingSystem));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionDetails_RandomFuzz));

                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_userPuid));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_machinePuid));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_userTier));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_countryID));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_languageID));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_gameRating));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_offerType));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_paymentType));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_titleID));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_titleCategories));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_requestFlags));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_startingIndex));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_maxResults));
                //Tests.Add(typeof(LMABilling.Billing_XeSubscriptionEnumerate_RandomFuzz));


                Tests.Add(typeof(LMABilling.Billing_AutoupdReferral_machinePuid));
                Tests.Add(typeof(LMABilling.Billing_AutoupdReferral_titleId));
                Tests.Add(typeof(LMABilling.Billing_AutoupdReferral_baseVersion));
                Tests.Add(typeof(LMABilling.Billing_AutoupdReferral_RandomFuzz));
            }
        }

        private void GetStringSvcTests(ref System.Collections.Generic.List<TestNode> Tests)
        {
            if (Tests == null)
            {
                return;
            }

            Tests.Add(typeof(StringSvrTests.Fuzz_GetString2));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString2_dwTitleID));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString2_rgdwStringIDs));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString2_szLocale));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString2_wLocaleLen));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString2_wNumStrings));

            Tests.Add(typeof(StringSvrTests.Fuzz_GetString));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString_dwTitleID));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString_rgdwStringIDs));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString_wLanguage));
            Tests.Add(typeof(StringSvrTests.Fuzz_GetString_wNumStrings));

            Tests.Add(typeof(StringSvrTests.Fuzz_MsgServer));
            Tests.Add(typeof(StringSvrTests.Fuzz_MsgServer_rgdwTitleIDs));
            Tests.Add(typeof(StringSvrTests.Fuzz_MsgServer_wLanguage));
            Tests.Add(typeof(StringSvrTests.Fuzz_MsgServer_wNumTitles));
            Tests.Add(typeof(StringSvrTests.Fuzz_MsgServer_wType));
        }

        private void GetFeedbackTests(ref System.Collections.Generic.List<TestNode> Tests)
        {
            if (Tests == null)
            {
                return;
            }

            Tests.Add(typeof(FeedbackTests.Feedback_Complaints_All));
            Tests.Add(typeof(FeedbackTests.Feedback_Complaints_Context));
            Tests.Add(typeof(FeedbackTests.Feedback_Complaints_SenderPUID));
            Tests.Add(typeof(FeedbackTests.Feedback_Complaints_TargetPUID));
            Tests.Add(typeof(FeedbackTests.Feedback_Complaints_TitleID));
            Tests.Add(typeof(FeedbackTests.Feedback_Complaints_Type));

            Tests.Add(typeof(FeedbackTests.Feedback_Review_All));
            Tests.Add(typeof(FeedbackTests.Feedback_Review_Context));
            Tests.Add(typeof(FeedbackTests.Feedback_Review_SenderPUID));
            Tests.Add(typeof(FeedbackTests.Feedback_Review_TargetPUID));
            Tests.Add(typeof(FeedbackTests.Feedback_Review_TitleID));
            Tests.Add(typeof(FeedbackTests.Feedback_Review_Type));
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\Globals.cs ===
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;
using System;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Comps;

namespace LMATests
{
    public class Globals
    {
        public const uint Expected_XDelay_Create       = 0;
        public const uint Expected_XDelay_Delete       = 0;
        public const uint Expected_XDelay_Manage       = 0;
        public const uint Expected_XDelay_ManageMember = 0;
        public const uint Expected_XDelay_GetTicket    = 0;


        // Initalize global PNUser creattion and manipulation stuff
        static public FriendsCommon Fc = new FriendsCommon();

        //////////////////////////////////////
        /// <summary>
        /// Gets ID of indexed shared title
        /// </summary>
        /// <param name="iTitleId">Title number</param>
        /// <returns>Title Id</returns>
        public static uint DefTitle( uint iTitleId )
        {
            return sharedTitleIds[iTitleId-1];
        }
        private static uint[] sharedTitleIds = { 0x10, 0x20, 0x30, };

        //////////////////////////////////////
        /// <summary>
        /// Creates a new user that belongs to no teams on any title we use
        ///  logged into the indexed title.
        /// </summary>
        /// <param name="iTitleId">Title number (1 or 2)</param>
        /// <returns>Pristine new user, logged in and ready for action</returns>
        public static PNUser CreateCleanUser( uint iTitleId )
        {
            PNUser user = Fc.CreatePanoramaUser(false);    
            Fc.LogonUser( user, sharedTitleIds[ iTitleId-1 ] );

            return user;
        }            

        /////////////////////////////////////
        /// <summary>
        /// Gets ID of indexed shared deleted team
        /// </summary>
        /// <param name="iTeamId">Team number</param>
        /// <returns>Team Id</returns>
        public static ulong DeletedTeam( uint iTeamId )
        {
            if( sharedDeletedTeamIds[iTeamId-1] == 0 )
            {
                PNUser user = Globals.CreateCleanUser( 1 );
                Team team = new Team();
                ulong teamId = team.Create( user );
                team.ValidateTeam( user );
                team.Delete( user );

                Team[] teams = user.GetTeamList();
                ValueCheck.Test( "Team Count", 0, teams.Length );

                sharedDeletedTeamIds[iTeamId-1] = teamId;
            }
            
            return sharedDeletedTeamIds[iTeamId-1];
        }
        private static ulong[] sharedDeletedTeamIds = new ulong[ XonPresNoti.MAX_TEAM_COUNT ];

        //////////////////////////////////////
        /// <summary>
        /// Gets a list of Team IDs from the MaxMixed UserTeams group
        /// </summary>
        /// <param name="length">Number of team Ids to get</param>
        /// <returns>List of valid team Ids</returns>
        public static ulong[] MixedTeamIds( uint length )
        {
            UserTeams userTeams = MaxMixed;
            ulong[] mixedTeamIds = userTeams.GetTeamIds( userTeams.User.Xbox.TitleId, true );

            ulong[] teamIds = new ulong[ length ];
            for( uint i = 0; i < length; ++i )
            {
                teamIds[i] = mixedTeamIds[ i+4 ];
            }
            return teamIds;
        }    

        //////////////////////////////////////
        /// <summary>
        /// A user with puid 0, 
        ///  and a valid FakeSG xbox that's not logged on
        /// </summary>
        public static PNUser ZeroUser 
        {
            get
            {
                if( zeroUser == null )
                {
                    zeroUser = new PNUser( "StfZero", 0 );
                    zeroUser.Xbox = new PNXbox();
                }
                return zeroUser;
            }
            set{ zeroUser = value; }
        }
        private static PNUser zeroUser = null;


        //////////////////////////////////////
        /// <summary>
        /// A user with a (hopefully) unused puid, 
        ///  and a valid FakeSG xbox that's not logged on
        /// </summary>
        public static PNUser InvalidUser 
        {
            get
            {
                if( invalidUser == null )
                {
                    invalidUser = new PNUser( "StfInvalid", 0xfefe000000000000 );
                    invalidUser.Xbox = new PNXbox();
                }
                return invalidUser;
            }
            set{ invalidUser = value; }
        }
        private static PNUser invalidUser = null;

        //////////////////////////////////////
        /// <summary>
        /// Team group of a user that has created a user's maximum number of teams
        /// </summary>
        public static UserTeams MaxCreated
        {
            get
            {
                if( maxCreated == null )
                {
                    PNUser creator = CreateCleanUser( 1 );
                    UserTeams ut = new UserTeams( creator );
                    for( int i = 0; i < XonPresNoti.MAX_TEAM_COUNT; ++i )
                    {
                        Team team = new Team();
                        team.Create( creator );
                        ut.Add( team );
                    }
                    maxCreated = ut;
                }
                return maxCreated;
            }    
            set
            {
                maxCreated = value;
            }
        }
        private static UserTeams maxCreated = null;


        //////////////////////////////////////
        /// <summary>
        /// Team group of a user that has joined a user's maximum number of teams
        /// </summary>
        public static UserTeams MaxJoined
        {
            get
            {
                if( maxJoined == null )
                {
                    PNUser creator = CreateCleanUser( 1 );
                    PNUser joiner  = CreateCleanUser( 1 );
                    UserTeams ut = new UserTeams( joiner );
                    for( int i = 0; i < XonPresNoti.MAX_TEAM_COUNT; ++i )
                    {
                        Team team = new Team();
                        team.Create( creator );
                        team.AddMember( creator, joiner );
                        ut.Add( team );
                    }
                    maxJoined = ut;
                }
                return maxJoined;
            }    
            set
            {
                maxJoined = value;
            }
        }
        private static UserTeams maxJoined = null;

        //////////////////////////////////////
        /// <summary>
        /// Team group of a user that has been recruited to a user's maximum number of teams
        /// </summary>
        public static UserTeams MaxRecruited
        {
            get
            {
                if( maxRecruited == null )
                {
                    PNUser recruit = CreateCleanUser( 1 );
                    UserTeams ut = new UserTeams( recruit );
                    for( int i = 0; i < XonPresNoti.MAX_TEAM_RECRUIT_COUNT; ++i )
                    {
                        PNUser creator = CreateCleanUser( 1 );
                        Team team = new Team();
                        team.Create( creator );
                        TeamMember recruitedMember = new TeamMember( team, recruit );
                        team.Recruit( creator, recruitedMember, UserMessage.CreateTeamRecruitMsg( creator, team.Id ) );
                        ut.Add( team );
                    }
                    maxRecruited = ut;
                }
                return maxRecruited;
            }    
            set
            {
                maxRecruited = value;
            }
        }
        private static UserTeams maxRecruited = null;


        //////////////////////////////////////
        /// <summary>
        /// Team group of a user that has been created, joined, or been recruited to a user's maximum number of teams
        /// </summary>
        public static UserTeams MaxMixed
        {
            get
            {
                if( maxMixed == null )
                {
                    PNUser otherCreator = null;
                    PNUser user = CreateCleanUser( 1 );
                    UserTeams ut = new UserTeams( user );
                    for( int i = 0; i < (XonPresNoti.MAX_TEAM_COUNT + XonPresNoti.MAX_TEAM_RECRUIT_COUNT - 1); ++i )
                    {
                        if( 0 == (i % XonPresNoti.MAX_TEAM_COUNT) )
                        {
                            otherCreator = CreateCleanUser( 1 );
                        }

                        Team team = new Team();

                        if( i < (XonPresNoti.MAX_TEAM_COUNT / 2) )
                        {
                            team.Create( user );
                        }
                        else if( i < (XonPresNoti.MAX_TEAM_COUNT - 1) )
                        {
                            team.Create( otherCreator );
                            team.AddMember( otherCreator, user );
                        }
                        else
                        {
                            team.Create( otherCreator );
                            TeamMember recruit = new TeamMember( team, user );
                            team.Recruit( otherCreator, recruit, UserMessage.CreateTeamRecruitMsg( otherCreator, team.Id ) );
                        }

                        ut.Add( team );
                    }
                    maxMixed = ut;
                }
                return maxMixed;
            }    
            set
            {
                maxMixed = value;
            }
        }
        private static UserTeams maxMixed = null;

        //////////////////////////////////////
        /// <summary>
        /// Team group of a user that has only created one team
        /// </summary>
        public static UserTeams OneCreated
        {
            get 
            {
                if( oneCreated != null )
                {
                    TeamTicket ticket = oneCreated.User.GetTeamTicket();
                    if( ticket.teamIDsLen != 1 )
                    {
                        oneCreated = null;
                    }
                }

                if( oneCreated == null )
                {
                    PNUser creator = CreateCleanUser( 1 );
                    UserTeams ut = new UserTeams( creator );
                    Team team = new Team();
                    team.Create( creator );
                    ut.Add( team );
                    oneCreated = ut;
                }
                
                return oneCreated;
            }    
            set
            {
                oneCreated = value;
            }
        }
        private static UserTeams oneCreated = null;

        public static UserTeams OneRecruited
        {
            get
            {
                if( oneRecruited != null )
                {
                    TeamTicket ticket = oneRecruited.User.GetTeamTicket();
                    if( ticket.teamIDsLen != 1 )
                    {
                        oneRecruited = null;
                    }
                }
        
                if( oneRecruited == null )
                {
                    PNUser creator = CreateCleanUser( 1 );
                    Team team = new Team();
                    team.Create( creator );

                    PNUser recruit = CreateCleanUser( 1 );
                    UserTeams ut = new UserTeams( recruit );

                    TeamMember member = new TeamMember( team, recruit );
                    team.Recruit( creator, member, UserMessage.CreateBlank() );
                    ut.Add( team );
                    oneRecruited = ut;
                }
                
                return oneRecruited;
            }
            set
            {
                oneRecruited = value;
            }
        }
        private static UserTeams oneRecruited;
    }
    public class CompsGlobal
    {
        static public uint procIndex = 1;
        static public uint titleId = 0x673;
        static public uint datasetId = 1;
        static public Report report = new Report("FuncComps");

        static public QueryXrlFactory comps;
        static public QueryXrlFactory entrants;
        static public QueryXrlFactory events;

        public const uint SmokeTitleId = 0x4d2;
        public const uint TestTitleId = 0x673;
        public const int SlottingDelayMillis = 10000;
        public const int SubmissionDelayMillis = 10000;

        //TitleId
        public static TitleTrustConstants myTitleTrustConstants = new TitleTrustConstants(0x000673, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.25, 2.0, 4.0, 2592000, 5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0, 2.0, 8.0, 16.0, 32.0, 64.0, 0.0, 0.0, 0.0, 1.0, 8, 4, 2, 1, 1, 2, 4, 8, new DateTime(DateTime.Now.Ticks));

        public CompsGlobal()
        {
            ulong userPuid = new RandomEx().NextPuid();

            comps = new QueryXrlFactory(0x0000673, 0x1, userPuid, 0);
            entrants = new QueryXrlFactory(0x0000673, 0x2, userPuid, 0);
            events = new QueryXrlFactory(0x0000673, 0x3, userPuid, 0);

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\Query.cs ===
// 
// FuncQuery.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Query service functional test group.
// Xbox Online Service
// 
// Author: jacobr
//

using System;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Comps;
using RandomEx = ServerTestFramework.Core.Utilities.RandomEx;

namespace LMATests
{
    /// <summary> 
    ///        Functional test cases for the base Query service API.
    ///    </summary>
    [TestGroup, Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    public class Query:TestNode
    {

        abstract class QueryTestBase : TestBase
        {
            public static Report report = new Report(Global.RO, "FuncQuery");
            public QueryXrlFactory factory;

            public const uint XONLINE_QUERY_ENTITY_ID                 = 0x80000000;
            public const uint XONLINE_QUERY_OWNER_PUID                = 0x80000001;
        
            public const uint XONLINE_QUERY_ATTR_INT1                 = 0x00000001;
            public const uint XONLINE_QUERY_ATTR_INT2                 = 0x00000002;
            public const uint XONLINE_QUERY_ATTR_STRING1              = 0x00100003;
            public const uint XONLINE_QUERY_ATTR_STRING2              = 0x00100004;
            public const uint XONLINE_QUERY_ATTR_BLOB1                = 0x00200005;

            public QueryTestBase()
            {
                // create the XRL factory to point at the smoke dataset
                factory = new QueryXrlFactory(CompsGlobal.SmokeTitleId, 0x1, RandomEx.GlobalRandGen.NextPuid(), 0);
            }

#region attribute

            public QueryAttributeBag CreateAttrs(long l1, long l2, string str1, string str2, byte[] bin1)
            {
                QueryAttributeBag bag = new QueryAttributeBag(5);
                bag.AppendLong(XONLINE_QUERY_ATTR_INT1, l1);
                bag.AppendLong(XONLINE_QUERY_ATTR_INT2, l2);
                bag.AppendString(XONLINE_QUERY_ATTR_STRING1, str1); 
                bag.AppendString(XONLINE_QUERY_ATTR_STRING2, str2); 
                bag.AppendBlob(XONLINE_QUERY_ATTR_BLOB1, bin1);

                return bag;
            }

            public QueryAttributeBag CreateMatchAttrs(QueryAttributeBag matchAttrs)
            {
                QueryAttributeBag attrs = new QueryAttributeBag(5);
                
                attrs.Attributes[0] = matchAttrs.Attributes[0]; // '==' int1
                attrs.Attributes[1] = matchAttrs.Attributes[1]; // '==' int2
                attrs.Attributes[2] = matchAttrs.Attributes[2]; // '==' str1
                attrs.Attributes[3] = matchAttrs.Attributes[3]; // '==' str2
                attrs.Attributes[4] = matchAttrs.Attributes[4]; // '==' blob1

                return attrs;
            }

            public QueryAttributeBag CreateFourAttrsFromFive(QueryAttributeBag removeAttrs)
            {
                //HACK: see Xbox Platform bug #38329 - p_query_remove_000004d2_1_1 only accepts 4 properties to match on, corresponding add and search operations support 5
                QueryAttributeBag attrs = new QueryAttributeBag(4);
                
                attrs.Attributes[0] = removeAttrs.Attributes[1]; // '==' int2
                attrs.Attributes[1] = removeAttrs.Attributes[2]; // '==' str1
                attrs.Attributes[2] = removeAttrs.Attributes[3]; // '==' str2
                attrs.Attributes[3] = removeAttrs.Attributes[4]; // '==' blob1

                return attrs;
            }

            public QueryAttributeBag CreateBadRemoveAttrs(QueryAttributeBag origAttrs)
            {
                QueryAttributeBag attrs = new QueryAttributeBag(4);
                
                // 1st attribute is actually supposed to be XONLINE_QUERY_ATTR_INT2
                attrs.AppendLong(XONLINE_QUERY_ATTR_STRING2, 0); // '==' int2
                attrs.Attributes[1] = origAttrs.Attributes[2]; // '==' str1
                attrs.Attributes[2] = origAttrs.Attributes[3]; // '==' str2
                attrs.Attributes[3] = origAttrs.Attributes[4]; // '==' blob1

                return attrs;
            }

            public QueryAttributeBag CreateDefaultAttrs()
            {
                return CreateAttrs(1234, 4321, "Test string1", "Test string2", new byte[] { 0x1, 0x2, 0x3, 0x4, 0x3, 0x2, 0x1});
            }
            public QueryAttributeBag CreateDefaultAttrs2()
            {
                return CreateAttrs(5678, 8765, "Test string3", "Test string4", new byte[] { 0xc, 0xb, 0xa, 0xf, 0xe, 0xe, 0xd});
            }

            public QueryAttributeBag CreateBadDefaultAttrs()
            {
                QueryAttributeBag bag = new QueryAttributeBag(5);
                bag.AppendLong(XONLINE_QUERY_ATTR_INT1, 1234);
                bag.AppendString(0x00100002, "4321"); // actually XONLINE_QUERY_ATTR_INT2
                bag.AppendString(XONLINE_QUERY_ATTR_STRING1, "Test string1"); 
                bag.AppendString(XONLINE_QUERY_ATTR_STRING2, "Test string2"); 
                bag.AppendBlob(XONLINE_QUERY_ATTR_BLOB1, new byte[] { 0x1, 0x2, 0x3, 0x4, 0x3, 0x2, 0x1});

                return bag;
            }

            public QueryAttributeSpecBag CreateDefaultAttrSpecs()
            {
                QueryAttributeSpecBag specs = new QueryAttributeSpecBag(6);
                specs.AppendIntSpec(); // entity ID
                specs.AppendIntSpec(); // int 1
                specs.AppendIntSpec(); // int 2
                specs.AppendStringSpec(); // string 1
                specs.AppendStringSpec(); // string 2
                specs.AppendBlobSpec();  // blob 1

                return specs;
            }

            public QueryAttributeSpecBag CreateBadDefaultAttrSpecs()
            {
                QueryAttributeSpecBag specs = new QueryAttributeSpecBag(6);
                specs.AppendIntSpec(); // entity ID
                specs.AppendIntSpec(); // int 1
                specs.AppendIntSpec(); // int 2
                specs.AppendStringSpec(); // string 1
                specs.AppendIntSpec(); // actually supposed to be string 2
                specs.AppendBlobSpec();  // blob 1

                return specs;
            }

        }
#endregion
        [TestCase]
            class Query_Add:QueryTestBase
        {
            protected override void Execute()
            {
                ulong userId = RandomEx.GlobalRandGen.NextPuid();
                QueryAttributeBag attrs = CreateDefaultAttrs();
                XrlAdd add = factory.CreateAdd(attrs);
                add.userId = userId;

                //  This is the code that marks the request from a PC LMA account
                add.ManualPopulateSlot();
                add.Slot.authDataFlags |= 0x20;             //  LMA flag
                add.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                try
                {

                    add.ExecuteSafe();
                }
                catch (Exception)
                {
                    if (add.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + add.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                    return;

                }

                ResultCode = TEST_RESULTS.FAILED;   
            }
        }


        [TestCase]
            class Query_RemoveId:QueryTestBase
        {
            protected override void Execute()
            {
                ulong userId = RandomEx.GlobalRandGen.NextPuid();
                ulong entityId = RandomEx.GlobalRandGen.NextUlong();

                XrlRemoveId request = factory.CreateRemoveId(entityId);
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                request.userId = userId;
               
                try
                {
                    request.ExecuteSafe();
                }
                catch (Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
                }
                ResultCode = TEST_RESULTS.FAILED;
            }
        }


        [TestCase]
            class Query_UpdateId:QueryTestBase
        {
            protected override void Execute()
            {
                ulong userId = RandomEx.GlobalRandGen.NextPuid();
                ulong entityId = RandomEx.GlobalRandGen.NextUlong();
                QueryAttributeBag attrs = CreateDefaultAttrs2();
                XrlUpdateId request = factory.CreateUpdateId(1, entityId, attrs);
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                request.userId = userId;
                try
                {
                    
                    request.ExecuteSafe();
                }
                catch (Exception)
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                    return;

                }

                ResultCode = TEST_RESULTS.FAILED;   
            }
        }

        [TestCase]
            class Query_Remove:QueryTestBase
        {
            protected override void Execute()
            {
                ulong userId = RandomEx.GlobalRandGen.NextPuid();
                QueryAttributeBag matchAttrs = CreateAttrs(1010, 1020, "RemoveTest", "RemoveTest2", new byte[]{0x3,0x2,0x1});
        
                XrlRemove request = factory.CreateRemove(1, CreateFourAttrsFromFive(matchAttrs));
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                request.userId = userId;
                
                try
                {
                    request.ExecuteSafe();
                }
                catch (Exception)
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                    return;

                }

                ResultCode = TEST_RESULTS.FAILED;   
            }
        }

        [TestCase]
            class Query_Search:QueryTestBase
        {
            protected override void Execute()
            {
                QueryAttributeBag attrs = CreateDefaultAttrs2();

                XrlSearch search = factory.CreateSearch(1, 0, 20, CreateFourAttrsFromFive(attrs), CreateDefaultAttrSpecs());
                //  This is the code that marks the request from a PC LMA account
                search.ManualPopulateSlot();
                search.Slot.authDataFlags |= 0x20;             //  LMA flag
                search.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                try
                {
                    search.ExecuteSafe();
                }
                catch (Exception )
                {
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
                }
                ResultCode = TEST_RESULTS.FAILED;
  
            }
        }
        [TestCase]
        class Query_Select: QueryTestBase
        {
            protected override void Execute()
            {
                QueryAttributeBag attrs = CreateDefaultAttrs();
                ulong entityId = RandomEx.GlobalRandGen.NextUlong();

                XrlSelect request = factory.CreateSelect(entityId, 1, attrs);
                try
                {
                    request.ExecuteSafe();
                }
                catch (Exception)
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                    return;

                }

                ResultCode = TEST_RESULTS.FAILED;   
            }
        }

        [TestCase]
        class Query_FindFromIds:QueryTestBase
        {
            protected override void Execute()
            {
                ulong entityId = RandomEx.GlobalRandGen.NextUlong();
                ulong entityId2 = RandomEx.GlobalRandGen.NextUlong();

                ulong[] entityIds = new ulong[2] { entityId, entityId2 };

                XrlFindFromIds request = factory.CreateFindFromIds(1, entityIds, CreateDefaultAttrSpecs());
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                try
                {
                    request.ExecuteSafe();
                }
                catch (Exception)
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                    return;

                }

                ResultCode = TEST_RESULTS.FAILED;   

            }
        }

        [TestCase]
        class TimerWrapper : QueryTestBase
        {
            protected override void Execute()
            {
                XrlQueryTimeWarp request = new XrlQueryTimeWarp();
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                try
                {

                    request.ExecuteSafe();
                }
                catch (Exception)
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                    return;

                }

                ResultCode = TEST_RESULTS.FAILED;   
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\STATS_StatsTestBase.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace LMATests
{
    public class StatsTestBase : TestBase
    {
        protected uint _titleId;
        protected LeaderboardInfo[] LBid = null;
        protected ulong Userbase = 5000;

        protected RandomEx _RandGen = new RandomEx();

        public StatsTestBase()
        {
 
        }
        public StatsTestBase(uint title)
        {
            _titleId = title;
            LBid = null;
        }

        public StatsTestBase(uint title, LeaderboardInfo[] lbids)
        {
            _titleId = title;
            LBid = lbids;
        }

        public void createLB()
        {
            // change this code to work with new LB server
            if (LBid != null)
            {
                DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
                db.ConfigureTitle((int)_titleId, LBid);
            }
        }

        new virtual protected void Run()
        { }

        override protected void Execute()
        {
            if (LBid != null)
            {
                DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
                db.ConfigureTitle((int)_titleId, LBid);
            }

            Run();  // Throws an exception on failure

            ResultCode = TEST_RESULTS.PASSED;
        }

        public void AddUsers(int count, int lbindex)
        {
            AddUsers(count, lbindex, 15);
        }

        public void AddUsers(int count, int lbindex, uint Attcount)
        {
            AddUsers(count, lbindex, Attcount, SpecialAttribMask.Rating, 5);
        }

        public void AddUsers(int count, int lbindex, uint Attcount, int spattmask, int reqperthread)
        {
            ulong userid = Userbase;
            int total = (count % 4 == 0) ? (count / 4) : count / 4 + 1;

            XRLSetRequest[] reqs = new XRLSetRequest[total];
            for (int i = 0; i < total; i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId, 4);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                reqs[i] = req;
            }

            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(reqs, (reqs.Length < 5) ? reqs.Length : reqperthread);

        }

        public void AddSingleUsersPerReq(int count, int lbindex, uint Attcount, int spattmask, int reqperthread)
        {
            ulong userid = Userbase;

            XRLSetRequest[] reqs = new XRLSetRequest[count];
            for (int i = 0; i < count; i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId, 1);
                req.AddSetData(LBid[lbindex]._uiLbId, userid, Attcount, spattmask, ((ulong)(i * 2) + userid++));
                reqs[i] = req;
            }

            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(reqs, (reqs.Length < 5) ? reqs.Length : reqperthread);

        }

        public void AddUsersRandomRating(int count, int lbindex, uint Attcount, int spattmask, int reqperthread)
        {

            XRLSetRequest[] reqs = new XRLSetRequest[count];
            ulong userid = Userbase;
            for (int i = 0; i < count; i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId, 1);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, (ulong)_RandGen.Next(1000));
                reqs[i] = req;
            }

            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(reqs, (reqs.Length < 5) ? reqs.Length : reqperthread);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\Presence_Fuzz.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.WebWidget;
using ServerTestFramework.Web.Messaging;
using ServerTestFramework.LiveService.UserAccount;
using xonline.common.config;
using xonline.common.protocol;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using System.Net;
using MS.Swi.Mitm;
using MS.Swi.Mitm.Services;
using ServerTestFramework.Utilities.FclFuzzer;

namespace LMATests
{
    [TestGroup, Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    public class Presence_Fuzz : TestNode
    {
        //////////////////////XMessaging Fuzz case/////////////////////////////////////////////////////////////
        [TestCase, Description("XMessaging")]
        class XMessaging : TestBase
        {
            override protected void Execute()
            {

                WCMessaging service = new WCMessaging();
                WCMessageSummary[] summary = null;
                
                string m_GamerTag = "test";
                ulong  m_Puid = 0;
                byte[] m_WebId = {};
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("m_GamerTag", ref m_GamerTag);
                    FclFuzzer.Fuzz("", "m_Puid", ref m_Puid);
                    FclFuzzer.Fuzz("m_WebId", ref m_WebId);
                }
                //Fuzz XMessaging

                PuidName PuidUser = new PuidName(m_Puid, m_GamerTag, m_WebId);                

                UInt32 hr = service.EnumMessages(
                    PuidUser.WebId,
                    PuidUser.GamerTag,       // User
                    out summary);

                if (HResult.Failed(hr))
                {
                    //unexpected failure
                    return;
                }

                if (summary.Length > 0)
                {
                    WCMessageSummary newsummary;
                    WCMessageDetails details;

                    // Pull each message using GetMessage()
                    foreach (WCMessageSummary msgsum in summary)
                    {

                        hr = service.GetMessageDetails(
                            PuidUser.WebId,
                            PuidUser.GamerTag,       // User
                            msgsum.MessageID,        // MessageID
                            WCMessageFlags.Read,    // SetFlags
                            0,                        // UnSetFlags
                            out newsummary,
                            out details
                            );

                        if (HResult.Failed(hr))
                        {
                            return;
                        }
                    }

                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("XPresence")]
        class XPresence : TestBase
        {
            override protected void Execute()
            {
                PresReq req = new PresReq();
                
                ulong test =120;
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "ulong", ref test);

                }
                //need more refine 
                req.DeadUser(test);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        public static void FailureExpected(
         PMsgListTeamMembers msg,
         uint expHresult,
         uint expXErr,
         HttpStatusCode expHttpStatus)
        {
            try
            {
                PNMsg replyMsg;
                msg.TransactFD(out replyMsg);

            }
            catch (XErrException e)
            {
                ValueCheck.TestHR("Expected XErr", expXErr, e.XErr);
            }
            catch (HttpStatusCodeException e)
            {
                ValueCheck.TestHttpStatus("Expected HttpStatus", expHttpStatus, e.StatusCode);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Notification")]
        class Url_Notification : TestBase
        {
            override protected void Execute()
            {
                UserTeams userTeams = Globals.OneCreated;
                PNUser user = userTeams.User;
                Team team = userTeams.GetFirstTeam();
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("Data",ref team.Data );
                    FclFuzzer.Fuzz("Description",ref team.Description );
                    FclFuzzer.Fuzz("", "Id",ref team.Id );
                    FclFuzzer.Fuzz("", "MaxMembers",ref team.MaxMembers );
                    FclFuzzer.Fuzz("Motto",ref team.Motto );
                    FclFuzzer.Fuzz("Name",ref team.Name );
                    FclFuzzer.Fuzz("", "TitleId",ref team.TitleId );
                    FclFuzzer.Fuzz("Url",ref team.Url );
                    FclFuzzer.Fuzz("WhenCreated",ref team.WhenCreated);

                }
                PMsgListTeamMembers msg = new PMsgListTeamMembers(user, team, true);
                msg.ServiceUrl = XonPresNoti.NOIFICATION_URL;

                FailureExpected(msg, 0xffffffff, HResult.XONLINE_E_SERVER_ERROR, HttpStatusCode.OK);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Stat")]
        class StatTest : TestBase
        {
            override protected void Execute()
            {
                UserTeams userTeams = Globals.OneCreated;
                PNUser user = userTeams.User;
                Team team = userTeams.GetFirstTeam();
                PMsgListTeamMembers msg = new PMsgListTeamMembers(user, team, true);
                msg.ServiceUrl = XonPresNoti.STATE_URL;
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("Data", ref team.Data);
                    FclFuzzer.Fuzz("Description", ref team.Description);
                    FclFuzzer.Fuzz("", "Id", ref team.Id);
                    FclFuzzer.Fuzz("", "MaxMembers", ref team.MaxMembers);
                    FclFuzzer.Fuzz("Motto", ref team.Motto);
                    FclFuzzer.Fuzz("Name", ref team.Name);
                    FclFuzzer.Fuzz("", "TitleId", ref team.TitleId);
                    FclFuzzer.Fuzz("Url", ref team.Url);
                    FclFuzzer.Fuzz("WhenCreated", ref team.WhenCreated);

                }
                FailureExpected(msg, 0xffffffff, HResult.XONLINE_E_SERVER_ERROR, HttpStatusCode.OK);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\Presence.cs ===
using System;
using System.IO;
using System.Text;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.FakeSG;
using xonline.common.protocol;
using xonline.common.config;
using ServerTestFramework.LiveService.Matchmaking;

using ServerTestFramework.Utilities.FclFuzzer;

namespace LMATests
{
    [TestGroup, AsyncGroup(1, 0), AsyncThreadCount(4), Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    public class Presence : TestNode
    {
        #region Enabled Presence API
        #region Presence
        [TestCase]
        public void XPresence()
        {
            PNUser user1= null;
            uint DefaultXenonTitleId = 0x20B00002;
            FriendsCommon fc = new FriendsCommon();
            user1 = fc.CreateUser(true);
            fc.UserChangeTitle(user1, DefaultXenonTitleId, XboxVersion.FEB_2005_ALPHA_XEDK, CSGInfo.ClientType.Xenon);
            user1.Connect(user1.Xbox);
           
            PNMsg replyMsg;
            PMsgAlive2 aliveMsg = new PMsgAlive2(user1);
            CSGInfo slot = new CSGInfo();

            // If we have some mappable SGAUTH and we are requesting a valid auth
            // method load the slot from the FakeSG
            if (aliveMsg.AuthMethod != PNRequestMsg.FDAuth.None
                    && 0 != aliveMsg.Msg.Hdr.Sgaddr.XboxID)
            {
                GlobalFakeSG.FakeSG.LoadSlot(ref slot, aliveMsg.Msg.Hdr.Sgaddr.XboxID);
            }
            slot.authDataFlags |= 0x20;
            slot.machinePuid = 0xfb00000000000001;
            uint delay;
            delay = 0;

            aliveMsg.TransactFD(ref slot, out replyMsg, out delay);

            PAliveReplyMsgData reply = (PAliveReplyMsgData)replyMsg.Data;

            if( HResult.Failed( reply.HR ) )
            { 
                throw new HResultException( reply.HR, "User[" + user1.UserId.ToString("x") + "] Alive failed with HR = " + reply.HR.ToString( "X" ) + " in reply. " );
            }

            // Validate counts against actual data sent
            ValueCheck.Test("Alive BuddiesLen Consistency", reply.BuddiesLen, (ushort)reply.Buddies.Length);
            ValueCheck.Test("Alive BlocksLen Consistency", reply.BlocksLen, (ushort)reply.Blocks.Length);

        }
        #endregion
        #region Notification
        [TestCase]
        public void XNotification()
        {
            QDequeueReplyMsgData reply = null;
            PNUser user1;
            FriendsCommon fc = new FriendsCommon();
            ushort qType = 1;
            uint startItemID = 0;
            ushort maxItems = 100;
            uint maxTotalItemDataSize = 65535;
            user1 = fc.CreateUser(true);

            if (LMATests.m_EnableFuzzTesting)
            {
                //Fuzz request parameters
                FclFuzzer.Fuzz("", "BlockListVer", ref user1.BlockListVer);
                FclFuzzer.Fuzz("", "BuddyListVer", ref user1.BuddyListVer);
                FclFuzzer.Fuzz("", "MatchSessionId", ref user1.MatchSessionId);
                FclFuzzer.Fuzz("Name", ref user1.Name);
                FclFuzzer.Fuzz("Nickname", ref user1.Nickname);
                FclFuzzer.Fuzz("", "qType", ref qType);
                FclFuzzer.Fuzz("", "startItemID", ref startItemID);
                FclFuzzer.Fuzz("", "maxItems", ref maxItems);
                FclFuzzer.Fuzz("", "maxTotalItemDataSize", ref maxTotalItemDataSize);

            }

            QMsgDequeue dequeueMsg = new QMsgDequeue(user1, qType, startItemID, maxItems, maxTotalItemDataSize);

            CSGInfo slot = new CSGInfo();

            // If we have some mappable SGAUTH and we are requesting a valid auth
            // method load the slot from the FakeSG
            if (dequeueMsg.AuthMethod != PNRequestMsg.FDAuth.None
                    && 0 != dequeueMsg.Msg.Hdr.Sgaddr.XboxID)
            {
                GlobalFakeSG.FakeSG.LoadSlot(ref slot, dequeueMsg.Msg.Hdr.Sgaddr.XboxID);
            }
            slot.authDataFlags |= 0x20;
            slot.machinePuid = 0xfb00000000000001;
            uint delay;

            PNMsg replyMsg;
            try
            {
                dequeueMsg.TransactFD(ref slot, out replyMsg, out delay);

                reply = (QDequeueReplyMsgData)replyMsg.Data;
                ValueCheck.Test("Dequeue UserId", user1.UserId, reply.Hdr.UserID);
                ValueCheck.Test("Dequeue QValCount", 15, reply.Hdr.QValsLen);
            }
            catch (Exception ex )
            {
                if (LMATests.m_EnableFuzzTesting)
                    return; //ignore exception watch dump on server
                else
                    throw new Exception(ex.ToString());

            }

        }

        #endregion
        #region Message
        [TestCase]
        public void XMessaging()
        {
            PNUser user1;
            FriendsCommon fc = new FriendsCommon();

            user1 = fc.CreateUser(true);

            if (LMATests.m_EnableFuzzTesting)
            {
                //Fuzz request parameters
                FclFuzzer.Fuzz("", "BlockListVer", ref user1.BlockListVer);
                FclFuzzer.Fuzz("", "BuddyListVer", ref user1.BuddyListVer);
                FclFuzzer.Fuzz("", "MatchSessionId", ref user1.MatchSessionId);
                FclFuzzer.Fuzz("Name", ref user1.Name);
                FclFuzzer.Fuzz("Nickname", ref user1.Nickname);

            }


            QMsgEnumMsgs msgEnumMsg = new QMsgEnumMsgs(user1);
            //need fuzz here
            CSGInfo slot = new CSGInfo();

            // If we have some mappable SGAUTH and we are requesting a valid auth
            // method load the slot from the FakeSG
            if (msgEnumMsg.AuthMethod != PNRequestMsg.FDAuth.None
                    && 0 != msgEnumMsg.Msg.Hdr.Sgaddr.XboxID)
            {
                GlobalFakeSG.FakeSG.LoadSlot(ref slot, msgEnumMsg.Msg.Hdr.Sgaddr.XboxID);
            }
            slot.authDataFlags |= 0x20;
            slot.machinePuid = 0xfb00000000000001;
            uint delay;

            
            PNMsg replyMsg;
            try
            {
                msgEnumMsg.TransactFD(ref slot, out replyMsg, out delay);
                QEnumMsgsReplyMsgData replyData = (QEnumMsgsReplyMsgData)(replyMsg.Data);
                ValueCheck.Test("Enum reply HR", HResult.S_OK, replyData.HR);
                ValueCheck.Test("New Message Count", 0, replyData.Messages.Length);
            }
            catch (Exception ex)
            {
                if (LMATests.m_EnableFuzzTesting)
                    return; //ignore exception watch dump on server
                else
                    throw new Exception(ex.ToString());

            }

    }
        #endregion
        #endregion

        #region PresenceStats
    [TestCase]
        public void XStat()
        {

            XrlStatRequest request = new XrlStatRequest();
            request.ManualPopulateSlot();
            request.Slot.authDataFlags |= 0x20;             //  LMA flag
            request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
            try
            {
                request.ExecuteSafe();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                return;

            }
          }

        
    #endregion

        #region Disabled APIS
        #region team
        [TestCase]
            public void xteams()
            {
                TEST_RESULTS ResultCode = TEST_RESULTS.FAILED;
                FriendsCommon fc = new FriendsCommon();

                // create 4 logged on users
                PNUser[] users = new PNUser[2];
                for (int i = 0; i < users.Length; ++i)
                {
                    users[i] = fc.CreateUser(true);
                }

                // create the team
                Team team = new Team(2);
                TeamMember creatingMember = new TeamMember(team, users[0]);

                PMsgCreateTeam createMsg = new PMsgCreateTeam(users[0], users[0].Xbox.TitleId, team, creatingMember);
                
                CSGInfo slot = new CSGInfo();

                // If we have some mappable SGAUTH and we are requesting a valid auth
                // method load the slot from the FakeSG
                if (createMsg.AuthMethod != PNRequestMsg.FDAuth.None
                        && 0 != createMsg.Msg.Hdr.Sgaddr.XboxID)
                {
                    GlobalFakeSG.FakeSG.LoadSlot(ref slot, createMsg.Msg.Hdr.Sgaddr.XboxID);
                }
                slot.authDataFlags |= 0x20;
                slot.machinePuid = 0xfb00000000000001;
                uint delay;
                PNMsg replyMsg;
                try
                {
                    createMsg.TransactFD(ref slot, out replyMsg, out delay);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
     
                }
                if(ResultCode == TEST_RESULTS.FAILED)
                {
                    throw new Exception("It should be blocked!!!");
                }
                
            }
            #endregion
        #endregion
    
    public class XrlStatRequest : XRLPayload
    {
        public uint jobId;
        protected override string GetServiceName()
        {
            return "/xpnfront/state.ashx";
        }

        public override bool Execute()
        {
            return base.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xpnfd_presence_int));
        }
    }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\Stats.cs ===
/*
 Written by:  jinshe
STATS:cleartitle.ashx           O
STATS:contextenum.ashx          O
STATS:enumtitles.ashx           O
STATS:readsettings.ashx         O
STATS:statpost.ashx             O
STATS:syncachievements.ashx     O
STATS:syncsettings.ashx         O
STATS:synctitles.ashx           O
STATS:xachievementclear.ashx    O
STATS:xachievementenum.ashx     O
STATS:xstatenumbyrank.ashx
STATS:xstatenumbyrating.ashx
STATS:xstatenumbyuser.ashx
STATS:xstatestimaterankforrating
STATS:xstatpostxe.ashx
STATS:xstatread.ashx
STATS:xstatscommitatt.ashx
STATS:xstatscompcreatelb.ashx
STATS:xstatscompdeletelb.ashx
STATS:xstatsenumlb.ashx
STATS:xstatsget.ashx
STATS:xstatsreloaddbmap.ashx
STATS:xstatsreset.ashx
STATS:xstatsset.ashx
STATS:xstatswebenumlb.ashx
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.UserSettings;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.Billing.License;
using ServerTestFramework.LiveService.Billing.DRM;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Achievement;
using xonline.common.config;
using ServerTestFramework.LiveService.FakeSG;
using System.Globalization;
using ServerTestFramework.LiveService.Wmis;
using System.Threading;
using Microsoft.XBox.Live.Server.Emulators.Framework;
using Microsoft.XBox.Live.Server.Emulators.Wmis;

using XeXbos;

using ServerTestFramework.Utilities.FclFuzzer;

namespace LMATests
{
    [TestGroup, Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    public class LMAStats : TestNode
    {
        // have some users ready
        [TestGroupSetup]
        public void Setup()
        {
            XbosGenre.InitGenres();
            //BulkTitleOffers();
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
        }

        #region enabled APIS
        #region Enumtitles,synctitles
        [TestCase]
        public class Enumtitle : TestBase
        {

            override protected void Execute()
            {
                ulong userId = 501;
                ulong forUserId = 501;
                ushort startingIndex = 1;
                ushort maxTitles = 10;
                ushort Locale = 1033;

                TitleBase tbase = new TitleBase();
                
                //synctitle
                tbase.loadtitles(1, userId);

                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("","userId", ref userId);
                    FclFuzzer.Fuzz("","forUserId", ref forUserId);
                    FclFuzzer.Fuzz("","startingIndex", ref startingIndex);
                    FclFuzzer.Fuzz("","maxTitles", ref maxTitles);
                    FclFuzzer.Fuzz("","Locale", ref Locale);
                }

                EnumTitlesRequest req = new EnumTitlesRequest(userId, forUserId, startingIndex, maxTitles, Locale);

                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                try
                {
                    EnumTitlesResponse resp = req.Execute();
                    if (0 != resp.XError)
                        throw new Exception("UnExpected HResult excepted =" + 0 + "Recived" + resp.XError);

                    if (0 != resp.TitlesLen)
                        throw new Exception("Number of titles returned are different excepted =" + 0 + "Recived" + resp.TitlesLen);

                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    if (LMATests.m_EnableFuzzTesting)
                        return; //ignore exception watch dump on server
                    else
                        throw new Exception(req.httpStatus.ToString()); 
 
                }

            }
        }
        #endregion
        #region synctitle
        [TestCase]
        public class SyncTitle :TitleBase
        {
            protected override void Execute()
            {
                ulong user = 501;

                // add 37 titles 
                loadtitles(1, user);
                //
                DateTime yesturday = DateTime.UtcNow;
                yesturday = yesturday.AddYears(-2);

                UserTitle[] utitles2 = new UserTitle[0];
                ushort _StartingIndex = 11;
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "user", ref user);
                    FclFuzzer.Fuzz("Usertitle", ref utitles2[0]);
                    FclFuzzer.Fuzz("", "_StartingIndex", ref _StartingIndex);
                }

                SyncTitlesRequest req1 = new SyncTitlesRequest(user, yesturday, utitles2, _StartingIndex);
                req1.ManualPopulateSlot();
                req1.Slot.authDataFlags |= 0x20;             //  LMA flag
                req1.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                try
                {
                    SyncTitlesResponse resp1 = req1.Execute();

                    if (resp1.TotalTitles != 1)
                        throw new Exception("Wrong Total Size Expected 37 but is " + resp1.TotalTitles);

                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    if (LMATests.m_EnableFuzzTesting)
                        return; //ignore exception watch dump on server
                    else
                        throw new Exception(req1.httpStatus.ToString());
                }

            }

        }

        #endregion
        #region SyncSetting
        [TestCase]
        public class SyncUserSetting : UserSettingBase
        {
            protected override void Execute()
            {
                Title = 1480656849;
                Userid = 501;
                DateTime ver = DateTime.UtcNow;
                StatsWS.ResetUserSetttings(Userid);
                UserSetting[] settings = new UserSetting[1];
               
                
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "Title", ref Title);
                    FclFuzzer.Fuzz("", "Userid", ref Userid);
                }

                settings[0] = new UserSetting(Userid, TestUSetting.Test_int64, SConvert.Bytes((long)42174382));
                SyncSettingsRequest req = new SyncSettingsRequest(Title, Userid, settings, ver);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                try
                {
                    SyncSettingsResponse resp = req.Execute();
                    verifyXerror(resp);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    if (LMATests.m_EnableFuzzTesting)
                        return; //ignore exception watch dump on server
                    else
                        throw new Exception(req.httpStatus.ToString());
                }

            }
        }
        #endregion

        #region readSetting
        [TestCase]
        public class ReadSettings: GetSettingBase
        {
            protected override void init()
            {
                settingsids = new uint[1];
                settingsids[0] = 268697658; // Gamer_Tier_Information

                ulong puid =501;
                users = new ulong[1];
                users[0] = puid;

                UodbWS.SetUserTier(puid, (byte)TierEnum.Silver);

                Tsettings = new UserSetting[1];
                byte[] data = new byte[] { (byte)TierEnum.Silver, 0, 0, 0 };
                Tsettings[0] = new UserSetting(users[0], settingsids[0], data, SettingSource.XSOURCE_DEFAULT);
                
                addsettings(1, 1, SettingSource.XSOURCE_TITLE);

            }
            protected override void Execute()
            {
                init();
                run();
            }
            protected override void run()
            {
                Title = 1480656849;
                users[0] = 501;

                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "Title", ref Title);
                    FclFuzzer.Fuzz("", "users[0]", ref users[0]);
                    FclFuzzer.Fuzz("", "users", ref users[0]);
                    FclFuzzer.Fuzz("", "settingsids", ref settingsids[0]);
                }
                ReadSettingsRequest greq = new ReadSettingsRequest(Title, users[0], users, settingsids);

                greq.ManualPopulateSlot();
                greq.Slot.authDataFlags |= 0x20;             //  LMA flag
                greq.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                try
                {
                    ReadSettingsResponse gresp = greq.Execute();
                    verifyXerror(gresp);
                    verifySettings(gresp.Settings, (int)gresp.SettingsLen);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    if (LMATests.m_EnableFuzzTesting)
                        return; //ignore exception watch dump on server
                    else
                        throw new Exception(greq.httpStatus.ToString());

                }
            }

        }
        #endregion
        
        #region xAchievementenum
        [TestCase]
        public class EnumSingleAchievements : AchivementBase
        {
            override protected void Execute()
            {
                UWoner = 501;
                _Title = 1480656849;
                uint title = _Title;
                ulong user = UWoner;
                ulong friend = UWoner;
                ushort start = 0;
                ushort count = AchievConst.MAX_Achievement;
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "title", ref title);
                    FclFuzzer.Fuzz("", "user", ref user);
                    FclFuzzer.Fuzz("", "friend", ref friend);
                    FclFuzzer.Fuzz("", "locale", ref locale);
                    FclFuzzer.Fuzz("", "start", ref start);
                    FclFuzzer.Fuzz("", "count", ref count);
                }
                // enumerate 
                XRLEnumAchievement enumreq = new XRLEnumAchievement(title, user, friend, locale, start, count);

                enumreq.ManualPopulateSlot();
                enumreq.Slot.authDataFlags |= 0x20;             //  LMA flag
                enumreq.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                try
                {
                    AchievementEnumResponse enumresp = enumreq.Execute();
                    if (enumresp.xResult != HResult.S_OK || enumresp.AchievementsLen != 12)
                        throw new Exception("Unexpected XError returned by server " + enumresp.xResult);

                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    if (LMATests.m_EnableFuzzTesting)
                        return; //ignore exception watch dump on server
                    else
                        throw new Exception(enumreq.httpStatus.ToString());

                }

            }
        }
        #endregion

        #region EstimateRankForRatings
        [TestCase]
        public class EstimateRankForRatings : TestBase
        {
            protected uint title = 0;
            public ulong Userbase = 5000;
            protected StatsEstimateRankForRatingsRequest req = null;
            protected uint Expected_Resultset = 0;

            public uint Expected_XErr = 0;
            virtual public void init()
            {
                req = new StatsEstimateRankForRatingsRequest();
                req.m_nTitleId = (int)title;
                req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[101];
                ulong j = 4;
                for (int i = 0; i < req.m_arrRatingStruct.Length; i++, j = j + 5)
                {
                    req.m_arrRatingStruct[i] = new StatsEstimateRankRequestStruct(1, j);
                }
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "Title", ref  req.m_nTitleId);
                }

                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                EnumLoader.PupulateLDForEstimateR(title);
            }

            override protected void Execute()
            {
                init();
                if (req != null)
                {
                    try
                    {
                        StatsEstimateRankForRatingsResponse resp = req.Execute();
                        if (resp.xResult == 0)
                        {
                            verifyResponse(resp);
                        }

                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    catch (Exception)
                    {
                        if (LMATests.m_EnableFuzzTesting)
                            return; //ignore exception watch dump on server
                        else
                            throw new Exception(req.httpStatus.ToString());

                    }

                }
                else
                {
                    Global.RO.Error("Stats Read not initilized");
                    ResultCode = TEST_RESULTS.FAILED;
                }

            }


            public void verifyResponse(StatsEstimateRankForRatingsResponse resp)
            {
                uint rowcount = (uint)req.m_arrRatingStruct.Length;


                if (resp.m_uRankForRatingReplyCount != rowcount)
                {
                    throw new Exception("verify: StatsEstimateRankForRatings Expected row count: " + rowcount + " Recived :" + resp.m_uRankForRatingReplyCount);
                }
            }

        }
        #endregion

        #region XeEnumByRank
        [TestCase]
        public class XeEnumByRank : TestBase
        {
            protected uint title = 1480656849;
            protected uint[] viewids = null;
            public uint Expected_XErr = 0;
            public int[] Expected_rows = new int[1];
            protected StatsEnumByRankRequest req = null;

            virtual public void init()
            {
                viewids = new uint[] { 1 };
                Expected_rows[0] = -1;
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });

                ulong rank  = 1;
                uint psize  = 100 ;

                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "title", ref title);
                    FclFuzzer.Fuzz("", "rank", ref rank);
                    FclFuzzer.Fuzz("", "psize", ref psize);
                    FclFuzzer.Fuzz("", "ColumnIdsLen", ref spec.ColumnIdsLen); ;
                    FclFuzzer.Fuzz("", "ColumnIdsLen", ref spec.ViewId); ;
                }

                req = new StatsEnumByRankRequest(title, rank, psize, spec);

                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                EnumLoader.PopulateLBForEnum();
            }

            override protected void Execute()
            {
                init();

                if (req != null)
                {
                    try
                    {
                        StatsEnumResponse resp = req.Execute();
                        if (resp.xResult == HResult.S_OK)
                        {
                            verifyEnum(resp, (int)req.Rank);
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                            ResultCode = TEST_RESULTS.FAILED;
                    }
                    catch (Exception)
                    {
                        if (LMATests.m_EnableFuzzTesting)
                            return; //ignore exception watch dump on server
                        else
                            throw new Exception(req.httpStatus.ToString());

                    }

                    
                }
                else
                {
                    Global.RO.Error("Stats Read not initilized");
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }

            public void verifyEnum(StatsEnumResponse resp, int startrank)
            {

                if (resp.ResultLen != req.Specs.Length)
                {
                    throw new Exception("verify: XeStatsEnum Expected Result set : " + req.Specs.Length + " Recived :" + resp.ResultLen);
                }

                StatsResultSet[] Results = resp.Result;
                for (int i = 0; i < Results.Length; i++)
                {
                    StatsResultSet Result = Results[i];

                    if (Result.ViewId != req.Specs[i].ViewId)
                    {
                        throw new Exception(" Unexpected  view server= " + Result.ViewId + " Expected " + req.Specs[i].ViewId);
                    }
                } // Results Loop
            } // VerifyEnum()
        }
        #endregion
        #region XeEnumByUser
        [TestCase]
        public class XeEnumByUser : TestBase
        {
            protected uint title = 1480656849;
            protected uint[] viewids = null;
            public uint Expected_XErr = 0;
            public int[] Expected_rows = new int[1];
            protected StatsEnumByUserRequest req = null;
            protected int[] Startrank = new int[1];
            protected ulong Userbase = 5000;



            virtual public void init()
            {
                viewids = new uint[] { 1 };
                Expected_rows[0] = -1;
                this.Startrank[0] = 1;
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                ulong userid = 501;
                uint psize = 100;
                if (LMATests.m_EnableFuzzTesting)
                {
                    //Fuzz request parameters
                    FclFuzzer.Fuzz("", "title", ref title);
                    FclFuzzer.Fuzz("", "userid", ref userid);
                    FclFuzzer.Fuzz("", "psize", ref psize);
                    FclFuzzer.Fuzz("", "ColumnIdsLen", ref spec.ColumnIdsLen); ;
                    FclFuzzer.Fuzz("", "ColumnIdsLen", ref spec.ViewId); ;
                }
                req = new StatsEnumByUserRequest(title, userid, psize, spec);

                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb


                EnumLoader.PopulateLBForEnum();
            }

            override protected void Execute()
            {
                init();
                if (req != null)
                {
                    try
                    {
                        StatsEnumResponse resp = req.Execute();
                        if (resp.xResult == HResult.S_OK)
                        {
                            verifyEnum(resp, Startrank);
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                            ResultCode = TEST_RESULTS.FAILED;
                    }
                    catch (Exception)
                    {
                        if (LMATests.m_EnableFuzzTesting)
                            return; //ignore exception watch dump on server
                        else
                            throw new Exception(req.httpStatus.ToString());

                    }

                }
                else
                {
                    Global.RO.Error("Stats Read not initilized");
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }

            public void verifyEnum(StatsEnumResponse resp, int[] startrank)
            {

                if (resp.ResultLen != req.Specs.Length)
                    throw new StatsException(707, "verify: XeStatsEnum Expected Result set : " + req.Specs.Length + " Recived :" + resp.ResultLen);
                StatsResultSet[] Results = resp.Result;



                for (int i = 0; i < Results.Length; i++)
                {
                    StatsResultSet Result = Results[i];

                    if (Result.ViewId != req.Specs[i].ViewId)
                        throw new Exception(" Unexpected  view server= " + Result.ViewId + " Expected " + req.Specs[i].ViewId);
                    uint viewid = (uint)req.Specs[i].ViewId;

                }

            }

        }
        #endregion
        #region reset
        [TestCase]
        class Reset10User : StatsTestBase
        {
            override protected void Execute()
            {
                _titleId = 68;
                LBid = new LeaderboardInfo[] { new LeaderboardInfo(1, "", 0, 0, 0) };
                Run();
            }
            override protected void Run()
            {
                // create an XRL request set the attributes and verify them.

                AddUsers(12, 0);

                for (int i = 0; i < 9; i++)
                {
                    ulong user = Userbase + (ulong)i;
                    uint lbtype = 1;
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        //Fuzz request parameters
                        FclFuzzer.Fuzz("", "_titleId", ref _titleId);
                        FclFuzzer.Fuzz("", "user", ref user);
                        FclFuzzer.Fuzz("", "lbtype", ref lbtype);

                    }

                    XRLResetUser req = new XRLResetUser(_titleId, user, lbtype);

                    req.ManualPopulateSlot();
                    req.Slot.authDataFlags |= 0x20;             //  LMA flag
                    req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                    try
                    {
                        XRLResponse resp = req.Execute();
                        if (resp.xResult != 0)
                            throw new TestCaseException("Invalid HR Server:" + resp.xResult + " Expected :" + 0);

                        if (resp.xResult != HResult.S_OK)
                            return;
                    }
                    catch (Exception)
                    {
                        if (LMATests.m_EnableFuzzTesting)
                            return; //ignore exception watch dump on server
                        else
                            throw new Exception(req.httpStatus.ToString());

                    }
                }
                ResultCode = TEST_RESULTS.PASSED;

            }

        }
        #endregion

        #endregion

        #region disabled API
        #region cleartitle
        [TestCase]
        public class ClearTitle : TestBase
        {
            override protected void Execute()
            {
                ulong user = 501;

                TitleBase tbase = new TitleBase();
                tbase.loadtitles(1, user);

                TitleClearRequest req = new TitleClearRequest(user + 98765, tbase.titlebase);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }
        }
        #endregion
        #region achievement
        [TestCase]
        public class SyncAchievements : TestBase
        {
            public static int BuildAchievementWDFlagForPlatform(uint flag, byte clientType)
            {
                return (int)(flag | (((uint)clientType & achievementflags.XACHIEVEMENT_DETAILS_PLATFORM_MASK) << achievementflags.XACHIEVEMENT_DETAILS_PLATFORM_SHIFT));
            }
            protected override void Execute()
            {
                ulong UWoner = 501;
                uint  _Title = 1480656849;
                AchievementWD achive = new AchievementWD(2, 1, BuildAchievementWDFlagForPlatform(achievementflags.XACHIEVEMENT_DETAILS_ACHIEVED, XOn.XPLT_XBOX360));
                XRLSyncAchievements req = new XRLSyncAchievements(_Title, UWoner, new AchievementWD[] { achive });
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                SyncAchievementsResponse resp = req.Execute();
                if (resp.xResult == 0)
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
                else 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
                
            }
        }

        [TestCase]
        public class ClearAchievements : TestBase
        {
            public static int BuildAchievementWDFlagForPlatform(uint flag, byte clientType)
            {
                return (int)(flag | (((uint)clientType & achievementflags.XACHIEVEMENT_DETAILS_PLATFORM_MASK) << achievementflags.XACHIEVEMENT_DETAILS_PLATFORM_SHIFT));
            }
            protected override void Execute()
            {
                XRLClearAchievement req = new XRLClearAchievement();
                req.TitleId = 1480656849;
                req.Puid = 501;
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }
        #endregion
        #region Contextenum
        [TestCase]
        public class ContextEnum : TestBase
        {
            protected override void Execute()
            {
                uint Title = 150;
                uint startIdx = 0;
                uint count = 10;
                ushort locale = 1033;
                uint ContextId = 32779;

                ContextEnumRequest req = new ContextEnumRequest(Title, ContextId, locale, startIdx, count);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }

        }
        #endregion
        #region createlb and delete lb
        #region CreateLb
        [TestCase]
        public class Createlb : TestBase
        {
            protected override void Execute()
            {
                uint TitleID = (uint)0x65230;
                uint TemplateID = (uint)1;
                ReqCompCreateLb req = new ReqCompCreateLb((uint)TitleID, (uint)TemplateID);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
            
        }
        #endregion
        #region deletelb.ashx
        [TestCase]
        public class Deletelb : TestBase
        {
            protected override void Execute()
            {
                uint TitleID = (uint)0x65230;
                uint TemplateID = (uint)1;
                ReqCompDeleteLb req = new ReqCompDeleteLb(TitleID, TemplateID);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
            
        }
        #endregion
        #endregion

        #region statread and post
        [TestCase]
        public class StatsRead : TestBase
        {
            override protected void Execute()
            {
                uint title = 50;
                ulong Userbase = 5000;
                StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
                StatsReadRequest req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs });
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }

        }

        [TestCase]
        public class StatsPost : TestBase
        {
            override protected void Execute()
            {
               // StatsPostReq req = new StatsPostReq();


                //if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                //{
                //    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                //    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                //        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                //    else
                //        ResultCode = TEST_RESULTS.PASSED;
                //}

            }

        }
        #endregion
        #region set and get
        [TestCase]
        class StatsSet : TestBase
        {
            override protected void Execute ()
            {

                XRLSetRequest req = new XRLSetRequest(60, 1);
                LeaderboardInfo lb = new LeaderboardInfo(1, "", 0, 0, 0);
                req.AddSetData(lb._uiLbId, 12345, 1, SpecialAttribMask.Rating, 100);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                XRLSetResponse resp1 = req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd));
                if (resp1.xResult==0)
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }
        }
        [TestCase]
        class StatsGet : TestBase
        {
            override protected void Execute()
            {
                LeaderboardInfo lb = new LeaderboardInfo(1, "", 0, 0, 0);
                XRLGetRequest req = new XRLGetRequest(1);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                req.AddGetData(60, 12345, lb._uiLbId, 1, SpecialAttribMask.Rating);

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }
        }
        #endregion
        #region commitatt
        [TestCase]
        public class CommitAttachment : TestBase
        {

            override protected void Execute()
            {
                 SetDataReference[] SetRef = new SetDataReference[128];
                 for (uint i = 0; i < 128; i++)
                 {
                     SetRef[i] = new SetDataReference();
                     SetRef[i].LeaderBoardId = i;
                     SetRef[i].UserPuid = RandomEx.GlobalRandGen.NextPuid();
                 }
                 byte[] Name = new byte[128];
                XRLCommitAttachment req = new XRLCommitAttachment(201, 50, 50, 128,Name, 128, SetRef);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb
                XRLResponse CommitResp = req.Execute();
                if (CommitResp.xResult == 0)
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
                else
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }

            }
 
        #endregion
        #region enumbyratting
        [TestCase]
        public class XeEnumByRatingBase : TestBase
        {

            override protected void Execute()
            {
                StatsEnumByRatingRequest req = null;
                StatsSpec spec = new StatsSpec(1, new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRatingRequest(816, 123, 100, spec);
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }
#endregion

        #region XRLEnumLB
        [TestCase]
        class XRLEnumLB : TestBase
        {

            override protected void Execute()
            {
                XRLEnumLBRequest req = new XRLEnumLBRequest(60, 1, 1, 0, 10, 15, SpecialAttribMask.Nickname);

                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;             //  LMA flag
                req.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb

        //        StatsEnumResponse resp = req.Execute();

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd)))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (req.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + req.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }
            }

        #endregion
        #endregion
    }


    #region utility Class

    #region Enumbase
    public class EnumBase : TestBase
    {
        public static GameConfig gconfig;
        public static uint TITLEBASE = 50;
        public static Hashtable UserstitlestoVerify = new Hashtable();
        public AuthModify Modifyflag = AuthModify.None;

        protected ulong user = 0;
        protected ulong friend = 0;
        protected ushort startIdx = 0;
        protected ushort count = 0;
        protected uint ExpectedCount = 0;
        protected uint Xerror = 0;
        protected ushort locale = 1033;  //en-us
        protected ushort verifylocale = 1033;  //en-us
        protected ushort DefaultLocale = 1033; //en-us


        public EnumBase(ulong _user, ulong _friend)
        {
            user = _user;
            friend = _friend;
        }

        public EnumBase(ulong _user, ulong _friend, ushort start, ushort size, uint error)
        {
            user = _user;
            friend = _friend;
            startIdx = start;
            ExpectedCount = count = size;
            Xerror = error;
        }
        protected virtual void Init()
        {
        }

        public static void AddUsersTitlesToVerify(ulong user, UserTitle title)
        {
            if (UserstitlestoVerify.Contains(user))
            {
                UsersTitles tmp = (UsersTitles)UserstitlestoVerify[user];
                tmp.AddTitle(title);
            }
            else
            {
                UsersTitles tmp = new UsersTitles(user);
                tmp.AddTitle(title);
                UserstitlestoVerify.Add(user, tmp);
            }

        }

        public static void loadtitles(int count, ulong user)
        {
            StatsWS.ResetUsertitles(user);
            if (count > 32)
            { //there's a client limit--32 sync/enums at once.  Split
                //to multiple requests, if necessary.
                int numFullLoops = (int)(count / 32);
                int numTitlesInLastLoop = (count % 32);
                for (int i = 0; i < numFullLoops; i++)
                {
                    AddTitlesToUser(i * 32, 32, user);
                }
                AddTitlesToUser(numFullLoops * 32, numTitlesInLastLoop, user);
            }
            else
            {
                AddTitlesToUser(0, count, user);
            }
        }

        //here, offset modifies which title number the inserts will begin at.  the time and 
        public static void AddTitlesToUser(int offset, int numTitles, ulong user)
        {
            Random rd = new Random();
            UserTitle[] utitles = new UserTitle[numTitles];
            DateTime now = DateTime.UtcNow;
            for (int i = 0; i < numTitles; i++)
            {
                DateTime time = now.AddHours((-1 * (90 - (i + offset))));
                utitles[i] = new UserTitle((uint)(TITLEBASE + offset + i), time, (uint)rd.Next(), (ushort)rd.Next(), (uint)i + 1);
                AddUsersTitlesToVerify(user, utitles[i]);

            }

            SyncTitlesRequest req = new SyncTitlesRequest(user, DateTime.UtcNow, utitles);
            SyncTitlesResponse resp = req.Execute();

            if (resp.XError != 0)
                throw new Exception("Unexpected Error " + resp.XError);
        }

        protected override void Execute()
        {
            Init();
            Run();
            ResultCode = TEST_RESULTS.PASSED;
        }

        public new virtual void Run()
        {
            EnumTitlesRequest req = new EnumTitlesRequest(user, friend, startIdx, count, locale);
            if (Modifyflag != AuthModify.None)
            {
                req.Modifyflag = Modifyflag;
                if (verifylocale == 1036)
                    req.LanguageID = (uint)Languageids.fr;
            }
            EnumTitlesResponse resp = req.Execute();

            if (Xerror != resp.XError)
                throw new Exception("UnExpected HResult excepted =" + Xerror + "Received" + resp.XError);

            if (HResult.Failed(Xerror))
                return;


            if (ExpectedCount != resp.TitlesLen)
                throw new Exception("Number of titles returned are different excepted =" + ExpectedCount + "Received" + resp.TitlesLen);


            if (resp.XError == HResult.S_OK && ExpectedCount != 0)
            {
                if (UserstitlestoVerify.ContainsKey(friend))
                {
                    UsersTitles tmp = (UsersTitles)UserstitlestoVerify[friend];
                    ArrayList ExpectedResults = tmp.getTitles();

                    for (int i = 0; i < resp.TitlesLen; i++)
                    {
                        UserTitle received = resp.Titles[i];
                        UserTitle expected = (UserTitle)ExpectedResults[startIdx + i];

                        string titlename = gconfig.GetTitleName(received.TitleId, verifylocale);
                        if (titlename != received.TitleName)
                            throw new Exception("Invalid Name excepted =" + titlename + "Received" + received.TitleName);
                        if (expected.LastPlayed.ToString() != received.LastPlayed.ToString())
                            throw new Exception("Invalid LastPlayed excepted =" + expected.LastPlayed + "Received" + received.LastPlayed);
                        if (expected.Sequence != received.Sequence)
                            throw new Exception("Invalid Sequence excepted =" + expected.Sequence + "Received" + received.Sequence);
                 }


                }
                else
                    throw new Exception("Unexpecte user " + friend);
            }
            else if (resp.XError != HResult.S_OK)
                throw new Exception("UnExpected Error " + resp.XError);

        }


    }
    public class UsersTitles
    {
        ulong puid = 0;
        ArrayList _titles = new ArrayList();
        public UsersTitles(ulong user)
        {
            puid = user;
        }
        public void AddTitle(UserTitle _title)
        {
            _titles.Add(_title);
        }
        public ArrayList getTitles()
        {
            _titles.Sort();
            return _titles;

        }
    }
    #endregion
    #region Titlebase
    public class TitleList
    {
        public ArrayList m_Titlelist = new ArrayList();
        public int LastSyncIdx = 0;
        public int LastIntSyncIdx = 0;

        public void playtitle(UserTitle titleid)
        {
            UserTitle tmp = null;

            if (m_Titlelist.Contains(titleid))
            {
                foreach (UserTitle ut in m_Titlelist)
                {
                    if (titleid.TitleId == ut.TitleId)
                    {
                        tmp = ut;
                        break;
                    }
                }
                m_Titlelist.Remove(titleid);
                if (LastSyncIdx != 0)
                    LastSyncIdx--;
                if (LastIntSyncIdx != 0)
                    LastIntSyncIdx--;



            }
            if (tmp != null && tmp.LastPlayed.CompareTo(titleid.LastPlayed) > 0)
                m_Titlelist.Add(tmp);
            else
                m_Titlelist.Add(titleid);
        }

        public int Count()
        {
            return m_Titlelist.Count;
        }
        public void syncwithserver(UserTitle[] titles)
        {
            UserTitle currenttitle = (UserTitle)m_Titlelist[m_Titlelist.Count - 1];
            for (int i = 0; i < titles.Length; i++)
            {
                playtitle(titles[i]);
            }
            playtitle(currenttitle);
        }

        public UserTitle Contains(uint titleid)
        {
            for (int i = 0; i < m_Titlelist.Count; i++)
            {
                if (((UserTitle)m_Titlelist[i]).TitleId == titleid)
                    return (UserTitle)m_Titlelist[i];
            }

            return null;
        }

    }

    public class UserTitleProfile : TitleList
    {
        public ulong userid;
        public uint sequence = 1;

        public UserTitleProfile(ulong uid)
        {
            userid = uid;
        }

        public UserTitleProfile Copy()
        {
            UserTitleProfile tmp = new UserTitleProfile(userid);
            foreach (UserTitle title in m_Titlelist)
            {
                tmp.m_Titlelist.Add(title);
            }
            tmp.LastSyncIdx = LastSyncIdx;

            return tmp;
        }

    }
    public class TitleBase : TestBase
    {
        public static GameConfig gconfig = new GameConfig();
        public uint titlebase = 1480656849;
        protected DateTime starttime = new DateTime(2000, 11, 15);

        public void ResetUsertitles(ulong user)
        {
            if (Servertitles.ContainsKey(user))
            {
                Servertitles.Remove(user);
            }
            StatsWS.ResetUsertitles(user);
        }

        protected override void Execute()
        {
        }

        protected Hashtable Servertitles = new Hashtable();



        public void AddTitleToVerify(ulong user, UserTitle title)
        {
            AddTitleToVerify(user, title, (ushort)1033);
        }
        public void AddTitleToVerify(ulong user, UserTitle title, ushort locale)
        {

            if (!Servertitles.ContainsKey(user))
            {
                TitleList tlist = new TitleList();
                tlist.playtitle(title);
                Servertitles.Add(user, tlist);
            }
            else
            {
                TitleList tlist = (TitleList)Servertitles[user];
                tlist.playtitle(title);


            }
        }

        public void AddLegacytitlerow(UserTitleProfile userp, int titleid, DateTime logontime, int sequence)
        {
            Random rd = new Random();
            if (titleid != 0)
            {
                UserTitle utitle = new UserTitle((uint)titleid, logontime, (uint)rd.Next(), (ushort)rd.Next(), (uint)sequence);
                userp.playtitle(utitle);
            }

            StatsWS.AddLegacytitlerow(userp.userid, titleid, logontime, sequence);
            userp.sequence = (uint)sequence;
            userp.LastSyncIdx = userp.Count();
        }


        public SyncTitlesResponse playtitle(uint titleid, DateTime LastSyncTime, UserTitleProfile userp, bool online)
        {
            return playtitle(titleid, LastSyncTime, userp, online, false);
        }


        public SyncTitlesResponse playtitle(uint titleid, DateTime LastSyncTime, UserTitleProfile userp, bool online, bool forcefail)
        {
            Random rd = new Random();
            SyncTitlesResponse resp = null;
            if (online)
            {
                if (titleid != 0)
                {
                    UserTitle utitle = new UserTitle(titleid, DateTime.UtcNow, (uint)rd.Next(), (ushort)rd.Next(), userp.sequence++);
                    userp.playtitle(utitle);
                }

                int count = userp.Count() - userp.LastSyncIdx;
                UserTitle[] utitles = new UserTitle[count];
                for (int i = userp.LastSyncIdx, j = 0; i < userp.Count(); i++, j++)
                {
                    utitles[j] = (UserTitle)userp.m_Titlelist[i];

                }

                for (int i = userp.LastIntSyncIdx, j = 0; i < userp.Count(); i++, j++)
                {
                    AddTitleToVerify(userp.userid, (UserTitle)userp.m_Titlelist[i]);
                }

                if (!forcefail)
                {
                    SyncTitlesRequest req = new SyncTitlesRequest(userp.userid, LastSyncTime, utitles);
                    resp = req.Execute();
                    if (resp.XError != 0)
                        throw new Exception("UnExpected Error " + resp.XError);

                    userp.LastIntSyncIdx = userp.LastSyncIdx = userp.Count();

                }
                else
                    userp.LastIntSyncIdx = userp.Count();
            }
            else
            {
                DateTime minval = new DateTime(1753, 1, 1);
                UserTitle utitle = new UserTitle(titleid, minval, (uint)rd.Next(), (ushort)rd.Next(), userp.sequence++);
                userp.playtitle(utitle);

            }

            return resp;
        }

        public void loadtitles(int count, ulong user)
        {
            Random rd = new Random();
            StatsWS.ResetUsertitles(user);
            if (Servertitles.ContainsKey(user))
                Servertitles.Remove(user);

            UserTitle[] utitles = new UserTitle[count];
            DateTime now = DateTime.UtcNow;
            for (int i = 0; i < count; i++)
            {
                DateTime time = now.AddHours(-1 * (count - i));
                utitles[i] = new UserTitle((uint)(titlebase + i), time, (uint)rd.Next(), (ushort)rd.Next(), (uint)(i + 1));
                AddTitleToVerify(user, utitles[i]);
            }

            SyncTitlesRequest req = new SyncTitlesRequest(user, DateTime.UtcNow, utitles);
            SyncTitlesResponse resp = req.Execute();

            if (resp.XError != 0)
                throw new Exception("UnExpected Error " + resp.XError);

            if (resp.Titles.Length == 0)
            {
                verifybyEnum(user);
            }

        }

        public void verifyGamerSetting(ulong user, int value)
        {

            // title =  _Title, user = UWoner, gamerscore = UWonerScore

            //--read settings and enum title and verify.
            uint[] settings = new uint[1];
            settings[0] = ProfileDefs.GAMERCARD_TITLES_PLAYED;


            ReadSettingsRequest req = new ReadSettingsRequest(50, user, new ulong[] { user }, settings);
            ReadSettingsResponse resp = req.Execute();

            foreach (UserSetting us in resp.Settings)
            {
                if (us.Value.Length == 0)
                {
                    if (value != 0)
                        throw new Exception("Expected GAMERCARD_TITLES_PLAYED =" + value + " but resived=" + 0);
                    return;
                }
                BinaryReader red = new System.IO.BinaryReader(new MemoryStream(us.Value));
                int Respvalue = red.ReadInt32();

                if (Respvalue != value)
                    throw new Exception("Expected GAMERCARD_TITLES_PLAYED =" + value + " but resived=" + Respvalue);

            }

        }

        public void verifybyEnum(ulong user)
        {
            verifybyEnum(user, user, 1033);
        }

        public void verifybyEnum(ulong user, ulong friend, ushort Locale)
        {
            verifybyEnum(user, friend, Locale, -1, true);
        }

        public void verifybyEnum(ulong user, ulong friend, ushort Locale, short _count, bool verifyTotaltitlessetting)
        {
            ushort count = (ushort)_count;



            EnumTitlesRequest req = new EnumTitlesRequest(user, friend, 0, count, Locale);
            EnumTitlesResponse resp = req.Execute();

            if (resp.XError == HResult.S_OK)
            {
                if (Servertitles.ContainsKey(friend))
                {
                    TitleList tlist = (TitleList)Servertitles[user];
                    if (_count == -1)
                        count = (ushort)(tlist.Count());
                    if (count != resp.TitlesLen)
                        throw new Exception("Unexpecte title Count in enum response expected  " + count + "Recived" + resp.TitlesLen);

                    for (int i = 0; i < resp.TitlesLen; i++)
                    {
                        UserTitle recived = resp.Titles[i];

                        UserTitle expected = (UserTitle)tlist.m_Titlelist[(tlist.Count() - (i + 1))];
                        if (expected.TitleId != recived.TitleId)
                            throw new Exception("Invalid Title ID excepted =" + expected.TitleId + "Recived" + recived.TitleName);
                        if (expected.LastPlayed.ToString() != recived.LastPlayed.ToString())
                            throw new Exception("Invalid LastPlayed excepted =" + expected.LastPlayed + "Recived" + recived.LastPlayed);
                        if (expected.Sequence != recived.Sequence)
                            throw new Exception("Invalid Sequence excepted =" + expected.Sequence + "Recived" + recived.Sequence);


                    }
                }
                else
                    throw new Exception("Unexpecte user " + friend);
            }
            else
                throw new Exception("UnExpected Error " + resp.XError);

        }

        public void verifysync(SyncTitlesResponse resp, uint[] Expectedtitles, ulong friend, ushort Locale)
        {
            int count;

            int ExpectedRec = 0;

            if (Expectedtitles != null)
                ExpectedRec = Expectedtitles.Length;

            if (resp.TitlesLen != ExpectedRec)
                throw new Exception("Unexpected No of Records Expeted: " + ExpectedRec + " Recived :" + resp.TitlesLen);

            if (resp.XError == HResult.S_OK)
            {
                TitleList tlist = null;
                if (Servertitles.ContainsKey(friend))
                    tlist = (TitleList)Servertitles[friend];
                else
                    throw new Exception("User not found " + friend);

                count = (ushort)tlist.Count();
                for (int i = 0; i < resp.TitlesLen; i++)
                {
                    UserTitle recived = resp.Titles[i];
                    bool found = false;
                    for (int expt = 0; expt < Expectedtitles.Length; expt++)
                    {
                        if (recived.TitleId == Expectedtitles[expt])
                        {
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                        throw new Exception("Unexpected title recived in Sync" + recived.TitleId);

                    UserTitle expected = tlist.Contains(recived.TitleId);
                    if (expected != null)
                    {
                        if (expected.TitleId != recived.TitleId)
                            throw new Exception("Invalid Title ID excepted =" + expected.TitleId + "Recived" + recived.TitleName);
                        if (expected.LastPlayed.ToString() != recived.LastPlayed.ToString())
                            throw new Exception("Invalid LastPlayed excepted =" + expected.LastPlayed + "Recived" + recived.LastPlayed);
                        if (expected.Sequence != recived.Sequence)
                            throw new Exception("Invalid Sequence excepted =" + expected.Sequence + "Recived" + recived.Sequence);
                    }
                    else
                        throw new Exception("Unexpecte title in Sync Response " + resp.Titles[i].TitleId);

                }
            }
            else
                throw new Exception("UnExpected Error " + resp.XError);

        }

    }

    class TitleKey
    {
        ulong user;
        uint title;

        public TitleKey(ulong _user, uint _title)
        {
            user = _user;
            title = _title;

        }

        public override bool Equals(object obj)
        {
            return (user == ((TitleKey)obj).user)
                && (title == ((TitleKey)obj).title);
        }

        public override int GetHashCode()
        {
            return (int)(title + user);
        }

    }
    #endregion
    #region usersettingbase
    public class UserSettingBase : TestBase
    {
        public static Hashtable gusers = new Hashtable();
        public uint Title = 0;
        public ulong Userid = 0;

        virtual protected void init() { }
        virtual protected void run() { }

        public ulong GetUser(string name)
        {
            return (ulong)gusers[name];
        }


        protected override void Execute()
        {
            init();
            run();

            ResultCode = TEST_RESULTS.PASSED;
        }

        public void verifySettings(UserSetting[] settings, UserSetting[] respsettings, int respSettingLen)
        {
            if (respSettingLen != settings.Length)
                throw new Exception("Setting count is different Expected :" + settings.Length + " Recived:" + respSettingLen);

            for (int i = 0; i < settings.Length; i++)
            {
                //should be in XBanc because of ReadSettings call
                verifyXBancEntry(respsettings[i]);

                if (respsettings[i].SettingId != settings[i].SettingId)
                    throw new Exception("Setting ID is different Expected :" + settings[i].SettingId + " Recived:" + respsettings[i].SettingId);

                if (respsettings[i].Source != settings[i].Source)
                    throw new Exception("Setting Source is different Expected :" + settings[i].Source + " Recived:" + respsettings[i].Source);

                if (respsettings[i].Source == (uint)SettingSource.XSOURCE_NO_VALUE)
                    continue;

                if (respsettings[i].ValueLen != settings[i].Value.Length)
                    throw new Exception("Setting value len is different Expected :" + settings[i].ValueLen + " Recived:" + respsettings[i].ValueLen);


                for (int vl = 0; vl < settings[i].Value.Length; vl++)
                {
                    if (respsettings[i].Value[vl] != settings[i].Value[vl])
                        throw new Exception("Setting value  is different at idx " + vl + " Expected :" + settings[i].Value[vl] + " Recived:" + respsettings[i].Value[vl]);
                }
            }
        }

        public void verifyXerror(SyncSettingsResponse resp)
        {
            if (resp.XError != HResult.S_OK)
                throw new Exception("UnExpected XError returned by server :" + resp.XError);
            ResultCode = TEST_RESULTS.PASSED;
        }

        private bool isValidSettingID(UserSetting setting)
        {
            if (setting.SettingId == (uint)(TestUSetting.Test_bMaxNo + 512))
                return false;

            return true;

        }

        private void verifyXBancEntry(UserSetting setting)
        {

            xonline.common.service.XBanc xb = new xonline.common.service.XBanc();
            byte[] expectedValue = null;
            uint expectedRetVal = HResult.S_OK;

            //should be in XBanc because of the Syncsettings call, unless we're requesting the public gamerpicture of a friend that has the non special key cached
            //xbanc won't return the special value that we're looking for, so we'll just skip it all together
            if (setting.SettingId == ProfileDefs.XPROFILE_GAMERCARD_PICTURE_KEY)
            {
                // TODO: continue only if the user and the requesting user are friends. do this check in verifysettings and verifybyreading
                return;
            }

            //determine the correct title to query for
            uint titleID = (setting.Source == (uint)SettingSource.XSOURCE_DEFAULT) ? XOn.XENON_DASH_TITLE_ID : Title;

            //determine if we are supposed to receive a value from XBanc
            if (!isValidSettingID(setting))
            {
                expectedRetVal = HResult.S_FALSE;
            }
            if (setting.Source == (uint)SettingSource.XSOURCE_PERMISSION_DENIED) //not going to be in xbanc
            {
                expectedRetVal = HResult.S_FALSE;
            }

            //determine what value we are supposed to receive from XBanc
            if (setting.Source == (uint)SettingSource.XSOURCE_NO_VALUE)
                expectedValue = xonline.common.protocol.ProfileDefs.XBancNoValue;
            else if (setting.Value != null)
                expectedValue = (setting.Value.Length == 0) ? xonline.common.protocol.ProfileDefs.XBancNoValue : setting.Value;

            //build the xbanc key
            byte[] key = xonline.common.protocol.ProfileDefs.BuildXBancKey(setting.SettingId, titleID, setting.userId);
            byte[] value = null;

            //query xbanc for the setting
            uint hr = xb.Query(key, out value);
            if (hr != expectedRetVal)
            {
                throw new Exception("Querying XBanc for setting " + setting.SettingId + " titleID " + titleID + " and userID " + setting.userId + " returned " + hr + ", expected " + expectedRetVal);
            }
            if (expectedRetVal == HResult.S_OK) //something was returned from the query. let's see if it was expected.
            {
                //compare the returned value with the expected value
                if (!xonline.common.service.XBanc.CompareByteArrays(expectedValue, value))
                {
                    throw new Exception("Querying XBanc for setting " + setting.SettingId + " titleID " + titleID + " and userID " + setting.userId + " did not return the expected value.");
                }
            }
        }

        public void verifyByReading(UserSetting[] settings, ulong friend, ulong owner)
        {
            ulong[] friends = new ulong[1];
            friends[0] = friend;

            uint[] sIds = new uint[settings.Length];
            for (int i = 0; i < settings.Length; i++)
            {
                if (settings[i].SettingId != ProfileDefs.XPROFILE_GAMERCARD_PERSONAL_PICTURE &&
                    settings[i].SettingId != ProfileDefs.XPROFILE_GAMERCARD_PICTURE_KEY)
                {
                    verifyXBancEntry(settings[i]); //only check the xbanc settings after we do readsettings, because the picture settings will change once they are read
                }
                sIds[i] = settings[i].SettingId;
            }

            ReadSettingsRequest req = new ReadSettingsRequest(Title, owner, friends, sIds);
            ReadSettingsResponse resp = req.Execute();

            if (resp.XError != HResult.S_OK)
                throw new Exception("UnExpected XError returned by server :" + resp.XError);

            verifySettings(settings, resp.Settings, (int)resp.SettingsLen);
        }


        public void verifyByReading(UserSetting[] settings)
        {
            verifyByReading(settings, Userid, Userid);
        }

    }
    #endregion
    //#region Contextbase
    //public class ContextBase : TestBase
    //{
    //    public static GameConfig gconfig = null;
    //    protected uint Title = 0;
    //    protected uint ContextId = 32779;
    //    protected uint startIdx = 0;
    //    protected uint count = 0;
    //    protected uint ExpectedCount = 0;
    //    protected uint Xerror = 0;
    //    protected ushort locale = 1033;  //en-us
    //    protected ushort DefaultLocale = 1033; //en-us
    //    protected ushort TotalSize = 10;
    //    public ContextBase(uint title)
    //    {
    //        Title = title;
    //    }


    //    protected virtual void Init()
    //    {
    //    }


    //    protected override void Execute()
    //    {
    //        Init();
    //        Run();
    //        ResultCode = TEST_RESULTS.PASSED;
    //    }

    //    public new virtual void Run()
    //    {
    //        EnumAndVerify();
    //    }

    //    public void EnumAndVerify()
    //    {

    //        ContextEnumRequest req = new ContextEnumRequest(Title, ContextId, locale, startIdx, count);

    //        ContextEnumResponse resp = req.Execute();
    //        if (ExpectedCount != resp.ContextsLen)
    //            throw new Exception("Invlaid COunt Expected :" + ExpectedCount + " server returned :" + resp.ContextsLen);

    //        if (TotalSize != resp.TotalContexts)
    //            throw new Exception("Invlaid Total Count Expected :" + TotalSize + " server returned :" + resp.TotalContexts);

    //        ArrayList list = gconfig.ContextSting(Title, ContextId, locale);

    //        for (int i = 0; i < ExpectedCount; i++)
    //        {
    //            int ridx = (int)(i + startIdx);
    //            ContextStr tmp = (ContextStr)list[ridx];
    //            if (resp.Contexts[i].ContextId != tmp.ContextId)
    //                throw new Exception("Wrong Context value ID Expected :" + tmp.ContextId + "Recived :" + resp.Contexts[i].ContextId);
    //            if (resp.Contexts[i].Name != tmp.Name)
    //                throw new Exception("Wrong Context value name Expected :" + tmp.Name + "Recived :" + resp.Contexts[i].Name);
    //        }

    //    }


    //}
    //#endregion
    #region getSettingBase
    public abstract class GetSettingBase : TestBase
    {
        public static Hashtable gusers = new Hashtable();
        protected uint Title = 0;
        protected ulong[] users = null;
        protected UserSetting[] Tsettings = null;
        protected uint[] settingsids = null;


        abstract protected void init();
        abstract protected void run();

        public ulong GetUser(string name)
        {
            return (ulong)gusers[name];
        }

        public void addsettings(int usercount, int settingcount, SettingSource source)
        {
            RandomEx rand = new RandomEx();
            settingsids = new uint[settingcount];

            uint baseid = (uint)TestUSetting.Test_bMaxNo;
            for (uint p = 0; p < settingcount; p++)
            {
                settingsids[p] = baseid + p;
            }


            users = new ulong[usercount];
            int totalsettings = usercount * settingcount;
            Tsettings = new UserSetting[totalsettings];

            int max = (int)GSLimits.XONLINE_MAX_SETTING_VALUE_BYTES;
            int total = 0;
            for (int i = 0; i < usercount; i++)
            {
                users[i] = GetUser("User" + (i + 1));
                StatsWS.ResetUserSetttings(users[i]);

                UserSetting[] settings = new UserSetting[settingsids.Length];
                for (int j = 0; j < settingsids.Length; j++)
                {
                    Tsettings[total++] = settings[j] = new UserSetting(users[i], settingsids[j], rand.GenerateRandomBlob(max - 10), source);
                }



                SyncSettingsRequest req = new SyncSettingsRequest(Title, users[i], settings, DateTime.UtcNow);

                SyncSettingsResponse resp = req.Execute();
                if (resp.XError != 0)
                    throw new Exception("error loading settings XERROR " + resp.XError);
            }



        }


        public void verifyXerror(ReadSettingsResponse resp)
        {
            if (resp.XError != HResult.S_OK)
                throw new Exception("UnExpected XError returned by server :" + resp.XError);

        }

        protected override void Execute()
        {
            init();
            run();

            ResultCode = TEST_RESULTS.PASSED;
        }

        public void verifySettings(UserSetting[] respsettings, int respSettingLen)
        {
            if (respSettingLen != Tsettings.Length)
                throw new Exception("Setting count is different Expected :" + Tsettings.Length + " Recived:" + respSettingLen);

            for (int i = 0; i < Tsettings.Length; i++)
            {
                if (respsettings[i].SettingId != Tsettings[i].SettingId)
                    throw new Exception("Setting ID is different Expected :" + Tsettings[i].SettingId + " Recived:" + respsettings[i].SettingId);
            }

        }

    }
    #endregion
    #endregion

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\XStore.cs ===
using System;
using System.Globalization;
using System.Text;
using System.Net;
using System.IO;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Storage;
using ServerTestFramework.LiveService.Signature;
using xonline.common.config;

namespace LMATests
{
    [TestGroup, Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    public class XStoreTests : TestNode
    {
        #region Blocked APIs
        [TestCase]
        public class D_RemoveFile : TestBase
        {
            override protected void Execute()
            {
                ulong ownerPUID = (ulong)((new Random().NextDouble()) * 0xffffffffffffffff);
                uint titleID = (uint)new Random().Next();
                string pathName = "//stats/u:" + ownerPUID.ToString("x") + "/" + titleID.ToString("x") + "/"
                    + Guid.NewGuid().ToString();

                XRLRemoveFile removeReq = new XRLRemoveFile(pathName, titleID, "ServiceAddr");

                // Set the LMA field
                removeReq.ManualPopulateSlot();
                removeReq.Slot.authDataFlags |= 0x20;
                removeReq.Slot.machinePuid = 0xFB00000000000001;
                removeReq.Slot.userPuid0 = 12345678;

                if (!removeReq.Execute())
                {
                    if (removeReq.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + removeReq.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_ReadFile : TestBase
        {
            override protected void Execute()
            {
                uint randomTitleID = (uint)new Random().Next();
                string sTitleID = randomTitleID.ToString("x");
                string pathName = "//title." + sTitleID + "/t:" + sTitleID + "/" + Guid.NewGuid().ToString();

                XRLWriteFile request = new XRLWriteFile("ServiceAddr", pathName);

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute())
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_ReadFileHash : TestBase
        {
            override protected void Execute()
            {
                XRLReadFileHash request = new XRLReadFileHash();
                XRLReadFileHashResponse response = null;

                request.pathName = "We don't need to care about it at this moment";
                request.pathNameLen = (ushort)request.pathName.Length;

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage), out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_EnumerateFiles : TestBase
        {
            override protected void Execute()
            {
                long modifiedSince = 0;
                uint TitleID = (uint)new Random().Next();
                string hexTitleID = TitleID.ToString("x");
                string enumXrl = "//title." + hexTitleID + "/t:" + hexTitleID + "/roster*";

                XRLEnumFilesResponse response;
                XRLEnumFiles request = new XRLEnumFiles(enumXrl, TitleID, 0, 9, modifiedSince);

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage), out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        class D_GetQuota : TestBase
        {
            override protected void Execute()
            {
                uint randomTitleID = (uint)new Random().Next();

                XRLGetQuota request = new XRLGetQuota(1, randomTitleID, (uint)Constants.IdType.TitleId, randomTitleID);
                XRLGetQuotaResponse response;

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        class D_ReportBrokenLink : TestBase
        {
            override protected void Execute()
            {
                XRLReportBrokenLink request = new XRLReportBrokenLink("stats");

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage)))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        class D_ResolveName : TestBase
        {
            override protected void Execute()
            {
                IPEndPoint ExpectedPrimIP = Global.XEnv.GetVirtualInterface(VirtualInterface.sgsvc);
                XRLNameResolver request = new XRLNameResolver("stats");
                XRLNameResolverResponse response;

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.sgsvc), out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        class D_WriteFile : TestBase
        {
            override protected void Execute()
            {
                uint randomTitleID = (uint)new Random().Next();
                string sTitleID = randomTitleID.ToString("x");
                string url = "//title." + sTitleID + "/t:" + sTitleID + "/" + Guid.NewGuid().ToString();

                XRLWriteFile request = new XRLWriteFile("ServiceAddr", url);
                request.attributes = new byte[100];
                new Random().NextBytes(request.attributes);
                request.attributesLen = (ushort)request.attributes.Length;

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute())
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\StringSvr.cs ===
/*
 * Allowed functions:
 *      STRING:getstring.ashx
 *      STRING:getstring2.ashx
 *      STRING:vetstring2.ashx
 *      STRING:msgserver.ashx
 * 
 * Blocked functions:
 *      STRING:loadstrings.ashx (Won't test)
 *      STRING:logstring.ashx
 *      STRING:addstring.ashx
 *      STRING:addstring2.ashx
 *      STRING:vetstring.ashx
 */

using System;
using System.IO;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using System.Text;
using System.Xml;
using System.Collections.Generic;
using System.Threading;
using xonline.common.config;

// Using FCL libraries
using MS.Swi.Mitm;
using MS.Swi.Mitm.Services;
using ServerTestFramework.Utilities.FclFuzzer;


namespace LMATests
{
    abstract public class PutGetVetStringTestBase : TestBase
    {
        static public void Verify(XRLAdd2Response response)
        {
            foreach (uint hr in response.rghrString)
            {
                if (hr != HResult.S_OK)
                {
                    Check(hr != HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, "HResult = INVALID REQUEST");
                    Check(hr != HResult.XONLINE_E_STRING_INVALID_LANGUAGE, "HResult = INVALID LANGUAGE");
                    Check(hr != HResult.XONLINE_E_STRING_TOO_LONG, "HResult = STRING TOO LONG");
                    Check(hr != HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE, "HResult = DUPLICATE LOCALE IN REQUEST");
                    Check(hr != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, "HResult = OFFENSIVE TEXT");
                    Check(hr != HResult.XONLINE_E_STRING_NO_DEFAULT_STRING, "HResult = DEFAULT LOCALE DOES NOT MATCH A LOCALE IN REQUEST");
                }

            }
            //COMMENT FOR NOW 	Check ( response.dwStringID == 0xFFFFFFFF, "Returned StringID == 0xFFFFFFFF");
        }

        static public void Verify(XRLVetResponse response)
        {
            foreach (uint hr in response.rghrString)
            {
                Check(hr != HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, "HResult = INVALID REQUEST");
                Check(hr != HResult.XONLINE_E_STRING_INVALID_LANGUAGE, "HResult = INVALID LANGUAGE");
                Check(hr != HResult.XONLINE_E_STRING_TOO_LONG, "HResult = STRING TOO LONG");
                Check(hr != HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE, "HResult = DUPLICATE LOCALE IN REQUEST");
                Check(hr != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, "HResult = OFFENSIVE TEXT");
                Check(hr != HResult.XONLINE_E_STRING_NO_DEFAULT_STRING, "HResult = DEFAULT LOCALE DOES NOT MATCH A LOCALE IN REQUEST");
            }

        }
    }

    [StressInstantiate]
    public abstract class StringFuzzTestBase : TestBase
    {
        private static Random _rand = new Random();
        private static object _lock = new object();

        protected uint GetNextRandomUInt32()
        {
            return GetNextRandomUInt32(UInt32.MinValue, UInt32.MaxValue);
        }

        protected uint GetNextRandomUInt32(uint minValue, uint maxValue)
        {
            lock (_lock)
            {
                //TODO: The value range is not correct here
                return (uint)_rand.Next((int)minValue, maxValue < (uint)Int32.MaxValue? (int)maxValue : Int32.MaxValue);
            }
        }

        protected uint [] GetFuzzedUnsignedIntegerArray()
        {
            uint count = GetNextRandomUInt32(0, 100000);

            uint[] data = new uint[count];

            for (uint i = 0; i < count; i++)
            {
                data[i] = GetNextRandomUInt32();
                FclFuzzer.Fuzz("", "Random UInt32 Array element #"+i.ToString(), ref data[i]);
            }
            return data;
        }
    }

    [TestGroup, Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    public class StringSvrTests : TestNode
    {
        #region Allowed APIs

        [TestCase]
        public class P_GetString : TestBase
        {
            protected override void Execute()
            {
                XRLGetString request = new XRLGetString();
                XRLGetStringResponse response;

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                // this string is defined by the site config file
                // \ops\sitecfg\npdb_stringsvr_populate_common.sql
                request.dwTitleID = 0xFFFE0000;
                request.wLanguage = 1;
                request.wNumStrings = 1;
                request.rgdwStringIDs = new uint[1];
                request.rgdwStringIDs[0] = 1;

                if (!request.Execute(out response))
                {
                    Global.RO.Error(request.GetDumpString());
                    return;
                }

                if (response.wNumStrings > 0)
                {
                    //TODO: Check string return results
                    // DEBUG
                    foreach (StringData str in response.rgStringData)
                    {
                        Console.WriteLine(str.wStringSize.ToString());
                        Console.WriteLine("Stringout: " + str.szString);
                    }

                }
                else  // error
                    return;

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        public class P_GetString2 : PutGetVetStringTestBase
        {
            protected override void Execute()
            {
                // Fuzz the parameters
                try
                {
                    XRLGet2String request = new XRLGet2String();
                    XRLGetStringResponse response;

                    // Set the LMA bits
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;
                    request.Slot.machinePuid = 0xFB00000000000001;
                    request.Slot.userPuid0 = 12345678;

                    // Set the base value of the parameters
                    request.dwTitleID = 0x585207D4;
                    request.wNumStrings = 1;
                    request.wLocaleLen = 1;
                    request.szLocale = "String to Fuzz";
                    request.rgdwStringIDs = new uint[] { 1 };

                    // Verify the result
                    if (!request.Execute(out response))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }

                }
                catch (Exception ex)
                {
                    Global.RO.Error("Exception: {0}", ex.ToString());
                }
            }
        }


        [TestCase]
        public class P_VetString2 : PutGetVetStringTestBase
        {
            override protected void Execute()
            {

                XRLVet2String request = new XRLVet2String();
                XRLVetResponse response = new XRLVetResponse();

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                request.dwTitleID = 0xFFFE0000;
                request.wLocaleLen = 5;
                request.wNumStrings = 1;
                request.szLocale = "en-US";

                request.rgStringData = new StringData[1];
                request.rgStringData[0] = new StringData();
                request.rgStringData[0].szString = "bs";

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException(request.GetDumpString());
                }

                Verify(response);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        // Get a single TitleID. Should behave exactly like V1 feature
        [TestCase]
        public class P_MsgServer : TestBase
        {
            protected override void Execute()
            {
                XRLTitleIDRequest request = new XRLTitleIDRequest();
                XRLTitleIDResponse response;

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                request.wType = 1;  // TitleID
                request.wLanguage = 0;  // ?
                request.wNumTitles = 1;
                request.rgdwTitleIDs = new uint[1];
                //request.rgdwTitleIDs[0] = 1;
                request.rgdwTitleIDs[0] = 0xFFFE0000;

                //DEBUG
                //request.Dump();

                //if (!request.Execute())
                if (!request.Execute(out response))
                {
                    //DEBUG
                    //Console.WriteLine( request.GetDumpString() );

                    return;
                }

                if (response.wNumStrings != 1)
                    //Console.WriteLine( response.rgStringData[0].szString );
                    return;

                Console.WriteLine("\nFound Title: " + response.rgStringData[0].szString);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion


        #region Blocked APIs
        [TestCase]
        public class D_LogString : TestBase
        {
            protected override void Execute()
            {
                XRLLogString request = new XRLLogString();
                request.logLine = "This is blocked";
                request.logLinesLength = (ushort)request.logLine.Length;

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute())
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_AddString2 : PutGetVetStringTestBase
        {
            protected override void Execute()
            {
                XRLAdd2String addrequest = new XRLAdd2String();
                XRLAdd2Response addresponse;

                // Set the LMA field
                addrequest.ManualPopulateSlot();
                addrequest.Slot.authDataFlags |= 0x20;
                addrequest.Slot.machinePuid = 0xFB00000000000001;
                addrequest.Slot.userPuid0 = 12345678;

                string DataString = "THIS IS A STRING";

                // Perform AddString
                addrequest.dwTitleID = 0xFFFE0000;
                addrequest.dwStringID = 0x11110000;
                addrequest.dtExpire = System.DateTime.UtcNow.AddMinutes(20);
                addrequest.szDefaultLocale = "en-US";
                addrequest.cLocaleStrings = 1;
                addrequest.fVetText = false;
                addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

                addrequest.rgLocaleStrings[0] = new LocaleString();
                addrequest.rgLocaleStrings[0].szLocale = "en-US";
                addrequest.rgLocaleStrings[0].szString = DataString;

                if (!addrequest.Execute(out addresponse))
                {
                    if (addrequest.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + addrequest.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_AddString : PutGetVetStringTestBase
        {
            protected override void Execute()
            {
                LanguageString langstr = new LanguageString();
                langstr.wLanguage = 1;
                langstr.szString = "en-US";

                XRLAddString request = new XRLAddString();

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                request.dwTitleID = 1111;
                request.dtExpire = System.DateTime.UtcNow.AddSeconds(15).ToUniversalTime();
                request.dwStringID = 9985;
                request.fVetText = false;
                request.cLangStrings = 1;
                request.rgLangStrings = new LanguageString[1];
                request.rgLangStrings[0] = langstr;

                XRLAddResponse response = null;

                if (!request.Execute(out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }

            }
        }

        [TestCase]
        public class D_VetString : TestBase
        {
            protected override void Execute()
            {
                XRLVetString request = new XRLVetString();
                XRLVetResponse response;

                // Set the LMA field
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                string vetstr = "This should be harmless";

                request.dwTitleID = 1;
                request.wLanguage = 1; // ENGLISH
                request.wNumStrings = 1;
                request.rgStringData = new StringData[1];
                request.rgStringData[0] = new StringData();
                request.rgStringData[0].szString = vetstr;
                request.rgStringData[0].wStringSize = (ushort)vetstr.Length;

                if (!request.Execute(out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }



        #endregion

        #region Fuzzed APIs
        public class Fuzz_GetString : StringFuzzTestBase
        {
            [Flags]
            public enum FuzzParameter
            {
                None = 0,
                dwTitleID = 1,
                wLanguage = 2,
                wNumStrings = 4,
                rgdwStringIDs = 8,
            }
            private FuzzParameter _fuzzParameters;

            public Fuzz_GetString()
            {
                // By default, fuzz all parameters
                _fuzzParameters =
                    FuzzParameter.dwTitleID |
                    FuzzParameter.rgdwStringIDs |
                    FuzzParameter.wLanguage |
                    FuzzParameter.wNumStrings;
            }

            public Fuzz_GetString(FuzzParameter parameters)
            {
                _fuzzParameters = parameters;
            }

            protected override void Execute()
            {
                XRLGetString request = new XRLGetString();
                XRLGetStringResponse response;

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                // this string is defined by the site config file
                // \ops\sitecfg\npdb_stringsvr_populate_common.sql
                request.dwTitleID = 0xFFFE0000;
                request.wLanguage = 1;
                request.wNumStrings = 1;
                //request.rgdwStringIDs = GetFuzzedUnsignedIntegerArray();

                // Fuzz the parameters
                if ((_fuzzParameters & FuzzParameter.dwTitleID) != FuzzParameter.None)
                {
                    FclFuzzer.Fuzz("", "dwTitleID", ref request.dwTitleID);
                }
                if ((_fuzzParameters & FuzzParameter.wLanguage) != FuzzParameter.None)
                {
                    FclFuzzer.Fuzz("", "wLanguage", ref request.wLanguage);
                }

                if ((_fuzzParameters & FuzzParameter.wNumStrings) != FuzzParameter.None)
                {
                    FclFuzzer.Fuzz("", "wNumStrings", ref request.wNumStrings);
                }

                if ((_fuzzParameters & FuzzParameter.rgdwStringIDs) != FuzzParameter.None)
                {
                    request.rgdwStringIDs = GetFuzzedUnsignedIntegerArray();
                }
                else
                {
                    request.rgdwStringIDs = new uint[] { 1 };
                }

                if (!request.Execute(out response))
                {
                    Global.RO.Error(request.GetDumpString());
                    return;
                }

                if (response.wNumStrings == 0)
                {
                    // Failed
                    return;
                }
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        public class Fuzz_GetString_dwTitleID : Fuzz_GetString
        {
            public Fuzz_GetString_dwTitleID()
                : base(FuzzParameter.dwTitleID)
            {
            }
        }

        public class Fuzz_GetString_wLanguage : Fuzz_GetString
        {
            public Fuzz_GetString_wLanguage()
                : base(FuzzParameter.wLanguage)
            {
            }
        }

        public class Fuzz_GetString_wNumStrings : Fuzz_GetString
        {
            public Fuzz_GetString_wNumStrings()
                : base(FuzzParameter.wNumStrings)
            {
            }
        }

        public class Fuzz_GetString_rgdwStringIDs : Fuzz_GetString
        {
            public Fuzz_GetString_rgdwStringIDs()
                : base(FuzzParameter.rgdwStringIDs)
            {
            }
        }

        public class Fuzz_GetString2 : StringFuzzTestBase
        {
            [Flags]
            public enum FuzzParameter
            {
                None = 0x0,
                dwTitleID = 0x1,
                wNumStrings = 0x2,
                wLocaleLen = 0x4,
                szLocale = 0x8,
                rgdwStringIDs = 0x10
            }
            private FuzzParameter _fuzzParameters;

            public Fuzz_GetString2()
            {
                _fuzzParameters =
                    FuzzParameter.dwTitleID |
                    FuzzParameter.wNumStrings |
                    FuzzParameter.wLocaleLen |
                    FuzzParameter.szLocale |
                    FuzzParameter.rgdwStringIDs;
            }

            public Fuzz_GetString2(FuzzParameter parameters)
            {
                _fuzzParameters = parameters;
            }

            protected override void Execute()
            {
                FclFuzzer.Initialize();

                // Fuzz the parameters
                try
                {
                    XRLGet2String request = new XRLGet2String();
                    XRLGetStringResponse response;

                    // Set the LMA bits
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;
                    request.Slot.machinePuid = 0xFB00000000000001;
                    request.Slot.userPuid0 = 12345678;

                    // Set the base value of the parameters
                    request.dwTitleID = 0x585207D4;
                    request.wNumStrings = 1;
                    request.wLocaleLen = 1;
                    request.szLocale = "String to Fuzz";

                    // Fuzz the parameters
                    if ((_fuzzParameters & FuzzParameter.dwTitleID) != FuzzParameter.None)
                    {
                        FclFuzzer.Fuzz("", "dwTitleID", ref request.dwTitleID);
                    }
                    if ((_fuzzParameters & FuzzParameter.wNumStrings) != FuzzParameter.None)
                    {
                        FclFuzzer.Fuzz("", "wNumStrings", ref request.wNumStrings);
                    }
                    if ((_fuzzParameters & FuzzParameter.wLocaleLen) != FuzzParameter.None)
                    {
                        FclFuzzer.Fuzz("", "wLocaleLen", ref request.wLocaleLen);
                    }
                    if ((_fuzzParameters & FuzzParameter.szLocale) != FuzzParameter.None)
                    {
                        FclFuzzer.Fuzz("szLocale", ref request.szLocale);
                    }
                    if ((_fuzzParameters & FuzzParameter.rgdwStringIDs) != FuzzParameter.None)
                    {
                        request.rgdwStringIDs = GetFuzzedUnsignedIntegerArray();
                    }
                    else
                    {
                        request.rgdwStringIDs = new uint[] { 1 };
                    }

                    // Verify the result
                    if (!request.Execute(out response))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                catch (Exception ex)
                {
                    Global.RO.Error("Exception: {0}", ex.ToString());
                }
            }
        }

        public class Fuzz_GetString2_dwTitleID : Fuzz_GetString2
        {
            public Fuzz_GetString2_dwTitleID()
                : base(FuzzParameter.dwTitleID)
            {
            }
        }

        public class Fuzz_GetString2_szLocale : Fuzz_GetString2
        {
            public Fuzz_GetString2_szLocale()
                : base(FuzzParameter.szLocale)
            {
            }
        }

        public class Fuzz_GetString2_wLocaleLen : Fuzz_GetString2
        {
            public Fuzz_GetString2_wLocaleLen()
                : base(FuzzParameter.wLocaleLen)
            {
            }
        }

        public class Fuzz_GetString2_rgdwStringIDs : Fuzz_GetString2
        {
            public Fuzz_GetString2_rgdwStringIDs()
                : base(FuzzParameter.rgdwStringIDs)
            {
            }
        }

        public class Fuzz_GetString2_wNumStrings : Fuzz_GetString2
        {
            public Fuzz_GetString2_wNumStrings()
                : base(FuzzParameter.wNumStrings)
            {
            }
        }

        public class Fuzz_MsgServer : StringFuzzTestBase
        {
            [Flags]
            public enum FuzzParameter
            {
                None = 0x0,
                wType = 0x1,
                wLanguage=0x2,
                wNumTitles=0x4,
                rgdwTitleIDs=0x8
            }
            private FuzzParameter _fuzzParameters;

            public Fuzz_MsgServer()
            {
                _fuzzParameters =
                    FuzzParameter.wType |
                    FuzzParameter.wLanguage |
                    FuzzParameter.wNumTitles |
                    FuzzParameter.rgdwTitleIDs;
            }

            public Fuzz_MsgServer(FuzzParameter parameters)
            {
                _fuzzParameters = parameters;
            }

            protected override void Execute()
            {
                XRLTitleIDRequest request = new XRLTitleIDRequest();
                XRLTitleIDResponse response;

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                // Set initial values
                request.wType = 1;  // TitleID
                request.wLanguage = 0;  // ?
                request.wNumTitles = 1;

                // Fuzz Parameters
                if ((_fuzzParameters & FuzzParameter.wType) != FuzzParameter.None)
                {
                    FclFuzzer.Fuzz("", "wType", ref request.wType);
                }

                if ((_fuzzParameters & FuzzParameter.wLanguage) != FuzzParameter.None)
                {
                    FclFuzzer.Fuzz("", "wLanguage", ref request.wLanguage);
                }

                if ((_fuzzParameters & FuzzParameter.wNumTitles) != FuzzParameter.None)
                {
                    FclFuzzer.Fuzz("", "wNumTitles", ref request.wNumTitles);
                }

                if ((_fuzzParameters & FuzzParameter.wNumTitles) != FuzzParameter.None)
                {
                    request.rgdwTitleIDs = GetFuzzedUnsignedIntegerArray();
                }

                if (!request.Execute(out response))
                {
                    //DEBUG
                    //Console.WriteLine( request.GetDumpString() );
                    return;
                }

                if (response.wNumStrings != 1)
                {
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        public class Fuzz_MsgServer_wType : Fuzz_MsgServer
        {
            public Fuzz_MsgServer_wType()
                : base(FuzzParameter.wType)
            {
            }
        }

        public class Fuzz_MsgServer_wLanguage : Fuzz_MsgServer
        {
            public Fuzz_MsgServer_wLanguage()
                : base(FuzzParameter.wLanguage)
            {
            }
        }

        public class Fuzz_MsgServer_wNumTitles : Fuzz_MsgServer
        {
            public Fuzz_MsgServer_wNumTitles()
                : base(FuzzParameter.wNumTitles)
            {
            }
        }

        public class Fuzz_MsgServer_rgdwTitleIDs : Fuzz_MsgServer
        {
            public Fuzz_MsgServer_rgdwTitleIDs()
                : base(FuzzParameter.rgdwTitleIDs)
            {
            }
        }
        #endregion

        #region AttackAPIs
        [TestCase, Description("Attack - getstring.ashx")]
        public class Attack_GetString : TestBase
        {
            protected override void Execute()
            {
                XRLGetString request = new XRLGetString();
                XRLGetStringResponse response;

                // Set the LMA bit
                request.Slot.authDataFlags |= 0x20;

                // this string is defined by the site config file
                // \ops\sitecfg\npdb_stringsvr_populate_common.sql
                request.dwTitleID = 0xFFFE0000;
                request.wLanguage = 1;
                request.wNumStrings = 1;
                request.rgdwStringIDs = new uint[1];
                request.rgdwStringIDs[0] = 1;

                if (!request.Execute(out response))
                {
                    Global.RO.Error(request.GetDumpString());
                    return;
                }

                if (response.wNumStrings > 0)
                {
                    //TODO: Check string return results
                    // DEBUG
                    foreach (StringData str in response.rgStringData)
                    {
                        Console.WriteLine(str.wStringSize.ToString());
                        Console.WriteLine("Stringout: " + str.szString);
                    }
                }
                else  // error
                    return;

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Attack - getstring2.ashx")]
        public class Attack_GetString2 : PutGetVetStringTestBase
        {
            protected override void Execute()
            {
                FclFuzzer.Initialize();

                // Fuzz the parameters
                try
                {
                    XRLGet2String request = new XRLGet2String();
                    XRLGetStringResponse response;

                    // Set LMA bit
                    request.Slot.authDataFlags |= 0x20;

                    // Set the base value of the parameters
                    request.dwTitleID = 0x585207D4;
                    request.wNumStrings = 1;
                    request.wLocaleLen = 1;
                    request.szLocale = "String to Fuzz";
                    request.rgdwStringIDs = new uint[] { 1 };

                    // Verify the result
                    if (!request.Execute(out response))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }

                }
                catch (Exception ex)
                {
                    Global.RO.Error("Exception: {0}", ex.ToString());
                }
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\ConfigSettings.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using xonline.common.config;

namespace XArbTest
{
	/// <summary>
	/// Summary description for ConfigSettings.
	/// </summary>
	public class ConfigSettings :TestNode
	{
		public ConfigSettings()
		{
			ConfigTestBase.component= Component.xarb;
			Add(new ConfigTestBase(Setting.xarb_MaxStatsBundleSize,"300000"));
			Add(new ConfigTestBase(Setting.xarb_MaxTournamentBundleSize,"200000"));
			Add(new ConfigTestBase(Setting.xarb_MaxSessionSeconds,"3700"));
			Add(new ConfigTestBase(Setting.xarb_SessionTimeoutExtensionSeconds,"120"));
			Add(new ConfigTestBase(Setting.xarb_TrailingReportRetriesWaitSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_VerboseLogging,"false"));

			Add(new ConfigTestBase(Setting.xarb_EnableDebugResult,"false"));
			Add(new ConfigTestBase(Setting.xarb_AllowAlternateDestination,"false"));
			Add(new ConfigTestBase(Setting.xarb_BundleRetryPeriodInSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_MaxBundleRetrySeconds,"28880"));
			Add(new ConfigTestBase(Setting.xarb_MemoryUsageLowWaterMark,"400000000"));
			Add(new ConfigTestBase(Setting.xarb_MemoryUsageHighWaterMark,"500000000"));

			Add(new ConfigTestBase(Setting.xarb_GarbageCollectionIntervalInSeconds,"10"));
			Add(new ConfigTestBase(Setting.xarb_TitleParameterReloadPeriodInSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_TrustSummationPeriodInSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_TrustSummationExecutionTimeInSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_TrustSummationRetryInSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_TrustIdleSecondsBeforeFlush,"60"));

			Add(new ConfigTestBase(Setting.xarb_TrustFlushPeriodInSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_MaxDelayedTrustUpdates,"60"));
			Add(new ConfigTestBase(Setting.xarb_TrustSummationTimeoutSeconds,"60"));
			Add(new ConfigTestBase(Setting.xarb_MigrationWaitWindowMinutes,"60"));
			
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\StressOption.cs ===
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

namespace XArbTest
{
	/// <summary>
	/// Summary description for BundleOption.
	/// </summary>
	public class StressOption : System.Windows.Forms.Form
	{
		private System.Windows.Forms.Label label1;
		private System.Windows.Forms.Label label2;
		public System.Windows.Forms.TextBox textBox1;
		public System.Windows.Forms.TextBox textBox2;
		private System.Windows.Forms.Button button1;
		private System.Windows.Forms.Button button2;
		private System.Windows.Forms.GroupBox groupBox1;
		private System.Windows.Forms.Label label4;
		private System.Windows.Forms.Label label5;
		public System.Windows.Forms.TextBox textBox4;
		public System.Windows.Forms.TextBox textBox5;
		private System.Windows.Forms.GroupBox groupBox2;
		public System.Windows.Forms.CheckBox checkBox1;

		
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public StressOption()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.label1 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.textBox1 = new System.Windows.Forms.TextBox();
			this.textBox2 = new System.Windows.Forms.TextBox();
			this.button1 = new System.Windows.Forms.Button();
			this.button2 = new System.Windows.Forms.Button();
			this.groupBox1 = new System.Windows.Forms.GroupBox();
			this.textBox5 = new System.Windows.Forms.TextBox();
			this.textBox4 = new System.Windows.Forms.TextBox();
			this.label5 = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.groupBox2 = new System.Windows.Forms.GroupBox();
			this.checkBox1 = new System.Windows.Forms.CheckBox();
			this.groupBox1.SuspendLayout();
			this.groupBox2.SuspendLayout();
			this.SuspendLayout();
			// 
			// label1
			// 
			this.label1.Location = new System.Drawing.Point(8, 24);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(88, 23);
			this.label1.TabIndex = 0;
			this.label1.Text = "Min Size";
			// 
			// label2
			// 
			this.label2.Location = new System.Drawing.Point(8, 56);
			this.label2.Name = "label2";
			this.label2.TabIndex = 1;
			this.label2.Text = "Max Size";
			// 
			// textBox1
			// 
			this.textBox1.Location = new System.Drawing.Point(128, 24);
			this.textBox1.Name = "textBox1";
			this.textBox1.TabIndex = 2;
			this.textBox1.Text = "";
			// 
			// textBox2
			// 
			this.textBox2.Location = new System.Drawing.Point(128, 56);
			this.textBox2.Name = "textBox2";
			this.textBox2.TabIndex = 3;
			this.textBox2.Text = "";
			// 
			// button1
			// 
			this.button1.Location = new System.Drawing.Point(32, 256);
			this.button1.Name = "button1";
			this.button1.TabIndex = 4;
			this.button1.Text = "OK";
			this.button1.Click += new System.EventHandler(this.button1_Click);
			// 
			// button2
			// 
			this.button2.Location = new System.Drawing.Point(160, 264);
			this.button2.Name = "button2";
			this.button2.TabIndex = 5;
			this.button2.Text = "Close";
			this.button2.Click += new System.EventHandler(this.button2_Click);
			// 
			// groupBox1
			// 
			this.groupBox1.Controls.Add(this.textBox5);
			this.groupBox1.Controls.Add(this.textBox4);
			this.groupBox1.Controls.Add(this.label5);
			this.groupBox1.Controls.Add(this.label4);
			this.groupBox1.Location = new System.Drawing.Point(16, 112);
			this.groupBox1.Name = "groupBox1";
			this.groupBox1.Size = new System.Drawing.Size(240, 100);
			this.groupBox1.TabIndex = 8;
			this.groupBox1.TabStop = false;
			this.groupBox1.Text = "Users per session";
			// 
			// textBox5
			// 
			this.textBox5.Location = new System.Drawing.Point(128, 64);
			this.textBox5.Name = "textBox5";
			this.textBox5.TabIndex = 3;
			this.textBox5.Text = "0";
			// 
			// textBox4
			// 
			this.textBox4.Location = new System.Drawing.Point(128, 24);
			this.textBox4.Name = "textBox4";
			this.textBox4.TabIndex = 2;
			this.textBox4.Text = "0";
			// 
			// label5
			// 
			this.label5.Location = new System.Drawing.Point(16, 64);
			this.label5.Name = "label5";
			this.label5.TabIndex = 1;
			this.label5.Text = "Max Users";
			// 
			// label4
			// 
			this.label4.Location = new System.Drawing.Point(16, 24);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(104, 23);
			this.label4.TabIndex = 0;
			this.label4.Text = "Min Users";
			// 
			// groupBox2
			// 
			this.groupBox2.Controls.Add(this.label1);
			this.groupBox2.Controls.Add(this.label2);
			this.groupBox2.Controls.Add(this.textBox1);
			this.groupBox2.Controls.Add(this.textBox2);
			this.groupBox2.Location = new System.Drawing.Point(16, 8);
			this.groupBox2.Name = "groupBox2";
			this.groupBox2.Size = new System.Drawing.Size(240, 88);
			this.groupBox2.TabIndex = 9;
			this.groupBox2.TabStop = false;
			this.groupBox2.Text = "Stats Bundle Size ";
			// 
			// checkBox1
			// 
			this.checkBox1.Checked = true;
			this.checkBox1.CheckState = System.Windows.Forms.CheckState.Checked;
			this.checkBox1.Location = new System.Drawing.Point(16, 224);
			this.checkBox1.Name = "checkBox1";
			this.checkBox1.Size = new System.Drawing.Size(232, 24);
			this.checkBox1.TabIndex = 10;
			this.checkBox1.Text = "Wait for UDP Receive";
			// 
			// StressOption
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(272, 302);
			this.Controls.Add(this.checkBox1);
			this.Controls.Add(this.groupBox2);
			this.Controls.Add(this.groupBox1);
			this.Controls.Add(this.button2);
			this.Controls.Add(this.button1);
			this.Name = "StressOption";
			this.Text = "Stress Options";
			this.groupBox1.ResumeLayout(false);
			this.groupBox2.ResumeLayout(false);
			this.ResumeLayout(false);

		}
		#endregion

		private void button1_Click(object sender, System.EventArgs e)
		{
			int minval= Convert.ToInt32(textBox1.Text);
			int maxval= Convert.ToInt32(textBox2.Text);
			int minuser = Convert.ToInt32(textBox4.Text);
			int maxuser= Convert.ToInt32(textBox5.Text);
			if(minval<maxval && minuser<maxuser)
			{
				this.DialogResult= DialogResult.OK;
				this.Close();
			}
		}

		private void button2_Click(object sender, System.EventArgs e)
		{
			this.Close();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\XeUacs.cs ===
/* Written by: cagood
 * Limited Machine Account Verfication testing
 * 
 * LMA allowed API's covered in file:  
 * XeABCHGetContactlistGamertags
 * XeAcknowledgeDowngrade
 * XeGetAccountInfoFromPassport
 * XeGetUserWebInfo
 * XePassportGetUserData
 * XeUpsUpdateProfile
 * XeVerifyParentCreditCard
 * XeSetAccountInfo
 * 
 * LMA disabled API's covered in file:
 * XeChangeSubscriptionPaymentInstrument
 * XeCreateXboxComAccount
 * XeGetLinkedGamertag
 * XeLinkXbox1Account
 * XeMigrateXboxComUser
 * XePassportChangePassword
 * XePassportCreate
 * XePassportGetBuddyGamertag
 * XePassportGetEncryptedProxyParameters
 * XePassportGetFriendMemberName
 * XePassportGetMemberName
 * XePassportGetSecretQuestions
 * XePassportLogin
 * XeRecoverAccount
 * XeRemovePaymentInstrument
 * XeUpdatePaymentInstrument
 * XeReserveGamertag
 * XeGetAccountInfo
 * XeTroubleshootAccount
 * XeVerifyBillingInfo
 * AcceptTOU
 * ArgoAuthenticateAccount
 * ChangeGamerTag
 * XeAddPaymentInstrument
 * XeCreateLiveAccount
 * XeGetUserType
 * --GetTitleActivationList
 * XeUpdateXboxComActivity
 * AcceptTermsOfService
 * ClearSubscriptions
 * CreateOwnerAcct
 * DisableSubscription
 * EnumerateEligible
 * GetPaymentInfo
 * GetPostalCode
 * GetSubscriptionStatus
 * LinkWebAccount
 * RenewSubscription
 * ReserveName 
 * RestoreAccount
 * SetPaymentInfo
 * SetUserAccountStatus
 * SetUserPIN
 * SetUserSettings
 * SetUserSettings2
 * TroubleshootAccount
 * VerifyBillingPIN
 * VerifyVoucher
 * VerifyVoucherGetOffer
 * WebGetUserSettings
 */

using System;
using System.Collections;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.config;

using MS.Swi.Mitm;
using MS.Swi.Mitm.Services;
using ServerTestFramework.Utilities.FclFuzzer;

//using ServerTestFramework.Utilities.FclFuzzer;

namespace LMATests.Functional
{
    [TestGroup, Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    class LMAXeUacs : TestNode
    {
        //////////////////////////
        //  LMA Allowed functions
        #region XeABCHGetContactlistGamertags
        /* TODO - CURRENT STATUS OF THIS TEST: Non-Functional
         * Currently this test is not working.  There is an issue where the connection is timing out when
         * trying to call GetMessengerBuddies inside of the server code.  I have asked around but have been
         * unable to find a fix for this.  Due to this problem when fuzzing you won't get the complete code
         * coverage that we would like.  However once the functionality issue can be resolved the fuzzing
         * code is in place and should work just fine.
         */
        [TestCase]
        class P_XeABCHGetContactlistGamertags : XeUacs.Functional.ABCHUserTestBase
        {
            #region Constructor and Fuzzing Enum
            public P_XeABCHGetContactlistGamertags() { }

            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeABCHGetContactlistGamertags(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                userPuid,
                requestFlags,
                queryAtSignupForUsersInABCHandXBL,
                queryAtLoginForUsersInABCHandXBL,
            }
            #endregion

            override protected void Execute()
            {
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeABCHGetContactlistGamertags");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    //WaitForXCache();

                    // now call to find the contactlist.
                    XRLXeABCHGetContactlistGamertags request = new XRLXeABCHGetContactlistGamertags();
                    XRLXeABCHGetContactlistGamertagsResponse response = new XRLXeABCHGetContactlistGamertagsResponse();

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;
                    
                    //  Parameters for the API 
                    request.userPuid = user.UserPuid;
                    request.queryAtSignupForUsersInABCHandXBL = true;
                    request.queryAtLoginForUsersInABCHandXBL = false;

                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        Random randomNum = new Random();
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.userPuid:
                                FclFuzzer.Fuzz("", "UserPuid", ref request.userPuid);
                                break;
                            case FuzzParameter.requestFlags:
                                FclFuzzer.Fuzz("", "RequestFlags", ref request.requestFlags);
                                break;
                            case FuzzParameter.queryAtSignupForUsersInABCHandXBL:
                                if (randomNum.Next(2) == 1)
                                    request.queryAtSignupForUsersInABCHandXBL = true;
                                else
                                    request.queryAtSignupForUsersInABCHandXBL = false;
                                break;
                            case FuzzParameter.queryAtLoginForUsersInABCHandXBL:
                                if (randomNum.Next(2) == 1)
                                    request.queryAtLoginForUsersInABCHandXBL = true;
                                else
                                    request.queryAtLoginForUsersInABCHandXBL = false;
                                break;
                            case (FuzzParameter.RandomFuzz):
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserPuid", ref request.userPuid);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "RequestFlags", ref request.requestFlags);
                                if (randomNum.Next(2) == 1)
                                {
                                    if (randomNum.Next(2) == 1)
                                        request.queryAtSignupForUsersInABCHandXBL = true;
                                    else
                                        request.queryAtSignupForUsersInABCHandXBL = false;
                                }
                                if (randomNum.Next(2) == 1)
                                {
                                    if (randomNum.Next(2) == 1)
                                        request.queryAtLoginForUsersInABCHandXBL = true;
                                    else
                                        request.queryAtLoginForUsersInABCHandXBL = false;
                                }
                                break;

                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(request.GetDumpString());

                    //Global.RO.Info("ABCHGetContactlistItemCount: " + response.ABCHGetContactlistItemCount.ToString("d"));

                    if (response.ABCHGetContactlistItemCount != 0 && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("User should not have any buddies (response:'{0}')", response.ABCHGetContactlistItemCount));

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }
        #region XeABCHGetContactlistGamertags Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeABCHGetContactlistGamertags_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeABCHGetContactlistGamertags_userPuid()
                : base(new P_XeABCHGetContactlistGamertags(P_XeABCHGetContactlistGamertags.FuzzParameter.userPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeABCHGetContactlistGamertags_profile : FuncToStressAdapter
        {
            public XeUacs_XeABCHGetContactlistGamertags_profile()
                : base(new P_XeABCHGetContactlistGamertags(P_XeABCHGetContactlistGamertags.FuzzParameter.requestFlags))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeABCHGetContactlistGamertags_queryAtLoginForUsersInABCHandXBL : FuncToStressAdapter
        {
            public XeUacs_XeABCHGetContactlistGamertags_queryAtLoginForUsersInABCHandXBL()
                : base(new P_XeABCHGetContactlistGamertags(P_XeABCHGetContactlistGamertags.FuzzParameter.queryAtLoginForUsersInABCHandXBL))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeABCHGetContactlistGamertags_queryAtSignupForUsersInABCHandXBL : FuncToStressAdapter
        {
            public XeUacs_XeABCHGetContactlistGamertags_queryAtSignupForUsersInABCHandXBL()
                : base(new P_XeABCHGetContactlistGamertags(P_XeABCHGetContactlistGamertags.FuzzParameter.queryAtSignupForUsersInABCHandXBL))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeABCHGetContactlistGamertags_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeABCHGetContactlistGamertags_RandomFuzz()
                : base(new P_XeABCHGetContactlistGamertags(P_XeABCHGetContactlistGamertags.FuzzParameter.RandomFuzz))
            { }
        }

        #endregion
        #endregion

        #region XeGetUserWebInfo

        [TestCase]
        class P_XeGetUserWebInfo : UserTestBase
        {
            #region Constructor and Fuzzing Enum
            public P_XeGetUserWebInfo() { }

            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeGetUserWebInfo(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                userPuid,
                serviceType,
                RandomFuzz,
            }
            #endregion

            override protected void Execute()
            {
                XRLXeGetUserWebInfo request = new XRLXeGetUserWebInfo();
                XRLXeGetUserWebInfoResponse response = new XRLXeGetUserWebInfoResponse();

                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeGetUserWebInfo");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    // Original code removed for silver test and setup of gold account
                    request.UserPuid = user.UserPuid;
                    
                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.userPuid:
                                FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                break;
                            case FuzzParameter.serviceType:
                                FclFuzzer.Fuzz("", "ServiceType", ref request.ServiceType);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "ServiceType", ref request.ServiceType);
                                break;

                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeGetUserWebInfo failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeGetUserWebInfo returned XErr=0x{0:x}", request.XErr));
                    
                    if (!LMATests.m_EnableFuzzTesting && response.Tier != 6) throw new ApplicationException("Expected gold tier to be returned.");

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }
        #region XeGetUserWebInfo Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserWebInfo_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeGetUserWebInfo_userPuid()
                : base(new P_XeGetUserWebInfo(P_XeGetUserWebInfo.FuzzParameter.userPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserWebInfo_serviceType : FuncToStressAdapter
        {
            public XeUacs_XeGetUserWebInfo_serviceType()
                : base(new P_XeGetUserWebInfo(P_XeGetUserWebInfo.FuzzParameter.serviceType))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserWebInfo_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeGetUserWebInfo_RandomFuzz()
                : base(new P_XeGetUserWebInfo(P_XeGetUserWebInfo.FuzzParameter.RandomFuzz))
            { }
        }

        #endregion
        #endregion

        #region XeUpsUpdateProfile
        [TestCase]
        /* TROUBLESHOOTING TIP: If this test case is failing then you probably need to install the certificate
         * that this API uses ppe-ups.xboxlive.com.pfx
         */
        class P_XeUpsUpdateProfile : UserTestBase
        {
            #region Constructor and Fuzzing Enum
            public P_XeUpsUpdateProfile() { }

            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeUpsUpdateProfile(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                profileLength,
                profile,
            }
            #endregion

            override protected void Execute()
            {
                //XeUser user = CreateXenonUser();
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeUpsUpdateProfile");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    // update the xbox namespace
                    UpsProfile xboxProfile = new UpsProfile();
                    xboxProfile.Email = user.PassportMemberName;
                    xboxProfile.PhonePrefix = user.PhoneInfo.PhonePrefix;
                    xboxProfile.PhoneNumber = user.PhoneInfo.PhoneNumber;
                    xboxProfile.PhoneExtension = user.PhoneInfo.PhoneExtension;


                    //xboxProfile.UpdateUpsProfile(user.PassportUserPuid); <before>
                    XRLXeUpsUpdateProfile request = new XRLXeUpsUpdateProfile();
                    
                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.Profile = xboxProfile.ReturnUpsProfileXML(user.PassportUserPuid);

                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.profile:
                                FclFuzzer.Fuzz("Profile", ref request.Profile);
                                break;
                            case FuzzParameter.profileLength:
                                FclFuzzer.Fuzz("", "ProfileLength", ref request.ProfileLength);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("Profile", ref request.Profile);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "ProfileLength", ref request.ProfileLength);
                                break;
                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute() && !LMATests.m_EnableFuzzTesting)
                        throw new Exception("XRLXeUpsUpdateProfile.Execute failed: " + request.GetDumpString());

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }
        #region XeUpsUpdateProfile Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpsUpdateProfile_profileLength : FuncToStressAdapter
        {
            public XeUacs_XeUpsUpdateProfile_profileLength()
                : base(new P_XeUpsUpdateProfile(P_XeUpsUpdateProfile.FuzzParameter.profileLength))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpsUpdateProfile_profile : FuncToStressAdapter
        {
            public XeUacs_XeUpsUpdateProfile_profile()
                : base(new P_XeUpsUpdateProfile(P_XeUpsUpdateProfile.FuzzParameter.profile))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpsUpdateProfile_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeUpsUpdateProfile_RandomFuzz()
                : base(new P_XeUpsUpdateProfile(P_XeUpsUpdateProfile.FuzzParameter.RandomFuzz))
            { }
        }

        #endregion

        #endregion

        #region XeGetUserSubscriptionDetails
        [TestCase]
        class P_XeGetUserSubscriptionDetails : UserTestBase
        {

            #region Constructor and Fuzzing Enum
            public P_XeGetUserSubscriptionDetails() { }

            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeGetUserSubscriptionDetails(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                userPuid,
                machinePuid,
                offerId,
            }
            #endregion

            override protected void Execute()
            {
                //XeUser user = CreateXenonUser(6, true);
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeSubscriptionDetails");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    XRLXeGetUserSubscriptionDetails request = new XRLXeGetUserSubscriptionDetails();
                    XRLXeGetUserSubscriptionDetailsResponse response = new XRLXeGetUserSubscriptionDetailsResponse();

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.UserPuid = user.UserPuid;
                    request.OfferId = UodbWS.GetUsersSubscriptionOfferId(user.UserPuid);
                    request.InstanceId = UodbWS.GetUsersSubscriptionInstanceId(user.UserPuid);
                    request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                              //check on the SG was catching that the numbers didn't match
                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.userPuid:
                                FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                break;
                            case FuzzParameter.machinePuid:
                                FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachinePuid;  
                                break;
                            case FuzzParameter.offerId:
                                FclFuzzer.Fuzz("", "OfferId", ref request.OfferId);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                    request.Slot.machinePuid = request.MachinePuid;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "OfferId", ref request.OfferId);
                                break;
                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeGetUserSubscriptionDetails failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeGetUserSubscriptionDetails returned XErr=0x{0:x}", request.XErr));

                    this.ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XeGetUserSubscriptionDetails Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserSubscriptionDetails_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeGetUserSubscriptionDetails_userPuid()
                : base(new P_XeGetUserSubscriptionDetails(P_XeGetUserSubscriptionDetails.FuzzParameter.userPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserSubscriptionDetails_machinePuid : FuncToStressAdapter
        {
            public XeUacs_XeGetUserSubscriptionDetails_machinePuid()
                : base(new P_XeGetUserSubscriptionDetails(P_XeGetUserSubscriptionDetails.FuzzParameter.machinePuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserSubscriptionDetails_offerId : FuncToStressAdapter
        {
            public XeUacs_XeGetUserSubscriptionDetails_offerId()
                : base(new P_XeGetUserSubscriptionDetails(P_XeGetUserSubscriptionDetails.FuzzParameter.offerId))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserSubscriptionDetails_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeGetUserSubscriptionDetails_RandomFuzz()
                : base(new P_XeGetUserSubscriptionDetails(P_XeGetUserSubscriptionDetails.FuzzParameter.RandomFuzz))
            { }
        }


        #endregion

        #endregion

        #region XeAcknowledgeDowngrade
        /* NOTABLE INFORMATION - I was using a Gold account to better get a more 'acurate' testing scenario.  However
         * this was causing a problem where some of the offer tests expected gold accounts which had then been downgraded
         * to silver.  I have since started to use silver accounts in this test so that they don't interfere with the
         * other tests running.
        */
        [TestCase]
        class P_XeAcknowledgeDowngrade : UserTestBase
        {
            #region Constructor and Fuzzing Enum
            public P_XeAcknowledgeDowngrade() { }

            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeAcknowledgeDowngrade(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                UserId,
            }
            #endregion

            override protected void Execute()
            {
                XRLXeAcknowledgeDowngrade request = new XRLXeAcknowledgeDowngrade();

                //XeUser user = CreateXenonUser();
                //user.m_request.Slot.authDataFlags |= 0x20;
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetSilverAccount("XeAcknowledgeDowngrade");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    // set the downgraded flag to 1
                    UodbWS.SetUserProperty(user.UserPuid, "f_downgraded", "1");

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.UserId = user.UserPuid;

                    #region Fuzzing code
                    //I don't have a switch statement here because currently there is only one parameter to fuzz
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        FclFuzzer.Fuzz("", "UserID", ref request.UserId);
                    }
                    #endregion

                    if (!request.Execute() && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeAcknowledgeDowngrade failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeAcknowledgeDowngrade returned XErr=0x{0:x}", request.XErr));

                    if (!LMATests.m_EnableFuzzTesting)
                    {
                        // verify that the downgraded flag is now set to zero
                        string downgradedFlag = UodbWS.GetUserProperty(user.UserPuid, "f_downgraded");
                        if (downgradedFlag != "0") throw new UnexpectedTestResultException("Expected f_downgraded flag to be zero. Current value is " + downgradedFlag);
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XeAcknowledgeDowngrade Stress tests
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeAcknowledgeDowngrade_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeAcknowledgeDowngrade_userPuid()
                : base(new P_XeAcknowledgeDowngrade())
            { }
        }
        #endregion
        #endregion

        #region XeGetAccountInfoFromPassport
        [TestCase]
        class P_XeGetAccountInfoFromPassport : UserTestBase
        {
            #region Constructor and fuzzing enum
            public P_XeGetAccountInfoFromPassport() { }
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeGetAccountInfoFromPassport(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                signedPassportPuid,
                machinePuid,
            }
            #endregion

            protected override void Execute()
            {
                XRLXeGetAccountInfoFromPassport request = new XRLXeGetAccountInfoFromPassport();
                XRLXeGetAccountInfoResponse response;

                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeGetAccountInfoFromPassport");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.PassportSessionToken = user.PassportSessionToken;
                    request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                              //check on the SG was catching that the numbers didn't match


                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.signedPassportPuid:
                                FclFuzzer.Fuzz("SignedPassportPuid", ref request.PassportSessionToken);
                                break;
                            case FuzzParameter.machinePuid:
                                FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachinePuid;
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("SignedPassportPuid", ref request.PassportSessionToken);
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                    //this is so that we can get around the security check that the slot and request MachineId don't match
                                    request.Slot.machinePuid = request.MachinePuid;
                                } 
                                break;
                            default:
                                break;
                        }
                    }
                    #endregion

                    bool result = request.Execute(out response);

                    if (!LMATests.m_EnableFuzzTesting)
                    {
                        ValueCheck.IsTrue(result, "Request should succeed");
                        ValueCheck.TestHR("request.XErr", HResult.S_OK, request.XErr);

                        ValueCheck.Test("response.FirstName", user.FirstName, response.FirstName);
                        ValueCheck.Test("response.LastName", user.LastName, response.LastName);
                    }

                    this.ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }

        }

        #region XeGetAccountInfoFromPassport Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetAccountInfoFromPassport_signedPassportPuid : FuncToStressAdapter
        {
            public XeUacs_XeGetAccountInfoFromPassport_signedPassportPuid()
                : base(new P_XeGetAccountInfoFromPassport(P_XeGetAccountInfoFromPassport.FuzzParameter.signedPassportPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetAccountInfoFromPassport_machinePuid : FuncToStressAdapter
        {
            public XeUacs_XeGetAccountInfoFromPassport_machinePuid()
                : base(new P_XeGetAccountInfoFromPassport(P_XeGetAccountInfoFromPassport.FuzzParameter.machinePuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetAccountInfoFromPassport_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeGetAccountInfoFromPassport_RandomFuzz()
                : base(new P_XeGetAccountInfoFromPassport(P_XeGetAccountInfoFromPassport.FuzzParameter.RandomFuzz))
            { }
        }


        #endregion

        #endregion

        //Utility Functions for GetUserinfor
        public static void SetUserInfo(XeUser user)
        {
            // set the user info here manually. We'll then retrieve this info using the API and verify that it matches.\
            user.FirstName = "John";
            user.LastName = "Doe";
            user.AddressInfo.Street1 = "Flat 2a";
            user.AddressInfo.Street2 = "29 St Johns Ave";
            user.AddressInfo.City = "Putney, London";
            user.AddressInfo.State = "";
            user.AddressInfo.PostalCode = "SW15 6AL";
            user.Email = "john.doe" + Global.PassportMemberDomain;
            user.LanguageId = 1;
            user.CountryId = 35;
            user.MsftOptIn = 0;
            user.PartnerOptIn = 0;
            user.BirthDate = (DateTime.Now.AddYears(-25)).AddDays(-1);
        }

        #region XeGetUserInfo
        [TestCase]
        class P_XeGetUserInfo : UserTestBase
        {

            #region Constructors and Fuzzing Enum

            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeGetUserInfo() { }
            public P_XeGetUserInfo(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                userPuid,
                machinePuid,
                titleId,
            }
            #endregion

            override protected void Execute()
            {
                XRLXeGetUserInfo request = new XRLXeGetUserInfo();
                XRLXeGetUserInfoResponse response;
                uint DashTitleId_Xenon = 0xFFFE07D1;

                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeGetUserInfo");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.UserPuid = user.UserPuid;
                    request.TitleId = DashTitleId_Xenon;
                    request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                              //check on the SG was catching that the numbers didn't match
                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case (FuzzParameter.machinePuid):
                                FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachinePuid;
                                break;
                            case (FuzzParameter.userPuid):
                                FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                break;
                            case (FuzzParameter.titleId):
                                FclFuzzer.Fuzz("", "TitleID", ref request.TitleId);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachinePuid", ref request.MachinePuid);
                                    //this is so that we can get around the security check that the slot and request MachineId don't match
                                    request.Slot.machinePuid = request.MachinePuid;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserPuid", ref request.UserPuid);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "TitleID", ref request.TitleId);
                                break;
                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeGetUserInfo failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeGetUserInfo returned XErr=0x{0:x}", request.XErr));

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XeGetUserInfo Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserInfo_machinePuid : FuncToStressAdapter
        {
            public XeUacs_XeGetUserInfo_machinePuid()
                : base(new P_XeGetUserInfo(P_XeGetUserInfo.FuzzParameter.machinePuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserInfo_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeGetUserInfo_userPuid()
                : base(new P_XeGetUserInfo(P_XeGetUserInfo.FuzzParameter.userPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserInfo_titleId : FuncToStressAdapter
        {
            public XeUacs_XeGetUserInfo_titleId()
                : base(new P_XeGetUserInfo(P_XeGetUserInfo.FuzzParameter.titleId))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetUserInfo_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeGetUserInfo_RandomFuzz()
                : base(new P_XeGetUserInfo(P_XeGetUserInfo.FuzzParameter.RandomFuzz))
            { }
        }

        #endregion
        #endregion

        #region XePassportGetUserData
        [TestCase]
        class P_XePassportGetUserData : UserTestBase
        {
            #region Constructors and Fuzzing Enum
            public P_XePassportGetUserData() { }

            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XePassportGetUserData(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                sessionToken,
            }
            #endregion

            override protected void Execute()
            {
                XRLXePassportGetUserData request = new XRLXePassportGetUserData();
                XRLXePassportGetUserDataResponse response = new XRLXePassportGetUserDataResponse();

                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XePassportGetUserData");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.SessionToken = user.PassportSessionToken;

                    #region Fuzzing switch statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case (FuzzParameter.sessionToken):
                                FclFuzzer.Fuzz("SessionToken", ref request.SessionToken);
                                break;
                            default:
                                break;
                        }
                    }
                    #endregion

                    // create the ups profile
                    UpsProfile profile = new UpsProfile();
                    profile.FirstName = user.FirstName;
                    profile.LastName = user.LastName;
                    profile.BirthDate = user.BirthDate;
                    profile.Street1 = user.AddressInfo.Street1;
                    profile.Street2 = user.AddressInfo.Street2;
                    profile.City = user.AddressInfo.City;
                    profile.County = user.AddressInfo.District;
                    profile.Region = user.AddressInfo.State;
                    profile.PostalCode = user.AddressInfo.PostalCode;
                    profile.Country = UpsProfile.CountryCodeFromCountryId(user.CountryId);
                    profile.UpdateUpsProfile(user.PassportUserPuid);

                    // need to process these seperately from the others.
                    profile = new UpsProfile();
                    profile.Email = user.PassportMemberName;
                    profile.PhonePrefix = user.PhoneInfo.PhonePrefix;
                    profile.PhoneNumber = user.PhoneInfo.PhoneNumber;
                    profile.PhoneExtension = user.PhoneInfo.PhoneExtension;
                    profile.UpdateUpsProfile(user.PassportUserPuid);

                    // retrieve the ups profile
                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting) 
                        throw new UnexpectedTestResultException(request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting) 
                        throw new UnexpectedTestResultException(request.GetDumpString());

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XePassportGetUserData Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XePassportGetUserData_sessionToken : FuncToStressAdapter
        {
            public XeUacs_XePassportGetUserData_sessionToken()
                : base(new P_XePassportGetUserData(P_XePassportGetUserData.FuzzParameter.sessionToken))
            { }
        }

        #endregion
        #endregion

        #region XeRecoverAccount

        [TestCase]
        class P_XeRecoverAccount : UserTestBase
        {
            #region Constructors and Fuzz enum

            public P_XeRecoverAccount()
            {
            }
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeRecoverAccount(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                machinePuid,
                signedPuid,
            }

            #endregion

            override protected void Execute()
            {
                //XeUser user = CreateXenonUserForRecovery();
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XePassportGetUserData");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    // login with the passport account
                    byte[] passportSessionToken = user.PassportSessionToken;

                    // recover the account
                    XRLXeRecoverAccount recover = new XRLXeRecoverAccount();

                    user.m_request.Slot.authDataFlags |= 0x20;

                    //  This is the code that marks the request from a PC LMA account
                    recover.ManualPopulateSlot();
                    recover.Slot.authDataFlags |= 0x20;             //  LMA flag
                    recover.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    recover.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    recover.Request.SignedPuid = passportSessionToken;
                    recover.Request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                              //check on the SG was catching that the numbers didn't match

                    #region fuzzing switch statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.machinePuid:
                                FclFuzzer.Fuzz("", "Machine ID", ref request.MachinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachinePuid;
                                break;
                            case FuzzParameter.signedPuid:
                                FclFuzzer.Fuzz("SignedPuid", ref request.SignedPuid);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "Machine ID", ref request.MachinePuid);
                                    //this is so that we can get around the security check that the slot and request MachineId don't match
                                    request.Slot.machinePuid = request.MachinePuid;
                                } 
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("SignedPuid", ref request.SignedPuid);
                                break;
                            default:
                                //  parameter not found 
                                break;
                        };
                    }
                    #endregion


                    if (!recover.Execute() && !LMATests.m_EnableFuzzTesting)
                    {
                        throw new UnexpectedTestResultException("XRLXeRecoverAccount failed: " + request.GetDumpString());
                    }

                    if (!LMATests.m_EnableFuzzTesting)
                    {
                        // validate that the response is the correct account
                        if (recover.Response.UserPuid != user.UserPuid) throw new UnexpectedTestResultException("Invalid user puid in response.");
                        if (recover.Response.Gamertag != user.Gamertag) throw new UnexpectedTestResultException("Invalid gamertag in response.");
                    }

                    ResultCode = TEST_RESULTS.PASSED;

                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XeRecoverAccount Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeRecoverAccount_machinePuid : FuncToStressAdapter
        {
            public XeUacs_XeRecoverAccount_machinePuid()
                : base(new P_XeRecoverAccount(P_XeRecoverAccount.FuzzParameter.machinePuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeRecoverAccount_signedPuid : FuncToStressAdapter
        {
            public XeUacs_XeRecoverAccount_signedPuid()
                : base(new P_XeRecoverAccount(P_XeRecoverAccount.FuzzParameter.signedPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeRecoverAccount_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeRecoverAccount_RandomFuzz()
                : base(new P_XeRecoverAccount(P_XeRecoverAccount.FuzzParameter.RandomFuzz))
            { }
        }

        #endregion

        #endregion

        #region XeVerifyParentCreditCard
        [TestCase]
        class P_XeVerifyParentCreditCard : UserTestBase
        {
            #region Constructors and fuzzing enum

            public P_XeVerifyParentCreditCard()
            {
            }

            //  This variable and constructor will allow us to tell the test which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeVerifyParentCreditCard(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                machinePuid,
                titleId,
                signedParentPassportPuid,
                parentPassportmemberNameLength,
                parentPassportmemberName,
                languageId,
                countryId,
                firstNameLength,
                firstName,
                lastNameLength,
                lastName,
                emailLength,
                email,
                addressInfo,
                phoneInfo,
                creditCardInfo,
            }

            #endregion

            override protected void Execute()
            {
                //it will use default values to initialize the fields
                XRLXeVerifyParentCreditCard request = new XRLXeVerifyParentCreditCard();

                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetSilverAccount("XeSubscriptionDetails");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    // all values are defaulted in XRLXeVerifyParentCreditCard()

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    request.MachinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                              //check on the SG was catching that the numbers didn't match
                    #region Fuzzing Switch Statment
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case FuzzParameter.machinePuid:
                                FclFuzzer.Fuzz("", "Machine ID", ref request.MachinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.MachinePuid;
                                break;
                            case FuzzParameter.titleId:
                                FclFuzzer.Fuzz("", "TitleId", ref request.TitleId);
                                break;
                            case FuzzParameter.signedParentPassportPuid:
                                FclFuzzer.Fuzz("PUID", ref request.SignedParentPassportPuid);
                                break;
                            case FuzzParameter.parentPassportmemberNameLength:
                                FclFuzzer.Fuzz("", "ParentPassportMemberNameLength", ref request.ParentPassportMemberNameLength);
                                break;
                            case FuzzParameter.parentPassportmemberName:
                                FclFuzzer.Fuzz("ParentPassportMemberName", ref request.ParentPassportMemberName);
                                break;
                            case FuzzParameter.languageId:
                                FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageId);
                                break;
                            case FuzzParameter.countryId:
                                FclFuzzer.Fuzz("", "CountryId", ref request.CountryId);
                                break;
                            case FuzzParameter.firstName:
                                FclFuzzer.Fuzz("FirstName", ref request.FirstName);
                                break;
                            case FuzzParameter.firstNameLength:
                                FclFuzzer.Fuzz("", "FirstNameLength", ref request.FirstNameLength);
                                break;
                            case FuzzParameter.lastName:
                                FclFuzzer.Fuzz("LastName", ref request.LastName);
                                break;
                            case FuzzParameter.lastNameLength:
                                FclFuzzer.Fuzz("", "LastNameLength", ref request.LastNameLength);
                                break;
                            case FuzzParameter.emailLength:
                                FclFuzzer.Fuzz("", "EmailLength", ref request.EmailLength);
                                break;
                            case FuzzParameter.email:
                                FclFuzzer.Fuzz("Email", ref request.Email);
                                break;
                            case FuzzParameter.addressInfo:
                                FclFuzzer.Fuzz("request.AddressInforData", ref request.AddressInfo, false);
                                break;
                            case FuzzParameter.phoneInfo:
                                FclFuzzer.Fuzz("request.PhoneInfoData", ref request.PhoneInfo, false);
                                break;
                            case FuzzParameter.creditCardInfo:
                                FclFuzzer.Fuzz("request.CreditCardInfo", ref request.CreditCardInfo, false);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "Machine ID", ref request.MachinePuid);
                                    request.Slot.machinePuid = request.MachinePuid;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "TitleId", ref request.TitleId);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("PUID", ref request.SignedParentPassportPuid);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "ParentPassportMemberNameLength", ref request.ParentPassportMemberNameLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("ParentPassportMemberName", ref request.ParentPassportMemberName);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "LanguageId", ref request.LanguageId);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "CountryId", ref request.CountryId);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("FirstName", ref request.FirstName);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "FirstNameLength", ref request.FirstNameLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("LastName", ref request.LastName);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "LastNameLength", ref request.LastNameLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "EmailLength", ref request.EmailLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("Email", ref request.Email);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("request.AddressInforData", ref request.AddressInfo, false);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("request.PhoneInfoData", ref request.PhoneInfo, false);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("request.CreditCardInfo", ref request.CreditCardInfo, false);
                                break;
                            default:
                                //  parameter not found 
                                break;
                        };
                    }
                    #endregion

                    if (!request.Execute() && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("XRLXeVerifyParentCreditCard failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeVerifyParentCreditCard returned XErr=0x{0:x}", request.XErr));

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }

        #region XeVerifyParentCreditCard Fuzzing Tests
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_machinePuid : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_machinePuid()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.machinePuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_titleId : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_titleId()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.titleId))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_signedParentPassportPuid : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_signedParentPassportPuid()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.signedParentPassportPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_parentPassportmemberNameLength : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_parentPassportmemberNameLength()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.parentPassportmemberNameLength))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_parentPassportmemberName : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_parentPassportmemberName()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.parentPassportmemberName))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_languageId : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_languageId()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.languageId))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_countryId : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_countryId()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.countryId))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_firstNameLength : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_firstNameLength()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.firstNameLength))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_firstName : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_firstName()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.firstName))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_lastNameLength : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_lastNameLength()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.lastNameLength))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_lastName : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_lastName()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.lastName))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_emailLength : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_emailLength()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.emailLength))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_email : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_email()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.email))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_addressInfo : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_addressInfo()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.addressInfo))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_phoneInfo : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_phoneInfo()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.phoneInfo))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_creditCardInfo : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_creditCardInfo()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.creditCardInfo))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeVerifyParentCreditCard_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeVerifyParentCreditCard_RandomFuzz()
                : base(new P_XeVerifyParentCreditCard(P_XeVerifyParentCreditCard.FuzzParameter.RandomFuzz))
            { }
        }
        #endregion

        #endregion

        #region XeGetPointsBalance
        [TestCase]
        class P_XeGetPointsBalance : UserTestBase
        {
            #region Constructors and fuzzing enum

            public P_XeGetPointsBalance()
            {
            }

            //  This variable and constructor will allow us to tell the test which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeGetPointsBalance(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                RandomFuzz,
                userPuid,
                machinePuid,
            }

            #endregion

            protected override void Execute()
            {
                // create a xenon user
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeGetPointsBalance");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    XRLXeGetPointsBalance request = new XRLXeGetPointsBalance();
                    XRLXeGetPointsBalanceResponse response;

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    //  Parameters for the API 
                    request.userPuid = user.UserPuid;
                    request.machinePuid = 0xfb00000000000001; //This was changed from user.MachinePuid becuase a security
                                                              //check on the SG was catching that the numbers didn't match
                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case (FuzzParameter.machinePuid):
                                FclFuzzer.Fuzz("", "MachinePuid", ref request.machinePuid);
                                //this is so that we can get around the security check that the slot and request MachineId don't match
                                request.Slot.machinePuid = request.machinePuid;
                                break;
                            case (FuzzParameter.userPuid):
                                FclFuzzer.Fuzz("", "UserPuid", ref request.userPuid);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                {
                                    FclFuzzer.Fuzz("", "MachinePuid", ref request.machinePuid);
                                    request.Slot.machinePuid = request.machinePuid;
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "UserPuid", ref request.userPuid);
                                break;
                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("Error executing XRLXeGetPointsBalance(): " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeGetPointsBalance returned XErr=0x{0:x}", request.XErr));
                    if (!LMATests.m_EnableFuzzTesting)
                    {
                        Global.RO.Info("Points balance for new user = {0}", response.PointsBalance);
                    }
                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }
        #region XeGetPointsBalance Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetPointsBalance_machinePuid : FuncToStressAdapter
        {
            public XeUacs_XeGetPointsBalance_machinePuid()
                : base(new P_XeGetPointsBalance(P_XeGetPointsBalance.FuzzParameter.machinePuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetPointsBalance_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeGetPointsBalance_userPuid()
                : base(new P_XeGetPointsBalance(P_XeGetPointsBalance.FuzzParameter.userPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeGetPointsBalance_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeGetPointsBalance_RandomFuzz()
                : base(new P_XeGetPointsBalance(P_XeGetPointsBalance.FuzzParameter.RandomFuzz))
            { }
        }
        #endregion
        #endregion

        #region XeUpdateParentalControls
        [TestCase]
        class P_XeUpdateParentalControls : UserTestBase
        {
            #region Constructors and fuzzing enum

            public P_XeUpdateParentalControls()
            {
            }

            //  This variable and constructor will allow us to tell the test which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeUpdateParentalControls(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                userPuid,
                userGrantPrivileges,
                userRestrictPrivileges,
                sourceLength,
                source,
                RandomFuzz,
            }

            #endregion

            protected override void Execute()
            {
                // create a xenon user
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeUpsGetProfile");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    XRLXeUpdateParentalControls request = new XRLXeUpdateParentalControls();
                    
                    request.UserPuid = user.UserPuid;
                    request.Source = "stftest";
                    
                    UserPrivileges privs = new UserPrivileges();
                    privs.SetAllPrivs(true);
                    request.UserGrantPrivileges = privs.ToArray();
                    privs.SetAllPrivs(false);
                    request.UserRestrictPrivileges = privs.ToArray();

                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        Random randomNum = new Random();
                        switch (m_ParmToFuzz)
                        {
                            case (FuzzParameter.userPuid):
                                FclFuzzer.Fuzz("", "Puid", ref request.UserPuid);
                                break;
                            case (FuzzParameter.userGrantPrivileges):
                                    //do this one in like 10 times because we want to focus on invalid data
                                    //more
                                    if (randomNum.Next(10) == 1)
                                    {
                                        int tempLength = randomNum.Next(0, request.UserGrantPrivileges.Length + 10);
                                        request.UserGrantPrivileges = new uint[tempLength];
                                    }
                                    for (int i = 0; i < request.UserGrantPrivileges.Length; i++)
                                    {
                                        FclFuzzer.Fuzz("", "UserGrantPrivileges", ref request.UserGrantPrivileges[i]);
                                    }

                                    break;
                            case (FuzzParameter.userRestrictPrivileges):
                                    //do this one in like 10 times because we want to focus on invalid data
                                    //more
                                    if (randomNum.Next(10) == 1)
                                    {
                                        int tempLength = randomNum.Next(0, request.UserRestrictPrivileges.Length + 10);
                                        request.UserRestrictPrivileges = new uint[tempLength];
                                    }
                                    for (int i = 0; i < request.UserRestrictPrivileges.Length; i++)
                                    {
                                        FclFuzzer.Fuzz("", "UserRestrictPrivileges", ref request.UserRestrictPrivileges[i]);
                                    }
                                    break;
                                
                            case (FuzzParameter.sourceLength):
                                FclFuzzer.Fuzz("", "SourceLength", ref request.SourceLength);
                                break;
                            case (FuzzParameter.source):
                                FclFuzzer.Fuzz("Source", ref request.Source);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "Puid", ref request.UserPuid);
                                if (randomNum.Next(2) == 1)
                                {
                                    if (randomNum.Next(10) == 1)
                                    {
                                        int tempLength = randomNum.Next(0, request.UserGrantPrivileges.Length + 10);
                                        request.UserGrantPrivileges = new uint[tempLength];
                                    }
                                    for (int i = 0; i < request.UserGrantPrivileges.Length; i++)
                                    {
                                        FclFuzzer.Fuzz("", "UserGrantPrivileges", ref request.UserGrantPrivileges[i]);
                                    }
                                }
                                if (randomNum.Next(2) == 1)
                                {
                                    if (randomNum.Next(10) == 1)
                                    {
                                        int tempLength = randomNum.Next(0, request.UserRestrictPrivileges.Length + 10);
                                        request.UserRestrictPrivileges = new uint[tempLength];
                                    }
                                    for (int i = 0; i < request.UserRestrictPrivileges.Length; i++)
                                    {
                                        FclFuzzer.Fuzz("", "UserRestrictPrivileges", ref request.UserRestrictPrivileges[i]);
                                    }
                                }
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "SourceLength", ref request.SourceLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("Source", ref request.Source);
                                break;

                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute() && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("Error executing XRLXeUpsGetProfile(): " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeUpsGetProfile returned XErr=0x{0:x}", request.XErr));

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }
        #region XeUpsGetProfile Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpdateParentalControls_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeUpdateParentalControls_userPuid()
                : base(new P_XeUpdateParentalControls(P_XeUpdateParentalControls.FuzzParameter.userPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpdateParentalControls_userGrantPrivileges : FuncToStressAdapter
        {
            public XeUacs_XeUpdateParentalControls_userGrantPrivileges()
                : base(new P_XeUpdateParentalControls(P_XeUpdateParentalControls.FuzzParameter.userGrantPrivileges))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpdateParentalControls_userRestrictPrivileges : FuncToStressAdapter
        {
            public XeUacs_XeUpdateParentalControls_userRestrictPrivileges()
                : base(new P_XeUpdateParentalControls(P_XeUpdateParentalControls.FuzzParameter.userRestrictPrivileges))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpdateParentalControls_sourceLength : FuncToStressAdapter
        {
            public XeUacs_XeUpdateParentalControls_sourceLength()
                : base(new P_XeUpdateParentalControls(P_XeUpdateParentalControls.FuzzParameter.sourceLength))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpdateParentalControls_source : FuncToStressAdapter
        {
            public XeUacs_XeUpdateParentalControls_source()
                : base(new P_XeUpdateParentalControls(P_XeUpdateParentalControls.FuzzParameter.source))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpdateParentalControls_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeUpdateParentalControls_RandomFuzz()
                : base(new P_XeUpdateParentalControls(P_XeUpdateParentalControls.FuzzParameter.RandomFuzz))
            { }
        }
        
        #endregion
        #endregion

        #region XeUpsGetProfile
        [TestCase]
        class P_XeUpsGetProfile : UserTestBase
        {
            #region Constructors and fuzzing enum

            public P_XeUpsGetProfile()
            {
            }

            //  This variable and constructor will allow us to tell the test which parameter we want it to fuzz
            public static FuzzParameter m_ParmToFuzz = FuzzParameter.None;

            public P_XeUpsGetProfile(FuzzParameter paramToFuzz)
            {
                m_ParmToFuzz = paramToFuzz;
            }

            public enum FuzzParameter
            {
                None = 0,
                userPuid,
                attributesLength,
                attributes,
                RandomFuzz,
            }

            #endregion

            protected override void Execute()
            {
                // create a xenon user
                BillingAccounts Accounts = BillingAccounts.Instance;
                XeUser user = Accounts.GetGoldAccount("XeUpsGetProfile");
                if (user == null)
                    throw new UnexpectedTestResultException("Unable to secure re-usable account for test, please check or lower threads to number of accounts created in list");
                try
                {
                    

                    // update the xbox namespace
                    XRLXeUpsGetProfile request = new XRLXeUpsGetProfile();
                    XRLXeUpsGetProfileResponse response = new XRLXeUpsGetProfileResponse();
                    request.Puid = user.PassportUserPuid;
                    request.Attributes = string.Join(",", new string[] {
                    "Personal2_CS.Name_First",
                    "Personal2_CS.Name_Last" });

                    //  This is the code that marks the request from a PC LMA account
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;             //  LMA flag
                    request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)
                    request.Slot.userPuid0 = user.UserPuid;

                    #region Fuzzing Switch Statement
                    if (LMATests.m_EnableFuzzTesting)
                    {
                        switch (m_ParmToFuzz)
                        {
                            case (FuzzParameter.userPuid):
                                FclFuzzer.Fuzz("", "Puid", ref request.Puid);
                                break;
                            case (FuzzParameter.attributesLength):
                                FclFuzzer.Fuzz("", "AttributesLength", ref request.AttributesLength);
                                break;
                            case (FuzzParameter.attributes):
                                FclFuzzer.Fuzz("Attributes", ref request.Attributes);
                                break;
                            case (FuzzParameter.RandomFuzz):
                                Random randomNum = new Random();
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "Puid", ref request.Puid);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("", "AttributesLength", ref request.AttributesLength);
                                if (randomNum.Next(2) == 1)
                                    FclFuzzer.Fuzz("Attributes", ref request.Attributes);
                                break;
                            default:
                                break;
                        }
                    }
                    #endregion

                    if (!request.Execute(out response) && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException("Error executing XRLXeUpsGetProfile(): " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK && !LMATests.m_EnableFuzzTesting)
                        throw new UnexpectedTestResultException(String.Format("XRLXeUpsGetProfile returned XErr=0x{0:x}", request.XErr));

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    Accounts.ReturnAccount(user.UserPuid);
                }
            }
        }
        #region XeUpsGetProfile Stress Tests

        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpsGetProfile_userPuid : FuncToStressAdapter
        {
            public XeUacs_XeUpsGetProfile_userPuid()
                : base(new P_XeUpsGetProfile(P_XeUpsGetProfile.FuzzParameter.userPuid))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpsGetProfile_attributesLength : FuncToStressAdapter
        {
            public XeUacs_XeUpsGetProfile_attributesLength()
                : base(new P_XeUpsGetProfile(P_XeUpsGetProfile.FuzzParameter.attributesLength))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpsGetProfile_attributes : FuncToStressAdapter
        {
            public XeUacs_XeUpsGetProfile_attributes()
                : base(new P_XeUpsGetProfile(P_XeUpsGetProfile.FuzzParameter.attributes))
            { }
        }
        [StressTest(TargetTPS = 1)]
        public class XeUacs_XeUpsGetProfile_RandomFuzz : FuncToStressAdapter
        {
            public XeUacs_XeUpsGetProfile_RandomFuzz()
                : base(new P_XeUpsGetProfile(P_XeUpsGetProfile.FuzzParameter.RandomFuzz))
            { }
        }
        #endregion
        #endregion

        #region LMA Disabled API's
        ////////////////////////////////
        //  LMA Disabled API's
        ////////////////////////////////

        [TestCase]
        class D_XeSetAccountInfo : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeSetAccountInfo request = new XRLXeSetAccountInfo();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;
                request.FirstName = "Tom";
                request.LastName = "Sawyer";
                request.Birthdate = new DateTime(1980,2,14);
                request.Email = "";
                request.AddressInfo = new AddressInfoData();
                request.PhoneInfo = new PhoneInfoData();
                request.LanguageId = 1;
                request.MsftOptIn = 0;
                request.PartnerOptIn = 0;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeChangeSubscriptionPaymentInstrument : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeChangeSubscriptionPaymentInstrument request = new XRLXeChangeSubscriptionPaymentInstrument();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;
                request.ServiceInstanceId = "6543215";
                request.PaymentInstrumentId = "89842318";

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }

            }
        }

        [TestCase]
        class D_XeCreateXboxComAccount : UserTestBase
        {
            protected override void Execute()
            {
                XRLXeCreateXboxComAccount request = new XRLXeCreateXboxComAccount();
                XRLXeCreateXboxComAccountResponse response = new XRLXeCreateXboxComAccountResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPassportPuid = 123456789;
                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeGetLinkedGamertag : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeGetLinkedGamertag request = new XRLXeGetLinkedGamertag();
                XRLXeGetLinkedGamertagResponse response = new XRLXeGetLinkedGamertagResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.signedPassportPuid = user.PassportSessionToken;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeLinkXbox1Account : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeLinkXbox1Account request = new XRLXeLinkXbox1Account();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.Gamertag = "Chuck Norris";
                //request.SignedUserPassportPuid = 12323188;
                //request.SignedOwnerPassportPuid = 980546;
                //request.PhoneInfo.PhonePrefix = owner.phonePrefix;
                //request.PhoneInfo.PhoneNumber = owner.phoneNumber;
                //request.PhoneInfo.PhoneExtension = owner.phoneExtension;
                //request.PostalCode = owner.postalCode;
                //request.CardHolder = owner.cardHolder;
                //request.CardNumber = owner.cardNumber;


                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeMigrateXboxComUser : UserTestBase
        {
            override protected void Execute()
            {
                // now migrate that account
                XRLXeMigrateXboxComUser request = new XRLXeMigrateXboxComUser();
                XRLXeMigrateXboxComUserResponse response = new XRLXeMigrateXboxComUserResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.SignedPassportPuid = PassportUtilities.GenerateSessionToken(passportPuid, request.Slot.Key);
                request.OfflineXuid = 0;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XePassportChangePassword : UserTestBase
        {
            override protected void Execute()
            {
                XRLXePassportChangePassword request = new XRLXePassportChangePassword();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them

                // create a new passport member
                string memberName = "xbltest-" + Guid.NewGuid().ToString() + Global.PassportMemberDomain;

                request.PassportMemberName = memberName;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XePassportCreate : UserTestBase
        {
            override protected void Execute()
            {
                XRLXePassportCreate request = new XRLXePassportCreate();
                XRLXePassportCreateResponse response;

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                string memberName = "xbltest-" + Guid.NewGuid().ToString() + Global.PassportMemberDomain;
                string secretQuestion = "What color car do you drive?";

                request.PassportMemberName = memberName;
                request.SecretQuestion = secretQuestion;

                request.Slot.userPuid0 = 0;
                //request.Slot.machinePuid = 0;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XePassportGetBuddyGamertag : UserTestBase
        {
            override protected void Execute()
            {
                XRLXePassportGetBuddyGamertag request = new XRLXePassportGetBuddyGamertag();
                XRLXePassportGetBuddyGamertagResponse response = new XRLXePassportGetBuddyGamertagResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.userPuid = 123456789;   //  any number is fine, we get blocked before it is actually used
                request.buddyPmn = "Chuck Norris";

                //  Execute the request (pass the response if the request requires it)
                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase] //formerly P_XboxLive
        class D_XePassportGetEncryptedProxyParameters : UserTestBase
        {
            override protected void Execute()
            {
                XRLXePassportGetEncryptedProxyParameters request = new XRLXePassportGetEncryptedProxyParameters();
                XRLXePassportGetEncryptedProxyParametersResponse response = new XRLXePassportGetEncryptedProxyParametersResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.EPLServiceId = XOn.XONLINE_PASSPORT_LOGIN_XBOXLIVE_SERVICE_ID;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XePassportGetFriendMemberName : UserTestBase
        {
            override protected void Execute()
            {
                // now call GetFriendMemberName to find the member name.
                XRLXePassportGetFriendMemberName request = new XRLXePassportGetFriendMemberName();
                XRLXePassportGetFriendMemberNameResponse response = new XRLXePassportGetFriendMemberNameResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.userPuid = 123456789;
                request.friendPuid = 987645321;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XePassportGetMemberName : UserTestBase
        {
            override protected void Execute()
            {
                XRLXePassportGetMemberName request = new XRLXePassportGetMemberName();
                XRLXePassportGetMemberNameResponse response = new XRLXePassportGetMemberNameResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.userPuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XePassportGetSecretQuestions : UserTestBase
        {
            override protected void Execute()
            {
                XRLXePassportGetSecretQuestions request = new XRLXePassportGetSecretQuestions();
                XRLXePassportGetSecretQuestionsResponse response = new XRLXePassportGetSecretQuestionsResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.CountryId = 103;  // United States
                request.LanguageId = 1;   // English

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XePassportLogin : UserTestBase
        {
            override protected void Execute()
            {

                XRLXePassportLogin request = new XRLXePassportLogin();
                XRLXePassportLoginResponse response = new XRLXePassportLoginResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                string memberName = "xbltest-" + Guid.NewGuid().ToString() + Global.PassportMemberDomain;
                //byte[] encryptedSessionKey = null;
                //byte[] encryptedPassword = null;
                //byte[] encryptedToken = null;

                // login with the member name
                request.PassportMemberName = memberName;
                //request.EncryptedSessionKey = encryptedSessionKey;
                //request.EncryptedPassword = encryptedPassword;
                //request.EncryptedTokenRequest = encryptedToken;

                // try login.
                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeRemovePaymentInstrument : UserTestBase
        {
            override protected void Execute()
            {
                // remove the payment instrument
                XRLXeRemovePaymentInstrument request = new XRLXeRemovePaymentInstrument();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;
                request.PaymentInstrumentId = "1";

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeUpdatePaymentInstrument : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeUpdatePaymentInstrument request = new XRLXeUpdatePaymentInstrument();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;
                request.PaymentInstrumentId = "1";
                //request.AddressInfo = user.AddressInfo;
                //request.PhoneInfo = user.PhoneInfo;
                request.CreditCardInfo = new CreditCardInfoData(); //user.CreditCardInfo;
                request.CreditCardInfo.AccountHolderName = "Mark Smith";
                request.CreditCardInfo.AccountNumber = CreditCardRandomizer.GetRandomAccountNumber("visa");
                request.CreditCardInfo.ExpirationDate = DateTime.UtcNow.AddYears(2);
                request.CreditCardInfo.CardType = (byte)CreditCardInfoData.CreditCardType.Visa;
                //request.DirectDebitInfo = user.DirectDebitInfo;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeReserveGamertag : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeReserveGamertag request = new XRLXeReserveGamertag();
                XRLXeReserveGamertagResponse response = new XRLXeReserveGamertagResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                
                
                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeGetAccountInfo : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeGetAccountInfo request = new XRLXeGetAccountInfo();
                XRLXeGetAccountInfoResponse response = new XRLXeGetAccountInfoResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeTroubleshootAccount : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeTroubleshootAccount request = new XRLXeTroubleshootAccount();
                XRLXeTroubleshootAccountResponse response = new XRLXeTroubleshootAccountResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeVerifyBillingInfo : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeVerifyBillingInfo request = new XRLXeVerifyBillingInfo();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_AcceptTOU : UserTestBase
        {
            override protected void Execute()
            {
                XRLAcceptTOU request = new XRLAcceptTOU();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        // This test case is failing because I am unable to set up the machine account properly to have this API recognize
        // us as an LMA and block us
        class D_ArgoAuthenticateAccount : UserTestBase
        {
            override protected void Execute()
            {
                XRLArgoAuthenticateAccount request = new XRLArgoAuthenticateAccount();
                XRLArgoAuthenticateAccountResponse response = new XRLArgoAuthenticateAccountResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.PassportTicket = "1";
                
                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_ChangeGamerTag : UserTestBase
        {
            override protected void Execute()
            {
                XRLChangeGamerTag request = new XRLChangeGamerTag();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeAddPaymentInstrument : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeAddPaymentInstrument request = new XRLXeAddPaymentInstrument();
                XRLXeAddPaymentInstrumentResponse response = new XRLXeAddPaymentInstrumentResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.UserPuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeCreateLiveAccount : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeCreateLiveAccount request = new XRLXeCreateLiveAccount();
                XRLXeCreateLiveAccountResponse response = new XRLXeCreateLiveAccountResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.MachinePuid = 0xfb00000000000001;
                request.Birthdate = new DateTime(1999, 05, 05);
                request.SignedUserPassportPuid = new byte[] { 1,0,1,0,1 };

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeGetUserType : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeGetUserType request = new XRLXeGetUserType();
                XRLXeGetUserTypeResponse response = new XRLXeGetUserTypeResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_XeUpdateXboxComActivity : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeUpdateXboxComActivity request = new XRLXeUpdateXboxComActivity();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_AcceptTermsOfService : UserTestBase
        {
            override protected void Execute()
            {
                XRLXeAcceptTermsOfService request = new XRLXeAcceptTermsOfService();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_ClearSubscriptions : UserTestBase
        {
            override protected void Execute()
            {
                XRLClearSubscriptions request = new XRLClearSubscriptions();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_CreateOwnerAcct : UserTestBase
        {
            override protected void Execute()
            {
                Owner request = new Owner("ChuckNorris");
                
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                request.Create();
            
                //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                else
                    ResultCode = TEST_RESULTS.PASSED;
            
            }
        }

        [TestCase]
        class D_DisableSubscription : UserTestBase
        {
            override protected void Execute()
            {
                XRLDisableSubscription request = new XRLDisableSubscription();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_EnumerateEligible : UserTestBase
        {
            override protected void Execute()
            {
                XRLEnumerateEligible request = new XRLEnumerateEligible();
                XRLEnumerateEligibleHeader enumHeader;
                XRLEnumerateEligibleRecord[] enumRecord;

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out enumHeader, out enumRecord))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_GetPaymentInfo : UserTestBase
        {
            override protected void Execute()
            {
                XRLGetPaymentInfo request = new XRLGetPaymentInfo();
                XRLGetPaymentInfoResponse response = new XRLGetPaymentInfoResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_GetPostalCode : UserTestBase
        {
            override protected void Execute()
            {
                XRLGetPostalCode request = new XRLGetPostalCode();
                XRLGetPostalCodeResponse[] resp;

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                request.Execute(out resp);
                
                //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                else
                    ResultCode = TEST_RESULTS.PASSED;
                
            }
        }

        [TestCase]
        class D_GetSubscriptionStatus : UserTestBase
        {
            override protected void Execute()
            {
                XRLGetSubscriptionStatus request = new XRLGetSubscriptionStatus();
                XRLGetSubscriptionStatusResponse Head;
                XRLGetSubscriptionStatusDetails[] Details;

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out Head, out Details))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_LinkWebAccount : UserTestBase
        {
            override protected void Execute()
            {
                XRLLinkWebAccount request = new XRLLinkWebAccount();
                XRLLinkWebAccountResponse response = new XRLLinkWebAccountResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_RenewSubscription : UserTestBase
        {
            override protected void Execute()
            {
                XRLRenewSubscription request = new XRLRenewSubscription();
                
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_ReserveName : UserTestBase
        {
            override protected void Execute()
            {
                XRLReserveName request = new XRLReserveName();
                XRLReserveResponseHead    Head;
                XRLReserveResponseItem    []Items;

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                request.Create(out Head, out Items);
                
                //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                else
                    ResultCode = TEST_RESULTS.PASSED;
                
            }
        }

        [TestCase]
        class D_RestoreAccount : UserTestBase
        {
            override protected void Execute()
            {
                XRLRestoreAccountRequest request = new XRLRestoreAccountRequest();
                XRLRestoreAccountResponse response = new XRLRestoreAccountResponse();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                request.Execute(out response);
                
                //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                else
                    ResultCode = TEST_RESULTS.PASSED;
                
            }
        }

        [TestCase]
        class D_SetPaymentInfo : UserTestBase
        {
            override protected void Execute()
            {
                XRLSetPaymentInfo request = new XRLSetPaymentInfo();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_SetUserAccountStatus : UserTestBase
        {
            override protected void Execute()
            {
                XRLSetUserAccountStatus request = new XRLSetUserAccountStatus();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_SetUserPIN : UserTestBase
        {
            override protected void Execute()
            {
                SetUserPIN request = new SetUserPIN();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_SetUserSettings : UserTestBase
        {
            override protected void Execute()
            {
                XRLSetUserSettings request = new XRLSetUserSettings();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_SetUserSettings2 : UserTestBase
        {
            override protected void Execute()
            {
                XRLSetUserSettings2 request = new XRLSetUserSettings2();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_TroubleshootAccount : UserTestBase
        {
            override protected void Execute()
            {
                XRLTroubleshootAccount request = new XRLTroubleshootAccount();
                XRLTroubleshootAccountResponse response = new XRLTroubleshootAccountResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_VerifyBillingPIN : UserTestBase
        {
            override protected void Execute()
            {
                XRLVerifyBillingPIN request = new XRLVerifyBillingPIN();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_VerifyVoucher : UserTestBase
        {
            override protected void Execute()
            {
                XRLVerifyVoucher request = new XRLVerifyVoucher();

                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute())
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_VerifyVoucherGetOffer : UserTestBase
        {
            override protected void Execute()
            {
                XRLVerifyVoucherGetOffer request = new XRLVerifyVoucherGetOffer();
                XRLVerifyVoucherGetOfferResponse response = new XRLVerifyVoucherGetOfferResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        class D_WebGetUserSettings : UserTestBase
        {
            override protected void Execute()
            {
                XRLWebGetUserSettings request = new XRLWebGetUserSettings();
                XRLWebGetUserSettingsResponse response = new XRLWebGetUserSettingsResponse();
                //  This is the code that marks the request from a PC LMA account
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;             //  LMA flag
                request.Slot.machinePuid = 0xfb00000000000001;  //  PC Machine ID (starts with 0xfb)

                //  Parameters for the API (You really don't need to even fill these in, it should 
                //  block before it even checks them
                //request.MachinePuid = 123456789;

                if (!request.Execute(out response))
                {
                    //  Verify that the the httpStatus is 404 -> NotFound after the request fails
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    else
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMATests\XMatch.cs ===
/*
 * Functions to test:
 *      MATCH:titlechange.ashx
 *      MATCH:xmatchclient2.ashx
 *      MATCH:xmatchhost2.ashx
 *      MATCH:xmatchhostdelete2.ashx
 *      MATCH:xmatchsplit.ashx
 * 
 * Functions blocked:
 *      MATCH:deatbox.ashx
 *      MATCH:xmatchclient.srf
 *      MATCH:xmatchhost.srf
 *      MATCH:xmatchhostdelete.srf
 *      xarb:DebugResult.ashx
 */

using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Matchmaking;
using xonline.common.config;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities.FclFuzzer;

using System.Data.SqlClient;
using System.Collections;

namespace LMATests
{

    public class Func2SearchPlatformProperty : TestNode
    {
        const uint TitleId = Constants.XENON_TITLE;

        public Func2SearchPlatformProperty()
        {
            CreateSearchLockTests();
        }

        public string GetSingleServerFromDbList(string dbList)
        {
            string singleServer = dbList;
            if (dbList.Contains(";"))
            {
                singleServer = dbList.Split(';')[0];
            }
            return singleServer;
        }

        [TestGroupSetup]
        public void Setup()
        {
            MatchTitle matchTitle = MatchTitleMgr.SnapshotMatchTitle(TitleId);
            if (matchTitle.DbList != "")
            {
                matchTitle.DbList = GetSingleServerFromDbList(matchTitle.DbList);
            }
            MatchTitleMgr.UpdateMatchTitle(matchTitle);
            MatchFDs.ReloadTitleInfo();
        }

        [TestGroupTearDown]
        public void TearDown()
        {
            MatchTitleMgr.RestoreMatchTitleFromSnapshot(TitleId);
            MatchFDs.ReloadTitleInfo();
        }

        internal enum LockType
        {
            None,
            Create,
            NPDB
        }

        internal enum ExpectedResults
        {
            Locked,
            Unlocked,
            Both,
            Neither
        }

        internal struct SLTestData
        {
            public CSGInfo.ClientType createdBy;
            public LockType lockedBy;
            public CSGInfo.ClientType searchWith;
            public bool lockedSearch;
            public ExpectedResults expectedSessions;

            public SLTestData(CSGInfo.ClientType CreatedBy, LockType LockedBy,
                    CSGInfo.ClientType SearchWith, bool LockedSearch, ExpectedResults ExpectedSessions)
            {
                createdBy = CreatedBy;
                lockedBy = LockedBy;
                searchWith = SearchWith;
                lockedSearch = LockedSearch;
                expectedSessions = ExpectedSessions;
            }
        }

        internal SLTestData[] SearchLockTests = new SLTestData[]
        {
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.None, CSGInfo.ClientType.Xenon, false, ExpectedResults.Both),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.None, CSGInfo.ClientType.PC, false, ExpectedResults.Both),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.None, CSGInfo.ClientType.Xenon, true, ExpectedResults.Neither),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.None, CSGInfo.ClientType.PC, true, ExpectedResults.Neither),

            new SLTestData(CSGInfo.ClientType.Xenon, LockType.Create, CSGInfo.ClientType.Xenon, false, ExpectedResults.Both),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.Create, CSGInfo.ClientType.PC, false, ExpectedResults.Unlocked),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.Create, CSGInfo.ClientType.Xenon, true, ExpectedResults.Locked),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.Create, CSGInfo.ClientType.PC, true, ExpectedResults.Neither),

            // #67652 - "Revoking cross-platform matchmaking via NPDB invalidates the existing sessions"
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.NPDB, CSGInfo.ClientType.Xenon, false, ExpectedResults.Locked),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.NPDB, CSGInfo.ClientType.PC, false, ExpectedResults.Neither),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.NPDB, CSGInfo.ClientType.Xenon, true, ExpectedResults.Locked),
            new SLTestData(CSGInfo.ClientType.Xenon, LockType.NPDB, CSGInfo.ClientType.PC, true, ExpectedResults.Neither),

            new SLTestData(CSGInfo.ClientType.PC, LockType.None, CSGInfo.ClientType.Xenon, false, ExpectedResults.Both),
            new SLTestData(CSGInfo.ClientType.PC, LockType.None, CSGInfo.ClientType.PC, false, ExpectedResults.Both),
            new SLTestData(CSGInfo.ClientType.PC, LockType.None, CSGInfo.ClientType.Xenon, true, ExpectedResults.Neither),
            new SLTestData(CSGInfo.ClientType.PC, LockType.None, CSGInfo.ClientType.PC, true, ExpectedResults.Neither),

            new SLTestData(CSGInfo.ClientType.PC, LockType.Create, CSGInfo.ClientType.Xenon, false, ExpectedResults.Unlocked),
            new SLTestData(CSGInfo.ClientType.PC, LockType.Create, CSGInfo.ClientType.PC, false, ExpectedResults.Both),
            new SLTestData(CSGInfo.ClientType.PC, LockType.Create, CSGInfo.ClientType.Xenon, true, ExpectedResults.Neither),
            new SLTestData(CSGInfo.ClientType.PC, LockType.Create, CSGInfo.ClientType.PC, true, ExpectedResults.Locked),

            // #67652 - "Revoking cross-platform matchmaking via NPDB invalidates the existing sessions"
            new SLTestData(CSGInfo.ClientType.PC, LockType.NPDB, CSGInfo.ClientType.Xenon, false, ExpectedResults.Neither),
            new SLTestData(CSGInfo.ClientType.PC, LockType.NPDB, CSGInfo.ClientType.PC, false, ExpectedResults.Locked),
            new SLTestData(CSGInfo.ClientType.PC, LockType.NPDB, CSGInfo.ClientType.Xenon, true, ExpectedResults.Neither),
            new SLTestData(CSGInfo.ClientType.PC, LockType.NPDB, CSGInfo.ClientType.PC, true, ExpectedResults.Locked)
        };

        internal void CreateSearchLockTests()
        {
            foreach (SLTestData testData in SearchLockTests)
            {
                Add(new DynamicSearchLockTest(testData));
            }
        }

        internal class DynamicSearchLockTest : SearchMatrixTestBase
        {
            const string BASE_TEST_NAME = "PSearchLock";

            private SLTestData TestData;

            public DynamicSearchLockTest(SLTestData test)
            {
                TestData = test;
                Name = GenerateTestName();
            }

            private string GenerateTestName()
            {
                string name = BASE_TEST_NAME;
                name += "_" + TestData.createdBy.ToString();
                name += "_" + TestData.lockedBy.ToString();
                name += "_" + TestData.searchWith.ToString();
                name += "_" + (TestData.lockedSearch == true ? "Locked" : "Unlocked");
                return name;
            }

            override protected void Execute()
            {
                Execute(
                    TitleId,
                    TestData.createdBy,
                    TestData.lockedBy,
                    TestData.searchWith,
                    TestData.lockedSearch,
                    TestData.expectedSessions
                    );
            }
        }

        internal abstract class SearchMatrixTestBase : TestBase
        {
            private class TitleCrossPlatformRevoker
            {
                private Npdb npdb;
                private uint TitleId;
                private bool Locked = false;
                private byte? PreviousSetting;

                public void Revoke(uint titleId)
                {
                    TitleId = titleId;
                    PreviousSetting = MatchTitleMgr.GetMatchTitle(titleId).RevokeCrossPlatform;

                    npdb = new Npdb();
                    npdb.ConnectToServer();
                    npdb.SetMatchTitleRevokeCrossPlatform(titleId, 1);
                    Locked = true;
                    try
                    {
                        Global.XEnv.ExecuteXmgmtCommand("xmatchfd", "e :xmatchfd reloadtitleinfo", 3);
                    }
                    catch
                    {
                        try
                        {
                            Restore();
                        }
                        catch { }
                        throw;
                    }
                }

                /// <summary>
                /// Unlocked should restore a Title ID to it's original cross-platform revocation setting.
                /// Currently it sets the cross-platforum revocation setting to NULL (x-plat allowed).
                /// If Lock() was not called first, calling Unlock() is a no-op.
                /// </summary>
                public void Restore()
                {
                    if (Locked)
                    {
                        npdb = new Npdb();
                        npdb.ConnectToServer();
                        npdb.SetMatchTitleRevokeCrossPlatform(TitleId, PreviousSetting);
                        Locked = false;
                        npdb.Close();
                        Global.XEnv.ExecuteXmgmtCommand("xmatchfd", "e :xmatchfd reloadtitleinfo", 3);
                    }
                }
            }

            private bool FindSessionIdInSearchResults(XRL2SearchResults searchResults, byte[] expectedSessionId)
            {
                if (searchResults == null)
                {
                    return false;
                }
                Global.RO.Debug("FindSessionIdInSearchResults: looking for session ID {0}",
                    Constants.sessionIDConvert(expectedSessionId).ToString("X"));
                ArrayComparer<byte> arrayComparer = new ArrayComparer<byte>(ArrayEx.ByteComparison);
                foreach (XRL2SingleSearchResult result in searchResults.results)
                {
                    Global.RO.Debug("FindSessionIdInSearchResults: comparing against session ID {0}",
                        Constants.sessionIDConvert(result.SessionID).ToString("X"));
                    int matching = arrayComparer.Compare(result.SessionID, expectedSessionId);
                    if (matching == 0)
                    {
                        Global.RO.Debug("FindSessionIdInSearchResults: match found.");
                        return true;
                    }
                }
                Global.RO.Debug("FindSessionIdInSearchResults: match NOT found.");
                return false;
            }

            protected void VerifySearchResultsEx(
                MatchSession lockedSession, XRL2SearchResults lockedSearchResults,
                MatchSession unlockedSession, XRL2SearchResults unlockedSearchResults,
                ExpectedResults expectedResults)
            {
                Global.RO.Debug("VerifySearchResults: expectedResults == {0}", expectedResults.ToString());
                if (lockedSearchResults == null && unlockedSearchResults == null)
                {
                    // No results found; verify 0 results is the expected result
                    if (expectedResults != ExpectedResults.Neither)
                    {
                        throw new UnexpectedTestResultException("Failed to find session(s): searchResp == null");
                    }
                }
                else
                {
                    // Got at least some results; verify they match expectations
                    if (lockedSearchResults != null)
                    {
                        Global.RO.Debug("VerifySearchResults: searchResults.results.Length == {0}",
                            lockedSearchResults.results.Length);
                    }
                    if (expectedResults == ExpectedResults.Locked || expectedResults == ExpectedResults.Both)
                    {
                        if (!FindSessionIdInSearchResults(lockedSearchResults, (byte[])lockedSession.GetSessionID()))
                        {
                            throw new UnexpectedTestResultException("Failed to find locked session");
                        }
                    }
                    if (unlockedSearchResults != null)
                    {
                        Global.RO.Debug("VerifySearchResults: searchResults.results.Length == {0}",
                            unlockedSearchResults.results.Length);
                    }
                    if (expectedResults == ExpectedResults.Unlocked || expectedResults == ExpectedResults.Both)
                    {
                        if (!FindSessionIdInSearchResults(unlockedSearchResults, (byte[])unlockedSession.GetSessionID()))
                        {
                            throw new UnexpectedTestResultException("Failed to find unlocked session");
                        }
                    }
                }
            }

            protected void VerifySearchResults(XRL2SearchResults searchResults, ExpectedResults expectedResults,
                MatchSession lockedSession, MatchSession unlockedSession)
            {
                Global.RO.Debug("VerifySearchResults: expectedResults == {0}", expectedResults.ToString());
                if (searchResults == null)
                {
                    // No results found; verify 0 results is the expected result
                    if (expectedResults != ExpectedResults.Neither)
                    {
                        throw new UnexpectedTestResultException("Failed to find session(s): searchResp == null");
                    }
                }
                else
                {
                    // Got results; verify they match expectations
                    Global.RO.Debug("VerifySearchResults: searchResults.results.Length == {0}", searchResults.results.Length);
                    if (expectedResults == ExpectedResults.Locked || expectedResults == ExpectedResults.Both)
                    {
                        if (!FindSessionIdInSearchResults(searchResults, (byte[])lockedSession.GetSessionID()))
                        {
                            throw new UnexpectedTestResultException("Failed to find locked session");
                        }
                    }
                    if (expectedResults == ExpectedResults.Unlocked || expectedResults == ExpectedResults.Both)
                    {
                        if (!FindSessionIdInSearchResults(searchResults, (byte[])unlockedSession.GetSessionID()))
                        {
                            throw new UnexpectedTestResultException("Failed to find unlocked session");
                        }
                    }
                }
            }

            protected void Execute(uint titleId, CSGInfo.ClientType createdBy, LockType lockedBy,
                    CSGInfo.ClientType searchWith, bool lockedSearch, ExpectedResults expectedSessions)
            {
                ResultCode = TEST_RESULTS.FAILED;

                // Create unlocked (control) session
                MatchSession unlockedSession = new MatchSession(false);
                unlockedSession.TitleID = titleId;
                unlockedSession.SetClientType(createdBy);
                unlockedSession.Create(SessionType.Ranked);
                Global.RO.Debug("Xbox ID == {0}", new SGADDR(unlockedSession.HostAddress.abOnline).qwXboxID.ToString("X"));

                TitleCrossPlatformRevoker titleRevoker = new TitleCrossPlatformRevoker();
                try
                {
                    if (lockedBy == LockType.NPDB)
                    {
                        titleRevoker.Revoke(titleId);
                    }

                    // Create locked (test) session
                    MatchSession lockedSession = new MatchSession(false);
                    lockedSession.TitleID = titleId;
                    lockedSession.SetClientType(createdBy);
                    if (lockedBy == LockType.Create)
                    {
                        lockedSession.AddAttrib(new XRLXeAttribParam(Constants.X_ATTRIBUTE_PLATFORM_LOCK, (uint)1), false);
                    }
                    lockedSession.Create(SessionType.Ranked);
                    Global.RO.Debug("Xbox ID == {0}", new SGADDR(lockedSession.HostAddress.abOnline).qwXboxID.ToString("X"));

                    try
                    {
                        // Search for sessions
                        XRLXeAttribParam[] searchLockAttr = null;
                        if (lockedSearch)
                        {
                            searchLockAttr = new XRLXeAttribParam[] { 
                                new XRLXeAttribParam(Constants.X_ATTRIBUTE_PLATFORM_LOCK, (uint)1) };
                        }

                        XRL2SearchResults searchResults = MatchUtil.CustomSearch(lockedSession.TitleID, searchWith, searchLockAttr,
                            Constants.SESSION_MATCH_QUERY_QUERY1);
                        VerifySearchResults(searchResults, expectedSessions, lockedSession, unlockedSession);

                        // Split the locked session
                        MatchSession splitSession = lockedSession.Split(true, createdBy);
                        try
                        {
                            searchResults = MatchUtil.CustomSearch(splitSession.TitleID, searchWith, searchLockAttr,
                                Constants.SESSION_MATCH_QUERY_QUERY1);
                            if (expectedSessions == ExpectedResults.Locked || expectedSessions == ExpectedResults.Both)
                            {
                                expectedSessions = ExpectedResults.Both;
                            }
                            else
                            {
                                expectedSessions = ExpectedResults.Neither;
                            }
                            VerifySearchResults(searchResults, expectedSessions, lockedSession, splitSession);
                        }
                        finally
                        {
                            try
                            {
                                splitSession.Delete();
                            }
                            catch
                            {
                                Global.RO.Error("Failed to delete split session.");
                                Global.RO.Error("Subsequent testing will likely be unreliable until this is manually fixed.");
                            }
                        }
                    }
                    finally
                    {
                        try
                        {
                            lockedSession.Delete();
                        }
                        catch
                        {
                            Global.RO.Error("Failed to delete locked session.");
                            Global.RO.Error("Subsequent testing will likely be unreliable until this is manually fixed.");
                        }
                    }
                }
                finally
                {
                    try
                    {
                        titleRevoker.Restore();
                    }
                    catch
                    {
                        Global.RO.Error("Failed to restore title to previous revocation setting.");
                        Global.RO.Error("Subsequent testing will likely be unreliable until this is manually fixed.");
                        throw;
                    }
                    try
                    {
                        unlockedSession.Delete();
                    }
                    catch
                    {
                        Global.RO.Error("Failed to delete unlocked session.");
                        Global.RO.Error("Subsequent testing will likely be unreliable until this is manually fixed.");
                    }
                }
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

    }

    [TestGroup, Owner("External"), TestFrequency("DoNotRun"), Description("Limited Machine Account Security Testing for GFWL Arcade  cagood")]
    public class XMatchTests : TestNode
    {
        #region Test Bases
        public abstract class Create2TestBase : TestBase
        {
            /// <summary>
            /// 
            /// </summary>
            /// <param name="Req"></param>
            /// <param name="ranked">false if this session is a standard session</param>
            /// <returns></returns>
            protected bool CreateAndVerify(bool ranked, XRL2CreateUpdateSession Req)
            {
                XRLSessionInfo resp = null;
                bool ret = true;
                try
                {
                    if (!Req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out resp))
                    {
                        Global.RO.Warn("CreateSession request failed:" + Global.XErrToString(Req.XErr));
                        return false;
                    }

                    XRL2SearchResults searchResults;

                    XRL2SearchSession searchReq = new XRL2SearchSession(false, Constants.X_SSINDEX_GET_SESSION);
                    // convert byte[8] to long; integer is little endian on the wire:
                    // 01020304 on the wire is actually interpreted as int=0x04030201 internally
                    // little endian locally
                    long lSessID = Constants.sessionIDConvert(resp.SessionID);
                    XRLXeAttribParam[] Params = new XRLXeAttribParam[1] {
                    new XRLXeAttribParam(Constants.X_ATTRIBUTE_SESSION_ID,
                    new XRLXeIntValue(lSessID)) };
                    searchReq.AddParams(Params);

                    if (!searchReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out searchResults))
                    {
                        Global.RO.Warn("search for the newly created session failed:" + Global.XErrToString(searchReq.XErr));
                        ret = false;
                    }
                    if (searchResults == null)
                    {
                        Global.RO.Warn("The newly created session couldn't be found");
                        ret = false;
                    }
                    // check if session created correctly in the t_match_sessions_<title>
                    if (!Req.Verify(searchResults, ranked))
                    {
                        Global.RO.Warn("The session is not setup correctly in the db");
                        ret = false;
                    }
                }
                catch (Exception e)
                {
                    Global.RO.Warn("Unexpected exception thrown:" + e.Message);
                    ret = false;
                }
                // delete the session
                XRL2DeleteSession delReq = new XRL2DeleteSession(resp.SessionID, Req.baseCreateUpdate.baseSession.dwTitleID);
                if (!delReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)))
                {
                    Global.RO.Warn("Session deletion failed");
                }
                return ret;
            }
            protected bool VerifyDB(bool ranked, long lSessID, double mu, double sigma, float rating, long country, long lang, long gamerZone, long gameType, long gameMode)
            {
                // in xbox 360, we might not have title tables created across all servers, 
                // instead, we will only have title tables created in the actual servers that they live
                bool ret = false;
                double rMu = 0, rSigma = 0;
                long rCountry = 0, rLang = 0, rZone = 0, rGameType = 0, rGameMode = 0;
                float rRating = 0;
                string hexTitleID = "0x" + Constants.XENON_TITLE.ToString("X");
                string[] dbList = Constants.getDBListForTitle(Constants.XENON_TITLE);
                if (dbList == null)
                {
                    Global.RO.Warn("Can't find the title in the npdb");
                    return false;
                }

                bool found = false;
                foreach (string server in dbList)
                {
                    found = false;
                    // connect to the db
                    string myConnStr = "Data Source=" + server + @";Database=xmatch;" +
                        "Trusted_Connection=true";
                    SqlConnection mySqlConn;
                    mySqlConn = new SqlConnection(myConnStr);
                    // get the row according to bi_session_id
                    string myQuery;
                    if (ranked)
                        myQuery = @"SELECT  att_0x30008105,att_0x30008106,att_0x50008104,att_0x10008102,att_0x10008103,att_0x10008101,att_0x0000800A,att_0x0000800B
                                            FROM dbo.t_match_sessions_" + hexTitleID + @"_ranked s
                                            WHERE s.bi_session_id=" + lSessID;
                    else //standard
                        myQuery = @"SELECT  att_0x30008105,att_0x30008106,att_0x50008104,att_0x10008102,att_0x10008103,att_0x10008101,att_0x0000800A,att_0x0000800B
                                            FROM dbo.t_match_sessions_" + hexTitleID + @"_standard s
                                            WHERE s.bi_session_id=" + lSessID;

                    SqlCommand myCommand = new SqlCommand(myQuery, mySqlConn);
                    myCommand.Connection.Open();
                    SqlDataReader myReader = myCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        found = true;
                        rMu = myReader.GetDouble(0);
                        rSigma = myReader.GetDouble(1);
                        rRating = myReader.GetFloat(2);
                        rCountry = myReader.GetInt32(3);
                        rLang = myReader.GetInt32(4);
                        rZone = myReader.GetInt32(5);
                        rGameType = myReader.GetInt64(6);
                        rGameMode = myReader.GetInt64(7);
                    }
                    myReader.Close();
                    myCommand.Connection.Close();
                    if (found)
                        break;
                }
                if (found)
                {
                    if ((rMu == mu) && (rSigma == sigma) && (rRating == rating)
                        && (rCountry == country) && (rZone == gamerZone) && (rLang == lang)
                        && (rGameType == gameType) && (rGameMode == gameMode))
                        ret = true;
                    else Global.RO.Warn("returned mu/sigma/rating/country/zone/lang/type/mode is not correct");
                }
                else
                {
                    Global.RO.Warn("Couldn't not find the session");
                }
                return ret;
            }
        }
        public abstract class CreateTestBase : TestBase
        {
            protected bool CreateAndVerify(XRLCreateUpdateSession Req)
            {
                XRLSessionInfo resp;
                bool ret = true;
                if (!Req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out resp))
                {
                    Global.RO.Warn("CreateSession request failed:" + Global.XErrToString(Req.XErr));
                    return false;
                }
                // search for session based on sessionID
                // spindex=5 returns no additional attributes
                XRLSearchResults searchResults;
                XRLSearchSession searchReq = new XRLSearchSession(Constants.X_SSINDEX_GET_SESSION);
                // convert byte[8] to long; integer is little endian on the wire:
                // 01020304 on the wire is actually interpreted as int=0x04030201 internally
                // little endian locally
                long lSessID = Constants.sessionIDConvert(resp.SessionID);
                XRLAttribParam[] Params = new XRLAttribParam[1] { new XRLAttribParam(Constants.X_ATTRIBUTE_DATATYPE_INTEGER, new XRLIntParam(lSessID)) };
                searchReq.AddParams(Params);

                if (!searchReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out searchResults))
                {
                    Global.RO.Warn("search for the newly created session failed:" + Global.XErrToString(searchReq.XErr));
                    ret = false;
                    goto Exit;
                }
                if (searchResults == null)
                {
                    Global.RO.Warn("The newly created session couldn't be found");
                    ret = false;
                    goto Exit;
                }
                // check if session created correctly in the t_match_sessions_<title>
                if (!Req.Verify(searchResults))
                {
                    Global.RO.Warn("The session is not setup correctly in the db");
                    ret = false;
                    goto Exit;
                }
            // delete the session
            Exit:
                XRLDeleteSession delReq = new XRLDeleteSession(resp.SessionID);
                if (!delReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)))
                {
                    Global.RO.Warn("Session deletion failed");
                    ret = false;
                }
                return ret;
            }
        }
        // Base class for positive and negative functionals
        public abstract class SplitTestBase : TestBase
        {
            protected class SessionData
            {
                public ulong HostID;
                public string HostName;
                public byte[] SessionID;
                public uint dwTitleID;
                public XRLxnaddr HostAddress;
                public byte[] KeyExchangeKey;
                public uint dwPublicOpen;
                public uint dwPrivateOpen;
                public uint dwPublicFilled;
                public uint dwPrivateFilled;
                public XRLXeAttribParam[] Attributes;

                public SessionData()
                {
                    GenerateRandomSessionData();
                }

                public void Copy(SessionData other)
                {
                    HostID = other.HostID;
                    HostName = other.HostName;
                    SessionID = other.SessionID;
                    dwTitleID = other.dwTitleID;
                    HostAddress = other.HostAddress;
                    dwPublicOpen = other.dwPublicOpen;
                    dwPrivateOpen = other.dwPrivateOpen;
                    dwPublicFilled = other.dwPublicFilled;
                    dwPrivateFilled = other.dwPrivateFilled;

                    if (null == other.Attributes)
                    {
                        Attributes = new XRLXeAttribParam[0];
                    }
                    else
                    {
                        Attributes = new XRLXeAttribParam[other.Attributes.Length];
                        Array.Copy(other.Attributes, Attributes, other.Attributes.Length);
                    }
                }

                // Copy the data from returned split
                public SessionData CopySearchResult(XRL2SingleSearchResult res)
                {
                    SessionData session = new SessionData();

                    session.SessionID = res.SessionID;
                    session.HostAddress = res.HostAddress;
                    session.KeyExchangeKey = res.KeyExchangeKey;
                    session.dwPublicOpen = res.dwPublicOpen;
                    session.dwPrivateOpen = res.dwPrivateOpen;
                    session.dwPublicFilled = res.dwPublicFilled;
                    session.dwPrivateFilled = res.dwPrivateFilled;

                    return session;
                }

                public void Advertise()
                {
                    XRL2CreateUpdateSession request = new XRL2CreateUpdateSession();
                    XRLSessionInfo response = null;

                    request.baseCreateUpdate.baseSession.SessionID = SessionID;
                    request.baseCreateUpdate.baseSession.dwTitleID = dwTitleID;
                    request.baseCreateUpdate.baseSession.HostAddress = HostAddress;
                    request.baseCreateUpdate.baseSession.dwPublicOpen = dwPublicOpen;
                    request.baseCreateUpdate.baseSession.dwPublicFilled = dwPublicFilled;
                    request.baseCreateUpdate.baseSession.dwPrivateOpen = dwPrivateOpen;
                    request.baseCreateUpdate.baseSession.dwPrivateFilled = dwPrivateFilled;

                    // Update existing attributes overwriting with new values
                    request.UpdateAttribs(Attributes);

                    if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out response))
                    {
                        throw new UnexpectedTestResultException("CreateSession request failed:" + Global.XErrToString(request.XErr));
                    }

                    Global.RO.Debug("[SessionData.Advertise] new session (ID: {0}, KEK: {1})",
                            Hexer.tohex(response.SessionID),
                            Hexer.tohex(response.KeyExchangeKey));

                    SessionID = response.SessionID;
                    KeyExchangeKey = response.KeyExchangeKey;
                }

                public SessionData GenerateSplitSessionData(uint userIndex)
                {
                    SessionData splitData = new SessionData();
                    splitData.Copy(this);

                    //
                    // Update attributes that a new client would vary between sessions
                    //
                    RandomEx rand = new RandomEx();

                    // These values vary and are updated in the new session data
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_GAMER_PUID,
                            new XRLXeIntValue((long)(HostID + userIndex)));
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_HOST_NAME,
                            new XRLXeStringValue(rand.GenerateRandomNameString((int)XOn.GAMERTAG_SIZE)));

                    // These values vary but will not be reflected in the new session data
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_GAMER_MU,
                            new XRLXeDoubleValue((double)rand.Next((float)Constants.XENON_TEST_MAX_GAMER_MU)));
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_GAMER_SIGMA,
                            new XRLXeDoubleValue((double)rand.Next((float)Constants.XENON_TEST_MAX_GAMER_SIGMA)));
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_GAMER_RATING,
                            new XRLXeFloatValue(rand.Next(Constants.XENON_TEST_MAX_GAMER_RATING)));
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_GAMER_COUNTRY,
                            new XRLXeIntValue(rand.Next(255)));
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_GAMER_LANGUAGE,
                            new XRLXeIntValue(rand.Next(9)));
                    splitData.UpdateAttribute(Constants.X_ATTRIBUTE_GAMER_ZONE,
                            new XRLXeIntValue(rand.Next(5)));

                    // Leave type, mode since they are playing the same game
                    return splitData;
                }

                public SessionData Split(uint userIndex)
                {
                    SessionData splitData = GenerateSplitSessionData(userIndex);
                    return Split(splitData);
                }

                public XRLSplitSession CreateXRLSplitSession(SessionData splitData)
                {
                    XRLSplitSession request = new XRLSplitSession();

                    request.SplitSessionID = SessionID;
                    request.SessionID = new byte[] { 0x80, 0, 0, 0, 0, 0, 0, 0 };
                    request.dwTitleID = splitData.dwTitleID;
                    request.HostAddress = splitData.HostAddress;
                    request.AttribOffsetsLen = (uint)splitData.Attributes.Length;
                    request.Attribs = splitData.Attributes;
                    MatchUtil.CalculateOffsets(
                            Constants.SIZESPLIT,
                            splitData.Attributes,
                            out request.AttribOffsets,
                            out request.dwMessageLength);

                    return request;
                }

                private void VerifySTFException(Exception exception, uint expectedHrResult)
                {
                    if (exception.GetType() != (new ServerTestFramework.UnexpectedTestResultException()).GetType())
                    {
                        throw new UnexpectedTestResultException("Failed to catch expected exception: exception type " +
                            exception.GetType().ToString() + " is not UnexpectedTestResultException");
                    }
                    // ex: ServerTestFramework.UnexpectedTestResultException: SplitSession request failed:80155103: XONLINE_E_MATCH_REQUEST_TOO_SMALL
                    if (!exception.Message.Contains(expectedHrResult.ToString("X")))
                    {
                        throw new UnexpectedTestResultException("Failed to catch expected exception: hresult " +
                            expectedHrResult.ToString("x") + " not found." + Environment.NewLine +
                            "exception.Message: " + exception.Message);
                    }
                }


                public XRL2SingleSearchResult SafeExecute(XRLSplitSession request)
                {
                    XRL2SingleSearchResult response;
                    if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out response))
                    {
                        throw new UnexpectedTestResultException("SplitSession request failed:" + Global.XErrToString(request.XErr));
                    }

                    //ValidateServerSession(session);

                    return response;
                }

                public void SafeExecute(XRLSplitSession request, uint expectedHResult)
                {
                    bool caught = false;
                    try
                    {
                        SafeExecute(request);
                    }
                    catch (Exception ex)
                    {
                        VerifySTFException(ex, expectedHResult);
                        caught = true;
                    }
                    if (!caught)
                    {
                        throw new UnexpectedTestResultException("Failed to catch expected exception: no exception was thrown");
                    }
                }

                public SessionData Split(SessionData splitData)
                {
                    XRLSplitSession request = CreateXRLSplitSession(splitData);

                    // Set the LMA bit
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;
                    request.Slot.machinePuid = 0xFB00000000000001;
                    request.Slot.userPuid0 = 12345678;

                    SafeExecute(request);

                    return splitData;
                }

                public void Delete()
                {
                    XRL2DeleteSession request = new XRL2DeleteSession(SessionID, dwTitleID);
                    if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)))
                    {
                        throw new UnexpectedTestResultException("DeleteSession request failed:" + Global.XErrToString(request.XErr));
                    }
                }

                protected void ValidateServerSession(XRL2CreateUpdateSession session)
                {
                    XRL2SearchResults searchResults;
                    XRL2SearchSession searchReq = new XRL2SearchSession(false, Constants.X_SSINDEX_GET_SESSION);
                    long lSessID = Constants.sessionIDConvert(session.baseCreateUpdate.baseSession.SessionID);
                    XRLXeAttribParam[] Params = new XRLXeAttribParam[1] {
                                           new XRLXeAttribParam(Constants.X_ATTRIBUTE_SESSION_ID ,new XRLXeIntValue(lSessID))
                };

                    searchReq.AddParams(Params);
                    if (!searchReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out searchResults))
                    {
                        throw new UnexpectedTestResultException(String.Format("Search for the newly created session failed: {0:x} {1}",
                                lSessID,
                                Global.XErrToString(searchReq.XErr)));
                    }
                    if (searchResults == null)
                    {
                        throw new UnexpectedTestResultException(String.Format("The newly created session couldn't be found: {0:x}",
                                lSessID));
                    }

                    // Check if session created correctly in the t_match_sessions_<title>
                    if (!session.Verify(searchResults, MatchUtil.IsRankedGameType(searchResults.results[0].Attribs)))
                    {
                        throw new UnexpectedTestResultException(String.Format("The session is not setup correctly in the db: {0:x}",
                                lSessID));
                    }
                }

                public void GenerateRandomSessionData()
                {
                    SessionID = new byte[] { 0x80, 0, 0, 0, 0, 0, 0, 0 };
                    dwTitleID = Constants.XENON_TITLE;

                    // Generate a random host address
                    RandomEx rand = new RandomEx();
                    HostAddress = new XRLxnaddr();
                    HostAddress.ina = rand.GenerateRandomBlob(4);
                    HostAddress.inaOnline = rand.GenerateRandomBlob(4);
                    HostAddress.wPortOnline = (ushort)rand.Next();
                    HostAddress.abEnet = rand.GenerateRandomBlob(6);
                    HostAddress.abOnline = rand.GenerateRandomBlob(20);
                    dwPublicOpen = (uint)rand.Next(8, 16);
                    dwPrivateOpen = (uint)rand.Next(8, 16);
                    dwPublicFilled = (uint)rand.Next(1, 8);
                    dwPrivateFilled = (uint)rand.Next(1, 8);

                    HostID = rand.NextPuid();
                    HostName = rand.GenerateRandomName();

                    // setup some best case attributes
                    Attributes = new XRLXeAttribParam[Constants.BaseSessionAttributes.Length];
                    int i = 0;
                    foreach (uint id in Constants.BaseSessionAttributes)
                    {
                        switch (id)
                        {
                            case Constants.X_ATTRIBUTE_GAME_TYPE:
                                Attributes[i++] = new XRLXeAttribParam(id, Constants.X_ATTRIBUTE_GAME_TYPE_STANDARD);
                                break;
                            case Constants.X_ATTRIBUTE_GAME_MODE:
                                Attributes[i++] = new XRLXeAttribParam(id, 0);
                                break;
                            case Constants.X_ATTRIBUTE_GAMER_ZONE:
                                Attributes[i++] = new XRLXeAttribParam(id, 0);
                                break;
                            case Constants.X_ATTRIBUTE_GAMER_COUNTRY:
                                Attributes[i++] = new XRLXeAttribParam(id, 103);
                                break;
                            case Constants.X_ATTRIBUTE_GAMER_LANGUAGE:
                                Attributes[i++] = new XRLXeAttribParam(id, 0);
                                break;
                            case Constants.X_ATTRIBUTE_GAMER_RATING:
                                Attributes[i++] = new XRLXeAttribParam(id, 0.0f);
                                break;
                            case Constants.X_ATTRIBUTE_GAMER_MU:
                                Attributes[i++] = new XRLXeAttribParam(id, 0.0d);
                                break;
                            case Constants.X_ATTRIBUTE_GAMER_SIGMA:
                                Attributes[i++] = new XRLXeAttribParam(id, 0.0d);
                                break;
                            case Constants.X_ATTRIBUTE_GAMER_PUID:
                                Attributes[i++] = new XRLXeAttribParam(id, HostID);
                                break;
                            case Constants.X_ATTRIBUTE_HOST_NAME:
                                Attributes[i++] = new XRLXeAttribParam(id, HostName);
                                break;
                        }
                    }
                }


                public void RemoveAttributes()
                {
                    Attributes = null;
                }

                public void RemoveAttributesExcept(params object[] ids)
                {
                    ArrayList newAttrs = new ArrayList(ids.Length);

                    foreach (XRLXeAttribParam attr in Attributes)
                    {
                        foreach (UInt32 id in ids)
                        {
                            if ((uint)id == attr.attribParamID)
                            {
                                newAttrs.Add(attr);
                            }
                        }
                    }

                    Attributes = ((XRLXeAttribParam[])newAttrs.ToArray(typeof(XRLXeAttribParam)));
                }

                public void UpdateAttribute(uint attributeId, XRLXeAttribParamValue val)
                {
                    foreach (XRLXeAttribParam param in Attributes)
                    {
                        if (param.attribParamID == attributeId)
                        {
                            param.aValue = val;
                        }
                    }
                }
            }
        }

        [StressInstantiate]
        public abstract class XMatchFuzzTestBase : TestBase
        {
            protected RandomEx rand = new RandomEx();
            protected XRLxnaddr GetFuzzedXnAddr()
            {
                XRLxnaddr addr = new XRLxnaddr();

                // Set initial parameters
                addr.ina = new byte[4] { 0, 0, 0, 0 };
                addr.inaOnline = new byte[4] { 0x07, 0x08, 0x09, 0x0a };
                addr.wPortOnline = 0x0506;
                addr.abEnet = new byte[6] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };
                addr.abOnline = new byte[20]{   0x08,0x08,0x08,0x08,0x08,
                                                0x06,0x07,0x08,0x09,0x0a,
                                                0x0b,0x0c,0x0d,0x0e,0x0f,
                                                0x10,0x11,0x12,0x13,0x14
                };

                // Fuzz parameters
                FclFuzzer.Fuzz("XnAddr.ina", ref addr.ina);
                FclFuzzer.Fuzz("XnAddr.inaOnline", ref addr.inaOnline);
                FclFuzzer.Fuzz("", "XnAddr.wPortOnline", ref addr.wPortOnline);
                FclFuzzer.Fuzz("XnAddr.abEnet", ref addr.abEnet);
                FclFuzzer.Fuzz("XnAddr.abOnline", ref addr.abOnline);

                return addr;
            }

            // TODO: Make sure the list are complete
            protected uint[] PROPERTY_LIST =
                {
                    Constants.PROPERTY_MYINT32PROP1,
                    Constants.PROPERTY_MYINT32PROP2,

                    Constants.PROPERTY_MYFLOAT64PROP1,
                    Constants.PROPERTY_MYFLOAT64PROP2,

                    Constants.PROPERTY_MYFLOAT32PROP1,
                    Constants.PROPERTY_MYFLOAT32PROP2,

                    Constants.PROPERTY_MYDATETIMEPROP1,
                    Constants.PROPERTY_MYDATETIMEPROP2,

                    Constants.PROPERTY_MYINT64PROP1,
                    Constants.PROPERTY_MYINT64PROP2,
                    Constants.PROPERTY_MYINT64PROP3,
                    Constants.PROPERTY_MYINT64PROP4,
                    Constants.PROPERTY_MYINT64PROP5,
                    Constants.PROPERTY_MYINT64PROP6,
                    Constants.PROPERTY_MYINT64PROP7,
                    Constants.PROPERTY_MYINT64PROP8,
                    Constants.PROPERTY_MYINT64PROP9,
                    Constants.PROPERTY_MYINT64PROP10,
                    Constants.PROPERTY_MYINT64PROP11,
                    Constants.PROPERTY_MYINT64PROP12,
                    Constants.PROPERTY_MYINT64PROP13,
                    Constants.PROPERTY_MYINT64PROP14,
                    Constants.PROPERTY_MYINT64PROP15,
                    Constants.PROPERTY_MYINT64PROP16,
                    Constants.PROPERTY_MYINT64PROP17,
                    Constants.PROPERTY_MYINT64PROP18,
                    Constants.PROPERTY_MYINT64PROP19,
                    Constants.PROPERTY_MYINT64PROP20,
                    Constants.PROPERTY_MYINT64PROP21,
                    Constants.PROPERTY_MYINT64PROP22,
                    Constants.PROPERTY_MYINT64PROP23,
                    Constants.PROPERTY_MYINT64PROP24,
                    Constants.PROPERTY_MYINT64PROP25,
                    Constants.PROPERTY_MYINT64PROP26,
                    Constants.PROPERTY_MYINT64PROP27,
                    Constants.PROPERTY_MYINT64PROP28,
                    Constants.PROPERTY_MYINT64PROP29,
                    Constants.PROPERTY_MYINT64PROP30,
                    Constants.PROPERTY_MYINT64PROP31,
                    Constants.PROPERTY_MYINT64PROP32,
                    Constants.PROPERTY_MYINT64PROP33,
                    Constants.PROPERTY_MYINT64PROP34,
                    Constants.PROPERTY_MYINT64PROP35,
                    Constants.PROPERTY_MYINT64PROP36,
                    Constants.PROPERTY_MYINT64PROP37,
                    Constants.PROPERTY_MYINT64PROP38,
                    Constants.PROPERTY_MYINT64PROP39,
                    Constants.PROPERTY_MYINT64PROP40
                };

            protected XRLXeAttribParam[] GetFuzzedMatchAttribute()
            {
                Random random = new Random();

                uint count = (uint)random.Next(0, 30/* X_MATCH_MAX_QUERY_PARAMS */);

                XRLXeAttribParam [] attribParams = new XRLXeAttribParam [count];

                foreach (XRLXeAttribParam p in attribParams)
                {
                    p.attribParamID = (uint) random.Next(0, PROPERTY_LIST.Length);
                    if (p.attribParamID >= Constants.PROPERTY_MYINT32PROP1 && p.attribParamID <= Constants.PROPERTY_MYINT32PROP2)
                    {
                        Int32 value = 1;
                        FclFuzzer.Fuzz("", "PROPERTY_INT32", ref value);
                        p.aValue = new XRLXeIntValue(value);
                    }
                    else if (p.attribParamID >= Constants.PROPERTY_MYINT64PROP10 && p.attribParamID <= Constants.PROPERTY_MYINT64PROP40)
                    {
                        Int64 value = 1;
                        FclFuzzer.Fuzz("", "PROPERTY_INT64", ref value);
                        p.aValue = new XRLXeIntValue(value);
                    }
                    else if (p.attribParamID >= Constants.PROPERTY_MYFLOAT32PROP1 && p.attribParamID <= Constants.PROPERTY_MYFLOAT32PROP2)
                    {
                        float value = 1.1f;
                        //TODO: Need a float type fuzzer
                        //FclFuzzer.Fuzz("", "PROPERTY_FLOAT", ref value);
                        p.aValue = new XRLXeFloatValue(value);
                    }
                    else if (p.attribParamID >= Constants.PROPERTY_MYFLOAT64PROP1 && p.attribParamID <= Constants.PROPERTY_MYFLOAT64PROP2)
                    {
                        float value = 1.1f;
                        //TODO: add float fuzzer
                        //FclFuzzer.Fuzz("", "PROPERTY_FLOAT", ref value);
                        p.aValue = new XRLXeDoubleValue(value);
                    }
                    else if (p.attribParamID >= Constants.PROPERTY_MYDATETIMEPROP1 && p.attribParamID <= Constants.PROPERTY_MYDATETIMEPROP2)
                    {
                        DateTime value = DateTime.Now;
                        p.aValue = new XRLXeDateTimeValue(value.ToFileTimeUtc());
                    }
                }

                return attribParams;
            }
        }
        #endregion

        #region Allowed functions
        [TestCase]
        public class P_TitleChange : TestBase
        {
            override protected void Execute()
            {
                SGADDR sg = new SGADDR();
                sg.dwSpiSg = 0xffffffff;
                sg.qwXboxID = 0xffffffffffffffff;
                sg.inaSg = new byte[4] { 0xff, 0xff, 0xff, 0xff };
                byte[] sgbytes = sg.toByteArray();

                // create a session with maximum SGADDR
                XRL2CreateUpdateSession createReq = new XRL2CreateUpdateSession();
                XRLSessionInfo Resp;
                Array.Copy(sgbytes, createReq.baseCreateUpdate.baseSession.HostAddress.abOnline, (long)Constants.SIZESGADDR);
                if (createReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out Resp))
                {
                    XRLTitleChange req = new XRLTitleChange(Constants.XENON_TITLE);

                    // Set the LMA bit
                    req.ManualPopulateSlot();
                    req.Slot.authDataFlags |= 0x20;
                    req.Slot.machinePuid = 0xFB00000000000001;
                    req.Slot.userPuid0 = 12345678;

                    req.sgaddr.dwSpiSg = sg.dwSpiSg;
                    req.sgaddr.qwXboxID = sg.qwXboxID;
                    Array.Copy(sg.inaSg, req.sgaddr.inaSg, 4);

                    if (req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)))
                    {
                        // the session will be deleted right away
                        XRL2DeleteSession delReq = new XRL2DeleteSession(Resp.SessionID, Constants.XENON_TITLE);
                        if (!delReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)) &&
                            (delReq.XErr == HResult.XONLINE_E_MATCH_INVALID_SESSION_ID))
                            ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class P_XMatchClient2 : TestBase
        {
            override protected void Execute()
            {
                // search based on sessionID
                XRL2SearchSession searchReq = new XRL2SearchSession(true, Constants.X_SSINDEX_GET_SESSION);

                // Set the LMA bit
                searchReq.ManualPopulateSlot();
                searchReq.Slot.authDataFlags |= 0x20;
                searchReq.Slot.machinePuid = 0xFB00000000000001;
                searchReq.Slot.userPuid0 = 12345678;

                XRLXeAttribParam[] Params = new XRLXeAttribParam[1]{new XRLXeAttribParam(Constants.X_ATTRIBUTE_SESSION_ID,
                                                                       new XRLXeIntValue(0x180))};
                searchReq.AddParams(Params);
                XRL2SearchResults Resp;
                if (searchReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out Resp))
                {
                    if (Resp == null)
                        ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase]
        public class P_XMatchHost2 : Create2TestBase
        {
            protected override void Execute()
            {
                XRL2CreateUpdateSession req = new XRL2CreateUpdateSession();
                XRLXeAttribParam[] attrib = new XRLXeAttribParam[38]{ 
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP1,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP2,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP3,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP4,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP5,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP6,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP7,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP8,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP9,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP10,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP11,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP12,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP13,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP14,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP15,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP16,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP17,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP18,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP19,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP20,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP21,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP22,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP23,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP24,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP25,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP26,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP27,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP28,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP29,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP30,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP31,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP32,new XRLXeIntValue(1)),
                //new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP33,new XRLXeIntValue(1)),
                //new XRLXeAttribParam(Constants.PROPERTY_MYINT64PROP34,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYFLOAT64PROP1,new XRLXeDoubleValue(1.0)),
                new XRLXeAttribParam(Constants.PROPERTY_MYFLOAT32PROP1,new XRLXeFloatValue(1.0f)),
                new XRLXeAttribParam(Constants.PROPERTY_MYINT32PROP1,new XRLXeIntValue(1)),
                new XRLXeAttribParam(Constants.PROPERTY_MYDATETIMEPROP1,new XRLXeDateTimeValue(DateTime.Now.ToFileTimeUtc())),
                new XRLXeAttribParam(Constants.PROPERTY_GAMERNAME,new XRLXeStringValue("abc\0")),
                new XRLXeAttribParam(Constants.CONTEXT_MYCONTEXT1,new XRLXeIntValue(1))
                };
                req.AddAttribs(attrib);

                XRLSessionInfo resp;

                // Set the LMA bit
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;
                req.Slot.machinePuid = 0xFB00000000000001;
                req.Slot.userPuid0 = 12345678;

                if (!req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out resp))
                {
                    throw new UnexpectedTestResultException(MatchUtil.ErrMsgFromXRLPayload("Create failed.", req));
                }
                ResultCode = TEST_RESULTS.PASSED;
                new XRL2DeleteSession(resp.SessionID, req.baseCreateUpdate.baseSession.dwTitleID).Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd));
            }
        }

        [TestCase]
        public class P_XmatchHostDelete2 : TestBase
        {
            override protected void Execute()
            {
                XRL2CreateUpdateSession req = new XRL2CreateUpdateSession();
                XRLSessionInfo Resp;

                // Set the LMA bit
                req.ManualPopulateSlot();
                req.Slot.authDataFlags |= 0x20;
                req.Slot.machinePuid = 0xFB00000000000001;
                req.Slot.userPuid0 = 12345678;

                if (req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out Resp))
                {
                    XRL2DeleteSession delReq = new XRL2DeleteSession(Resp.SessionID, Constants.XENON_TITLE);

                    // Set LMA bit
                    delReq.Slot.authDataFlags |= 0x20;

                    if (delReq.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)))
                        ResultCode = TEST_RESULTS.PASSED;
                }
                else
                    Global.RO.Warn("CreateSession failed:" + Global.XErrToString(req.XErr));
            }
        }

        [TestCase]
        public class P_XMatchSplit : SplitTestBase
        {
            protected override void Execute()
            {
                SessionData session = new SessionData();
                session.Advertise();
                SessionData newSession = session.Split(1); // LMA bits are set in session.Split()
                if (newSession.HostID == session.HostID)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        #endregion

        #region Blocked APIs
        [TestCase]
        public class D_DeadBox : TestBase
        {
            protected override void Execute()
            {
                SGADDR sg = new SGADDR();
                sg.dwSpiSg = 0xffffffff;
                sg.qwXboxID = 0xffffffffffffffff;
                sg.inaSg = new byte[4] { 0xff, 0xff, 0xff, 0xff };
                byte[] sgbytes = sg.toByteArray();

                XRLDeadXBox request = new XRLDeadXBox();
                request.sgaddr.dwSpiSg = sg.dwSpiSg;
                request.sgaddr.qwXboxID = sg.qwXboxID;
                Array.Copy(sg.inaSg, request.sgaddr.inaSg, 4);

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_XMatchClient : TestBase
        {
            protected override void Execute()
            {
                // search based on sessionID
                XRLSearchSession request = new XRLSearchSession(5);
                // sp=5 takes sessionID as parameter
                XRLAttribParam[] Params = new XRLAttribParam[1] { new XRLAttribParam(Constants.X_ATTRIBUTE_DATATYPE_INTEGER, new XRLIntParam(1)) };
                request.AddParams(Params);
                XRLSearchResults response;

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_XMatchHost : TestBase
        {
            protected override void Execute()
            {
                XRLCreateUpdateSession request = new XRLCreateUpdateSession();
                XRLSessionInfo response;

                // Set the LMA bits
                request.ManualPopulateSlot();
                request.Slot.authDataFlags |= 0x20;
                request.Slot.machinePuid = 0xFB00000000000001;
                request.Slot.userPuid0 = 12345678;

                if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out response))
                {
                    if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                    {
                        throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase]
        public class D_XMatchHostDelete : TestBase
        {
            protected override void Execute()
            {
                XRLCreateUpdateSession req = new XRLCreateUpdateSession();
                XRLSessionInfo Resp;
                if (req.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out Resp))
                {
                    XRLDeleteSession request = new XRLDeleteSession(Resp.SessionID);

                    // Set the LMA bits
                    request.ManualPopulateSlot();
                    request.Slot.authDataFlags |= 0x20;
                    request.Slot.machinePuid = 0xFB00000000000001;
                    request.Slot.userPuid0 = 12345678;

                    if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd)))
                    {
                        if (request.httpStatus != System.Net.HttpStatusCode.NotFound)
                        {
                            throw new UnexpectedTestResultException("Expected error 404 for LMA blocked API but recieved this error instead:\n" + request.GetDumpString());
                        }
                        else
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                    }
                }
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\XArbGlobal.cs ===
using System;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Arbitration;
using xonline.common.config;

namespace XArbTest
{
	/// <summary>
	/// Global variables for this test suite
	/// </summary>
	internal static class XArbGlobal
	{
		//Listeners
		
		public const int statsPort = 100;
		public const int SlowstatsPort = 101;
		public const int queryPort = 102;
		public static XArbListener statsListener = new XArbListener(XArbListener.types.stats,statsPort,"Main",-1,-1);
		public static XArbListener slowstatsListener = new XArbListener(XArbListener.types.stats,SlowstatsPort,"SlowListner",200,-1);
		public static XArbListener queryListener = new XArbListener(XArbListener.types.query,queryPort);
		public static IPEndPoint statsEndPoint = null;
		public static IPEndPoint queryEndPoint = null;
		public static IPEndPoint slowstatsEndPoint=null;

		//TitleId
		public static TitleTrustConstants myTitleTrustConstants = new TitleTrustConstants(0xDEADBEEF,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.25,2.0,4.0,2592000,5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0L,0L,0L,0L,0L,0L,0L,0L,0,2.0,8.0,16.0,32.0,64.0,0.0,0.0,0.0,1.0,8,4,2,1,1,2,4,8,new DateTime(DateTime.Now.Ticks));
		public static TitleTrustConstants StressTitleTrustConstants = new TitleTrustConstants(0xBADBEEF,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.25,2.0,4.0,2592000,5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0L,0L,0L,0L,0L,0L,0L,0L,0,2.0,8.0,16.0,32.0,64.0,0.0,0.0,0.0,1.0,8,4,2,1,1,2,4,8,new DateTime(DateTime.Now.Ticks));
		public static TitleTrustConstants SlowStressTitleTrustConstants = new TitleTrustConstants(0xDEAD,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.25,2.0,4.0,2592000,5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0L,0L,0L,0L,0L,0L,0L,0L,0,2.0,8.0,16.0,32.0,64.0,0.0,0.0,0.0,1.0,8,4,2,1,1,2,4,8,new DateTime(DateTime.Now.Ticks));

		//API limits
		public const uint maxXboxes=255;
		public const uint maxUsers=4*maxXboxes;
		public const ushort maxSessionSeconds=3600;
		public const uint maxStatsBundleSize=200000;
		public const uint maxTournamentBundleSize=100000;

		//Test defaults
		public static float defaultUserTrust=(float)(myTitleTrustConstants.baseUserTrust+0.5);
		public const ushort defaultMaxSessionSeconds=60;
		public const ushort defaultMaxSessionSecondsFromNow=(ushort)(XArbGlobal.defaultMaxSessionSeconds+15);
		public const uint defaultUserFlags=0x00000670;
		public const byte defaultTicketSize=188;
		public const byte defaultStatsBundleSize=10;
		public const byte defaultTournamentBundleSize=10;
		public static CPUIDList	defaultUserPuids = null;
		public static TimeSpan defaultTimeout = new TimeSpan(0,0,0,30,0);
		public const int defaultXmgmtRetries = 2;
		public const int defaultMigWaitWindowMins = 1;
		public static TimeSpan defaultMigStartDelta = new TimeSpan(0, 1, 0); // Migration begins 1 minute from now

		//Server defaults
		public static ushort serverSessionTimeoutExtensionSeconds=60;

        public static void HealthCheckIis()
        {
            //Trigger each inhouse server to come online if not already (1 port)
            Console.WriteLine("Loading xarbinh process on each server.");
            XRLHealthARB.fFrontDoor = true;
            XRLHealthARB myHealthRequest = new XRLHealthARB();
            foreach (System.Net.IPEndPoint ServerEP in Global.XEnv.GetInterface(Interface.xarb))
            {
                myHealthRequest.Execute(ServerEP);
                if (myHealthRequest.httpStatus != HttpStatusCode.OK)
                {
                    Console.WriteLine("Unable to execute health URL on " + ServerEP.ToString() + " Error Code:" + myHealthRequest.httpStatus.ToString());
                }
            }
        }

        public static void HealthCheckInh()
        {
            //Trigger each inhouse server to come online if not already (1 port)
            Console.WriteLine("Loading xarbinh process on each server.");
            XRLHealthARB.fFrontDoor = false;
            XRLHealthARB myHealthRequest = new XRLHealthARB();
            foreach (System.Net.IPEndPoint ServerEP in Global.XEnv.GetInterface(Interface.xarbInh))
            {
                myHealthRequest.Execute(ServerEP);
                if (myHealthRequest.httpStatus != HttpStatusCode.OK)
                {
                    Console.WriteLine("Unable to execute health URL on " + ServerEP.ToString() + " Error Code:" + myHealthRequest.httpStatus.ToString());
                }
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\XArbLmaCases.cs ===
/*
 * Functions to test:
 *      xarb:Register.ashx
 *      xarb:ReportResult.ashx
 *      xarb:TimeExtend.ash
 * 
 * Functions blocked:
 *      xarb:DebugResult.ashx
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Net;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.LiveService.Presence;
using xonline.common.config;

using XArbTest;

namespace XArbTest
{

    [TestGroup]
    public class XArbTests : TestNode
    {
        #region xarb:Register.ashx
        /// <summary>
        ///		Register Tests: P_MainlineCase
        /// </summary>
        /// <remarks>
        /// 	<Description>
        ///			Register 4 users on the local client
        /// 	</Description>
        ///		<Verify>
        ///			Verify registration succeeds
        ///		</Verify>
        /// </remarks>
        [TestCase, Description("LMA - XARB:Register.ashx")]
        class P_MainlineCase_Register : XArbTestBase
        {
            public P_MainlineCase_Register()
            {
                Name = "P_MainlineCase_Register";
                Desc = "The typical mainline case that exposes most options";
            }
            override protected void Execute()
            {
                //Construct request
                XRLRegister myRegister = BuildXRLRegister(null, 4, 0, MakeTeamTickets(4, 0, null));

                //Execute and verify
                if (false == ExecuteAndVerify(myRegister))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        #region xarb:ReportResult.ashx
        /// <summary>
        ///		Report Result Tests: P_MainlineCase
        /// </summary>
        /// <remarks>
        /// 	<Description>
        ///			Report results for 4 Xboxes
        /// 	</Description>
        ///		<Verify>
        ///			Verify report results succeeds
        ///		</Verify>
        /// </remarks>
        [TestCase, Description("XARB:ReportResult.ashx")]
        class P_MainlineCase_ReportResult : XArbTestBase
        {
            public P_MainlineCase_ReportResult()
            {
                Name = "P_MainlineCase_ReportResult";
                Desc = "The typical mainline case that exposes most options";
            }
            override protected void Execute()
            {
                const uint xboxes = 4;
                XRLReportResult[] results = new XRLReportResult[xboxes];
                XRLRegister[] registers = new XRLRegister[xboxes];
                uint userIndex = 0;

                TournamentBundle queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);

                //registers
                registers[0] = BuildXRLRegister(null, 1, ref userIndex, MakeTeamTickets(1, userIndex, null));
                registers[0].flags |= XRLRegister.Flags.IsTournament;
                registers[1] = BuildXRLRegister(registers[0], 1, ref userIndex, MakeTeamTickets(1, userIndex, null));
                registers[1].flags |= XRLRegister.Flags.IsTournament;
                registers[2] = BuildXRLRegister(registers[1], 1, ref userIndex, MakeTeamTickets(1, userIndex, null));
                registers[2].flags |= XRLRegister.Flags.IsTournament;
                registers[3] = BuildXRLRegister(registers[2], 1, ref userIndex, MakeTeamTickets(1, userIndex, null));
                registers[3].flags |= XRLRegister.Flags.IsTournament;

                //results
                results[0] = BuildXRLReportResult(registers[0], null, queryBundle, null, null, null, null);
                results[1] = BuildXRLReportResult(registers[1], null, queryBundle, null, null, null, null);
                results[2] = BuildXRLReportResult(registers[2], null, queryBundle, null, null, null, null);
                results[3] = BuildXRLReportResult(registers[3], null, queryBundle, null, null, null, null);

                //Execute and verify
                if (false == ExecuteAndVerify(registers, results))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        #region xarb:TimeExtend.ashx
        /// <summary>
        ///		Time Extend Tests: P_MainlineCase
        /// </summary>
        /// <remarks>
        /// 	<Description>
        ///			Time extend a normal session with 1 user
        /// 	</Description>
        ///		<Verify>
        ///			Verify time extend succeeds
        ///			Verify the session is gone after the time extension expires
        ///		</Verify>
        /// </remarks>
        [TestCase, Description("XARB:TimeExtend.ashx")]
        class P_MainlineCase_TimeExtend : XArbTestBase
        {
            public P_MainlineCase_TimeExtend()
            {
                Name = "TimeExtend";
                Desc = "The typical mainline case that exposes most options";
            }
            override protected void Execute()
            {

                //Construct request
                XRLRegister myRegister = BuildXRLRegister(null, 1, 0, null);

                //Set flags to time extendable
                myRegister.flags |= XRLRegister.Flags.TimeExtendable;

                //Execute and verify
                if (false == ExecuteAndVerify(myRegister))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                //Construct request
                XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister, 10);

                //Execute and verify
                if (false == ExecuteAndVerify(myTimeExtend))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                //Sleep for session + extension
                System.Threading.Thread.Sleep(1000 * (myTimeExtend.maxSessionSecondsFromNow + XArbGlobal.serverSessionTimeoutExtensionSeconds + 1));

                //Verify session is gone
                XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myTimeExtend);

                if (myDebugResultResponse != null)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LoadLeaderboard\Main.cs ===
using System;
using System.Xml;
using ServerTestFramework;
using System.Windows.Forms;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace LoadLeaderboard
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class Stats :TestSuite
	{
	}


    [TestGroup]
	public class LoadLbG :TestNode
	{
		public LoadLbG()
		{
			Add(new LoadLb());
		}

		public class LoadLb: TestBase
		{
			override protected void Execute()
			{
				InputControl ic = new InputControl();
				DialogResult dr = ic.ShowDialog();

				if(dr ==DialogResult.OK)
				{
					try
					{

						uint Titleid = Convert.ToUInt32(ic.textBox1.Text);
						uint Lbid = Convert.ToUInt32(ic.textBox2.Text);
						uint NoOfUsers = Convert.ToUInt32(ic.textBox3.Text);
						uint startrating = Convert.ToUInt32(ic.textBox4.Text);
						uint AttribCount = Convert.ToUInt32(ic.textBox5.Text);
						bool creatlb= ic.checkBox1.Checked;


						LeaderboardInfo[] lbinfos = new LeaderboardInfo[1];
						lbinfos[0]= new LeaderboardInfo(Lbid,"",0,0,0);

						StatsPoster tmp = new StatsPoster(Titleid,lbinfos);
						tmp.createLB(creatlb);

						tmp.AddUsers((int)NoOfUsers,0,AttribCount,SpecialAttribMask.Rating,startrating,1);



						ResultCode =TEST_RESULTS.PASSED;
					}
					catch(System.Exception e)
					{
						System.Console.WriteLine ("Error :-" + e.ToString());
						ResultCode =TEST_RESULTS.FAILED;
					}
				}
				else
				{
					ResultCode =TEST_RESULTS.NOT_EXECUTED;
				}
			}

			public class StatsPoster
			{
				protected uint TitleID;
				protected LeaderboardInfo [] LBids= null;
				protected int Userbase= 5000;

				public object[] GetAttributes(uint Attcount,int spattmask,long Urating)
				{
					object[] tmp = new object[Attcount*2];
					ushort addattr=1;

					for (uint index=0;index <(Attcount*2);index+=2)
					{
						if((spattmask & SpecialAttribMask.Rating) == SpecialAttribMask.Rating)
						{
							tmp[index]=SpecialAttrib.Rating;
							tmp[index+1]=Urating;
							spattmask=0;
						
						}
						else
						{
							if(addattr >=1 && addattr<21)
							{
								tmp[index]=(short)addattr;
								tmp[index+1]=(int)DataGen.GetRandomVal();
								addattr++;
							}
							else if(addattr >=21 && addattr<41)
							{
								tmp[index]=(short)addattr;
								tmp[index+1]=(long)DataGen.GetRandomVal();
								addattr++;
							}
							else if(addattr>=41)
							{
								tmp[index]=(short)addattr;
								tmp[index+1]=(double)DataGen.GetRandomVal();
								addattr++;
							}
						

						}
					}
					return tmp;

				}

				//SpecialAttribMask.Rating

				public void AddUsers(int count ,int lbindex, uint Attcount,int spattmask)
				{
					AddUsers( count , lbindex, Attcount,spattmask,Userbase,1);
				}

				public void AddUsers(int count ,int lbindex, uint Attcount,int spattmask,long RatingStart,int ratdiff)
				{
					int NoofReq= count<100?1:count/100;
					StatsPostReq[] temp =new StatsPostReq[NoofReq];

				

					for (int cnt=0;cnt<NoofReq;cnt++)
					{
						RequestBuilder _Req=null; 
						_Req= new RequestBuilder();
				
						int NoOfUsers= 0;
						if(count>100)
						{
							NoOfUsers=100;
							count=count-100;
						}
						else
							NoOfUsers=count;

						ulong[] users= new ulong[NoOfUsers];

					
						for(int i=0;i<NoOfUsers;i++)
						{

							users[i]=(ulong)(Userbase+(long)(i+(NoOfUsers*cnt)));
							object[] attributes = GetAttributes(Attcount,spattmask,(RatingStart+(long)(i*ratdiff+(NoOfUsers*cnt*ratdiff))));
							StatsPlayerReplace _data= new StatsPlayerReplace((int)LBids[lbindex]._uiLbId,(ulong)users[i],0,attributes);
							_Req.AddProcs(_data.Proc);
					
						}
						_Req.Builder(TitleID,users,true,false);

					
						temp[cnt]= _Req.GetPostData();
					}


					g_Statobj.TManager.ExecuteAndVerify(temp,VerifyFlags.Player);
				}
			
				public StatsPoster(uint title, LeaderboardInfo[] lbids)
				{
					TitleID=title;
					LBids =lbids;
				}

				public void createLB(bool createlb)
				{
					// change this code to work with new LB server
					if(createlb)
					{
						DBHelper db= new DBHelper(g_Statobj.TManager.Im_Stats,true);
						db.ConfigureTitle((int)TitleID,LBids);
					}

					if(LBids !=null)
					{
						
						g_Statobj.TManager.Im_Stats.PlayerDb.CreateLeaderboard((uint)TitleID,(uint)LBids[0]._uiLbId,LBids[0].ELOParams,false,0);
						
		
					}
				}
			
			}
		}
	
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\XArbStressGlobal.cs ===
using System;
using System.IO;
using System.Collections;
using System.Net;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Presence;

namespace XArbTest
{
	/// <summary>
	/// Summary description for XArbStressGlobal.
	/// </summary>
	/// 
	public class ArbUsers
	{
		public ulong Puid=0;
		public ulong[] teams=null;
		public ArbUsers(ulong puid ,ulong[] Userteams)
		{
			Puid=puid;
			teams=Userteams;
		}
	}

	public class XArbSessionManager
	{
		public static bool IgnoreUPDRecive=false;
		public static int minUsersPerSession=4;
		public static int maxUsersPerSession=10;
		public static int minBundleSize=6000;
		public static int maxBundleSize=8000;
		private const int InPlaySize= 10000;
		protected static long UserIndex=0;
		public static uint UserPoolSize= 10000;
		protected static  ArbUsers[] _userlist;
		protected static  Queue _SessionsQ=new Queue();
		protected static Queue _SessionsInPlay=new Queue(InPlaySize);
		protected static Queue _SessionsInTimeExtend=new Queue();
		protected static Queue _RegisteredSessionsQ=new Queue();
		public static int ActiveSessions=200;
		public static RandomEx RandomGen = new RandomEx();
		private static ServerTestFramework.Database.BulkUserSet userSet;

		public static void InitStress()
		{
			ServerTestFramework.Database.UodbWS.CreateBulkUsers("ar", UserPoolSize, out userSet);

			//ulong _Mask =0x0009FFFFFFFFF000;
			_userlist= new ArbUsers[UserPoolSize];
			lock(_userlist)
			{
				RandomEx random= new RandomEx();
				for(uint i=0;i<UserPoolSize;i++)
				{
					ulong[] teams= null;
					int teamcount = random.Next(0,10);
					if(teamcount>5)
					{
						teams= new ulong[(teamcount-5)];
						for(int j=0;j<(teamcount-5);j++)
							teams[j]=0xFE00000000000000+(ulong)random.Next();
					}
					//_userlist[i]= new ArbUsers((_Mask-(ulong)i),teams);
					_userlist[i]= new ArbUsers(userSet.IndexToPuid(i), teams);
				}
			}

			RandomGen.NextBytes(ArbStressSession.statsdata);
			RandomGen.NextBytes(ArbStressSession.statsdata2);
		}

		public static ArbUsers GetNextUser()
		{
			ulong currentindex = (ulong)Interlocked.Increment(ref UserIndex);
			return _userlist[(int)(currentindex%(ulong)UserPoolSize)];
		}

		public static  ArbStressSession GetNextSession()
		{
			ArbStressSession _session=null;
			ArbStressSession DQSession=null;
			lock(_SessionsQ)
			{
				if(_SessionsQ.Count > 0)
				{
					ArbStressSession tmpsession=(ArbStressSession)_SessionsQ.Peek();
					if(tmpsession.CurrentMaxMembers<tmpsession.MaxMembersAllowed)
					{
						// This session has room for more registrations, we're good to go
						tmpsession.CurrentMaxMembers++;
						_session= tmpsession;
					}
					else
					{
						// No room for more people, this session needs to be put into the _SessionsInPlay queue
						DQSession=(ArbStressSession)_SessionsQ.Dequeue();
					}
				}
				if(_session == null)
				{
					// Either no session found or the one found is being put into the play queue so make a new session
					//5% of the time use slow title.
					if(RandomGen.Next(1,21)<=18)
						_session= new ArbStressSession(0xBADBEEF,RandomGen.Next(minUsersPerSession,maxUsersPerSession),RandomGen.Next(1,11)>9?true:false);
					else
						_session= new ArbStressSession(0xDEAD,RandomGen.Next(minUsersPerSession,maxUsersPerSession),RandomGen.Next(1,11)>9?true:false);
					_SessionsQ.Enqueue(_session);
				}
			}

			if(DQSession!=null)
			{
				// The session we looked at in _SessionsQ was full up on members, time to put it into play
				DQSession.CurrentState=(int)ArbStressSession.States.Play;
				lock(_SessionsInPlay)
				{
					_SessionsInPlay.Enqueue(DQSession);
				}
			}

			return _session;
		}

		public static ArbStressSession GetNextSessionToTimeExtend()
		{
			ArbStressSession _session = null;
			ArbStressSession DQSession= null;
			lock(_SessionsInTimeExtend)
			{
				if(_SessionsInTimeExtend.Count>0)
				{
					ArbStressSession tmp =(ArbStressSession)_SessionsInTimeExtend.Peek();
					if(tmp.CanTimeExtend())
					{
						_session =tmp;
					}
					else
					{
						DQSession =(ArbStressSession)_SessionsInTimeExtend.Dequeue();
					}
				}

				if( _session==null) 
				{
					lock(_SessionsInPlay)
					{
						if(_SessionsInPlay.Count>0)
						{
							_session = (ArbStressSession)_SessionsInPlay.Dequeue();
							if (_session.CurrentMembersRegistered <= 0)
							{
								_SessionsInPlay.Enqueue(_session);
								_session = null;
							}
						}
					}
					if(_session!=null)
					{
						_SessionsInTimeExtend.Enqueue(_session);
					}
				}
			}

			if(DQSession !=null)
			{
				lock(_SessionsInPlay)
				{
					_SessionsInPlay.Enqueue(DQSession);
				}
			}
			return _session;
		}

		public static  ArbStressSession GetNextRegisteredSession()
		{
			ArbStressSession _session = null;
			lock(_RegisteredSessionsQ)
			{
				while(_RegisteredSessionsQ.Count>0)
				{
					ArbStressSession tmpSession=(ArbStressSession)_RegisteredSessionsQ.Peek();
					if(tmpSession.MachineIndexToPost<tmpSession.MaxMembersAllowed)
					{
						tmpSession.MachineIndexToPost++;
						_session=tmpSession;
						break;
					}
					else
					{
						// later put this into verify Queue.
						_RegisteredSessionsQ.Dequeue();
					}
				}
				if(_RegisteredSessionsQ.Count<=0)
				{
					lock(_SessionsInPlay)
					{ 
						if(_SessionsInPlay.Count>XArbSessionManager.ActiveSessions)
						{
							_RegisteredSessionsQ = _SessionsInPlay;
							_SessionsInPlay = new Queue(InPlaySize);
						}
					}
				}
			}
			return _session;
		}
	/*	public static  void AddSession(ArbStressSession Session)
		{// this function determines which queue the object should go to and adds to appropriate queue.
			if(Session.CurrentState == (int)ArbStressSession.States.Registration)
			{
				lock(_SessionsQ)
				{
					_SessionsQ.Enqueue(Session);
				}
			}
			else if(Session.CurrentState == (int)ArbStressSession.States.Registration)
			{
				lock(_SessionsInPlay)
				{
					_SessionsInPlay.Enqueue(Session);
				}
			}
			else if(Session.CurrentState == (int)ArbStressSession.States.Reporting)
			{
				lock(_RegisteredSessionsQ)
				{
					_RegisteredSessionsQ.Enqueue(Session);
				}
			}
		}
*/

	}


	public class ArbStressSession : ArbSessionBase
	{
		public int CurrentIndex=-1; //is index sis used when Reporting results.
		protected ArrayList Users= new ArrayList();
		protected ArrayList teams= new ArrayList();
		protected Stressbundle tournamentdata = null;
		public int MaxMembersAllowed;
		public int CurrentMaxMembers=0;
		public int CurrentMembersRegistered=0;
		public Queue CurrentRegisteredOnlyXboxes = Queue.Synchronized(new Queue());
		public int MachineIndexToPost=0;
		public int CurrentState=(int)ArbStressSession.States.Registration;
		private long StartTime=DateTime.Now.Ticks;
		public int SessionTTL = 600; // session play time 10 min.
		private int TimeExtendCount=0;
		private byte[] RandomStatsData = null;
		public bool IncludeQueryBundle=false;
		public static  byte[] statsdata = new byte[XArbSessionManager.maxBundleSize * 2];
		public static  byte[] statsdata2 = new byte[10];
		public enum States:int
		{
			Registration,
			Play,
			Reporting,
			Verification
		};
		public RandomEx random= new RandomEx();

		public int GetTimeInQueue()
		{
			TimeSpan timeinSesssion =new TimeSpan(DateTime.Now.Ticks-StartTime);
			return timeinSesssion.Seconds;
		}

		public ArbStressSession(uint title,int MaxMembers,bool AddQueryB):base(title)
		{
			MaxMembersAllowed =MaxMembers;
			IncludeQueryBundle=AddQueryB;
			string sessionIdNonce = this.SessionId.ToString("X16")+ this.SessionNonce.ToString("X16");
			XArbListener.Stressht.Add(sessionIdNonce,null);

			int size = random.Next(XArbSessionManager.minBundleSize,XArbSessionManager.maxBundleSize);
			RandomStatsData = new byte[size];
			System.Array.Copy(statsdata, random.Next(XArbSessionManager.maxBundleSize), this.RandomStatsData, 0, size);
		}
			
		public bool CanTimeExtend()
		{
			bool retval= false;
			lock(this)
			{
				TimeExtendCount++;
				if(TimeExtendCount<=MaxMembersAllowed)
				{
					retval= true;
				}
			}
			return retval;
		}

		private static XRLRegister SrcXRLRegister = new XRLRegister();

		public bool RegisterParticipant(int UserCount)
		{
			Machine xbox = new Machine();
			lock(this)
			{
				this.machines.Add(xbox);
			}
			XRLRegister register = SrcXRLRegister.DeepClone();
			//XRLRegister register = new XRLRegister();
			register.sessionId=this.SessionId;
			register.sessionNonce= this.SessionNonce;
			register.machinePuid= xbox.MachinePuid;
			register.maxSessionSeconds=(ushort)this.SessionTTL;

			if(IncludeQueryBundle)
				register.flags =XRLRegister.Flags.SessionIsFreeForAll|XRLRegister.Flags.TimeExtendable|XRLRegister.Flags.TeamMembershipInfoIncluded|XRLRegister.Flags.IsTournament;
			else
				register.flags =XRLRegister.Flags.SessionIsFreeForAll|XRLRegister.Flags.TimeExtendable|XRLRegister.Flags.TeamMembershipInfoIncluded;

			for(int i = 0; i < UserCount; i++)
			{
				ArbUsers user = XArbSessionManager.GetNextUser();
				register.userPuid[i] = user.Puid;
				lock(Users)
				{
					Users.Add(user.Puid);
				}

				if(user.teams != null)
				{
					xbox.AddUserWithTeams(register.userPuid[i],user.teams);
					register.teamTickets = xbox.GetTeamTickets();
					//register.flags |= XRLRegister.Flags.TeamMembershipInfoIncluded;
					lock(teams)
					{
						foreach ( TeamTicket  ticket in register.teamTickets.list.tickets)
							teams.Add(ticket);
					}
					
				}
				else
				{
					register.teamTickets  = new TeamTickets();
					xbox.AddUser(register.userPuid[i]);
				}
				register.userFlag[i]=0;
				register.userTrust[i]=XArbGlobal.defaultUserTrust;
			}

			register.titleId=this.TitleId;

			bool retval=false;
			try
			{
				retval=register.Execute();
				if (!retval)
				{
					Global.RO.Error("Register failed for {0}:{1}(Xbox ID: {2}): {3}", register.sessionId.ToString("X"),
						register.sessionNonce.ToString("X"), register.machinePuid, register.GetDumpString());
				}
				else
				{
					CurrentRegisteredOnlyXboxes.Enqueue(xbox);
					Interlocked.Increment(ref CurrentMembersRegistered);
				}
			}
			catch(Exception e)
			{
				Global.RO.Error("Port = "+register.Slot.port);
				Global.RO.Error(e.ToString());
			}
			return retval;
		}

		private static XRLTimeExtend SrcXRLTimeExtend = new XRLTimeExtend();
		
		public bool ExtendTime()
		{
			XRLTimeExtend myTimeExtend = SrcXRLTimeExtend.DeepClone();
			//XRLTimeExtend myTimeExtend = new XRLTimeExtend();
			//Machine xbox1 = (Machine)machines[0];
			Machine xbox1 = (Machine)CurrentRegisteredOnlyXboxes.Peek();
			myTimeExtend.machinePuid=xbox1.MachinePuid;
			myTimeExtend.sessionId= SessionId;
			myTimeExtend.sessionNonce=SessionNonce;
			myTimeExtend.titleId=TitleId;
			myTimeExtend.flags=0;
			myTimeExtend.maxSessionSecondsFromNow=(ushort)this.SessionTTL;
			myTimeExtend.ReceiveTimeOut=200;
			myTimeExtend.IgnoreUDPReceive=XArbSessionManager.IgnoreUPDRecive;

			bool retval=false;
			try
			{
				retval=myTimeExtend.Execute();
				if (!retval)
				{
					Global.RO.Error("Time Extend failed for {0}:{1}(Xbox ID: {2}): {3}", myTimeExtend.sessionId.ToString("X"),
						myTimeExtend.sessionNonce.ToString("X"), myTimeExtend.machinePuid, myTimeExtend.GetDumpString());
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine("Port = "+myTimeExtend.Slot.port);
				System.Console.WriteLine(e);
			}

			return retval;
		}
		
		public byte[] GetStatsData()
		{
			Stressbundle Statsdata = new Stressbundle();
			Statsdata.Users =new ulong[Users.Count];
			for (int i=0; i < Users.Count; i++)
			{
				Statsdata.Users[i] = (ulong)Users[i];
			}
			Statsdata.TeamTickets = (TeamTicket[])teams.ToArray(new TeamTicket().GetType());
			int size = random.Next(XArbSessionManager.minBundleSize,XArbSessionManager.maxBundleSize);
			//Statsdata.randamdata = new byte[size];
			//random.NextBytes(Statsdata.randamdata);
			//System.Array.Copy(statsdata, random.Next(XArbSessionManager.maxBundleSize), Statsdata.randamdata, 0, size);
			Statsdata.randamdata = new byte[RandomStatsData.Length];
			System.Array.Copy(RandomStatsData, 0, Statsdata.randamdata, 0, RandomStatsData.Length);
			return (byte[])Statsdata;
		}

		public byte[] GetStatsData2()
		{
			Stressbundle Statsdata = new Stressbundle();
			Statsdata.Users = new ulong[Users.Count];
			for (int i=0; i< Users.Count; i++)
			{
				Statsdata.Users[i]= (ulong)Users[i];
			}
			Statsdata.TeamTickets = (TeamTicket[])teams.ToArray(new TeamTicket().GetType());
			Statsdata.randamdata = statsdata2;

			return (byte[])Statsdata;
		}

		private static XRLReportResult SrcXRLReportResult = new XRLReportResult();

		public bool ReportResults(byte[] Statsbundle, byte[] tournamentbundle, bool IsUDP)
		{
			int index= Interlocked.Increment(ref CurrentIndex);
			Machine xbox= (Machine)machines[index];
			XRLReportResult myResults = SrcXRLReportResult.DeepClone();
			//XRLReportResult myResults = new XRLReportResult();
			if(TitleId==0xBADBEEF)
				myResults.AlternateStatsDestination=XArbGlobal.statsEndPoint;
			else
				myResults.AlternateStatsDestination=XArbGlobal.slowstatsEndPoint;
			myResults.AlternateQueryDestination=XArbGlobal.queryEndPoint;
			myResults.machinePuid = xbox.MachinePuid;
			myResults.sessionId = SessionId;
			myResults.sessionNonce = SessionNonce;
			myResults.titleId = TitleId;

			// We cannot submit more then 1048 bites in an UDP Request. if we submit more then 1048 the server will IGnore it.
			// thats why we do not attach any bundle for UDP.
			if(IsUDP)
			{
				myResults.transport=FDTransaction.Transports.UDP;
				myResults.IgnoreUDPReceive=XArbSessionManager.IgnoreUPDRecive;
			}
			else
			{
				myResults.transport=FDTransaction.Transports.TCP;
			}
			if (Statsbundle != null)
			{
				myResults.flags |= XRLReportResult.Flags.StatsBundleInfoSubmit;
				myResults.statsBundle = new StatsBundle();
				myResults.statsBundle.bundle=Statsbundle;
			}

			if (tournamentbundle != null)
			{
				myResults.flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;
				myResults.tournamentBundle = new TournamentBundle();
				myResults.tournamentBundle.bundle=tournamentbundle;
			}

			bool retval=false;
			try
			{
				retval=myResults.Execute();
				if (!retval)
				{
					Global.RO.Error("ReportResults failed for {0}:{1}: {2}", myResults.sessionId.ToString("X"),
						myResults.sessionNonce.ToString("X"), myResults.GetDumpString());
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine("Port = "+myResults.Slot.port);
				System.Console.WriteLine(e);
			}

			return retval ;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\XArbTest.cs ===
using System;
using System.Net;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Utilities;
using System.Windows.Forms;
using xonline.common.config;

[assembly: RootNode(typeof(XArbTest.XArbTest))]

namespace XArbTest
{
	/// <summary>
	/// <TestSuite>Arbitration Server Test Plan</TestSuite>
	///	<Tester>Michael Fisher</Tester>
	///	<Developer>Steve Lamb</Developer>
	///	<PM>Patrick O'Kelley</PM>
	///	<Status>Draft</Status>
	/// </summary>
	///	<remarks>
	///	<Goal>No goals!</Goal>
	///	<NonGoal>Having goals</NonGoal>
	///	<Description>
	///		<p>
	///		The Arbitration server consists of a front door server component and an in-house server component.  Inbound packets are both TCP and UDP (for SOS messages)
	///		and a UDP to TCP packet adapter is installed on each Arb FD.  Upon receiving a packet, the FD uses a private hashing algorithm and potentially server migration
	///		information from NPDB to determine which INH server to forward the packet on to.  Each INH server "owns" specific arbitrated sessions and maintains session-specific
	///		state in-memory.  An successful arbitrated session consists of calls from clients to Register at the beginning of a session, an optional call to TimeExtend if needed during,
	///		and ReportResult at the end.  On the basis of a number of factors related to the data reported and the manner in which it's reported, Arbitration updates each user's
	///		User Trust Rating, which are flushed to UODB nightly.
	///		</p>
	///		<p>
	///		Arbitration test cases are modeled on expected usage scenarios as well as abstract API testing methodology.  A typical test case will exercise some aspect of the
	///		functionality under test and verify it a number of ways, including by examing the server response (200/OK), test-only DebugReponse info, and validating various details
	///		in the response packets.  While it is possible to send cases directly to the INH servers for debugging purposes, it is expected that routine testing will use the FDs.
	///		</p>
	/// </Description>
	/// </remarks>
	public class XArbTest : TestNode
	{
        public XArbTest()
        {
            AddChild(new XArbTests());
            //AddChild(new P_MainlineCase_ReportResult());
            //AddChild(new FuncTimeExtendTests());
            //AddChild(new FuncReportResultTests());
            //AddChild(new FuncMigration());
            //AddChild(new ConfigSettings());
        }

        //TODO: This has not worked in years since STFRunner was deprecated.  Please re-implement this as an STFGui plugin if you still desire this behaviour.
		/*override public void AddCustomMenus()
		{
			CustomMenu.Add(new CustomMenu("Start Listner Option...",new EventHandler(XArbGlobal.statsListener.OptionHandler)));
			CustomMenu.Add(new CustomMenu("Query Listner Option...",new EventHandler(XArbGlobal.queryListener.OptionHandler)));
			CustomMenu.Add(new CustomMenu("Start Slow Listner Option... ",new EventHandler(XArbGlobal.slowstatsListener.OptionHandler)));
			CustomMenu.Add(new CustomMenu("Stress Option... ",new EventHandler(this.StressOption)));
		}*/

		public void StressOption(Object sender, System.EventArgs e) 
		{
			StressOption tmp = new StressOption();
			tmp.textBox1.Text=XArbSessionManager.minBundleSize.ToString();
			tmp.textBox2.Text=XArbSessionManager.maxBundleSize.ToString();
			tmp.textBox4.Text =XArbSessionManager.minUsersPerSession.ToString();
			tmp.textBox5.Text =XArbSessionManager.maxUsersPerSession.ToString();
			if(XArbSessionManager.IgnoreUPDRecive==false)
				tmp.checkBox1.Checked= true;
			if(tmp.ShowDialog()==DialogResult.OK)
			{
				XArbSessionManager.minBundleSize= Convert.ToInt32(tmp.textBox1.Text);
				XArbSessionManager.maxBundleSize= Convert.ToInt32(tmp.textBox2.Text);
				XArbSessionManager.minUsersPerSession =Convert.ToInt32(tmp.textBox4.Text);
				XArbSessionManager.maxUsersPerSession =Convert.ToInt32(tmp.textBox5.Text);
				if(tmp.checkBox1.Checked== true)
					XArbSessionManager.IgnoreUPDRecive=false;
				else
					XArbSessionManager.IgnoreUPDRecive=true;
			}	


		}

        public override void PreRun(RUN_TYPE runType)
        {
            if (runType == RUN_TYPE.STRESS)
            {
                XArbListener.IsStress = true;
            }

			XArbGlobal.statsListener.Go();
			XArbGlobal.statsListener.SetXError(HResult.XONLINE_E_STAT_LEADERBOARD_READONLY);

			if(!(runType == RUN_TYPE.FUNCTIONAL))
			{
				XArbGlobal.slowstatsListener.Go();
				XArbGlobal.slowstatsListener.SetXError(HResult.XONLINE_E_STAT_LEADERBOARD_READONLY);
			}
			XArbGlobal.queryListener.Go();

			try
			{
				//Create set of users

				if(runType == RUN_TYPE.FUNCTIONAL)
				{
					Console.WriteLine("Populating or creating a set of global arbitration test users.");
					UacsCommon uac=new UacsCommon();
					XArbGlobal.defaultUserPuids=uac.CreatePrivateUsers("xarb",(int)XArbGlobal.maxUsers+4);
					//Set Title Trust Constants
					Console.WriteLine("Updating or creating title constants in UODB and then running ReloadTitleParameters management commands.");
				
					if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.myTitleTrustConstants))
						Console.WriteLine("Unable to create/update my title id in UODB");

				}
				else
				{
					Console.WriteLine("Populating or creating a set of global arbitration test users.");
					XArbSessionManager.InitStress();
					//Set Title Trust Constants
					Console.WriteLine("Updating or creating title constants in UODB and then running ReloadTitleParameters management commands.");
					    if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.StressTitleTrustConstants))
						Console.WriteLine("Unable to create/update my title id in UODB");
					//SlowStressTitleTrustConstants
					if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.SlowStressTitleTrustConstants))
						Console.WriteLine("Unable to create/update my title id in UODB");
				}

				if(runType == RUN_TYPE.FUNCTIONAL)
				{
					if (UseFrontDoors())
					{
						//Trigger each front door and each port to come online if not already (120 Ports)
                        XArbGlobal.HealthCheckIis();
					}
					else
					{
						Console.WriteLine("By-passing xarb process load on front doors.");
					}

					//Trigger each inhouse server to come online if not already (1 port)
                    XArbGlobal.HealthCheckInh();
				}

				//Determine if default endpoint is fd or inh
				bool fFrontDoor = UseFrontDoors();

				//Switch XRLPayload static machine type indicators
				XRLRegister.fFrontDoor=fFrontDoor;
				XRLHealthARB.fFrontDoor=fFrontDoor;
				XRLDebugResult.fFrontDoor=fFrontDoor;
				XRLTimeExtend.fFrontDoor=fFrontDoor;
				XRLReportResult.fFrontDoor=fFrontDoor;

				//Use management command to reload title constants
				Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "exec :xarbInh ReloadTitleParameters");

				//Get the local interface to listen
				IPAddress myIp=null;
				LocalInterface.GetBestMatch(Global.XEnv.GetVirtualInterface(VirtualInterface.xarb), out myIp);
				XArbGlobal.statsEndPoint = new IPEndPoint(myIp,XArbGlobal.statsPort);
				XArbGlobal.slowstatsEndPoint = new IPEndPoint(myIp,XArbGlobal.SlowstatsPort);
				XArbGlobal.queryEndPoint = new IPEndPoint(myIp,XArbGlobal.queryPort);
			}
			catch
			{
				XArbGlobal.statsListener.Stop();
				if(!ISFunctional)
				{
					XArbGlobal.slowstatsListener.Stop();
				}
				XArbGlobal.queryListener.Stop();
				throw;
			}
		}

		private bool UseFrontDoors()
		{
			//Determine if default endpoint is fd or inh
			bool UseFDs = true;
			System.Net.IPEndPoint defaultEP = Global.XEnv.GetVirtualInterface(VirtualInterface.xarb);
			// Check if xarb interface was overridden to point to an xarbInh server (by-passing FDs)
			foreach (System.Net.IPEndPoint serverEP in Global.XEnv.GetInterface(Interface.xarbInh))
			{
				if (serverEP.Address.Equals(defaultEP.Address) && serverEP.Port == defaultEP.Port)
				{
					UseFDs = false;
				}
			}
			return(UseFDs);
		}

		public override void PostRun(RUN_TYPE runType)
		{
			XArbGlobal.queryListener.Stop();
			XArbGlobal.statsListener.Stop();

			if(!(runType == RUN_TYPE.FUNCTIONAL))
			{
				XArbGlobal.slowstatsListener.Stop();
				
			}

			Thread.Sleep(100);
			while (XArbGlobal.queryListener.IsAlive)
			{
				Console.WriteLine("query listener thread state: "+XArbGlobal.queryListener.TaskThread.ThreadState.ToString());
				Thread.Sleep(100);
			}

			while (XArbGlobal.statsListener.IsAlive)
			{
				Console.WriteLine("stats listener thread state: "+XArbGlobal.statsListener.TaskThread.ThreadState.ToString());
				Thread.Sleep(100);
			}
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LoadLeaderboard\InputControl.cs ===
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

namespace LoadLeaderboard
{
	/// <summary>
	/// Summary description for InputControl.
	/// </summary>
	public class InputControl : System.Windows.Forms.Form
	{
		private System.Windows.Forms.Button Ok;
		private System.Windows.Forms.Button Cancel;
		private System.Windows.Forms.Label label1;
		private System.Windows.Forms.Label label2;
		private System.Windows.Forms.Label label3;
		public System.Windows.Forms.TextBox textBox1;
		public System.Windows.Forms.TextBox textBox2;
		public System.Windows.Forms.TextBox textBox3;
		private System.Windows.Forms.Label label4;
		public System.Windows.Forms.TextBox textBox4;
		public System.Windows.Forms.CheckBox checkBox1;
		private System.Windows.Forms.Label label5;
		public System.Windows.Forms.TextBox textBox5;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public InputControl()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.Ok = new System.Windows.Forms.Button();
			this.Cancel = new System.Windows.Forms.Button();
			this.label1 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.label3 = new System.Windows.Forms.Label();
			this.textBox1 = new System.Windows.Forms.TextBox();
			this.textBox2 = new System.Windows.Forms.TextBox();
			this.textBox3 = new System.Windows.Forms.TextBox();
			this.label4 = new System.Windows.Forms.Label();
			this.textBox4 = new System.Windows.Forms.TextBox();
			this.checkBox1 = new System.Windows.Forms.CheckBox();
			this.label5 = new System.Windows.Forms.Label();
			this.textBox5 = new System.Windows.Forms.TextBox();
			this.SuspendLayout();
			// 
			// Ok
			// 
			this.Ok.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.Ok.Location = new System.Drawing.Point(32, 232);
			this.Ok.Name = "Ok";
			this.Ok.TabIndex = 0;
			this.Ok.Text = "Ok";
			// 
			// Cancel
			// 
			this.Cancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.Cancel.Location = new System.Drawing.Point(152, 232);
			this.Cancel.Name = "Cancel";
			this.Cancel.TabIndex = 1;
			this.Cancel.Text = "Cancel";
			// 
			// label1
			// 
			this.label1.Location = new System.Drawing.Point(16, 24);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(80, 23);
			this.label1.TabIndex = 2;
			this.label1.Text = "Title Id:-";
			// 
			// label2
			// 
			this.label2.Location = new System.Drawing.Point(16, 56);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(80, 23);
			this.label2.TabIndex = 3;
			this.label2.Text = "LB Id:-";
			// 
			// label3
			// 
			this.label3.Location = new System.Drawing.Point(16, 88);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(80, 23);
			this.label3.TabIndex = 4;
			this.label3.Text = "# of Users";
			// 
			// textBox1
			// 
			this.textBox1.Location = new System.Drawing.Point(128, 24);
			this.textBox1.Name = "textBox1";
			this.textBox1.TabIndex = 5;
			this.textBox1.Text = "";
			this.textBox1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			// 
			// textBox2
			// 
			this.textBox2.Location = new System.Drawing.Point(128, 56);
			this.textBox2.Name = "textBox2";
			this.textBox2.TabIndex = 6;
			this.textBox2.Text = "";
			// 
			// textBox3
			// 
			this.textBox3.Location = new System.Drawing.Point(128, 88);
			this.textBox3.Name = "textBox3";
			this.textBox3.TabIndex = 7;
			this.textBox3.Text = "";
			this.textBox3.TextChanged += new System.EventHandler(this.textBox3_TextChanged);
			// 
			// label4
			// 
			this.label4.Location = new System.Drawing.Point(24, 120);
			this.label4.Name = "label4";
			this.label4.TabIndex = 8;
			this.label4.Text = "Start rating";
			// 
			// textBox4
			// 
			this.textBox4.Location = new System.Drawing.Point(128, 112);
			this.textBox4.Name = "textBox4";
			this.textBox4.TabIndex = 9;
			this.textBox4.Text = "5000";
			// 
			// checkBox1
			// 
			this.checkBox1.Location = new System.Drawing.Point(16, 192);
			this.checkBox1.Name = "checkBox1";
			this.checkBox1.Size = new System.Drawing.Size(208, 24);
			this.checkBox1.TabIndex = 10;
			this.checkBox1.Text = "Create/reset Lb";
			// 
			// label5
			// 
			this.label5.Location = new System.Drawing.Point(32, 152);
			this.label5.Name = "label5";
			this.label5.TabIndex = 11;
			this.label5.Text = "# of Attribute";
			// 
			// textBox5
			// 
			this.textBox5.Location = new System.Drawing.Point(144, 152);
			this.textBox5.Name = "textBox5";
			this.textBox5.TabIndex = 12;
			this.textBox5.Text = "1";
			// 
			// InputControl
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(296, 277);
			this.Controls.Add(this.textBox5);
			this.Controls.Add(this.label5);
			this.Controls.Add(this.checkBox1);
			this.Controls.Add(this.textBox4);
			this.Controls.Add(this.label4);
			this.Controls.Add(this.textBox3);
			this.Controls.Add(this.textBox2);
			this.Controls.Add(this.textBox1);
			this.Controls.Add(this.label3);
			this.Controls.Add(this.label2);
			this.Controls.Add(this.label1);
			this.Controls.Add(this.Cancel);
			this.Controls.Add(this.Ok);
			this.Name = "InputControl";
			this.Text = "InputControl";
			this.ResumeLayout(false);

		}
		#endregion

		private void textBox3_TextChanged(object sender, System.EventArgs e)
		{
		
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\MigrateUserTest.cs ===
using System;
using System.IO;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using ServerTestFramework.WebWidget;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserSettings;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.Web.Presence;
using xonline.common.tools.console;
using xonline.common.billing.migrateuser;
using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;
using xonline.common.config;
using ServerTestFramework.LiveService.FakeSG;
using User = xonline.common.user.User;

namespace xonline.tools.migrateusertool
{
    public class MigrateUserToolTest : TestNode
    {
        protected static EnvironmentSetting m_OrgEnvironment;
        protected static EnvironmentSetting m_NewEnvironment;

        [TestGroupSetup]
        public virtual void Setup()
        {
            //Tests depends on dlls below
            string[] dependFiles = { "billing.pso.dll", "MigrateUser.exe", "console.dll", "pso.dll" };
            foreach (string dependFile in dependFiles)
            {
                if (!System.IO.File.Exists(dependFile))
                {
                    throw new Exception("Depended file " + dependFile + " is not found!");
                }
            }
            m_OrgEnvironment = Global.CurrentEnvironment;
            bool found = false;
            string envName = "xblob";
            //Tests suppose there is an environment in stf.xml called "xblob"
            foreach (EnvironmentSetting envSetting in Global.EnvironmentList)
            {
                if (envSetting.Environment.ToLower() == envName)
                {
                    m_NewEnvironment = envSetting;
                    found = true;
                }
            }
            if (!found)
            {
                throw new UnexpectedTestResultException(String.Format("Error - unknown environment '{0}' specified (not in stf.xml?).", envName));
            }
        }

        [TestGroupTearDown]
        public virtual void TearDown()
        {
            ResetEnvironment(m_OrgEnvironment);
        }

        public class SubscriptionData
        {
            public ulong OfferId;
            public DateTime StartDate;
            public DateTime EndDate;
        }

        public static void ResetEnvironment(EnvironmentSetting envSetting)
        {
            Global.CurrentEnvironment = envSetting;
            Global.ResetEnvironment();
        }

        public static int Run(string arguments)
        {
            string fileName = "MigrateUser.exe";
            if (!System.IO.File.Exists(fileName))
            {
                throw new UnexpectedTestResultException(String.Format("Couldn't find file{0}.", fileName));
            }
            Process p = new Process();
            p.StartInfo.WorkingDirectory = ".";
            p.StartInfo.FileName = fileName;
            p.StartInfo.Arguments = arguments;
            p.StartInfo.CreateNoWindow = true;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.Start();

            string output = p.StandardOutput.ReadToEnd();
            output += p.StandardError.ReadToEnd();

            if (output.IndexOf("FAIL") >= 0)
                Global.RO.Error(output);
            else
                Global.RO.Info(output);

            p.WaitForExit();
            return p.ExitCode;
        }

        public static void VerifyGraduation(ulong puid, string gamertag)
        {
            try
            {
                if (File.Exists("stf.xml"))
                {
                    System.Environment.SetEnvironmentVariable("XBL_CONFIG_SERVER",
                        ServerTestFramework.Global.CurrentEnvironment.NpdbIp);

                    live.common.Config.SetConfig(new live.common.STFConfig());
                }

                live.client.Xbox360Client client = new live.client.Xbox360Client();
                client.Timeout = 120000;
                client.GetTransactionObject(live.common.XOService.User_Account).SecurityProvider.SetPrivilege(225, true);
                                
                live.common.XblUser xbluser = new live.common.XblUser(puid, gamertag);
                client.UserLoggingOn(xbluser);
                
                live.server.next.UACS.XeGraduateUser(client, xbluser);

            }
            catch (live.common.XErrFailedException xerr)
            {
                if (xerr.HResult == HResult.XONLINE_E_ACCOUNTS_GRADUATE_USER_QUEUED)
                {
                    Global.RO.Warn("User Graduation was Queued... ReturnCode: {0}", live.common.HResult.XErrToString(xerr.HResult));
                }
                else
                {
                    Global.RO.Error("Got unexpected errorcode: {0} , expected Success or Queued ", live.common.HResult.XErrToString(xerr.HResult));
                    throw;
                }
            }
        }

        public static string GetPassportMemberName(ulong puid, out string parentPmn)
        {
            XRLXePassportGetMemberName request = new XRLXePassportGetMemberName();
            XRLXePassportGetMemberNameResponse response = new XRLXePassportGetMemberNameResponse();
            request.userPuid = puid;
            if (!request.Execute(out response))
                throw new Exception("XePassportGetMemberName failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new Exception(string.Format("XePassportGetMemberName returned Xerr=0x{0:x}: {1}", request.XErr, request.GetDumpString()));

            ValueCheck.TestNotNull("response.userCid", response.userCid);
            ValueCheck.TestNotNull("response.UserPmn", response.UserPmn);
            parentPmn = response.ParentPmn;
            return response.UserPmn;
        }

        public static void VerifyUserLogon(string gamertag, ulong puid)
        {
            FriendsCommon fc = new FriendsCommon();
            PNUser pn = new PNUser(gamertag, puid);
            fc.LogonUser(pn);
            fc.LogoffUser(pn);
        }

        public static void VerifyAccountInfo(User user, ulong puid)
        {
            XRLXeGetAccountInfo request = new XRLXeGetAccountInfo();
            XRLXeGetAccountInfoResponse response = new XRLXeGetAccountInfoResponse();
            request.UserPuid = puid;

            if (!request.Execute(out response))
                throw new Exception("XeGetAccountInfo failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new Exception(string.Format("XeGetAccountInfo returned Xerr=0x{0:x}: {1}", request.XErr, request.GetDumpString()));
            //ValueCheck.Test("response.FirstName", user.FirstName, response.FirstName);
            //ValueCheck.Test("response.LastName", user.LastName, response.LastName);
            //ValueCheck.Test("response.Birthdate", user.BirthDate.ToString(), response.Birthdate.ToString());
            //ValueCheck.Test("response.Email", user.Email, response.Email);
            ValueCheck.Test("response.CountryId", user.CountryId, response.CountryId);
            ValueCheck.Test("response.LanguageId", user.LanguageId, response.LanguageId);
            //ValueCheck.Test("response.AddressInfo.City", user.AddressInfo.City, response.AddressInfo.City);
            //ValueCheck.Test("response.AddressInfo.Street1", user.AddressInfo.Street1, response.AddressInfo.Street1);
            //ValueCheck.Test("response.AddressInfo.State", user.AddressInfo.State, response.AddressInfo.State);
            //ValueCheck.Test("response.AddressInfo.PostalCode", user.AddressInfo.PostalCode, response.AddressInfo.PostalCode);
            //ValueCheck.Test("response.PhoneInfoData.phonePrefix", user.PhoneInfo.PhonePrefix, response.PhoneInfo.PhonePrefix);
            //ValueCheck.Test("response.PhoneInfoData.phoneNumber", user.PhoneInfo.PhoneNumber, response.PhoneInfo.PhoneNumber);
        }

        public static void VerifyAccountInfo(XeUser user, ulong puid)
        {
            XRLXeGetAccountInfo request = new XRLXeGetAccountInfo();
            XRLXeGetAccountInfoResponse response = new XRLXeGetAccountInfoResponse();
            request.UserPuid = puid;

            if (!request.Execute(out response))
                throw new Exception("XeGetAccountInfo failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new Exception(string.Format("XeGetAccountInfo returned Xerr=0x{0:x}: {1}", request.XErr, request.GetDumpString()));
            //ValueCheck.Test("response.FirstName", user.FirstName, response.FirstName);
            //ValueCheck.Test("response.LastName", user.LastName, response.LastName);
            //ValueCheck.Test("response.Birthdate", user.BirthDate.ToString(), response.Birthdate.ToString());
            //ValueCheck.Test("response.Email", user.Email, response.Email);
            ValueCheck.Test("response.CountryId", user.CountryId, response.CountryId);
            ValueCheck.Test("response.LanguageId", user.LanguageId, response.LanguageId);
            //ValueCheck.Test("response.AddressInfo.City", user.AddressInfo.City, response.AddressInfo.City);
            //ValueCheck.Test("response.AddressInfo.Street1", user.AddressInfo.Street1, response.AddressInfo.Street1);
            //ValueCheck.Test("response.AddressInfo.State", user.AddressInfo.State, response.AddressInfo.State);
            //ValueCheck.Test("response.AddressInfo.PostalCode", user.AddressInfo.PostalCode, response.AddressInfo.PostalCode);
            //ValueCheck.Test("response.PhoneInfoData.phonePrefix", user.PhoneInfo.PhonePrefix, response.PhoneInfo.PhonePrefix);
            //ValueCheck.Test("response.PhoneInfoData.phoneNumber", user.PhoneInfo.PhoneNumber, response.PhoneInfo.PhoneNumber);
        }

        public static void VerifyUPSProfile(string expectedGamertag, ulong passportPuid)
        {
            XRLXeUpsGetProfile request = new XRLXeUpsGetProfile();
            XRLXeUpsGetProfileResponse response = new XRLXeUpsGetProfileResponse();            
            request.Puid = passportPuid; ;

            if (!request.Execute(out response)) throw new UnexpectedTestResultException(request.GetDumpString());
            if (request.XErr != HResult.S_OK) throw new UnexpectedTestResultException(request.GetDumpString());            
            UpsProfile xboxProfile = new UpsProfile(response.Profile);
            ValueCheck.Test("Gamertag from ups", expectedGamertag, xboxProfile.Gamertag);
        }

        public static void VerifyUserType(XRLXeGetUserType.UserTypeEnum expectedType, string gamertag)
        {
            XRLXeGetUserType request = new XRLXeGetUserType();
            XRLXeGetUserTypeResponse response = new XRLXeGetUserTypeResponse();
            request.Gamertag = gamertag;
            bool result = request.Execute(out response);
            ValueCheck.IsTrue(result, "Request should succeed");
            ValueCheck.TestHR("request.XErr", HResult.S_OK, request.XErr);
            ValueCheck.Test("response.UserType", (byte)expectedType, (byte)response.UserType);
        }

        public static void VerifyUserRecover(ulong expectedPassportPuid, ulong expectedPuid, string expectedGamertag)
        {            
            XRLXeRecoverAccount request = new XRLXeRecoverAccount();
            request.Request.signedPuid = PassportUtilities.GenerateSessionToken(expectedPassportPuid, request.Slot.Key);
            request.Request.machinePuid = MachineEditor.CreateNew(MachineType.Xbox360).Id;

            
            bool result = request.Execute();
            ValueCheck.Test("response.UserPuid", expectedPuid, request.Response.userPuid);
            ValueCheck.Test("response.Gamertag", expectedGamertag, request.Response.gamertag);
        }

        public static void VerifyPoints(uint expectedPoints, ulong puid)
        {
            XRLXeGetPointsBalance request = new XRLXeGetPointsBalance();
            XRLXeGetPointsBalanceResponse response;

            request.userPuid = puid;
            bool result = request.Execute(out response);
            ValueCheck.IsTrue(result, "Request should succeed");
            ValueCheck.TestHR("request.XErr", HResult.S_OK, request.XErr);
            ValueCheck.Test("response.PointsBalance", expectedPoints, response.PointsBalance);
        }

        public static string VerifyPaymentInstruments(ushort expectedCount, ulong puid)
        {
            XRLXeGetPaymentInstruments request = new XRLXeGetPaymentInstruments();
            XRLXeGetPaymentInstrumentsResponse response = new XRLXeGetPaymentInstrumentsResponse();

            request.UserPuid = puid;
            if (!request.Execute(out response))
                throw new Exception("GetPaymentInstrument failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new Exception(string.Format("GetPaymentInstrument returned Xerr=0x{0:x}: {1}", request.XErr, request.GetDumpString()));
            ValueCheck.Test("response.PaymentInstrumentCount", expectedCount, response.PaymentInstrumentCount);
            ValueCheck.Test("response.PaymentInstrumentType", (byte)PaymentInstrumentInfoEx.PaymentInstrumentTypeEnum.CreditCard, response.PaymentInstrumentInfo[0].PaymentInstrumentType);
            return response.PaymentInstrumentInfo[0].PaymentInstrumentId;
        }

        public static void GetUserWebInfo(ulong puid, out uint tier, out uint[] userPrivileges)
        {
            XRLXeGetUserWebInfo request = new XRLXeGetUserWebInfo();
            XRLXeGetUserWebInfoResponse response = new XRLXeGetUserWebInfoResponse();
            request.UserPuid = puid;
            if (!request.Execute(out response))
                throw new UnexpectedTestResultException("XeGetUserWebInfo failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(string.Format("XeGetUserWebInfo returned Xerr=0x{0:x}: {1}", request.XErr, request.GetDumpString()));
            tier = response.Tier;
            userPrivileges = response.UserPrivileges;
        }

        public static void VerifyUserWebInfo(uint expectedUserTier, UserPrivileges expectedPrivs, ulong puid)
        {
            uint tier;
            uint[] userPrivileges;
            GetUserWebInfo(puid, out tier, out userPrivileges);
            ValueCheck.Test("response.Tier", expectedUserTier, tier);

            UserPrivileges privs = new UserPrivileges(userPrivileges);
            if (!privs.Equals(expectedPrivs))
            {
                Global.RO.Error("Got privs: " + privs.ToStringAllPrivileges());
                Global.RO.Error("Expected privs: " + expectedPrivs.ToStringAllPrivileges());
                throw new UnexpectedTestResultException(string.Format("Unexpected privileges!"));
            }
        }

        public static List<SubscriptionData> GetUserSubscriptions(string query, ulong puid)
        {
            List<SubscriptionData> offers = new List<SubscriptionData>();

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.READORWRITE_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(puid);
                ws.CommandSql = query;
                
                WstDataReader dr = ws.Execute();
                while (dr.Read())
                {
                    SubscriptionData offer = new SubscriptionData();
                    offer.OfferId = (ulong)dr.GetInt64(0);
                    offer.StartDate = dr.GetDateTime(1);
                    offer.EndDate = dr.GetDateTime(2);
                    offers.Add(offer);
                }                
                dr.Close();
            }
            return offers;
        }

        public static void VerifySubscription(List<SubscriptionData> expectedSub, List<SubscriptionData> expectedSubH, ulong puid)
        {
            string query = "select bi_offer_id, dt_start_date, dt_end_date from t_subscriptions where bi_primary_puid = 0x" + puid.ToString("X") + " order by dt_start_date asc";
            List<SubscriptionData> subscriptionData = GetUserSubscriptions(query, puid);
            query = "select bi_offer_id, dt_start_date, dt_end_date from t_subscription_history where bi_user_puid = 0x" + puid.ToString("X") + " order by dt_start_date asc";
            List<SubscriptionData> subscriptionHistoryData = GetUserSubscriptions(query, puid);
                        
            for (int i = 0; i < subscriptionData.Count; i++ )
            {
                ValueCheck.Test("SubscriptionData[" + i + "].OfferId", expectedSub[i].OfferId, subscriptionData[i].OfferId);
                ValueCheck.Test("SubscriptionData[" + i + "].StartDate", expectedSub[i].StartDate.ToString(), subscriptionData[i].StartDate.ToString());
                ValueCheck.Test("SubscriptionData[" + i + "].EndDate", expectedSub[i].EndDate.ToString(), subscriptionData[i].EndDate.ToString());
            }
            for (int i = 0; i < subscriptionHistoryData.Count; i++)
            {
                ValueCheck.Test("SubscriptionData[" + i + "].OfferId", expectedSubH[i].OfferId, subscriptionHistoryData[i].OfferId);
                ValueCheck.Test("SubscriptionData[" + i + "].StartDate", expectedSubH[i].StartDate.ToString(), subscriptionHistoryData[i].StartDate.ToString());
                ValueCheck.Test("SubscriptionData[" + i + "].EndDate", expectedSubH[i].EndDate.ToString(), subscriptionHistoryData[i].EndDate.ToString());
            }
        }

        public static void VerifyAchievementsAndPlayedGames(uint expectedTitleId, ulong puid)
        {
            ServerTestFramework.LiveService.UserSettings.UserTitle[] titles = UserSetup.GetPlayedTitles(puid);
            ServerTestFramework.LiveService.Achievement.AchievementWD[] achievements = UserSetup.GetAchievementDetails(puid, expectedTitleId);

            ValueCheck.Test("PlayedTitleNum", 1, titles.Length);
            ValueCheck.Test("TitleId", expectedTitleId, titles[0].TitleId);
            int achievedCount = 0;
            for (int i = 0; i < achievements.Length; i++)
            {
                if ((achievements[i].Flags & 0x00030000) != 0)
                {
                    achievedCount++;
                }
            }
            ValueCheck.Test("AchievementsCount", 10, achievedCount);
        }
                
        public static void VerifyPassportLogin(string memberName, string memberPassword)
        {
            byte[] encryptedSessionKey = null;
            byte[] encryptedPassword = null;
            byte[] encryptedToken = null;
            XRLXePassportLogin request = new XRLXePassportLogin();
            XRLXePassportLoginResponse response = new XRLXePassportLoginResponse();
            // encrypt the parts we need for login.
            PassportTestClient passportTestClient = new PassportTestClient();
            passportTestClient.Init();
            passportTestClient.GenerateEncryptedLoginParts(memberPassword, out encryptedSessionKey, out encryptedPassword, out encryptedToken);
            // login with the member name
            request.PassportMemberName = memberName;
            request.EncryptedSessionKey = encryptedSessionKey;
            request.EncryptedPassword = encryptedPassword;
            request.EncryptedTokenRequest = encryptedToken;
            // try login.
            if (!request.Execute(out response)) throw new UnexpectedTestResultException("XePassportLogin failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK) throw new UnexpectedTestResultException(String.Format("XePassportLogin failed (XErr={0}: {1}", request.XErr, request.GetDumpString()));
            if (response.nonceLength == 0) throw new UnexpectedTestResultException(String.Format("XePassportLogin failed - nonceLength={0}", response.nonceLength));
            if (response.cipherValueLength == 0) throw new UnexpectedTestResultException(String.Format("XePassportLogin failed - cipherValueLenth={0}", response.cipherValueLength));

        }

        public static void VerifyTenure(int level, ulong puid)
        {
            XRLGetUserTenure request = new XRLGetUserTenure();
            XRLGetUserTenureResponse response = new XRLGetUserTenureResponse();

            request.UserPuid = puid;
            if (!request.Execute(out response))
                throw new UnexpectedTestResultException("XRLGetUserTenure failed: " + request.GetDumpString());
            ValueCheck.Test("TenureLevel", level, response.TenureLevel);
        }

        public static void SetPersonalPicture(byte[] pictureSetting, ulong puid)
        {
            //add gamer picture setting
            ServerTestFramework.LiveService.UserSettings.UserSetting[] newSettings = new ServerTestFramework.LiveService.UserSettings.UserSetting[1];

            newSettings[0] = new ServerTestFramework.LiveService.UserSettings.UserSetting(
                puid,
                xonline.common.protocol.ProfileDefs.XPROFILE_GAMERCARD_PERSONAL_PICTURE,
                pictureSetting,
                ServerTestFramework.LiveService.UserSettings.SettingSource.XSOURCE_NO_VALUE
                );

            SyncSettingsRequest ssReq = new SyncSettingsRequest();
            ssReq.Settings = newSettings;
            ssReq.TitleId = XOn.DASH_TITLE_ID;
            ssReq.UserId = puid;
            ssReq.Version = System.DateTime.UtcNow;
            ssReq.StartinIndex = 0;
            SyncSettingsResponse ssResponse = ssReq.Execute();
            if (ssReq.XErr != HResult.S_OK)
            {
                throw new UnexpectedTestResultException("SyncSettingsRequest returned error condition (0x" + ssReq.XErr.ToString("X") + "): " + ssReq.GetDumpString());
            }
        }

        public static void VerifyGamePicture(byte[] expectedPicture, ulong puid)
        {
            byte[] actualPicture = ProfileWS.StatsGetUserSettings(XOn.DASH_TITLE_ID, puid,
                xonline.common.protocol.ProfileDefs.XPROFILE_GAMERCARD_PERSONAL_PICTURE);
            if (!AvatarManifestHelpers.CompareByteArrays(actualPicture, expectedPicture))
            {
                throw new UnexpectedTestResultException("actualPicture != expectedPicture");
            }
        }
                
        private const string manifestFree
        
        public static void WriteAvatarAsset(ulong puid)
        {
            UserSetting[] settings = new UserSetting[1];
            int settingIDMaxSize = (int)((ProfileDefs.XPROFILE_GAMERCARD_AVATAR_INFO_1 >> 16) & 0x3FF);
            settings[0] = new UserSetting(puid, ProfileDefs.XPROFILE_GAMERCARD_AVATAR_INFO_1, AvatarManifestHelpers.HexToBytes(manifestFree));
                        
            SyncSettingsRequest req = new SyncSettingsRequest(XOn.XENON_DASH_TITLE_ID, puid, settings, DateTime.UtcNow);
            SyncSettingsResponse resp = req.Execute();
            if (resp.XError != HResult.S_OK)
                throw new UnexpectedTestResultException("UnExpected XError returned by server :" + resp.XError);
        }

        public static byte[] EnumAvatarAsset(ulong puid)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(puid);

                ws.CommandSql = @"select @vb_value = settings.vb_value
                              from dbo.t_user_settings settings
                              where settings.bi_user_puid = @bi_user_puid and settings.i_setting_id = @i_setting_id";
                ws.AddParameter("@bi_user_puid", puid);
                ws.AddParameter("@i_setting_id", ProfileDefs.XPROFILE_GAMERCARD_AVATAR_INFO_1);
                ws.Parameters.Add("@vb_value", System.Data.SqlDbType.VarBinary, 1000).Direction = System.Data.ParameterDirection.Output;

                ws.ExecuteNonQuery();

                object value = ws.Parameters["@vb_value"].Value;
                if (value == null || value == DBNull.Value)
                {
                    return null;
                }
                return (byte[])value;
            }
        }

        public static void VerifyAvatarAsset(ulong puid)
        {
            byte[] manifest = EnumAvatarAsset(puid);
            bool result = AvatarManifestHelpers.CompareByteArrays(manifest, AvatarManifestHelpers.HexToBytes(manifestFree));
            if (!result)
            {
                throw new UnexpectedTestResultException("Avatar does not match!");
            }
        }

        public static void MakePurchase(ulong puid, int languageId, byte countryId)
        {
            XRLXeOfferPurchase request = new XRLXeOfferPurchase((new XRLXeOfferPurchase()).SchemaVersion, false);

            request.UserPuid = puid;
            request.OfferID = Offers.GetBaseOfferId(Offers.BaseOffers.GoldPP1Month);
            request.LanguageID = (ushort)languageId;
            request.CountryID = countryId;
            request.Tier = (byte)UodbWS.GetUserTier(puid);
            request.PaymentType = (uint)PaymentTypeEnum.Token;
            request.BillingToken = Offers.GetBaseOfferPrepaidVoucherCode(ServerTestFramework.LiveService.Billing.Offers.BaseOffers.GoldPP1Month);


            if (!request.Execute())
                throw new UnexpectedTestResultException("XRLXeOfferPurchase() failed." + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeOfferPurchase returned XErr=0x{0:x}", request.XErr));
        }

        public static AuditInfo[] ExpectedAuditPoints(ulong userPuid)
        {
            // create a silver account
            string auditParams = string.Empty;
            Guid guid = Guid.NewGuid();
            AuditInfo infoFDApiCreateAcct = new AuditInfo(userPuid, guid, "xuacs", "XeCreateLiveAccount", "", auditParams);
            AuditInfo infoBdkCreateAcct = new AuditInfo(userPuid, guid, "bdk", "CreateAccount", "success", auditParams);
            AuditInfo infoBdkPurchaseOfferingEx = new AuditInfo(userPuid, guid, "bdk", "PurchaseOfferingEx", "success", auditParams);
            AuditInfo infoBdkProvisionServices = new AuditInfo(userPuid, guid, "bdk", "ProvisionServices", "success", auditParams);
            AuditInfo infoSprocCreateAcct = new AuditInfo(userPuid, guid, "xuacs", "dbo.p_xuacs_create_live_account", "success", auditParams);

            // Total 6 logs for gold user
            AuditInfo[] expectAuditInfos = new AuditInfo[] { infoFDApiCreateAcct, infoBdkCreateAcct, infoBdkPurchaseOfferingEx, infoBdkProvisionServices, 
                    infoSprocCreateAcct};
            return expectAuditInfos;
        }

        public static int GetBillingNotifications(ulong userPUID)
        {
            int count = 0;
            string sql = "SELECT COUNT(*) FROM t_user_billing_notifications WHERE bi_user_puid = " + userPUID;

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(userPUID);
                ws.CommandSql = sql;

                using (WstDataReader myDataReader = ws.Execute())
                {
                    if (myDataReader.Read())
                    {
                        count = (int)myDataReader.GetInt32(0);                        
                    }

                    myDataReader.Close();
                }                
            }
            return count;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\CallCopyCommand.cs ===
using System;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Web.Presence;
using live.common;
using xonline.common.user;
using xonline.common.tools.console;
using xonline.common.billing.migrateuser;
using HResult = xonline.common.service.HResult;

namespace xonline.tools.migrateusertool
{
    [TestGroup, Owner("yixuanl"), Description("Make sure you have MigrateUser.exe"), TestFrequency("Manual"), TestCasePriority(3), EnvRequirement("XblobOnly")]
    public class CallCopyCommandTest : MigrateUserToolTest
    {        
        public static User CallMigrateUser(string gamertag)
        {
            string newGamertag = live.common.RandomEx.GlobalRandGen.GenerateRandomString("RW", 15);

            string file = "MigrateUser" + Guid.NewGuid().ToString() + ".xml";
            Run(String.Format("/action:copy /gamertag:{0} /newGamertag:{1}", gamertag, newGamertag));
            User newUser = new User();
            xonline.common.service.HResult hr = newUser.LoadFromGamerTag(newGamertag);
            ValueCheck.TestHR("request.XErr", HResult.S_OK, hr);
            return newUser;
        }

        [TestCase, TestCasePriority(2)]
        class P_Mainline : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser();
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\Copy.cs ===
using System;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Web.Presence;
using xonline.common.user;
using xonline.common.tools.console;
using xonline.common.billing.migrateuser;

namespace xonline.tools.migrateusertool
{
    [TestGroup, Owner("yixuanl"), Description("Tests for MigratedUserTool.Copy"), TestFrequency("Manual"), TestCasePriority(2), EnvRequirement("XblobOnly")]
    public class CopyTest : MigrateUserToolTest
    {
        public static User CallMigrateUser(string gamertag)
        {
            string newUserEmail = "";
            string newUserPassword = "";
            string newGamertag = live.common.RandomEx.GlobalRandGen.GenerateRandomString("CP", 15);
            MigrateUser.Copy(gamertag, ref newGamertag, false, ref newUserEmail, ref newUserPassword);
            User newUser = new User();
            xonline.common.service.HResult hr = newUser.LoadFromGamerTag(newGamertag);
            ValueCheck.TestHR("request.XErr", HResult.S_OK, hr);
            Global.RO.Info("New user email: " + newUserEmail + " and new user password: " + newUserPassword);
            return newUser;
        }

        [TestCase, TestCasePriority(3)]
        class N_CopyNonExistUser : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = new XeUser();

                string newGamertag = live.common.RandomEx.GlobalRandGen.GenerateRandomString("CP", 15);
                string newUserEmail = "";
                string newUserPassword = "";

                ResultCode = TEST_RESULTS.FAILED;
                try
                {
                    MigrateUser.Copy(user.Gamertag, ref newGamertag, false, ref newUserEmail, ref newUserPassword);
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent ex)
                {
                    if (ex.HResult != HResult.XONLINE_E_MIGRATEUSER_USER_DOES_NOT_EXIST_ERROR)
                    {
                        throw;
                    }
                    Global.RO.Info("Got expected exception! " + ex.Message);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

        [TestCase, TestCasePriority(3)]
        class N_CopyToExistUser : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser();                
                string newUserEmail = "";
                string newUserPassword = "";

                ResultCode = TEST_RESULTS.FAILED;
                try
                {
                    MigrateUser.Copy(user.Gamertag, ref user.Gamertag, false, ref newUserEmail, ref newUserPassword);
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent ex)
                {
                    if (ex.HResult != HResult.XONLINE_E_MIGRATEUSER_USER_ALREADY_EXISTS_ERROR)
                    {
                        throw;
                    }
                    Global.RO.Info("Got expected exception! " + ex.Message);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    throw;
                }            
            }
        }

        [TestCase, TestCasePriority(3)]
        class N_CopyToSameUser : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser();
                string newUserEmail = "";
                string newUserPassword = "";

                ResultCode = TEST_RESULTS.FAILED;
                try
                {
                    string noNewGamertagProvided = "";
                    MigrateUser.Copy(user.Gamertag, ref noNewGamertagProvided, false, ref newUserEmail, ref newUserPassword);
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent ex)
                {
                    if (ex.HResult != HResult.XONLINE_E_MIGRATEUSER_USER_ALREADY_EXISTS_ERROR)
                    {
                        throw;
                    }
                    Global.RO.Info("Got expected exception! " + ex.Message);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_migrateusertest_none_12.4.56.0_none_033f8b03b91f95af
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=migrateusertest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.manifest
XP_MANIFEST_PATH=manifests\msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.cat
XP_CATALOG_PATH=manifests\msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.cat
XP_PAYLOAD_PATH=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=migrateusertest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\mmftest\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\CallReadAndWriteCommand.cs ===
using System;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Web.Presence;
using live.common;
using xonline.common.user;
using xonline.common.tools.console;
using xonline.common.billing.migrateuser;
using HResult = xonline.common.service.HResult;

namespace xonline.tools.migrateusertool
{
    [TestGroup, Owner("yixuanl"), Description("Make sure you have MigrateUser.exe"), TestFrequency("Manual"), TestCasePriority(3), EnvRequirement("XblobOnly")]
    public class CallReadAndWriteCommandTest : MigrateUserToolTest
    {        
        public static User CallMigrateUser(string gamertag)
        {
            string newGamertag = live.common.RandomEx.GlobalRandGen.GenerateRandomString("RW", 15);

            string file = "MigrateUser" + Guid.NewGuid().ToString() + ".xml";
            Run(String.Format("/action:read /gamertag:{0} /file:{1}", gamertag, file));
            Run(String.Format("/action:write /gamertag:{0} /file:{1}", newGamertag, file));
            User newUser = new User();
            xonline.common.service.HResult hr = newUser.LoadFromGamerTag(newGamertag);
            ValueCheck.TestHR("request.XErr", HResult.S_OK, hr);
            return newUser;
        }

        [TestCase, TestCasePriority(2)]
        class P_Mainline : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonSilverUser();
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_migrateusertest_none_12.4.56.0_none_033f8b03b91f95af
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=migrateusertest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.manifest
XP_MANIFEST_PATH=manifests\msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.cat
XP_CATALOG_PATH=manifests\msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb.cat
XP_PAYLOAD_PATH=msil_migrateusertest_no-public-key_12.4.56.0_x-ww_5614bceb
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=migrateusertest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\ReadAndWrite.cs ===
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Security.Cryptography;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using ServerTestFramework.WebWidget;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.Web.Presence;
using xonline.common.service;
using xonline.common.tools.console;
using xonline.common.billing.migrateuser;
using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;
using xonline.common.config;
using HResult = xonline.common.service.HResult;
using User = xonline.common.user.User;
using XOn = ServerTestFramework.LiveService.XOn;

using live.server;

namespace xonline.tools.migrateusertool
{
    /// <summary>
    /// How to run this suite?
    /// copy everything under stftests to your xblob, copy drop debug\tools\migrateuser\* to your xblob, under stftests.
    /// Make sure you have "Xblob" environment defined in your stf.xml.
    /// run through stfgui.exe
    /// </summary>
    [TestGroup, Owner("yixuanl"), Description("Tests for MigratedUserTool.ReadAndWrite"), TestFrequency("Manual"), TestCasePriority(3), EnvRequirement("XblobOnly")]
    public class ReadAndWriteTest : MigrateUserToolTest
    {
        public static User CallMigrateUser(string gamertag)
        {            
            string newGamertag = live.common.RandomEx.GlobalRandGen.GenerateRandomString("RW", 15);
            string xml = MigrateUser.Read(gamertag, false);
            
            ////Switch to a new environment
            ResetEnvironment(m_NewEnvironment);

            string newUserEmail = "";
            string newUserPassword = "";
            MigrateUser.Write(ref newGamertag, xml, ref newUserEmail, ref newUserPassword);
            Global.RO.Info("New user email: " + newUserEmail + " and new user password: " + newUserPassword);
            User newUser = new User();
            HResult hr = newUser.LoadFromGamerTag(newGamertag);
            ValueCheck.TestHR("request.XErr", HResult.S_OK, hr);
            return newUser;
        }

        public static PaymentInstrumentInfoEx[] GetPaymentInstruments(ulong xuid)
        {
            XRLXeGetPaymentInstruments req = new XRLXeGetPaymentInstruments();
            XRLXeGetPaymentInstrumentsResponse resp = new XRLXeGetPaymentInstrumentsResponse();
            req.UserPuid = xuid;

            if (!req.Execute(out resp))
                throw new UnexpectedTestResultException("XRLXeGetPaymentInstruments failed: " + req.GetDumpString());
            if (req.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeGetPaymentInstruments returned XErr=0x{0:x}", req.XErr));

            return resp.PaymentInstrumentInfo;
        }

        public static void AddPaymentInstrument(ulong xuid, XRLXeAddPaymentInstrument.PaymentInstrumentTypeEnum piType)
        {
            XRLXeAddPaymentInstrument req = new XRLXeAddPaymentInstrument();
            XRLXeAddPaymentInstrumentResponse resp = new XRLXeAddPaymentInstrumentResponse();
            req.UserPuid = xuid;

            switch (piType)
            {
                case XRLXeAddPaymentInstrument.PaymentInstrumentTypeEnum.CreditCard:
                    {
                        req.PaymentInstrumentType = (byte)XRLXeAddPaymentInstrument.PaymentInstrumentTypeEnum.CreditCard;
                        req.CreditCardInfo = new CreditCardInfoData();
                        req.CreditCardInfo.AccountHolderName = "John Connor";
                        req.CreditCardInfo.AccountNumber = CreditCardRandomizer.GetRandomAccountNumber("visa");
                        req.CreditCardInfo.CardType = (byte)CreditCardInfoData.CreditCardType.Visa;
                        req.CreditCardInfo.CcvNumber = "007";
                        req.CreditCardInfo.ExpirationDate = DateTime.UtcNow.AddYears(3);
                    }
                    break;

                default:
                    throw new UnexpectedTestResultException("unexpected payment instrument type: " + piType);
            }

            if (!req.Execute(out resp))
                throw new UnexpectedTestResultException("XRLXeAddPaymentInstrument failed: " + req.GetDumpString());
            if (req.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeAddPaymentInstrument returned XErr=0x{0:x}", req.XErr));
        }

        public static string GenerateRandomString(int length)
        {
            RandomNumberGenerator rand = RandomNumberGenerator.Create();
            byte[] randBytes = new byte[length];
            rand.GetBytes(randBytes);
            return String.Join("", BitConverter.ToString(randBytes).Split('-'));
        }

        public static live.common.PassportInfo CreatePassportUser()
        {
            live.client.Xbox360Client client = new live.client.Xbox360Client();
            live.common.PassportInfo ppUser = new live.common.PassportInfo();
            ppUser.PassportType = live.common.PassportType.Real;
            ppUser.BirthDate = DateTime.Now - TimeSpan.FromDays(42 * 365);
            live.common.PassportUtils.CreatePassportAccount(client, ppUser);
            return ppUser;
        }

        public static live.common.PassportInfo CreatePassportUser(string passportMemberName, string password)
        {
            live.client.Xbox360Client client = new live.client.Xbox360Client();
            live.common.PassportInfo ppUser = new live.common.PassportInfo();
            ppUser.PassportType = live.common.PassportType.Real;
            ppUser.MemberName = passportMemberName;
            ppUser.Password = password;
            ppUser.BirthDate = DateTime.Now - TimeSpan.FromDays(42 * 365);
            live.common.PassportUtils.CreatePassportAccount(client, ppUser);
            return ppUser;
        }

        public static XeUser CreateUserWithSpecificPassportInfo(string passportMemberName, string passportPassword)
        {
            XeUser user = new XeUser(true);
            user.PassportPassword = passportPassword;
            user.PassportMemberName = passportMemberName;

            if (user.Create() == 0) throw new UnexpectedTestResultException("XeUser.Create() failed: " + user.GetDumpString());
            UodbWS.WaitForQueueRemoval(user.UserPuid, false);

            return user;
        }

        public static ulong CreateWholeSaleUser()
        {
            live.common.PassportInfo passportUser = CreatePassportUser();
            byte[]  userPassportSessionToken = passportUser.SessionToken;
            ulong userPassportId = PassportUtilities.GetPuidFromSessionToken(userPassportSessionToken);

            XRLXeCreateWholesaleAccount request = new XRLXeCreateWholesaleAccount();
            XRLXeCreateWholesaleAccountResponse response = new XRLXeCreateWholesaleAccountResponse();

            request.MachinePuid = 0xfa00000022224444;  // xenon machines must start with 0xfa00
            request.offlineXuid = 0;
            request.WholesalePartnerId = 54;
            request.FirstName = "Major";
            request.LastName = "Nelson";
            request.Gamertag = "CT" + GenerateRandomString(10);
            request.SignedUserPassportPuid = passportUser.SessionToken;
            request.SignedOwnerPassportPuid = passportUser.SessionToken;
            request.OfferId = Offers.GetBaseOfferId(Offers.BaseOffers.GoldBobo);
            request.Birthdate = new DateTime(1970,1,1);
            request.Email = "CT" + GenerateRandomString(12) + "@xboxtest.com";
            request.LanguageId = 10;
            request.CountryId = 20;
            request.ParentalControlGroupId = 0;
            request.PaymentInstrumentType = (byte) 3; //PaymentInstrumentTypeEnum.Wholesale;

            request.WholesaleInfo = new WholesaleInfoData();
            request.WholesaleInfo.AccountHolderName   = string.Format("{0} {1}", request.FirstName, request.LastName);
            request.WholesaleInfo.ExternalReferenceId = GenerateRandomString(12);
            request.WholesaleInfo.WholesalePartner    = "CHINATELCOM Wireline";
            request.WholesaleInfo.EncryptedPassword   = string.Empty;

            request.AddressInfo = new AddressInfoData();
            request.AddressInfo.Street1     = "22 Hankou Road";
            request.AddressInfo.City        = "Nanjing";
            request.AddressInfo.State       = "Jiangsu";
            request.AddressInfo.PostalCode  = "210093";
            
            request.PhoneInfo   = new PhoneInfoData();
            request.PhoneInfo.PhonePrefix   = "425";
            request.PhoneInfo.PhoneNumber   = "555 1212";

            if (!request.Execute(out response))
                throw new UnexpectedTestResultException("XRLXeCreateWholesaleAccount failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeCreateWholesaleAccount returned XErr=0x{0:x}", request.XErr));

            return response.UserPuid;
        }

        [TestCase, TestCasePriority(1)]
        class P_Mainline : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser(XeUser.Country.US, false);
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyUserRecover(newUser.PassportPuid, newUser.Puid, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                ValueCheck.Test("number of payment instruments", 0, GetPaymentInstruments(newUser.Puid).Length);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, Ignore, TestCasePriority(3)]
        class P_Wholesale : UserTestBase
        {
            override protected void Execute()
            {
                User user = new User();
                user.Load(CreateWholeSaleUser());
                User newUser = CallMigrateUser(user.GamerTag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyUserRecover(newUser.PassportPuid, newUser.Puid, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                PaymentInstrumentInfoEx[] paymentInstruments = GetPaymentInstruments(newUser.Puid);
                ValueCheck.Test("number of payment instruments", 1, paymentInstruments.Length);
                ValueCheck.Test("payment instrument type", (byte)PaymentInstrumentInfoEx.PaymentInstrumentTypeEnum.Wholesale, paymentInstruments[0].PaymentInstrumentType);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_UserWithCC : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldCCUser();
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyUserRecover(newUser.PassportPuid, newUser.Puid, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                PaymentInstrumentInfoEx[] paymentInstruments = GetPaymentInstruments(newUser.Puid);
                ValueCheck.Test("number of payment instruments", 1, paymentInstruments.Length);
                ValueCheck.Test("payment instrument type", (byte)PaymentInstrumentInfoEx.PaymentInstrumentTypeEnum.CreditCard, paymentInstruments[0].PaymentInstrumentType);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_TokenUserWithCC : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser(XeUser.Country.US, false);
                AddPaymentInstrument(user.UserPuid, XRLXeAddPaymentInstrument.PaymentInstrumentTypeEnum.CreditCard);
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyUserRecover(newUser.PassportPuid, newUser.Puid, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                PaymentInstrumentInfoEx[] paymentInstruments = GetPaymentInstruments(newUser.Puid);
                ValueCheck.Test("number of payment instruments", 1, paymentInstruments.Length);
                ValueCheck.Test("payment instrument type", (byte)PaymentInstrumentInfoEx.PaymentInstrumentTypeEnum.CreditCard, paymentInstruments[0].PaymentInstrumentType);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_UserWithTwoCCs : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldCCUser();
                AddPaymentInstrument(user.UserPuid, XRLXeAddPaymentInstrument.PaymentInstrumentTypeEnum.CreditCard);
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyUserRecover(newUser.PassportPuid, newUser.Puid, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                PaymentInstrumentInfoEx[] paymentInstruments = GetPaymentInstruments(newUser.Puid);
                ValueCheck.Test("number of payment instruments", 2, paymentInstruments.Length);
                ValueCheck.Test("payment instrument type", (byte)PaymentInstrumentInfoEx.PaymentInstrumentTypeEnum.CreditCard, paymentInstruments[0].PaymentInstrumentType);
                ValueCheck.Test("payment instrument type", (byte)PaymentInstrumentInfoEx.PaymentInstrumentTypeEnum.CreditCard, paymentInstruments[1].PaymentInstrumentType);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_SilverAccount : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonSilverUser();
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyUserRecover(newUser.PassportPuid, newUser.Puid, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateMinorAccount : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.MinorUser();
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyUserRecover(newUser.PassportPuid, newUser.Puid, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);


                string parentMemberName = null;
                string memberName = GetPassportMemberName(newUser.Puid, out parentMemberName);
                if (String.IsNullOrEmpty(memberName) || String.IsNullOrEmpty(parentMemberName))
                {
                    throw new UnexpectedTestResultException("child passport account or parent passport account should not be empty");
                }
                if (memberName == parentMemberName)
                {
                    throw new UnexpectedTestResultException("child passport account should not equal to parent passport account");
                }
                string memberPassword = "supersecret";
                VerifyPassportLogin(parentMemberName, memberPassword);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateFriends : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user1 = XbosUser.XenonSilverUser();
                XeUser user2 = XbosUser.XenonSilverUser();
                XeUser user3 = XbosUser.XenonSilverUser();
                // Let the fake SG know where to send state updates
                ServerTestFramework.LiveService.FakeSG.GlobalFakeSG.FakeSG.SetStateEndpoint(Global.XEnv.GetVirtualInterface(VirtualInterface.xpnfd_presence).ToString());
                UserSetup.MakeFriend(user1, user2);
                UserSetup.MakeFriend(user1, user3);

                User newUser = CallMigrateUser(user1.Gamertag);
                WCPresence wp = new WCPresence();
                uint sec = 0;
                FriendEx[] myFriends = wp.GetFriendsEx(newUser.Puid, 1, out sec);
                ValueCheck.Test("Friends Count", myFriends.Length, 2);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateMinorPrivileges : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.MinorUser();

                ArrayList i = new ArrayList(0), j = new ArrayList(0);
                i.Add(live.common.Privilege.CommunicationsFriendsOnly);
                UserSetup.UpdatePrivileges(user, i, j);
                uint tier;
                uint[] userPrivileges;
                GetUserWebInfo(user.UserPuid, out tier, out userPrivileges);
                User newUser = CallMigrateUser(user.Gamertag);

                UserPrivileges expectedPrivilege = new UserPrivileges(userPrivileges); 
                VerifyUserWebInfo((byte)TierEnum.Silver, expectedPrivilege, newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigratePrivileges : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser();

                ArrayList i = new ArrayList(0), j = new ArrayList(0);
                j.Add(live.common.Privilege.ShareFriendsListFriendsOnly);
                UserSetup.UpdatePrivileges(user, i, j);
                uint tier;
                uint[] userPrivileges;
                GetUserWebInfo(user.UserPuid, out tier, out userPrivileges);
                User newUser = CallMigrateUser(user.Gamertag);
                
                UserPrivileges expectedPrivilege = new UserPrivileges(userPrivileges);                                
                VerifyUserWebInfo((byte)TierEnum.Gold, expectedPrivilege, newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateAchievementsAndPlayedgames : UserTestBase
        {
            override protected void Execute()
            {
                uint titleId = 0x584107F6;
                uint[] titles = new uint[1];
                titles[0] = titleId;
                XeUser user = XbosUser.XenonSilverUser(); 
                
                UserSetup.AddPlayedTitles(user.UserPuid, titles);
                uint[] standardAchievements = new uint[10];
                for (uint i = 0; i < 10; ++i) { standardAchievements[i] = i + 1; }
                try
                {
                    UserSetup.AddEarnedAchievements(user.UserPuid, titleId, standardAchievements);
                }
                catch
                {
                    Global.RO.Warn("-----------------------------------------------------------------------------");
                    Global.RO.Warn("| Attempt to add Achievements Failed!  Did you prop the title (0x{0:X8})? |", titleId);
                    Global.RO.Warn("-----------------------------------------------------------------------------");
                    throw;
                }

                User newUser = CallMigrateUser(user.Gamertag);
                VerifyAchievementsAndPlayedGames(titleId, newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateSubscriptionsAndTenure : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldCCUser();
                //Add purchase
                XbosOffer.RewardUSUser1600Points(user);
                //Modify tenure

                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.PartitionType = WstPartitionType.Logical;
                    int hashValue = ws.SetHashVal(user.UserPuid);

                    ws.CommandSql = @"update t_subscription_history set dt_start_date = @dt_start_date";
                    ws.AddParameter("@dt_start_date", DateTime.Now.AddYears(-1));                    
                    ws.ExecuteNonQuery();
                }

                string query = "select bi_offer_id, dt_start_date, dt_end_date from t_subscriptions where bi_primary_puid = 0x" + user.UserPuid.ToString("X") + " order by dt_start_date asc";
                List<SubscriptionData> subscriptionData = GetUserSubscriptions(query, user.UserPuid);
                query = "select bi_offer_id, dt_start_date, dt_end_date from t_subscription_history where bi_user_puid = 0x" + user.UserPuid.ToString("X") + " order by dt_start_date asc";
                List<SubscriptionData> subscriptionHistoryData = GetUserSubscriptions(query, user.UserPuid);
                
                User newUser = CallMigrateUser(user.Gamertag);
                VerifySubscription(subscriptionData, subscriptionHistoryData, newUser.Puid);
                VerifyTenure(1, newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateGamerPicture : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser();
                byte[] pictureSetting = new byte[5] { 0x01, 0x02, 0x03, 0x02, 0x01 };
                SetPersonalPicture(pictureSetting, user.UserPuid);
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyGamePicture(pictureSetting, newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigratePaymentInstrumentAndPurchase : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonSilverUser();
                user.AddPaymentInstrumentVisa();
                User newUser = CallMigrateUser(user.Gamertag);
                string paymentInstrumentId = VerifyPaymentInstruments(1, newUser.Puid);
                MakePurchase(newUser.Puid, newUser.LanguageId, newUser.CountryId);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigratePassport : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser();
                // create the ups profile
                UpsProfile profile = new UpsProfile();
                profile.FirstName = user.FirstName;
                profile.LastName = user.LastName;
                profile.BirthDate = user.BirthDate;
                profile.Street1 = user.AddressInfo.Street1;
                profile.Street2 = user.AddressInfo.Street2;
                profile.City = user.AddressInfo.City;
                profile.County = user.AddressInfo.District;
                profile.Region = user.AddressInfo.State;
                profile.PostalCode = user.AddressInfo.PostalCode;
                profile.Country = UpsProfile.CountryCodeFromCountryId(user.CountryId);
                profile.UpdateUpsProfile(user.PassportUserPuid);
                // need to process these seperately from the others.
                profile = new UpsProfile();
                profile.Email = user.PassportMemberName;
                profile.PhonePrefix = user.PhoneInfo.PhonePrefix;
                profile.PhoneNumber = user.PhoneInfo.PhoneNumber;
                profile.PhoneExtension = user.PhoneInfo.PhoneExtension;
                profile.UpdateUpsProfile(user.PassportUserPuid);

                User newUser = CallMigrateUser(user.Gamertag);
                string parentMemberName = null;
                string memberName = GetPassportMemberName(newUser.Puid, out parentMemberName);

                string memberPassword = "supersecret";
                VerifyPassportLogin(memberName, memberPassword);
                //VerifyUPSProfile(newUser.GamerTag, newUser.PassportPuid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateMinorPassport : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.MinorUser();
                User newUser = CallMigrateUser(user.Gamertag);

                string parentMemberName = null;
                string memberName = GetPassportMemberName(newUser.Puid, out parentMemberName);
                string memberPassword = "supersecret";
                if (memberName == parentMemberName)
                {
                    throw new UnexpectedTestResultException("ParentMemberName should not be the same as ChildMemberName!");
                }

                VerifyPassportLogin(memberName, memberPassword);                
                VerifyPassportLogin(parentMemberName, memberPassword);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateXboxComUser : UserTestBase
        {
            override protected void Execute()
            {
                ulong passportPuid;
                ulong userPuid = UacsCommon.CreateXboxComUser((byte)XeUser.Country.US, (ushort)XeUser.Language.en, out passportPuid);
                User user = new User();
                user.Load(userPuid);

                try
                {
                    User newUser = CallMigrateUser(user.GamerTag);
                    throw new UnexpectedTestResultException("MigrateUser.Write didn't fail!");
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent e)
                {
                    if (e.HResult == HResult.XONLINE_E_MIGRATEUSER_FAILED_TO_READ_XML_ERROR
                        && e.Message == "Failed to read user from file: Unsupported account type for write: 'XBOX.COM'")
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        throw;
                    }
                }
                finally
                {
                    ResetEnvironment(m_OrgEnvironment);
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateXbox1User : UserTestBase
        {
            override protected void Execute()
            {
                // create an xbox1 user
                Owner owner = UACS.GenerateOwner();
                if (owner.Create() == 0) throw new UnexpectedTestResultException("Owner.Create() failed: " + owner.GetDumpString());
                Global.RO.Info("owner 0x{0:X} created.", owner.UserPuid);
                int c = 0;
                while (UodbWS.IsUserQueued(owner.UserPuid) && c < 200)
                {
                    c++;
                    System.Threading.Thread.Sleep(100);
                }
                if (UodbWS.IsUserQueued(owner.UserPuid)) throw new UnexpectedTestResultException("User never left queue.");

                try
                {
                    User newUser = CallMigrateUser(owner.gamertag);
                    throw new UnexpectedTestResultException("MigrateUser.Write didn't fail!");
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent e)
                {
                    if (e.HResult == HResult.XONLINE_E_MIGRATEUSER_FAILED_TO_READ_XML_ERROR
                        && e.Message == "Failed to read user from file: Unsupported account type for write: 'XBOX1'")
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        throw;
                    }
                }
                finally
                {
                    ResetEnvironment(m_OrgEnvironment);
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigratewithInvalidUserPassport : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser(XeUser.Country.US, false);
                xonline.common.billing.PassportClientBase pp = xonline.common.billing.PassportClientGlobal.Global;
                pp.DeleteCredential(user.PassportUserPuid);

                User newUser = CallMigrateUser(user.Gamertag);

                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                if (UodbWS.GetUserProperty(newUser.Puid, "ti_invalid_user_passport") != "1")
                {
                    throw new UnexpectedTestResultException("MigrateUser should have set ti_invalid_user_passport to one! ... whatsupwitdat?");
                }
                try
                {                    
                    xonline.common.billing.PassportHelper.GetPassportMemberName(newUser.PassportPuid);
                    throw new UnexpectedTestResultException("GetPassportMemberName didn't fail!");
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent e)
                {
                    if (e.HResult == HResult.XONLINE_E_PASSPORT_INVALID_ID)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        throw;
                    }
                }
                finally
                {
                    ResetEnvironment(m_OrgEnvironment);
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigratewithInvalidOwnerPassport : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.MinorUser();

                xonline.common.billing.PassportClientBase pp = xonline.common.billing.PassportClientGlobal.Global;
                pp.DeleteCredential(user.PassportOwnerPuid);

                User newUser = CallMigrateUser(user.Gamertag);

                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                xonline.common.billing.PassportHelper.GetPassportMemberName(newUser.PassportPuid);
                try
                {
                    xonline.common.billing.PassportHelper.GetPassportMemberName(newUser.OwnerPassportPuid);
                    throw new UnexpectedTestResultException("GetPassportMemberName didn't fail!");
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent e)
                {
                    if (e.HResult == HResult.XONLINE_E_PASSPORT_INVALID_ID)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        throw;
                    }
                }
                finally
                {
                    ResetEnvironment(m_OrgEnvironment);
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigratewithInvalidUserOwnerPassport : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.MinorUser();

                xonline.common.billing.PassportClientBase pp = xonline.common.billing.PassportClientGlobal.Global;
                pp.DeleteCredential(user.PassportOwnerPuid);
                pp.DeleteCredential(user.PassportUserPuid);

                User newUser = CallMigrateUser(user.Gamertag);

                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);
                if (UodbWS.GetUserProperty(newUser.Puid, "ti_invalid_user_passport") != "1")
                {
                    throw new UnexpectedTestResultException("MigrateUser should have set ti_invalid_user_passport to one! ... whatsupwitdat?");
                }
                try
                {
                    xonline.common.billing.PassportHelper.GetPassportMemberName(newUser.PassportPuid);
                    throw new UnexpectedTestResultException("GetPassportMemberName didn't fail for user!");
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent e)
                {
                    if (e.HResult == HResult.XONLINE_E_PASSPORT_INVALID_ID)
                    {
                        try
                        {
                            xonline.common.billing.PassportHelper.GetPassportMemberName(newUser.OwnerPassportPuid);
                            throw new UnexpectedTestResultException("GetPassportMemberName didn't fail for owner!");
                        }
                        catch (xonline.common.service.XRLExceptionWithoutEvent innerE)
                        {
                            if (innerE.HResult == HResult.XONLINE_E_PASSPORT_INVALID_ID)
                            {
                                ResultCode = TEST_RESULTS.PASSED;
                            }
                            else
                            {
                                throw;
                            }
                        }
                    }
                    else
                    {
                        throw;
                    }
                }
                finally
                {
                    ResetEnvironment(m_OrgEnvironment);
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateUserwithForceRenameUserPassport : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = CreateUserWithSpecificPassportInfo("MigrateUser" + Guid.NewGuid().ToString() + "@xbltest.com", "supersecret");
                xonline.common.billing.PassportClientBase pp = xonline.common.billing.PassportClientGlobal.Global;
                string passportMemberName = xonline.common.billing.PassportHelper.GetPassportMemberName(user.PassportUserPuid);
                pp.ForceCredentialRename(user.PassportUserPuid);
                live.common.PassportInfo activePassportUser = CreatePassportUser(passportMemberName,"verysupersecret");

                User newUser = CallMigrateUser(user.Gamertag);

                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                VerifyUserType(XRLXeGetUserType.UserTypeEnum.XenonUser, newUser.GamerTag);
                VerifyAccountInfo(user, newUser.Puid);

                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateBillingNotifications : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser();
                BillingNotificationHelpers.AddUserBillingNotificationCCDecline(user.UserPuid, System.Guid.NewGuid(), System.DateTime.UtcNow, 0, 1, 2345, 2);
                BillingNotificationHelpers.AddUserBillingNotificationSubscriptionExpire(user.UserPuid, System.Guid.NewGuid(), System.DateTime.UtcNow, 0, System.DateTime.UtcNow + new System.TimeSpan(30, 0, 0, 0));
                
                User newUser = CallMigrateUser(user.Gamertag);    
                int count = GetBillingNotifications(newUser.Puid);
                ValueCheck.Test("GetBillingNotifications.Count", 2, count);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateUserInOtherRegion : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser(XeUser.Country.FR, false);
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateUserNeedsMaintainence : UserTestBase
        {
            override protected void Execute()
            {
                XeUser xeuser = XbosUser.XenonGoldUser();
                User user = new User();
                user.Load(xeuser.UserPuid);
                user.SuspensionLength = 14;
                user.AccountResumeDate = DateTime.UtcNow.AddDays(user.SuspensionLength);
                user.VoiceBanLength = 14;
                user.VoiceResumeDate = DateTime.UtcNow.AddDays(user.VoiceBanLength);
                user.NameChangeRequired = 1;
                DateTime expectedAcceptedTOSDate = new DateTime(1999, 12, 31);
                user.AcceptedTOSDate = expectedAcceptedTOSDate;
                user.Save();

                User newUser = CallMigrateUser(xeuser.Gamertag);
                UserInfo uinfo = null;
                bool ret = UodbWS.GetUserInfo(newUser.Puid, out uinfo);
                if (!ret)
                {
                    throw new UnexpectedTestResultException("Call to GetUserInfo() failed.");
                }
                int expectedBanLength = 24 * 14;
                int banLength = (int)(uinfo.suspendedUntil - DateTime.UtcNow).TotalHours;
                if (banLength != expectedBanLength - 1 && banLength != expectedBanLength)
                {
                    throw new UnexpectedTestResultException("Expected a ban time of " + expectedBanLength + " hours, got " + banLength);
                }

                banLength = (int)(uinfo.voiceBannedUntil - DateTime.UtcNow).TotalHours;
                if (banLength != expectedBanLength - 1 && banLength != expectedBanLength)
                {
                    throw new UnexpectedTestResultException("Expected a voice ban time of " + expectedBanLength + " hours, got " + banLength);
                }
                if (uinfo.nameChangeRequired != 1)
                {
                    throw new UnexpectedTestResultException("Expected a name chagne of 1, got " + uinfo.nameChangeRequired);
                }
                if (DateTime.Compare(uinfo.acceptedTOS, expectedAcceptedTOSDate) != 0)
                {
                    throw new UnexpectedTestResultException("Expected a AcceptedTOSDate of " + expectedAcceptedTOSDate.ToString()
                    + ", got " + uinfo.acceptedTOS.ToString());
                }
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateGraduateUser : UserTestBase
        {
            override protected void Execute()
            {                
                XeUser xeuser = XbosUser.JuvenileUser();
                User user = new User();
                user.Load(xeuser.UserPuid);                
                DateTime birthDate = DateTime.Now.AddYears(-22);
                user.Birthdate = birthDate;
                user.Save();
                
                User newUser = CallMigrateUser(xeuser.Gamertag);
                VerifyGraduation(newUser.Puid, newUser.GamerTag);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_MigrateAvatar : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldCCUser(Offers.BaseOffers.GoldCC1Year, 0, false);
                                
                WriteAvatarAsset(user.UserPuid);
                User newUser = CallMigrateUser(user.Gamertag);
                VerifyAvatarAsset(newUser.Puid);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_User_In_Billing_Queue : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = new XeUser(true);
                // force account to be queued initially
                user.m_request.CustomHeader = ServerTestFramework.Utilities.BehaviorInjection.AddScsFailure("CreateAccount", "BDK_E_UNKNOWN_SERVER_FAILURE", false);
                // city/zip mismatch ensures account can't be dequeued before
                // before the purchase call is made
                user.AddressInfo.City = "Redmond";
                user.AddressInfo.PostalCode = "99578";
                ValueCheck.TestNonZero("UserPuid", user.Create());
                if (UodbWS.IsUserQueued(user.UserPuid))
                    Global.RO.Info("User is in queued state.");

                User newUser = CallMigrateUser(user.Gamertag);
                VerifyUserLogon(newUser.GamerTag, newUser.Puid);
                ValueCheck.Test("number of payment instruments", 0, GetPaymentInstruments(newUser.Puid).Length);
                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(3)]
        class N_BadGamertag : UserTestBase
        {
            override protected void Execute()
            {                
                ResultCode = TEST_RESULTS.FAILED;
                try
                {
                    MigrateUser.Read(null, false);
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent ex)
                {
                    if (ex.HResult != HResult.XONLINE_E_MIGRATEUSER_USER_DOES_NOT_EXIST_ERROR)
                    {
                        throw;
                    }
                    Global.RO.Info("Got expected exception! " + ex.Message);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

        [TestCase, TestCasePriority(3)]
        class N_WriteFromEmptyString : UserTestBase
        {
            override protected void Execute()
            {                
                string newUserEmail = "";
                string newUserPassword = "";
                string gamertag = "gamertag";
                ResultCode = TEST_RESULTS.FAILED;
                try
                {
                    MigrateUser.Write(ref gamertag, null, ref newUserEmail, ref newUserPassword);
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent ex)
                {
                    if (ex.HResult != HResult.XONLINE_E_MIGRATEUSER_FAILED_TO_READ_XML_ERROR)
                    {
                        throw;
                    }
                    Global.RO.Info("Got expected exception! " + ex.Message);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    throw;
                }                
            }
        }

        [TestCase, TestCasePriority(3)]
        class N_WriteToExistUser : UserTestBase
        {
            override protected void Execute()
            {
                string newUserEmail = "";
                string newUserPassword = "";
                XeUser user = XbosUser.XenonGoldUser();                
                string gamertag = user.Gamertag;                
                string xml = MigrateUser.Read(gamertag, false);

                try
                {
                    MigrateUser.Write(ref gamertag, xml, ref newUserEmail, ref newUserPassword);

                    Global.RO.Info("New user email: " + newUserEmail + " and new user password: " + newUserPassword);
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent ex)
                {
                    if (ex.HResult != HResult.XONLINE_E_MIGRATEUSER_USER_ALREADY_EXISTS_ERROR)
                    {
                        throw;
                    }
                    Global.RO.Info("Got expected exception! " + ex.Message);
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
                }
                catch (Exception)
                {
                    throw;
                }
                ResultCode = TEST_RESULTS.FAILED;
            }
        }

        [TestCase, TestCasePriority(3)]
        class N_WriteFromBadXML : UserTestBase
        {
            override protected void Execute()
            {
                string newUserEmail = "";
                string newUserPassword = "";
                string xml = "tests";                


                ResultCode = TEST_RESULTS.FAILED;
                string newGamertag = live.common.RandomEx.GlobalRandGen.GenerateRandomString("RW", 15);
                try
                {
                    MigrateUser.Write(ref newGamertag, xml, ref newUserEmail, ref newUserPassword);
                }
                catch (xonline.common.service.XRLExceptionWithoutEvent ex)
                {
                    if (ex.HResult != HResult.XONLINE_E_MIGRATEUSER_FAILED_TO_READ_XML_ERROR)
                    {
                        throw;
                    }
                    Global.RO.Info("Got expected exception! " + ex.Message);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_HideAdultBirthday : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser(XeUser.Country.US, false);
                User newUser = CallMigrateUser(user.Gamertag);

                if (user.BirthDate == newUser.Birthdate)
                {
                    throw new UnexpectedTestResultException("Birthday kept the same! it should have changed.");
                }

                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_HideMinorBirthday : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.MinorUser();
                User newUser = CallMigrateUser(user.Gamertag);

                if (user.BirthDate == newUser.Birthdate)
                {
                    throw new UnexpectedTestResultException("Birthday kept the same! it should have changed.");
                }

                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_HideJuvenileBirthday : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.JuvenileUser();
                User newUser = CallMigrateUser(user.Gamertag);

                if (user.BirthDate == newUser.Birthdate)
                {
                    throw new UnexpectedTestResultException("Birthday kept the same! it should have changed.");
                }

                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

        [TestCase, TestCasePriority(2)]
        class P_Migrate_Audit : UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = XbosUser.XenonGoldUser(XeUser.Country.US, false);
                string xml = "<params><machinePuid>fa00771e7796ee00</machinePuid><offerIds /></params>";
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
                {
                    ws.PartitionType = WstPartitionType.Logical;
                    ws.SetHashVal(user.UserPuid);
                    ws.StoredProc = "dbo.p_user_add_audit_info";

                    ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                    ws.AddParameter("@bi_user_puid", user.UserPuid);
                    ws.AddParameter("@ui_correlation_id", Guid.NewGuid().ToString());
                    ws.AddParameter("@dt_timestamp", DateTime.UtcNow);
                    ws.AddParameter("@vc_subsystem_name", "xbos");
                    ws.AddParameter("@vc_api_name", "Hahaha");
                    ws.AddParameter("@vc_audit_message", "");
                    ws.AddParameter("@xml_audit_info", xml);
                    ws.AddParameter("@si_hash_bucket", ws.Partition);

                    ws.ExecuteNonQuery();

                    HResult hr = HResult.S_OK;
                    string message = string.Empty;

                    try
                    {
                        hr = (uint)ws.GetIntParameter("@ret");
                    }
                    catch (Exception e)
                    {
                        message = string.Format("\n{0}\n", e.ToString());
                        hr = HResult.XONLINE_E_AUDIT_LOG_FAILURE;
                        throw e;
                    }
                }

                User newUser = CallMigrateUser(user.Gamertag);
                List<AuditInfo> auditInfos = XbosWS.GetAuditInfo(newUser.Puid);
                bool find = false;
                foreach (AuditInfo auditInfo in auditInfos)
                {
                    if (auditInfo.ApiName == "Hahaha")
                    {
                        find = true;
                        break;
                    }
                }

                if (!find)
                {
                    throw new UnexpectedTestResultException("Aduit table is not correct!");
                }

                ResultCode = TEST_RESULTS.PASSED;
                ResetEnvironment(m_OrgEnvironment);
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LMAXarbTests\XArbTestBase.cs ===
using System;
using System.Reflection;
using System.Net;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.LiveService.Presence;
using xonline.common.config;


namespace XArbTest
{
    /// <summary>
    /// 	Helper: XArbTestBase
    /// </summary>
    /// <remarks>
    /// 	<Description>
    /// 		Base class used by all test cases
    /// 	</Description>
    /// 	<Verify>
    /// 		N/A
    /// 	</Verify>
    /// </remarks>
    abstract public class XArbTestBase : TestBase
    {
        protected RandomEx RandGen = new RandomEx();

        class ArbSlot
        {
            public StatsBundle statsBundle = null;
            public TournamentBundle tournamentBundle = null;
            public float TRF = 0.0f;
        };

        private static IPEndPoint memstaticEndPoint = new IPEndPoint(0L, 0);

        //Register Helper Functions
        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, ref uint userStartIndex, TeamTickets teamTickets)
        {
            return BuildXRLRegister(myRegister, userCount, ref userStartIndex, teamTickets, XArbGlobal.defaultMaxSessionSeconds);
        }

        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, ref uint userStartIndex, TeamTickets teamTickets, ushort maxSessionSecs)
        {
            XRLRegister retRegister = BuildXRLRegister(myRegister, userCount, userStartIndex, teamTickets, maxSessionSecs);
            if (null != retRegister)
            {
                userStartIndex += userCount;
            }
            return retRegister;
        }

        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, uint userStartIndex, TeamTickets teamTickets)
        {
            return BuildXRLRegister(myRegister, userCount, userStartIndex, teamTickets, XArbGlobal.defaultMaxSessionSeconds);
        }

        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, uint userStartIndex, TeamTickets teamTickets, ushort maxSessionSecs)
        {
            XRLRegister myRequest = null;

            //Check params
            if ((userCount > 4) || (userStartIndex + userCount > XArbGlobal.defaultUserPuids.GetSize()))
            {
                return null;
            }

            //Populate users from global list
            myRequest = new XRLRegister();
            for (uint i = 0; i < userCount; i++)
            {
                myRequest.userPuid[i] = (ulong)XArbGlobal.defaultUserPuids[(int)(userStartIndex + i)].Puid;
                myRequest.userFlag[i] = XArbGlobal.defaultUserFlags;
                myRequest.userTrust[i] = XArbGlobal.defaultUserTrust;
            }

            if (null == myRegister)
            {
                myRequest.sessionId = RandGen.NextUlong();
                myRequest.sessionNonce = RandGen.NextUlong();
            }
            else
            {
                myRequest.sessionId = myRegister.sessionId;
                myRequest.sessionNonce = myRegister.sessionNonce;
            }
            myRequest.machinePuid = RandGen.NextUlong();
            myRequest.titleId = XArbGlobal.myTitleTrustConstants.titleId;
            myRequest.maxSessionSeconds = maxSessionSecs;
            myRequest.flags = 0;

            if (teamTickets != null)
            {
                myRequest.flags |= XRLRegister.Flags.TeamMembershipInfoIncluded;
                myRequest.teamTickets = teamTickets;
            }

            return myRequest;
        }

        protected bool ExecuteAndVerify(XRLRegister myRegister)
        {
            uint xboxIndex = 0;
            uint xboxTotal = 0;
            uint ticketCount = 0;

            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myRegister);
            if (myDebugResultResponse != null)
            {
                xboxIndex = xboxTotal = (uint)myDebugResultResponse.xboxInfoLen;
                ticketCount = (uint)myDebugResultResponse.teamTicketCount;
            }

            if (!ExecuteRegisterAndVerifyRegisterResponse(myRegister, xboxIndex, xboxTotal))
            {
                Global.RO.Error("XArbTestBase::ExecuteAndVerify: ExecuteRegisterAndVerifyRegisterResponse failed");
                return false;
            }
            if (!ExecuteDebugResultAndVerifyRegisterInfo(myRegister, xboxIndex, xboxTotal + 1, ticketCount))
            {
                Global.RO.Error("XArbTestBase::ExecuteAndVerify: ExecuteDebugResultAndVerifyRegisterInfo failed");
                return false;
            }
            return true;
        }

        protected bool ExecuteAndCheckError(XRLRegister myRegister, uint hr)
        {
            if (HResult.Succeeded(hr))
            {
                if ((false == myRegister.Execute()) ||
                    (myRegister.XErr != hr))
                {
                    return false;
                }
            }
            else
            {
                if ((true == myRegister.Execute()) ||
                    (myRegister.XErr != hr))
                {
                    return false;
                }
            }

            return true;

        }

        private bool ExecuteRegisterAndVerifyRegisterResponse(XRLRegister myRegister, uint xboxRegisterIndex, uint totalXboxesRegistered)
        {
            if ((true != myRegister.Execute()) ||
                (myRegister.Response.registeredXbox[xboxRegisterIndex].puid != myRegister.machinePuid) ||
                (myRegister.Response.registeredXbox.GetLength(0) != totalXboxesRegistered + 1))
            {
                return false;
            }
            for (uint i = 0; i < myRegister.Response.registeredXbox[xboxRegisterIndex].registeredUserLen; i++)
            {
                if ((myRegister.Response.registeredXbox[xboxRegisterIndex].registeredUser[i].userId != myRegister.userPuid[i]) ||
                    (myRegister.Response.registeredXbox[xboxRegisterIndex].registeredUser[i].flags != myRegister.userFlag[i]))
                {
                    return false;
                }
            }

            return true;
        }

        private bool ExecuteDebugResultAndVerifyRegisterInfo(XRLRegister myRegister, uint xboxRegisterIndex, uint totalXboxesRegistered, uint ticketCount)
        {
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myRegister);
            if (null == myDebugResultResponse)
            {
                return false;
            }

            if ((myRegister.titleId != myDebugResultResponse.titleId) ||
                (myRegister.sessionId != myDebugResultResponse.sessionId) ||
                (myRegister.sessionNonce != myDebugResultResponse.sessionNonce) ||
                (myRegister.maxSessionSeconds != myDebugResultResponse.maxSessionSeconds) ||
                (myRegister.machinePuid != myDebugResultResponse.xboxInfo[xboxRegisterIndex].xboxID) ||
                (myRegister.flags != myDebugResultResponse.flags))
            {
                return false;
            }

            if ((myRegister.teamTickets != null) && (myRegister.teamTickets.list.tickets.GetLength(0) + ticketCount != myDebugResultResponse.teamTicketCount))
            {
                return false;
            }

            if ((totalXboxesRegistered != 0) && (totalXboxesRegistered != myDebugResultResponse.xboxInfoLen))
            {
                return false;
            }

            for (uint i = 0; i < myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrustLen; i++)
            {
                if ((myRegister.userPuid[i] != myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrust[i].qwUserID) ||
                    (myRegister.userFlag[i] != myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrust[i].dwUserFlags) ||
                    (myRegister.userTrust[i] != myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrust[i].userTrust))
                {
                    return false;
                }
            }

            return true;
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLRegister myRequest)
        {
            return GetDebugResultResponse(myRequest, null);
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLRegister myRequest, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = GetDebugResult(myRequest, endPoint);
            if (myDebugResult == null)
            {
                return (null);
            }
            return (myDebugResult.Response);
        }

        protected XRLDebugResult GetDebugResult(XRLRegister myRequest)
        {
            return GetDebugResult(myRequest, null);
        }

        protected XRLDebugResult GetDebugResult(XRLRegister myRequest, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = null;
            myDebugResult = new XRLDebugResult();
            myDebugResult.titleId = myRequest.titleId;
            myDebugResult.sessionId = myRequest.sessionId;
            myDebugResult.sessionNonce = myRequest.sessionNonce;
            if (endPoint == null)
            {
                if (myDebugResult.Execute())
                {
                    return myDebugResult;
                }
            }
            else
            {
                bool fFrontDoor = XRLRegister.fFrontDoor;
                XRLDebugResult.fFrontDoor = false;
                try
                {
                    if (myDebugResult.Execute(endPoint))
                    {
                        return myDebugResult;
                    }
                }
                finally
                {
                    XRLDebugResult.fFrontDoor = fFrontDoor;
                }
            }
            return null;
        }

        //TimeExtend Helper Functions
        protected XRLTimeExtend BuildXRLTimeExtend(XRLRegister myRegister, ushort maxSessionSecondsFromNow)
        {
            XRLTimeExtend myTimeExtend = null;
            myTimeExtend = new XRLTimeExtend();
            if (null == myTimeExtend)
            {
                return null;
            }
            myTimeExtend.machinePuid = myRegister.machinePuid;
            myTimeExtend.sessionId = myRegister.sessionId;
            myTimeExtend.sessionNonce = myRegister.sessionNonce;
            myTimeExtend.titleId = myRegister.titleId;
            myTimeExtend.flags = 0;
            myTimeExtend.maxSessionSecondsFromNow = maxSessionSecondsFromNow;
            return myTimeExtend;
        }

        protected bool ExecuteAndVerify(XRLTimeExtend myTimeExtend)
        {
            //Get the current time extend count
            uint timeExtendCount = 0;
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myTimeExtend);
            if (myDebugResultResponse != null)
            {
                for (uint i = 0; i < myDebugResultResponse.xboxInfoLen; i++)
                {
                    if (myTimeExtend.machinePuid == myDebugResultResponse.xboxInfo[i].xboxID)
                    {
                        timeExtendCount = myDebugResultResponse.xboxInfo[i].timeExtendCount;
                        break;
                    }
                }
            }

            if ((false == ExecuteTimeExtend(myTimeExtend)) ||
                (false == ExecuteDebugResultAndVerifyTimeExtendInfo(myTimeExtend, ++timeExtendCount)))
            {
                return false;
            }
            return true;
        }
        protected bool ExecuteAndCheckError(XRLTimeExtend myTimeExtend, uint hr)
        {
            if (HResult.Succeeded(hr))
            {
                if ((false == myTimeExtend.Execute()) ||
                    (myTimeExtend.XErr != hr))
                {
                    return false;
                }
            }
            else
            {
                if ((true == myTimeExtend.Execute()) ||
                    (myTimeExtend.XErr != hr))
                {
                    return false;
                }
            }

            return true;
        }

        private bool ExecuteTimeExtend(XRLTimeExtend myTimeExtend)
        {
            if (false == myTimeExtend.Execute())
            {
                return false;
            }

            return true;
        }

        private bool ExecuteDebugResultAndVerifyTimeExtendInfo(XRLTimeExtend myTimeExtend, uint timeExtendCount)
        {
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myTimeExtend);

            if (myDebugResultResponse == null)
            {
                return false;
            }

            if ((myTimeExtend.titleId != myDebugResultResponse.titleId) ||
                (myTimeExtend.sessionId != myDebugResultResponse.sessionId) ||
                (myTimeExtend.sessionNonce != myDebugResultResponse.sessionNonce))
            {
                return false;
            }

            bool found = false;
            for (uint i = 0; i < myDebugResultResponse.xboxInfoLen; i++)
            {
                if (myTimeExtend.machinePuid == myDebugResultResponse.xboxInfo[i].xboxID)
                {
                    if (timeExtendCount != myDebugResultResponse.xboxInfo[i].timeExtendCount)
                    {
                        return false;
                    }
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                return false;
            }

            if (myDebugResultResponse.secondsLeftTillTimeout <= myTimeExtend.maxSessionSecondsFromNow + XArbGlobal.serverSessionTimeoutExtensionSeconds - 5)
            {
                return false;
            }

            return true;
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLTimeExtend myTimeExtend)
        {
            return GetDebugResultResponse(myTimeExtend, null);
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLTimeExtend myTimeExtend, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = null;
            myDebugResult = new XRLDebugResult();
            myDebugResult.titleId = myTimeExtend.titleId;
            myDebugResult.sessionId = myTimeExtend.sessionId;
            myDebugResult.sessionNonce = myTimeExtend.sessionNonce;
            if (endPoint == null)
            {
                if (myDebugResult.Execute())
                {
                    return myDebugResult.Response;
                }
            }
            else
            {
                bool fFrontDoor = XRLRegister.fFrontDoor;
                XRLDebugResult.fFrontDoor = false;
                try
                {
                    if (myDebugResult.Execute(endPoint))
                    {
                        return myDebugResult.Response;
                    }
                }
                finally
                {
                    XRLDebugResult.fFrontDoor = fFrontDoor;
                }
            }
            return null;
        }

        //ReportResult Helper Functions
        protected XRLReportResult BuildXRLReportResult(XRLRegister myRegister, StatsBundle statsBundle, TournamentBundle tournamentBundle, SuspiciousInfo type1SuspiciousInfo, SuspiciousInfo type2SuspiciousInfo, SuspiciousInfo type3SuspiciousInfo, LostConnectivityInfo lostConnectivityInfo)
        {
            XRLReportResult myResults = new XRLReportResult();

            myResults.AlternateStatsDestination = XArbGlobal.statsEndPoint;
            myResults.AlternateQueryDestination = XArbGlobal.queryEndPoint;
            myResults.machinePuid = myRegister.machinePuid;
            myResults.sessionId = myRegister.sessionId;
            myResults.sessionNonce = myRegister.sessionNonce;
            myResults.titleId = myRegister.titleId;

            if (null != statsBundle)
            {
                myResults.flags |= XRLReportResult.Flags.StatsBundleInfoSubmit;
                myResults.statsBundle = statsBundle;
            }

            if (null != tournamentBundle)
            {
                myResults.flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;
                myResults.tournamentBundle = tournamentBundle;
            }

            if (null != type1SuspiciousInfo)
            {
                myResults.flags |= XRLReportResult.Flags.SuspiciousInfo1Submit;
                myResults.type1SuspiciousInfo = type1SuspiciousInfo;
            }

            if (null != type2SuspiciousInfo)
            {
                myResults.flags |= XRLReportResult.Flags.SuspiciousInfo2Submit;
                myResults.type2SuspiciousInfo = type2SuspiciousInfo;
            }

            if (null != type3SuspiciousInfo)
            {
                myResults.flags |= XRLReportResult.Flags.SuspiciousInfo3Submit;
                myResults.type3SuspiciousInfo = type3SuspiciousInfo;
            }

            if (null != lostConnectivityInfo)
            {
                myResults.flags |= XRLReportResult.Flags.LostConnectivityInfoSubmit;
                myResults.flags |= XRLReportResult.Flags.LostConnectivity;
                myResults.lostConnectivityInfo = lostConnectivityInfo;
            }

            return myResults;
        }

        private bool Arbitrate(XRLRegister[] registers, XRLReportResult[] results, out StatsBundle statsBundle, out TournamentBundle tournamentBundle, out TimeSpan timeout)
        {
            //Initialize out params
            statsBundle = null;
            tournamentBundle = null;
            timeout = XArbGlobal.defaultTimeout;

            //Anything to arbitrate?
            if ((null == results) || (null == results[0])) return true;

            //You can't have a single xbox and single user arbitrated
            if (registers.GetLength(0) == 1)
            {
                uint i = 0;
                for (uint u = 0; u < registers[0].userPuid.GetLength(0); u++)
                {
                    if (registers[0].userPuid[u] != 0)
                    {
                        i++;
                    }
                }
                if (i < 2)
                {
                    return true;
                }
            }

            //Calculate total TRF for session
            float totalTRF = 0.0f;
            if (false == CalculateTotalTRF(registers, out totalTRF))
            {
                return false;
            }

            //Calculate majority and minority quorums
            double majorityQuorum = totalTRF * 0.5;
            double minorityQuorum = totalTRF * XArbGlobal.myTitleTrustConstants.minorityQuorum;

            //Pull out all unique bundles and combinations and accumulate TRF for each
            ArbSlot[] slots = new ArbSlot[XArbGlobal.maxXboxes];
            uint slotSize = 0;
            bool match = false;
            foreach (XRLReportResult r in results)
            {
                //Skip N/A reports
                if ((null == r.statsBundle) && (null == r.tournamentBundle)) continue;

                match = false;
                for (uint i = 0; i < slotSize; i++)
                {
                    if ((true == CompareBundles(r.statsBundle, slots[i].statsBundle)) &&
                        (true == CompareBundles(r.tournamentBundle, slots[i].tournamentBundle)))
                    {
                        slots[i].TRF += CalculateXboxTRF(FindRegisterViaMachinePuid(registers, r.machinePuid));
                        match = true;
                    }
                }
                if (false == match)
                {
                    slots[slotSize] = new ArbSlot();
                    slots[slotSize].statsBundle = r.statsBundle;
                    slots[slotSize].tournamentBundle = r.tournamentBundle;
                    slots[slotSize++].TRF = CalculateXboxTRF(FindRegisterViaMachinePuid(registers, r.machinePuid));
                }
            }

            //Get best TRF in list and store the index
            float bestTRF = 0.0f;
            int bestIndex = -1;
            for (int i = 0; i < slotSize; i++)
            {
                if (slots[i].TRF > bestTRF)
                {
                    bestTRF = slots[i].TRF;
                    bestIndex = i;
                }
            }

            if (bestIndex == -1)
            {
                return true;
            }

            //ConsoleX.ClearLine();
            //ConsoleX.Write("TRF: "+totalTRF.ToString("G5")+" MajQ: "+majorityQuorum.ToString("G5")+" MinQ: "+minorityQuorum.ToString("G5")+" Unique: "+(slotSize)+" BestTRF: "+bestTRF.ToString("g5")+" BestIndex: "+bestIndex+" PreCalc: ");
            //Do we have a majority Quorum?
            if (bestTRF > majorityQuorum)
            {
                statsBundle = slots[bestIndex].statsBundle;
                tournamentBundle = slots[bestIndex].tournamentBundle;
                //ConsoleX.WriteLine("majority quorum");
                return true;
            }

            //No majority quorum found, are we problematic too?
            bool problematic = false;
            if (false == IsSessionProblematic(results, out problematic))
            {
                return false;
            }
            if (true == problematic)
            {
                //ConsoleX.WriteLine("problematic");
                return true;
            }

            //Do we need to session to timeout to get a minority quorum?
            if (registers.Length != results.Length)
            {
                timeout = new TimeSpan(0, 0, 0, registers[0].maxSessionSeconds + XArbGlobal.serverSessionTimeoutExtensionSeconds + 10, 0);
            }

            //Session is not problematic, do we have a minority quorum?
            if (bestTRF > minorityQuorum)
            {
                statsBundle = slots[bestIndex].statsBundle;
                tournamentBundle = slots[bestIndex].tournamentBundle;
                //ConsoleX.WriteLine("minority quorum");
                return true;
            }

            //ConsoleX.WriteLine("no quorum");
            return true;
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, TimeSpan gameplayTime)
        {
            return ExecuteAndVerify(registers, results, HResult.S_OK, gameplayTime);
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results)
        {
            return ExecuteAndVerify(registers, results, HResult.S_OK, new TimeSpan(0, 0, 0, 0, 0));
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, uint hr)
        {
            return ExecuteAndVerify(registers, results, hr, new TimeSpan(0, 0, 0, 0, 0));
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, uint hr, TimeSpan gameplayTime)
        {
            double sessionSeconds;
            return ExecuteAndVerify(registers, results, hr, gameplayTime, out sessionSeconds);
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, uint hr, TimeSpan gameplayTime, out double sessionSeconds)
        {
            sessionSeconds = 0.0;

            //Check parameters
            if ((null == results) || (null == results[0]) || (null == registers))
            {
                return false;
            }

            //Perform arbitration calculations and return bundles that get sumbitted
            StatsBundle arbStatsBundle = null;
            TournamentBundle arbQueryBundle = null;
            TimeSpan timeout;
            if (false == Arbitrate(registers, results, out arbStatsBundle, out arbQueryBundle, out timeout))
            {
                return false;
            }

            //Build time extend if we need it
            uint halfLife = (uint)(registers[0].maxSessionSeconds / 2);
            uint cycles = System.Convert.ToUInt32(gameplayTime.TotalSeconds) / halfLife;
            uint remainder = (System.Convert.ToUInt32(gameplayTime.TotalSeconds)) - (halfLife * cycles);

            XRLTimeExtend myTimeExtend = null;

            if (cycles > 0)
            {
                myTimeExtend = new XRLTimeExtend();
                myTimeExtend.titleId = registers[0].titleId;
                myTimeExtend.sessionId = registers[0].sessionId;
                myTimeExtend.sessionNonce = registers[0].sessionNonce;
                myTimeExtend.machinePuid = registers[0].machinePuid;
            }

            //Register xboxes
            foreach (XRLRegister r in registers)
            {
                //Execute and verify
                if (false == ExecuteAndVerify(r))
                {
                    return false;
                }
            }

            //Gameplay
            if (null != myTimeExtend)
            {
                for (uint i = 0; i < cycles; i++)
                {
                    System.Threading.Thread.Sleep(new TimeSpan(0, 0, 0, System.Convert.ToInt32(halfLife), 0));
                    if (false == myTimeExtend.Execute())
                    {
                        return false;
                    }
                }
            }
            System.Threading.Thread.Sleep(new TimeSpan(0, 0, 0, System.Convert.ToInt32(remainder), 0));

            //Clear the listeners
            XArbGlobal.statsListener.ClearSlots();
            XArbGlobal.queryListener.ClearSlots();

            //Submit the reports
            foreach (XRLReportResult r in results)
            {
                if (HResult.Failed(hr))
                {
                    if ((true == r.Execute()) || (r.XErr != hr))
                    {
                        return false;
                    }
                }
                else
                {
                    if ((false == r.Execute()) || ((r.XErr != hr) && (r.XErr != HResult.XONLINE_S_ARBITRATION_DIFFERENT_RESULTS_DETECTED)))
                    {
                        return false;
                    }
                }
            }

            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(registers[0]);
            if (null != myDebugResultResponse)
            {
                sessionSeconds = myDebugResultResponse.sessionSeconds;
            }

            XArbListener.SlotData slot = null;

            //If we expect a stats bundle back lets check it else let's make sure we didn't get one
            if (null != arbStatsBundle)
            {
                Global.RO.Debug("Verify stats bundle received using timeout == {0}", timeout);
                if (false == XArbGlobal.statsListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, timeout))
                {
                    Global.RO.Error("Failed to find expected response in Stats listener.");
                    return false;
                }
                if (false == CompareBundles(arbStatsBundle.bundle, slot.bundle))
                {
                    return false;
                }
                if (false == ValidateTickets(registers, slot))
                {
                    return false;
                }
                if (false == ValidateAuthData(registers, slot))
                {
                    return false;
                }
            }
            else
            {
                if (true == XArbGlobal.statsListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, new TimeSpan(0, 0, 0, 1, 0)))
                {
                    return false;
                }
            }

            //If we expect a query bundle back lets check it else let's make sure we didn't get one
            if (null != arbQueryBundle)
            {
                Global.RO.Debug("Verify query bundle received using timeout == {0}", timeout);
                if (!XArbGlobal.queryListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, timeout))
                {
                    throw new UnexpectedTestResultException("Failed to find expected response in Query listener.");
                }
                if (!CompareBundles(arbQueryBundle.bundle, slot.bundle))
                {
                    throw new UnexpectedTestResultException("Query bundles do not match.");
                }
                if (!ValidateTickets(registers, slot))
                {
                    throw new UnexpectedTestResultException("Failed to validate tickets.");
                }
                if (!ValidateAuthData(registers, slot))
                {
                    throw new UnexpectedTestResultException("Failed to validate auth data.");
                }
            }
            else
            {
                if (XArbGlobal.queryListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, new TimeSpan(0, 0, 0, 1, 0)))
                {
                    return false;
                }
            }

            return true;
        }
        protected bool ExecuteAndCheckError(XRLReportResult myReportResult, uint hr)
        {

            if (HResult.Succeeded(hr))
            {
                if ((false == myReportResult.Execute()) ||
                    (myReportResult.XErr != hr))
                {
                    return false;
                }
            }
            else
            {
                if ((true == myReportResult.Execute()) ||
                    (myReportResult.XErr != hr))
                {
                    return false;
                }
            }

            return true;

        }

        private bool ExecuteReportResult(XRLReportResult myReportResult)
        {
            if (false == myReportResult.Execute())
            {
                return false;
            }

            return true;
        }

        private XRLRegister FindRegisterViaMachinePuid(XRLRegister[] registers, ulong machinePuid)
        {
            if (null == registers)
            {
                return null;
            }

            foreach (XRLRegister r in registers)
            {
                if (r.machinePuid == machinePuid)
                {
                    return r;
                }
            }

            return null;
        }

        private float CalculateXboxTRF(XRLRegister register)
        {
            if ((null == register) || (null == register.userTrust) || (null == register.userPuid))
            {
                return 0.0f;
            }
            float xboxTrust = 0.0f;
            for (uint i = 0; i < register.userTrust.GetLength(0); i++)
            {
                if (register.userPuid[i] != 0)
                {
                    xboxTrust += (float)(XArbGlobal.myTitleTrustConstants.baseUserTrust + Fermi(register.userTrust[i], XArbGlobal.myTitleTrustConstants.k));
                }
            }
            return xboxTrust;
        }
        private bool CalculateTotalTRF(XRLRegister[] registers, out float totalTRF)
        {
            totalTRF = 0.0f;
            if (null == registers)
            {
                return false;
            }

            foreach (XRLRegister r in registers)
            {
                if (null == r.userTrust)
                {
                    return false;
                }
                totalTRF += CalculateXboxTRF(r);
            }

            return true;
        }

        private bool IsSessionProblematic(XRLReportResult[] results, out bool problematic)
        {
            problematic = false;

            if ((null == results) || (null == results[0]))
            {
                return false;
            }

            //Find first valid result package
            XRLReportResult valid = null;
            foreach (XRLReportResult r in results)
            {
                if ((null != r.statsBundle) || (null != r.tournamentBundle))
                {
                    valid = r;
                    break;
                }
            }
            if (null == valid)
            {
                return true;
            }

            foreach (XRLReportResult r in results)
            {
                if ((r.transport == FDTransaction.Transports.UDP) && ((r.statsBundle != null) || (r.tournamentBundle != null)))
                {
                    problematic = true;
                }

                //Check for problematic issues with lost connectivity submits
                if (null != r.lostConnectivityInfo)
                {
                    foreach (ulong lciPuid in r.lostConnectivityInfo.xboxPuid)
                    {
                        foreach (XRLReportResult x in results)
                        {
                            if ((lciPuid == x.machinePuid) && ((x.statsBundle != null) || (x.tournamentBundle != null)))
                            {
                                problematic = true;
                                return true;
                            }
                        }
                    }
                }

                //Skip compare for non bundle submits
                if ((null == r.statsBundle) && (null == r.tournamentBundle))
                {
                    continue;
                }

                //Compare bundles
                if ((false == CompareBundles(r.statsBundle, valid.statsBundle)) ||
                    (false == CompareBundles(r.tournamentBundle, valid.tournamentBundle)))
                {
                    problematic = true;
                    return true;
                }

            }
            return true;
        }

        private bool CompareBundles(StatsBundle b1, StatsBundle b2)
        {
            if ((null == b1) && (null == b2))
            {
                return true;
            }
            if ((null == b1) || (null == b2))
            {
                return false;
            }
            return CompareBundles(b1.bundle, b2.bundle);
        }

        private bool CompareBundles(TournamentBundle b1, TournamentBundle b2)
        {
            if ((null == b1) && (null == b2))
            {
                return true;
            }
            if ((null == b1) || (null == b2))
            {
                return false;
            }
            return CompareBundles(b1.bundle, b2.bundle);
        }

        private bool CompareBundles(byte[] b1, byte[] b2)
        {
            if ((null == b1) && (null == b2))
            {
                return true;
            }

            if ((null == b1) || (null == b2))
            {
                return false;
            }

            if (b1.GetLength(0) != b2.GetLength(0))
            {
                return false;
            }

            for (uint i = 0; i < b1.GetLength(0); i++)
            {
                if (b1[i] != b2[i])
                {
                    return false;
                }
            }
            return true;
        }
        private bool ValidateTickets(XRLRegister[] registers, XArbListener.SlotData slot)
        {

            //Store each register team ticket in hash table
            Hashtable teamTicketHash = new Hashtable();
            foreach (XRLRegister r in registers)
            {
                if (null == r.teamTickets) break;
                foreach (TeamTicket t in r.teamTickets.list.tickets)
                {
                    teamTicketHash[t.userID] = t.teamIDs;
                }
            }

            //How many tickets are in slot data?
            int slotTickets = 0;
            if ((null != slot) && (null != slot.teamTickets) && (null != slot.teamTickets.list.tickets))
            {
                slotTickets = slot.teamTickets.list.tickets.Length;
            }

            //Do the number of tickets match?
            if (teamTicketHash.Count != slotTickets)
            {
                return false;
            }

            //Do we have 0 tickets?
            if ((teamTicketHash.Count == 0) && (slotTickets == 0))
            {
                return true;
            }

            //Make sure the tickets match
            TeamTicket[] tickets = slot.teamTickets.list.tickets;
            foreach (TeamTicket t in tickets)
            {
                ulong[] teamIDs = (ulong[])teamTicketHash[t.userID];
                if (teamIDs != null)
                {
                    if (teamIDs.Length != t.teamIDs.Length)
                    {
                        return false;
                    }
                    for (int i = 0; i < teamIDs.Length; i++)
                    {
                        if (teamIDs[i] != t.teamIDs[i])
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    return false;
                }
            }

            return true;
        }
        private bool ValidateAuthData(XRLRegister[] registers, XArbListener.SlotData slot)
        {

            //Store each register XUIDAndTrust in hash table
            Hashtable authDataHash = new Hashtable();
            foreach (XRLRegister r in registers)
            {
                for (int i = 0; i < r.userPuid.Length; i++)
                {
                    if (r.userPuid[i] != 0)
                    {
                        XUIDAndTrust xt = new XUIDAndTrust();
                        xt.dwUserFlags = r.userFlag[i];
                        xt.qwUserID = r.userPuid[i];
                        xt.userTrust = r.userTrust[i];
                        authDataHash[r.userPuid[i]] = xt;
                    }
                }
            }

            //How many users are in slot data?
            int slotUsersCount = 0;
            if ((null != slot) && (null != slot.authData) && (null != slot.authData.users))
            {
                slotUsersCount = slot.authData.users.Length;
            }

            //Do the number of users match?
            if (authDataHash.Count != slotUsersCount)
            {
                return false;
            }

            //Do we have 0 users?
            if ((authDataHash.Count == 0) && (slotUsersCount == 0))
            {
                return true;
            }

            //Make sure the XUIDAndTrust match
            XUIDAndTrust[] slotUsers = slot.authData.users;
            foreach (XUIDAndTrust slotUser in slotUsers)
            {
                XUIDAndTrust regUser = (XUIDAndTrust)authDataHash[slotUser.qwUserID];
                if (0 != regUser.CompareTo(slotUser))
                {
                    return false;
                }
            }

            return true;
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLReportResult myReportResult)
        {
            return GetDebugResultResponse(myReportResult, null);
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLReportResult myReportResult, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = null;
            myDebugResult = new XRLDebugResult();
            myDebugResult.titleId = myReportResult.titleId;
            myDebugResult.sessionId = myReportResult.sessionId;
            myDebugResult.sessionNonce = myReportResult.sessionNonce;
            if (endPoint == null)
            {
                if (myDebugResult.Execute())
                {
                    return myDebugResult.Response;
                }
            }
            else
            {
                bool fFrontDoor = XRLRegister.fFrontDoor;
                XRLDebugResult.fFrontDoor = false;
                try
                {
                    if (myDebugResult.Execute(endPoint))
                    {
                        return myDebugResult.Response;
                    }
                }
                finally
                {
                    XRLDebugResult.fFrontDoor = fFrontDoor;
                }
            }
            return null;
        }

        protected TeamTickets MakeTeamTickets(uint userCount, uint startIndex, byte[] teampuidcount)
        {
            if ((userCount == 0) || ((teampuidcount != null) && (teampuidcount.GetLength(0) != userCount))) return null;

            byte[] key = new byte[16] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            ulong[] teampuids = null;

            TeamTickets tickets = null;
            tickets = new TeamTickets();
            tickets.list.tickets = new TeamTicket[userCount];
            for (uint i = 0; i < tickets.list.tickets.GetLength(0); i++)
            {
                tickets.list.tickets[i] = new TeamTicket();
                if (teampuidcount == null)
                {
                    teampuids = new ulong[RandGen.NextUlong() % (TeamTicket.MAXIMUM_TEAMS_PER_TICKET - 1) + 1];
                }
                else
                {
                    teampuids = new ulong[teampuidcount[i]];
                }
                for (uint j = 0; j < teampuids.GetLength(0); j++)
                {
                    teampuids[j] = RandGen.NextUlong();
                }
                tickets.list.tickets[i].Populate(XArbGlobal.defaultUserPuids[(int)(i + startIndex)].Puid, teampuids, key);
            }
            return tickets;
        }

        protected StatsBundle MakeStatsBundle(uint size)
        {
            StatsBundle statsBundle = new StatsBundle();
            statsBundle.bundle = new byte[size];
            RandGen.NextBytes(statsBundle.bundle);
            return statsBundle;
        }

        protected TournamentBundle MakeTournamentBundle(uint size)
        {
            TournamentBundle queryBundle = new TournamentBundle();
            queryBundle.bundle = new byte[size];
            RandGen.NextBytes(queryBundle.bundle);
            return queryBundle;
        }

        protected LostConnectivityInfo MakeLostConnectivityInfo(ulong[] puids)
        {
            LostConnectivityInfo lci = new LostConnectivityInfo();
            lci.xboxPuid = puids;
            return lci;
        }

        protected SuspiciousInfo MakeSuspiciousInfo(byte[] message, ulong[] mpuids, ulong[] upuids)
        {
            if (message.GetLength(0) > System.Byte.MaxValue)
            {
                return null;
            }
            SuspiciousInfo si = new SuspiciousInfo();
            si.relatedXbox = mpuids;
            si.relatedUser = upuids;
            si.message = message;

            return si;
        }

        protected SuspiciousInfo MakeSuspiciousInfo(string message, ulong[] mpuids, ulong[] upuids)
        {
            if (message.Length > System.Byte.MaxValue)
            {
                return null;
            }
            SuspiciousInfo si = new SuspiciousInfo();
            si.relatedXbox = mpuids;
            si.relatedUser = upuids;
            System.Text.ASCIIEncoding AE = new System.Text.ASCIIEncoding();
            si.message = AE.GetBytes(message);

            return si;
        }


        protected bool GetFlushedTrust(uint users, out UserTrustRatings[] utr)
        {
            utr = null;
            if (0 == users) return false;

            Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.xarbInh, "exec :xarbInh FlushTrustUpdates");
            System.Threading.Thread.Sleep(new TimeSpan(0, 0, 0, 1, 0));

            utr = new UserTrustRatings[users];
            for (int i = 0; i < users; i++)
            {
                if (false == UodbWS.GetUserTrustRatings(XArbGlobal.defaultUserPuids[i].Puid, XArbGlobal.myTitleTrustConstants.titleId, out utr[i]))
                {
                    return false;
                }
            }

            return true;
        }

        protected bool DecayCVars(UserTrustRatings utr, UserTrustRatings utrBefore, UserTrustRatings utrAfter)
        {
            TimeSpan deltaT = utrAfter.changeDatetime - utrBefore.changeDatetime;
            utr.c1_SuccessfulSessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c2_MinoritySessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c3_FailedSessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c4_ProblematicSessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c5_UDPReportCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c6_DisconnectCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c7_Type1SuspiciousCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c8_Type2SuspiciousCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c9_Type3SuspiciousCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);

            return true;
        }
        protected bool TrustModifiedIncrement(ref double target, XRLRegister register)
        {
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(register);
            if (null == myDebugResultResponse)
            {
                return false;
            }
            return TrustModifiedIncrement(ref target, register, myDebugResultResponse.sessionSeconds);
        }

        protected bool TrustModifiedIncrement(ref double target, XRLRegister register, double sessionSeconds)
        {
            if (register == null) return false;
            double amp = 1.0;
            if ((register.flags & XRLRegister.Flags.IsTournament) == XRLRegister.Flags.IsTournament)
            {
                amp = XArbGlobal.myTitleTrustConstants.userCompetitionAmp;
            }
            if ((register.flags & XRLRegister.Flags.PublisherBasedTournament) == XRLRegister.Flags.PublisherBasedTournament)
            {
                amp = XArbGlobal.myTitleTrustConstants.publisherCompetitionAmp;
            }
            target += TrustMod(sessionSeconds, XArbGlobal.myTitleTrustConstants.baseSessionTime) * (float)amp;
            return true;
        }

        protected bool CompareTrustPrediction(UserTrustRatings[] prediction, UserTrustRatings[] actual)
        {
            if ((null == prediction) || (null == actual) || (prediction.Length != actual.Length)) return false;

            for (int i = 0; i < prediction.Length; i++)
            {
                Type type = typeof(UserTrustRatings);
                foreach (FieldInfo field in type.GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
                {
                    if (false == field.GetValue(actual[i]).Equals(field.GetValue(prediction[i])))
                    {
                        double percentDiff = 0.0;
                        if (field.FieldType == typeof(double))
                        {
                            double d1 = (double)field.GetValue(actual[i]);
                            double d2 = (double)field.GetValue(prediction[i]);
                            if ((d1 == 0.0) || (d2 == 0.0))
                            {
                                percentDiff = (d1 + d2);
                            }
                            else
                            {
                                percentDiff = Math.Abs(d2 - d1) / d2;
                            }
                            if (percentDiff < 0.000001)
                            {
                                continue;
                            }
                        }
                        //ConsoleX.WriteLine("user="+i+" "+field.ToString()+"="+field.GetValue(prediction[i])+"!="+field.GetValue(actual[i]));
                        return false;
                    }
                }
            }

            return true;
        }

        protected bool PrepareUserTrustRating(uint users, double c_watermark, uint total_session_watermark, TimeSpan stale)
        {
            if (users == 0) return false;

            UserTrustRatings utr = new UserTrustRatings();
            utr.changeDatetime = UodbWS.GetUTCDate();
            utr.changeDatetime = utr.changeDatetime.Subtract(stale);
            utr.c1_SuccessfulSessionCount = c_watermark;
            utr.c2_MinoritySessionCount = c_watermark;
            utr.c3_FailedSessionCount = c_watermark;
            utr.c4_ProblematicSessionCount = c_watermark;
            utr.c5_UDPReportCount = c_watermark;
            utr.c6_DisconnectCount = c_watermark;
            utr.c7_Type1SuspiciousCount = c_watermark;
            utr.c8_Type2SuspiciousCount = c_watermark;
            utr.c9_Type3SuspiciousCount = c_watermark;
            utr.sessionBase = total_session_watermark;
            utr.sessionFreeForAll = total_session_watermark;
            utr.sessionSeconds = total_session_watermark;
            utr.sessionXboxCount = total_session_watermark;
            utr.totalCompetitionNoShows = total_session_watermark;
            utr.totalCompetitions = total_session_watermark;
            utr.totalSessionDisconnects = total_session_watermark;
            utr.totalSessions = total_session_watermark;

            for (int i = 0; i < users; i++)
            {
                utr.puid = XArbGlobal.defaultUserPuids[i].Puid;
                utr.titleId = XArbGlobal.myTitleTrustConstants.titleId;
                if (false == UodbWS.SetUserTrustRatings(utr))
                {
                    return false;
                }
            }

            return true;
        }


        protected static void HexDump(string label, byte[] b)
        {
            Console.Write(label + ": ");
            for (int c = 0; c < b.GetLength(0); c++)
            {
                Console.Write(b[c].ToString("X2"));
            }
            Console.WriteLine();
        }

        public static double Fermi(double x, double k)
        {
            return 1 / (1 + Math.Exp((-x) / k));
        }

        public static float TrustMod(double sessionSeconds, uint baseSessionTime)
        {
            if (0 == baseSessionTime) return 1.0f;
            return (float)(1.0 + Math.Log(Math.Max(1.0, sessionSeconds / baseSessionTime)));
        }

        public static double Decay(uint deltaT, uint lambda)
        {
            return Math.Exp(-((double)deltaT / (double)lambda));
        }

        public void SendFDXmgmtCmd(string cmd)
        {
            Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.xarb, cmd);
        }
        public static string GetbucketServer(uint bucketid)
        {

            IBucketServer bucket = Config.GetBucketServer(Interface.xarbInh, bucketid);
            return (bucket.CurrentServerName);
        }

        public static string GetServerBySessionId(ulong sessionId)
        {
            uint partition = Config.GetBucketNum(Interface.xarbInh, sessionId);
            IBucketServer bucket = Config.GetBucketServer(Interface.xarbInh, partition);
            return (bucket.CurrentServerName);
        }

        public static bool SendXmgmtCmdByIPEndPoint(System.Net.IPEndPoint serverEP, string command, out string response)
        {
            string serverName = System.Net.Dns.GetHostEntry(serverEP.Address).HostName.Split('.')[0];
            return (SendXmgmtCmdByServerName(serverName, command, out response));
        }

        public static bool SendXmgmtCmdByServerName(string serverName, string command, out string response)
        {
            // HostNames only, no IPs in serverName
            IInterfaceInfo ifc = Config.GetInterface(serverName, Interface.xmgmtsrv);
            IPEndPoint ipEndPoint = new IPEndPoint(ifc.IPAddress, ifc.Port);
            bool Succeeded = ManagementConsole.Execute(ipEndPoint, command, out response);
            if (response != null && response.Length > 1)
            {
                Global.RO.Debug(response.Trim());
            }
            return (Succeeded);
        }

        public static ulong CreateServerMappedSessionId(string targetServerName, int targetBucket)
        {
            targetServerName = targetServerName.ToLower();
            ulong sessionId;
            string actualServerName = "";
            do
            {
                sessionId = ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.NextUlong();
                uint foundBucket = Config.GetBucketNum(Interface.xarbInh, sessionId);
                if (foundBucket == targetBucket)
                {
                    IBucketServer ibucket = Config.GetBucketServer(Interface.xarbInh, foundBucket);
                    actualServerName = ibucket.CurrentServerName;
                }
            } while (actualServerName.ToLower().Trim() != targetServerName.ToLower().Trim());
            return (sessionId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\mmftest\Class1.cs ===
using System;
using MemoryMappedFile;

namespace mmftest
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	class Class1
	{
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main(string[] args)
		{

            uint addr = 0;
            MMF mmfprime = new MMF();

            mmfprime.Create(100);
            unsafe
            {
                byte * data = mmfprime.GetData();
                addr = (uint) data;
            }

            Console.WriteLine("First Address: 0x" + addr.ToString("x"));

            for(int i = 0; i < 10000; ++i)
            {
                MMF mmf = new MMF();

                mmf.Create(100);
                byte b = 100;
                unsafe
                {
                    byte * data = mmf.GetData();
                    addr = (uint) data;
                    data[0] = b;
                    data[0]++;
                    b = data[0];
                }
                Console.WriteLine("Address: 0x" + addr.ToString("x"));
                mmf.Close();
            }

            unsafe
            {
                byte * data = mmfprime.GetData();
                addr = (uint) data;
            }

            Console.WriteLine("Last Address: 0x" + addr.ToString("x"));
            mmfprime.Close();
			//
			// TODO: Add code to start application here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\MsgToolSuite.cs ===
﻿using System;
using ServerTestFramework;
using ServerTestFramework.Database;
using System.Data.SqlClient;

using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;
using xonline.common.config;

[assembly: RootNode(typeof(MsgToolTest.MsgToolSuite))]

namespace MsgToolTest
{
    [Owner("wshee"), TestFrequency("Regression"), TestCasePriority(3), ServerTestFramework.Description("MsgTool - Tests for the command line utility")]
    public class MsgToolSuite : TestNode
    {
        string c_settingName = "stringsvr_loadStringsInterval";
        int m_NewLoadInterval = 10000;
        int m_PreviousLoadInterval = 0;
        string m_Environment;

        public override void PreRun()
        {
            MsgToolTestConfig.ParseConfig();

            m_Environment = Global.XEnv.GetEnv().ToLower();

            // Safeguard against deleting the row in Deinitialize in case of an exception
            m_PreviousLoadInterval = m_NewLoadInterval;

            // Create NPDB connection
            SqlDataReader reader;
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            // Check if an override already exists
            string query = String.Format(
                "SELECT vc_value FROM t_setting_overrides WHERE vc_environment='{0}' AND vc_setting='{1}'",
                m_Environment,
                c_settingName
                );
            npdb.ReadData(query, out reader);
            if (reader.Read())
            {
                m_PreviousLoadInterval = int.Parse(reader[0].ToString());

                if (m_PreviousLoadInterval == m_NewLoadInterval)
                    Global.RO.Info("NPDB setting {0} already has desired value of {1} ms", c_settingName, m_NewLoadInterval);
                else
                    Global.RO.Info("Saved existing override value of {0} ms", m_PreviousLoadInterval);
            }
            else
            {
                m_PreviousLoadInterval = 0;
            }
            reader.Close();

            if (m_PreviousLoadInterval != m_NewLoadInterval)
            {
                // Set our own override
                Global.RO.Info("Setting {0} to {1} ms for environment {2}", c_settingName, m_NewLoadInterval, m_Environment);

                if (m_PreviousLoadInterval == 0)
                {
                    npdb.IssueCommand(String.Format(
                        "INSERT INTO t_setting_overrides VALUES('{0}', 'ALL', -1, 'ALL', '{1}', '{2}')",
                        m_Environment,
                        c_settingName,
                        m_NewLoadInterval
                        ));
                }
                else
                {
                    npdb.IssueCommand(String.Format(
                        "UPDATE t_setting_overrides SET vc_value={0} WHERE vc_environment='{1}' AND vc_setting='{2}'",
                        m_NewLoadInterval,
                        m_Environment,
                        c_settingName
                        ));
                }
            }

            npdb.Close();
        }

        public override void PostRun()
        {
            if (m_PreviousLoadInterval == m_NewLoadInterval)
                return;

            // Create NPDB connection
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            // Restore the original override
            Global.RO.Info("Restoring {0} to {1} ms for environment {2}", c_settingName, m_PreviousLoadInterval, m_Environment);

            if (m_PreviousLoadInterval == 0)
            {
                npdb.IssueCommand(String.Format(
                    "DELETE FROM t_setting_overrides WHERE vc_environment='{0}' AND vc_setting='{1}'",
                    m_Environment,
                    c_settingName
                    ));
            }
            else
            {
                npdb.IssueCommand(String.Format(
                    "UPDATE t_setting_overrides SET vc_value={0} WHERE vc_environment='{1}' AND vc_setting='{2}'",
                    m_PreviousLoadInterval,
                    m_Environment,
                    c_settingName
                    ));
            }

            npdb.Close();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\MsgToolBase.cs ===
using System;
using System.Xml;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.STFTools;
using xonline.common.utilities;

namespace MsgToolTest
{
    /// <summary>
    /// Base Test class that defines pathing and verification.
    /// </summary>
    abstract public class MsgToolBase : ToolsTestBase
    {
        #region Helper ProcessExecution helper

        protected delegate void MsgToolDelegate();

        protected void MsgToolExpectErrorString(string errorString, MsgToolDelegate msgToolDelegate)
        {
            try
            {
                msgToolDelegate();
                // Tool should have failed!
                Global.RO.Error("MsgTool.exe succeeded when it should have failed.");
            }
            catch(MsgToolException)
            {
                if (msgTool.Output.Contains(errorString))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                else
                {
                    Global.RO.Error("MsgTool.exe did not return expected string.");
                    throw;
                }
            }
        }

        #endregion

        public const uint DashboardTitleId = 0xFFFE07D1;

        protected ServerTestFramework.STFTools.MsgTool msgTool = null;

        // When creating new users with UodbWS, there is a delay between when the users
        // are created and when MsgTool can determine they are valid.  Empirically,
        // this seemed to always be 30 seconds or less, so we choose 35 to be safe.
        //
        // TODO: Investigate what causes this delay
        //
        protected TimeSpan c_BulkCreationWait = new TimeSpan(0, 0, 35);        

        protected string MakeLongString(string Core, int Count)
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder(Core.Length * Count);
            for (int idx=0;idx < Count;idx++)
            {
                sb.Append(Core);
            }
            return sb.ToString();
        }

        /// <summary>
        /// Delete all messages in the queue for the given Gamertag
        /// </summary>
        /// <param name="gamertag">Gamertag of the user message queue to clear</param>
        /// <returns>True if successful or nothing to delete, false in case of failure</returns>
        protected bool DeleteAllUserMessages(string gamertag)
        {
            UserMessages userMsgs = msgTool.EnumUserMsg(gamertag);

            if (userMsgs.Count != 0)
            {
                Global.RO.Info("User {0} has {1} existing messages; deleting...", gamertag, userMsgs.Count);
                foreach (UserMessage message in userMsgs)
                {
                    msgTool.DeleteUserMsg(message.msgID, gamertag);
                }
                if (msgTool.EnumUserMsg(gamertag).Count != 0)
                {
                    Global.RO.Warn("Delete of existing messages failed.");
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Delete all system messages
        /// </summary>
        /// <returns>True if successful or nothing to delete, false in case of failure</returns>
        protected bool DeleteAllSystemMessages()
        {
            MessageEntries sysMsgs = msgTool.EnumSystemMsg();

            if (sysMsgs.Count != 0)
            {
                Global.RO.Info("There are {0} system messages; deleting...", sysMsgs.Count);
                foreach (MessageEntry message in sysMsgs)
                {
                    msgTool.DeleteMsg(message.msgID, 0);
                }
                if (msgTool.EnumSystemMsg().Count != 0)
                {
                    Global.RO.Warn("Delete of existing messages failed.");
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Delete all system messages
        /// </summary>
        /// <returns>True if successful or nothing to delete, false in case of failure</returns>
        protected bool DeleteAllTitleMessages(uint titleId)
        {
            MessageEntries titleMsgs = msgTool.EnumTitleMsg(titleId);

            if (titleMsgs.Count != 0)
            {
                Global.RO.Info("There are {0} system messages; deleting...", titleMsgs.Count);
                foreach (MessageEntry message in titleMsgs)
                {
                    msgTool.DeleteMsg(message.msgID, titleId);
                }
                if (msgTool.EnumTitleMsg(titleId).Count != 0)
                {
                    Global.RO.Warn("Delete of existing messages failed.");
                    return false;
                }
            }

            return true;
        }

        protected bool VerifyMessageStrings(Dictionary<ushort, string> expectedValues)
        {
            return VerifyMessageStrings(expectedValues, MsgToolTestConfig.GamerTag, MsgToolTestConfig.Puid);
        }

        /// <summary>
        /// Looks at the first message in a user's message queue, extracts the corresponding
        /// string ID for StringSvr, and then compares every string with that ID to the passed
        /// list of expected values.
        /// </summary>
        /// <param name="expectedValues">List of strings that should be present, indexed by Xbox 1 locale value</param>
        /// <param name="gamerTag">Gamertag of user to get the first message from</param>
        /// <param name="puid">Puid of the user to get the first message from</param>
        /// <returns>True if the string retrieval and comparison succeeded, false otherwise</returns>
        protected bool VerifyMessageStrings(Dictionary<ushort, string> expectedValues, string gamerTag, ulong puid)
        {
            Global.RO.Info("Verifying {0} strings for gamertag {1} ...", expectedValues.Count, gamerTag);

            // Load the message from the service
            PNUser user = new PNUser(gamerTag, puid, new PNXbox(false));
            ServerTestFramework.LiveService.Notification.UserMsgFolder msgFolder =
                new ServerTestFramework.LiveService.Notification.UserMsgFolder(user);
            msgFolder.Load();

            // Create a copy of the message with the detailed information we need
            ServerTestFramework.LiveService.Notification.UserMessage detailsMsg =
                ServerTestFramework.LiveService.Notification.UserMessage.CreateBlank();
            detailsMsg.GetDetails(user, msgFolder.FirstMessage.ID, 0, 0);

            // Retrieve the string ID
            uint stringId = detailsMsg.Details.GetStringIdProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT);
            Global.RO.Info("stringId = {0}", stringId);

            // Disconnect the user
            user.Disconnect();

            bool fResult = true;
            NpdbUtility npdb = new NpdbUtility();
            npdb.ConnectToServer();

            StringServerStrings strings = npdb.GetStringsByID(stringId);

            foreach (KeyValuePair<ushort, string> expectedValue in expectedValues)
            {
                bool fFoundMatch = false;
                foreach (StringServerString s in strings)
                {                    
                    if (s.Locale == Locale.LocaleFromv1LanguageId(expectedValue.Key))
                    {
                        if (s.Value == expectedValue.Value)
                            fFoundMatch = true;
                        else
                            Global.RO.Error(
                                "Mismatch for locale {0} ({1}): expected \"{2}\", got \"{3}\"",
                                s.Locale,
                                expectedValue.Key,
                                expectedValue.Value,
                                s.Value
                                );
                        break;
                    }
                }

                if (!fFoundMatch)
                {
                    fResult = false;
                    break;
                }
            }

            npdb.Close();

            return fResult;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\PositiveTests.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.STFTools;
using System.IO;

using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;
using xonline.common.config;

namespace MsgToolTest
{
    /// <summary>
    /// Summary description for PositiveTests.
    /// </summary>
    [TestGroup]
    [Owner("codyluit"), TestFrequency("Regression"), EnvRequirement("Tools")]
    public class PositiveTests : TestNode
    {
        [TestCase,Description("Add new string to NPDB"),DVT,TestCasePriority(1),TestFrequency("Daily")]
        class AddNewString : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                ServerTestFramework.Database.NpdbUtility npdb = new ServerTestFramework.Database.NpdbUtility();
                Global.RO.Info("NPDB: " + Global.CurrentEnvironment.NpdbIp);
                npdb.ConnectToServer();

                ServerTestFramework.Database.StringServerStrings serverStrings = npdb.GetStringsByID(MsgToolTestConfig.StringId);
                if (serverStrings.Count > 0)
                {
                    // clear server strings...
                    npdb.IssueCommand(String.Format(
                        "DELETE FROM t_stringsvr_strings WHERE i_string_id={0}",
                        (int)MsgToolTestConfig.StringId
                        ));

                }

                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                msgTool.AddString(
                    MsgToolTestConfig.StringId,
                    MsgToolTestConfig.GetTestString((int)StringLanguage.english),
                    StringLanguage.english
                    );
                serverStrings = npdb.GetStringsByID(MsgToolTestConfig.StringId);
                // count should be 2 now... 1 english string and 1 default string (1 for each of 2 titles)
                Global.RO.Info(String.Format("Testing added strings.  Should be 2:{0}", serverStrings.Count));
                if (serverStrings.Count != 2)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                msgTool.AddString(
                    MsgToolTestConfig.StringId,
                    MsgToolTestConfig.GetTestString((int)StringLanguage.japanese),
                    StringLanguage.japanese
                    );
                serverStrings = npdb.GetStringsByID((uint)MsgToolTestConfig.StringId);

                // Currently this will make 4 strings due to a Ja-jp/jp-jp bug with Japanese strings.
                Global.RO.Info(String.Format("Testing added strings.  Should be 4:{0}", serverStrings.Count));

                if (serverStrings.Count == 4)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                msgTool = null;
                npdb.Close();
            }
        }

        [TestCase,Description("Add and delete a system message"),TestCasePriority(1),TestFrequency("Daily")]
        class SystemMsgAddDelete : MsgToolBase
        {
            protected override void Execute()
            {
                MessageEntries sysMsgs;
                ResultCode = TEST_RESULTS.FAILED;

                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                DeleteAllSystemMessages();

                Global.RO.Info("Adding string.");
                msgTool.AddString(MsgToolTestConfig.StringId, MsgToolTestConfig.GetTestString(1), StringLanguage.english);

                Global.RO.Info("Adding message.");
                msgTool.SendSystemMsg(MsgToolTestConfig.StringId, DateTime.Today.AddDays(2).ToString("d"));

                sysMsgs = msgTool.EnumSystemMsg();
                if (sysMsgs.Count != 1)
                {
                    Global.RO.Error("Number of system strings {0} is different than expected: 1", sysMsgs.Count);
                }
                else
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                DeleteAllSystemMessages();
                msgTool = null;
            }
        }

        [TestCase,Description("Add a system message and then revoke it"),TestCasePriority(2),TestFrequency("Daily")]
        class SystemMsgAddRevoke : MsgToolBase
        {
            protected override void Execute()
            {
                MessageEntries sysMsgs;
                ResultCode = TEST_RESULTS.FAILED;

                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                sysMsgs = msgTool.EnumSystemMsg();
                if (sysMsgs.Count != 0)
                {
                    Global.RO.Info("System message exists... deleting them...");

                    foreach (MessageEntry message in sysMsgs)
                    {
                        msgTool.DeleteMsg(message.msgID, 0);
                    }
                    if (msgTool.EnumSystemMsg().Count != 0)
                    {
                        Global.RO.Warn("Delete of existing messages failed.");
                        return;
                    }
                }
                msgTool.SendSystemMsg(MsgToolTestConfig.StringId, DateTime.Today.AddDays(2).ToString("d"));
                Global.RO.Info("Adding message.");
                sysMsgs = msgTool.EnumSystemMsg();
                if (sysMsgs.Count == 1)
                {
                    foreach (MessageEntry message in sysMsgs)
                    {
                        Global.RO.Info(String.Format("Deleting message: {0}", message.msgID));
                        msgTool.RevokeMsg(message.msgID, 0);
                    }
                    ResultCode = TEST_RESULTS.PASSED;
                }
                msgTool = null;
            }
        }

        [TestCase,Description("Sends a title-wide message"),TestCasePriority(2),TestFrequency("Daily")]
        class TitleMsg : MsgToolBase
        {
            protected override void Execute()
            {
                MessageEntries titleMsgs;
                ResultCode = TEST_RESULTS.FAILED;

                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                titleMsgs = msgTool.EnumTitleMsg(MsgToolTestConfig.TitleId);
                if (titleMsgs.Count != 0)
                {
                    Global.RO.Info("System message exists... deleting them...");
                    foreach (MessageEntry message in titleMsgs)
                    {
                        msgTool.DeleteMsg(message.msgID, MsgToolTestConfig.TitleId);
                    }
                    if (msgTool.EnumTitleMsg(MsgToolTestConfig.TitleId).Count != 0)
                    {
                        Global.RO.Warn("Delete of existing messages failed.");
                        return;
                    }
                }
                msgTool.SendTitleMsg(MsgToolTestConfig.StringId,MsgToolTestConfig.TitleId, DateTime.Today.AddDays(2).ToString("d"));
                Global.RO.Info("Adding message.");
                titleMsgs = msgTool.EnumTitleMsg(MsgToolTestConfig.TitleId);
                Global.RO.Info(String.Format("There are {0} title messages for title 0x{1:x}", titleMsgs.Count, MsgToolTestConfig.TitleId));
                if (titleMsgs.Count == 1)
                {
                    foreach (MessageEntry message in titleMsgs)
                    {
                        Global.RO.Info(String.Format("Deleting message: {0}", message.msgID));
                        msgTool.DeleteMsg(message.msgID, MsgToolTestConfig.TitleId);
                    }
                    ResultCode = TEST_RESULTS.PASSED;
                }
                msgTool = null;
            }
        }

        [TestCase,Description("Sends a normal message to a user by gamertag"),TestCasePriority(2)]
        class UserMsgByTag : MsgToolBase
        {
            protected override void Execute()
            {
                UserMessages userMsgs;
                ResultCode = TEST_RESULTS.FAILED;

                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // Find existing user messages and delete them...
                userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);
                if (userMsgs.Count != 0)
                {
                    Global.RO.Info("System message exists... deleting them...");
                    foreach (UserMessage message in userMsgs)
                    {
                        msgTool.DeleteUserMsg(message.msgID, MsgToolTestConfig.GamerTag);
                    }
                    if (msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag).Count != 0)
                    {
                        Global.RO.Warn("Delete of existing messages failed.");
                        return;
                    }
                }

                // Send message to user...
                msgTool.SendUserMsg(MsgToolTestConfig.StringId,MsgToolTestConfig.GamerTag, DateTime.Today.AddDays(2).ToString("d"));
                Global.RO.Info("Adding message.");

                // check messages on user to make sure ours got added...
                userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);
                Global.RO.Info(msgTool.Output);
                String[] output=msgTool.Output.Split('\n');
                Global.RO.Info(output.Length.ToString());
                for (int i=0;i<output.Length;i++)
                {
                    Global.RO.Info(i.ToString() + "- " + output[i]);
                }

                Global.RO.Info(String.Format("There are {0} user messages for user: {1}", userMsgs.Count, MsgToolTestConfig.GamerTag));
                if (userMsgs.Count == 1)
                {
                    foreach (UserMessage message in userMsgs)
                    {
                        Global.RO.Info(String.Format("Deleting message: {0}", message.msgID));
                        msgTool.DeleteUserMsg(message.msgID, MsgToolTestConfig.GamerTag);
                    }
                    ResultCode = TEST_RESULTS.PASSED;
                }
                msgTool = null;
            }
        }
    } // Positive Tests
} // Namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\MsgToolTestConfig.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Xml;

using ServerTestFramework;
using ServerTestFramework.Database;
using xonline.common.utilities;

namespace MsgToolTest
{
    public static class MsgToolTestConfig
    {
        static string m_ToolPath, m_InputFilePath, m_GamerTag;
        static uint m_TitleId, m_StringId;
        static ulong m_Puid;
        static Dictionary<ushort, string> m_TestStrings;
        static bool m_Initialized;
        static ushort m_MaxLocaleId;

        public static string ToolPath
        {
            get { return m_ToolPath; }
        }

        public static string InputFilePath
        {
            get { return m_InputFilePath; }
        }

        public static string GamerTag
        {
            get { return m_GamerTag; }
        }

        public static uint TitleId
        {
            get { return m_TitleId; }
        }

        public static uint StringId
        {
            get { return m_StringId; }
        }

        public static ulong Puid
        {
            get { return m_Puid; }
        }

        public static ushort MaxLocaleId
        {
            get { return m_MaxLocaleId; }
        }

        static MsgToolTestConfig()
        {
            m_TestStrings = new Dictionary<ushort, string>();
            m_Initialized = false;
            m_MaxLocaleId = (ushort)Locale.v1LanguageID.russian;
        }

        public static string GetTestString(ushort langId)
        {
            return m_TestStrings[langId];
        }

        public static void ParseConfig()
        {
            System.Xml.XmlTextReader xmlReader = new System.Xml.XmlTextReader("InputFiles\\MsgTool\\MsgToolTest.xml");
            xmlReader.WhitespaceHandling = System.Xml.WhitespaceHandling.None;
            xmlReader.MoveToContent();

            System.Xml.XmlDocument config = new System.Xml.XmlDocument();
            config.Load(xmlReader);

            ParseConfig(config);
        }

        public static void ParseConfig(XmlDocument config)
        {
            if (m_Initialized)
                return;

            XmlNode baseConfigNode = config.SelectSingleNode("//MsgToolTest");
            XmlNode node = null;

            // DefaultToolPath
            node = ReadNodeOrThrow(baseConfigNode, "DefaultToolPath");
            m_ToolPath = Path.Combine(node.InnerText, "MsgTool.exe");

            // TitleID
            node = ReadNodeOrThrow(baseConfigNode, "TitleID");
            string titleId = node.InnerText;

            if (titleId.StartsWith("0x", StringComparison.InvariantCultureIgnoreCase))
                titleId = titleId.Substring(2);

            if (Regex.IsMatch(titleId, @"[A-Fa-f]"))
                m_TitleId = uint.Parse(titleId, System.Globalization.NumberStyles.HexNumber);
            else
                m_TitleId = uint.Parse(titleId);

            // InputFilePath
            node = ReadNodeOrThrow(baseConfigNode, "InputFilePath");
            m_InputFilePath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), node.InnerText);

            if (!Directory.Exists(m_InputFilePath))
                Directory.CreateDirectory(m_InputFilePath);

            // StringID
            node = ReadNodeOrThrow(baseConfigNode, "StringID");
            m_StringId = uint.Parse(node.InnerText.Trim());

            // GamerTag
            node = baseConfigNode.SelectSingleNode("GamerTag");
            if (node == null)
            {
                // Create a new user
                BulkUserSet userSet;
                UodbWS.CreateBulkUsers("MT", 1, out userSet);
                m_GamerTag = userSet.IndexToGamertag(0);
                m_Puid = userSet.IndexToPuid(0);

                Global.RO.Info("Created GamerTag \"{0}\" with PUID 0x{1:X016}", m_GamerTag, m_Puid);
            }
            else
            {
                // Use the specified GamerTag and look up the PUID
                m_GamerTag = node.InnerText.Trim();
                m_Puid = UodbWS.GetUserIDFromGamerTag(m_GamerTag);

                Global.RO.Info("Using existing GamerTag \"{0}\" with PUID 0x{1:X016}", m_GamerTag, m_Puid);
            }

            // Test Strings
            for (ushort i = 1; i <= m_MaxLocaleId; ++i)
            {
                node = baseConfigNode.SelectSingleNode(String.Format("TestStrings/TestString[@id='{0}']", i));
                if (node != null)
                    m_TestStrings.Add(i, node.InnerText.Trim());
                else
                    m_TestStrings.Add(i, String.Format("Test string for locale {0}", i));
            }

            m_Initialized = true;
        }

        private static XmlNode ReadNodeOrThrow(XmlNode config, string nodeXpath)
        {
            XmlNode node = config.SelectSingleNode(nodeXpath);

            if (node == null)
                throw new Exception(String.Format("Test config node \"{0}\" not found!", nodeXpath));

            return node;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\XmlFormatPositiveTests.cs ===
using System;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.STFTools;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using System.IO;

using Microsoft.Webstore.WstClient;
using MsgToolXmlCreator;
using xonline.common.sql.webstore;
using xonline.common.config;
using xonline.common.utilities;

namespace MsgToolTest
{
    [TestGroup]
    [Owner("wshee"), TestFrequency("Regression"), EnvRequirement("Tools")]
    public class XmlFormatPositiveTests : TestNode
    {
        [TestCase,Description("Sends a system message via XML"),TestCasePriority(1),TestFrequency("BVT")]
        class XmlSystemMessage : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "XmlSystemMessage");

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.System;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                for (ushort i = 1; i <= MsgToolTestConfig.MaxLocaleId; ++i)
                {
                    string msgString = String.Format("System message via XML, locale {0}", i);
                    msgToolXml.Messages.Add(i, msgString);
                    expectedValues.Add(i, msgString);

                    if (i == 1)
                        expectedValues.Add(0, msgString);
                }

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                FriendsCommon fc = new FriendsCommon();
                PNUser user = new PNUser(MsgToolTestConfig.GamerTag, MsgToolTestConfig.Puid, new PNXbox());
                fc.LogonUser(user);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Sends a title message via XML"),TestCasePriority(2),TestFrequency("Daily")]
        class XmlTitleMessage : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "XmlTitleMessage");

                FriendsCommon fc = new FriendsCommon();
                PNUser user = new PNUser(MsgToolTestConfig.GamerTag, MsgToolTestConfig.Puid, new PNXbox());
                fc.LogonUser(user, MsgToolTestConfig.TitleId);

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.Title;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                for (ushort i = 1; i <= MsgToolTestConfig.MaxLocaleId; ++i)
                {
                    string msgString = String.Format("Title message via XML, locale {0}", i);
                    msgToolXml.Messages.Add(i, msgString);
                    expectedValues.Add(i, msgString);

                    if (i == 1)
                        expectedValues.Add(0, msgString);
                }

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                fc.LogoffUser(user);
                fc.LogonUser(user, MsgToolTestConfig.TitleId);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Sends a normal message to a user via XML"),TestCasePriority(2)]
        class XmlUserMessage : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "XmlUserMessage");

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.User;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                for (ushort i = 1; i <= MsgToolTestConfig.MaxLocaleId; ++i)
                {
                    string msgString = String.Format("User message via XML, locale {0}", i);
                    msgToolXml.Messages.Add(i, msgString);
                    expectedValues.Add(i, msgString);

                    if (i == 1)
                        expectedValues.Add(0, msgString);
                }

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Sends a normal message to six users via XML"),TestCasePriority(2)]
        class XmlUserMessageSixUsers : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // Create new users
                BulkUserSet userSet;
                UodbWS.CreateBulkUsers("MT", 6, out userSet);

                Global.RO.Info("Waiting {0} seconds for bulk user creation", c_BulkCreationWait.TotalSeconds);
                System.Threading.Thread.Sleep(c_BulkCreationWait);

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "XmlUserMessageSixUsers");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.User;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                for (ushort i = 1; i <= MsgToolTestConfig.MaxLocaleId; ++i)
                {
                    string msgString = String.Format("User message via XML with six users, locale {0}", i);
                    msgToolXml.Messages.Add(i, msgString);
                    expectedValues.Add(i, msgString);

                    if (i == 1)
                        expectedValues.Add(0, msgString);
                }

                // Add the recipients.  We will alternate between just Gamertag,
                // just PUID, and both.  This is based on index % 3, as follows:
                //      0 - Just Gamertag
                //      1 - Just PUID
                //      2 - Gamertag and PUID
                //
                for (uint i = 0; i < userSet.Count; ++i)
                {
                    MsgToolRecipient recipient = new MsgToolRecipient();

                    if (i % 3 != 1)
                        recipient.Gamertag = userSet.IndexToGamertag(i);

                    if (i % 3 != 0)
                        recipient.Puid = userSet.IndexToPuid(i);

                    msgToolXml.Recipients.Add(recipient);
                }

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper strings are in the database
                bool fTestPassed = true;
                for (uint i = 0; i < userSet.Count; ++i)
                {
                    UserMessages userMsgs = msgTool.EnumUserMsg(userSet.IndexToGamertag(i));

                    if (userMsgs.Count != 1)
                    {
                        Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                        fTestPassed = false;
                        break;
                    }

                    if (!VerifyMessageStrings(expectedValues, userSet.IndexToGamertag(i), userSet.IndexToPuid(i)))
                    {
                        fTestPassed = false;
                        break;
                    }
                }

                if (fTestPassed)
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Sends a normal message with replacable tokens to six users via XML"),TestCasePriority(2)]
        class XmlUserMessageSixUsersWithTokens : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // Create new users
                BulkUserSet userSet;
                UodbWS.CreateBulkUsers("MT", 6, out userSet);

                Global.RO.Info("Waiting {0} seconds for bulk user creation", c_BulkCreationWait.TotalSeconds);
                System.Threading.Thread.Sleep(c_BulkCreationWait);

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "XmlUserMessageSixUsersWithTokens");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.User;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.UseTokens = true;

                // Define the base message strings with the literal {0} and {1} chars
                for (int i = 1; i <= MsgToolTestConfig.MaxLocaleId; ++i)
                {
                    string msgString = String.Format("User message via XML with tokens, locale {0}, gamertag {{0}}, puid {{1}}", i);
                    msgToolXml.Messages.Add(i, msgString);
                }

                // Each user has an expected string for each locale.  Each string should have the
                // appropriate locale value plus the user's gamertag and puid
                //
                List<Dictionary<ushort, string>> expectedValuesList = new List<Dictionary<ushort, string>>((int)userSet.Count);
                for (uint i = 0; i < userSet.Count; ++i)
                {
                    Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                    for (ushort j = 0; j <= MsgToolTestConfig.MaxLocaleId; ++j)
                    {
                        expectedValues.Add(
                            j,
                            String.Format(
                                "User message via XML with tokens, locale {0}, gamertag {1}, puid {2}",
                                j == 0 ? 1 : j,
                                userSet.IndexToGamertag(i),
                                userSet.IndexToPuid(i)
                            ));
                    }

                    expectedValuesList.Add(expectedValues);
                }

                // Add the recipients.  We will alternate between just Gamertag,
                // just PUID, and both.  This is based on index % 3, as follows:
                //      0 - Just Gamertag
                //      1 - Just PUID
                //      2 - Gamertag and PUID
                //
                for (uint i = 0; i < userSet.Count; ++i)
                {
                    MsgToolRecipient recipient = new MsgToolRecipient();

                    if (i % 3 != 1)
                        recipient.Gamertag = userSet.IndexToGamertag(i);

                    if (i % 3 != 0)
                        recipient.Puid = userSet.IndexToPuid(i);

                    recipient.AddToken(0, userSet.IndexToGamertag(i));
                    recipient.AddToken(1, userSet.IndexToPuid(i).ToString());

                    msgToolXml.Recipients.Add(recipient);
                }

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper strings are in the database
                bool fTestPassed = true;
                for (uint i = 0; i < userSet.Count; ++i)
                {
                    UserMessages userMsgs = msgTool.EnumUserMsg(userSet.IndexToGamertag(i));

                    if (userMsgs.Count != 1)
                    {
                        Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                        fTestPassed = false;
                        break;
                    }

                    if (!VerifyMessageStrings(expectedValuesList[(int)i], userSet.IndexToGamertag(i), userSet.IndexToPuid(i)))
                    {
                        fTestPassed = false;
                        break;
                    }
                }

                if (fTestPassed)
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\XmlFormatNegativeTests.cs ===
using System;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.STFTools;
using System.IO;

using Microsoft.Webstore.WstClient;
using MsgToolXmlCreator;
using xonline.common.sql.webstore;
using xonline.common.config;

namespace MsgToolTest
{
    [TestGroup]
    [Owner("wshee"), TestFrequency("Regression"), EnvRequirement("Tools")]
    public class XmlFormatNegativeTests : TestNode
    {
        #region Missing Elements

        [TestCase,Description("Invoke the tool with an empty XML input file")]
        class EmptyXmlFile : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "EmptyXmlFile");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.XmlMessage);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Root element is missing", () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                return;
            }
        }

        [TestCase,Description("XML input is missing the title ID user type element")]
        class MissingTitleIdUserType : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "MissingTitleIdUserType");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "MissingTitleIdUserType");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.TitleId);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Error: Messages of types other than System must specify a valid TitleId", 
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                return;
            }
        }

        [TestCase,Description("XML input file is missing the title ID title type element")]
        class MissingTitleIdTitleType : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "MissingTitleIdTitleType");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.Title;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "MissingTitleIdTitleType");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.TitleId);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Error: Messages of types other than System must specify a valid TitleId",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });


                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                return;
            }
        }

        [TestCase,Description("XML input file is missing the expiration date")]
        class MissingExpiration : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "MissingExpiration");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "MissingExpiration");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Expiration);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Exception text is: XML failed to parse",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                return;
            }
        }

        [TestCase,Description("XML input file is missing the entire body")]
        class MissingEntireBody : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "MissingEntireBody");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Body);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Exception text is: XML failed to parse",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                return;
            }
        }

        [TestCase,Description("XML input file is missing the recipients content")]
        class MissingRecipientsUserType : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "MissingRecipientsUserType");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "MissingRecipientsUserType");

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Recipients);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Error: The XML file for a user message must specify at least one recipient.",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                return;
            }
        }

        #endregion

        #region Missing Attributes

        [TestCase,Description("XML input file missing attributes from Recipient element")]
        class RecipientNoAttributes : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "RecipientNoAttributes");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "RecipientNoAttributes");

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Recipients);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Error: The XML file must define either an 'id' or 'tag' for all recipients",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                xml.WriteStartElement("Recipients");
                xml.WriteElementString("Recipient", String.Empty);
                xml.WriteEndElement();
            }
        }

        [TestCase,Description("XML input file with Text element missing the language ID attribute")]
        class TextNoLanguageId : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "TextNoLanguageId");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Body);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("The attribute 'language' was not specified for text",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                xml.WriteStartElement("Body");
                xml.WriteElementString("Text", "Message with no language ID");
                xml.WriteEndElement();
            }
        }

        [TestCase,Description("XML input file with Token element missing the ID attribute")]
        class TokenNoId : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "TokenNoId");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "This is a {0} message");
                msgToolXml.UseTokens = true;

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Recipients);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("WARNING: Invalid token id",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                xml.WriteStartElement("Recipients");
                xml.WriteStartElement("Recipient");
                xml.WriteAttributeString("tag", MsgToolTestConfig.GamerTag);
                xml.WriteElementString("Token", "Token with no ID");
                xml.WriteEndElement();
                xml.WriteEndElement();
            }
        }

        #endregion

        #region Empty Elements

        [TestCase, Description("XML input file with empty Title ID UserType element")]
        class EmptyTitleIdUserType : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "EmptyTitleIdUserType");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "EmptyTitleIdUserType");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.TitleId);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("ERROR: The 'http://www.xboxlive.com/msgtool:TitleId' element is invalid",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                xml.WriteElementString("TitleId", String.Empty);
            }
        }

        [TestCase, Description("XML input file with empty Title ID TitleType element")]
        class EmptyTitleIdTitleType : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "EmptyTitleIdTitleType");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.Title;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "EmptyTitleIdTitleType");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.TitleId);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("ERROR: The 'http://www.xboxlive.com/msgtool:TitleId' element is invalid",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                xml.WriteElementString("TitleId", String.Empty);
            }
        }

        [TestCase, Description("XML input file with empty body")]
        class EmptyBody : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "EmptyBody");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Body);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Exception text is: XML failed to parse",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                xml.WriteElementString("Body", String.Empty);
            }
        }

        [TestCase, Description("XML input file with empty Recipients element")]
        class EmptyRecipientsUserType : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "EmptyRecipientsUserType");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "EmptyRecipientsUserType");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Override += new MsgToolXmlOverrideEventHandler(xmlGen_Override);
                xmlGen.RegisterOverride(MsgToolXmlGeneratorSections.Recipients);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("Exception text is: XML failed to parse",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }

            void xmlGen_Override(System.Xml.XmlTextWriter xml, MsgToolXmlGeneratorSections section)
            {
                xml.WriteElementString("Recipients", String.Empty);
            }
        }

        #endregion

        #region Invalid Data

        [TestCase,Description("XML input file with message too long via hardcoded string")]
        class StaticMessageTooLong : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "StaticMessageTooLong");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.User;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, new string('W', 500));

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString(
                    "Error: The text length 500 for language 1 exceeds the maximum string length",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }
        }

        [TestCase,Description("XML input file with message too long via tokens")]
        class TokenMessageTooLong : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "TokenMessageTooLong");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.MessageType = MsgToolMessageType.User;
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "{0}");
                msgToolXml.UseTokens = true;

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                recipient.AddToken(0, new string('X', 500));
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString(
                    "WARNING: Formatted string for language (1) for recipient (" + recipient.Gamertag + ") exceeds the maximum allowed length.",
                    () => { msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]); });

                msgTool = null;
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\XmlTokenTests.cs ===
using System;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.STFTools;
using System.IO;

using Microsoft.Webstore.WstClient;
using MsgToolXmlCreator;
using xonline.common.sql.webstore;
using xonline.common.config;

namespace MsgToolTest
{
    /// <summary>
    /// Tests for per-recipient tokens within MsgTool input XML files
    /// </summary>
    [TestGroup]
    [Owner("wshee"), TestFrequency("Regression"), EnvRequirement("Tools")]
    public class XmlTokenTests : TestNode
    {
        [TestCase,Description("XML with one language, one token, and one user"),TestCasePriority(1),TestFrequency("BVT")]
        class OneLanguageOneTokenOneUser : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "OneLanguageOneTokenOneUser");
                string tokenString = "Will is awesome";

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "{0}");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                recipient.AddToken(0, tokenString);

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                expectedValues.Add(0, tokenString);
                expectedValues.Add(1, tokenString);

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("XML with one language, two tokens, and one user"),TestCasePriority(2),TestFrequency("Daily")]
        class OneLanguageTwoTokensOneUser : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "OneLanguageTwoTokensOneUser");
                string tokenString0 = "Will is awesome,";
                string tokenString1 = "yeah he is";
                string finalString = String.Format("{0} {1}", tokenString0, tokenString1);

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "{0} {1}");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                recipient.AddToken(0, tokenString0);
                recipient.AddToken(1, tokenString1);

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                expectedValues.Add(0, finalString);
                expectedValues.Add(1, finalString);

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Same token used twice")]
        class RepeatedToken : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "RepeatedToken");
                string tokenString = "Hyper";
                string finalString = String.Format("{0} {0}", tokenString);

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "{0} {0}");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                recipient.AddToken(0, tokenString);

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                expectedValues.Add(0, finalString);
                expectedValues.Add(1, finalString);

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Token with escaped curly brackets, no token value provided")]
        class EscapedBracketsNoTokens : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "EscapedBracketsNoTokens");
                string tokenString = "{{0}}";
                string finalString = String.Format(tokenString);

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, tokenString);

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                expectedValues.Add(0, finalString);
                expectedValues.Add(1, finalString);

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Token with escaped curly brackets, one token value provided")]
        class EscapedBracketsOneToken : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "EscapedBracketsOneToken");
                string tokenString = "{{0}}";
                string finalString = String.Format(tokenString);

                if (!DeleteAllUserMessages(MsgToolTestConfig.GamerTag))
                    return;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, tokenString);

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                recipient.AddToken(0, "Unused");

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                msgTool.XMLMessage(xmlGen.CreatedFilenames[0]);

                // Verify that the proper string is in the database
                UserMessages userMsgs = msgTool.EnumUserMsg(MsgToolTestConfig.GamerTag);

                if (userMsgs.Count != 1)
                {
                    Global.RO.Error("User message count was {0}, expected 1", userMsgs.Count);
                    return;
                }

                Dictionary<ushort, string> expectedValues = new Dictionary<ushort, string>();
                expectedValues.Add(0, finalString);
                expectedValues.Add(1, finalString);

                if (VerifyMessageStrings(expectedValues))
                    ResultCode = TEST_RESULTS.PASSED;

                msgTool = null;
            }
        }

        [TestCase,Description("Partial token, missing ending brace")]
        class UnmatchedBracket : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "UnmatchedBracket");
                string tokenString = "{0";
                string finalString = tokenString;

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, tokenString);

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("WARNING: Exception System.FormatException while formatting language", () => msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]));

                msgTool = null;
            }
        }

        [TestCase,Description("Two tokens in format string, no token values provided")]
        class BothTokensMissing : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "BothTokensMissing");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "{0} {1}");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("WARNING: Exception System.FormatException while formatting language", () => msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]));

                msgTool = null;
            }
        }

        [TestCase,Description("Two tokens on format string, skipping token 0 and providing token 1")]
        class TokenZeroMissing : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "TokenZeroMissing");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "{0} {1}");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                recipient.AddToken(1, "Token1");

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("ERROR: Unexpected exception System.IndexOutOfRangeException occurred.", () => msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]));

                msgTool = null;
            }
        }

        [TestCase,Description("Two tokens, providing token 0 and skipping token 1")]
        class TokenOneMissing : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                // XML file location, minus extension
                string xmlFileNoExt = Path.Combine(MsgToolTestConfig.InputFilePath, "TokenOneMissing");

                // Define the contents of the input XML
                MsgToolXml msgToolXml = new MsgToolXml();
                msgToolXml.ExpirationDate = DateTime.Today.AddDays(2);
                msgToolXml.Messages.Add(1, "{0} {1}");

                MsgToolRecipient recipient = new MsgToolRecipient();
                recipient.Gamertag = MsgToolTestConfig.GamerTag;
                recipient.AddToken(0, "Token0");

                msgToolXml.UseTokens = true;
                msgToolXml.Recipients.Add(recipient);

                // Generate the actual file
                MsgToolXmlGenerator xmlGen = new MsgToolXmlGenerator(msgToolXml);
                xmlGen.Generate(xmlFileNoExt);

                // Pass it to the tool
                MsgToolExpectErrorString("WARNING: Exception System.FormatException while formatting language", () => msgTool.CheckXMLMessage(xmlGen.CreatedFilenames[0]));

                msgTool = null;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\App\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\NegativeTests.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.STFTools;
using System.IO;

namespace MsgToolTest
{
    /// <summary>
    /// Summary description for NegativeTests.
    /// </summary>
    [TestGroup]
    [Owner("codyluit"), TestFrequency("Regression"), EnvRequirement("Tools")]
    public class NegativeTests : TestNode
    {
        [TestCase,Description("Add a string that is too long")]
        class AddNewStringSuperLong : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                using (ServerTestFramework.Database.NpdbUtility npdb = new ServerTestFramework.Database.NpdbUtility())
                {
                    npdb.ConnectToServer();
                    ServerTestFramework.Database.StringServerStrings serverStrings = npdb.GetStringsByID(MsgToolTestConfig.StringId);
                    if (serverStrings.Count > 0)
                    {
                        npdb.IssueCommand(String.Format(
                            "DELETE FROM t_stringsvr_strings WHERE i_string_id={0}",
                            (int)MsgToolTestConfig.StringId
                            ));

                    }

                    msgTool = new MsgTool();
                    msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;

                    MsgToolExpectErrorString("Adding string failed", () => msgTool.AddString(MsgToolTestConfig.StringId, MakeLongString("0123456789", 100), StringLanguage.english));

                    serverStrings = npdb.GetStringsByID(MsgToolTestConfig.StringId);
                    // count should be 0
                    Global.RO.Info(String.Format("Testing added strings. Should be 0:{0}", serverStrings.Count));

                    msgTool = null;
                }
            }
        }

        [TestCase,Description("Add a string without providing a string ID")]
        class AddStringNoID : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("messageID or lang values could not be converted", () => msgTool.RunMsgTool("/addstring /id: /text:\"test\" /lang:1"));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a string without providing the string text")]
        class AddStringNoText : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("For /addstring /id, /lang and /text must be specified", () => msgTool.RunMsgTool("/addstring /id:50001 /lang:1"));
                msgTool = null;
            }
        }


        [TestCase,Description("Add a multi-word string without putting it in quotes")]
        class AddStringNoQuotes : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Tool to add messages to the Xbox Live Messaging Service", () => msgTool.RunMsgTool("/addstring /id:50001 /text:test without quotes /lang:1"));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a string with an empty language parameter")]
        class AddStringBlankLang : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("messageID or lang values could not be converted", () => msgTool.RunMsgTool("/addstring /id:50001 /text:\"test\" /lang:"));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a string without providing the language parameter")]
        class AddStringNoLang : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("For /addstring /id, /lang and /text must be specified", () => msgTool.RunMsgTool("/addstring /id:50001 /text:\"test\" "));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with only the /addstring parameter")]
        class AddStringOnly : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("For /addstring /id, /lang and /text must be specified", () => msgTool.RunMsgTool("/addstring"));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with only the /enumtitlemsg parameter")]
        class EnumTitleOnly : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: For /enumtitlemsg, /title must be specified.", () => msgTool.RunMsgTool("/enumtitlemsg"));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with only the /revokemsg parameter")]
        class RevokeMsgOnly : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: For /deletemsg, /id and /title must be specified", () => msgTool.RunMsgTool("/revokemsg"));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with only the /enumusermsg parameter")]
        class EnumUserNoTag : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: For /enumusermsg, /user or /usertag must be specified.", () => msgTool.RunMsgTool("/enumusermsg"));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with both the /usertag and /user parameters")]
        class AddUserMsg2Tags : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Specify either /user or /usertag but not both", () => msgTool.RunMsgTool("/addusermsg /id:50001 /usertag:mytag /user:2533274801615275 /expiration:\"5/31/2006\""));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a user message with a past expiration")]
        class AddUserMsgDateinPast : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Couldn't find user by Gamertag '{0}'", () => msgTool.RunMsgTool("/addusermsg /id:50001 /usertag:{0} /expiration:\"5/31/2006\""));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a user message with an expiration too far into the future")]
        class AddUserMsgDateFutureTooFar : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Time supplied could not be used due to an issue with format or value.", () => msgTool.RunMsgTool(String.Format("/addusermsg /id:1 /usertag:{0} /expiration:{1}",MsgToolTestConfig.GamerTag,DateTime.Today.AddYears(1).ToString("d"))));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a user message with a gamertag that doesn't exist")]
        class AddUserMsgNoExistTag : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Couldn't find user by Gamertag", () => msgTool.RunMsgTool("/addusermsg /id:50001 /usertag:9xNotAGamerTag /expiration:\"5/31/2006\""));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a user message with a non-existent string ID")]
        class AddUserMsgInvalidStrID : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Couldn't find string id", () => msgTool.RunMsgTool(String.Format("/addusermsg /id:50020 /usertag:{0} /expiration:\"5/31/2006\"",MsgToolTestConfig.GamerTag)));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a title message with a non-existent string ID")]
        class AddTitleMsgInvalidStrID : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Couldn't find string id", () => msgTool.RunMsgTool(String.Format("/addtitlemsg /id:50020 /title:0xFFFE07D0 /expiration:{0}",DateTime.Today.AddDays(2).ToString("d"))));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a title message with an invalid title ID")]
        class AddTitleMsgBadTitle : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("TitleID supplied could not be converted into a usable format", () => msgTool.RunMsgTool(String.Format("/addtitlemsg /id:50001 /title:0xDDDDFFFE07D /expiration:{0}",DateTime.Today.AddDays(2).ToString("d"))));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a title message with a past expiration")]
        class AddTitleMsgDateinPast : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Time supplied could not be used due to an issue with format or value.", () => msgTool.RunMsgTool(String.Format("/addtitlemsg /id:1 /title:0xFFFE07D0 /expiration:{0}",DateTime.Today.AddDays(-1).ToString("d"))));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a title message with an expiration too far into the future")]
        class AddTitleMsgDateFutureTooFar : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Time supplied could not be used due to an issue with format or value.", () => msgTool.RunMsgTool(String.Format("/addtitlemsg /id:1 /title:0xFFFE07D0 /expiration:{0}",DateTime.Today.AddMonths(3).ToString("d"))));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a system message with a non-existent string ID")]
        class AddSysMsgInvalidStrID : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Couldn't find string id", () => msgTool.RunMsgTool(String.Format("/addsystemmsg /id:50020 /expiration:{0}",DateTime.Today.AddDays(2).ToString("d"))));
            }
        }

        [TestCase,Description("Add a system message with an expiration in the past")]
        class AddSysMsgDateinPast : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Time supplied could not be used due to an issue with format or value.", () => msgTool.RunMsgTool(String.Format("/addsystemmsg /id:1 /expiration:{0}",DateTime.Today.AddDays(-1).ToString("d"))));
                msgTool = null;
            }
        }

        [TestCase,Description("Add a system message with an expiration too far in the future")]
        class AddSysMsgDateFutureTooFar : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Time supplied could not be used due to an issue with format or value.", () => msgTool.RunMsgTool(String.Format("/addsystemmsg /id:1 /expiration:{0}",DateTime.Today.AddMonths(3).ToString("d"))));
                msgTool = null;
            }
        }

        [TestCase,Description("Enumerate title messages for an invalid title ID")]
        class EnumTitleBadTitle : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("An error occurred while attempting to use the TitleID supplied", () => msgTool.RunMsgTool("/enumtitlemsg /title:BADBADBADBAD"));
                msgTool = null;
            }
        }

        [TestCase,Description("Enumerate user messages with a non-existent gamertag")]
        class EnumUserBadTag : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: Couldn't find user by Gamertag", () => msgTool.RunMsgTool("/enumusermsg /usertag:9xNotAValidTag"));
                msgTool = null;
            }
        }

        [TestCase,Description("Enumerate user messages with nonsense for the user ID")]
        class EnumUserBadUser : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: One of the numeric values supplied could not be converted", () => msgTool.RunMsgTool("/enumusermsg /user:9xNotAValidTag"));
                msgTool = null;
            }
        }

        [TestCase,Description("Delete a title message with an invalid title ID")]
        class DeleteMsgNoID : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: For /deletemsg, /id and /title must be specified", () => msgTool.RunMsgTool("/deletemsg /title:0xFFFE07D0"));
                msgTool = null;
            }
        }

        [TestCase,Description("Delete a user message without specifying the message ID")]
        class DeleteUserMsgNoID : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: For /deleteusermsg, /id must be specified.", () => msgTool.RunMsgTool(String.Format("/deleteusermsg /usertag:{0}",MsgToolTestConfig.GamerTag)));
                msgTool = null;
            }
        }

        [TestCase,Description("Delete a user message without /user or /usertag")]
        class DeleteUserMsgNoTag : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Error: For /deleteusermsg, /user or /usertag must be specified", () => msgTool.RunMsgTool("/deleteusermsg /id:5001"));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with a non-existent XML input file")]
        class XMLFileNonexist : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Could not find file", () => msgTool.XMLMessage(@"c:\nonexistent.xml"));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with just the XML parameter")]
        class XMLFileOmitFile : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("Empty path name", () => msgTool.XMLMessage(""));
                msgTool = null;
            }
        }

        [TestCase,Description("Invoke the tool with /addxmlmsg but without /xml")]
        class XMLFileOmitXMLSwitch : MsgToolBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                msgTool = new MsgTool();
                msgTool.MsgToolPath = MsgToolTestConfig.ToolPath;
                MsgToolExpectErrorString("xml must be specified", () => msgTool.RunMsgTool("/addxmlmsg"));
                msgTool = null;
            }
        }

    } // Testgroup
} // Namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\App\App.cs ===
using System;
using System.Diagnostics;
using System.Threading;
using H2PCExtender;

namespace App
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class Application
	{
        #region Member Variables
		public bool IsService = false;
		private CListenThread listenThread = null;
        private EventLog evtLog = new EventLog("Application", ".", "H2PCExtender");
		private ushort Port = 0;
        #endregion

        #region ctors
        public Application()
        {
			IsService = !System.Environment.UserInteractive;
		}        
        #endregion

        #region Methods
		/// <summary>
		/// Initialize the Application for Console and Service
		/// </summary>
		public void InitApplication( string[] args )
        {
			Port = (ushort)(IsService ? 8080 : 8081);     // default Ports
			ParseCmdArgs( args );
		}
        
		public void ParseCmdArgs( string[] args )
        {
			foreach( string arg in args )
			{
				// -pPORT	- port number to override default
				if( arg.Substring(0,2) == "-p" )
				{
					Port = (ushort)int.Parse(arg.Substring(2));
					continue;
				}

				// -break	- Assert during startup for debugging - console only
				if( arg.Substring(0,6) == "-break" )
				{
					Debug.Assert(false);
				}
			}
        }

		public void Run()
		{
			// Start thread to handle connections
			listenThread = new CListenThread( Port, evtLog );

			if( !IsService )
			{
				//SleepForever();
				WaitForCtrl_C();
				StopApplication();
				Thread.Sleep( 3000 );	// allow 3 seconds for listen thread to clean up
			}
		}

        public void StopApplication()
        {
            listenThread.Running = false;
        }

		public void SleepForever()
		{
			Thread.Sleep( System.Threading.Timeout.Infinite );
		}

		public void WaitForCtrl_C()
		{
			int i = 0;

			while( i != -1 )
			{
				i = Console.Read();
			}
		}

		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\ListenThread_OBSOLETE.cs ===
using System;
using System.Threading;
using System.Net;
using System.Net.Sockets;
using System.Collections;
using System.Reflection;
using System.IO;
using System.Diagnostics;
using System.Text;
using System.Security.Policy;
using System.Runtime.Remoting.Lifetime;

using PCExtCommon;
using ExtenderInterface;

namespace H2PCExtender
{

	/// <summary>
	/// Summary description for ListenThread.
	/// </summary>
	public class CListenThread
	{
        ~CListenThread()
        {
            udpClient.Close();
            listener.Stop();
        }

        public bool Running = true;

        string ExtensionPath = "";
		ushort m_port = 8080;
		Thread m_self = null;

		delegate byte [] DelegateUdpReceive(ref IPEndPoint endpoint);
		UdpClient udpClient = null;
		IAsyncResult udpAsync = null;
		DelegateUdpReceive CBUdpReceive = null;
		IPEndPoint udpEndPoint = null;
		byte [] udpConnHeader = new byte [] {(byte) 'L', (byte) 'I', (byte) 'S', (byte) 'T'};
		byte [] udpFooter = new byte [] {0xFE, 0x1F, 0xE3, 0x5B};
        byte [] udpDumpHeader = new byte [] {(byte) 'D', (byte) 'U', (byte) 'M', (byte) 'P'};
        
		TcpListener listener = null;
		IPHostEntry thisHost = null;
        
        CSessionState sessionState = new CSessionState();

        string TargetAssembly = null;
        AppDomainSetup ads = null;

        EventLog evtLog = null;
		
        public CListenThread(ushort port, EventLog log) : this(port)
        {
            evtLog = log;
        }

		public CListenThread(ushort port)
		{
			//
			// TODO: Add constructor logic here
			//

            m_port = port;

            thisHost = Dns.Resolve(System.Environment.MachineName);

            udpClient = new UdpClient(m_port);
            listener = new TcpListener(IPAddress.Any, m_port);
			CBUdpReceive = new DelegateUdpReceive(udpClient.Receive);
			m_self = new Thread(new ThreadStart(ThreadMain));
			m_self.Start();
        }

        void LogLine(EventLogEntryType type, string str)
        {
            if(evtLog != null)
                evtLog.WriteEntry(str, type);
            else
                Console.WriteLine(type.ToString() + ": " + str);
        }

		void FileSystemEvent(object o, FileSystemEventArgs e)
		{
		}

        void CreateSession(SessionInitInfo sess)
        {
            try
            {
                //Create evidence for the new application domain from evidence of
                // current application domain.
                Evidence adevidence = AppDomain.CurrentDomain.Evidence;
            
                // Create a new application domain.
                AppDomain d = AppDomain.CreateDomain(sess.ServerIPPort, adevidence, ads);
                        
                object [] args = new object [] {sess};
                lock(sessionState)
                {
                    d.DomainUnload += new EventHandler(sessionState.DomainUnload);
                    d.CreateInstance(TargetAssembly, "ExtenderInterface.CSessionInfo", false, BindingFlags.Default, null, args, null, null, null);
                    SessionInfo si = new SessionInfo();
                    si.domain = d;
                    si.init = sess;
                    sessionState.Add(si);
                    sess.callback = sessionState;
                }
            }
            catch(System.Exception e)
            {
                LogLine(EventLogEntryType.Warning, e.Message + "\n" + e.StackTrace.ToString());
            }
        }

		void ThreadMain()
		{
			// Gather the list of test extensions for use
/*
            Assembly [] assms = AppDomain.CurrentDomain.GetAssemblies();
            foreach(Assembly a in assms)
            {
                if(a.GetName().Name == "H2PCInterface")
                {
                    TargetAssembly = a.GetName().FullName;
                    break;
                }
            }
*/
            // The above code depends on "H2PCInterface" being loaded before ThreadMain is called by someone else
            // THen searches all the loaded assemblies for "H2PCInterface"
            // Instead, load the assembly we want now and get it's fullname.
            Assembly assy = AppDomain.CurrentDomain.Load("H2PCInterface");
            TargetAssembly = assy.GetName().FullName;

			try
			{
                ExtensionPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Extensions");

                ads = new AppDomainSetup();
                ads.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory;
                ads.PrivateBinPath = ExtensionPath;
                ads.ShadowCopyFiles = "true";
                ads.ApplicationName = "STFServiceProvider";

                LogLine(EventLogEntryType.Information, ExtensionPath);
					
			}
			catch(System.Exception e)
			{
				Console.Write(e.Message + "\n" + e.StackTrace.ToString());
			}

			// Listen on the udp and tcp ports for connections.  If the current machine is part of a domain applying ipsec, the client will fail tcp.
			// So instead it will then send a broadcast udp packet that I can pick up and then initiate a connection to the client.
			listener.Start();

			AsyncCallback CallbackUdpReceive = new AsyncCallback(UdpReceive);

			while(Running)
			{
                lock(this)
                {
                    if(udpAsync == null || udpAsync.IsCompleted)
                        udpAsync = CBUdpReceive.BeginInvoke(ref udpEndPoint, CallbackUdpReceive, this);
                }
                while(listener.Pending())
                {
                    SessionInitInfo sess;
                    LogLine(EventLogEntryType.Information, "Accepting a pending tcp request");
                    try
                    {
                        sess = new SessionInitInfo(listener.AcceptSocket(), ExtensionPath);
                        CreateSession(sess);
                    }
                    catch(System.Exception e)
                    {
                        LogLine(EventLogEntryType.Warning, e.Message + "\n" + e.StackTrace.ToString());
                    }
                }
				udpAsync.AsyncWaitHandle.WaitOne(100, false);
			}
            listener.Stop();
		}

		void UdpReceive(IAsyncResult async)
		{
			byte [] packet;
            string reason;
			try
			{
                lock(this)
                {
                    packet = CBUdpReceive.EndInvoke(ref udpEndPoint, udpAsync);
                }
			}
			catch(System.Exception e)
			{
				LogLine(EventLogEntryType.Warning, e.Message + "\n" + e.StackTrace.ToString());
				return;
			}

			// Very specific packet construction
            reason = "Packet Length";
			if(packet.Length != 12)
				goto Reject;
			
			// Check header and footer for match
            bool fConn = true;
            bool fDump = true;
            for(int i = 0; i < 4; ++i)
            {
                if(packet[i] != udpConnHeader[i] || packet[i + 8] != udpFooter[i])
                    fConn = false;
                if(packet[i] != udpDumpHeader[i] || packet[i + 8] != udpFooter[i])
                    fDump = false;
            }

            reason = "Mismatched Header or Footer";
            if(!fConn && !fDump)
                goto Reject;

			// Now pull the address and verify it is one of the ones I own (otherwise it is trying to connect to someone else)
			bool found = false;
			for(int i = 0; i < thisHost.AddressList.Length; ++i)
			{
				byte [] mine = thisHost.AddressList[i].GetAddressBytes();
				if(mine.Length != 4)
					continue;
				found = true;
				for(int j = 0; j < 4; ++j)
				{
					if(packet[4 + j] != mine[j])
						found = false;
				}
				if(found)
					break;
			}
            reason = "Server IP Address Mismatch";
            if(!found)
				goto Reject;
			
			// Now do a reverse connection to the client and set up a session
            if(fConn)
            {
                Socket sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                sock.Connect(new IPEndPoint(udpEndPoint.Address, m_port));
                SessionInitInfo sess = new SessionInitInfo(sock, ExtensionPath);
                CreateSession(sess);
                return;
            }

            if(fDump)
            {
                sessionState.DumpTo(udpEndPoint);
                return;
            }

            Reject:
            StringBuilder data  = new StringBuilder();
            for(int i = 0; i < packet.Length; ++i)
            {
                data.Append(packet[i].ToString("X2"));
            }
            LogLine(EventLogEntryType.Warning, "Rejected UDP packet (" + reason + ") from " + udpEndPoint.Address.ToString() + ":" + udpEndPoint.Port.ToString() + 
                                " with data: " + data.ToString());
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\App\Main.cs ===
using System;
using System.Diagnostics;
using System.Threading;
using App;

namespace H2PCExtender
{
	/// <summary>
	/// Summary description for H2PCApp
	/// </summary>
	class H2PCApp
	{
        // App object
        public static Application App = null;

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main( string[] args )
		{
			App = new Application();

			System.ServiceProcess.ServiceBase[] ServicesToRun;
			H2PCExtenderService svc = new H2PCExtenderService( App );
			ServicesToRun = new System.ServiceProcess.ServiceBase[] { svc };

			if( !App.IsService )
				// Service code is used for console to enforce debugging of Service's OnStart method
				svc.ConsoleOnStart( args );
			else
				System.ServiceProcess.ServiceBase.Run(ServicesToRun);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\App\ListenThread.cs ===
using System;
using System.Threading;
using System.Net;
using System.Net.Sockets;
using System.Collections;
using System.Reflection;
using System.IO;
using System.Diagnostics;
using System.Text;
using System.Security.Policy;
using System.Runtime.Remoting.Lifetime;

using PCExtCommon;
using ExtenderInterface;

namespace H2PCExtender
{

	/// <summary>
	/// Summary description for ListenThread.
	/// </summary>
	public class CListenThread
	{
        ~CListenThread()
        {
            udpClient.Close();
            listener.Stop();
        }

        public bool Running = true;

        string ExtensionPath = "";
		ushort m_port = 8080;
		Thread m_self = null;

		delegate byte [] DelegateUdpReceive(ref IPEndPoint endpoint);
		UdpClient udpClient = null;
		IAsyncResult udpAsync = null;
		DelegateUdpReceive CBUdpReceive = null;
		IPEndPoint udpEndPoint = null;
		byte [] udpConnHeader = new byte [] {(byte) 'L', (byte) 'I', (byte) 'S', (byte) 'T'};
		byte [] udpFooter = new byte [] {0xFE, 0x1F, 0xE3, 0x5B};
        byte [] udpDumpHeader = new byte [] {(byte) 'D', (byte) 'U', (byte) 'M', (byte) 'P'};
        
		TcpListener listener = null;
		IPHostEntry thisHost = null;
        
        CSessionState sessionState = new CSessionState();

        string TargetAssembly = null;
        AppDomainSetup ads = null;

        EventLog evtLog = null;
		
        public CListenThread(ushort port, EventLog log) : this(port)
        {
            evtLog = log;
        }

		public CListenThread(ushort port)
		{
			//
			// TODO: Add constructor logic here
			//

            m_port = port;

            thisHost = Dns.GetHostEntry(System.Environment.MachineName);

            udpClient = new UdpClient(m_port);
            listener = new TcpListener(IPAddress.Any, m_port);
			CBUdpReceive = new DelegateUdpReceive(udpClient.Receive);
			m_self = new Thread(new ThreadStart(ThreadMain));
			m_self.Start();
        }

        void LogLine(EventLogEntryType type, string str)
        {
            if(evtLog != null)
                evtLog.WriteEntry(str, type);
            else
                Console.WriteLine(type.ToString() + ": " + str);
        }

		void FileSystemEvent(object o, FileSystemEventArgs e)
		{
		}

        void CreateSession(SessionInitInfo sess)
        {
            try
            {
                //Create evidence for the new application domain from evidence of
                // current application domain.
                Evidence adevidence = AppDomain.CurrentDomain.Evidence;
            
                // Create a new application domain.
                AppDomain d = AppDomain.CreateDomain(sess.ClientIPPort, adevidence, ads);
                        
                object [] args = new object [] {sess};
                lock(sessionState)
                {
                    d.DomainUnload += new EventHandler(sessionState.DomainUnload);
                    d.CreateInstance(TargetAssembly, "ExtenderInterface.CSessionInfo", false, BindingFlags.Default, null, args, null, null, null);
                    SessionInfo si = new SessionInfo();
                    si.domain = d;
                    si.init = sess;
                    sessionState.Add(si);
                    sess.callback = sessionState;
                }
            }
            catch(System.Exception e)
            {
                LogLine(EventLogEntryType.Warning, e.Message + "\n" + e.StackTrace.ToString());
            }
        }

		void ThreadMain()
		{
			// Load the CSession Assembly
			Assembly assy = AppDomain.CurrentDomain.Load("H2PCInterface");
			TargetAssembly = assy.GetName().FullName;

			// Gather the list of test extensions for use
			try
			{
                ExtensionPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Extensions");

                ads = new AppDomainSetup();
                ads.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory;
                ads.PrivateBinPath = ExtensionPath;
                ads.ShadowCopyFiles = "true";
                ads.ApplicationName = "STFServiceProvider";

                LogLine(EventLogEntryType.Information, ExtensionPath);
					
			}
			catch(System.Exception e)
			{
				Console.Write(e.Message + "\n" + e.StackTrace.ToString());
			}

			// Listen on the udp and tcp ports for connections.  If the current machine is part of a domain applying ipsec, the client will fail tcp.
			// So instead it will then send a broadcast udp packet that I can pick up and then initiate a connection to the client.
			listener.Start();

			AsyncCallback CallbackUdpReceive = new AsyncCallback(UdpReceive);

			while(Running)
			{
                lock(this)
                {
                    if(udpAsync == null || udpAsync.IsCompleted)
                        udpAsync = CBUdpReceive.BeginInvoke(ref udpEndPoint, CallbackUdpReceive, this);
                }
                while(listener.Pending())
                {
                    SessionInitInfo sess;
                    LogLine(EventLogEntryType.Information, "Accepting a pending tcp request");
                    try
                    {
                        sess = new SessionInitInfo(listener.AcceptSocket(), ExtensionPath);
						LogLine(EventLogEntryType.Information, "Creating Session with " + sess.ClientIPPort);
						CreateSession(sess);
					}
                    catch(System.Exception e)
                    {
                        LogLine(EventLogEntryType.Error, e.Message + "\n" + e.StackTrace.ToString());
                    }
                }
				udpAsync.AsyncWaitHandle.WaitOne(100, false);
			}
            listener.Stop();
		}

		void UdpReceive(IAsyncResult async)
		{
			byte [] packet;
            string reason;
			try
			{
                lock(this)
                {
                    packet = CBUdpReceive.EndInvoke(ref udpEndPoint, udpAsync);
                }
			}
			catch(System.Exception e)
			{
				LogLine(EventLogEntryType.Warning, e.Message + "\n" + e.StackTrace.ToString());
				return;
			}

			// Very specific packet construction
            reason = "Packet Length";
			if(packet.Length != 12)
				goto Reject;
			
			// Check header and footer for match
            bool fConn = true;
            bool fDump = true;
            for(int i = 0; i < 4; ++i)
            {
                if(packet[i] != udpConnHeader[i] || packet[i + 8] != udpFooter[i])
                    fConn = false;
                if(packet[i] != udpDumpHeader[i] || packet[i + 8] != udpFooter[i])
                    fDump = false;
            }

            reason = "Mismatched Header or Footer";
            if(!fConn && !fDump)
                goto Reject;

			// Now pull the address and verify it is one of the ones I own (otherwise it is trying to connect to someone else)
			bool found = false;
			for(int i = 0; i < thisHost.AddressList.Length; ++i)
			{
				byte [] mine = thisHost.AddressList[i].GetAddressBytes();
				if(mine.Length != 4)
					continue;
				found = true;
				for(int j = 0; j < 4; ++j)
				{
					if(packet[4 + j] != mine[j])
						found = false;
				}
				if(found)
					break;
			}
            reason = "Server IP Address Mismatch";
            if(!found)
				goto Reject;
			
			// Now do a reverse connection to the client and set up a session
            if(fConn)
            {
                Socket sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                sock.Connect(new IPEndPoint(udpEndPoint.Address, m_port));
                SessionInitInfo sess = new SessionInitInfo(sock, ExtensionPath);
                CreateSession(sess);
                return;
            }

            if(fDump)
            {
                sessionState.DumpTo(udpEndPoint);
                return;
            }

            Reject:
            StringBuilder data  = new StringBuilder();
            for(int i = 0; i < packet.Length; ++i)
            {
                data.Append(packet[i].ToString("X2"));
            }
            LogLine(EventLogEntryType.Warning, "Rejected UDP packet (" + reason + ") from " + udpEndPoint.Address.ToString() + ":" + udpEndPoint.Port.ToString() + 
                                " with data: " + data.ToString());
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\App\ProjectInstaller.cs ===
using System;
using System.ComponentModel;
using System.Configuration.Install;

namespace H2PCExtender
{
	/// <summary>
	/// Summary description for ProjectInstaller.
	/// </summary>
	[RunInstaller(true)]
	public class ProjectInstaller : System.Configuration.Install.Installer
	{
		private System.ServiceProcess.ServiceProcessInstaller H2PCExtenderProcessInstaller;
		private System.ServiceProcess.ServiceInstaller H2PCExtenderServiceInstaller;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public ProjectInstaller()
		{
			// This call is required by the Designer.
			InitializeComponent();

			// TODO: Add any initialization after the InitializeComponent call
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}


		#region Component Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.H2PCExtenderProcessInstaller = new System.ServiceProcess.ServiceProcessInstaller();
			this.H2PCExtenderServiceInstaller = new System.ServiceProcess.ServiceInstaller();
			// 
			// H2PCExtenderProcessInstaller
			// 
			this.H2PCExtenderProcessInstaller.Password = null;
			this.H2PCExtenderProcessInstaller.Username = null;
			// 
			// H2PCExtenderServiceInstaller
			// 
			this.H2PCExtenderServiceInstaller.ServiceName = "H2PCExtenderService";
			// 
			// ProjectInstaller
			// 
			this.Installers.AddRange(new System.Configuration.Install.Installer[] {
																					  this.H2PCExtenderProcessInstaller,
																					  this.H2PCExtenderServiceInstaller});

		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\ProjectInstaller.cs ===
using System;
using System.ComponentModel;
using System.Configuration.Install;

namespace H2PCExtender
{
	/// <summary>
	/// Summary description for ProjectInstaller.
	/// </summary>
	[RunInstaller(true)]
	public class ProjectInstaller : System.Configuration.Install.Installer
	{
		private System.ServiceProcess.ServiceProcessInstaller H2PCExtenderProcessInstaller;
		private System.ServiceProcess.ServiceInstaller H2PCExtenderServiceInstaller;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public ProjectInstaller()
		{
			// This call is required by the Designer.
			InitializeComponent();

			// TODO: Add any initialization after the InitializeComponent call
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}


		#region Component Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.H2PCExtenderProcessInstaller = new System.ServiceProcess.ServiceProcessInstaller();
			this.H2PCExtenderServiceInstaller = new System.ServiceProcess.ServiceInstaller();
			// 
			// H2PCExtenderProcessInstaller
			// 
			this.H2PCExtenderProcessInstaller.Password = null;
			this.H2PCExtenderProcessInstaller.Username = null;
			// 
			// H2PCExtenderServiceInstaller
			// 
			this.H2PCExtenderServiceInstaller.ServiceName = "H2PCExtenderService";
			// 
			// ProjectInstaller
			// 
			this.Installers.AddRange(new System.Configuration.Install.Installer[] {
																					  this.H2PCExtenderProcessInstaller,
																					  this.H2PCExtenderServiceInstaller});

		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\App\AppStartUp.cs ===
using System;
using System.Diagnostics;
using H2PCExtender;

namespace App
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class Application
	{
        #region Member Variables
		private bool IsService = false;
		private CListenThread listenThread = null;
        private EventLog evtLog = new EventLog("Application", ".", "H2PCExtender");
		private ushort Port = 0;
        #endregion

        #region ctors
        public Application()
        {
			IsService = !System.Environment.UserInteractive;
		}        
        #endregion

        #region Methods
		/// <summary>
		/// Initialize the Application for Console and Service
		/// </summary>
		public void InitApplication( string[] args )
        {
			Port = (ushort)(IsService ? 8080 : 8081);     // default Ports

			ParseCmdArgs( args );

			if( !IsService )
				Run();
        }
        
		public void ParseCmdArgs( string[] args )
        {
			foreach( string arg in args )
			{
				// -pPORT  - port number to override default
				if( arg.Substring(0,2) == "-p" )
				{
					Port = (ushort)int.Parse(arg.Substring(2));
					continue;
				}

				// -dbgsvr  - debug service, set IsService to true
				if( arg.Substring(0,7) == "-dbgsvc" )
				{
					IsService = true;
					continue;
				}

				// Assert during startup for debugging
				if( arg.Substring(0,6) == "-break" )
				{
					Debug.Assert(false);
				}
			}
        }

		public void Run()
		{
			if( IsService )
			{
				//
				// Running as a Service
				//
				System.ServiceProcess.ServiceBase[] ServicesToRun;
	
				// More than one user Service may run within the same process. To add
				// another service to this process, change the following line to
				// create a second service object. For example,
				//
				//   ServicesToRun = new System.ServiceProcess.ServiceBase[] {new Service1(), new MySecondUserService()};
				//
				ServicesToRun = new System.ServiceProcess.ServiceBase[] { new H2PCExtenderService(this) };

				System.ServiceProcess.ServiceBase.Run(ServicesToRun);
                
				//
				// H2PCExtender.H2PCExtenderService.OnStart will call InitApplication
				//
			}
			// Start thread to handle connections
			listenThread = new CListenThread( Port, evtLog );
			
			// If running as console, sleep forever
			if( !IsService )
				System.Threading.Thread.Sleep(System.Threading.Timeout.Infinite);

		}

        public void StopApplication()
        {
            listenThread.Running = false;
        }
        #endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\App\H2PCExtender.cs ===
using System;
using System.ServiceProcess;
using System.Threading;
using App;

namespace H2PCExtender
{
	public class H2PCExtenderService : System.ServiceProcess.ServiceBase
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;
        private Application App = null;

		public H2PCExtenderService( Application app )
		{
			// This call is required by the Windows.Forms Component Designer.
			InitializeComponent();

            App = app;        
		}

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			components = new System.ComponentModel.Container();
			this.ServiceName = "H2PCExtender";
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}
        
		/// <summary>
		/// Set things in motion so your service can do its work.
		/// </summary>
		protected override void OnStart(string[] args)
		{
//			Thread.Sleep(60000);		// uncomment to allow time to attach to debugger
			App.InitApplication( args );
			App.Run();
        }

		public void ConsoleOnStart(string[] args)
		{
			OnStart(args);
		}

		/// <summary>
		/// Stop this service.
		/// </summary>
		protected override void OnStop()
		{
            App.StopApplication();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\ListenThread.cs ===
using System;
using System.Threading;
using System.Net;
using System.Net.Sockets;
using System.Collections;
using System.Reflection;
using System.IO;
using System.Diagnostics;
using System.Text;
using System.Security.Policy;
using System.Runtime.Remoting.Lifetime;


namespace H2PCExtender
{

	/// <summary>
	/// Summary description for ListenThread.
	/// </summary>
    public class CListenThread
    {
        ~CListenThread()
        {
            listener.Stop();
        }

        ushort m_port = 8080;
        Thread m_self = null;

        TcpListener listener = null;

        EventLog evtLog = null;
        Int32 running = 1;

        ArrayList runningSessions = null;

        public CListenThread(ushort port, EventLog log)
        {
            this.Init(port, log);
        }

        public CListenThread(ushort port)
        {
            this.Init(port, null);
        }

        void Init(ushort port, EventLog log)
        {
            m_port = port;
            evtLog = log;
            runningSessions = new ArrayList();

            listener = new TcpListener(IPAddress.Any, m_port);

            m_self = new Thread(new ThreadStart(ThreadMain));
            m_self.Start();
        }

        void LogLine(EventLogEntryType type, string str)
        {
            if (evtLog != null)
                evtLog.WriteEntry(str, type);
            else
                Console.WriteLine(type.ToString() + ": " + str);
        }

        public System.Int32 Running
        {
            get
            {
                return this.running;
            }
            set
            {
                Interlocked.Exchange(ref this.running, value);
            }
        }

        void ThreadMain()
        {
            // Load the CSession Assembly
            //Assembly assy = AppDomain.CurrentDomain.Load("H2PCInterface");
            //string TargetAssembly = assy.GetName().FullName;
            string extensionPath = null;

            // Gather the list of test extensions for use
            try
            {
                extensionPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Extensions");
                LogLine(EventLogEntryType.Information, extensionPath);
            }
            catch (System.Exception e)
            {
                Console.Write(e.Message + "\n" + e.StackTrace.ToString());
            }

            // Listen on tcp port
            listener.Start();

            while (this.Running != 0 )
            {
                while (listener.Pending())
                {
                    LogLine(EventLogEntryType.Information, "Accepting a pending tcp request");
                    try
                    {
                        CSessionInfo session = new CSessionInfo(listener.AcceptSocket(), evtLog, extensionPath);
                        LogLine(EventLogEntryType.Information, "Creating Session with " + session.ClientIPAddress);
                        session.Init();
                        this.runningSessions.Add(session);
                    }
                    catch (System.Exception e)
                    {
                        this.Running = 0;
                        LogLine(EventLogEntryType.Error, e.Message + Environment.NewLine + e.StackTrace.ToString());
                    }
                }
                Thread.Sleep(100); // sleep 0.1 seconds before trying to accept new session
            }
            // clean up all running thread
            for (int i = 0; i < this.runningSessions.Count; i++)
            {
                try
                {
                    CSessionInfo session = this.runningSessions[i] as CSessionInfo;
                    System.Threading.ThreadState runningState = session.SessionState;
                    if (runningState != System.Threading.ThreadState.Unstarted &&
                        runningState != System.Threading.ThreadState.Aborted &&
                        runningState != System.Threading.ThreadState.AbortRequested)
                    {
                        session.EndSession();
                    }
                }
                catch { }
                this.runningSessions[i] = null;
            }
            listener.Stop();
            this.m_self.Abort();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_h2pcapp_none_12.4.56.0_none_4d2cdcb710f6aa7b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=h2pcapp
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.manifest
XP_MANIFEST_PATH=manifests\msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.cat
XP_CATALOG_PATH=manifests\msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.cat
XP_PAYLOAD_PATH=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=h2pcapp,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\SessionLog.cs ===
using System;
using System.IO;
using System.Threading;
using System.Collections;
using System.Net.Sockets;
using System.Reflection;
using System.Diagnostics;

namespace H2PCExtender
{
    public class CSessionLog
    {
        protected string ipPort;
        protected StreamWriter sw = null;
        protected CSessionLog()
        {
        }

        static string path;

        static CSessionLog()
        {
            path = System.AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            
            if(!Directory.Exists(path))
                Directory.CreateDirectory(path);
            path += "\\";
        }

        public CSessionLog(string serverIPPort, string clientIPPort)
        {
            ipPort = clientIPPort;
            sw = File.CreateText(path + clientIPPort + " " + DateTime.Now.ToString("yyyyMMdd_HHmmssfff") + ".log");
            sw.AutoFlush = true;
            sw.WriteLine("New session started.");
            sw.WriteLine("Server Info: " + serverIPPort);
            sw.WriteLine("Client Info: " + clientIPPort);
        }

        public void Close()
        {
            try
            {
                sw.Close();
            }
            catch
            {
            }
        }

        ~CSessionLog()
        {
            Close();
        }

        public void LogLibrary(string Library)
        {
            sw.WriteLine("Library: " + Library);
        }

        public void LogMethod(string Method)
        {
            sw.WriteLine("Method: " + Method);
        }

        public void LogParamCount(ushort Count)
        {
            sw.WriteLine("\tParameter Count: " + Count.ToString());
        }

        protected void LogTypeInfo(bool IsRetVal, H2Types Type)
        {
            if(IsRetVal)
                sw.WriteLine("\tReturn Value:");
            else
                sw.WriteLine("\tParameter:");
            sw.WriteLine("\t\tType: " + Type.ToString());
        }

        #region void LogValue(bool IsRetVal, H2Types Type, object Value)
        public void LogValue(bool IsRetVal, H2Types Type, object Value)
        {
            if(Value == null)
            {
                LogValue(IsRetVal, Type);
            }
            else if(Value.GetType() == typeof(CError))
                LogValue(IsRetVal, Type, (CError) Value);
                
            else if(Value.GetType() == typeof(ulong []))
                LogValue(IsRetVal, Type, (ulong []) Value);
                
            else if(Value.GetType() == typeof(long []))
                LogValue(IsRetVal, Type, (long []) Value);
                
            else if(Value.GetType() == typeof(ulong))
                LogValue(IsRetVal, Type, (ulong) Value);
                
            else if(Value.GetType() == typeof(long))
                LogValue(IsRetVal, Type, (long) Value);
                
            else if(Value.GetType() == typeof(int))
                LogValue(IsRetVal, Type, (int) Value);
                
            else if(Value.GetType() == typeof(uint))
                LogValue(IsRetVal, Type, (uint) Value);
                
            else if(Value.GetType() == typeof(bool))
                LogValue(IsRetVal, Type, (bool) Value);
                
            else if(Value.GetType() == typeof(double))
                LogValue(IsRetVal, Type, (double) Value);
                
            else if(Value.GetType() == typeof(DateTime))
                LogValue(IsRetVal, Type, (DateTime) Value);
                
            else if(Value.GetType() == typeof(string))
                LogValue(IsRetVal, Type, (string) Value);

            else
                throw new Exception("Unknown Type passed!");
        }

        public void LogValue(bool IsRetVal, H2Types Type, CError Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.Failure);
        }
        public void LogValue(bool IsRetVal, H2Types Type, ulong [] Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue:");
            for(int i = 0; i < Value.Length; ++i)
            {
                sw.WriteLine("\t\t\t0x" + Value[i].ToString("X16"));
            }
        }
        public void LogValue(bool IsRetVal, H2Types Type, long [] Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue:");
            for(int i = 0; i < Value.Length; ++i)
            {
                sw.WriteLine("\t\t\t0x" + Value[i].ToString("X16"));
            }
        }
        public void LogValue(bool IsRetVal, H2Types Type, ulong Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X16"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, long Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X16"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, int Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X8"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, uint Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X8"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, string Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: \"" + Value + "\"");
        }
        public void LogValue(bool IsRetVal, H2Types Type, bool Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.ToString());
        }
        public void LogValue(bool IsRetVal, H2Types Type, DateTime Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.ToString("s"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, double Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.ToString("9.6F"));
        }
        public void LogValue(bool IsRetVal, H2Types Type)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue is null");
        }
        #endregion

        public void LogParam(H2Types Type, object Value)
        {
            LogValue(false, Type, Value);
        }

        public void LogRetVal(H2Types Type, object Value)
        {
            LogValue(true, Type, Value);
        }

    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\PCExtCommon.cs ===
using System;
using System.Reflection;

namespace H2PCExtender
{
    public enum H2Types
    {
        tarray = 0x0100,
        terror = 0xFFFF,
        tvoid = 0xFFFE,
        tbool = 1,
        tint32 = 2,
        tuint32 = 3,
        tint64 = 4,
        tuint64 = 5,
        tstring = 6,
        tdate = 7,
        tdouble = 8,
        trgint64 = tarray + tint64,
        trguint64 = tarray + tuint64,
    };

    public enum XDKBuildFlags
    {
        Debug = 0x1,
        Internal = 0x2,
    }

    public class CError
    {
        string m_failure;
        public CError() { }

        public CError(string failure)
        {
            m_failure = failure;
        }

        public string Failure
        {
            get { return m_failure; }
        }
    }

    public class SMethodInfo
    {
        public string library = null;
        public string function = null;
        public object[] parameters = null;
    }

    /// <summary>
    /// abstract base class CExtenderInterface
    /// </summary>
    abstract public class CExtenderInterface
    {
        public string ExtenderName
        {
            get { return m_ExtenderName; }
        }

        public bool CallMethod(string MethodName, object[] MethodParams, out object MethodResult)
        {
            Type t = this.GetType();
            Type[] paramTypes = new Type[MethodParams.Length];
            for (int i = 0; i < MethodParams.Length; ++i)
                paramTypes[i] = MethodParams[i].GetType();

            MethodResult = null;
            MethodInfo mi = t.GetMethod(MethodName, paramTypes);
            if (mi == null)
                return false;
            try
            {
                MethodResult = mi.Invoke(this, MethodParams);
            }
            catch (Exception e)
            {
                MethodResult = new CError("Function \"" + MethodName + "\" throws error:" + e.ToString() +
                    "\nInnerException: " + e.InnerException.ToString());
            }
            return true;
        }

        virtual public void EndSession()
        {
            // Indicates the end of the session.  This should be overridden if you need to 
            // clean up any resources.
        }

        protected string m_ExtenderName = null;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\Main.cs ===
using System;
using System.Diagnostics;
using System.Threading;

namespace H2PCExtender
{
    /// <summary>
    /// Summary description for H2PCApp
    /// </summary>
    class H2PCApp
    {
        // App object
        public static Application App = null;

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main(string[] args)
        {
            App = new Application();
            H2PCExtenderService svc = new H2PCExtenderService(App);


            if (!App.IsService)
            {
                // Service code is used for console to enforce debugging of Service's OnStart method
                svc.ConsoleOnStart(args);
            }
            else
            {
                System.ServiceProcess.ServiceBase.Run(new System.ServiceProcess.ServiceBase[] { svc });
            }
        }
    }



    /// <summary>
    /// Summary description for Class1.
    /// </summary>
    public class Application
    {
        #region Member Variables
        public bool IsService = false;
        private CListenThread listenThread = null;
        private EventLog evtLog = null;
        private ushort Port = 0;
        #endregion

        #region ctors
        public Application()
        {
            IsService = !System.Environment.UserInteractive;
            evtLog = new EventLog("Application", ".", "H2PCExtender");
        }
        #endregion

        #region Methods
        /// <summary>
        /// Initialize the Application for Console and Service
        /// </summary>
        public void InitApplication(string[] args)
        {
            Port = (ushort)(IsService ? 8080 : 8081);     // default Ports
            ParseCmdArgs(args);
        }

        public void ParseCmdArgs(string[] args)
        {
            foreach (string arg in args)
            {
                // -pPORT	- port number to override default
                if (arg.Substring(0, 2) == "-p")
                {
                    Port = (ushort)int.Parse(arg.Substring(2));
                    continue;
                }

                // -break	- Assert during startup for debugging - console only
                if (arg.Substring(0, 6) == "-break")
                {
                    Debug.Assert(false);
                }
            }
        }

        public void Run()
        {
            // Start thread to handle connections
            listenThread = new CListenThread(Port, evtLog);

            if (!IsService)
            {
                SleepForever();
                WaitForCtrl_C();
                StopApplication();
                Thread.Sleep(3000);	// allow 3 seconds for listen thread to clean up
            }
        }

        public void StopApplication()
        {
            listenThread.Running = 0;
        }

        public void SleepForever()
        {
            Thread.Sleep(System.Threading.Timeout.Infinite);
        }

        public void WaitForCtrl_C()
        {
            int i = 0;

            while (i != -1)
            {
                i = Console.Read();
            }
        }

        #endregion
    }

    public class H2PCExtenderService : System.ServiceProcess.ServiceBase
    {
        private Application App = null;
        public H2PCExtenderService(Application app)
        {
            App = app;
            this.ServiceName = "H2PCExtender";
        }


        /// <summary>
        /// Set things in motion so your service can do its work.
        /// </summary>
        protected override void OnStart(string[] args)
        {
            //			Thread.Sleep(60000);		// uncomment to allow time to attach to debugger
            App.InitApplication(args);
            App.Run();
        }

        public void ConsoleOnStart(string[] args)
        {
            OnStart(args);
        }

        /// <summary>
        /// Stop this service.
        /// </summary>
        protected override void OnStop()
        {
            App.StopApplication();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Console\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_h2pcapp_none_12.4.56.0_none_4d2cdcb710f6aa7b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=h2pcapp
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.manifest
XP_MANIFEST_PATH=manifests\msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.cat
XP_CATALOG_PATH=manifests\msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7.cat
XP_PAYLOAD_PATH=msil_h2pcapp_no-public-key_12.4.56.0_x-ww_56880ce7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=h2pcapp,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\DumpState\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\Billing\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\H2UserAccount\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\H2UserAccount\makefile.inc ===
[CODE: No readable text]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Common\PCExtCommon.cs ===
using System;
using System.IO;
using System.Threading;
using System.Collections;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Diagnostics;
using System.Text;
using System.Runtime.Remoting.Lifetime;

namespace PCExtCommon
{
    public enum H2Types
    {
        tarray = 0x0100,
        terror = 0xFFFF,
        tvoid = 0xFFFE,
        tbool = 1,
        tint32 = 2,
        tuint32 = 3,
        tint64 = 4,
        tuint64 = 5,
        tstring = 6,
        tdate = 7,
        tdouble = 8,
        trgint64 = tarray + tint64,
        trguint64 = tarray + tuint64,
    };

    public enum XDKBuildFlags
    {
        Debug = 0x1,
        Internal = 0x2,
    }

    public class CError
    {
        string m_failure;
        public CError() {}

        public CError(string failure)
        {
            m_failure = failure;
        }

        public string Failure
        {
            get{return m_failure;}
        }
    };

    public class SMethodInfo
    {
        public string library = null;
        public string function = null;
        public object [] parameters = null;
    }

    public class SessionInfo
    {
        public AppDomain domain;
        public SessionInitInfo init;
    };

    #region public class CSessionState : MarshalByRefObject
    public class CSessionState : MarshalByRefObject
    {
        ArrayList sessionList = new ArrayList();
        EventLog evtLog = new EventLog("Application", ".", "H2PCSessionState");

        public CSessionState()
        {
            ILease lease = (ILease) InitializeLifetimeService();
            lease.InitialLeaseTime = TimeSpan.Zero;
        }

        public int SessionCount
        {
            get{return sessionList.Count;}
        }

        public void DumpTo(IPEndPoint ep)
        {
            LogLine(EventLogEntryType.Information, "Dumping current session state to: " + ep.Address.ToString() + ":" + ep.Port.ToString());
            UTF8Encoding utf8 = new UTF8Encoding();
            Socket sock = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
            string intro = "Current session count: " + sessionList.Count + "\n";
            sock.SendTo(utf8.GetBytes(intro), ep);
            byte [] term = new byte [] {0, 0, 0, 0};
            lock(this)
            {
                foreach(SessionInfo si in sessionList)
                {
                    string s = si.init.ClientIP.ToString() + ":" + si.init.ClientPort.ToString() + ": (" + si.init.StateTime.ToString("u") + ") " + si.init.CurState + "\n";
                    byte [] b = utf8.GetBytes(s);
                    sock.SendTo(b, ep);
                }
            }
            sock.SendTo(term, ep);
            sock.Close();
        }

        public void Add(SessionInfo si)
        {
            LogLine(EventLogEntryType.Information, "Session started from: " + si.init.ClientIP.ToString() + ":" + si.init.ClientPort.ToString());
            sessionList.Add(si);
        }

        public void DomainUnload(object sender, EventArgs e)
        {
            AppDomain ad;
            if(sender.GetType() != typeof(AppDomain))
            {
                LogLine(EventLogEntryType.Warning, "Unknown type " + sender.GetType().ToString() + " unloaded.");
                return;
            }

            ad = (AppDomain) sender;

            lock(this)
            {
                for(int i = 0; i < sessionList.Count; ++i)
                {
                    SessionInfo si = ((SessionInfo) sessionList[i]);
                    if(ad == si.domain)
                    {
                        LogLine(EventLogEntryType.Information, "Session ended from: " + si.init.ClientIP.ToString() + ":" + si.init.ClientPort.ToString());
                        sessionList.RemoveAt(i);
                        return;
                    }
                }
            }
            LogLine(EventLogEntryType.Warning, "Couldn't fine domain to remove from session list.");
        }

        void LogLine(EventLogEntryType type, string str)
        {
            if(evtLog != null)
                evtLog.WriteEntry(str, type);
            else
                Console.WriteLine(type.ToString() + ": " + str);
        }
    };
    #endregion

    #region public class SessionInitInfo : MarshalByRefObject

    /// <summary>
    /// CTcpClient2 was created to get at the lower level socket information such as the 
    /// end points for logging information about the connection and ensuring they are unique.
    /// </summary>
    [Serializable]
    public class SessionInitInfo : MarshalByRefObject
    {
        public IPEndPoint LocalEndPoint;
        public IPEndPoint RemoteEndPoint;
        public NetworkStream NetStream;
        public Socket conn;
        public string extPath;
        string curState;
        DateTime dtState;
        
        public string CurState
        {
            get {return curState;}
            set {curState = value; dtState = DateTime.Now;}
        }

        public DateTime StateTime
        {
            get {return dtState;}
        }

        public CSessionState callback;

        public SessionInitInfo()
        {
            dtState = DateTime.Now;
            curState = "Initializing.";
            ILease lease = (ILease) InitializeLifetimeService();
            lease.InitialLeaseTime = new TimeSpan(0);
        }

        public int Ping()
        {
            lock(this)
            {
                if(Connected)
                {
                    Stream s = GetStream();
                    s.Write(new byte[0], 0, 0);
                }
                return callback.SessionCount;
            }
        }
        
        public SessionInitInfo(Socket sock, string ExtensionPath)
        {
            conn = sock;
            NetStream = new NetworkStream(sock, FileAccess.ReadWrite, true);
            LocalEndPoint = (IPEndPoint) sock.LocalEndPoint;
            RemoteEndPoint = (IPEndPoint) sock.RemoteEndPoint;
            extPath = ExtensionPath;

            ILease lease = (ILease) InitializeLifetimeService();
            lease.InitialLeaseTime = new TimeSpan(0);
            lease = (ILease) NetStream.InitializeLifetimeService();
            lease.InitialLeaseTime = new TimeSpan(0);
        }

		public void SetKeepAlive(bool fOn)
		{
            int SIO_KEEPALIVE_VALS = Convert.ToInt32("0x98000004", 16);
			byte [] keepAlive = new byte [] {(byte) (fOn ? 1 : 0), 0, 0, 0,    // On/Off
                                             255, 255, 255, 255,        // time
                                             20, 0, 0, 0};              // interval
			conn.IOControl(SIO_KEEPALIVE_VALS, keepAlive, keepAlive);
		}

        public bool PollRead
        {
            get
            {
                return conn.Poll(10, SelectMode.SelectRead);
            }
        }
        public bool Connected
        {
            get 
            {
                return conn.Connected;
            }
        }

        public string ExtensionPath()
        {
            return extPath;
        }

        public Stream GetStream()
        {
            return NetStream;
        }

        public void Close()
        {
            NetStream.Close();
        }

        public string ServerIPPort
        {
            get 
            {
                return ServerIP.ToString() + "_" + ServerPort.ToString();
            }
        }

        public IPAddress ServerIP
        {
            get
            {
                return LocalEndPoint.Address;
            }
        }
        public ushort ServerPort
        {
            get
            {
                return (ushort) LocalEndPoint.Port;
            }
        }

        public string ClientIPPort
        {
            get 
            {
                return ClientIP.ToString() + "_" + ClientPort.ToString();
            }
        }

        public IPAddress ClientIP
        {
            get
            {
                return RemoteEndPoint.Address;
            }
        }
        public ushort ClientPort
        {
            get
            {
                return (ushort) RemoteEndPoint.Port;
            }
        }
    }
    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\Billing\makefile.inc ===
customconfig:
!if "$(PASS0ONLY)" == "1"
        nmake /d /f vsprebuild.mak all
!endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\DumpState\Class1.cs ===
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Collections;

namespace DumpState
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	class Class1
	{
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main(string[] args)
		{
            if(args.Length < 2)
            {
                Console.WriteLine("DumpState requires two arguments:\n\tDumpState <IP Address> <Port>");
                return;
            }

            IPEndPoint ep = new IPEndPoint(IPAddress.Parse(args[0]), Convert.ToInt32(args[1]));

            Socket s = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

            byte [] udpFooter = new byte [] {0xFE, 0x1F, 0xE3, 0x5B};
            byte [] udpDumpHeader = new byte [] {(byte) 'D', (byte) 'U', (byte) 'M', (byte) 'P'};

            byte [] addr = ep.Address.GetAddressBytes();

            byte [] packet = new byte[12];
            for(int i = 0; i < 4; ++i)
                packet[i] = udpDumpHeader[i];
            for(int i = 0; i < 4; ++i)
                packet[i + 4] = addr[i];
            for(int i = 0; i < 4; ++i)
                packet[i + 8] = udpFooter[i];

            s.SendTo(packet, ep);

            ArrayList al = new ArrayList();
            int totalLen = 0;

            bool fDone = false;
            EndPoint ep2 = new IPEndPoint(0, 0);
            packet = new byte[100];
            while(!fDone)
            {
                int i = s.ReceiveFrom(packet, ref ep2);
                if(ep2.GetType() != typeof(IPEndPoint) && ((IPEndPoint) ep2).Address != ep.Address)
                    continue;

                byte [] data = new byte[i];
                for(int j = 0; j < i; ++j)
                    data[j] = packet[j];
                al.Add(data);
                totalLen += i;
                fDone = (data[i - 1] == 0);
            }

            packet = new byte[totalLen];
            uint pos = 0;
            foreach(byte [] b in al)
            {
                for(int i = 0; i < b.Length; ++i)
                {
                    packet[pos] = b[i];
                    pos++;
                }
            }
            UTF8Encoding utf8 = new UTF8Encoding();

            string result = utf8.GetString(packet);
            Console.WriteLine(result);

            s.Close();

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\Billing\Billing.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Xml;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.Net;
using System.Net.Sockets;

using ExtenderInterface;

namespace Billing
{
    /// <summary>
    /// Billing creates user accounts in server side.
    /// </summary>
    public class Billing : CExtenderInterface
    {
        #region Ctors and Dtors
        ~Billing()
        {
        }

        /// <summary>
        /// Use default constructor if invoked from PC side (without remote client)
        /// </summary>
        public Billing() : base(null)
        {
        }

        public Billing(CSessionInfo session) : base(session)
        {
        }

        #endregion;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Console\Main.cs ===
using System;
using H2PCExtender;

namespace H2PCExtenderConsole
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	class Class1
	{
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main(string[] args)
		{
			//
			// TODO: Add code to start application here
			//
            ushort port = 8080;

            Microsoft.Win32.RegistryKey rkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\H2PC");

            try
            {
                port = (ushort)((int) rkey.GetValue("ConsolePort"));
            }
            catch
            {
                rkey.SetValue("ConsolePort", (int)port);
            }
            CListenThread listenThread = new CListenThread(port);
			System.Threading.Thread.Sleep(System.Threading.Timeout.Infinite);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\H2UserAccount\SupportStructures.cs ===
using System;

namespace H2UserAccount
{
	/// <summary>
	/// Summary description for SupportStructures.
	/// </summary>
	public class UserSettingInfo
	{
        public int i_setting_id = 0;
        public string vc_name = "";
        public string vc_location = "";
        public int i_permission_flags = 0;
	}

	public class TitleInfo
	{
		public int i_title_id = 0;
		public string vc_name = "";
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_testextension_none_12.4.56.0_none_dc7ee208276ba848
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=testextension
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.manifest
XP_MANIFEST_PATH=manifests\msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.cat
XP_CATALOG_PATH=manifests\msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.cat
XP_PAYLOAD_PATH=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=testextension,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\Test.cs ===
using System;
using H2PCExtender;

namespace TestExtension
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class Test : CExtenderInterface
	{
		public Test()
		{
                        m_ExtenderName = "Test";
                }

		public void TestMethodNoArgs()
		{
			Console.WriteLine("TestMethodNoArgs called successfully!!");
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\SessionInfo.cs ===
using System;
using System.IO;
using System.Threading;
using System.Collections;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Diagnostics;
using System.Text;
using System.Runtime.Remoting.Lifetime;
using H2PCExtender;

namespace H2PCExtender
{

    /// <summary>
    /// CSessionInfo manages the session for the connected client
    /// It uses callback chaining to ensure the processing is all done asynchronously
    /// </summary>
    public class CSessionInfo
    {
        protected Hashtable m_exts = new Hashtable();
        protected Stream m_stream = null;
        protected BinaryWriter bw = null;
        protected CSessionLog sniff = null;
        protected Socket socket = null;
        protected string extensionPath = null;
        protected EventLog m_log = null;
        protected Thread runningThread = null;

        protected void LogLine(EventLogEntryType type, string line)
        {
            if(m_log != null)
                m_log.WriteEntry(line, type);
            else
                Console.WriteLine(type.ToString() + ": " + line);
            Debug.WriteLine(type.ToString() + ": " + line);
        }

        #region Ctors
        public CSessionInfo(Socket socket, string extensionPath) : this(socket, null, extensionPath)
        {
        }

        public CSessionInfo(Socket socket, EventLog log, string extensionPath)
        {
            this.socket = socket;
            this.sniff = new CSessionLog((socket.LocalEndPoint as IPEndPoint).Address.ToString(), (socket.RemoteEndPoint as IPEndPoint).Address.ToString());
            this.m_log = log;
            this.m_stream = new NetworkStream(socket, FileAccess.ReadWrite, true);
            this.bw = new BinaryWriter(m_stream, System.Text.Encoding.Unicode);
            this.extensionPath = extensionPath;
        }

        public void Init()
        {
            uint count = LoadExtensionObjects(extensionPath);
            if(count == 0)
            {
                LogLine(EventLogEntryType.Error, "No extensions could be found to be loaded at the path: \"" + extensionPath + "\"");
                EndSession("No extensions could be found to be loaded at the path: \"" + extensionPath + "\"");
                return;
            }

            byte[] keepAlive = new byte[] {(byte) 1, 0, 0, 0,    // On/Off
                                             255, 255, 255, 255,        // time
                                             20, 0, 0, 0};              // interval
            socket.IOControl(IOControlCode.KeepAliveValues, keepAlive, keepAlive);

			ThreadStart start = new ThreadStart(ProcessRequests);
            runningThread = new Thread(start);
            runningThread.Start();
        }
        #endregion

        #region uint LoadExtensionObjects(string ExtensionPath); // Loads the extensions available to the session
        uint LoadExtensionObjects(string ExtensionPath)
        {
            string [] files = Directory.GetFiles(ExtensionPath, "*.dll");
            uint count = 0;

            foreach(string s in files)
            {
                try
                {
                    CExtenderInterface iface;
                    string libname;
                    Assembly a = Assembly.LoadFrom(s);
                    Type [] all = a.GetTypes();
                    foreach(Type t in all)
                    {
                        if(!t.IsSubclassOf(typeof(CExtenderInterface)))
                            continue;
                        ConstructorInfo ci = null;

                        // get default constructor that take no parameter
                        ci = t.GetConstructor(BindingFlags.FlattenHierarchy | BindingFlags.Public | BindingFlags.Instance, null, Type.EmptyTypes, null);

                        if (ci == null)
                        {
                            continue;
                        }

                        try
                        {
                            iface = (CExtenderInterface) ci.Invoke(Type.EmptyTypes);
                        }
                        catch
                        {
                            LogLine(EventLogEntryType.Warning, "Failed to instantiate object " + t.FullName + " from file \"" + s + "\"");
                            continue;

                        }

                        libname = iface.ExtenderName;
 
                        if(libname == null || libname == "")
                        {
                            LogLine(EventLogEntryType.Warning, "Invalid extension name.  Skipping object " + t.FullName + " from file \"" + s + "\"");
                            continue;
                        }
                        

                        if(m_exts[libname] != null)
                        {
                            CExtenderInterface curIFace = (CExtenderInterface) m_exts[libname];
                            LogLine(EventLogEntryType.Warning, "Extender name: \"" + libname + "\" is already mapped to type: \"" + curIFace.GetType().FullName + "\" skipping the new library.");
                            continue;
                        }
                        LogLine(EventLogEntryType.Information, "Extender name: \"" + libname + "\" is mapped to: \"" + t.FullName + "\"");
                        m_exts[libname] = iface;
                        count++;
                    }
                }
                catch(System.Exception e)
                {
                    LogLine(EventLogEntryType.Warning, "Processing file: " + s + "\n" + e.Message + "\n" + e.StackTrace.ToString());
                }
            }
            return count;
        }
        #endregion

        #region Read functions
        int Read(byte [] dest, int start, int count)
        {
            int byteRead = 0;
            while(byteRead < count)
            {
                if (socket.Poll(10, SelectMode.SelectRead))
                {
                    int byteAvailable = m_stream.Read(dest, byteRead, count - byteRead);
                    if (0 == byteAvailable)
                    {
                        // we are waiting for more bytes but there is no more byte to read, so error out
                        throw new System.Exception("The socket has been closed.");
                    }
                    else
                    {
                        byteRead += byteAvailable;
                    }
                }
                else
                {
                    throw new System.Exception("Socket is not readable.");
                }
            }
            return byteRead;
        }

        byte[] ReadAndBuffer(int count)
        {
            byte [] res = new byte[count];
            Read(res, 0, count);
            return res;
        }

        bool ReadBool()
        {
            byte[] res = ReadAndBuffer(1);
            bool retVal = BitConverter.ToBoolean(res, 0);
            res = null;
            return retVal;
        }

        ushort ReadUShort()
        {
            byte[] res = ReadAndBuffer(2);
            ushort retVal = BitConverter.ToUInt16(res, 0);
            res = null;
            return retVal;
        }

        short ReadShort()
        {
            byte[] res = ReadAndBuffer(2);
            short retVal = BitConverter.ToInt16(res, 0);
            res = null;
            return retVal;
        }

        uint ReadUInt()
        {
            byte[] res = ReadAndBuffer(4);
            uint retVal = BitConverter.ToUInt32(res, 0);
            res = null;
            return retVal;
        }

        int ReadInt()
        {
            byte[] res = ReadAndBuffer(4);
            int retVal = BitConverter.ToInt32(res, 0);
            res = null;
            return retVal;
        }

        ulong ReadULong()
        {
            byte[] res = ReadAndBuffer(8);
            ulong retVal = BitConverter.ToUInt64(res, 0);
            res = null;
            return retVal;
        }

        long ReadLong()
        {
            byte[] res = ReadAndBuffer(8);
            long retVal = BitConverter.ToInt64(res, 0);
            res = null;
            return retVal;
        }

        H2Types ReadType()
        {
            short val = ReadShort();
            return (H2Types) val;
        }

        double ReadDouble()
        {
            byte[] res = ReadAndBuffer(8);
            double retVal = BitConverter.ToDouble(res, 0);
            res = null;
            return retVal;
        }

        DateTime ReadDate()
        {
            long dt = ReadLong();
            return new DateTime(dt);
        }

        string ReadString()
        {
            ushort len = ReadUShort();
            byte [] str = new byte[len];
            Read(str, 0, len);
            return UnicodeEncoding.Unicode.GetString(str);
        }

        ulong [] ReadArrayULong()
        {
            ushort len = ReadUShort();
            if((len & 0x7) != 0)
                throw new Exception("The number of bytes for an array of ulongs is not divisible by the size of a ulong.");
            len >>= 3;
            ulong [] res = new ulong[len];
            for(ushort i = 0; i < len; ++i)
                res[i] = ReadULong();
            return res;
        }

        long [] ReadArrayLong()
        {
            ushort len = ReadUShort();
            if((len & 0x7) != 0)
                throw new Exception("The number of bytes for an array of longs is not divisible by the size of a long.");
            len >>= 3;
            long [] res = new long[len];
            for(ushort i = 0; i < len; ++i)
                res[i] = ReadLong();
            return res;
        }

        object ReadParameter(H2Types type)
        {
            switch(type)
            {
                case H2Types.tbool:
                    return ReadBool();
                case H2Types.tint32:
                    return ReadInt();
                case H2Types.tuint32:
                    return ReadUInt();
                case H2Types.tdouble:
                    return ReadDouble();
                case H2Types.tdate:
                    return ReadDate();
                case H2Types.tint64:
                    return ReadLong();
                case H2Types.tuint64:
                    return ReadULong();
                case H2Types.tstring:
                    return ReadString();
                case H2Types.trguint64:
                    return ReadArrayULong();
                case H2Types.trgint64:
                    return ReadArrayLong();
                default:
                    throw new Exception("Unsupported type encountered on the stream: " + type.ToString());
            };
        }

        #endregion

        void ProcessRequests()
        {
            SMethodInfo method = new SMethodInfo();
            ushort paramCount;
            H2Types type;
            try
            {
                method.library = ReadString();
                sniff.LogLibrary(method.library);

                method.function = ReadString();
                sniff.LogMethod(method.function);

                paramCount = ReadUShort();
                method.parameters = new object[paramCount];
                sniff.LogParamCount(paramCount);

                for (ushort u = 0; u < paramCount; ++u)
                {
                    type = ReadType();
                    method.parameters[u] = ReadParameter(type);
                    sniff.LogParam(type, method.parameters[u]);
                }

                // Call the function (it is responsible for writing the return value)
                CallMethod(method);
            }
            catch (System.Net.Sockets.SocketException se)
            {
                LogLine(EventLogEntryType.Error, @"Socket error while process request:" + se.Message + "(" + se.NativeErrorCode.ToString() + ")");
                EndSession(se);
            }
            catch (System.Exception e)
            {
                LogLine(EventLogEntryType.Error, @"Error caught while processing request:" + e.ToString());
                EndSession(e);
            }
        }

        #region void CallMethod(SMethodInfo method)
        void CallMethod(SMethodInfo method)
        {
            CExtenderInterface iface = (CExtenderInterface) m_exts[method.library];
            byte [] str;
            object result;
            H2Types typ;
            if(iface == null)
            {
                result = new CError("Extension \"" + method.library + "\" not found");
            }
            else if(!iface.CallMethod(method.function, method.parameters, out result))
            {
                result = new CError("Function \"" + method.function + "\" not found in extension \"" + method.library + "\"");
            }

            // write result to the stream
            // configure the result structure with the information
            Type t = typeof(object);
            if(result != null)
                t = result.GetType();

            if(t == typeof(CError))
            {
                bw.Write((ushort) (typ = H2Types.terror));
                str = System.Text.UnicodeEncoding.Unicode.GetBytes(((CError) result).Failure);
                bw.Write((ushort) (str.Length));
                bw.Write(str);
            }
            else if(t == typeof(object))
            {
                bw.Write((ushort) (typ = H2Types.tvoid));
            }
            else if(t == typeof(bool))
            {
                bw.Write((ushort) (typ = H2Types.tbool));
                bw.Write((bool) result);
            }
            else if(t == typeof(short) ||
                t == typeof(int) ||
                t == typeof(sbyte))
            {
                bw.Write((ushort) (typ = H2Types.tint32));
                bw.Write(Convert.ToInt32(result));
            }
            else if(t == typeof(ushort) ||
                t == typeof(uint) ||
                t ==  typeof(byte))
            {
                bw.Write((ushort) (typ = H2Types.tuint32));
                bw.Write(Convert.ToUInt32(result));
            }
            else if(t == typeof(long))
            {
                bw.Write((ushort) (typ = H2Types.tint64));
                bw.Write((long) result);
            }
            else if(t == typeof(ulong))
            {
                bw.Write((ushort) (typ = H2Types.tuint64));
                bw.Write((ulong) result);
            }
            else if(t == typeof(long []))
            {
                bw.Write((ushort) (typ = H2Types.trgint64));
                long [] res = (long []) result;
                bw.Write((ushort) (res.Length * 8));
                for(int i = 0; i < res.Length; ++i)
                    bw.Write(res[i]);
            }
            else if(t == typeof(ulong []))
            {
                bw.Write((ushort) (typ = H2Types.trguint64));
                ulong [] res = (ulong []) result;
                bw.Write((ushort) (res.Length * 8));
                for(int i = 0; i < res.Length; ++i)
                    bw.Write(res[i]);
            }
            else if(t == typeof(string))
            {
                bw.Write((ushort) (typ = H2Types.tstring));
                str = System.Text.UnicodeEncoding.Unicode.GetBytes((string) result);
                bw.Write((ushort) (str.Length));
                bw.Write(str);
            }
            else if(t == typeof(DateTime))
            {
                bw.Write((ushort) (typ = H2Types.tdate));
                bw.Write(((DateTime) result).Ticks);
            }
            else if(t == typeof(float) ||
                t == typeof(decimal) || 
                t == typeof(double))
            {
                bw.Write((ushort) (typ = H2Types.tdouble));
                bw.Write(Convert.ToDouble(result));
            }
            else
            {
                throw new ApplicationException("Unsupported type encountered to be written to the stream: " + result.GetType().ToString());
            }
            
            // Log the result first before actually writing to the stream just in case there might be a problem here.
            sniff.LogRetVal(typ, result);
        }
        #endregion 

        #region EndSession variations
        public void EndSession()
        {
            EndSession("End of Session.");
        }
        public void EndSession(Exception e)
        {
            if(e.InnerException != null)
                EndSession(e.Message + "\n" + e.StackTrace.ToString() + e.InnerException.Message + "\n" + e.InnerException.StackTrace.ToString());
            else
                EndSession(e.Message + "\n" + e.StackTrace.ToString());
        }

        public void EndSession(string reason)
        {
            try
            {
                LogLine(EventLogEntryType.Warning, reason);
                foreach(string k in m_exts.Keys)
                {
                    try
                    {
                        CExtenderInterface iface = (CExtenderInterface) m_exts[k];
                        iface.EndSession();
                    }
                    catch(System.Exception e)
                    {
                        string s = "Error ending the session for an extension: " + e.Message + "\n" + e.StackTrace.ToString();
                        LogLine(EventLogEntryType.Error, s);
                    }
                }
            }
            finally
            {
                sniff.Close();
                m_log = null;
                try
                {
                    bw.Close();
                    m_stream.Close();
                }
                catch { }
                try
                {
                    socket.Close();
                }
                catch { }
                if (null != runningThread)
                {
                    runningThread.Abort();
                }
            }
        }
        #endregion

        #region Accessors
        public System.Threading.ThreadState SessionState
        {
            get
            {
                if (runningThread != null)
                {
                    return runningThread.ThreadState;
                }
                else
                {
                    return System.Threading.ThreadState.Unstarted;
                }
            }
        }
        public uint DebugIP
        {
            get{return m_XDKDebugIP;}
        }
        public uint TitleIP
        {
            get{return m_XDKTitleIP;}
        }
        public uint HardwareVersion
        {
            get{return m_XDKHardwareVer;}
        }
        public uint VideoMode
        {
            get{return m_XDKVideoMode;}
        }
        public uint BuildVersion
        {
            get{return m_XDKBuildVer;}
        }
        public uint BuildFlags
        {
            get{return m_XDKBuildFlags;}
        }
        public string BuildFlagString
        {
            get{return (((m_XDKBuildFlags & (uint) XDKBuildFlags.Internal) == (uint) XDKBuildFlags.Internal) ? "Internal" : "External")
                    + "|" +
                    (((m_XDKBuildFlags & (uint) XDKBuildFlags.Debug) == (uint) XDKBuildFlags.Debug) ? "Debug" : "Release");}
        }
        public string ConsoleName
        {
            get{return m_XDKConsoleName;}
        }
        public string ScriptOwner
        {
            get{return m_ScriptOwner;}
        }

        public string ClientIPAddress
        {
            get
            {
                IPEndPoint endpoint = socket.RemoteEndPoint as IPEndPoint;
                if (endpoint != null)
                {
                    return endpoint.Address.ToString();
                }
                else
                {
                    return IPAddress.None.ToString();
                }
            }
        }

        #endregion

        protected uint m_XDKDebugIP = 0;
        protected uint m_XDKTitleIP = 0;
        protected string m_XDKConsoleName = "";
        protected string m_ScriptOwner = "";
        protected uint m_XDKHardwareVer = 0;
        protected uint m_XDKVideoMode = 0;
        protected uint m_XDKBuildVer = 0;
        protected uint m_XDKBuildFlags = 0;
        protected uint m_ProtoVersion = 0;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Interface\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Service\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_testextension_none_12.4.56.0_none_dc7ee208276ba848
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=testextension
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.manifest
XP_MANIFEST_PATH=manifests\msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.cat
XP_CATALOG_PATH=manifests\msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710.cat
XP_PAYLOAD_PATH=msil_testextension_no-public-key_12.4.56.0_x-ww_949b3710
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=testextension,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Interface\SessionLog.cs ===
using System;
using System.IO;
using System.Threading;
using System.Collections;
using System.Net.Sockets;
using System.Reflection;
using System.Diagnostics;
using PCExtCommon;

namespace ExtenderInterface
{
    public class CSessionLog
    {
        protected string ipPort;
        protected StreamWriter sw = null;
        protected CSessionLog()
        {
        }

        static string path;

        static CSessionLog()
        {
            path = System.AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            
            if(!Directory.Exists(path))
                Directory.CreateDirectory(path);
            path += "\\";
        }

        public CSessionLog(string serverIPPort, string clientIPPort)
        {
            ipPort = clientIPPort;
            sw = File.CreateText(path + clientIPPort + " " + DateTime.Now.ToString("yyyyMMdd_HHmmssfff") + ".log");
            sw.AutoFlush = true;
            sw.WriteLine("New session started.");
            sw.WriteLine("Server Info: " + serverIPPort);
            sw.WriteLine("Client Info: " + clientIPPort);
        }

        public void Close()
        {
            sw.Close();
        }

        ~CSessionLog()
        {
            Close();
        }

        public void LogLibrary(string Library)
        {
            sw.WriteLine("Library: " + Library);
        }

        public void LogMethod(string Method)
        {
            sw.WriteLine("Method: " + Method);
        }

        public void LogParamCount(ushort Count)
        {
            sw.WriteLine("\tParameter Count: " + Count.ToString());
        }

        protected void LogTypeInfo(bool IsRetVal, H2Types Type)
        {
            if(IsRetVal)
                sw.WriteLine("\tReturn Value:");
            else
                sw.WriteLine("\tParameter:");
            sw.WriteLine("\t\tType: " + Type.ToString());
        }

        #region void LogValue(bool IsRetVal, H2Types Type, object Value)
        public void LogValue(bool IsRetVal, H2Types Type, object Value)
        {
            if(Value == null)
            {
                LogValue(IsRetVal, Type);
            }
            else if(Value.GetType() == typeof(CError))
                LogValue(IsRetVal, Type, (CError) Value);
                
            else if(Value.GetType() == typeof(ulong []))
                LogValue(IsRetVal, Type, (ulong []) Value);
                
            else if(Value.GetType() == typeof(long []))
                LogValue(IsRetVal, Type, (long []) Value);
                
            else if(Value.GetType() == typeof(ulong))
                LogValue(IsRetVal, Type, (ulong) Value);
                
            else if(Value.GetType() == typeof(long))
                LogValue(IsRetVal, Type, (long) Value);
                
            else if(Value.GetType() == typeof(int))
                LogValue(IsRetVal, Type, (int) Value);
                
            else if(Value.GetType() == typeof(uint))
                LogValue(IsRetVal, Type, (uint) Value);
                
            else if(Value.GetType() == typeof(bool))
                LogValue(IsRetVal, Type, (bool) Value);
                
            else if(Value.GetType() == typeof(double))
                LogValue(IsRetVal, Type, (double) Value);
                
            else if(Value.GetType() == typeof(DateTime))
                LogValue(IsRetVal, Type, (DateTime) Value);
                
            else if(Value.GetType() == typeof(string))
                LogValue(IsRetVal, Type, (string) Value);

            else
                throw new Exception("Unknown Type passed!");
        }

        public void LogValue(bool IsRetVal, H2Types Type, CError Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.Failure);
        }
        public void LogValue(bool IsRetVal, H2Types Type, ulong [] Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue:");
            for(int i = 0; i < Value.Length; ++i)
            {
                sw.WriteLine("\t\t\t0x" + Value[i].ToString("X16"));
            }
        }
        public void LogValue(bool IsRetVal, H2Types Type, long [] Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue:");
            for(int i = 0; i < Value.Length; ++i)
            {
                sw.WriteLine("\t\t\t0x" + Value[i].ToString("X16"));
            }
        }
        public void LogValue(bool IsRetVal, H2Types Type, ulong Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X16"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, long Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X16"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, int Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X8"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, uint Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: 0x" + Value.ToString("X8"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, string Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: \"" + Value + "\"");
        }
        public void LogValue(bool IsRetVal, H2Types Type, bool Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.ToString());
        }
        public void LogValue(bool IsRetVal, H2Types Type, DateTime Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.ToString("s"));
        }
        public void LogValue(bool IsRetVal, H2Types Type, double Value)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue: " + Value.ToString("9.6F"));
        }
        public void LogValue(bool IsRetVal, H2Types Type)
        {
            LogTypeInfo(IsRetVal, Type);
            sw.WriteLine("\t\tValue is null");
        }
        #endregion

        public void LogParam(H2Types Type, object Value)
        {
            LogValue(false, Type, Value);
        }

        public void LogRetVal(H2Types Type, object Value)
        {
            LogValue(true, Type, Value);
        }

    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Service\H2PCExtender.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.ServiceProcess;

namespace H2PCExtender
{
	public class H2PCExtenderService : System.ServiceProcess.ServiceBase
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;
		private CListenThread listenThread = null;
        private EventLog evtLog = new EventLog("Application", ".", "H2PCExtender");

		public H2PCExtenderService()
		{
			// This call is required by the Windows.Forms Component Designer.
			InitializeComponent();

			// TODO: Add any initialization after the InitComponent call
		}

		// The main entry point for the process
		static void Main()
		{
			System.ServiceProcess.ServiceBase[] ServicesToRun;
	
			// More than one user Service may run within the same process. To add
			// another service to this process, change the following line to
			// create a second service object. For example,
			//
			//   ServicesToRun = new System.ServiceProcess.ServiceBase[] {new Service1(), new MySecondUserService()};
			//
			ServicesToRun = new System.ServiceProcess.ServiceBase[] { new H2PCExtenderService() };

			System.ServiceProcess.ServiceBase.Run(ServicesToRun);
		}

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			components = new System.ComponentModel.Container();
			this.ServiceName = "H2PCExtender";
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		/// <summary>
		/// Set things in motion so your service can do its work.
		/// </summary>
		protected override void OnStart(string[] args)
		{
			// TODO: Add code here to start your service.

            ushort port = 8080;

            Microsoft.Win32.RegistryKey rkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\H2PC");

            try
            {
                port = (ushort)((int) rkey.GetValue("ServicePort"));
            }
            catch
            {
                rkey.SetValue("ServicePort", (int)port);
            }

            // Start thread to handle connections
			listenThread = new CListenThread(port, evtLog);
		}
 
		/// <summary>
		/// Stop this service.
		/// </summary>
		protected override void OnStop()
		{
			// TODO: Add code here to perform any tear-down necessary to stop your service.

			// Shut down listening thread
			// Shut down thread pool
            listenThread.Running = false;
			// Unload dlls
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Service\ProjectInstaller.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Configuration.Install;

namespace H2PCExtender
{
	/// <summary>
	/// Summary description for ProjectInstaller.
	/// </summary>
	[RunInstaller(true)]
	public class ProjectInstaller : System.Configuration.Install.Installer
	{
		private System.ServiceProcess.ServiceProcessInstaller H2PCExtenderProcessInstaller;
		private System.ServiceProcess.ServiceInstaller H2PCExtenderServiceInstaller;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public ProjectInstaller()
		{
			// This call is required by the Designer.
			InitializeComponent();

			// TODO: Add any initialization after the InitializeComponent call
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}


		#region Component Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.H2PCExtenderProcessInstaller = new System.ServiceProcess.ServiceProcessInstaller();
			this.H2PCExtenderServiceInstaller = new System.ServiceProcess.ServiceInstaller();
			// 
			// H2PCExtenderProcessInstaller
			// 
			this.H2PCExtenderProcessInstaller.Password = null;
			this.H2PCExtenderProcessInstaller.Username = null;
			// 
			// H2PCExtenderServiceInstaller
			// 
			this.H2PCExtenderServiceInstaller.ServiceName = "H2PCExtenderService";
			// 
			// ProjectInstaller
			// 
			this.Installers.AddRange(new System.Configuration.Install.Installer[] {
																					  this.H2PCExtenderProcessInstaller,
																					  this.H2PCExtenderServiceInstaller});

		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Interface\ExtenderInterface.cs ===
using System;
using System.Reflection;
using PCExtCommon;

namespace ExtenderInterface
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class CExtenderInterface
	{
		public CExtenderInterface(CSessionInfo si)
		{
			m_Session = si;
		}

		public CSessionInfo Session
		{
			get{return m_Session;}
		}

		public string ExtenderName
		{
			get {return m_ExtenderName;}
		}

		public bool CallMethod(string MethodName, object [] MethodParams, out object MethodResult)
		{
			Type t = this.GetType();
			Type [] paramTypes = new Type[MethodParams.Length];
			for(int i = 0; i < MethodParams.Length; ++i)
				paramTypes[i] = MethodParams[i].GetType();

			MethodResult = null;
			MethodInfo mi = t.GetMethod(MethodName, paramTypes);
			if(mi == null)
				return false;
			try
			{
				MethodResult = mi.Invoke(this, MethodParams);
			}
			catch(Exception e)
			{
				MethodResult = new CError("Function \"" + MethodName + "\" throws error:" + e.ToString() +
					"\nInnerException: " + e.InnerException.ToString() );
			}
			return true;
		}

		virtual public void EndSession()
		{
			// Indicates the end of the session.  This should be overridden if you need to 
			// clean up any resources.
		}

		protected string m_ExtenderName = null;
		protected CSessionInfo m_Session;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PropXQSTest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\H2UserAccount\H2UserAccount.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Xml;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using ExtenderInterface;
using STF;
using xonline.common.config;
using System.Net;
using System.Net.Sockets;

using ServerTestFramework.CUST;
using ServerTestFramework;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.GI;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.Matchmaking;
using ServerTestFramework.LiveService.UserSettings;
using ServerTestFramework.LiveService.Achievement;
using ServerTestFramework.LiveService.Feedback;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;

using Passport;

//using xonline.common.offerutil;

namespace H2UserAccount
{
    /// <summary>
    /// H2UserAccount creates user accounts in server side.
    /// </summary>
    public class H2UserAccount : CExtenderInterface
    {
        static uint g_STFRefCount = 0;
        static FriendsCommon g_fc = null;
        static UacsCommon g_uc = null;
        static Npdb g_npdb = null;
        static Webdb g_webdb = null;
        public const uint c_pongTitleId = 0xFFFF0072;
        public const uint c_DashTitleId = 0xFFFE07D1;
        private PNUser defaultSessionUser = null;
        private static Hashtable storedGameConfig = null;
        private static ulong[] allGameTitles = null;

        Hashtable m_passportUsers = new Hashtable();

        static ulong c_XeDKVerion = xonline.common.protocol.XboxVersion.FEB_2005_ALPHA_XEDK;
        static ulong c_XDKVersion = xonline.common.protocol.XboxVersion.OCT_2002_XDK;

        static ushort c_MaxTitleForAchievments = 100;
        static ushort c_MaxAchievementsPerTitle = 150;

        static PassportConfig ppConfig = null;

        private static uint XACHIEVEMENT_DETAILS_ACHIEVED_ONLINE = 0x00010000;
        //private static uint XACHIEVEMENT_DETAILS_ACHIEVED = 0x00020000;

        // Note that pnUsers and pnConsoles are not static to ensure that state isn't 
        // accidentally shared with other consoles.
        Hashtable m_pnUsers = new Hashtable();
        ArrayList m_pnConsoles = new ArrayList();
    
        // This could potentially be static, but if we run as a service then the database may change
        // but my list might not so this way I'm assured that at least for the life of the session
        // that they are likely to be up to date
        ArrayList m_userSettings = new ArrayList();

        ArrayList m_titles = new ArrayList();

        #region Ctors and Dtors
        ~H2UserAccount()
        {
            if (Session != null)
                Uninitialize();
        }

        /// <summary>
        /// Use default constructor if invoked from PC side (without remote client)
        /// </summary>
        public H2UserAccount() : base(null)
        {
            m_ExtenderName = "H2UserAccount";
            Initialize();
        }

        public H2UserAccount(CSessionInfo session) : base(session)
        {
            m_ExtenderName = "H2UserAccount";
            Initialize();
        }
        #endregion;

        #region Initialize & Uninitialize of statics and globals
        static protected void Initialize()
        {
            lock(typeof(H2UserAccount))
            {
                try
                {
                    g_STFRefCount++;
                    if(g_STFRefCount > 1)
                        return;

                    // TODO: I should get these values from the stf.xml
                    try
                    {
                        ppConfig = new PassportConfig(Cluster.INT, "passport");
                    }
                    catch(System.Exception f)
                    {
                        EventLog evt = new EventLog("Application", ".", "H2UserAccount");
                        evt.WriteEntry("Exception initializing passport: " + f.Message + "\n" + f.StackTrace, EventLogEntryType.Error);
                        ppConfig = null;
                    }

                    string fileName = System.IO.Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory, "stf.xml");
                    Global.Initialize(fileName);

                    // let fake SG know which presence server to use
                    GlobalFakeSG.FakeSG.SetStateEndpoint(Global.XEnv.GetVirtualInterface(VirtualInterface.xpnfd_presence_int).ToString());

                    g_fc = new FriendsCommon();
                    g_uc = new UacsCommon();
                    g_npdb = new Npdb();
                    g_npdb.ConnectToServer(Global.Env.NPDBSQL.TextFront);
                    g_webdb = new Webdb();

                    H2UserAccount.storedGameConfig = new Hashtable();
                }
                catch(System.Exception e)
                {
                    EventLog evt = new EventLog("Application", ".", "H2UserAccount");
                    evt.WriteEntry("Exception initializing databases: \n" + e.Message + "\n" + e.StackTrace, EventLogEntryType.Error);
                }
            }
        }

        static protected void Uninitialize()
        {
            lock(typeof(H2UserAccount))
            {
                g_STFRefCount--;
                if(g_STFRefCount > 0)
                    return;

                g_fc = null;
                g_uc = null;
                if (g_npdb != null)
                {
                    g_npdb.Close();
                    g_npdb = null;
                }
                ppConfig = null;

                ServerTestFramework.xonline.Uninitialize();

            }
        }
        #endregion

        public override void EndSession()
        {
            foreach(PNXbox x in m_pnConsoles)
            {
                x.DisconnectFromFakeSG();
            }
        }

        #region Server APIs
        // common APIs
        // those are the APIs that performs common functionalities
        public PNUser GetPNUser(ulong puid)
        {
            PNUser thisUser = (PNUser)m_pnUsers[puid];
            if (null == thisUser || thisUser.Name.Length == 0)
            {
                string gamerTag = UodbWS.GetGamertag(puid).Trim();
                if (gamerTag.Length > 0)
                {
                    if (null == thisUser)
                    {
                        thisUser = new PNUser(gamerTag, puid);
                    }
                    else
                    {
                        thisUser.Name = gamerTag;
                    }
                    m_pnUsers[puid] = thisUser;
                }
            }
            return thisUser;
        }
        public PNUser GetPNUser(string gamerTag)
        {
            gamerTag = gamerTag.Trim();
            if (gamerTag.Length > 0)
            {
                // first, try to grab the puid from our cache
                System.Collections.IDictionaryEnumerator enumerator = m_pnUsers.GetEnumerator();
        
                while(enumerator.MoveNext())
                {
                    PNUser currentUser = (PNUser)enumerator.Value;
                    if (currentUser.Name == gamerTag)
                    {
                        return currentUser;
                    }
                }
                ulong userId = UodbWS.GetUserIDFromGamerTag(gamerTag);
                if (userId != 0)
                {
                    PNUser thisUser = new PNUser(gamerTag, userId);
                    m_pnUsers[userId] = thisUser;
                    return thisUser;
                }
            }
            return null;
        }

        public PNUser[] GetAllPNUsers()
        {
            if (m_pnUsers.Count > 0)
            {
                PNUser[] returnedArray = new PNUser[m_pnUsers.Count];
                int index = 0;
                System.Collections.IDictionaryEnumerator enumerator = m_pnUsers.GetEnumerator();
                while(enumerator.MoveNext() && index < m_pnUsers.Count)
                {
                    PNUser currentUser = (PNUser)enumerator.Value;
                    returnedArray[index++] = currentUser;
                }
                return returnedArray;
            }
            return null;
        }
        // User account APIs
        // Each user creation adds the user to the list of users in pnUsers.
        // Each console creation adds to the list of consoles in pnConsoles.
        public PNUser CreatePNUserAccount(string userName, byte countryCode)
        {
            Owner owner = new Owner(userName);
            if (countryCode != 103)
            {
                owner.SetAddress(countryCode);
            }    
            ulong userId = g_fc.UACS.CreateUser( owner );
            if (userId != 0L)
            {
                PNUser user = new PNUser( owner.gamertag, userId );
                m_pnUsers[user.UserId] = user;

                return user;
            }
            else
            {
                return null;
            }
        }
        public PNUser CreatePNUserAccount()
        {
            PNUser u = g_fc.CreateUser(false);
            if (u != null)
            {
                m_pnUsers[u.UserId] = u;
            }
            return u;
        }

        public PNUser[] CreatePNUserAccounts(string prefix, uint count, byte countryCode)
        {
            return g_fc.CreateXenonUsers(prefix, count, countryCode);
        }
        public PNUser[] RetrievePNUserAccounts(int count)
        {
            CPUIDList p = g_uc.CreatePrivateUsers(string.Empty, count);
            PNUser[] returnedUsers = new PNUser[count];
            for(uint i = 0; i < count; ++i)
            {
                PNUser u = new PNUser(p[(int) i]);
                m_pnUsers[p[(int) i].Puid] = u;
                returnedUsers[(int)i] = u;
            }
            return returnedUsers;
        }

        // Presence APIs
        // Given a user puid let's you set their state as appropriate for xbox 1 or xenon by signing in, signing out, setting state, etc.
        // LogonUser will log on a user as if on xbox or on xenon based on LogonAs.
        // ConsoleVersion = 0: Xbox 1
        // ConsoleVersion = 1: Xbox 2
        public bool LogonUser(PNUser u, uint titleId)
        {
            if (!UserLoggedOn(u))
            {
                PNXbox x = new PNXbox(titleId, H2UserAccount.c_XeDKVerion, true);

                uint res = g_fc.LogonUser(u, x);
                if((res & 0x80000000) == 0x80000000)
                    return false;
                m_pnConsoles.Add(x);
            }
            return true;
        }

        public bool LogoffUser(PNUser u)
        {
            if(null == u.Xbox || !UserLoggedOn(u) || !u.Xbox.IsXenonTitle)
            {
                return false;
            }

			// Do correct logoff for user (removes from the slot and sends dead user)
			// clears their state and qvals
			u.Disconnect();

			// Check the xbox and clean it up as well now that the slot is finished
			// this is just good to do so as not to leak xboxes while running
			// for al ong time
            byte userCount = GlobalFakeSG.FakeSG.GetUserCount( u.Xbox.XboxId );
            if( 0 == userCount)
            {
                GlobalFakeSG.FakeSG.RemoveXbox(u.Xbox.XboxId);
                m_pnConsoles.Remove(u.Xbox);
				u.Xbox = null;
            }

            return true;
        }


        public bool UserLoggedOn(PNUser u)
        {
            return (u != null && u.Connected && u.Xbox != null);
        }

        public uint GetUserPresenceState(PNUser u)
        {
            if (u != null && UserLoggedOn(u))
            {
                PMsgGetState msg = new PMsgGetState(u); 
                PNMsg reply;
                msg.TransactFD(out reply); 
                PGetStateReplyMsgData replyData = (PGetStateReplyMsgData)reply.Data;
                return replyData.State;
            }
            else
            {
                return 0xFFFFFFFF;
            }
        }
        public void SetUserPresenceState(PNUser u, uint desiredState)
        {
            if (u == null)
            {
                return;
            }
            if (desiredState == 0xFFFFFFFF)
            {
                // user want to have not online state, log off user here
                if (UserLoggedOn(u))
                {
                    LogoffUser(u);
                }
            }
            else
            {
                // for all other state, we need to log on user first if user is not logged on
                if (!UserLoggedOn(u))
                {
                    LogonUser(u, H2UserAccount.c_pongTitleId);
                }
                if (desiredState != u.State)
                {
                    u.SetTitleData(desiredState);
                }
            }
        }
        // Friends APIS
        // invite/reject/block/accept a friend reques
        public void AcceptFriendRequest(PNUser userRequestee, PNUser userRequestor)
        {
            if (userRequestee == null || userRequestor == null)
            {
                return;
            }
            g_fc.AcceptFriend(userRequestee, userRequestor);
        }

        public void InviteFriend(PNUser userRequestor, PNUser userRequestee)
        {
            if (userRequestee == null || userRequestor == null)
            {
                return;
            }
            g_fc.RequestFriend(userRequestor, userRequestee);
        }

        public void RejectFriendRequest(PNUser userRequestee, PNUser userRequestor, bool never)
        {
            if (userRequestee == null || userRequestor == null)
            {
                return;
            }
            g_fc.RejectFriend(userRequestee, userRequestor, never);
        }

        public void MakeFriend(PNUser userRequestor, PNUser userRequestee)
        {
            g_fc.MakeFriend(userRequestor, userRequestee);
        }

        public void DeleteFriend(PNUser userRequestor, PNUser userRequestee)
        {
            if (userRequestee == null || userRequestor == null)
            {
                return;
            }
            g_fc.DeleteFriend(userRequestor, userRequestee);
        }
        

        public ulong CreateUserSession(PNUser user)
        {
            XRLCreateUpdateSession userSession = new XRLCreateUpdateSession();
            XRLSessionInfo sessionInfo;
            userSession.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xmatchfd), out sessionInfo);
            if (sessionInfo != null && sessionInfo.SessionID != null)
            {
                user.MatchSessionId = this.ConvertByteArrayToULong(sessionInfo.SessionID);
                return user.MatchSessionId;
            }
            else
            {
                throw new ApplicationException("Failed to create match session.");
            }
        }
        public void InviteUser(PNUser requestor, PNUser[] requestees)
        {
            if (requestor == null)
            {
                return;
            }
            if (requestor.MatchSessionId != 0)
            {
                // already has a session
                requestor.Invite(requestees, requestor.MatchSessionId);
            }
            else
            {
                ulong newSessionId = this.CreateUserSession(requestor);
                requestor.Invite(requestees, newSessionId);
            }
        }

        public void AcceptInvite(PNUser requestor, PNUser requestee)
        {
            if (requestee == null || requestor == null)
            {
                return;
            }
            requestor.AcceptInvite(requestee);
        }

        public void RejectInvite(PNUser requestor, PNUser requestee, bool fNever)
        {
            if (requestee == null || requestor == null)
            {
                return;
            }
            requestor.RejectInvite(requestee, fNever);
        }

        public void CancelInvite(PNUser requestor, PNUser[] requestees)
        {
            if (requestor == null)
            {
                return;
            }
            requestor.CancelInvite(requestees);
        }

        #endregion

        #region Xenon APIs
        #region User accounts
        public ulong CreateUserAccount(string userName, uint countryCode)
        {
            PNUser user = null;
            user = CreatePNUserAccount(userName, (byte)countryCode);
            
            if (user != null)
            {
                return user.UserId;
            }
            else
            {
                return 0L;
            }
        }
        
        public ulong CreateUserAccount()
        {
            PNUser u = null;
            u = CreatePNUserAccount();

            if (u != null)
            {
                return u.UserId;
            }
            else
            {
                return 0L;
            }
        }
        
        public ulong CreateUserAccount(string userName)
        {
            // create user with country code U.S.
            return this.CreateUserAccount(userName, 103);
        }
        public ulong[] CreateUserAccounts(string prefix, uint number)
        {
            // create users that resides in US
            return this.CreateUserAccounts(prefix, number, 103);
        }
        public ulong[] CreateUserAccounts(string prefix, uint number, uint countryCode)
        {
            PNUser[] returnedUsers = this.CreatePNUserAccounts(prefix, (number > 100 ? 100 : number), (byte)countryCode);
            ulong[] returnedIDs = new ulong[returnedUsers.Length];
            for (int i=0; i<returnedUsers.Length; i++)
            {
                returnedIDs[i] = returnedUsers[i].UserId;
            }
            return returnedIDs;
        }
        public ulong[] RetrieveUserAccounts(uint number)
        {
            PNUser[] returnedUsers = this.RetrievePNUserAccounts((int) (number > 100 ? 100 : number));
            ulong[] returnedIDs = new ulong[returnedUsers.Length];
            for (int i=0; i<returnedUsers.Length; i++)
            {
                returnedIDs[i] = returnedUsers[i].UserId;
            }
            return returnedIDs;
        }

        public ulong GetPuid(string gamerTag)
        {
            PNUser user = GetPNUser(gamerTag);
            if (user != null)
            {
                return user.UserId;
            }
            else
            {
                return 0L;
            }
        }
        public string GetGamertag(ulong puid)
        {
            PNUser thisUser = GetPNUser(puid);
            if (thisUser != null)
            {
                return thisUser.Name;
            }
            else
            {
                return string.Empty;
            }
        }
        public bool LogonUser(ulong puid, uint ConsoleVersion)
        {
            return this.LogonUser(puid, ConsoleVersion, H2UserAccount.c_pongTitleId);
        }
        public bool LogonUser(ulong puid, uint ConsoleVersion, uint titleId)
        {
			if( puid == 0 )
				throw new Exception( "H2UserAccount::LogonUser - puid == 0" );

            PNUser u = GetPNUser(puid);
            if (u == null)
            {
                return false;
            }
            if(u.Connected)
            {
                // Currently IsXenonTitle is boolean so mapping my index which will theoretically be used for future versions to a bool.
                if(u.Xbox.IsXenonTitle == (ConsoleVersion == 1))
                    return true;
                g_fc.UserChangeTitle(u, u.Xbox.TitleId, u.Xbox.ClientVersion, (ConsoleVersion == 1));
                //u.Xbox.IsXenonTitle = (ConsoleVersion == 1);    // May have a bad side-effect if multiple users are signed on the same console.
                return u.Connected;
            }
            return LogonUser(u, titleId);
        }

        public bool LogonUser(ulong puid)
        {
            return LogonUser(puid, 1, H2UserAccount.c_pongTitleId);
        }

        public bool LogoffUser(ulong puid)
        {
            return LogoffUser(GetPNUser(puid));
        }

        public ulong[] GetAllUsers()
        {
            PNUser[] allPNUsers = this.GetAllPNUsers();
            if (allPNUsers != null)
            {
                ulong[] allUsers = new ulong[allPNUsers.Length];
                for (int i=0; i<allPNUsers.Length; i++)
                {
                    allUsers[i] = allPNUsers[i].UserId;
                }
                return allUsers;
            }
            return null;
        }

        public bool UserChangeTitle(ulong puid, uint ConsoleVersion, uint titleId)
        {
            PNUser u = GetPNUser(puid);
            if (u == null)
            {
                return false;
            }
            bool isXenon = true;
            ulong clientVersion = H2UserAccount.c_XeDKVerion;
            if (ConsoleVersion != 1)
            {
                isXenon = false;
                clientVersion = H2UserAccount.c_XDKVersion; // user xbox 1 version
            }

            g_fc.UserChangeTitle(u, titleId, clientVersion, isXenon);
            return true;
        }

        public string GetBillingAccountID(ulong puid)
        {
            UserInfo ui = UodbWS.GetUserInfo(puid);
            if(ui == null)
                return "";
            return ui.billingAccountId;
        }
        #endregion
        
        #region Friends
        public void AcceptFriendRequest(ulong puidRequestor, ulong puidRequestee)
        {
            this.AcceptFriendRequest(GetPNUser(puidRequestor), GetPNUser(puidRequestee));
        }

        public void InviteFriend(ulong puidRequestor, ulong puidRequestee)
        {
            this.InviteFriend(GetPNUser(puidRequestor), GetPNUser(puidRequestee));
        }

        public void RejectFriendRequest(ulong puidRequestor, ulong puidRequestee, bool never)
        {
            this.RejectFriendRequest(GetPNUser(puidRequestor), GetPNUser(puidRequestee), never);
        }

        public void MakeFriend(ulong puidRequestor, ulong puidRequestee)
        {
            this.MakeFriend(GetPNUser(puidRequestor), GetPNUser(puidRequestee));
        }

        public void DeleteFriend(ulong puidRequestor, ulong puidRequestee)
        {
            this.DeleteFriend(GetPNUser(puidRequestor), GetPNUser(puidRequestee));
        }
        public ulong[] GetTypeOfFriends(ulong userId, uint friendType)
        {
            PNUser user = GetPNUser(userId);
            if (!user.LoggedOn)
            {
                this.LogonUser(user, H2UserAccount.c_pongTitleId);
            }
            uint nCount = 0;
            switch (friendType)
            {
                case 0: // OKed friends
                    nCount = user.BuddiesOK;
                    break;
                case 1: // pending friends, I requested them
                    nCount = user.BuddiesPending;
                    break;
                case 2: // requested friends, they requested me
                    nCount = user.BuddiesRequested;
                    break;
                default: // any buddies
                    nCount = user.BuddiesAny;
                    break;
            }
            if (nCount > 0)
            {
                ulong[] returnedBuddies = new ulong[nCount];
                IDictionaryEnumerator enumerator = user.BuddyEnumerator;
                uint index = 0;
                while (enumerator.MoveNext() && index < nCount)
                {
                    PNUser.BuddyInfo bi = enumerator.Value as PNUser.BuddyInfo;
                    if (bi.Status == friendType || friendType > 2)
                    {
                        returnedBuddies[index++] = (ulong) enumerator.Key;
                    }
                }
                return returnedBuddies;
            }
            else
            {
                return null;
            }            
        }
        #endregion
        
        #region Presence
        public uint GetUserPresenceState(ulong puidUser)
        {
            return this.GetUserPresenceState(GetPNUser(puidUser));
        }
        public void SetUserPresenceState(ulong puidUser, uint desiredState)
        {
            this.SetUserPresenceState(GetPNUser(puidUser), desiredState);
        }
        #endregion
        
        #region Session invite
        public ulong CreateUserSession(ulong puidUser)
        {
            return this.CreateUserSession(GetPNUser(puidUser));
        }
        public bool InviteUser(ulong requestor, ulong[] requestee)
        {
            PNUser pnRequestor = GetPNUser(requestor);
            if (pnRequestor != null)
            {
                PNUser[] pnUserInvited = new PNUser[requestee.Length];
                for (int i=0; i<requestee.Length; i++)
                {
                    PNUser thisUser = GetPNUser(requestee[i]);
                    if (thisUser != null)
                    {
                        pnUserInvited[i] = thisUser;
                    }
                    else
                    {
                        return false;
                    }
                }
                this.InviteUser(pnRequestor, pnUserInvited);
                return true;
            }
            return false;
        }
        public bool AcceptInvite(ulong requestor, ulong requestee)
        {
            PNUser pnRequestor = GetPNUser(requestor);
            PNUser pnRequestee = GetPNUser(requestee);
            if (pnRequestor != null && pnRequestee != null)
            {
                this.AcceptInvite(pnRequestor, pnRequestee);
                return true;
            }
            else
            {
                return false;
            }
        }
        public bool RejectInvite(ulong requestor, ulong requestee, bool fNever)
        {
            PNUser pnRequestor = GetPNUser(requestor);
            PNUser pnRequestee = GetPNUser(requestee);
            if (pnRequestor != null && pnRequestee != null)
            {
                this.RejectInvite(pnRequestor, pnRequestee, fNever);
                return true;
            }
            else
            {
                return false;
            }
        }
        public bool CancelInvite(ulong requestor, ulong[] requestee)
        {
            PNUser pnRequestor = GetPNUser(requestor);
            if (pnRequestor != null)
            {
                PNUser[] pnUserInvited = new PNUser[requestee.Length];
                for (int i=0; i<requestee.Length; i++)
                {
                    PNUser thisUser = GetPNUser(requestee[i]);
                    if (thisUser != null)
                    {
                        pnUserInvited[i] = thisUser;
                    }
                    else
                    {
                        return false;
                    }
                }
                this.CancelInvite(pnRequestor, pnUserInvited);
                return true;
            }
            return false;
        }
        public ulong[] GetInvitations(ulong userId)
        {
            PNUser user = this.GetPNUser(userId);
            if (user != null)
            {
                if (!user.LoggedOn)
                {
                    this.LogonUser(user, H2UserAccount.c_pongTitleId);
                }
                ServerTestFramework.LiveService.FakeSG.QValPacket qval = user.WaitForQFlags(XonPresNoti.QFLAG_MASK_INVITE);

                user.HandleQValPacket(qval);

                user.GetInviteNotifications();
                uint numberOfInvitations = user.NumberOfInvitations;
                if (numberOfInvitations > 0)
                {
                    ulong[] invitationArray = new ulong[numberOfInvitations];
                    uint index = 0;
                    System.Collections.IDictionaryEnumerator enumerator = user.InviteEnumerator;            
                    while (enumerator.MoveNext() && index < numberOfInvitations)
                    {
                        if ((ulong)enumerator.Key != userId)
                        {
                            invitationArray[index++] = (ulong) enumerator.Key;
                        }
                    }
                    return invitationArray;
                }
            }
            return null;
        }
       #endregion

        #region User Settings APIs
        public uint GetUserSettingsCount()
        {
            if(m_userSettings.Count == 0)
            {
                SqlDataReader reader = g_npdb.GetAllUserSettings();
                UserSettingInfo usi;
                while(reader.Read())
                {
                    usi = new UserSettingInfo();
                    usi.i_setting_id = reader.GetInt32(0);
                    usi.vc_name = reader.GetString(1);
                    usi.vc_location = reader.GetString(2);
                    usi.i_permission_flags = reader.GetInt32(3);
                    m_userSettings.Add(usi);
                }
            }
            return (uint) m_userSettings.Count;
        }

        public int GetUserSettingId(uint index)
        {
            if(index >= GetUserSettingsCount())
                return 0;

            return ((UserSettingInfo) m_userSettings[(int) index]).i_setting_id;
        }

        public string GetUserSettingName(uint index)
        {
            if(index >= GetUserSettingsCount())
                return "";

            return ((UserSettingInfo) m_userSettings[(int) index]).vc_name;
        }

        public string GetUserSettingNameById(int id)
        {
            int count = (int) GetUserSettingsCount();
            for(int i = 0; i < count; ++i)
            {
                UserSettingInfo usi = (UserSettingInfo) m_userSettings[i];
                if(usi.i_setting_id == id)
                    return usi.vc_name;
            }
            return "";
        }

        public void SetUserSetting(ulong userpuid, int settingid, int titleid, int val)
        {
        }

        public void SetUserSetting(ulong userpuid, int settingid, int titleid, long val)
        {
        }

        public void SetUserSetting(ulong userpuid, int settingid, int titleid, string val)
        {
        }

        public void SetUserSetting(ulong userpuid, int settingid, int titleid, double val)
        {
        }

        public void SetUserSetting(ulong userpuid, int settingid, int titleid, DateTime val)
        {
        }
        public void SetUserAccountState(ulong userPuid, uint type, uint nDurationInDays)
        {
            if (type >= (uint)AccountResetState.Max)
            {
                return;
            }
            string err;
            AccountResetState ars = (AccountResetState)type;
            if(ars != AccountResetState.Max && ars != AccountResetState.ReacceptTermOfUse)
            {
                IPEndPoint [] ips = ServerTestFramework.Global.XEnv.GetInterface(xonline.common.config.Interface.xsuppapi);
                if(ips.Length == 0)
                    throw new Exception("ServerTestFramework is missing the interface ip address for the customer support APIs.");

                CXSuppApi supp = new CXSuppApi();
                supp.Url = "http://" + ips[0].Address.ToString() + ":" + ips[0].Port.ToString() + "/xsuppapi/cxsuppapi.asmx";
                uint res = 0;
                try
                {
                    // bool isLockedOut, bool isVoiceBanned, bool isNicknameBanned, bool mustChangeXName
                    res = supp.modifyAccount(userPuid, 
                        ars == AccountResetState.AccountBan ? true : false, // isLockedOut param
                        ars == AccountResetState.VoiceBan ? true : false,   // isVoiceBanned param
                        false,                                              // isNicknameBanned param
                        ars == AccountResetState.ForcedNameChange ? true : false,   // mustChangeXName param
                        out err);
                }
                catch(System.Exception e)
                {
                    throw new Exception("Calling the customer support API failed for Url: " + supp.Url, e);
                }
                if(res != 0)
                    throw new Exception(err);
            }
            else
            {
                UodbWS.SetUserAccountState(userPuid, (AccountResetState)type, nDurationInDays);
            }
        }
        #endregion

        #region Title List APIs
        public uint GetTitleCount()
        {
            if(m_titles.Count == 0)
            {
                SqlDataReader reader = g_webdb.GetTitles();
                while(reader.Read())
                {
                    TitleInfo ti = new TitleInfo();
                    ti.i_title_id = reader.GetInt32(0);
                    ti.vc_name = reader.GetString(1);
                    m_titles.Add(ti);
                }
            }
            return (uint) m_titles.Count;
        }

        public int GetTitleId(uint index)
        {
            if(index >= GetTitleCount())
                return 0;

            return ((TitleInfo) m_titles[(int) index]).i_title_id;
        }

        public string GetTitleName(uint index)
        {
            if(index >= GetTitleCount())
                return "";

            return ((TitleInfo) m_titles[(int) index]).vc_name;
        }

        public string GetTitleNameById(int id)
        {
            int count = (int) GetTitleCount();
            for(int i = 0; i < count; ++i)
            {
                TitleInfo ti = (TitleInfo) m_titles[i];
                if(ti.i_title_id == id)
                    return ti.vc_name;
            }
            return "";
        }
        #endregion

        #region Title APIs
        public ulong[] GetAllGameTitles()
        {
            lock(typeof(H2UserAccount))
            {
                if (H2UserAccount.allGameTitles == null)
                {
                    uint[] titleInUint = H2UserAccount.g_npdb.GetAllGameTitles(true);
                    // convert uint title id to ulong title id
                    H2UserAccount.allGameTitles = new ulong[titleInUint.Length];
                    for (int i=0; i< titleInUint.Length; i++)
                    {
                        H2UserAccount.allGameTitles[i] = (ulong) titleInUint[i];
                    }
                }
            }
            return H2UserAccount.allGameTitles;
        }
        public string GetTitleConfigedName(uint titleId)
        {
            XmlDocument gameConfig = this.GetGameConfig(titleId);
            XmlElement configProjElem = gameConfig.SelectSingleNode(@"XboxLiveSubmissionProject/GameConfigProject") as XmlElement;
            if (configProjElem != null)
            {
                return configProjElem.GetAttribute("titleName");
            }
            else
            {
                return "Unknown";
            }
        }
        #endregion

        #region Rich Presence APIs
        public string GetGameConfigSection(uint titleId, string xpathToSection)
        {
            XmlDocument gameConfigDocument = this.GetGameConfig(titleId);
            try
            {
                if (gameConfigDocument != null)
                {
                    XmlNode sectionElement = gameConfigDocument.SelectSingleNode(xpathToSection);
                    if (sectionElement != null)
                    {
                        return sectionElement.OuterXml;
                    }
                }
            }
            catch {}
            return string.Empty;
        }
        public bool SetContext(ulong puid, uint contextId, uint contextValue)
        {
            PNUser u = GetPNUser(puid);
            if (null == u)
            {
                return false;
            }
            else if(!UserLoggedOn(u) || !u.Xbox.IsXenonTitle)
            {
                return false;
            }

            u.GIBlob.AddContext(contextId, contextValue);
            u.SetTitleData();

            return true;
        }
        public bool SetProperty(ulong puid, uint propertyId, int propertyValue)
        {
            return this.SetProperty(puid, new GIProperty(propertyId, propertyValue));
        }
        public bool SetProperty(ulong puid, uint propertyId, long propertyValue)
        {
            return this.SetProperty(puid, new GIProperty(propertyId, propertyValue));
        }
        public bool SetProperty(ulong puid, uint propertyId, float propertyValue)
        {
            return this.SetProperty(puid, new GIProperty(propertyId, propertyValue));
        }
        public bool SetProperty(ulong puid, uint propertyId, double propertyValue)
        {
            return this.SetProperty(puid, new GIProperty(propertyId, propertyValue));
        }
        public bool SetProperty(ulong puid, uint propertyId, string propertyValue)
        {
            return this.SetProperty(puid, new GIProperty(propertyId, propertyValue));
        }
        public bool SetPresence(ulong puid, uint presenceState)
        {
            PNUser u = GetPNUser(puid);
            if (null == u)
            {
                return false;
            }
            else if(!UserLoggedOn(u) || !u.Xbox.IsXenonTitle)
            {
                return false;
            }

            u.GIBlob.TitlePresence = presenceState;
            u.SetTitleData();

            return true;
        }
        #endregion

        #region Achievement APIs
        public bool UserPlayedGame(ulong puid, uint titleIDPassedIn, uint totalCred, uint totalAchievements, uint localeID)
        {
            uint sequenceNumber = this.GetUserTitleSequenceNumber(puid) + 1;
            ServerTestFramework.LiveService.UserSettings.UserTitle[] titlePlayed = new ServerTestFramework.LiveService.UserSettings.UserTitle[]
                {
                    new ServerTestFramework.LiveService.UserSettings.UserTitle (
                    titleIDPassedIn, 
                    System.DateTime.UtcNow, 
                    totalCred, 
                    (ushort)totalAchievements, 
                    sequenceNumber)
                };
            SyncTitlesRequest request = new SyncTitlesRequest(puid, (ushort)localeID, System.DateTime.UtcNow, titlePlayed);
            SyncTitlesResponse response = request.Execute();
            return (response.XError == 0);
        }
        
        // achievmentIDWithType: high DWORD is type (1-7) defined in xbox.x, low DWORD is achievement id
        public bool UserEarnedAchievements(ulong puid, uint titleID, ulong[] achievementIDWithType, uint localeID)
        {
            XRLEnumAchievement achievementRequest = new XRLEnumAchievement(titleID, puid, puid, (ushort)localeID, 0, H2UserAccount.c_MaxAchievementsPerTitle);
            AchievementEnumResponse EnumResponse = achievementRequest.Execute();
            uint sequenceNumber = 0;
            if (0 == EnumResponse.xResult && EnumResponse.AchievementsLen > 0)
            {
                for (int i=0; i<EnumResponse.AchievementsLen; i++)
                {
                    if (sequenceNumber < EnumResponse.Achievements[i].SortIndex)
                    {
                        sequenceNumber = EnumResponse.Achievements[i].SortIndex;
                    }
                }
            }
            else
            {
                throw new ApplicationException("Error happened while enumerating achievement (" + EnumResponse.xResult.ToString() +")");
            }
            sequenceNumber ++ ;
            AchievementWD[] achievementData = new AchievementWD[achievementIDWithType.Length];
            for (int i=0; i<achievementIDWithType.Length; i++)
            {
                int achievementType = (int) (achievementIDWithType[i] >> 32);
                if (achievementType > 7 || achievementType < 1)
                {
                    achievementType = 1;
                }
                uint achievementId = (uint)(achievementIDWithType[i] & 0x00000000FFFFFFFF);
                achievementData[i] = new AchievementWD(achievementId, sequenceNumber ++, achievementType);
                achievementData[i].Achieved = DateTime.UtcNow;
                achievementData[i].Flags = (int)XACHIEVEMENT_DETAILS_ACHIEVED_ONLINE;
                for (int j=0; j<EnumResponse.AchievementsLen; j++)
                {
                    if (EnumResponse.Achievements[j].AchievementId == achievementId)
                    {
                        achievementData[i].Flags |= EnumResponse.Achievements[j].Flags;
                        break;
                    }
                }
            }
            XRLSyncAchievements request = new XRLSyncAchievements(titleID, puid, achievementData, System.DateTime.UtcNow);
            SyncAchievementsResponse response = request.Execute();
            return (response.xResult == 0);
        }
        public uint GetUserTitleSequenceNumber(ulong puid)
        {
            uint sequenceNumber = 0;
            EnumTitlesRequest request = new EnumTitlesRequest(puid, puid, 0, H2UserAccount.c_MaxTitleForAchievments); 
            EnumTitlesResponse response = request.Execute();
            if (response.XError == 0)
            {
                for (int i=0; i<response.Titles.Length; i++)
                {
                    if (sequenceNumber < response.Titles[i].Sequence)
                    {
                        sequenceNumber = response.Titles[i].Sequence;
                    }
                }
            }
            else
            {
                throw new ApplicationException("Error happened while enumerating title (" + response.XError.ToString() +")");
            }
            return sequenceNumber;
        }

        public uint GetUserAchievementSortIndex (ulong puid, uint titleID, uint localeID)
        {
            XRLEnumAchievement achievementRequest = new XRLEnumAchievement(titleID, puid, puid, (ushort)localeID, 0, H2UserAccount.c_MaxAchievementsPerTitle);
            AchievementEnumResponse response = achievementRequest.Execute();
            uint sequenceNumber = 0;
            if (0 == response.xResult && response.AchievementsLen > 0)
            {
                for (int i=0; i<response.AchievementsLen; i++)
                {
                    if (sequenceNumber < response.Achievements[i].SortIndex)
                    {
                        sequenceNumber = response.Achievements[i].SortIndex;
                    }
                }
            }
            else
            {
                throw new ApplicationException("Error happened while enumerating achievement (" + response.xResult.ToString() +")");
            }
            return sequenceNumber;
        }
        // each element the high 32 bit is (uint) title id, the low 32 bit is (uint) achievement id
        public ulong[] GetAllUserAchievements(ulong puid, uint localeID)
        {
            ulong maskForNoAchievement = (ulong)0xFFFFFFFF;
            EnumTitlesRequest titleRequest = new EnumTitlesRequest(puid, puid, 0, H2UserAccount.c_MaxTitleForAchievments, (ushort)localeID);
            ServerTestFramework.LiveService.UserSettings.EnumTitlesResponse response = titleRequest.Execute();
            if (0 == response.XError && response.TitlesLen != 0)
            {
                ArrayList returnedValue = new ArrayList();
                for (int i=0; i<response.TitlesLen; i++)
                {
                    ulong titleComponent = response.Titles[i].TitleId;
                    titleComponent <<= 32; // occupies high DWORD
                    ulong[] achievementsForTitle = this.GetUserAchievementsPerTitle(puid, response.Titles[i].TitleId, localeID);
                    if (achievementsForTitle != null && achievementsForTitle.Length > 0)
                    {
                        for (int j=0; j<achievementsForTitle.Length; j++)
                        {
                            returnedValue.Add(titleComponent | achievementsForTitle[j]);
                        }
                    }
                    else
                    {
                        // user played this title but has earned no achievement
                        returnedValue.Add(titleComponent | maskForNoAchievement); 
                    }
                }
                return (ulong[])(returnedValue.ToArray(System.Type.GetType("System.UInt64")));
            }
            else
            {
                return null;
            }
        }
        // cast uint achievement id to ulong so that we can transport back to client side
        public ulong[] GetUserAchievementsPerTitle(ulong puid, uint titleID, uint localeID)
        {
            XRLEnumAchievement achievementRequest = new XRLEnumAchievement(titleID, puid, puid, (ushort)localeID, 0, H2UserAccount.c_MaxAchievementsPerTitle);
            AchievementEnumResponse response = achievementRequest.Execute();
            if (0 == response.xResult && response.AchievementsLen > 0)
            {
                ArrayList returnedAchievements = new ArrayList();
                for (int i=0; i<response.AchievementsLen; i++)
                {
                    if (response.Achievements[i].Flags != 0)
                    {
                        returnedAchievements.Add((ulong)(response.Achievements[i].AchievementId));
                    }
                }
                if (returnedAchievements.Count > 0)
                {
                    return (ulong[])returnedAchievements.ToArray(Type.GetType("System.UInt64"));
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }
        #endregion

        #region Affiliate APIs
		public bool AddAffiliates(ulong userId, ulong[] affiliates, uint flags)
		{
			const int c_maxUserInChuck = 16;
			PNUser user = GetPNUser(userId);
			uint titleId;
			if (!UserLoggedOn(user))
			{
				titleId = H2UserAccount.c_pongTitleId;
				this.LogonUser(user, titleId);
			}
			else
			{
				titleId = user.Xbox.TitleId;
			}
            
			int affiliateLength = affiliates.Length;
			for (int index = 0; index < affiliateLength; index += c_maxUserInChuck)
			{
				int numberOfElementsToCopy = affiliateLength - index;
				numberOfElementsToCopy = numberOfElementsToCopy < c_maxUserInChuck ? numberOfElementsToCopy : c_maxUserInChuck;
				ulong[] affiliatesInChuck = new ulong[numberOfElementsToCopy];
				for (int j=0; j<numberOfElementsToCopy; j++)
				{
					affiliatesInChuck[j] = affiliates[index + j];
				}
				PMsgAddAffiliates req = new PMsgAddAffiliates(
					user, 
					flags,
					titleId, 
					affiliatesInChuck);
                req.TransactFD();
			}
			// add the calling user to affiliate list of the called user for complete game and encountered
			uint newFlags = 0;
			newFlags = (flags & (uint)AffiliateFlags.Encountered) | (flags & (uint)AffiliateFlags.CompletedGame);
			if (newFlags != 0)
			{
				ulong[] userInArray = new ulong[] {userId};
				for (int i=0; i<affiliateLength; i++)
				{
					PNUser newUser = GetPNUser(affiliates[i]);
					if (!UserLoggedOn(newUser))
					{
						this.LogonUser(newUser, titleId);
					}
					PMsgAddAffiliates req = new PMsgAddAffiliates(
						newUser, 
						newFlags,
						titleId, 
						userInArray);
                    req.TransactFD();
				}
			}
			return true;
		}
		public ulong[] GetAffiliatesType(ulong userId, ulong[] affiliatesId)
        {
            PNUser user = GetPNUser(userId);
            if (!UserLoggedOn(user))
            {
                this.LogonUser(user, H2UserAccount.c_pongTitleId);
            }
            ulong[] returnedType = new ulong[affiliatesId.Length];
            for (int i=0; i<affiliatesId.Length; i++)
            {
                returnedType[i] = (ulong)this.GetAffiliateType(user, affiliatesId[i]);
            }
            
            return returnedType;
        }
        #endregion

        #region Messaging APIs
        // Send messages to verify messaging functionality (notifications) on the client
        // return value is message id
        public uint SendCustomMessage(ulong userId, ulong receiverId, string subject, string textMessage, uint attachedVoiceMessageId, uint expiredInMinutes, bool showOnWeb)
        {
            PNUser user = GetPNUser(userId);
            PNUser receiver = GetPNUser(receiverId);
            if (!UserLoggedOn(user))
            {
                this.LogonUser(userId);
            }    
            uint titleId = user.Xbox.TitleId;
            
            uint flags = 0;
            if (!showOnWeb)
            {
                flags |= XonPresNoti.MSG_FLAG_NON_EXPORTABLE;
            }
            if (textMessage != null && textMessage.Length > 0)
            {
                flags |= XonPresNoti.MSG_FLAG_HAS_TEXT;
            }
            if (attachedVoiceMessageId != 0)
            {
                flags |= XonPresNoti.MSG_FLAG_HAS_VOICE;
            }
            if (expiredInMinutes == 0)
            {
                expiredInMinutes = 1;
            }
            UserMessage message = UserMessage.Create(user,
                subject,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                0xcccccccc, // context
                flags,
                (ushort)expiredInMinutes);

            if (textMessage != null && textMessage.Length > 0)
            {
                UserMessage.AttachText(message, textMessage);
            }

            if (attachedVoiceMessageId != 0)
            {
                UserMessage.AttachVoice(message);
            }

            return message.Send(user, receiver);
        }
        public uint SendTypedMessage(ulong userId, ulong receiverId, uint type, uint expiredInMinutes)
        {
            PNUser user;
            PNXbox emptyXbox = new PNXbox();
            if (type == XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE)
            {
                user = new PNUser("UserXuid0", 0);
                user.Xbox = emptyXbox;
            }
            else if (userId != 0)
            {
                user = GetPNUser(userId);
                if (!UserLoggedOn(user))
                {
                    this.LogonUser(userId);
                }
            }
            else
            {
                throw new ArgumentNullException();
            }
            PNUser receiver = GetPNUser(receiverId);

            UserMessage message = null;
            string subject = "XAid Message";
            string compName = "XAid Comp";
            uint context = 0;
            uint flags = 0;

            MsgDetails details = MsgDetails.CreateBlank();

            if (type == XonPresNoti.MSG_TYPE_COMP_REMINDER)
            {
                // context is fake event id
                context = 0x00000001;
                flags |= XonPresNoti.MSG_FLAG_COMP_CONTEXT;
                // required properties
                details.AddProperty(XonPresNoti.MSG_PROP_COMP_NAME, compName);
                details.AddProperty(XonPresNoti.MSG_PROP_COMP_EVENT_START, DateTime.UtcNow);
            }
            else if (type == XonPresNoti.MSG_TYPE_COMP_REQUEST)
            {
                // context is fake event id
                context = 0x00000001;
                flags |= XonPresNoti.MSG_FLAG_COMP_CONTEXT;
                // required properties
                
                details.AddProperty(XonPresNoti.MSG_PROP_COMP_NAME, compName);
                details.AddProperty(XonPresNoti.MSG_PROP_COMP_START, DateTime.UtcNow.AddDays(2.0));
                details.AddProperty(XonPresNoti.MSG_PROP_COMP_REG_CLOSE, DateTime.UtcNow.AddDays(1.0));
            }
            else if (type == XonPresNoti.MSG_TYPE_TEAM_RECRUIT)
            {
                // context is team id, use fake team id 0xFEFE0001
                context = 0xFEFE0001;
                flags |= XonPresNoti.MSG_FLAG_TEAM_CONTEXT;
                // no required properties
            }
            else if (type == XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE)
            {
                context = 0;
                subject = string.Empty;
                flags |= XonPresNoti.MSG_FLAG_HAS_TEXT;
                details.AddProperty(XonPresNoti.MSG_PROP_TEXT, "Body of Personal Message.");
                details.AddProperty(XonPresNoti.MSG_PROP_TEXT_LANGUAGE, (int)1);
            }
            else
            {
                return 0;
            }

            message = UserMessage.Create(user, subject, (byte)type, context, flags, (ushort)expiredInMinutes, details);

            uint msgId = 0;

            if(type != XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE)
            {
                msgId = message.Send(user, receiver);
            }
            else
            {
                QMsgSendMsg sendMsg = new QMsgSendMsg(message, new ulong[]{receiver.UserId});

                PNMsg replyMsg;
                sendMsg.TransactFD(out replyMsg);
                QSendMsgReplyMsgData replyData = (QSendMsgReplyMsgData)(replyMsg.Data);
                msgId = replyData.recipients[0].msgId;
            }

            return msgId;
        }
        public uint SendSystemMessage(uint titleId, uint stringId, uint expiredInMinutes, uint region, bool isRequired, string userName)
        {
            uint flags = XonPresNoti.MSG_FLAG_RECOMMENDED;
            MsgDetails details = MsgDetails.CreateBlank();
            // required properties
            details.AddProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT, stringId);
            if (isRequired)
            {
                // context is 0;
                flags |= XonPresNoti.MSG_FLAG_REQUIRED;
            }
            
            SystemMessage sysMessage = SystemMessage.Create(userName.Substring(0, 15),
                titleId,
                region,
                0,
                DateTime.UtcNow,
                flags,
                (ushort)expiredInMinutes,
                XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                "XAid Message Description",
                details);

            return sysMessage.Send();
        }
        #endregion

        #region FeedBack APIs
        public void AddRatingData(ulong user, int gamesplayed, int usersplayed, int reviewssent)
        {
            FeedbackWS.AddRatingData(user, gamesplayed, usersplayed, reviewssent);
        }
        public void SendComplaint(ulong senderPUID,ulong targetPUID,uint titleID,uint type)
        {
            FeedbackReq req = new FeedbackReq();
            ulong context = (ulong)DateTime.UtcNow.ToFileTimeUtc(); // context need to be unique
            req.SendComplaint(senderPUID, targetPUID, titleID, type, context);
        }
        public void SendReview(ulong senderPUID, ulong targetPUID, uint titleID, uint type)
        {
            FeedbackReq req = new FeedbackReq();
            ulong context = (ulong)DateTime.UtcNow.ToFileTimeUtc(); // context need to be unique
            req.SendReview(senderPUID, targetPUID, titleID, type, context);
        }
        public void SetReputation(ulong targetPUID, double reputation)
        {
            FeedbackWS.SetRating(targetPUID, (float)reputation);
        }
        #endregion

        #region Passport APIs
        public ulong PassportCreateAccount(string PassportMemberName, string Password, string SecretQuestion, string SecretAnswer)
        {
            if(ppConfig == null)
                return 0;

            ulong result = 0;
            NameValueCollection nvc = new NameValueCollection();
            nvc.Add("Name", PassportMemberName);
            nvc.Add("Password", Password);
            nvc.Add("SecretQuestion", SecretQuestion);
            nvc.Add("SecretAnswer", SecretAnswer);
            ServiceApi.Objects.User u = new ServiceApi.Objects.User(ppConfig, nvc, ServiceApi.Objects.UserType.Web );

            result = Convert.ToUInt64(u.Web["NetID"], 16);

            m_passportUsers[result] = u;
            m_passportUsers[PassportMemberName.ToLower()] = u;

            return result;
        }

        public bool PassportSetAccountState(ulong NetID, string State)
        {
            if(ppConfig == null)
                return false;

            ServiceApi.Objects.User u = (ServiceApi.Objects.User) m_passportUsers[NetID];
            if(u == null)
                return false;
            if(State != null)
            {
                switch(State)
                {
                    case "Blocked":
                        u.Web.Block();
                        return true;
                    case "Deleted":
                        u.Web.Delete();
                        return true;
                    case "ForceChangePassword":
                        u.Web.ForceChangePassword(true);
                        return true;
                    case "ForceChangeSQSA":
                        u.Web.ForceChangeSQSA(true);
                        return true;
                    case "ForceRename":
                        u.Web.ForceRename();
                        return true;
                };
            }
            return false;
        }

        public bool PassportRenameAccount(ulong NetID, string NewName)
        {
            if(ppConfig == null)
                return false;

            ServiceApi.Objects.User u = (ServiceApi.Objects.User) m_passportUsers[NetID];
            if(u == null)
                return false;

            u.Web.Rename(NewName);
            return true;
        }

        public ulong PassportNetIDFromName(string Name)
        {
            if(ppConfig == null)
                return 0;

            ulong result = 0;
            ServiceApi.Objects.User u = (ServiceApi.Objects.User)m_passportUsers[Name.ToLower()];
            result = Convert.ToUInt64(u.Web["NetID"], 16);
            return result;
        }

        public string PassportNameFromNetID(ulong NetID)
        {
            if(ppConfig == null)
                return null;

            string result = null;
            ServiceApi.Objects.User u = (ServiceApi.Objects.User)m_passportUsers[NetID];
            if(u == null)
                return null;

            result = u.Web["Name"];
            return result;
        }

        #endregion
        #endregion       


        // Feedback APIs
        // Set feedback for a user to view your own or set feedback for a user to be able to view remotely as part of a gamercard.

        #region private utility functions
        private ulong ConvertByteArrayToULong(byte[] byteArray)
        {
            int count = byteArray.Length <= 8 ? byteArray.Length : 8;
            ulong returnValue = 0L;
            for (int i=0; i<count; i++)
            {
                returnValue <<= 8; // left shift 8 bit
                returnValue += byteArray[i];
            }
            return returnValue;
        }

        private PNUser GetDefaultSessionUser()
        {
            if (this.defaultSessionUser == null)
            {
                this.defaultSessionUser = this.CreatePNUserAccount();
                this.LogonUser(this.defaultSessionUser, H2UserAccount.c_pongTitleId);
            }
            return this.defaultSessionUser;
        }
        private XmlDocument GetGameConfig(uint titleId)
        {
            GameConfigRow thisRow = null;
            thisRow = H2UserAccount.storedGameConfig[titleId] as GameConfigRow;
            // not in local cache
            if (thisRow == null)
            {
                uint result = H2UserAccount.g_npdb.GetGameConfig(titleId, out thisRow);
                if (result != ServerTestFramework.LiveService.HResult.XONLINE_E_INVALID_TITLE_ID)
                {
                    thisRow.XmlConfig = thisRow.XmlConfig.Replace(@"xmlns=""http://www.xboxlive.com/xlast""", string.Empty);
                    lock (H2UserAccount.storedGameConfig)
                    {
                        H2UserAccount.storedGameConfig[titleId] = thisRow;
                    }
                }
                else
                {
                    return null;
                }
            }

            XmlDocument gameConfig = new XmlDocument();
            gameConfig.LoadXml(thisRow.XmlConfig);
            return gameConfig;
        }
        private bool SetProperty(ulong puid, GIProperty property)
        {
            PNUser u = GetPNUser(puid);
            if (null == u)
            {
                return false;
            }
            else if(!UserLoggedOn(u) || !u.Xbox.IsXenonTitle)
            {
                return false;
            }

            u.GIBlob.SetProperty(property);
            u.SetTitleData();

            return true;
        }
        private uint GetAffiliateType(PNUser user, ulong affiliateId)
        {
            PMsgIsAffiliate request = new PMsgIsAffiliate(user, affiliateId);
            PNMsg reply;
            request.TransactFD(out reply);
            PIsAffiliateReplyMsgData data = (PIsAffiliateReplyMsgData)reply.Data;
            if(ServerTestFramework.LiveService.HResult.Failed(data.hr))
            {
                throw new HResultException(data.hr, "IsAffiliate query failed");
            }
            
            if (data.qwAffiliateID == affiliateId)
            {
                return data.dwListFlags;
            }
            else
            {
                return 0; // not an affiliate
            }
        }
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Interface\SessionInfo.cs ===
using System;
using System.IO;
using System.Threading;
using System.Collections;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Diagnostics;
using System.Text;
using System.Runtime.Remoting.Lifetime;
using PCExtCommon;

namespace ExtenderInterface
{

    /// <summary>
    /// CSessionInfo manages the session for the connected client
    /// It uses callback chaining to ensure the processing is all done asynchronously
    /// </summary>
    public class CSessionInfo
    {
        protected  Hashtable m_exts = new Hashtable();
        protected  DateTime m_lastHeartbeat = new DateTime(0);
        protected  Stream m_stream = null;
        protected  MemoryStream ms = new MemoryStream();
        protected  BinaryReader br = null;
        protected  BinaryWriter bw = null;
    
        protected  SessionInitInfo m_info = null;
        protected  CSessionLog sniff = null;

        protected  EventLog m_log = null;
        protected  Timer tmr = null;

        protected void LogLine(EventLogEntryType type, string line)
        {
            if(m_log != null)
                m_log.WriteEntry(line, type);
            else
                Console.WriteLine(type.ToString() + ": " + line);
            Debug.WriteLine(type.ToString() + ": " + line);
        }

        #region Ctors
        public CSessionInfo(SessionInitInfo sess) : this(sess, null)
        {
        }

        public CSessionInfo(SessionInitInfo sess, EventLog log)
        {
            //
            // TODO: Add constructor logic here
            //
            sniff = new CSessionLog(sess.ServerIPPort, sess.ClientIPPort);
            m_info = sess;
            m_log = log;
            m_stream = sess.GetStream();
            br = new BinaryReader(ms, System.Text.Encoding.Unicode);
            bw = new BinaryWriter(m_info.GetStream(), System.Text.Encoding.Unicode);

            uint count = LoadExtensionObjects(sess.ExtensionPath());
            if(count == 0)
            {
                LogLine(EventLogEntryType.Error, "No extensions could be found to be loaded at the path: \"" + sess.ExtensionPath() + "\"");
                EndSession("No extensions could be found to be loaded at the path: \"" + sess.ExtensionPath() + "\"");
                return;
            }

            sess.SetKeepAlive(true);

            tmr = new Timer(new TimerCallback(PingSocketAndObjects), m_info, 1000, 1000);

			ThreadStart start = new ThreadStart(ProcessRequests);
            Thread t = new Thread(start);
            t.Start();
        }
        #endregion

        static void PingSocketAndObjects(Object state)
        {
            SessionInitInfo sii = (SessionInitInfo) state;
            sii.Ping();
        }

        #region uint LoadExtensionObjects(string ExtensionPath); // Loads the extensions available to the session
        uint LoadExtensionObjects(string ExtensionPath)
        {
            string [] files = Directory.GetFiles(ExtensionPath, "*.dll");
            Type [] ctorTypes = new Type [] {typeof(CSessionInfo)};
            object [] ctorParams = new object [] {this};
            uint count = 0;

            foreach(string s in files)
            {
                try
                {
                    CExtenderInterface iface;
                    string libname;
                    Assembly a = Assembly.LoadFrom(s);
                    Type [] all = a.GetTypes();
                    foreach(Type t in all)
                    {
                        if(!t.IsSubclassOf(typeof(CExtenderInterface)))
                            continue;
                        ConstructorInfo ci = null;

                        ci = t.GetConstructor(BindingFlags.Public | BindingFlags.Instance, null, ctorTypes, null);

                        if(ci == null)
                            ci = t.GetConstructor(BindingFlags.FlattenHierarchy | BindingFlags.Public | BindingFlags.Instance, null, ctorTypes, null);

                        if(ci == null)
                            continue;

                        try
                        {
                            iface = (CExtenderInterface) ci.Invoke(ctorParams);
                        }
                        catch
                        {
                            LogLine(EventLogEntryType.Warning, "Failed to instantiate object " + t.FullName + " from file \"" + s + "\"");
                            continue;

                        }

                        libname = iface.ExtenderName;
 
                        if(libname == null || libname == "")
                        {
                            LogLine(EventLogEntryType.Warning, "Invalid extension name.  Skipping object " + t.FullName + " from file \"" + s + "\"");
                            continue;
                        }
                        

                        if(m_exts[libname] != null)
                        {
                            CExtenderInterface curIFace = (CExtenderInterface) m_exts[libname];
                            LogLine(EventLogEntryType.Warning, "Extender name: \"" + libname + "\" is already mapped to type: \"" + curIFace.GetType().FullName + "\" skipping the new library.");
                            continue;
                        }
                        LogLine(EventLogEntryType.Information, "Extender name: \"" + libname + "\" is mapped to: \"" + t.FullName + "\"");
                        m_exts[libname] = iface;
                        count++;
                    }
                }
                catch(System.Exception e)
                {
                    LogLine(EventLogEntryType.Warning, "Processing file: " + s + "\n" + e.Message + "\n" + e.StackTrace.ToString());
                }
            }
            return count;
        }
        #endregion

        #region Read functions
        void Read(byte [] dest, int start, int count)
        {
            int curpos = start;
            bool poll = false;
            int read = 0;
            while((curpos - start) < count)
            {
                poll = m_info.PollRead;
                read = m_stream.Read(dest, curpos, count - curpos + start);
                // PollRead will return true if it there is data available to be read or the socket is closed, reset, or terminated
                // If I read zero data and it says the socket is readable both before and after (checking for potential race condition here)
                // then I know the socket has been closed in some way so I can bail.
                if(read == 0 && poll && m_info.PollRead)
                    throw new System.Exception("The socket has been closed.");

                curpos += read;
            }
        }

        void ReadAndBuffer(int count)
        {
            byte [] res = new byte[count];
            Read(res, 0, count);
            ms.Position = 0;
            ms.Write(res, 0, count);
            ms.Position = 0;
        }

        bool ReadBool()
        {
            ReadAndBuffer(1);
            return br.ReadBoolean();
        }

        ushort ReadUShort()
        {
            ReadAndBuffer(2);
            return br.ReadUInt16();
        }

        short ReadShort()
        {
            ReadAndBuffer(2);
            return br.ReadInt16();
        }

        uint ReadUInt()
        {
            ReadAndBuffer(4);
            return br.ReadUInt32();
        }

        int ReadInt()
        {
            ReadAndBuffer(4);
            return br.ReadInt32();
        }

        ulong ReadULong()
        {
            ReadAndBuffer(8);
            return br.ReadUInt64();
        }

        long ReadLong()
        {
            ReadAndBuffer(8);
            return br.ReadInt64();
        }

        H2Types ReadType()
        {
            short val = ReadShort();
            return (H2Types) val;
        }

        double ReadDouble()
        {
            ReadAndBuffer(8);
            return br.ReadDouble();
        }

        DateTime ReadDate()
        {
            long dt = ReadLong();
            return new DateTime(dt);
        }

        string ReadString()
        {
            ushort len = ReadUShort();
            byte [] str = new byte[len];
            Read(str, 0, len);
            return UnicodeEncoding.Unicode.GetString(str);
        }

        ulong [] ReadArrayULong()
        {
            ushort len = ReadUShort();
            if((len & 0x7) != 0)
                throw new Exception("The number of bytes for an array of ulongs is not divisible by the size of a ulong.");
            len >>= 3;
            ulong [] res = new ulong[len];
            for(ushort i = 0; i < len; ++i)
                res[i] = ReadULong();
            return res;
        }

        long [] ReadArrayLong()
        {
            ushort len = ReadUShort();
            if((len & 0x7) != 0)
                throw new Exception("The number of bytes for an array of longs is not divisible by the size of a long.");
            len >>= 3;
            long [] res = new long[len];
            for(ushort i = 0; i < len; ++i)
                res[i] = ReadLong();
            return res;
        }

        object ReadParameter(H2Types type)
        {
            switch(type)
            {
                case H2Types.tbool:
                    return ReadBool();
                case H2Types.tint32:
                    return ReadInt();
                case H2Types.tuint32:
                    return ReadUInt();
                case H2Types.tdouble:
                    return ReadDouble();
                case H2Types.tdate:
                    return ReadDate();
                case H2Types.tint64:
                    return ReadLong();
                case H2Types.tuint64:
                    return ReadULong();
                case H2Types.tstring:
                    return ReadString();
                case H2Types.trguint64:
                    return ReadArrayULong();
                case H2Types.trgint64:
                    return ReadArrayLong();
                default:
                    throw new Exception("Unsupported type encountered on the stream: " + type.ToString());
            };
        }

        #endregion

        void ProcessRequests()
        {
            bool fExit = false;
            SMethodInfo method = new SMethodInfo();
            ushort paramCount;
            H2Types type;
            try
            {
                while(!fExit)
                {
                    m_info.CurState = "Reading library name.";
                    method.library = ReadString();
                    sniff.LogLibrary(method.library);

                    m_info.CurState = "Reading function name.";
                    method.function = ReadString();
                    sniff.LogMethod(method.function);

                    m_info.CurState = "Reading parameter count.";
                    paramCount = ReadUShort();
                    method.parameters = new object[paramCount];
                    sniff.LogParamCount(paramCount);
 
                    for(ushort u = 0; u < paramCount; ++u)
                    {
                        m_info.CurState = "Reading parameter type for parameter " + u.ToString() + ".";
                        type = ReadType();
                        m_info.CurState = "Reading parameter value for parameter " + u.ToString() + ".";
                        method.parameters[u] = ReadParameter(type);
                        sniff.LogParam(type, method.parameters[u]);
                    }

                    // Call the function (it is responsible for writing the return value)
                    CallMethod(method);
                }
            }
            catch(System.Exception e)
            {
                EndSession(e);
            }
        }

        #region void CallMethod(SMethodInfo method)
        void CallMethod(SMethodInfo method)
        {
            m_info.CurState = "Retrieving library " + method.library + ".";
            CExtenderInterface iface = (CExtenderInterface) m_exts[method.library];
            byte [] str;
            object result;
            H2Types typ;
            m_info.CurState = "Calling function " + method.library + "." + method.function + ".";
            if(iface == null)
            {
                result = new CError("Extension \"" + method.library + "\" not found");
            }
            else if(!iface.CallMethod(method.function, method.parameters, out result))
            {
                result = new CError("Function \"" + method.function + "\" not found in extension \"" + method.library + "\"");
            }

            // write result to the stream
            // configure the result structure with the information
            Type t = typeof(object);
            if(result != null)
                t = result.GetType();

            m_info.CurState = "Writing result of type " + t.ToString() + " for function " + method.library + "." + method.function + ".";
            if(t == typeof(CError))
            {
                bw.Write((ushort) (typ = H2Types.terror));
                str = System.Text.UnicodeEncoding.Unicode.GetBytes(((CError) result).Failure);
                bw.Write((ushort) (str.Length));
                bw.Write(str);
            }
            else if(t == typeof(object))
            {
                bw.Write((ushort) (typ = H2Types.tvoid));
            }
            else if(t == typeof(bool))
            {
                bw.Write((ushort) (typ = H2Types.tbool));
                bw.Write((bool) result);
            }
            else if(t == typeof(short) ||
                t == typeof(int) ||
                t == typeof(sbyte))
            {
                bw.Write((ushort) (typ = H2Types.tint32));
                bw.Write(Convert.ToInt32(result));
            }
            else if(t == typeof(ushort) ||
                t == typeof(uint) ||
                t ==  typeof(byte))
            {
                bw.Write((ushort) (typ = H2Types.tuint32));
                bw.Write(Convert.ToUInt32(result));
            }
            else if(t == typeof(long))
            {
                bw.Write((ushort) (typ = H2Types.tint64));
                bw.Write((long) result);
            }
            else if(t == typeof(ulong))
            {
                bw.Write((ushort) (typ = H2Types.tuint64));
                bw.Write((ulong) result);
            }
            else if(t == typeof(long []))
            {
                bw.Write((ushort) (typ = H2Types.trgint64));
                long [] res = (long []) result;
                bw.Write((ushort) (res.Length * 8));
                for(int i = 0; i < res.Length; ++i)
                    bw.Write(res[i]);
            }
            else if(t == typeof(ulong []))
            {
                bw.Write((ushort) (typ = H2Types.trguint64));
                ulong [] res = (ulong []) result;
                bw.Write((ushort) (res.Length * 8));
                for(int i = 0; i < res.Length; ++i)
                    bw.Write(res[i]);
            }
            else if(t == typeof(string))
            {
                bw.Write((ushort) (typ = H2Types.tstring));
                str = System.Text.UnicodeEncoding.Unicode.GetBytes((string) result);
                bw.Write((ushort) (str.Length));
                bw.Write(str);
            }
            else if(t == typeof(DateTime))
            {
                bw.Write((ushort) (typ = H2Types.tdate));
                bw.Write(((DateTime) result).Ticks);
            }
            else if(t == typeof(float) ||
                t == typeof(decimal) || 
                t == typeof(double))
            {
                bw.Write((ushort) (typ = H2Types.tdouble));
                bw.Write(Convert.ToDouble(result));
            }
            else
            {
                EndSession("Unsupported type encountered to be written to the stream: " + result.GetType().ToString());
                return;
            }
            
            // Log the result first before actually writing to the stream just in case there might be a problem here.
            sniff.LogRetVal(typ, result);
        }
        #endregion 

        #region EndSession variations
        void EndSession(Exception e)
        {
            if(e.InnerException != null)
                EndSession(e.Message + "\n" + e.StackTrace.ToString() + e.InnerException.Message + "\n" + e.InnerException.StackTrace.ToString());
            else
                EndSession(e.Message + "\n" + e.StackTrace.ToString());
        }

        void EndSession(string reason)
        {
            // Log an event here with the reason if it is not null.
            m_info.CurState = "Ending the session.";

            try
            {
                tmr.Change(Timeout.Infinite, Timeout.Infinite);
                foreach(string k in m_exts.Keys)
                {
                    try
                    {
                        CExtenderInterface iface = (CExtenderInterface) m_exts[k];
                        iface.EndSession();
                    }
                    catch(System.Exception e)
                    {
                        string s = "Error ending the session for an extension: " + e.Message + "\n" + e.StackTrace.ToString();
                        LogLine(EventLogEntryType.Error, s);
                    }
                }

                LogLine(EventLogEntryType.Warning, reason);
            }
            catch
            {
            }
            finally
            {
                lock(m_info)
                {
                    m_info.Close();
                    sniff.Close();
                }
            }
            try
            {
                AppDomain.Unload(AppDomain.CurrentDomain);  // End the domain so we clean up...
            }
            catch(System.Exception e)
            {
                if(e.GetType() == typeof(CannotUnloadAppDomainException))
                    LogLine(EventLogEntryType.Error, "Cannot unload the app domain!!  Memory leak!!!");
            }
        }
        #endregion

        #region Accessors
        public uint DebugIP
        {
            get{return m_XDKDebugIP;}
        }
        public uint TitleIP
        {
            get{return m_XDKTitleIP;}
        }
        public uint HardwareVersion
        {
            get{return m_XDKHardwareVer;}
        }
        public uint VideoMode
        {
            get{return m_XDKVideoMode;}
        }
        public uint BuildVersion
        {
            get{return m_XDKBuildVer;}
        }
        public uint BuildFlags
        {
            get{return m_XDKBuildFlags;}
        }
        public string BuildFlagString
        {
            get{return (((m_XDKBuildFlags & (uint) XDKBuildFlags.Internal) == (uint) XDKBuildFlags.Internal) ? "Internal" : "External")
                    + "|" +
                    (((m_XDKBuildFlags & (uint) XDKBuildFlags.Debug) == (uint) XDKBuildFlags.Debug) ? "Debug" : "Release");}
        }
        public string ConsoleName
        {
            get{return m_XDKConsoleName;}
        }
        public string ScriptOwner
        {
            get{return m_ScriptOwner;}
        }


        #endregion

        protected uint m_XDKDebugIP = 0;
        protected uint m_XDKTitleIP = 0;
        protected string m_XDKConsoleName = "";
        protected string m_ScriptOwner = "";
        protected uint m_XDKHardwareVer = 0;
        protected uint m_XDKVideoMode = 0;
        protected uint m_XDKBuildVer = 0;
        protected uint m_XDKBuildFlags = 0;
        protected uint m_ProtoVersion = 0;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ProfileReg\Main.cs ===
using System;
using Microsoft.WebRunner;
using ServerTestFramework;
using System.Xml;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Collections;
using System.Net;
using System.Threading;
using System.Text;
using System.Resources;
using System.Reflection;
using System.Globalization;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;
using Microsoft.WebRunner.Loggers;



 

namespace ConsoleReg

{

	//Main.cs is designed to collect data from ProfReg.xml and put the data into Array's.
	//The section at the bottom of this class initiates the start of the functionality.

	public class Helpers
	{
		public static WebRunnerSDK profreg = new WebRunnerSDK(); 
		public static string WebText;
		public static string WebTxt;
		public static int urlcount;
		public static ArrayList FN = new ArrayList();
		public static ArrayList IC = new ArrayList();
		public static ArrayList MN = new ArrayList();
		public static ArrayList MPh = new ArrayList();
		public static ArrayList Ph = new ArrayList();
		public static ArrayList LN = new ArrayList();
		public static ArrayList CSN = new ArrayList();
		public static ArrayList PCode = new ArrayList();
		public static ArrayList EMAIL = new ArrayList();
		public static ArrayList RSI = new ArrayList();
		public static ArrayList Address1 = new ArrayList();
		public static ArrayList FavGame = new ArrayList();
		public static ArrayList city = new ArrayList();
		public static ArrayList FavGenre = new ArrayList();
		public static ArrayList GCSI = new ArrayList();
		public static ArrayList GCRI = new ArrayList();
		public static ArrayList GCAI = new ArrayList();
		public static ArrayList GCAdI = new ArrayList();
		public static ArrayList GCStrI = new ArrayList();
		public static ArrayList GCRacI = new ArrayList();
		public static ArrayList GCOI = new ArrayList();
		public static ArrayList GLPC = new ArrayList();
		public static ArrayList GLWI = new ArrayList();
		public static ArrayList GLCI = new ArrayList();
		public static ArrayList GLPI = new ArrayList();
		public static ArrayList GPHI = new ArrayList();
		public static ArrayList VRI = new ArrayList();
		public static ArrayList LUB = new ArrayList();
		public static string StrFirstName;
		public static string StrMiddleName;
		public static string StrLastName;
		public static string StrInternetCon;
		public static string StrConsoleSerialNum;
		public static string StrEmailAddress;
		public static string StrAddress1;
		public static string StrFavGame;
		public static string Strcity;
		public static string StrPhone;
		public static string StrMobPhone;
		public static string StrPostalCode;
		public static string StrRegistrationSourceID;
		public static string StrGameCatSportsInd;
		public static string StrGameCatAdventureInd;
		public static string StrGameCatRoleplayInd;
		public static string StrGameCatActionInd;
		public static string StrGameCatStrategyInd;
		public static string StrGameCatRacingInd;
		public static string StrGameCatOtherInd;
		public static string StrGameLocPCInd;
		public static string StrGameLocWebInd;
		public static string StrGameLocConsoleInd;
		public static string StrGameLocPhoneInd;
		public static string StrConsolePlaceholderInd;
		public static string StrValidRegistrationInd;
		public static string StrLastUpdateBy;
		public static string StrFavGenre;
		

	
			
		/// </summary>
		
		public static void Initializer() 
		{
			
			
			
				
				//
				XmlDocument Reg = new XmlDocument();
			
			
				XmlNamespaceManager NsMgr = new XmlNamespaceManager(Reg.NameTable);
				//This program will take the data from proreg.xml and store it in separate arrays for use
				//later on.
			
				//Create an XmlNamespaceManager for resolving namespaces.
			
				NsMgr.AddNamespace("Tests", "ProReg");

				
				Reg.Load("ProfReg.xml");
				int nCntr = 0;
				//
				XmlNodeList ObjNode = Reg.SelectNodes("/Tests/ProfReg/ManFirstName/FirstName", NsMgr);
				foreach(XmlNode Reg1 in ObjNode)
			
				{
					
								
					string Strfirstname=Reg1.Attributes["FN1"].Value;
					FN.Add(Strfirstname);
					nCntr = nCntr + 1;
					
				}
			
			nCntr = 0;
		
			ConsoleReg.Internationalcheck.InterCheck(nCntr);
			XmlNodeList ObjNodeMN = Reg.SelectNodes("/Tests/ProfReg/ManMiddleName/MiddleName", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodeMN)
			{
				StrMiddleName = ObjNodes.Attributes["MN"].Value;
				MN.Add(StrMiddleName);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//Phone
			XmlNodeList ObjNodePhone = Reg.SelectNodes("/Tests/ProfReg/ManLastName/LastName", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodePhone)
			{
				StrLastName = ObjNodes.Attributes["LN"].Value;
				LN.Add(StrLastName);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//Mobile phone
			XmlNodeList ObjNodeMobPhone = Reg.SelectNodes("/Tests/ProfReg/ManMobPhone/MobPhone", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodeMobPhone)
			{
				StrMobPhone = ObjNodes.Attributes["MPh"].Value;
				MPh.Add(StrMobPhone);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//Internet Connections
			
			XmlNodeList ObjNodeIC = Reg.SelectNodes("/Tests/ProfReg/ManInternetCon/InternetCon", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodeIC)
			{
				StrInternetCon = ObjNodes.Attributes["ICon"].Value;
				IC.Add(StrInternetCon);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//  Phone put into an array to be used in the WebRequest for testing.
			
			XmlNodeList ObjNode1 = Reg.SelectNodes("/Tests/ProfReg/ManPhone/Phone", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode1)
			{
				StrPhone = ObjNodes.Attributes["Ph"].Value;
				Ph.Add(StrPhone);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
					
			//  ConsoleSerialNbr put into an array to be used in the WebRequest for testing
			
			XmlNodeList ObjNode2 = Reg.SelectNodes("/Tests/ProfReg/ManConsoleSerialNbr/ConsoleSerialNbr", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode2)
			{	
				StrConsoleSerialNum = ObjNodes.Attributes["CSN"].Value;
				CSN.Add(StrConsoleSerialNum);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//Email Address
			
			XmlNodeList ObjNodeb = Reg.SelectNodes("/Tests/ProfReg/ManEmailAddress/EmailAddress", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodeb)
			{
				StrEmailAddress = ObjNodes.Attributes["EMAIL"].Value;
				EMAIL.Add(StrEmailAddress);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			// Address1
			
			
			XmlNodeList ObjNodec = Reg.SelectNodes("/Tests/ProfReg/ManAddress1/Address1", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodec)
			{
				StrAddress1 = ObjNodes.Attributes["Address1"].Value;
				Address1.Add(StrAddress1);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			// city
			
			
			XmlNodeList ObjNoded = Reg.SelectNodes("/Tests/ProfReg/ManCity/City", NsMgr);
			foreach(XmlNode ObjNodes in ObjNoded)
			{
				Strcity = ObjNodes.Attributes["city"].Value;
				city.Add(Strcity);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			// Favorite Genre
			
			
			XmlNodeList ObjNodee = Reg.SelectNodes("/Tests/ProfReg/ManFavoriteGenre/FavoriteGenre", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodee)
			{
				StrFavGenre = ObjNodes.Attributes["FavGenre"].Value;
				FavGenre.Add(StrFavGenre);
				nCntr = nCntr + 1;
			
			}
			nCntr = 0;
			// Favorite Games
			
			
			XmlNodeList ObjNodef = Reg.SelectNodes("/Tests/ProfReg/ManFavoriteGame/FavoriteGame", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodef)
			{
				StrFavGame = ObjNodes.Attributes["FavGame"].Value;
				FavGame.Add(StrFavGame);
				nCntr = nCntr + 1;
			
			}
			nCntr = 0;
			// RegistrationSourceID put into an array to be used in the WebRequest for Testing
			
			
			XmlNodeList ObjNode3 = Reg.SelectNodes("/Tests/ProfReg/ManRegistrationSourceID/RegistrationSourceID", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode3)
			{
				StrRegistrationSourceID = ObjNodes.Attributes["RSI"].Value;
				RSI.Add(StrRegistrationSourceID);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//Postal Code
			
			
			XmlNodeList ObjNodeP = Reg.SelectNodes("/Tests/ProfReg/ManPostalCode/PostalCode", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodeP)
			{
				StrPostalCode = ObjNodes.Attributes["PCode"].Value;
				PCode.Add(StrPostalCode);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			
			//GameCatSportsInd put into an array to be used in the WebRequest for testing
			
			
			XmlNodeList ObjNode4 = Reg.SelectNodes("/Tests/ProfReg/ManGameCatSportsInd/GameCatSportsInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode4)
			{
				StrGameCatSportsInd = ObjNodes.Attributes["GCSI"].Value;
				GCSI.Add(StrGameCatSportsInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//GameCatRoleplayInd put into an array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode5 = Reg.SelectNodes("/Tests/ProfReg/ManGameCatRolePlayInd/GameCatRolePlayInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode5)
			{ 
				StrGameCatRoleplayInd = ObjNodes.Attributes["GCRI"].Value;
				GCRI.Add(StrGameCatRoleplayInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;

			//GameCatActionInd put into an array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode6 = Reg.SelectNodes("/Tests/ProfReg/ManGameCatActionInd/GameCatActionInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode6)
			{
				StrGameCatActionInd = ObjNodes.Attributes["GCAI"].Value;
				GCAI.Add(StrGameCatActionInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//GameCatAdventureInd put into an Array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode7 = Reg.SelectNodes("/Tests/ProfReg/ManGameCatRolePlayInd/GameCatAdventureInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode7)
			{
				StrGameCatAdventureInd = ObjNodes.Attributes["GCAdI"].Value;
				GCAdI.Add(StrGameCatAdventureInd);
				nCntr = nCntr + 1;
			
			}
			nCntr = 0;
			//GameCatStrategyInd put into an Array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode8 = Reg.SelectNodes("/Tests/ProfReg/ManGameCatStrategyInd/GameCatStrategyInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode8)
			{
				StrGameCatStrategyInd = ObjNodes.Attributes["GCStrI"].Value;
				GCStrI.Add(StrGameCatStrategyInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//GameCatRacingInd put into an Array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode9 = Reg.SelectNodes("/Tests/ProfReg/ManGameCatRacingInd/GameCatRacingInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode9)
			{
				StrGameCatRacingInd = ObjNodes.Attributes["GCRacI"].Value;
				GCRacI.Add(StrGameCatRacingInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//GameCatOtherInd put into an Array to be used in the WebRequest for Testing.
			
			
			XmlNodeList ObjNode10 = Reg.SelectNodes("/Tests/ProfReg/ManGameCatOtherInd/GameCatOtherInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode10)
			{
				StrGameCatOtherInd = ObjNodes.Attributes["GCOI"].Value;
				GCOI.Add(StrGameCatOtherInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//GameLocPCInd put into an Array to be use in the WebRequest for testing.
			
			
			XmlNodeList ObjNode11 = Reg.SelectNodes("/Tests/ProfReg/ManGameLocPCInd/GameLocPCInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode11)
			{
				StrGameLocPCInd = ObjNodes.Attributes["GLPC"].Value;
				GLPC.Add(StrGameLocPCInd);
				nCntr = nCntr + 1;
			
			}
			nCntr = 0;
			//GameLocWebInd put into an Array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode12 = Reg.SelectNodes("/Tests/ProfReg/ManGameLocWebInd/GameLocWebInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode12)
			{
				StrGameLocWebInd = ObjNodes.Attributes["GLWC"].Value;
				GLWI.Add(StrGameLocWebInd);
				nCntr = nCntr + 1;
			
			}
			nCntr = 0;
			//GameLocConsoleInd put into an Array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode13 = Reg.SelectNodes("/Tests/ProfReg/ManGameLocConsoleInd/GameLocConsoleInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode13)
			{
				StrGameLocConsoleInd = ObjNodes.Attributes["GLCI"].Value;
				GLCI.Add(StrGameLocConsoleInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//GameLocPhoneInd put into an Array to be used in the WebRequest for Testing.
			
			
			XmlNodeList ObjNode14 = Reg.SelectNodes("/Tests/ProfReg/ManGameLocPhoneInd/GameLocPhoneInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode14)
			{
				StrGameLocPhoneInd = ObjNodes.Attributes["GLPI"].Value;
				GLPI.Add(StrGameLocPhoneInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//ConsolePlaceholderInd put into an Arra to be used in the WebRequest for Testing.
			
			
			XmlNodeList ObjNode15 = Reg.SelectNodes("/Tests/ProfReg/ManConsolePlaceholderInd/ConsolePlaceholderInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode15)
			{
				StrConsolePlaceholderInd = ObjNodes.Attributes["GPHI"].Value;
				GPHI.Add(StrConsolePlaceholderInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//ValidRegistrationInd put into an Array to be used in the WebRequest for Testing.
			
			
			XmlNodeList ObjNode16 = Reg.SelectNodes("/Tests/ProfReg/ManValidRegistrationInd/ValidRegistrationInd", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode16)
			{
				StrValidRegistrationInd = ObjNodes.Attributes["VRI"].Value;
				VRI.Add(StrValidRegistrationInd);
				nCntr = nCntr + 1;
				
			}
			nCntr = 0;
			//LastUpdatedBy put into an Array to be used in the WebRequest for testing.
			
			
			XmlNodeList ObjNode17 = Reg.SelectNodes("/Tests/ProfReg/ManLastUpdateBy/LastUpdateBy", NsMgr);
			foreach(XmlNode ObjNodes in ObjNode17)
			{
				StrLastUpdateBy = ObjNodes.Attributes["LUB"].Value;
				LUB.Add(StrLastUpdateBy);
				nCntr = nCntr + 1;
							}
			nCntr = 0;
			
		}
		public class ConsoleReg1 : TestSuite

		{
			public override void Initialize(System.Xml.XmlDocument config)
			{
			//	base.Initialize (config);
								 
			}

			// functional test for BasicTest

			public override InitializerInfo GetRequiredResources()

			{

				// need to use fakesg service

				InitializerInfo ii= new InitializerInfo();
				
				ii.UseFakeSG = false;
				
				Helpers.Initializer();		
				
				return ii;

			}

 

			// stress test for BasicTest

			public override InitializerInfo GetStressRequiredResources()

			{

				// besides using fakeSG service, this stress test also need to

				// createUsers before testing start, also need certificates

				InitializerInfo   ii = new InitializerInfo();

				ii.UseFakeSG = false;

				ii.CreateUsers = false;

				ii.Certificates = false;

				return ii;

			}

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ProfileReg\Internationalcheck.cs ===
using System;
using System.Xml;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Collections;
using System.Net;
using System.Threading;
using System.Text;
using System.Resources;
using System.Reflection;
using System.Globalization;
using Microsoft.WebRunner;
using ServerTestFramework;
using Microsoft.WebRunner.Loggers;



namespace ConsoleReg
{
	/// <summary>
	///  This process goes through each of the available languages and tests to verify that the 
	///  My Accounts page is up and working.  Previously this was a concern
	/// </summary>
	public class Internationalcheck
	{
		public static string StrIntChk;
		public static WebRunnerSDK profreg = new WebRunnerSDK(); 
		public static string WebText;
		public static string WebTxt;
		public static ArrayList IntChk = new ArrayList();
		
		
		public static void InterCheck(int nCntr)
		{	
		
			XmlDocument Reg = new XmlDocument();
			//
			XmlNamespaceManager NsMgr = new XmlNamespaceManager(Reg.NameTable);
			//This program will take the data from proreg.xml and store it in separate arrays for use
			//later on.
			
			//Create an XmlNamespaceManager for resolving namespaces.
			
			NsMgr.AddNamespace("Tests", "ProReg");
			nCntr = 0;
				
			Reg.Load("ProfReg.xml");
			XmlNodeList ObjNodePhone = Reg.SelectNodes("/Tests/ProfReg/ManRegions/Regions", NsMgr);
			foreach(XmlNode ObjNodes in ObjNodePhone)
			{
				StrIntChk = ObjNodes.Attributes["IntChk"].Value;
				IntChk.Add(StrIntChk);
				//Helpers.profreg.StartApplication(AppObj.IE, "url=http://www.xbox.com");
				Helpers.profreg.StartApplication(AppObj.IE, "url=http://prep.xbox.com");
				if (Helpers.profreg.Verify(HTMLUIObj.Title, "innertext=Culture Select&&exactmatch=false"))
				{
					Console.WriteLine("Setting Region");
					Helpers.profreg.InputText(HTMLUIObj.TextBox, "TexttoInput=United States&&id=SiteCultureDropDownList&&exactmatch=false");
					Helpers.profreg.Click(HTMLUIObj.Button, "id=SubmitButton&&exactmatch=false");
					//Helpers.profreg.Click(HTMLUIObj.Link, "href=http://www.xbox.com/en-US/myaccount.htm&&exactmatch=false");
				}
				else
				{
					Helpers.profreg.Click(HTMLUIObj.Link, "href=http://prep.xbox.com/" + IntChk[nCntr] + "/myaccount.htm&&exactmatch=false");
				
					Helpers.profreg.Click(HTMLUIObj.Link, "HREF=https://login.passport-ppe.com/ppsecure/secure.srf&&exactmatch=false");
				
					Helpers.profreg.InputText(HTMLUIObj.TextBox, "TexttoInput=xbxprofreg@hotmail.com&&name=login&&exactmatch=false");

					Helpers.profreg.InputText(HTMLUIObj.TextBox, "TexttoInput=xbxregprof&&name=passwd&&exactmatch=false");
					Helpers.profreg.Click(HTMLUIObj.Button, "id=submit1&&exactmatch=false");
					// the next line is to make sure that we are using the debug version which allows us to use the same console serial numbers over again.
					Helpers.profreg.Navigate(HTMLUIObj.BrowserWindow, "href=http://prep.xbox.com/" + IntChk[nCntr] + "/myaccount.htm");
					//Helpers.profreg.Navigate(HTMLUIObj.BrowserWindow, "href=http://prep.xbox.com/" + IntChk[nCntr] + "/myaccount.htm?debug=1");
					if (Helpers.profreg.Verify(HTMLUIObj.Title, "innertext=myaccount&&exactmatch=false"))
					{
						Console.WriteLine("Made it to the My Accounts Page");
					}
					else
					{
						Console.WriteLine("Didn't make it to the My Accounts Page");
					}
					Helpers.profreg.Click(HTMLUIObj.Link, "HREF=http://login.passport-ppe.com/logout.srf&&exactmatch=false");
					
			
					Helpers.profreg.CleanUp("CloseBrowsers=true&&ClearCache=true&&ClearCookies=false");
				}
			nCntr = nCntr + 1;
			}

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ProfileReg\FillRegPage.cs ===
using System;
using System.Xml;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Collections;
using System.Net;
using System.Threading;
using System.Text;
using System.Resources;
using System.Reflection;
using System.Globalization;
using Microsoft.WebRunner;
using ServerTestFramework;
using Microsoft.WebRunner.Loggers;

namespace ConsoleReg
{
	///
	/// The following is a summary description for FillRegPage.
	/// This class will take a the data gathered in Arrays from Main.cs and inserts them
	/// into the MyAccounts page in  preproduction xbox.com or production xbox.com.  Depending on 
	/// what line you comment out.  There should be better logging to verify problems!!  WebRunner 
	/// Logging wasn't working out to well.
	/// The reason for the different checkboxes functionality is that is causes a profile to change 
	/// most of the time.  This causes a test of the update completion page. 
	/// </summary>
	public class FillRegPage
	{
		public static void FillRegPage1(int nCntr)
		{
			//Starts out by verifying that a cookie is present by checking the site to see if the region
			//page shows up.  If it does then it picks United States and moves to the main page of 
			//of prep.xbox.com.
			//******************************************************************************//
			//Helpers.profreg.StartApplication(AppObj.IE, "url=http://www.xbox.com");
			Helpers.profreg.StartApplication(AppObj.IE, "url=http://prep.xbox.com");
			if (Helpers.profreg.Verify(HTMLUIObj.Title, "innertext=Culture Select&&exactmatch=false"))
			{
				Console.WriteLine("Setting Region");
				
				Helpers.profreg.InputText(HTMLUIObj.TextBox, "TexttoInput=United States&&id=SiteCultureDropDownList&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.Button, "id=SubmitButton&&exactmatch=false");
			}
			else if (Helpers.profreg.Verify(HTMLUIObj.Title, "innertext=XBOX.com Home&&exactmatch=false"))
			{
				Console.WriteLine("No region page used");
			}
				
			
			
			Console.WriteLine("This lists the data you are using in the XML file?" +  nCntr);
				
			//Opening up the My Account page.  Then signing up via passport.  Once in to the My Account page 
			//this process will fill out each text box and dropdown and will cycle through with different data aprox 30 times.
				
				
			//Helpers.profreg.Click(HTMLUIObj.Link, "href=http://www.xbox.com/en-US/myaccount.htm&&exactmatch=false");
			Helpers.profreg.Click(HTMLUIObj.Link, "href=http://prep.xbox.com/en-US/myaccount.htm&&exactmatch=false");
				
			Helpers.profreg.Click(HTMLUIObj.Link, "HREF=https://login.passport-ppe.com/ppsecure/secure.srf&&exactmatch=false");
				
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "TexttoInput=xbxprofreg@hotmail.com&&name=login&&exactmatch=false");

			Helpers.profreg.InputText(HTMLUIObj.TextBox, "TexttoInput=xbxregprof&&name=passwd&&exactmatch=false");
			Helpers.profreg.Click(HTMLUIObj.Button, "id=submit1&&exactmatch=false");
			// the next line is to make sure that we are using the debug version which allows us to use the same console serial numbers over again.
			Helpers.profreg.Navigate(HTMLUIObj.BrowserWindow, "href=http://prep.xbox.com/en-US/myaccount.htm");
			//Helpers.profreg.Navigate(HTMLUIObj.BrowserWindow, "href=http://prep.xbox.com/en-US/myaccount.htm?debug=1");
			//Helpers.profreg.Navigate(HTMLUIObj.BrowserWindow, "href=http://www.xbox.com/en-US/myaccount.htm");
		
				
				
			// Inserting Console Serial Numbers from the XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.CSN[nCntr] + "&&name=SerialNumberTextbox&&exactmatch=false");
			// Inserting first Names from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.FN[nCntr] + "&&name=FirstName&&exactmatch=false");
			// Inserting Middle Names from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.MN[nCntr] + "&&name=MiddleName&&exactmatch=false");
			// Inserting Last Names from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.LN[nCntr] + "&&name=LastName&&exactmatch=false");
			// Inserting Email Address from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.EMAIL[nCntr] + "&&name=emailaddress&&exactmatch=false");
			// console.writeline is to monitor the progress as we move through the program.
			Console.WriteLine("next is the address");
			//  Insert Address to Address1 field from XML file.
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.Address1[nCntr] + "&&name=Address1&&exactmatch=false");
			// Inserting City Names from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.city[nCntr] + "&&name=city&&exactmatch=false");
			// Inserting Postal Codes from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.PCode[nCntr] + "&&name=postalcode&&exactmatch=false");
			// State...Hardcoded to Washington right now from XML file.
			Helpers.profreg.Click(HTMLUIObj.Select, "id=RegionDropDownList&&exactmatch=false&&TexttoInput=Washington");
			Console.WriteLine("Next is the phone");
			//Internet Communication (DSL, Cable, T1, modem from XML file)
			Helpers.profreg.Click(HTMLUIObj.Select, "Texttoinput=" + Helpers.IC[nCntr] + "&&name=InternetConnection&&exactmatch=false");
				

			// Regular phone number testing from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.Ph[nCntr] + "&&name=DayPhone&&exactmatch=false");
			// Mobile phone testing from XML file
			Helpers.profreg.InputText(HTMLUIObj.TextBox, "Texttoinput=" + Helpers.MPh[nCntr] + "&&name=MobilePhone&&exactmatch=false");
			if (Helpers.profreg.Verify(HTMLUIObj.CheckBox, "name=OptInCheckbox&&exactmatch=false&&checked=false"))
			{
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OptInCheckbox&&exactmatch=false");
			}
			// Starting a process where you would get different checkbox combinations.
			if (nCntr <= 1)
			{
				Console.WriteLine("Starting on the checkboxes");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnXboxCheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnDreamcastCheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnGameCubeCheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnPS1CheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnPS2CheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnN64CheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnPCCheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnGenesisCheckBox&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.CheckBox, "name=OwnNESCheckBox&&exactmatch=false");
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PropXQSTest\NegativeTests.cs ===
using System;
using ServerTestFramework;
using System.IO;

namespace PropXQSTest
{
    /// <summary>
    /// Live Match Negative Test Cases.
    /// 
    /// </summary>
    [TestGroup]
    public class NegativeTests : TestNode 
    {

        [TestCase]
        class BadXML : PropXQSBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                PropXQSTool = new PropXQS();
                PropXQSTool.PropXQSPath = toolPath;
                CleanXQSConfig("0000B2D2");
                
                PropXQSTool.RunPropXQS(Path.Combine(inputFilePath, "0000B2D2_badxml.xqs"),false); 
                
                if (GetTableNames("0000B2D2").Length == 0)
                {
                    if (PropXQSTool.Output.IndexOf("does not match") > -1)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                        return;
                    }
                }
                PropXQSTool = null; 
            }
		}
        [TestCase]
        class NoExist : PropXQSBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                PropXQSTool = new PropXQS();
                PropXQSTool.PropXQSPath = toolPath;
                CleanXQSConfig("0000B2D2");
                
                PropXQSTool.RunPropXQS(Path.Combine(inputFilePath, "0000B2D2_nofile.xqs"),false); 
                
                if (GetTableNames("0000B2D2").Length == 0)
                {
                    if (PropXQSTool.Output.IndexOf("Could not find file") > -1)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                        return;
                    }
                }
                PropXQSTool = null; 
            }
        }

        [TestCase]
        class NoFile : PropXQSBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                PropXQSTool = new PropXQS();
                PropXQSTool.PropXQSPath = toolPath;
                CleanXQSConfig("0000B2D2");
                
                PropXQSTool.RunPropXQS("",false);
                Info(PropXQSTool.Output);
                if (GetTableNames("0000B2D2").Length == 0)
                {
                    if (PropXQSTool.Output.IndexOf("Failed to open or read") > -1)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                        return;
                    }
                }
                PropXQSTool = null; 
            }
        }

        [TestCase]
        class InvalidShare : PropXQSBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                PropXQSTool = new PropXQS();
                PropXQSTool.PropXQSPath = toolPath;
                CleanXQSConfig("0000B2D2");
                
                PropXQSTool.RunPropXQS(@"\\nonexistantshare\c\myfile.xqs",false);
                Info(PropXQSTool.Output);
                if (GetTableNames("0000B2D2").Length == 0)
                {
                    if (PropXQSTool.Output.IndexOf("Failed to open or read") > -1)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                        return;
                    }
                }
                PropXQSTool = null; 
            }
        }

	} // End NegativeTests class
} // End namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PropXQSTest\PositiveTests.cs ===
using System;
using System.IO;
using ServerTestFramework;

namespace PropXQSTest
{
    /// <summary>
    /// Summary description for PositiveTests.
    /// </summary>
    [TestGroup]
    public class PositiveTests : TestNode
    {
        [TestCase, DVT]
        class PropFile : PropXQSBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                PropXQSTool = new PropXQS();
                PropXQSTool.PropXQSPath = toolPath;
                CleanXQSConfig("0000B2D2");
                
                PropXQSTool.RunPropXQS(Path.Combine(inputFilePath, "0000B2D2.xqs"),false); 
                
                if (GetTableNames("0000B2D2").Length > 0)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
                }
                PropXQSTool = null; 
            }
        }

        [TestCase]
        class PropFileWDrop : PropXQSBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                PropXQSTool = new PropXQS();
                PropXQSTool.PropXQSPath = toolPath;
                CleanXQSConfig("a7049955");
                
                PropXQSTool.RunPropXQS(Path.Combine(inputFilePath, "a7049955.xqs"),true); 
                
                if (GetTableNames("a7049955").Length > 0)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
                }
                PropXQSTool = null; 
            }
        }

        [TestCase, DVT]
        class Usage : PropXQSBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                PropXQSTool = new PropXQS();
                PropXQSTool.PropXQSPath = toolPath;
                                
                PropXQSTool.RunPropXQS("/?");
                
                if (PropXQSTool.Output.IndexOf("Parses and loads")>0)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
                }
                PropXQSTool = null; 
            }
        }

    } // End PositiveTests class
}  // End namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PropXQSTest\PropXQSTest.cs ===
using System;
using ServerTestFramework;

namespace PropXQSTest
{

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PropXQSTest\PropXQSBase.cs ===
using System;
using ServerTestFramework;
using System.Xml;
using System.Reflection;
using System.IO;
using System.Collections;
using System.Data.SqlClient;
using System.Text;

namespace PropXQSTest
{
    /// <summary>
    /// Base Test class that defines pathing and verification.
    /// </summary>
    abstract public class PropXQSBase : TestBase
    {
        protected static string toolPath="";

        protected PropXQS PropXQSTool = null;

        /// <summary>Path to the input files</summary>
        protected string inputFilePath="";
        /// <summary>Temp file path</summary>
        protected string tempPath = "";
        /// <summary>Server that we will use to test Add/Delete</summary>
        protected string testServerName = "";

        /// <summary>Title ID that we were use for our tests</summary>
        protected string testTitleID = "";

        protected ServerTestFramework.Database.QueryDB queryDB;

        public PropXQSBase()
        {
            ReadConfig();
        }

        ~PropXQSBase()
        {
            if (queryDB != null)
            {
                queryDB.Close();
                queryDB = null;
            }
        }

        /// <summary>
        /// Fills the variables with the values from the PropXQSTest.xml
        /// </summary>
        protected void ReadConfig()
        {
            XmlNode config = Global.Config.SelectSingleNode("descendant::PropXQSTest");

            if (config != null)
            {
                XmlNode node = config.SelectSingleNode("DefaultToolPath");
                if (node != null)
                {
                    toolPath=System.IO.Path.Combine(node.InnerText, "PropXQS.exe"); 
                }
                node = config.SelectSingleNode("TempDirectoryPath");
                if (node != null)
                {
                    tempPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), node.InnerText);
                }
                node = config.SelectSingleNode("InputFilePath");
                if (node != null)
                {
                    inputFilePath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), node.InnerText);
                }
                node = config.SelectSingleNode("TestTitleID");
                if (node != null)
                {
                    testTitleID = node.InnerText;
                }

            }
        }

        /// <summary>
        /// Returns comma separated list of QueryDB proc names for a title
        /// </summary>
        /// <param name="titleID">XQS Title ID</param>
        /// <returns>string of comma separated values</returns>
        public string GetStoredProcs(string titleID)
        {
            SqlDataReader reader = null;
            StringBuilder procs = new StringBuilder();
                
            if (queryDB == null)
            {
                queryDB = new ServerTestFramework.Database.QueryDB();
                queryDB.ConnectToServer(xonline.common.config.Config.GetServerListByInterface(xonline.common.config.Interface.querydb));
            }

            try
            {
                string sql = String.Format("Select name from sysobjects where name like 'p_query_%_{0}%' and type='P'", titleID);
                queryDB.ReadData(sql, out reader);
        
                while (reader.Read())
                {
                    if (procs.Length != 0)
                    {
                        procs.Append(",");
                    }
                    procs.Append(reader.GetString(0));
                }
            }
            finally
            {
                if(null != reader && !reader.IsClosed)
                {
                    reader.Close();
                }
                reader = null;
            }
           
            return procs.ToString();
        }

        public string GetTableNames(string titleID)
        {
            SqlDataReader reader = null;
            StringBuilder tables = new StringBuilder();

            if (queryDB == null)
            {
                queryDB = new ServerTestFramework.Database.QueryDB();
                queryDB.ConnectToServer(xonline.common.config.Config.GetServerListByInterface(xonline.common.config.Interface.querydb));
            }

            try
            {
                string sql = String.Format("Select name from sysobjects where name like 't_query_%_{0}%' and type='U'", titleID);
                queryDB.ReadData(sql, out reader);
            
                while (reader.Read())
                {
                    if (tables.Length != 0)
                    {
                        tables.Append(",");
                    }
                    tables.Append(reader.GetString(0));
                
                }
            }
            finally
            {
                if(null != reader && !reader.IsClosed)
                {
                    reader.Close();
                }
                reader = null;
            }
            return tables.ToString();
        }


        public void CleanXQSConfig(string titleID)
        {
            string[] procs = GetStoredProcs(titleID).Split(',');
            foreach (string proc in procs)
            {
                if (proc.Trim() != "")
                {
                    Info(String.Format("DROP PROCEDURE {0}", proc));
                    queryDB.IssueCommand(String.Format("DROP PROCEDURE {0}", proc));
                }
            }

            string[] tables = GetTableNames(titleID).Split(',');
            foreach (string table in tables)
            {
                if (table.Trim() != "")
                {
                    Info(String.Format("DROP TABLE {0}", table));
                    queryDB.IssueCommand(String.Format("DROP TABLE {0}", table));
                }
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PropXQSTest\PropXQS.cs ===
using System;
using System.IO;
using System.Diagnostics;
using System.Text;
using ServerTestFramework.Utilities;

namespace PropXQSTest
{
	/// <summary>
	/// Wrapper class to run PropXQS.
	/// </summary>
	public class PropXQS
	{
		const string DefaultPropXQSPath = "D:\\webroot\\xbltools";

        private ProcessWrapper _PropXQSProcess;

        public PropXQS()
		{
            _PropXQSProcess = new ProcessWrapper("PropXQS", Path.Combine(DefaultPropXQSPath, "PropXQS.exe"));
        }

        public PropXQS(string toolPath) : this()
        {
        _PropXQSProcess.ExecutablePath = Path.GetFullPath(toolPath);
        }

        /// <summary>
        /// Gets or sets path to PropXQS
        /// </summary>
        public string PropXQSPath
        {
            get { return _PropXQSProcess.ExecutablePath; }
            set { _PropXQSProcess.ExecutablePath = value; }
        }

        /// <summary>
        /// Gets the output text from the most recent run of PropXQS.
        /// </summary>
        public string Output
        {
            get { return _PropXQSProcess.Output; }
        }

        /// <summary>
        /// Runs the XQS file with option to drop existing tables
        /// </summary>
        /// <param name="xqsFile">Path and/or name of XQS file</param>
        /// <param name="dropExisting">Drops the existing database tables</param>
        public void RunPropXQS(string xqsFile, bool dropExisting)
        {
            string args = String.Format("/xqs:{0}", xqsFile);
            if (dropExisting)
            {
                args = String.Concat(args, " /drop");
            }
            if (_PropXQSProcess.Run(args) != 0)
            {
                throw new PropXQSException("PropXQS Failed.", _PropXQSProcess.Output);
            }
        }

        /// <summary>
        /// Allows running PropXQS with custom argument string.
        /// Mainly used for negative testing.
        /// </summary>
        /// <param name="arguments">Argument string to be used when calling PropXQS.</param>
        public void RunPropXQS(string arguments)
        {
            if (_PropXQSProcess.Run(arguments) != 0)
            {
                throw new PropXQSException("PropXQS Failed.", _PropXQSProcess.Output);
            }
        }

	}

    public class PropXQSException : ProcessException
    {
        public PropXQSException() : base("PropXQS") {}
        public PropXQSException(string message) : base("PropXQS", message) {}
        public PropXQSException(string message, Exception innerException) : base("PropXQS", message, innerException) {}
        public PropXQSException(string message, string output) : base("PropXQS", message, output) {}
        public PropXQSException(string message, string output, Exception innerException) :
            base("PropXQS", message, output, innerException) {}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ProfileReg\ProfReg.cs ===
using System;
using System.Xml;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Collections;
using System.Net;
using System.Threading;
using System.Text;
using System.Resources;
using System.Reflection;
using System.Globalization;
using Microsoft.WebRunner;
using ServerTestFramework;
using Microsoft.WebRunner.Loggers;




namespace ConsoleReg
{
	/// <summary>
	/// I will break this class up again to make it a more descriptive class but for now the test cases
	/// start here and consoleregistration will be broken out to another class to finish this out.
	/// I will do that this weekend...Dave
	/// </summary>
	[TestGroup] 

	public class RegConsoleInput : TestNode
	{
		/// <summary>
		public ArrayList[] CSN;
		//Starting up the application to test my account with console serial number
			
		[TestCase, Description("This test case passes")]
			class GoodTest1 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(0);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("This test should work. Good data")]
			class secondgoodtest2 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(1);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Excessive size first name data.  Should fail")]
			class LargeFirstNameData3 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(2);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Large data in middle name. Should fail")]
			class LargedatainMiddleName4 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(3);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("No Last name..empty to test required.  Should Fail")]
			class emptylastname5 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(4);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("empty postal code.  should fail")]
			class EmptyPostalCode6 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(5);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("Has -Select- in Favorite Genre.  Should cause required to show")]
			class SelectinFavoriteGenre7 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(6);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("Should be good data and pass")]
			class GoodData8 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(7);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("empty ConsoleSerial Number")]
			class EmptyConsoleSN9 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(8);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("Empty Registration Source ID")]
			class EmptyRegSourceID10 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(9);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("Real long email address.  Should fail and check for truncation in Database")]
			class LongEmailAddress11 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(10);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("Extra long address.  Should fail and check truncation in database")]
			class LongAddress12 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(11);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("Extra long City.  Should fail and check truncation in database")]
			class LongCity13 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(12);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}	
		[TestCase, Description("Extra long Phone.  Should fail and check truncation in database")]
			class LongPhone14 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(13);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Extra long Mobile Phone.  Should fail and check truncation in database")]
			class LongMobilePhone15 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(14);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Empty GameCatSportsInd.")]
			class EmptyGameCatSportsInd16 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(15);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Empty GameCatRolePlayInd.")]
			class EmptyGameCatRolePlayInd17 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(16);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Empty GameCatActionInd.")]
			class EmptyGameCatActionInd18 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(17);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Empty GameCatAdventureInd.")]
			class EmptyGameCatAdventureInd19 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(18);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Empty GameCatStrategyInd.")]
			class EmptyGameCatStrategyInd20 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(19);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Empty GameCatRacingInd.")]
			class EmptyGameCatRacingInd21 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(20);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Incorrect GameCatOtherInd.")]
			class EmptyGameCatOtherInd22 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(21);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Empty GameLocPCInd.")]
			class EmptyGameLocPCInd23 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(22);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		[TestCase, Description("Connection types")]
			class InternetConnectionTypes24 : TestBase
		{
			protected override void Execute()
			{
				bool Results = Consoleregistration(23);
				
				if (Results) 
				{
					ResultCode = TEST_RESULTS.PASSED;
				}
				else 
				{ 
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}
		public static bool Consoleregistration(int nCntr)
		{
			
			bool Results = true;
			bool Falseoverride = true;
			ConsoleReg.FillRegPage.FillRegPage1(nCntr);	
			//TOOK IT FROM HERE 
			
			//ENDING HERE		
			Helpers.profreg.Click(HTMLUIObj.Select, "TexttoInput=" + Helpers.FavGame[nCntr] + "&&id=FavoriteGame&&exactmatch=false");
			Helpers.profreg.Click(HTMLUIObj.Select, "TexttoInput=" + Helpers.FavGenre[nCntr] + "&&id=FavoriteGenre&&exactmatch=false"); 		
			
			Helpers.profreg.Click(HTMLUIObj.Select, "id=ImageType&&exactmatch=false&&TexttoInput=Static");
			Helpers.profreg.Click(HTMLUIObj.Select, "id=VideoBandwidth&&exactmatch=false&&TexttoInput=Low");
			Helpers.profreg.Click(HTMLUIObj.Select, "id=EmailFormat&&exactmatch=false&&TexttoInput=Text");
			Helpers.profreg.Click(HTMLUIObj.Button, "id=SaveButton&&exactmatch=false");
				
				
			if (Helpers.profreg.Verify(HTMLUIObj.Url, "Url=https://prep.xbox.com/en-US/myaccount.htm&&exactmatch=false"))	
			//if (Helpers.profreg.Verify(HTMLUIObj.Url, "Url=https://prep.xbox.com/en-US/myaccount.htm?debug=1&&exactmatch=false"))
				//if (Helpers.profreg.Verify(HTMLUIObj.Url, "Url=https://www.xbox.com/en-US/myaccount.htm&&exactmatch=false"))
			{
				//Verify that we are not getting the confirmation page with the 404 error.
				if (Helpers.profreg.Verify(HTMLUIObj.Title, "innertext=Search Text&&exactmatch=false"))
				{ 
					Console.WriteLine("The 404 is still there after hitting save button");
					Results = false;
					Falseoverride = false;
				}
				else 
					// Verify not getting application server error 
					if (Helpers.profreg.Verify(HTMLUIObj.Title, "innertext=Literal value in the command exceeded the range of the type of the associated column.&&exactmatch=false"))
				{
					Console.WriteLine("Server Error: Literal value in the command exceeded the range of the type of the associated column");
					Results = false;
					Falseoverride = false;
				}
				if (Helpers.FN[nCntr].ToString() == "")
				{ 
					Helpers.profreg.Verify(HTMLUIObj.ByTag, "Value=Required&&id=_ctl6__ctl0_FirstNameValidator&&exactmatch=false");
					Results = true;
					Console.WriteLine("First Name is Empty");
				}
				else if (Helpers.FN[nCntr].ToString() != "")
				{
					Results = true;
				}
				else 
				{ 
					Results = false;
					Falseoverride = false;
				}
				if (Helpers.LN[nCntr].ToString() == "")
				{
					Helpers.profreg.Verify(HTMLUIObj.ByTag, "Value=Required&&id=_ctl6__ctl0_LastNameValidator&&exactmatch=false");
					Console.WriteLine("Last Name is empty and the code caught the required");
					Results = true;
				}
				else if (Helpers.LN[nCntr].ToString() != "")
				{	
					Results = true;
				}
				else
				{
					Results = false;
					Falseoverride = false;
				}
				if (Helpers.IC[nCntr].ToString() == "-Select-")
				{
					Helpers.profreg.Verify(HTMLUIObj.ByTag, "Value=Required&&id=_ctl6__ctl0_InternetConnectionDropDownList&&exactmatch=false");
					Console.WriteLine("Internet Connection is -Select- and the code caught the Required");
					Results = true;
				}
				else if (Helpers.IC[nCntr].ToString() != "")
				{
					Results = true;
				}
				else
				{
					Results = false;
					Falseoverride = false;
				}
				if (Helpers.GCSI[nCntr].ToString() == "-Select-")
				{
					Helpers.profreg.Verify(HTMLUIObj.ByTag, "Value=Required&&id=_ctl6__ctl0_FavoriteGameValidator&&exactmatch=false");
					Console.WriteLine("Favoite Genre requires a selection and the code caught the -Select-");
					Results = true;
				}
				else if (Helpers.GCSI[nCntr].ToString() != "")
				{
					Results = true;
				}
				else
				{ 
					Results = false;
					Falseoverride = false;
				}
				if (Helpers.EMAIL[nCntr].ToString() == "")
				{
					Helpers.profreg.Verify(HTMLUIObj.ByTag, "Value=Required&&id=_ctl6__ctl0_EmailRequiredValidator&&exactmatch=false");
					Console.WriteLine("Email was empty or null and the code caught the Required");
					Results = true;
				}
				else if (Helpers.EMAIL[nCntr].ToString() != "")
				{
					Results = true;
				}
				else
				{
					Results = false;
					Falseoverride = false;
				}
				if (Helpers.CSN[nCntr].ToString() == "")
				{
					Helpers.profreg.Verify(HTMLUIObj.ByTag, "Value=Incorrect serial number format&&id=_ctl6__ctl0_SerialNumberTextbox&&exactmatch=false");
					Console.WriteLine("Console Serial Number is empty or a bad formatted number and the code caught the incorrect serial number");
					Results = true;
				}
				else if (Helpers.CSN[nCntr].ToString() != "")
				{
					Results = true;
				}
				else
				{
					Results = false;
					Falseoverride = false;
				}
			}
			else
				if (Helpers.profreg.Verify(HTMLUIObj.Url, "url=http://prep.xbox.com/en-US/MyAccountConfirmation.htm&&exactmatch=false"))
				//if (Helpers.profreg.Verify(HTMLUIObj.Url, "url=http://www.xbox.com/en-US/MyAccountConfirmation.htm&&exactmatch=false"))
			{
				Helpers.profreg.Click(HTMLUIObj.Link, "href=/en-us/default.htm&&exactmatch=false");
				Helpers.profreg.Click(HTMLUIObj.Link, "href=/en-us/live/default.htm&&exactmatch=false");
			}
			else
			{
				Console.WriteLine("did not get to confirmation page");
				Results = false;
				Falseoverride = false;
			}
				
			//Start over to the live gamer tag page to link the two processes together.
			//Helpers.profreg.Click(HTMLUIObj.Link, "href=/en-us/live/linkgamertag.htm&&exactmatch=false");
				
			//update the counters for the next set of data out of the arrays
				
				
		  
			//End: Console.WriteLine("Logging out of passport and clearing cache then closing browser");
		
			Helpers.profreg.Click(HTMLUIObj.Link, "HREF=http://login.passport-ppe.com/logout.srf&&exactmatch=false");
					
			
			Helpers.profreg.CleanUp("CloseBrowsers=true&&ClearCache=true&&ClearCookies=false");
			if (Falseoverride == false)
			{
				Results = false;
			}
			return Results;
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PurchaseTool\Main.cs ===
using System;
using System.Xml;
using System.Collections;
using System.IO;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Billing;

namespace PurchaseTool
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	class MainClass
	{
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main(string[] args)
		{
		
			try 
			{
				if(args.Length < 3)
				{
					ConsoleX.Write(CC.RED, "Usage: PurchaseTool <title> <puid or gamertag> <boid> [config.xml]", "");
					return;
				}
				
				
				String strTitle = args[0];
				String strPuid = args[1];
				String strBoid = args[2];
				String strConfig = "stf.xml";
				if(args.Length > 3)
				{
					strConfig = args[3];
				}

				if(strTitle == null || strTitle.Length == 0)  
				{
					throw new Exception("puid param not provided");
				}

				if(strPuid == null || strPuid.Length == 0)  
				{
					throw new Exception("puid param not provided");
				}
				
				if(strBoid == null || strBoid.Length == 0)  
				{
					throw new Exception("boid param not provided");
				}

				if(strConfig == null || strConfig.Length == 0)  
				{
					throw new Exception("config param not provided");
				}

				XmlDocument config = new XmlDataDocument();
				config.Load("stf.xml");
				
				Global.Initialize(config);

				XmlNode servers = config.SelectSingleNode("/stf/servers");
				if (servers != null)
				{
					Global.Env.Add(servers);
				}
				else
				{
					throw new Exception("Section <stf><servers> not found in any specified xml config files.  Verify " + Global.DefaultConfigFile + " is available or specify an alternative on the command line.");
				}

				ulong ulOfferId = strBoid.StartsWith("0x") ? ParseHex(strBoid) : ulong.Parse(strPuid);
				uint uiTitleId	= strTitle.StartsWith("0x") ? (uint)ParseHex(strTitle) : uint.Parse(strTitle);
				
				ulong ulPuid = 0;

				if(strPuid.StartsWith("0x"))
				{
					ulPuid = ParseHex(strPuid);
				}
				else
				{
					try 
					{
						ulPuid = ulong.Parse(strPuid);
					}
					catch(Exception) 
					{
					}
					finally 
					{
						ulPuid = 0;
					}

					if(ulPuid == 0)
					{
						// lookup the gamertag
						ulPuid = UodbWS.DoesUserExist(strPuid);
						if(ulPuid != 0)
						{
							ConsoleX.WriteLine(CC.GREEN, "Mapped gamertag: " + strPuid + " to PUID: " + ulPuid.ToString("X"));
						}

					}
				}
				
				// get the details of the offer
				XRLOfferingDetails detail = new XRLOfferingDetails();
				detail.OfferId = ulOfferId;
				detail.UserPuid = ulPuid;
				detail.TitleId = uiTitleId;
				if(!detail.Execute())
				{
					throw new Exception("No offering details: " + detail.GetDumpString());
				}

				ConsoleX.WriteLine(CC.GREEN, "Offering info: " +
					detail.Resp.WholePart +
					"."+ detail.Resp.FractionalPart + detail.Resp.ISOCode + "\n--- BLOB ---\n " +
					Encoding.Unicode.GetString(detail.Resp.Blob));


				// purchase the offer
				XRLOfferingPurchase request = new XRLOfferingPurchase();
				request.titleId = uiTitleId;
				request.machinePuid = new RandomEx().NextPuid();
				request.offeringId = ulOfferId;
				request.userPuid = ulPuid;
			
				if(!request.Execute())
				{
					request.Dump();
				}
				else
				{
					ConsoleX.WriteLine(CC.GREEN, "Offering Purchase succeeded.");
				}

				Global.UninitializeGlobalResources();
			} 
			catch(Exception ex)
			{
				ConsoleX.WriteLine(CC.RED, "Program failed: " + ex.Message + "\nStackTrace: " + ex.StackTrace);
			}
		}
		protected static ulong ParseHex(String str)
		{
			ulong accum = 0;

			for(int pos=0, i = str.Length - 1; i >= 0; --i, ++pos)
			{
				char c = str[i];
				
				if(c == 'x') 
					break;

				if(char.IsDigit(c))
				{
					accum += (ulong) (char.GetNumericValue(c) * (Math.Pow(16, pos)));
				}
				else if(char.IsLetter(c))
				{
					
					accum += (ulong) ((char.ToUpper(c) - 'A' + 10) * (Math.Pow(16, pos)));
				}
			}

			return accum;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\QuickEnforcementLiveTestBase.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Xml;

using System.Globalization; //for DateTimeFormatInfo

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.tools.stutilcore;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Utilities;


namespace xonline.tools.communitymgr.quickenforcement {

    abstract public class QuickEnforcementLiveTestBase : QuickEnforcementTestBase
    {
        public static live.lfm.Xbox360 _observingBox = null;
        public static live.common.XblUser _observer = null;
        
        public QuickEnforcementLiveTestBase()
        {
            InitializeArguments();
            live.common.XmlConfig xmlConfig = new live.common.XmlConfig("LiveLib.xml");
            live.common.Config.SetConfig(xmlConfig);
            if (_observingBox == null)
            {
                _observingBox = new live.lfm.Xbox360();
            }
            if (_observer == null)
            {
                _observer = _observingBox.SignUp.CreateUser();
                _observingBox.Live.Logon(_observer);
            }
        }

        /// <summary>
        /// Verify an FNC.  Given a puid, and FNC status, returns true if it matched, false otherwise.
        /// </summary>
        public bool VerifyFNC(live.common.XblUser xblUser, int expectedFNC)
        {
            bool success = false;
            try
            {
                live.common.AccountInfoEx acctInfo = live.server.Cust.GetAccountEx(_observingBox.Client, xblUser.Puid);
                if (acctInfo.MustChangeXName == (expectedFNC != 0))
                {
                    success = true;
                    Global.RO.Success("Expected FNC matches User {0}.", xblUser.Puid);
                }
                else
                {
                    Global.RO.Error("Expected FNC did not match on User {0}.", xblUser.Puid);
                }
            }
            catch (Exception e)
            {
                Global.RO.Debug(e.ToString());
            }
            return success;
        }

        /// <summary>
        /// Verify a motto change.  Given a puid, returns true if the first byte is "C".
        /// This code was taken from xsuppapi_test.cs.
        /// TODO: pass in argument of code of conduct to check, and verify the whole array.
        ///       Currently this doesn't even work for non-European languages.
        /// </summary>
        public bool VerifyMottoChange(live.common.XblUser xblUser, int lang)
        {
            bool success = true;
            ulong[] userList = new ulong[1];
            userList[0] = xblUser.Puid;
            uint[] settingList = new uint[1];
            settingList[0] = live.protocol.ProfileDefs.XPROFILE_GAMERCARD_MOTTO;  // 0x402C0011;
            live.protocol.ReadSettingsResponse rsRsp = live.server.UserSettings.ReadSettings(
                _observingBox.Client,
                _observingBox.ActiveUser,
                XOn.XENON_DASH_TITLE_ID,
                userList,
                settingList);

            foreach (live.protocol.UserSetting u in rsRsp.Settings)
            {
                Global.RO.Info(String.Format("  Setting: {0}, Len: {1}, Value: {2}", u.SettingId, u.Value.Length, ByteConvert.ToString(u.Value)));
                if (u.SettingId == ProfileDefs.XPROFILE_GAMERCARD_MOTTO) //ProfileDefs.XPROFILE_GAMERCARD_MOTTO;
                {
                    switch (lang)
                    {
                        case 1:
                            //length of setting should be 2*(15char+1null), and first byte should equal 'C' (0x4300)
                            success = ((u.Value.Length == 32) &&
                                   (u.Value[0] == (byte)'C') &&
                                   (u.Value[1] == 0x00));
                            break;
                        case 4:
                        case 5:
                        case 6:
                        case 9:
                            //first byte should equal 'C' (0x4300)
                            success = ((u.Value[0] == (byte)'C') &&
                                   (u.Value[1] == 0x00));
                            break;
                        case 3:
                            //first byte should equal 'V'
                            success = ((u.Value[0] == (byte)'V') &&
                                   (u.Value[1] == 0x00));
                            break;
                        default:
                            success = true;
                            break;
                    }
                }
            }
            if (success)
            {
                Global.RO.Success("Motto looks correct.");
            }
            else
            {
                Global.RO.Error("Motto does not look correct!");
            }
            return success;
        }

        /// <summary>
        /// Verify a motto change.  Given a puid, returns true if the first byte is "C".
        /// This code was taken from xsuppapi_test.cs.
        /// TODO: pass in argument of code of conduct to check, and verify the whole array.
        ///       Currently this doesn't even work for non-European languages.
        /// </summary>
        public bool VerifyProfileItemChange(
            live.common.XblUser xblUser, 
            int lang, 
            uint setting, 
            string expectedSettingValue, 
            uint titleId)
        {
            bool success = false;
            ulong[] userList = new ulong[1];
            userList[0] = xblUser.Puid;
            uint[] settingList = new uint[1];
            settingList[0] = setting;
            live.protocol.ReadSettingsResponse rsRsp = live.server.UserSettings.ReadSettings(
                _observingBox.Client,
                _observingBox.ActiveUser,
                XOn.XENON_DASH_TITLE_ID,
                userList,
                settingList);

            string actualSettingValue;
            foreach (live.protocol.UserSetting u in rsRsp.Settings)
            {
                Global.RO.Info(String.Format("  Setting: {0}, Len: {1}, Value: {2}", u.SettingId, u.Value.Length, ByteConvert.ToString(u.Value)));
                if (u.SettingId == setting)
                {
                    actualSettingValue = Encoding.Unicode.GetString(u.Value);
                    success = (expectedSettingValue == actualSettingValue);
                    if (success)
                    {
                        Global.RO.Success("Profile setting {0} was correctly changed.", setting);
                    }
                    else
                    {
                        Global.RO.Error("Profile setting {0} was not set to the correct value.  Expected = \"{1}\", Actual = \"{2}\".",
                            setting,
                            expectedSettingValue,
                            actualSettingValue);
                    }
                    
                    return success;
                }
            }

            if (!success)
            {
                Global.RO.Error("Profile setting {0} was not found.", setting);
            }

            return success;
        }

        public void SyncSettings(
            live.common.XblUser xblUser, 
            UserSetting [] settings, 
            uint titleId)
        {
            live.protocol.UserSetting[] liveSettings;
            liveSettings = new live.protocol.UserSetting[settings.Length];
            for (int iLoop = 0; iLoop < settings.Length; iLoop++)
            {
                liveSettings[iLoop] = new live.protocol.UserSetting(
                                            settings[iLoop].UserId, settings[iLoop].Source,
                                            settings[iLoop].SettingId, settings[iLoop].Value);
            }
            live.protocol.SyncSettingsResponse rsRsp = live.server.UserSettings.SyncSettings(
                _observingBox.Client,
                _observingBox.ActiveUser,
                XOn.XENON_DASH_TITLE_ID,
                liveSettings,
                DateTime.UtcNow);

            if (rsRsp == null)
            {
                throw new Exception(string.Format("Failed to initialize user settings.  SyncSettings returned null."));
            }
        }

        /// <summary>
        /// Verify a Lockout.  Given a puid, and expected lockout status, returns true if it matched, false otherwise.
        /// </summary>
        public bool VerifyLockout(live.common.XblUser xblUser, int expectedLockout)
        {
            bool bPass = false;
            try
            {
                live.common.AccountInfo acctInfo = live.server.Cust.GetAccount(_observingBox.Client, xblUser.Puid);
                if (acctInfo.IsLockedOut == (expectedLockout != 0))
                {
                    bPass = true;
                    Global.RO.Success("Expected Lockout matches User {0}.", xblUser.Puid);
                }
                else
                {
                    Global.RO.Error("Expected Lockout did not match on User {0}.", xblUser.Puid);
                }
            }
            catch (Exception e)
            {
                Global.RO.Debug(e.ToString());
            }
            return bPass;
        }


        /// <summary>
        /// Verify a VoiceBan.  Given a puid, and expected voice ban status, returns true if it matched, false otherwise.
        /// </summary>
        public bool VerifyVoiceBan(live.common.XblUser xblUser, int expectedVoiceBan)
        {
            bool bPass = false;
            try
            {
                live.common.AccountInfo acctInfo = live.server.Cust.GetAccount(_observingBox.Client, xblUser.Puid);
                if (acctInfo.IsVoiceBanned == (expectedVoiceBan != 0))
                {
                    bPass = true;
                    Global.RO.Success("Expected Voice Lockout matches User {0}.", xblUser.Puid);
                }
                else
                {
                    Global.RO.Error("Expected Voice Lockout did not match on User {0}.", xblUser.Puid);
                }
            }
            catch (Exception e)
            {
                Global.RO.Debug(e.ToString());
            }
            return bPass;
        }

        /// <summary>
        /// Create a user.  Returns a UODB.Database.UserInfo, defined in UODB.cs
        /// </summary>
        /// <returns>A UserInfo, defined in UODB.cs</returns>
        public new live.common.XblUser CreateUser()
        {
            live.common.XblUserSettings userSettings = new live.common.XblUserSettings(live.common.XblUserTier.Silver, live.common.PassportType.Real);
            live.common.XblUser user = _observingBox.SignUp.CreateUser(userSettings);
            Console.WriteLine( "Account created is {0}:{1}", user.Gamertag, user.Puid );
            //string passportEmail = live.server.UACS.XePassportGetMemberName(_observingBox.Client, user.Puid);
            Console.WriteLine("Passport Email is {0}", user.Settings.UserPassportInfo.MemberName);
            return user;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\QuickEnforcementLiveTests.cs ===
//QuickEnforcementTests.cs
// TODO:  Fix the constructor fix--how to get each TestCase to do something per startup?
//        Make Exceptions happen only for unexpected circumstances--not a standard error out.

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Xml;
using System.Net.Mail;

using ServerTestFramework;
using ServerTestFramework.Database;

using xonline.common.service;
using xonline.common.protocol;

using xonline.common.tools.stutilcore;

//using ServerTestFramework.LiveService.UserAccount;
//using ServerTestFramework.LiveService.UserSettings;


namespace xonline.tools.communitymgr.quickenforcement 
{

     /// <summary>
    /// Test cases to be run against the QuickEnforcement Tool.
    /// These cases need to be run from outside the environment via LiveLib.
    /// Note: At the time the original cases were written, LiveLib was still missing key features reqired 
    ///     for a full verification and only do basic checks. Run the full tests from QuickEnforcementTest
    ///     from within the environment for best coverage
    /// A CommunityMgr database needs to be setup and accessable by the STFTests as well as a mail server
    /// Warning: If you intend to use this on CorpNet and use SMTPHost to send mail you must have send as
    ///     permissions for the QuickEnforcement account and the computer it's running from must also have permissions.
    /// </summary>
    [TestGroup, Owner("TrevorM"), Description("QuickEnforcement Tests to be run outside the environment via LiveLib"), TestFrequency("Regression"), EnvRequirement("Manual")]
    public class QuickEnforcementLiveTest : TestNode
    {

        [TestGroupSetup]
        public void QuickEnforcementTestSetup()
        {

        }


        [TestGroupTearDown]
        public void QuickEnforcementTestTearDown()
        {

        }


        [TestCase, Owner("TrevorM"), Description("100 FNC Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_ForcedNameChange : QuickEnforcementLiveTestBase {
            override protected void Execute() {
                Console.WriteLine( "----------------------------------------------" );
                Console.WriteLine( "-----  Starting QE_ForcedNameChange  ---------" );
                bool success = true;
                live.common.XblUser uInfo;

                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.Gamertag, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.Gamertag, 100, uInfo.Puid, EmailDestination, i);
                    RunQuickEnforce();
                    
                    //confirm user has been changed
                    success = success && VerifyFNC(uInfo, 1);
                }
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("150 Motto Change Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_MottoChange : QuickEnforcementLiveTestBase {
            override protected void Execute() 
            {
                UserSetting[] settings;

                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("--------  Starting QE_MottoChange  -----------" );
                bool success = true;
                live.common.XblUser uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();

                    byte[] blob = Encoding.Unicode.GetBytes("this string is offensive");

                    settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_MOTTO, 
                            blob),
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_BIO, 
                            blob),
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_LOCATION, 
                            blob),
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_NAME, 
                            blob),
                    };

                    SyncSettings(uInfo, settings, XOn.XENON_DASH_TITLE_ID);

                    settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_MEDIA_MOTTO, 
                            blob),
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_BIO, 
                            blob),
                    };

                    SyncSettings(uInfo, settings, XOn.CRUX_TITLE_ID);

                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.Gamertag, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.Gamertag, 150, uInfo.Puid, EmailDestination, i);
                    RunQuickEnforce();

                    //confirm user settings have been changed (code pilfered from xsuppapi_test.cs)
                    success = success && VerifyLockout(uInfo, 1);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_GAMERCARD_MOTTO, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_GAMERCARD_USER_BIO, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_GAMERCARD_USER_LOCATION, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_GAMERCARD_USER_NAME, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_CRUX_MEDIA_MOTTO, GetLocalizedCoCString(i), XOn.CRUX_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_CRUX_BIO, GetLocalizedCoCString(i), XOn.CRUX_TITLE_ID);

                    if (!success)
                        break;
                }
                SetResultCode(success);            
            }
        }

        [TestCase, Owner("TrevorM"), Description("300 Lockout Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_Lockout : QuickEnforcementLiveTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("----------  Starting QE_Lockout  -------------" );
                bool success = true;

                live.common.XblUser uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.Gamertag, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.Gamertag, 300, uInfo.Puid, EmailDestination, i);
                    RunQuickEnforce();

                    success = success && VerifyLockout(uInfo, 1);
                }
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("400 Voice Ban Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_VoiceBan : QuickEnforcementLiveTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("----------  Starting QE_VoiceBan  ------------" );
                bool success = true;

                live.common.XblUser uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.Gamertag, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.Gamertag, 400, uInfo.Puid, EmailDestination, i);
                    RunQuickEnforce();
                    success = success && VerifyVoiceBan(uInfo, 1);
                }
                // new user, banned once, should have a voice ban of exactly 1 day
                SetResultCode(success);
            }
        }
        [TestCase, Owner("TrevorM"), Description("500 Personal Photo Removal Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_PersonalPhoto : QuickEnforcementLiveTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------"); 
                Console.WriteLine( "Starting QE_PersonalPhoto" );
                bool success = true;

                live.common.XblUser uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    byte[] blob = Encoding.Unicode.GetBytes("123456789012345678901234\0");

                    //
                    //  Initialize this user by setting all images and profile settings.
                    //

                    UserSetting[] settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_PERSONAL_PICTURE, 
                            blob),
                    };

                    SyncSettings(uInfo, settings, XOn.XENON_DASH_TITLE_ID);

                    settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_MEDIA_PICTURE, 
                            blob),
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_BG_LARGE_PUBLIC, 
                            blob),
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_BG_SMALL_PUBLIC, 
                            blob),
                    };

                    SyncSettings(uInfo, settings, XOn.CRUX_TITLE_ID);

                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.Gamertag, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.Gamertag, 500, uInfo.Puid, EmailDestination, i);
                    RunQuickEnforce();

                    success = success && VerifyLockout(uInfo, 1);

                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_GAMERCARD_PERSONAL_PICTURE, "000000000000000000000000\0", XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_CRUX_MEDIA_PICTURE, "\0", XOn.CRUX_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_CRUX_BG_LARGE_PUBLIC, "\0", XOn.CRUX_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo, i, ProfileDefs.XPROFILE_CRUX_BG_SMALL_PUBLIC, "\0", XOn.CRUX_TITLE_ID);

                    if (!success)
                        break;
                }
                //confirm user has been changed
                //task: confirm picture setting removed (is tested in Support Svr unit test...)
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("600 Personal URL Removal Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_PersonalUrl : QuickEnforcementLiveTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("Starting QE_PersonalUrl");
                bool success = true;

                live.common.XblUser uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();

                    byte[] blob = Encoding.Unicode.GetBytes("http://foo.bar.com/mydefault.aspx");

                    UserSetting[] settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.Puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_URL, 
                            blob),
                    };

                    SyncSettings(uInfo, settings, XOn.XENON_DASH_TITLE_ID);

                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.Gamertag, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.Gamertag, 600, uInfo.Puid, EmailDestination, i);
                    RunQuickEnforce();
                    success = success && VerifyProfileItemChange(uInfo, i, xonline.common.protocol.ProfileDefs.XPROFILE_GAMERCARD_USER_URL, "", XOn.XENON_DASH_TITLE_ID);
                }
                //confirm user has been changed
                //task: confirm picture setting removed (is tested in Support Svr unit test...)
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("Perform 2 subsequent FNC (100) actions when the previous FNC action is still active"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class FNCnoExpireThenFNC : QuickEnforcementLiveTestBase {
            override protected void Execute() {

                live.common.XblUser uInfo = CreateUser();

                Global.RO.Info("FNC-ing user " + uInfo.Puid.ToString());
                AddEnforcement(CommunityMgrConnectionString, "US", uInfo.Gamertag, 100, uInfo.Puid, EmailDestination, 1);
                RunQuickEnforce();
                SetEnforcementStatus(uInfo.Puid, EnforcementStatus.notExecuted);
                RunQuickEnforce();
                SetResultCode(VerifyFNC(uInfo, 1));
            }        
        }

    }
} // namespace quickenforcement
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\QuickEnforcementTests.cs ===
//QuickEnforcementTests.cs
// TODO:  Fix the constructor fix--how to get each TestCase to do something per startup?
//        Make Exceptions happen only for unexpected circumstances--not a standard error out.

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Xml;
using System.Net.Mail;

using ServerTestFramework;
using ServerTestFramework.Database;

using xonline.common.service;
using xonline.common.protocol;

using xonline.common.tools.stutilcore;

//using ServerTestFramework.LiveService.UserAccount;
//using ServerTestFramework.LiveService.UserSettings;


namespace xonline.tools.communitymgr.quickenforcement 
{

     /// <summary>
    /// Test cases to be run against the QuickEnforcement Tool.
    /// These cases need to be run from within the environment with direct access to the front doors and databases
    /// A CommunityMgr database needs to be setup and accessable by the STFTests as well as a mail server
    /// </summary>
    [TestGroup, Owner("TrevorM"), Description("QuickEnforcement Tests to be run within the environment"), TestFrequency("Regression"), EnvRequirement("Manual")]
    public class QuickEnforcementTest : TestNode
    {

        [TestGroupSetup]
        public void QuickEnforcementTestSetup()
        {

        }


        [TestGroupTearDown]
        public void QuickEnforcementTestTearDown()
        {

        }


        [TestCase, Owner("TrevorM"), Description("100 FNC Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_ForcedNameChange : QuickEnforcementTestBase {
            override protected void Execute() {
                Console.WriteLine( "----------------------------------------------" );
                Console.WriteLine( "-----  Starting QE_ForcedNameChange  ---------" );
                bool success = true;
                UserInfo uInfo;

                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.nickname, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.nickname, 100, uInfo.puid, EmailDestination, i);
                    RunQuickEnforce();
                    
                    //confirm user has been changed
                    success = success && VerifyFNC(uInfo.puid, 1);
                    success = success && VerifyEnforcementTaskDate(uInfo.puid, EnforcementStatus.success);
                }
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("150 Motto Change Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_MottoChange : QuickEnforcementTestBase {
            override protected void Execute() 
            {
                UserSetting[] settings;

                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("--------  Starting QE_MottoChange  -----------" );
                bool success = true;
                UserInfo uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();

                    byte[] blob = Encoding.Unicode.GetBytes("this string is offensive");

                    settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_MOTTO, 
                            blob),
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_BIO, 
                            blob),
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_LOCATION, 
                            blob),
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_NAME, 
                            blob),
                    };

                    SyncSettings(uInfo.puid, settings, XOn.XENON_DASH_TITLE_ID);

                    settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_MEDIA_MOTTO, 
                            blob),
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_BIO, 
                            blob),
                    };

                    SyncSettings(uInfo.puid, settings, XOn.CRUX_TITLE_ID);

                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.nickname, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.nickname, 150, uInfo.puid, EmailDestination, i);
                    RunQuickEnforce();

                    //confirm user settings have been changed (code pilfered from xsuppapi_test.cs)
                    success = success && VerifyLockout(uInfo.puid, 1);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_GAMERCARD_MOTTO, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_GAMERCARD_USER_BIO, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_GAMERCARD_USER_LOCATION, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_GAMERCARD_USER_NAME, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_CRUX_MEDIA_MOTTO, GetLocalizedCoCString(i), XOn.CRUX_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_CRUX_BIO, GetLocalizedCoCString(i), XOn.CRUX_TITLE_ID);

                    if (!success)
                        break;
                }
                SetResultCode(success);            
            }
        }

        [TestCase, Owner("TrevorM"), Description("300 Lockout Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_Lockout : QuickEnforcementTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("----------  Starting QE_Lockout  -------------" );
                bool success = true;

                UserInfo uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.nickname, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.nickname, 300, uInfo.puid, EmailDestination, i);
                    RunQuickEnforce();

                    success = success && VerifyLockout(uInfo.puid, 1);
                }
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("400 Voice Ban Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_VoiceBan : QuickEnforcementTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("----------  Starting QE_VoiceBan  ------------" );
                bool success = true;

                UserInfo uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.nickname, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.nickname, 400, uInfo.puid, EmailDestination, i);
                    RunQuickEnforce();
                    success = success && VerifyVoiceBan(uInfo.puid, 1);
                }
                // new user, banned once, should have a voice ban of exactly 1 day
                SetResultCode(success);
            }
        }
        [TestCase, Owner("TrevorM"), Description("500 Personal Photo Removal Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_PersonalPhoto : QuickEnforcementTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------"); 
                Console.WriteLine( "Starting QE_PersonalPhoto" );
                bool success = true;

                UserInfo uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();
                    byte[] blob = Encoding.Unicode.GetBytes("123456789012345678901234\0");

                    //
                    //  Initialize this user by setting all images and profile settings.
                    //

                    string smallGamerPicPath = "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.a";
                    string largeGamerPicPath = "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.b";
                    string smallZunePicPath  = "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.d";
                    string largeZunePicPath  = "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.e";
                    string bkgndZunePicPath  = "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/usercardbackground.a";

                    StUtil.Write(uInfo.puid, 0, smallGamerPicPath, XOn.XENON_DASH_TITLE_ID, true, blob);
                    StUtil.Write(uInfo.puid, 0, largeGamerPicPath, XOn.XENON_DASH_TITLE_ID, true, blob);
                    StUtil.Write(uInfo.puid, 0, smallZunePicPath,  XOn.CRUX_TITLE_ID,       true, blob);
                    StUtil.Write(uInfo.puid, 0, largeZunePicPath,  XOn.CRUX_TITLE_ID,       true, blob);
                    StUtil.Write(uInfo.puid, 0, bkgndZunePicPath,  XOn.CRUX_TITLE_ID,       true, blob);

                    UserSetting[] settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_PERSONAL_PICTURE, 
                            blob),
                    };

                    SyncSettings(uInfo.puid, settings, XOn.XENON_DASH_TITLE_ID);

                    settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_MEDIA_PICTURE, 
                            blob),
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_BG_LARGE_PUBLIC, 
                            blob),
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_CRUX_BG_SMALL_PUBLIC, 
                            blob),
                    };

                    SyncSettings(uInfo.puid, settings, XOn.CRUX_TITLE_ID);

                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.nickname, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.nickname, 500, uInfo.puid, EmailDestination, i);
                    RunQuickEnforce();

                    success = success && VerifyLockout(uInfo.puid, 1);

                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_GAMERCARD_PERSONAL_PICTURE, "000000000000000000000000\0", XOn.XENON_DASH_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_CRUX_MEDIA_PICTURE, "\0", XOn.CRUX_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_CRUX_BG_LARGE_PUBLIC, "\0", XOn.CRUX_TITLE_ID);
                    success = success && VerifyProfileItemChange(uInfo.puid, i, ProfileDefs.XPROFILE_CRUX_BG_SMALL_PUBLIC, "\0", XOn.CRUX_TITLE_ID);

                    success = success && VerifyImageRemovedFromStorage(uInfo.puid, XOn.XENON_DASH_TITLE_ID, "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.a");
                    success = success && VerifyImageRemovedFromStorage(uInfo.puid, XOn.XENON_DASH_TITLE_ID, "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.b");
                    success = success && VerifyImageRemovedFromStorage(uInfo.puid, XOn.CRUX_TITLE_ID, "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.d");
                    success = success && VerifyImageRemovedFromStorage(uInfo.puid, XOn.CRUX_TITLE_ID, "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/gamerpic.e");
                    success = success && VerifyImageRemovedFromStorage(uInfo.puid, XOn.CRUX_TITLE_ID, "//pics/u:" + uInfo.puid.ToString("X8") + "/FFFE0700/usercardbackground.a");

                    if (!success)
                        break;
                }
                //confirm user has been changed
                //task: confirm picture setting removed (is tested in Support Svr unit test...)
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("600 Personal URL Removal Enforcement with letters in all languages"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class QE_PersonalUrl : QuickEnforcementTestBase {
            override protected void Execute() {
                Console.WriteLine("----------------------------------------------");
                Console.WriteLine("Starting QE_PersonalUrl");
                bool success = true;

                UserInfo uInfo;
                for (int i = 1; i < 10; i++)
                {
                    uInfo = CreateUser();

                    byte[] blob = Encoding.Unicode.GetBytes("http://foo.bar.com/mydefault.aspx");

                    UserSetting[] settings = new UserSetting[]
                    {
                        new UserSetting(
                            uInfo.puid, 
                            0, 
                            ProfileDefs.XPROFILE_GAMERCARD_USER_URL, 
                            blob),
                    };

                    SyncSettings(uInfo.puid, settings, XOn.XENON_DASH_TITLE_ID);

                    Global.RO.Info(String.Format("Generating for {0} in language {1}.", uInfo.nickname, i));
                    AddEnforcement(CommunityMgrConnectionString, "US", uInfo.nickname, 600, uInfo.puid, EmailDestination, i);
                    RunQuickEnforce();
                    success = success && VerifyProfileItemChange(uInfo.puid, i, xonline.common.protocol.ProfileDefs.XPROFILE_GAMERCARD_USER_URL, GetLocalizedCoCString(i), XOn.XENON_DASH_TITLE_ID);
                }
                //confirm user has been changed
                //task: confirm url setting removed (is tested in Support Svr unit test...)
                SetResultCode(success);
            }
        }

        [TestCase, Owner("TrevorM"), Description("Perform 2 subsequent FNC (100) actions when the previous FNC action has already expired"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class FNCexpireThenFNC : QuickEnforcementTestBase {
            override protected void Execute() {
            bool success;

            UserInfo uInfo = CreateUser();

            Global.RO.Info("FNC-ing user " + uInfo.puid.ToString());
            AddEnforcement( CommunityMgrConnectionString, "US", uInfo.nickname, 100, uInfo.puid, EmailDestination, 1 );
            RunQuickEnforce();
            success = VerifyFNC(uInfo.puid, 1);
            success = success && VerifyEnforcementTaskDate(uInfo.puid, EnforcementStatus.success);
            
            Global.RO.Info("Expiring FNC");
            UodbWS.ExpireUserAccountState(uInfo.puid, AccountResetState.ForcedNameChange);
            success = success && VerifyFNC(uInfo.puid, 0);

            AddEnforcement( CommunityMgrConnectionString, "US", uInfo.nickname, 100, uInfo.puid, EmailDestination, 1 );
            RunQuickEnforce();
            success = success && VerifyFNC(uInfo.puid, 1);
            success = success && VerifyEnforcementTaskDate(uInfo.puid, EnforcementStatus.success);

            SetResultCode(success);
        }
        }

        [TestCase, Owner("TrevorM"), Description("Perform 2 subsequent FNC (100) actions when the previous FNC action is still active"), TestFrequency("Regression"), EnvRequirement("Manual")]
        class FNCnoExpireThenFNC : QuickEnforcementTestBase {
            override protected void Execute() {

                UserInfo uInfo = CreateUser();

                Global.RO.Info("FNC-ing user " + uInfo.puid.ToString());
                AddEnforcement( CommunityMgrConnectionString, "US", uInfo.nickname, 100, uInfo.puid, EmailDestination, 1 );
                RunQuickEnforce();
                SetEnforcementStatus(uInfo.puid, EnforcementStatus.notExecuted);
                RunQuickEnforce();
                SetResultCode(VerifyEnforcementTaskDate(uInfo.puid, EnforcementStatus.error));
            }        
        }

    }
} // namespace quickenforcement
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_quickenforcementtest_none_12.4.56.0_none_e53110d67fc3b888
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=quickenforcementtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.manifest
XP_MANIFEST_PATH=manifests\msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.cat
XP_CATALOG_PATH=manifests\msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.cat
XP_PAYLOAD_PATH=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=quickenforcementtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_quickenforcementtest_none_12.4.56.0_none_e53110d67fc3b888
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=quickenforcementtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.manifest
XP_MANIFEST_PATH=manifests\msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.cat
XP_CATALOG_PATH=manifests\msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68.cat
XP_PAYLOAD_PATH=msil_quickenforcementtest_no-public-key_12.4.56.0_x-ww_b1e28a68
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=quickenforcementtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\QuickEnforcementTestBase.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Xml;

using System.Globalization; //for DateTimeFormatInfo

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.tools.stutilcore;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Utilities;


namespace xonline.tools.communitymgr.quickenforcement {

    abstract public class QuickEnforcementTestBase : TestBase {
        private Hashtable qeCommandArgs;
        private Dictionary<int, string> CodeOfConductStrings;
        protected string CommunityMgrConnectionString;
        private string QuickEnforceExePath;  
        private string QuickEnforcePath;
        protected string EmailDestination;
        
        public enum EnforcementStatus {
            notExecuted,
            error,
            success
        }
        public string enfStatusToString(EnforcementStatus enf) {
            switch(enf) {
                case EnforcementStatus.notExecuted:
                    return "not executed";
                case EnforcementStatus.error:
                    return "error";
                case EnforcementStatus.success:
                    return "success";
                default:
                    return "ERROR:Invalid EnforcementStatus";
            }
        }


        public QuickEnforcementTestBase()
        {
            InitializeArguments();
        }

        public void InitializeArguments() {
            qeCommandArgs = new Hashtable();

            XmlNode qeRoot = Global.Config.SelectSingleNode("descendant::QuickEnforcementTest");
            if ( qeRoot.HasChildNodes )
            {
                for (int i=0; i < qeRoot.ChildNodes.Count; i++)
                {
                    Console.WriteLine( qeRoot.ChildNodes[i].Name + "  " + qeRoot.ChildNodes[i].InnerText );
                    qeCommandArgs.Add( qeRoot.ChildNodes[i].Name, qeRoot.ChildNodes[i].InnerText );
                }
            }
            else
            {
                throw new Exception("QuickEnforcementTest.xml file was not found!");
            }

            if (
                ( qeCommandArgs[ "DBEN" ] == null ) ||
                ( qeCommandArgs[ "SQLE" ] == null ) ||
                ( qeCommandArgs[ "MAIL" ] == null ) ||
                ( qeCommandArgs[ "SMTP" ] == null ) ||
                ( qeCommandArgs[ "WAIT" ] == null ) ||
                ( qeCommandArgs[ "CURL" ] == null ) ||
                ( qeCommandArgs[ "CERT" ] == null ) ||
                ( qeCommandArgs[ "EXE" ]  == null )
                )
            {
                throw new Exception("Necessary nodes in QuickEnforcementTest.xml are missing!");
            }

            EmailDestination = qeCommandArgs[ "MAIL" ].ToString(); //WindowsIdentity.GetCurrent().Name;
            CommunityMgrConnectionString = "Data Source=" + qeCommandArgs[ "SQLE" ] + ";Trusted_Connection=Yes;Initial Catalog=" + qeCommandArgs[ "DBEN" ];
            QuickEnforcePath = qeCommandArgs[ "EXE" ].ToString().Trim();
            QuickEnforceExePath = QuickEnforcePath + "quickenforcement.exe";

            string myQuery = "exec dbo.p_GetCodeOfConductLocalizations ";
            using (SqlConnection myConnection = new SqlConnection(CommunityMgrConnectionString))
            {
                SqlCommand myCommand = new SqlCommand(myQuery, myConnection);

                // start reading data
                CodeOfConductStrings = new Dictionary<int, string>();
                string localizedString;
                int languageID;
                myConnection.Open();
                SqlDataReader mottoReader = myCommand.ExecuteReader(CommandBehavior.SingleResult);
                // move to the first record before retrieving data
                // also returns true if there was a next row to go to...   
                if (mottoReader.Read())
                {
                    do
                    {
                        // languageID, localizedString
                        languageID = (int)mottoReader.GetSqlInt32(0);
                        //oddly, SqlString does not implicitly cast to string
                        localizedString = mottoReader.GetSqlString(1).ToString();
                        CodeOfConductStrings[languageID] = localizedString + "\0";

                    } while (mottoReader.Read());

                    Console.WriteLine("Success getting Code of Conduct localizations for {0} languages.", CodeOfConductStrings.Count);
                }
                else
                {
                    // letter wasn't there
                    throw new Exception("Localizations for Code of Conduct necessary for Motto Changes are not present in the Community Manager database.  Please remedy and retry.");
                } // has letter
            }

        }

        /// <summary>
        /// Return the "Code of Conduct" string localized in the specifed language.
        /// </summary>
        /// <param name="lang"></param>
        /// <returns></returns>
        protected string GetLocalizedCoCString(int lang)
        {
            return CodeOfConductStrings[lang];
        }

        /// <summary>
        /// Verify an FNC.  Given a puid, and FNC status, returns true if it matched, false otherwise.
        /// </summary>
        public bool VerifyFNC(ulong puid, int expectedFNC) {
            UserInfo    uInfoAfter;
            UodbWS.GetUserInfo( puid, out uInfoAfter );
            if (uInfoAfter.nameChangeRequired == expectedFNC) {
                Global.RO.Success("FNC is  " + uInfoAfter.nameChangeRequired + "(expecting " + expectedFNC + ")");
            } else {
                Global.RO.Error("FNC is  " + uInfoAfter.nameChangeRequired + "(expecting " + expectedFNC + ")");
            }
            return ( uInfoAfter.nameChangeRequired == expectedFNC );
        }

        /// <summary>
        /// Verify a motto change.  Given a puid, returns true if the first byte is "C".
        /// This code was taken from xsuppapi_test.cs.
        /// TODO: pass in argument of code of conduct to check, and verify the whole array.
        ///       Currently this doesn't even work for non-European languages.
        /// </summary>
        public bool VerifyMottoChange(ulong puid, int lang)
        {
            bool success = true;
            ulong[] userList = new ulong[1];
            userList[0] = puid;
            uint[] settingList = new uint[1];
            settingList[0] = xonline.common.protocol.ProfileDefs.XPROFILE_GAMERCARD_MOTTO;  // 0x402C0011;
            ReadSettingsRequest rsReq = new ReadSettingsRequest();
            rsReq.TitleId = XOn.XENON_DASH_TITLE_ID;
            rsReq.UserId = puid;
            rsReq.SettingIds = settingList;
            rsReq.SettingIdsLen = (ushort)(settingList.Length);
            rsReq.ForUserIds = userList;
            rsReq.ForUserIdsLen = (ushort)(userList.Length);

            ReadSettingsResponse rsRsp = new ReadSettingsResponse();
            XRLObject2 resp = (XRLObject2)rsRsp;
            HTTPAuthData fakeAuth = new HTTPAuthData(0, 0, 0, puid, XOn.XENON_DASH_TITLE_ID, 0, 0);
            uint hr = XRLUtil.PostXrlRequest(XOService.Stats, rsReq.GetXRL(), fakeAuth.GetBase64EncodedString(), (XRLObject2)rsReq, ref resp); 

            Global.RO.Info("Read settings:  XError - " + hr);
            foreach (UserSetting u in rsRsp.Settings)
            {
                Global.RO.Info(String.Format("  Setting: {0}, Len: {1}, Value: {2}", u.SettingId, u.Value.Length, ByteConvert.ToString(u.Value)));
                if (u.SettingId == ProfileDefs.XPROFILE_GAMERCARD_MOTTO) //ProfileDefs.XPROFILE_GAMERCARD_MOTTO;
                {
                    switch (lang)
                    {
                        case 1:
                            //length of setting should be 2*(15char+1null), and first byte should equal 'C' (0x4300)
                            success = ((u.Value.Length == 32) &&
                                   (u.Value[0] == (byte)'C') &&
                                   (u.Value[1] == 0x00));
                            break;
                        case 4:
                        case 5:
                        case 6:
                        case 9:
                            //first byte should equal 'C' (0x4300)
                            success = ((u.Value[0] == (byte)'C') &&
                                   (u.Value[1] == 0x00));
                            break;
                        case 3:
                            //first byte should equal 'V'
                            success = ((u.Value[0] == (byte)'V') &&
                                   (u.Value[1] == 0x00));
                            break;
                        default:
                            success = true;
                            break;
                    }
                }
            }
            if (success)
            {
                Global.RO.Success("Motto looks correct.");
            }
            else
            {
                Global.RO.Error("Motto does not look correct!");
            }
            return success;
        }

        /// <summary>
        /// Verify a motto change.  Given a puid, returns true if the first byte is "C".
        /// This code was taken from xsuppapi_test.cs.
        /// TODO: pass in argument of code of conduct to check, and verify the whole array.
        ///       Currently this doesn't even work for non-European languages.
        /// </summary>
        public bool VerifyProfileItemChange(
            ulong puid, 
            int lang, 
            uint setting, 
            string expectedSettingValue, 
            uint titleId)
        {
            bool success = false;
            ulong[] userList = new ulong[1];
            userList[0] = puid;
            uint[] settingList = new uint[1];
            settingList[0] = setting;
            ReadSettingsRequest rsReq = new ReadSettingsRequest();
            rsReq.TitleId = titleId;
            rsReq.UserId = puid;
            rsReq.SettingIds = settingList;
            rsReq.SettingIdsLen = (ushort)(settingList.Length);
            rsReq.ForUserIds = userList;
            rsReq.ForUserIdsLen = (ushort)(userList.Length);

            ReadSettingsResponse rsRsp = new ReadSettingsResponse();
            XRLObject2 resp = (XRLObject2)rsRsp;
            HTTPAuthData fakeAuth = new HTTPAuthData(0, 0, 0, puid, titleId, 0, 0);
            uint hr = XRLUtil.PostXrlRequest(XOService.Stats, rsReq.GetXRL(), fakeAuth.GetBase64EncodedString(), (XRLObject2)rsReq, ref resp);

            Global.RO.Info("Read settings:  XError - " + hr);

            string actualSettingValue;
            foreach (UserSetting u in rsRsp.Settings)
            {
                Global.RO.Info(String.Format("  Setting: {0}, Len: {1}, Value: {2}", u.SettingId.ToString("X"), u.Value.Length, ByteConvert.ToString(u.Value)));
                if (u.SettingId == setting)
                {
                    actualSettingValue = Encoding.Unicode.GetString(u.Value);
                    success = (expectedSettingValue == actualSettingValue);
                    if (success)
                    {
                        Global.RO.Success("Profile setting {0} was correctly changed.", setting.ToString("X"));
                    }
                    else
                    {
                        Global.RO.Error("Profile setting {0} was not set to the correct value.  Expected = \"{1}\", Actual = \"{2}\".",
                            setting.ToString("X"),
                            expectedSettingValue.Substring(0, (expectedSettingValue.Length == 0) ? 0 : expectedSettingValue.Length - 1),
                            actualSettingValue.Substring(0, (actualSettingValue.Length == 0) ? 0 : actualSettingValue.Length - 1));
                    }
                    
                    return success;
                }
            }

            if (!success)
            {
                Global.RO.Error("Profile setting {0} was not found.", setting.ToString("X"));
            }

            return success;
        }

        public void SyncSettings(
            ulong puid, 
            UserSetting [] settings, 
            uint titleId)
        {
            SyncSettingsRequest ssReq = new SyncSettingsRequest();
            ssReq.TitleId = titleId;
            ssReq.UserId = puid;
            ssReq.Settings = settings;
            ssReq.SettingsLen = (ushort)(settings.Length);
            ssReq.Version = DateTime.UtcNow;
            ssReq.StartinIndex = 0;

            //make XRL call
            SyncSettingsResponse ssResp = new SyncSettingsResponse();
            XRLObject2 resp = (XRLObject2)ssResp;
            HTTPAuthData fakeAuth = new HTTPAuthData(0, 0, 0, puid, titleId, 0, 0);
            uint hr = XRLUtil.PostXrlRequest(XOService.Stats, ssReq.GetXRL(), fakeAuth.GetBase64EncodedString(), ssReq, ref resp);

            if (hr != HResult.S_OK)
            {
                throw new Exception(string.Format("Failed to initialize user settings.  SyncSettings returned {0}.", hr.ToString("X")));
            }
        }

        /// <summary>
        /// Verify that the specified image path does not exist in storage.
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        public bool VerifyImageRemovedFromStorage(ulong userId, uint titleId, string path)
        {
            try
            {
                StUtil.Read(userId, 0, path, titleId);
                Global.RO.Error("Image {0} still exists in storage DB.", path);
                return false;
            }
            catch(Exception e)
            {
                if(e.Message.Contains("8015c004"))
                {
                    Global.RO.Success("Image {0} removed from storage.", path);
                    return true;
                }
                else
                {
                    throw;
                }         
            }
        }

        /// <summary>
        /// Verify a Lockout.  Given a puid, and expected lockout status, returns true if it matched, false otherwise.
        /// </summary>
        public bool VerifyLockout(ulong puid, int expectedLockout) {
            UserInfo    uInfoAfter;
            UodbWS.GetUserInfo( puid, out uInfoAfter );
            if (uInfoAfter.totalDaysSuspended == expectedLockout) {
                Global.RO.Success( "Lockout days is  " + uInfoAfter.totalDaysSuspended + "(expecting " + expectedLockout + ")");
            } else {
                Global.RO.Error( "Lockout days is  " + uInfoAfter.totalDaysSuspended + "(expecting " + expectedLockout + ")");
            }            
            return ( uInfoAfter.totalDaysSuspended == expectedLockout );
        }


        /// <summary>
        /// Verify a VoiceBan.  Given a puid, and expected voice ban status, returns true if it matched, false otherwise.
        /// </summary>
        public bool VerifyVoiceBan(ulong puid, int expectedVoiceBan) {
            UserInfo uInfoAfter;
            UodbWS.GetUserInfo( puid, out uInfoAfter );
            if (uInfoAfter.totalDaysVoiceBanned == expectedVoiceBan) {
                Global.RO.Success( "Voice Ban days is  " + uInfoAfter.totalDaysVoiceBanned + "(expecting " + expectedVoiceBan + ")");
            } else {
                Global.RO.Error( "Voice Ban days is  " + uInfoAfter.totalDaysVoiceBanned + "(expecting " + expectedVoiceBan + ")");
            }
            return (uInfoAfter.totalDaysVoiceBanned == expectedVoiceBan );
        }

        /// <summary>
        /// Returns false if the dtProcessed row in QuickEnforcementTasks does not match what
        /// was expected.
        /// </summary>
        public bool VerifyEnforcementTaskDate(ulong puid, EnforcementStatus expected) {
            EnforcementStatus actual = GetEnforcementStatus(puid);
            if (expected == actual) {
                Global.RO.Success("QuickEnforcementTasks table verifies:  Found " + enfStatusToString(actual) + ", expecting " +
                                  enfStatusToString(expected));
            } else {
                Global.RO.Error("Error in QuickEnforcementTasks table:  Found " + enfStatusToString(actual) + ", expecting " +
                                enfStatusToString(expected));
            }
            return (expected == actual);
        }

        /// <summary>
        /// Return the status of an enforcement in the table CommunityMgr.QuickEnforceTasks.  Statuses are mapped as follows:
        /// dtProcessed         EnforcementStatus
        ///     NULL      -->     notExecuted
        ///   MinValue     -->     error
        ///   other       -->     success
        /// </summary>        
        public EnforcementStatus GetEnforcementStatus(ulong puid) {
            EnforcementStatus retVal = EnforcementStatus.notExecuted;
            SqlDataReader myDataReader=null;
            using (SqlConnection enfConn = new SqlConnection( CommunityMgrConnectionString ) )
            {
                try
                {
                    enfConn.Open();
                    SqlCommand mySqlCommand = new SqlCommand(
                        "SELECT dtProcessed FROM QuickEnforcementTasks where biPUID = " + puid.ToString(), enfConn);
                    Global.RO.Info("SELECT dtProcessed FROM QuickEnforcementTasks where biPUID = " + puid.ToString());
                    myDataReader = mySqlCommand.ExecuteReader();

                    // Always call Read before accessing data.
                    if (myDataReader.Read())
                    {
                        if (myDataReader.IsDBNull(0)) {
                            retVal = EnforcementStatus.notExecuted;
                        } else {
                            DateTime enfDate = myDataReader.GetDateTime(0);
                            if (enfDate.CompareTo(new DateTime(1900,1,1)) == 0) {
                                retVal = EnforcementStatus.error;
                            } else {
                                retVal = EnforcementStatus.success;
                            }
                        }
                    }
                }
                finally {
                    if (myDataReader != null) myDataReader.Close();
                    if (enfConn != null) enfConn.Close();
                }
            } //using

            return retVal;
        }

        /// <summary>
        /// Set the status of an enforcement.  This is a reverse mapping of retrieving the
        /// enforcement status from the database.  Requires that only one enforcement is ever
        /// created per puid.  This assumption may not hold for actual use, but it should for
        /// testing purposes.
        /// </summary>
        public void SetEnforcementStatus(ulong puid, EnforcementStatus status) {
            string enfDate;
            switch (status) {
                case EnforcementStatus.error:
                    enfDate = "1/1/1900";
                    break;
                case EnforcementStatus.notExecuted:
                    enfDate = "NULL";
                    break;
                case EnforcementStatus.success:
                    enfDate = DateTime.Today.ToString("G", DateTimeFormatInfo.InvariantInfo);
                    break;
                default:
                    enfDate = "ERROR--Unrecognized EnforcementStatus";
                    break;
            }
            using (SqlConnection enfConn = new SqlConnection( CommunityMgrConnectionString ) )
            {
                enfConn.Open();
                SqlCommand mySqlCommand = new SqlCommand(
                    "UPDATE QuickEnforcementTasks SET dtProcessed = " + enfDate + " where biPUID = " + puid.ToString(), enfConn);
                Global.RO.Info("SELECT dtProcessed FROM QuickEnforcementTasks where biPUID = " + puid.ToString());
                mySqlCommand.ExecuteNonQuery();
                mySqlCommand.Connection.Close();
                enfConn.Close();
            }
        }
        

        /// <summary>
        /// Create a user.  Returns a UODB.Database.UserInfo, defined in UODB.cs
        /// </summary>
        /// <returns>A UserInfo, defined in UODB.cs</returns>
        public UserInfo CreateUser() {
            XeUser user = new XeUser(true);
            ulong puid = user.Create();
            UserInfo    uInfo;
            UodbWS.GetUserInfo( puid, out uInfo );
            Console.WriteLine( "Account created is " + puid );
            return uInfo;
        }


        /// <summary>
        /// Runs QuickEnforce and prints the output.
        /// </summary>
        public void RunQuickEnforce() {
            //run quickenforcement
            string output = EnforceUsers( 
                qeCommandArgs[ "SQLE" ].ToString(), 
                qeCommandArgs[ "DBEN" ].ToString(),
                qeCommandArgs[ "MAIL" ].ToString(),
                qeCommandArgs[ "SMTP" ].ToString(), 
                qeCommandArgs[ "WAIT" ].ToString(), 
                qeCommandArgs[ "CURL" ].ToString(), 
                qeCommandArgs[ "CERT" ].ToString() );

            Console.WriteLine( output );
        }

        /// <summary>
        /// Add an enforcement to the QuickEnforcement database
        /// </summary>
        /// <param name="CountryCode"></param>
        /// <param name="Gamertag"></param>
        /// <param name="Enforcement"></param>
        /// <param name="PUID"></param>
        /// <param name="Email"></param>
        /// <param name="Language"></param>
        public void AddEnforcement( string ConnectionString, string CountryCode, string Gamertag, ushort Enforcement, ulong PUID, string Email, int Language )
        {
            using (SqlConnection enfConn = new SqlConnection( ConnectionString ) )
            {
                enfConn.Open();
                SqlCommand enfCmd = enfConn.CreateCommand();
                enfCmd.CommandType = CommandType.StoredProcedure;            
            

                enfCmd.CommandText = "p_AddEnforcement";

                //task: once things settle down, we can consider removing the country code column
                //      for now, I think it will be useful for troubleshooting issues.  e.g. a user
                //      complains they got an email in a bizarre language... 
                enfCmd.Parameters.Add( "@vcCountryCode", SqlDbType.VarChar, 2 ).Value = CountryCode;
                enfCmd.Parameters["@vcCountryCode"].Direction = ParameterDirection.Input;

                enfCmd.Parameters.Add( "@vcGamertag", SqlDbType.VarChar, 50 ).Value = Gamertag;
                enfCmd.Parameters["@vcGamertag"].Direction = ParameterDirection.Input;  

                enfCmd.Parameters.Add( "@siEnforcement", SqlDbType.SmallInt ).Value = Enforcement;
                enfCmd.Parameters["@siEnforcement"].Direction = ParameterDirection.Input;

                enfCmd.Parameters.Add( "@biPUID", SqlDbType.BigInt ).Value = PUID;
                enfCmd.Parameters["@biPUID"].Direction = ParameterDirection.Input;

                enfCmd.Parameters.Add( "@vcEmailAddress", SqlDbType.VarChar, 150 ).Value = Email;
                enfCmd.Parameters["@vcEmailAddress"].Direction = ParameterDirection.Input;

                enfCmd.Parameters.Add( "@iLanguage", SqlDbType.Int ).Value = Language;
                enfCmd.Parameters["@iLanguage"].Direction = ParameterDirection.Input;

                enfCmd.Parameters.Add( "@hr", SqlDbType.Int );
                enfCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;

                enfCmd.ExecuteNonQuery();

                if ( (int) enfCmd.Parameters["@hr"].Value != 0 )
                {
                    throw new Exception( "New enforcement was not added." );
                }

            } //using
        }


        public string EnforceUsers(
            string SQLServer, string EnforcementDB, string reportEmailAddy,
            string SMTP, string DelayBetweenEnforcements, string custURL,
            string certPath
            ) 
        {
            StringBuilder consoleOutput = new StringBuilder();

            StringBuilder commandArgs = new StringBuilder();
            commandArgs.Append( " /SQLE " + SQLServer);
            commandArgs.Append( " /DBEN " + EnforcementDB);
            commandArgs.Append( " /MAIL " + reportEmailAddy);
            commandArgs.Append( " /SMTP " + SMTP);
            commandArgs.Append( " /WAIT " + DelayBetweenEnforcements);
            commandArgs.Append( " /CURL " + custURL);
            commandArgs.Append( " /CERT " + certPath);

            ProcessWrapper quickEnforceProcess = new ProcessWrapper(
                commandArgs.ToString(), 
                QuickEnforceExePath,
                QuickEnforcePath,
                60000
                );

            if ( quickEnforceProcess.Run( commandArgs.ToString() ) != 0 )
            {
                throw new QuickEnforceException("QuickEnforce failed.", quickEnforceProcess.Output);
            }

            consoleOutput.Append( "\r\nConsole Output\r\n=====================\r\n" );
            consoleOutput.Append( quickEnforceProcess.Output );

            return consoleOutput.ToString();
        }

        /// <summary>
        /// A quick way of setting the result of the test.
        /// </summary>        
        public void SetResultCode(bool success) {
            if (success) {
                ResultCode = TEST_RESULTS.PASSED;
            } else {
                ResultCode = TEST_RESULTS.FAILED;
            }
            Global.RO.Info("Result code is " + success);
        }

        public class QuickEnforceException : ProcessException
        {
            public QuickEnforceException() : base("QuickEnforce") {}
            public QuickEnforceException(string message) : base("QuickEnforce", message) {}
            public QuickEnforceException(string message, Exception innerException) : base("QuickEnforce", message, innerException) {}
            public QuickEnforceException(string message, string QuickEnforceOutput) : base("QuickEnforce", message, QuickEnforceOutput) {}
            public QuickEnforceException(string message, string QuickEnforceOutput, Exception innerException) :
                base("QuickEnforce", QuickEnforceOutput, message, innerException) {}
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbMonitorTest\RefurbMonitorTests.cs ===
using System;
using System.Xml;

using ServerTestFramework;

namespace RefurbToolTest
{
    public class RefurbMonitorTests : TestSuite
    {
        private static string _geneDB = "";

        public static string GeneDB
        {
            get { return _geneDB; }
            set { _geneDB = value; }
        }

        public override void Initialize(XmlDocument config)
        {
            base.Initialize(config);

            // Find the name of the Genealogy database from the RefurbToolTest section
            XmlNode geneDBNode = config.SelectSingleNode("descendant::RefurbToolTest/GenealogyDB");
            if (geneDBNode != null)
            {
                RefurbMonitorTests.GeneDB = geneDBNode.InnerText;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbMonitorTest\RefurbMonitorTestBase.cs ===
using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;

namespace RefurbMonitorTest
{
    class RefurbMonitorTestBase : TestBase
    {
        protected string _dbServer;
        protected string _uploadAddr;
        protected string _feedsDir;
        protected Report _report;

        public RefurbMonitorTestBase()
        {
            _dbServer = "XeGeneSql001";
            _uploadAddr = "";
            _feedsDir = "D:\\RefurbFeeds";
            _report = new Report("RefurbMonitorTest");
        }

        protected void BeginCase(string testCase)
        {
            _report.Info("Starting {0}...", testCase);
        }

        protected override void Execute()
        {
            throw new StfException("Hey you! You forgot to override the Execute method!");
        }

        protected void RunMonitor(string dbServer, string uploadAddr, string feedsDir, bool verbose, uint timeout)
        {
            if (dbServer == null)
                throw new ArgumentNullException("dbServer");
            if (feedsDir == null)
                throw new ArgumentNullException("feedsDir");
            if (uploadAddr == null)
                throw new ArgumentNullException("uploadAddr");

            ProcessWrapper refurbMonitor = new ProcessWrapper("RefurbProcessMonitor", "D:\\xonline\\drop\\debug\\tools\\refurbprocessmonitor");
            StringBuilder cmdLine = new StringBuilder();

            cmdLine.AppendFormat("/db:{0} /upload:{1} /feedsdir:{3}", dbServer, uploadAddr, feedsDir);
            if (verbose)
                cmdLine.AppendFormat(" /verbose");
            if (timeout > 0)
                cmdLine.AppendFormat(" /uploadtimeout:{0}", timeout);

            if (refurbMonitor.Run(cmdLine.ToString()) != 0)
                throw new ProcessException(refurbMonitor.ProcessName, "Error executing the RefurbMonitor", refurbMonitor.Output);
        }

        protected void RunMonitor(bool verbose, uint timeout)
        {
            RunMonitor(_dbServer, _uploadAddr, _feedsDir, verbose, timeout);
        }

        protected void RunMonitor()
        {
            RunMonitor(_dbServer, _uploadAddr, _feedsDir, true, 0);
        }

        protected void PopulateValidGeneData()
        {
            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbProcessorTest\RefurbProcessorTests.cs ===
using System;
using System.Xml;
using ServerTestFramework;

namespace RefurbToolTest
{
    public class RefurbProcessorTests : TestSuite
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbProcessorTest\PositiveFunctionals.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;

namespace RefurbToolTest
{
    [TestGroup]
    class PositiveFunctionals : TestNode
    {
        [TestCase]
        class BasicFunctionality : RefurbProcessorTestBase
        {
            List<RefurbTestCase> cases;

            protected override void Execute()
            {
                cases = LoadTestCases("RefurbBasicFuncCases.xml", "PositiveTestCases");
                foreach (RefurbTestCase testCase in cases)
                {
                    foreach (TestConsole console in testCase.ConsoleList)
                    {
                        XeUser user = CreateUser(console.ConsoleId);
                        if (user != null)
                        {
                            foreach (ulong arcadeLicense in console.ArcadeLicenses)
                            {
                                ContentOfferLoader.GrantContentLicense(user.UserPuid, user.MachinePuid, arcadeLicense);
                            }
/* Removing obslete function
                            foreach (Guid videoGuid in console.VideoLicenses)
                            {
                                ContentOfferLoader.GrantVideoLicense(user.UserPuid, user.MachinePuid, videoGuid, videoGuid, 1);
                            }
*/
                        }
                        else
                        {
                            _report.Warn("Failed to create a machine account for console ID {0}", console.ConsoleId);
                        }
                    }
                }
            }
        }
/*
        [TestCase]
        class PopulateConsoleIDs : RefurbProcessorTestBase
        {
            protected override void Execute()
            {
                StreamReader input = new StreamReader(@"d:\craigwh\oldconsoles.txt");
                string console;
                int createdConsoles = 0;

                try
                {
                    while ((console = input.ReadLine()) != null)
                    {
                        try
                        {
                            XeUser user = CreateUser(ulong.Parse(console));
                            if (user != null)
                            {
                                ContentOfferLoader.GrantContentLicense(user.UserPuid, user.MachinePuid, _arcadeOfferId1);
                                ContentOfferLoader.GrantVideoLicense(user.UserPuid, user.MachinePuid,
                                    new Guid("11111111-2222-3333-4444-555555555555"),
                                    new Guid("11111111-2222-3333-4444-555555555556"), 1);
                                Thread.Sleep(10);
                                createdConsoles++;
                            }
                            else
                            {
                                _report.Warn("Failed to create a machine account for console ID {0}", console);
                            }
                            user = null;
                        }
                        catch (IOException ioex)
                        {
                            _report.Warn("Skipped ID {0} due to an Exception: {1}", console, ioex.Message);
                        }
                    }
                }
                finally
                {
                    input.Close();
                    _report.Info("Created {0} machine accounts.", createdConsoles);
                }
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// This case covers the scenario where the users Xbox has been refurbished before the user has ever
        /// connected to Live. No machine account will exist for the old console ID, therefore there is nothing
        /// to do. An entry should not be added to the exceptions file in this case, but the occurrence should
        /// be reported in the output. No machine account is created.
        /// </summary>
        [TestCase]
        class NoOldMachineAccount : RefurbProcessorTestBase
        {
            protected override void Execute()
            {
                BeginCase("NoOldMachineAccount");

                ulong oldConsoleId = 38711921892;
                string fileName = "NoOldMachineAccount.refurb";
                ResultCode = TEST_RESULTS.PASSED;

                DeleteMachine(oldConsoleId);
                DeleteRefurbFile(fileName);

                // Create the .refurb file
                RefurbFile refurbFile = new RefurbFile();
                refurbFile.Chains.Add(new RefurbChain(oldConsoleId, _consoleId2, DateTime.Now));
                refurbFile.ToFile(Path.Combine(_inputPath, fileName));

                RunRefurbTool(true);

                // Verify the tool skipped the console ID
                string expOutput = String.Format("ReplacementConsoleIdSkipped: {0} -> {1}  Reason:  No machine account associated with old console id.",
                    oldConsoleId, _consoleId2);
                if (_refurbProcessor.Output.IndexOf(expOutput) <= 0)
                {
                    _report.Error("Unexpected output from the RefurbFeedProcessor:\r\n{0}", _refurbProcessor.Output);
                    ResultCode = TEST_RESULTS.FAILED;
                }

                // Verify that a machine account for the new console ID has not been created
                ulong puid = UodbWS.LookupMachinePuid(ConsoleIdToMachineName(_consoleId2));
                if (puid != 0)
                {
                    _report.Error("A machine account should not be created for the new console.");
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

        /// <summary>
        /// This is the case where the refurb process is run before a refurbished 360 is reconnected to Live.
        /// The datafile contains a single entry of the old console ID and the new console ID. After the processor
        /// finishes, a machine account is created for the new console ID and the licenses have all been updated
        /// with the new console ID.
        /// </summary>
        [TestCase]
        class NoNewMachineAccount : RefurbProcessorTestBase
        {
            protected override void Execute()
            {
                BeginCase("NoNewMachineAccount");

                string fileName = "NoNewMachineAccount.Refurb";

                // Make sure the new console doesn't have any licenses or a machine account
                DeleteMachine(_consoleId2);
                DeleteRefurbFile(fileName);

                // Create a user a "buy" an Arcade title
                XeUser user = CreateUser();
                if (user == null)
                {
                    _report.Error("Unable to create a new user.");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                ContentOfferLoader.GrantContentLicense(user.UserPuid, user.MachinePuid, _arcadeOfferId1);
                ulong oldConsoleId = MachinePuidToConsoleId(user.MachinePuid);

                // Create the refurb file
                RefurbFile refurbFile = new RefurbFile();
                refurbFile.Chains.Add(new RefurbChain(oldConsoleId, _consoleId2, DateTime.Now));
                refurbFile.ToFile(Path.Combine(_inputPath, fileName));

                RunRefurbTool(true);

                // Verify the new machine account exists for the new console
                VerifyMachineAccount(_consoleId2, true);

                // Verify the user licenses have been moved to the new console
                ResultCode = VerifyUserLicenses(_consoleId2, _arcadeOfferId1, true);
                if (ResultCode == TEST_RESULTS.PASSED)
                {
                    ResultCode = VerifyUserLicenses(oldConsoleId, _arcadeOfferId1, false);
                }
            }
        }

        /// <summary>
        /// This is the case where the refurb process is run after a refurbished 360 has been reconnected to Live.
        /// In this case, the machine account already exists. The datafile contains a single entry of the old
        /// console ID and the new console ID. After the processor is run, the existing machine account and all
        /// licenses have been updated with the new console ID.
        /// </summary>
        [TestCase]
        class PreExistingMachineAccount : RefurbProcessorTestBase
        {
            protected override void Execute()
            {
                BeginCase("PreExistingMachineAccount");

                // Create a user a "buy" an Arcade title
                XeUser user = CreateUser();
                if (user == null)
                {
                    _report.Error("Unable to create a new user.");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                ContentOfferLoader.GrantContentLicense(user.UserPuid, user.MachinePuid, _arcadeOfferId1);

                // Create a machine account for the new console
                ulong consoleId = CreateMachineAccount().ConsoleId;
                ulong oldConsoleId = MachinePuidToConsoleId(user.MachinePuid);

                // Create the Refurb file
                RefurbFile refurbFile = new RefurbFile();
                refurbFile.Chains.Add(new RefurbChain(oldConsoleId, consoleId, DateTime.Now));
                refurbFile.ToFile(Path.Combine(_inputPath, "PreExistingMachineAccount.refurb"));

                RunRefurbTool(true);

                // Verify that the licenses have been updated to the pre-existing machine account
                ResultCode = VerifyUserLicenses(consoleId, _arcadeOfferId1, true);

                if (ResultCode == TEST_RESULTS.PASSED)
                {
                    ResultCode = VerifyUserLicenses(oldConsoleId, _arcadeOfferId1, false);
                }

                // Delete the created machine account and associated licenses
                DeleteMachine(consoleId);
            }
        }

        /// <summary>
        /// The console has undergone two refurbishments within the timeframe between process executions.
        /// The account being updated was created prior to the first refurb. The datafile contains 2 chained
        /// entries (EG: OldID -> New ID1, NewID1 -> NewID2). After the processor runs, the updated machine
        /// account and licenses are using the new console from the second refurb chain.
        /// </summary>
        [TestCase]
        class DoubleRefurbishForExistingLiveUser : RefurbProcessorTestBase
        {
            protected override void Execute()
            {
                BeginCase("DoubleRefurbishForExistingLiveUser");

                ulong tempConsole = 38712969280;

                // Create a user a "buy" an Arcade title
                XeUser user = CreateUser();
                if (user == null)
                {
                    _report.Error("Unable to create a new user.");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                ContentOfferLoader.GrantContentLicense(user.UserPuid, user.MachinePuid, _arcadeOfferId1);
                ulong oldConsoleId = MachinePuidToConsoleId(user.MachinePuid);

                // Create the refurb file
                RefurbFile refurbFile = new RefurbFile();
                refurbFile.Chains.Add(new RefurbChain(oldConsoleId, tempConsole, DateTime.Now));
                refurbFile.Chains.Add(new RefurbChain(tempConsole, _consoleId2, DateTime.Now));
                refurbFile.ToFile(Path.Combine(_inputPath, "DoubleRefurbishForExistingLiveUser.refurb"));

                RunRefurbTool(true);

                // Verify the licenses have been transferred to the end console
                ResultCode = VerifyUserLicenses(_consoleId2, _arcadeOfferId1, true);
                if (ResultCode == TEST_RESULTS.PASSED)
                {
                    ResultCode = VerifyUserLicenses(oldConsoleId, _arcadeOfferId1, false);
                }

                // Verify that the middle console ID doesn't have a machine account associated with it
                if (UodbWS.LookupMachinePuid(ConsoleIdToMachineName(tempConsole)) != 0)
                {
                    _report.Error("A machine account should not be created for the middle console id.");
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

        [TestCase]
        class RefurbChainTest : RefurbProcessorTestBase
        {
            protected override void Execute()
            {
                BeginCase("RefurbChainTest");

                string fileName = "RefurbChainTest.refurb";
                RefurbFile refurbFile = new RefurbFile();
                DateTime timestamp = DateTime.Now;
                ulong[] ids = new ulong[30];

                DeleteRefurbFile(fileName);

                // Pre-populate the ids array with randomly-generated consoleIDs
                for (int i = 0; i < 30; i++)
                    ids[i] = GenerateConsoleId();

                // Duplicate Old IDs
                refurbFile.Chains.Add(new RefurbChain(ids[0], ids[1], timestamp));
                refurbFile.Chains.Add(new RefurbChain(ids[0], ids[2], timestamp.AddDays(1)));
                refurbFile.Chains.Add(new RefurbChain(ids[0], ids[3], timestamp.AddDays(-1)));
                refurbFile.Chains.Add(new RefurbChain(ids[0], ids[4], timestamp.AddDays(1)));

                // Duplicate New IDs
                refurbFile.Chains.Add(new RefurbChain(ids[6], ids[5], timestamp));
                refurbFile.Chains.Add(new RefurbChain(ids[7], ids[5], timestamp.AddDays(1)));
                refurbFile.Chains.Add(new RefurbChain(ids[8], ids[5], timestamp.AddDays(-1)));
                refurbFile.Chains.Add(new RefurbChain(ids[9], ids[5], timestamp.AddDays(1)));

                // Valid chains

                // A -> B
                refurbFile.Chains.Add(new RefurbChain(ids[10], ids[11], timestamp));
                refurbFile.Chains.Add(new RefurbChain(ids[11], ids[12], timestamp.AddDays(1)));

                // A -> B; B -> C
                refurbFile.Chains.Add(new RefurbChain(ids[13], ids[14], timestamp));
                refurbFile.Chains.Add(new RefurbChain(ids[14], ids[15], timestamp.AddDays(1)));
                refurbFile.Chains.Add(new RefurbChain(ids[15], ids[16], timestamp.AddDays(2)));

                // Invalid chains

                // A -> B; B -> A
                refurbFile.Chains.Add(new RefurbChain(ids[17], ids[18], timestamp));
                refurbFile.Chains.Add(new RefurbChain(ids[18], ids[17], timestamp.AddDays(1)));

                // A -> B; B -> C; C -> A
                refurbFile.Chains.Add(new RefurbChain(ids[19], ids[20], timestamp));
                refurbFile.Chains.Add(new RefurbChain(ids[20], ids[21], timestamp.AddDays(1)));
                refurbFile.Chains.Add(new RefurbChain(ids[21], ids[19], timestamp.AddDays(2)));

                refurbFile.ToFile(Path.Combine(_inputPath, fileName));

                RunRefurbTool(true);

                // Verify the Exceptions file
                string exceptionsFile = GetExceptionsFileName();
                StreamReader file = new StreamReader(exceptionsFile);
                string exceptions = file.ReadToEnd();
                Regex r = new Regex(@".+: *Replacing \d+:\d+:.* with \d+:\d+:.*", RegexOptions.Multiline);
                MatchCollection matches = r.Matches(exceptions);

                // Begin verifying the exceptions
                
            }
        }
*/
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbMonitorTest\PositiveFunctionals.cs ===
using System;
using System.Text;

using ServerTestFramework;

namespace RefurbMonitorTest
{
    [TestGroup]
    class PositiveFunctionals : TestNode
    {
        [TestCase]
        class ValidRefurbishData : RefurbMonitorTestBase
        {
            protected override void Execute()
            {
                BeginCase("ValidRefurbishData");

                // Prep the database
                PopulateValidGeneData();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbChain.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

using ServerTestFramework;

namespace RefurbToolTest
{
    class RefurbChain
    {
        private ulong _oldConsoleId;
        private ulong _newConsoleId;
        private DateTime _timeStamp;

        public RefurbChain() { }
        public RefurbChain(ulong oldConsoleId, ulong newConsoleId, DateTime timeStamp)
        {
            _oldConsoleId = oldConsoleId;
            _newConsoleId = newConsoleId;
            _timeStamp = timeStamp;
        }

        public ulong OldConsoleId
        {
            get { return _oldConsoleId; }
            set { _oldConsoleId = value; }
        }

        public ulong NewConsoleId
        {
            get { return _newConsoleId; }
            set { _newConsoleId = value; }
        }

        public DateTime TimeStamp
        {
            get { return _timeStamp; }
            set { _timeStamp = value; }
        }
    }

    class RefurbFile
    {
        private List<RefurbChain> _chains;

        public RefurbFile()
        {
            _chains = new List<RefurbChain>();
        }
        
        public List<RefurbChain> Chains
        {
            get { return _chains; }
        }

        public static RefurbFile FromFile(string fileName)
        {
            StreamReader file = new StreamReader(fileName);
            string line;
            int lineCount = 0;

            // Create the RefurbFile object
            RefurbFile refurbFile = new RefurbFile();

            while ((line = file.ReadLine()) != null)
            {
                lineCount++;
                string[] entries = line.Split('\t');
                if (entries.Length != 3)
                {
                    Global.RO.Warn("Too many entries in line {0} of refurb file {1}", lineCount, fileName);
                    continue;
                }

                // Parse the two console ID entries and the time stamp
                RefurbChain chain = new RefurbChain();
                DateTime timeStamp;
                ulong temp = 0;
                
                if (!ulong.TryParse(entries[0], out temp))
                {
                    Global.RO.Warn("Invalid old console ID in line {0} of refurb file {1}", lineCount, fileName);
                    continue;
                }
                chain.OldConsoleId = temp;

                temp = 0;
                if (!ulong.TryParse(entries[1], out temp))
                {
                    Global.RO.Warn("Invalid new console ID in line {0} of refurb file {1}", lineCount, fileName);
                    continue;
                }
                chain.NewConsoleId = temp;

                if (!DateTime.TryParse(entries[2], out timeStamp))
                {
                    Global.RO.Warn("Invalid timestamp in line {0} of refurb file {1}", lineCount, fileName);
                    continue;
                }
                chain.TimeStamp = timeStamp;

                // Add the entry to the list
                refurbFile.Chains.Add(chain);
            }

            return refurbFile;
        }

        public void ToFile(string fileName)
        {
            StreamWriter file = new StreamWriter(fileName, false);

            try
            {
                foreach (RefurbChain chain in _chains)
                {
                    file.WriteLine("{0}\t{1}\t{2}", chain.OldConsoleId, chain.NewConsoleId, chain.TimeStamp);
                }
            }
            finally
            {
                file.Close();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbProcessorTest\RefurbProcessorTestBase.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount;

namespace RefurbToolTest
{
    class RefurbProcessorTestBase : TestBase
    {
        protected ProcessWrapper _refurbProcessor = null;
        protected string _inputPath = null;
        protected string _processedPath = null;
        protected Report _report = new Report("RefurbToolTest");

        protected ulong _consoleId1, _consoleId2;
        protected ulong _arcadeOfferId1, _arcadeOfferId2;
        protected string _gamerTag1, _gamerTag2;

        public RefurbProcessorTestBase()
        {
            _refurbProcessor = new ProcessWrapper("RefurbFeedProcessor", "d:\\webroot\\xbltools\\RefurbFeedProcessor.exe");

            // I'll put this into the xml file later
            _inputPath = "D:\\RefurbFeedFiles";
            _processedPath = Path.Combine(Path.GetDirectoryName(_refurbProcessor.ExecutablePath), "ProcessedFeeds");

            // Two actual console IDs
            _consoleId1 = 107431398633;
            _consoleId2 = 107432446019;

            // Offer IDs for two Arcade titles
            _arcadeOfferId1 = 6359372773118181377;     // Joust
            _arcadeOfferId2 = 6359372786003083265;     // Outpost Kaloki X

            // Pre-existing gamertags
            _gamerTag1 = "Phoenix1";
            _gamerTag2 = "Phoenix2";
        }

        protected void BeginCase(string testCase)
        {
            _report.Info("Starting {0}...", testCase);
        }

        protected override void Execute()
        {
            throw new StfException("Hey you! You forgot to override the Execute method!");
        }

        protected void RunRefurbTool(bool verbose)
        {
            RunRefurbTool(_inputPath, verbose);
        }

        protected void RunRefurbTool(string inputPath, bool verbose)
        {
            string args = "/inputpath:" + inputPath;
            if (verbose)
            {
                args += " /verbose";
            }

            // Save a list of refurb files that will get processed
            string[] refurbFiles = Directory.GetFiles(inputPath, "*.refurb");

            _refurbProcessor.WorkingDirectory = inputPath;
            if (_refurbProcessor.Run(args) != 0)
            {
                throw new ProcessException(_refurbProcessor.ProcessName, "RefurbFeedProcessor failed!", _refurbProcessor.Output);
            }

            // Verify that all the refurb files get moved into the ProcessedFeeds folder
            foreach (string file in refurbFiles)
            {
                if (!File.Exists(Path.Combine(_processedPath, file)))
                {
                    _report.Warn("Unable to find the file '{0}' in the {1} folder.", file, _processedPath);
                }
            }
        }

        protected void DeleteRefurbFile(string refurbFile)
        {
            string fileName;

            // Remove it from the ProcessedFeeds directory
            fileName = Path.Combine(_processedPath, refurbFile);
            if (File.Exists(fileName))
                File.Delete(fileName);

            // Remove it from the input directory
            fileName = Path.Combine(_inputPath, refurbFile);
            if (File.Exists(fileName))
                File.Delete(fileName);
        }

        protected string GetExceptionsFileName()
        {
            Regex r = new Regex(@"Exceptions file: .+");
            Match match = r.Match(_refurbProcessor.Output);
            string path = match.Value.Trim();

            if (path.Length > 0)
            {
                path = path.Substring(17);
            }

            return path;
        }

        protected List<RefurbTestCase> LoadTestCases(string xmlFile, string testsElement)
        {
            List<RefurbTestCase> testCases = new List<RefurbTestCase>();
            XmlDocument testCaseFile = new XmlDocument();
            testCaseFile.Load(xmlFile);

            XmlNodeList cases = testCaseFile.SelectNodes(String.Format("//{0}/*", testsElement));
            foreach (XmlNode caseNode in cases)
            {
                RefurbTestCase testCase = new RefurbTestCase();
                testCase.CaseID = Int32.Parse(caseNode.Attributes["id"].Value);
                testCase.CaseType = (RefurbTestCaseAttribute)Enum.Parse(typeof(RefurbTestCaseAttribute), caseNode.Attributes["type"].Value);
                foreach (XmlNode console in caseNode.ChildNodes[0].ChildNodes)
                {
                    testCase.AddConsole(Int32.Parse(console.Attributes["arcadeCount"].Value), Int32.Parse(console.Attributes["videoCount"].Value));
                }

                testCases.Add(testCase);
            }

            return testCases;
        }

        //
        //  Static helper functions
        //

        static public string ConsoleIdToMachineName(ulong consoleId)
        {
            ulong machineId;
            ushort checkDigit;

            // Pull the last 4 bits off the console ID - this is the check digit
            checkDigit = (ushort)(consoleId & 0xf);
            machineId = consoleId >> 4;

            // Build the machine id
            return "XE." + machineId.ToString("D11") + checkDigit.ToString();
        }

        static public ulong MachineNameToConsoleId(string machineName)
        {
            ulong checkDigit;
            ulong consoleId = 0;
            ulong digit = 0;
            int i;

            for (i = 3; i < machineName.Length - 1; i++)
            {
                digit = (ulong)(machineName[i] - '0');
                consoleId = (consoleId * 10) + digit;
            }
            checkDigit = (ulong)(machineName[i] - '0');

            consoleId = (consoleId << 4) + checkDigit;
            return consoleId;
        }
/*
        static public ulong MachinePuidToConsoleId(ulong machinePuid)
        {
            return MachineNameToConsoleId(LookupMachineName(machinePuid));
        }
*/
        static public ulong GenerateConsoleId()
        {
            ulong consoleId;
            ulong checkSum;
            RandomEx randGen = new RandomEx();

            consoleId = randGen.NextUlong() & 0x00000000FFFFFFFF;
            checkSum = ComputeChecksum(consoleId);

            return (consoleId << 4) + checkSum;
        }

        static private ulong ComputeChecksum(ulong u)
        {
            ulong sum = 0;

            while (u != 0)
            {
                sum += u % 10;
                u /= 10;
            }

            return sum % 10;
        }
/*
        protected void DeleteMachine(ulong consoleId)
        {
            string machineName = ConsoleIdToMachineName(consoleId);
            DeleteMachine(machineName);
        }

        protected void DeleteMachine(string machineName)
        {
            ulong machinePuid = UodbWS.LookupMachinePuid(machineName);
            if (machinePuid == 0)
            {
                _report.Info("Unable to find machine '{0}' in the database.", machineName);
                return;
            }

            // First remove any user licenses and video licenses associated with this puid
            UodbWS.DeleteUserLicenses(machinePuid);
            UodbWS.DeleteConsoleVideoLicenses(machinePuid);

            // Now delete the machine
            UodbWS.DeleteMachine(machineName);
        }

        protected string LookupMachineName(ulong machinePuid)
        {
            MachineAccount acct = UodbWS.GetMachineAccount(machinePuid);
            if (acct != null)
                return acct.SerialNumber;
            else
                return "";
        }
*/
        protected ConsoleDescriptor CreateMachineAccount()
        {
            AuthContext ctx = new AuthContext(AuthContext.ClientTypes.Xenon);
            XmacsClient xmacs = new XmacsClient(ctx);
            ConsoleDescriptor console = new ConsoleDescriptor();

            xmacs.SignInXmacs();

            // Xmacs calls the machine name the console ID
            // we need to convert it into a real console ID
            console.MachineName = xmacs.ConsoleId;
            console.ConsoleId = MachineNameToConsoleId(xmacs.ConsoleId);
            console.MachinePuid = xmacs.MachinePuid;

            return console;
        }

        protected ConsoleDescriptor CreateMachineAccount(ulong consoleId)
        {
            AuthContext ctx = new AuthContext(AuthContext.ClientTypes.Xenon);
            XmacsClient xmacs = new XmacsClient(ctx);
            ConsoleDescriptor console = new ConsoleDescriptor();
            RandomEx rand = new RandomEx();

            // Perform the initialization of the AuthContext by hand so that
            // we can control the console id
            rand.NextBytes(ctx.MachineUser.Key);
            byte[] bytes = BitConverter.GetBytes((long)consoleId);
            for (int i = 0; i < ctx.ConsoleCert.ConsoleId.Length; i++)
            {
                // Flip the array
                ctx.ConsoleCert.ConsoleId[ctx.ConsoleCert.ConsoleId.Length - i - 1] = bytes[i];
            }
            AuthClientBase.BuildXenonConsolePrincipal(ctx.ConsoleCert.ConsoleId, ctx.MachineUser.Gamertag);
            XmacsClient.SetDefaults(ctx.MachineUser);
            xmacs.isManualSetup = true;

            // Create the machine account
            xmacs.TimeoutInMs = 30000;  // 30-second timeout
            xmacs.SignInXmacs();

            // Xmacs calls the machine name the console ID
            // we need to convert it into a real console ID
            console.MachineName = xmacs.ConsoleId;
            console.ConsoleId = MachineNameToConsoleId(xmacs.ConsoleId);
            console.MachinePuid = xmacs.MachinePuid;

            return console;
        }

        protected XeUser CreateUser()
        {
            ConsoleDescriptor machine = CreateMachineAccount();
            XeUser user = new XeUser(true, XeUser.Country.US);
            user.CreateAsGold = true;
            user.MachinePuid = machine.MachinePuid;
            if (user.Create() == 0)
            {
                user = null;
            }

            return user;
        }

        protected XeUser CreateUser(ulong consoleId)
        {
            ConsoleDescriptor machine = CreateMachineAccount(consoleId);
            XeUser user = new XeUser(true, XeUser.Country.US);
            user.CreateAsGold = true;
            user.MachinePuid = machine.MachinePuid;
            if (user.Create() == 0)
            {
                user = null;
            }

            return user;
        }
/*
        protected void TransferLicenses(ulong oldConsoleId, ulong newConsoleId)
        {
            SPUpdateUserLicenses sp = new SPUpdateUserLicenses();

            sp.OldConsoleId = oldConsoleId;
            sp.NewConsoleId = newConsoleId;
            UodbWS.ExecSProc(sp);
        }

        protected TEST_RESULTS VerifyMachineAccount(ulong consoleId, bool verifyExists)
        {
            TEST_RESULTS ret = TEST_RESULTS.FAILED;

            ulong puid = UodbWS.LookupMachinePuid(ConsoleIdToMachineName(consoleId));
            if (puid == 0)
            {
                // The machine account doesn't exist
                ret = verifyExists ? TEST_RESULTS.FAILED : TEST_RESULTS.PASSED;
            }
            else
            {
                // The machine account exists
                ret = verifyExists ? TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
            }

            return ret;
        }

        protected TEST_RESULTS VerifyUserLicenses(ulong consoleId, ulong offerId, bool verifyExists)
        {
            return VerifyUserLicenses(consoleId, new ulong[] { offerId }, verifyExists);
        }

        protected TEST_RESULTS VerifyUserLicenses(ulong consoleId, ulong[] offerIds, bool verifyExists)
        {
            TEST_RESULTS ret = TEST_RESULTS.PASSED;
            string machineName = ConsoleIdToMachineName(consoleId);
            ulong machinePuid = UodbWS.LookupMachinePuid(machineName);

            if (machinePuid == 0)
            {
                _report.Error("Unable to locate machine account {0} for console ID {1}", machineName, consoleId);
                return TEST_RESULTS.FAILED;
            }

            // Pull user license data from UODB
            List<UserLicense> licenses = UodbWS.GetUserLicenses(0, machinePuid);

            if (licenses.Count == 0 && verifyExists == true)
            {
                _report.Error("No user licenses found for machine account {0} (PUID={1}).", machineName, machinePuid);
                return TEST_RESULTS.FAILED;
            }

            foreach (UserLicense license in licenses)
            {
                foreach (ulong offerId in offerIds)
                {
                    if (license.OfferId == offerId)
                    {
                        if (!verifyExists)
                        {
                            // The license was not expected, but it was found
                            _report.Error("The license for offer {0} on console {1} (PUID: {2}) should not exist.",
                                offerId, machineName, machinePuid);
                            ret = TEST_RESULTS.FAILED;
                        }
                        else
                        {
                            break;  // Found the offer ID - move to the next license
                        }
                    }
                    else
                    {
                        if (verifyExists)
                        {
                            // The license was expected and not found
                            _report.Error("Unable to find a license for offer {0} on console {1} (PUID: {2}).",
                                offerId, machineName, machinePuid);
                            ret = TEST_RESULTS.FAILED;
                        }
                        else
                        {
                            // The license was not found and was not expected
                            break;
                        }
                    }
                }
            }

            return ret;
        }

        protected TEST_RESULTS VerifyUserLicenses(ulong consoleId, ulong userPuid, ulong[] offerIds, bool verifyExists)
        {
            TEST_RESULTS ret = TEST_RESULTS.PASSED;
            string machineName = ConsoleIdToMachineName(consoleId);
            ulong machinePuid = UodbWS.LookupMachinePuid(machineName);

            if (machinePuid == 0)
            {
                _report.Error("Unable to locate machine account {0} for console ID {1}", machineName, consoleId);
                return TEST_RESULTS.FAILED;
            }

            // Pull user license data from UODB
            List<UserLicense> licenses = UodbWS.GetUserLicenses(userPuid, machinePuid);
            if (licenses.Count == 0 && verifyExists == true)
            {
                _report.Error("No user licenses found for user {0} on console {1} (PUID: {2}).",
                    userPuid, machineName, machinePuid);
                return TEST_RESULTS.FAILED;
            }

            foreach (UserLicense license in licenses)
            {
                foreach (ulong offerId in offerIds)
                {
                    if (license.OfferId == offerId)
                    {
                        if (!verifyExists)
                        {
                            // The license was not expected, but it was found
                            _report.Error("The license for offer {0} for user {1} on console {2} (PUID: {3}) should not exist.",
                                offerId, userPuid, machineName, machinePuid);
                            ret = TEST_RESULTS.FAILED;
                        }
                        else
                        {
                            break;  // Found the offer ID - move to the next license
                        }
                    }
                    else
                    {
                        if (verifyExists)
                        {
                            // The license was expected and not found
                            _report.Error("Unable to find a license for offer {0} for user {1} on console {2} (PUID: {3}).",
                                offerId, userPuid, machineName, machinePuid);
                            ret = TEST_RESULTS.FAILED;
                        }
                        else
                        {
                            // The license was not found and was not expected
                            break;
                        }
                    }
                }
            }

            return ret;
        }
*/
    }

    internal class ConsoleDescriptor
    {
        public ulong ConsoleId;
        public string MachineName;
        public ulong MachinePuid;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\Currency.cs ===
using System;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Currency.
	/// </summary>
	/// 

	public enum CurrencyType
	{
		Unspecified,
		USD,
		CAD,
		AUD,
		EUR,
		CHF,
		DKK,
		JPY,
		KRW,
		NOK,
		SEK,
		GBP,
		TWD,
		HKD,
		SGD,
		MXN,
		NZD
	};

	public class Currency
	{
		public CurrencyType Type;
		public double Value;

		public Currency()
		{
			Type = CurrencyType.Unspecified;
			Value = 0;
		}
		public Currency(CurrencyType ct, double val)
		{
			Type = ct;
			Value = val;
		}

		public Currency(CurrencyType ct, string val)
		{
			Type = ct;
			Value = ConvertValue(val);
		}
		
		public Currency(Currency c)
		{
			Type = c.Type;
			Value = c.Value;
		}

		public Currency Copy()
		{
			return new Currency(this);
		}

		// Casting operators
		public static implicit operator CurrencyType (Currency c)
		{
			return c.Type;
		}

		public static implicit operator double (Currency c)
		{
			return c.Value;
		}

		public string Display()
		{
			return "(" + Type.ToString() + ") " + Value.ToString();
		}

		public static CurrencyType ConvertType(string ct)
		{
			if(ct == null)
				return CurrencyType.Unspecified;
			if(ct == "USD")
				return CurrencyType.USD;
			if(ct == "AUD")
				return CurrencyType.AUD;
			if(ct == "CAD")
				return CurrencyType.CAD;
			if(ct == "EUR")
				return CurrencyType.EUR;
			if(ct == "CHF")
				return CurrencyType.CHF;
			if(ct == "DKK")
				return CurrencyType.DKK;
			if(ct == "JPY")
				return CurrencyType.JPY;
			if(ct == "KRW")
				return CurrencyType.KRW;
			if(ct == "NOK")
				return CurrencyType.NOK;
			if(ct == "SEK")
				return CurrencyType.SEK;
			if(ct == "GBP")
				return CurrencyType.GBP;
			if(ct == "TWD")
				return CurrencyType.TWD;
			if(ct == "HKD")
				return CurrencyType.HKD;
			if(ct == "SGD")
				return CurrencyType.SGD;
			if(ct == "MXN")
				return CurrencyType.MXN;
			if(ct == "NZD")
				return CurrencyType.NZD;

			throw new System.Exception("Unknown currency type " + ct);
		}

		public static double ConvertValue(string val)
		{
			bool neg;
			int startindex;
			int endindex;
			int range;
			char[] nums = "0123456789".ToCharArray();

			neg = (val.IndexOf('(') > -1);
			startindex = val.IndexOfAny(nums);
			endindex = val.LastIndexOfAny(nums);
			range = endindex - startindex + 1;
			return ((neg) ? -1 : 1) * Convert.ToDouble(val.Substring(startindex, range));
		}


		// Arithmetic operators
		public static Currency operator - (Currency c)
		{
			if(c.Type == CurrencyType.Unspecified)
				throw new System.Exception("Cannot negate an unspecified currency type.");
			return new Currency(c.Type, -c.Value);
		}

		public static Currency operator + (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Cannot perform arithmetic on mismatched currency types.");
			return new Currency(lhs.Type, lhs.Value + rhs.Value);
		}

		public static Currency operator - (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Cannot perform arithmetic on mismatched currency types.");
			return new Currency(lhs.Type, lhs.Value - rhs.Value);
		}

		// Comparison operators
		public static bool operator < (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value < rhs.Value)
				return true;
			return false;
		}
		public static bool operator <= (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value <= rhs.Value)
				return true;
			return false;
		}
		public static bool operator == (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value == rhs.Value)
				return true;
			return false;
		}
		public static bool operator >= (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value >= rhs.Value)
				return true;
			return false;
		}
		public static bool operator > (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value > rhs.Value)
				return true;
			return false;
		}
		public static bool operator != (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value != rhs.Value)
				return true;
			return false;
		}

		public override bool Equals(object ct)
		{
			if(ct.GetType() != typeof(Currency))
				return false;
			return (this == (Currency) ct);
		}

		public override Int32 GetHashCode()
		{
			return Value.GetHashCode();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\CaseStep.cs ===
using System;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for CaseStep.
	/// </summary>
	public abstract class CaseStep
	{
		public string Header
		{
			get
			{
				return Parent.Name+", step "+CaseIndex+":";
			}
		}

		public void Log(string s)
		{
			Parent.Log(Header+" "+s);
		}

		public int CaseIndex=0;
		public Case	Parent=null;
		public abstract bool Execute();

		public CaseStep()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\BdkInterface.cs ===
using System;
using System.Xml;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for BdkInterface.
	/// </summary>
	public class BdkInterface : com.microsoft.extest.ssd.xontebillspsdom.xontebillsps02.bdk
	{
		public string	LastError;
		public int		LastErrorCode;

		public void ParseError(string ErrorXml)
		{
			XmlDocument doc=new XmlDocument();
			doc.LoadXml(ErrorXml);
			XmlElement root=doc.DocumentElement;
			XmlNode node=root.SelectSingleNode(@"ErrorHResult");
			LastErrorCode=Convert.ToInt32(node.InnerText,16);
			node=root.SelectSingleNode(@"ErrorMessage");
			LastError=node.InnerText;
		}

		public BdkInterface()
		{
			ServicePointManager.CertificatePolicy=new MyCertPolicy();
			ServicePointManager.DefaultConnectionLimit=220;
			this.Timeout=120000;
//			Prov.Url="http://"+Server.IPToString()+"/xsuppapi/cxsuppapi.asmx";
//			this.Credentials=new NetworkCredential("XONTEBILLSPSDOM\\spsp_xbox","hpWQxM84OArPMHSt9LuCvIrt298");
//			this.Credentials=new NetworkCredential("xontie\\FakeSGService","Jelram1!");
			this.Credentials=new NetworkCredential("XONTEBILLSPSDOM\\XboxRenewalTesting","Jelram1!");
//			this.Credentials=new NetworkCredential("OBAN3DOM\\XboxRenewalTesting","Jelram1!");
//			this.Credentials=new NetworkCredential("XONTEBILLSPSDOM\\Administrator","biteme");
		}

		class MyCertPolicy : ICertificatePolicy
		{
			public bool CheckValidationResult(ServicePoint sp, X509Certificate cert, WebRequest request, int problem)
			{
				return true;
			}
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\AccountActivity.cs ===
using System;
using System.Collections;
using System.Xml;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for AccountActivity.
	/// </summary>
	/// 

	public enum AccountActivityLogDepth
	{
		None = 0,
		Summary = 1,
		PaymentInstruments = 2,
		Subscriptions = 3,
		LineItems = 4
	};

	public delegate void LogDelegate(string str);

	public class AccountActivity
	{
		public ArrayList PaymentInstrumentActivitySet;
		public Currency ReadyBalance;
		public Currency OpenBalance;
		public Currency RefundBalance;

		public AccountActivity()
		{
		}

		public void Log(LogDelegate logger, AccountActivityLogDepth depth)
		{
			logger("OpenBalance Summary: Ready=" + ReadyBalance.Display() + " Open=" + OpenBalance.Display() + " Refund=" + RefundBalance.Display());
			if(depth <= AccountActivityLogDepth.Summary && PaymentInstrumentActivitySet == null)
				return;
			foreach(PaymentInstrumentActivity pia in PaymentInstrumentActivitySet)
				pia.Log(logger, depth);


		}		

		public bool Parse(string xml)
		{
			XmlDocument doc = new XmlDocument();
			XmlNode root;
			bool first = true;
			doc.LoadXml(xml);
			root=doc.DocumentElement;

			PaymentInstrumentActivitySet = new ArrayList();

			foreach(XmlNode n in root.ChildNodes)
			{
				if(n.Name != "PaymentInstrumentActivitySet")
					continue;

				foreach(XmlNode o in n.ChildNodes)	// Enumerating PaymentInstrumentActivity
				{
					if(o.Name != "PaymentInstrumentActivity")
						continue;

					PaymentInstrumentActivity pia = new PaymentInstrumentActivity();
					if(pia.Parse(o))
					{
						PaymentInstrumentActivitySet.Add(pia);
						if(first)
						{
							ReadyBalance = pia.ReadyBalance.Copy();
							OpenBalance = pia.OpenBalance.Copy();
							RefundBalance = pia.RefundBalance.Copy();
							first = false;
						}
						else
						{
							ReadyBalance += pia.ReadyBalance;
							OpenBalance += pia.OpenBalance;
							RefundBalance += pia.RefundBalance;
						}
					}
				}
			}
			if(PaymentInstrumentActivitySet.Count == 0)
				return false;
			return true;
		}
	};

	public class PaymentInstrumentActivity
	{
		public ArrayList SubscriptionActivitySet;
		public string PaymentInstrumentId;
		public Currency ReadyBalance = new Currency();
		public Currency OpenBalance = new Currency();
		public Currency RefundBalance = new Currency();
		public DateTime OpenBalanceCollectionDate;
		public DateTime RefundBalanceCollectionDate;

		public PaymentInstrumentActivity()
		{
			//
			// TODO: Add constructor logic here
			//
		}

		public void Log(LogDelegate logger, AccountActivityLogDepth depth)
		{
			logger("PICharges (" + PaymentInstrumentId + "): Ready=" + ReadyBalance.Display() + " Open=" + OpenBalance.Display() + " Refund=" + RefundBalance.Display());
			if(depth <= AccountActivityLogDepth.PaymentInstruments || SubscriptionActivitySet == null)
				return;
			foreach(SubscriptionActivity sa in SubscriptionActivitySet)
			{
				sa.Log(logger, depth);
			}
		}		

		public bool Parse(XmlNode n)
		{
			CurrencyType ct = CurrencyType.Unspecified;

			if(n.Name != "PaymentInstrumentActivity")
				return false;

			foreach(XmlNode p in n.ChildNodes)	// Enumerating sub elements of a PaymentInstrumentActivity
			{
				if(p.Name == "PaymentInstrumentId")
				{
					PaymentInstrumentId = p.InnerText;
					continue;
				}
				else if(p.Name == "Currency")
				{
					ct = Currency.ConvertType(p.InnerText);
					continue;
				}
				else if(p.Name == "ReadyBalance")
				{
					ReadyBalance = new Currency(ct, p.InnerText);
					continue;
				}
				else if(p.Name == "OpenBalance")
				{
					OpenBalance = new Currency(ct, p.InnerText);
					continue;
				}
				else if(p.Name == "OpenBalanceCollectionDate")
				{
					try
					{
						OpenBalanceCollectionDate = Convert.ToDateTime(p.InnerText);
					}
					catch
					{
					}
					continue;
				}
				else if(p.Name == "RefundBalanceCollectionDate")
				{
					try
					{
						RefundBalanceCollectionDate = Convert.ToDateTime(p.InnerText);
					}
					catch
					{
					}
					continue;
				}
				else if(p.Name == "RefundBalance")
				{
					RefundBalance = new Currency(ct, p.InnerText);
					continue;
				}
				else if(p.Name != "SubscriptionActivitySet")
					continue;

				SubscriptionActivitySet = new ArrayList();

				foreach(XmlNode q in p.ChildNodes)	// Enumerating sub elements of SubscriptionActivitySet (SubscriptionActivity)
				{
					if(q.Name != "SubscriptionActivity")
						continue;

					SubscriptionActivity sa = new SubscriptionActivity();
					if(sa.Parse(q, ct))
						SubscriptionActivitySet.Add(sa);
				}
			}
			return true;
		}
	};

	public class SubscriptionActivity
	{
		public ArrayList LineItemSet;
		public string SubscriptionId;
		public string OfferingGuid;
		public string OfferingDescription;

		public SubscriptionActivity()
		{
		}

		public void Log(LogDelegate logger, AccountActivityLogDepth depth)
		{
			logger("Subscription: ID=" + SubscriptionId + " GUID=" + OfferingGuid + " Desc=" + OfferingDescription);
			if(depth <= AccountActivityLogDepth.Subscriptions || LineItemSet == null)
				return;

			foreach(LineItem li in LineItemSet)
			{
				li.Log(logger);
			}
		}		

		public bool Parse(XmlNode n, CurrencyType ct)
		{
			if(n.Name != "SubscriptionActivity")
				return false;

			foreach(XmlNode r in n.ChildNodes) // Enumerating sub elements of a SubscriptionActivity
			{
				if(r.Name == "SubscriptionId")
				{
					SubscriptionId = r.InnerText;
					continue;
				}
				else if(r.Name == "OfferingGUID")
				{
					OfferingGuid = r.InnerText;
					continue;
				}
				else if(r.Name == "OfferingDescription")
				{
					OfferingDescription = r.InnerText;
					continue;
				}
				else if(r.Name != "LineItemSet")
					continue;

				LineItemSet = new ArrayList();

				foreach(XmlNode s in r.ChildNodes) // Enumerating sub elements of a LineItemSet
				{
					if(s.Name != "LineItem")
						continue;

					LineItem li = new LineItem();
					if(li.Parse(s, ct))
						LineItemSet.Add(li);
				}
			}
			return true;
		}
	}

	public class LineItem
	{
		public DateTime date;
		public Currency charge;

		public LineItem()
		{
		}

		public void Log(LogDelegate logger)
		{
			logger("Lineitem (" + date.ToShortDateString() + "): " + charge.Display());
		}		

		public bool Parse(XmlNode n, CurrencyType ct)
		{
			if(n.Name != "LineItem")
				return false;

			bool fDate = false, fCharge = false;
			foreach(XmlNode t in n.ChildNodes) // Enumerating sub elements of a LineItem
			{
				if(t.Name == "ItemDate")
				{
					date = Convert.ToDateTime(t.InnerText);
					fDate = true;
				}
				else if(t.Name == "LineItemTotal")
				{
					charge = new Currency(ct, t.InnerText);
					fCharge = true;
				}
			}

			if(fDate && fCharge)
				return true;

			return false;
		}

		public LineItem(string dt, Currency ct)
		{
			date = Convert.ToDateTime(dt);
			charge = ct;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\ActiveThreads.cs ===
using System;
using System.Threading;
using System.Collections;
namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ActiveThreads.
	/// </summary>
	/// 
	enum EventState
	{
		Set,
		Clear
	};

	public class ActiveThreads
	{
		uint AllowedActive = 1;
		uint CurrentActive = 1;
		public ManualResetEvent AllThreadsComplete = new ManualResetEvent(false);
		public ManualResetEvent Activate = new ManualResetEvent(false);
		EventState AllThreadsCompleteState = EventState.Clear;
		EventState ActivateState = EventState.Clear;
		public string rollID = null;
		ArrayList caseList = new ArrayList(); 

		object lockobj = new object();
		public void ActivateThreads()
		{
			lock(lockobj)
			{
				ActivateState = EventState.Set;
				Activate.Set();
			}
		}

		public void WaitOnBatchActivate(string caseName)
		{
			lock(lockobj)
			{
				caseList.Add(caseName);
			}
			Activate.WaitOne();
		}

		public void WaitOnAllComplete()
		{
			AllThreadsComplete.WaitOne();
		}

		public void ThreadComplete(string caseName)
		{
			lock(lockobj)
			{
				bool fFound = false;
				for(int i = 0; i < caseList.Count; ++i)
				{
					if(caseList[i].ToString() == caseName)
					{
						fFound = true;
						caseList.RemoveAt(i);
						break;
					}
				}
				if(!fFound)
					System.Diagnostics.Debugger.Break();
				--CurrentActive;
				if(CurrentActive == 0)
				{
					AllThreadsCompleteState = EventState.Set;
					AllThreadsComplete.Set();
				}
			}
		}

		public void AddWaiter()
		{
			lock(lockobj)
			{
				++AllowedActive;
				++CurrentActive;
			}
		}

		public uint GetActive()
		{
			lock(lockobj)
			{
				return CurrentActive;
			}
		}

		public uint GetConfigured()
		{
			lock(lockobj)
			{
				return AllowedActive;
			}
		}

		public ActiveThreads(string rollname)
		{
			lock(lockobj)
			{
				rollID = rollname;
			}
		}

		protected ActiveThreads()
		{
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\Case.cs ===
using System;
using System.Threading;
using ServerTestFramework;
using System.Collections;
using System.Web.Services.Protocols;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Case.
	/// </summary>
	public class Case : ThreadBase
	{
		public enum PassCode {NotRunning, Running, Waiting, Passed, Failed, Queued};
		static public int	threadId=0;
		public TimeRoll		CurrentlyWaitingOn=null;		// Points to whatever TimeRoll this thread is currently waiting on, if any
		public int			currentThreadId;
		public ArrayList	OutputLog=new ArrayList();
		public PassCode		Code=PassCode.NotRunning;
		public PassCode		OldCode=PassCode.Failed;
		public string		Name;
		public bool			ContinueOnFailures = false;
		public uint			FailureCount = 0;
		public ActiveThreads ThreadBatch = null;
		public int			PuidLow
		{
			get
			{
				return (int)(Puid & 0xFFFFFFFF);
			}
		}
		public int			PuidHigh
		{
			get
			{
				return (int)(Puid >> 32);
			}
		}
		public ulong		Puid=0;
		public CaseStep		[]Steps;
		public System.Collections.Hashtable State = new Hashtable();

		public void SetThreadId()
		{
			currentThreadId=Case.threadId++;
		}

		public Case(string name, params CaseStep []sts)
		{
			Puid=0;
			OldCode=PassCode.Failed;
			Code=PassCode.NotRunning;
			Name = name;
			try
			{
				if(sts == null)
				{
					Steps = new CaseStep[1];
				}
				else
				{
					Steps=new CaseStep[sts.Length+1];
					for (int i=0; i<sts.Length; i++)
					{
						Steps[i+1]=sts[i];
						Steps[i+1].Parent = this;
					}
				}
			}
			catch(System.Exception f)
			{
				System.Diagnostics.Debug.WriteLine(f.Message);
				System.Diagnostics.Debug.WriteLine(f.StackTrace);
			}
		}

		public Case(string name, bool ContinueOnFailure, params CaseStep []sts):this(name, sts)
		{
			ContinueOnFailures = ContinueOnFailure;
		}

		protected override void ThreadBody()
		{
			bool failureOccurred=false;
			int counter;
			for (counter=0; counter<Steps.Length; counter++)
			{
				CaseStep step=Steps[counter];
				if(step == null)
					continue;
				step.CaseIndex=counter;
				Code=PassCode.Running;
				bool b=false;
				bool exceptionOccured = false;  // Used to tract if we see an exception
				uint retryCount = 0;            // Allows us to retry several times when an exception is received
				uint maxRetries = 5;            // Defines how many exceptions we'll tolerate before giving up
				System.Random randomBackoff = new Random();
				
				// Try up to 5 times when an exception is responsible for the failure
				do
				{
					exceptionOccured = false;

					if(retryCount > 0)
					{
						// Backoff on exceptions
						step.Log("Retry #" + retryCount + " of " + maxRetries);
						step.Log("Backing off for random 5-25 second interval");
						Thread.Sleep(5000 + randomBackoff.Next(20000));
					}

					try
					{
						b=step.Execute();
					}
					catch(SoapException e)
					{
						BdkInterface bdk=new BdkInterface();
						bdk.ParseError(e.Message);
						step.Log("Failed with 0x"+((uint)bdk.LastErrorCode).ToString("X")+" - "+bdk.LastError);
						b=false;
						exceptionOccured = true;
					}
					catch(Exception e)
					{
						step.Log("Failed with exception");
						step.Log(e.Message);
						step.Log(e.StackTrace);
						b=false;
						exceptionOccured = true;
					}

					retryCount++;
				}
				while(exceptionOccured && retryCount <= maxRetries);

				if (!b)
				{
					FailureCount++;
					failureOccurred=true;
					OutputLog.Add(step.Header+" FAILED");
// If you were to remove this break, a case would continue executing after a failure
// ... it looks like that is not the wanted behavior, so I added a break here
					if(!ContinueOnFailures)
						break;

					// Added a sleep when errors are detected so that one error doesn't cause cascading
					// errors as multiple tests swamp the available sockets
					Thread.Sleep(5000);
				}
			}
			if(ThreadBatch != null)
			{
				OutputLog.Add(ThreadBatch.rollID + " completed for this case.");
				ThreadBatch.ThreadComplete(Name);
			}
			OutputLog.Add("Case "+Name+" completed");
			if (failureOccurred)
				Code=PassCode.Failed;
			else
				Code=PassCode.Passed;
		}

		public override string ToString()
		{
			return Name;
		}

		public void Log(string s)
		{
			Console.WriteLine(s);
			lock(OutputLog)
			{
				OutputLog.Add(s);
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\Form1.cs ===
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Reflection;
using ServerTestFramework;
using ServerTestFramework.LiveService;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Form1.
	/// </summary>
	public class Form1 : System.Windows.Forms.Form
	{
		Script s;
		private System.Windows.Forms.Button bGo;
		private System.Windows.Forms.Timer timer;
		private System.Windows.Forms.ImageList imageList1;
		private System.Windows.Forms.Panel panel1;
		private System.Windows.Forms.Panel panel2;
		private System.Windows.Forms.GroupBox gRolls;
		private System.Windows.Forms.Panel panel3;
		private System.Windows.Forms.GroupBox groupBox2;
		private System.Windows.Forms.ListView lThreads;
		private System.Windows.Forms.ColumnHeader ColName;
		private System.Windows.Forms.ColumnHeader columnHeader1;
		private System.Windows.Forms.ColumnHeader colFailures;
		private System.Windows.Forms.ComboBox cbScripts;
		private System.Windows.Forms.Label lStatus;
		private System.Windows.Forms.TextBox tLog;
		private System.ComponentModel.IContainer components;

		public Form1()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
			UpdateScriptComboBox();
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.components = new System.ComponentModel.Container();
			System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(Form1));
			this.bGo = new System.Windows.Forms.Button();
			this.imageList1 = new System.Windows.Forms.ImageList(this.components);
			this.timer = new System.Windows.Forms.Timer(this.components);
			this.panel1 = new System.Windows.Forms.Panel();
			this.lStatus = new System.Windows.Forms.Label();
			this.cbScripts = new System.Windows.Forms.ComboBox();
			this.panel2 = new System.Windows.Forms.Panel();
			this.gRolls = new System.Windows.Forms.GroupBox();
			this.panel3 = new System.Windows.Forms.Panel();
			this.groupBox2 = new System.Windows.Forms.GroupBox();
			this.lThreads = new System.Windows.Forms.ListView();
			this.ColName = new System.Windows.Forms.ColumnHeader();
			this.columnHeader1 = new System.Windows.Forms.ColumnHeader();
			this.colFailures = new System.Windows.Forms.ColumnHeader();
			this.tLog = new System.Windows.Forms.TextBox();
			this.panel1.SuspendLayout();
			this.panel2.SuspendLayout();
			this.panel3.SuspendLayout();
			this.groupBox2.SuspendLayout();
			this.SuspendLayout();
			// 
			// bGo
			// 
			this.bGo.Location = new System.Drawing.Point(232, 8);
			this.bGo.Name = "bGo";
			this.bGo.TabIndex = 0;
			this.bGo.Text = "Go";
			this.bGo.Click += new System.EventHandler(this.bGo_Click);
			// 
			// imageList1
			// 
			this.imageList1.ImageSize = new System.Drawing.Size(16, 16);
			this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageList1.ImageStream")));
			this.imageList1.TransparentColor = System.Drawing.Color.Transparent;
			// 
			// timer
			// 
			this.timer.Interval = 500;
			this.timer.Tick += new System.EventHandler(this.timer_Tick);
			// 
			// panel1
			// 
			this.panel1.Controls.Add(this.lStatus);
			this.panel1.Controls.Add(this.cbScripts);
			this.panel1.Controls.Add(this.bGo);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.panel1.Location = new System.Drawing.Point(0, 0);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(688, 40);
			this.panel1.TabIndex = 3;
			// 
			// lStatus
			// 
			this.lStatus.Location = new System.Drawing.Point(312, 12);
			this.lStatus.Name = "lStatus";
			this.lStatus.Size = new System.Drawing.Size(344, 16);
			this.lStatus.TabIndex = 2;
			this.lStatus.Text = "Hit Go to start.";
			// 
			// cbScripts
			// 
			this.cbScripts.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.cbScripts.Location = new System.Drawing.Point(8, 8);
			this.cbScripts.Name = "cbScripts";
			this.cbScripts.Size = new System.Drawing.Size(216, 21);
			this.cbScripts.TabIndex = 1;
			this.cbScripts.SelectedIndexChanged += new System.EventHandler(this.cbScripts_SelectedIndexChanged);
			// 
			// panel2
			// 
			this.panel2.Controls.Add(this.gRolls);
			this.panel2.Dock = System.Windows.Forms.DockStyle.Left;
			this.panel2.Location = new System.Drawing.Point(0, 40);
			this.panel2.Name = "panel2";
			this.panel2.Size = new System.Drawing.Size(200, 414);
			this.panel2.TabIndex = 5;
			// 
			// gRolls
			// 
			this.gRolls.Dock = System.Windows.Forms.DockStyle.Fill;
			this.gRolls.Location = new System.Drawing.Point(0, 0);
			this.gRolls.Name = "gRolls";
			this.gRolls.Size = new System.Drawing.Size(200, 414);
			this.gRolls.TabIndex = 5;
			this.gRolls.TabStop = false;
			this.gRolls.Text = " Time rolls ";
			// 
			// panel3
			// 
			this.panel3.Controls.Add(this.groupBox2);
			this.panel3.Dock = System.Windows.Forms.DockStyle.Fill;
			this.panel3.Location = new System.Drawing.Point(200, 40);
			this.panel3.Name = "panel3";
			this.panel3.Size = new System.Drawing.Size(488, 414);
			this.panel3.TabIndex = 6;
			// 
			// groupBox2
			// 
			this.groupBox2.Controls.Add(this.tLog);
			this.groupBox2.Controls.Add(this.lThreads);
			this.groupBox2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.groupBox2.Location = new System.Drawing.Point(0, 0);
			this.groupBox2.Name = "groupBox2";
			this.groupBox2.Size = new System.Drawing.Size(488, 414);
			this.groupBox2.TabIndex = 3;
			this.groupBox2.TabStop = false;
			this.groupBox2.Text = " Threads ";
			// 
			// lThreads
			// 
			this.lThreads.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
																					   this.ColName,
																					   this.columnHeader1,
																					   this.colFailures});
			this.lThreads.Dock = System.Windows.Forms.DockStyle.Top;
			this.lThreads.FullRowSelect = true;
			this.lThreads.GridLines = true;
			this.lThreads.LabelWrap = false;
			this.lThreads.Location = new System.Drawing.Point(3, 16);
			this.lThreads.MultiSelect = false;
			this.lThreads.Name = "lThreads";
			this.lThreads.Size = new System.Drawing.Size(482, 222);
			this.lThreads.SmallImageList = this.imageList1;
			this.lThreads.TabIndex = 2;
			this.lThreads.View = System.Windows.Forms.View.Details;
			this.lThreads.SelectedIndexChanged += new System.EventHandler(this.lThreads_SelectedIndexChanged);
			// 
			// ColName
			// 
			this.ColName.Text = "Thread";
			this.ColName.Width = 400;
			// 
			// columnHeader1
			// 
			this.columnHeader1.Text = "State";
			this.columnHeader1.Width = 120;
			// 
			// colFailures
			// 
			this.colFailures.Text = "Failures";
			this.colFailures.Width = 40;
			// 
			// tLog
			// 
			this.tLog.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tLog.ImeMode = System.Windows.Forms.ImeMode.On;
			this.tLog.Location = new System.Drawing.Point(3, 238);
			this.tLog.MaxLength = 1048576;
			this.tLog.Multiline = true;
			this.tLog.Name = "tLog";
			this.tLog.ReadOnly = true;
			this.tLog.ScrollBars = System.Windows.Forms.ScrollBars.Both;
			this.tLog.Size = new System.Drawing.Size(482, 173);
			this.tLog.TabIndex = 3;
			this.tLog.Text = "";
			this.tLog.WordWrap = false;
			// 
			// Form1
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(688, 454);
			this.Controls.Add(this.panel3);
			this.Controls.Add(this.panel2);
			this.Controls.Add(this.panel1);
			this.Name = "Form1";
			this.Text = "Auto Renewal Test Tool";
			this.panel1.ResumeLayout(false);
			this.panel2.ResumeLayout(false);
			this.panel3.ResumeLayout(false);
			this.groupBox2.ResumeLayout(false);
			this.ResumeLayout(false);

		}
		#endregion

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main() 
		{

			ServerTestFramework.Global.Env.UODBServer=
				new LiveServer("UODB", null, null, new string[] {Global.Uodb1 , Global.Uodb2}, null);
			ServerTestFramework.Global.Env.UACSServer=new LiveServer("UACS",Global.Uacs);
			xonline.Initialize();
			Console.WriteLine("Using UACS "+ServerTestFramework.Global.Env.UACSServer.IPToString());
			
			Application.Run(new Form1());

			xonline.Uninitialize();
		}

		private void bGo_Click(object sender, System.EventArgs e)
		{
			Case.threadId=0;
			cbScripts.Enabled=false;
			bGo.Enabled=false;
			TimeRoll []rolls=s.GetRolls();
			int y=-10;
			foreach(TimeRoll r in rolls)
			{
				RollButton b=new RollButton();
				b.Top=(y+=30);
				b.Left=10;
				b.Text=r.Name;
				b.BoundTimeRoll=r;
				b.Width=120;
				gRolls.Controls.Add(b);
			}
			s.Go();
			s.StartSyncObject.ReleaseWaiting();
			PopulateThreadList();
			timer.Enabled=true;
		}

		class CaseItem:ListViewItem
		{
			public void Update()
			{
				Color col = Color.White;

				if (c.OldCode==c.Code)
					return;

				switch(c.Code)
				{
					case Case.PassCode.Running:
						this.ImageIndex=0;
						col=Color.White;
						break;
					case Case.PassCode.Queued:
					case Case.PassCode.Waiting:
						this.ImageIndex=1;
						col=Color.LightGray;
						break;
					case Case.PassCode.Passed:
						this.ImageIndex=2;
						col=Color.Green;
						break;
					case Case.PassCode.Failed:
						this.ImageIndex=3;
						col=Color.Red;
						break;
				}

				this.BackColor = col;
				this.SubItems[1].Text = c.Code.ToString();
				c.OldCode=c.Code;
				if(this.SubItems.Count <= 2)
				{
					this.SubItems.Add(c.FailureCount.ToString());
				}
				else
				{
					this.SubItems[2].Text = (c.FailureCount.ToString());
				}
			}

			public override string ToString()
			{
				return c.Name;
			}

			public CaseItem(Case cs)
			{
				c=cs;
				this.UseItemStyleForSubItems=true;
				this.Text=c.Name;
				this.SubItems.Add(this.Text);
				Update();
			}
			public Case c;
		}

		void PopulateThreadList()
		{
			lThreads.Items.Clear();
			foreach (Case c in s.cases)
			{
				lThreads.Items.Add(new CaseItem(c));
			}
		}

		CaseItem selectedLogItem=null;
		int selectedLogItemLineCount=-1;
		void UpdateSelectedThreadLog()
		{
			bool update=false;

			if (lThreads.SelectedItems.Count>0)
			{
				CaseItem cs=(CaseItem) lThreads.SelectedItems[0];
				if (cs==null)
					return;
				
				// Try not to update unless there is reason to update.
				if (cs!=selectedLogItem)
					update=true;
				else
					if (cs.c.OutputLog.Count!=selectedLogItemLineCount)
						update=true;
				selectedLogItem=cs;
				selectedLogItemLineCount=cs.c.OutputLog.Count;

				if (update)
				{
					tLog.Text = "";

					lock(cs.c.OutputLog)
					{
						foreach(string s in cs.c.OutputLog)
						{
							tLog.Text = tLog.Text + s + "\r\n";
						}
					}
				}
			}
		}

		private void UpdateScriptComboBox()
		{
			Assembly asm=System.Reflection.Assembly.GetExecutingAssembly();
			Type []allTypes=asm.GetTypes();
			cbScripts.Items.Clear();
			foreach (Type t in allTypes)
			{			
				if (t.BaseType==typeof(Script))
					cbScripts.Items.Add(t);
			}
			cbScripts.SelectedIndex=0;
		}



		private void timer_Tick(object sender, System.EventArgs e)
		{
			// update log
			UpdateSelectedThreadLog();

			// update elements
			bool allWaiting=true;

			lThreads.SuspendLayout();
			foreach(CaseItem ci in lThreads.Items)
			{
				if (ci.c.Code==Case.PassCode.Running)
					allWaiting=false;
				ci.Update();
			}
			lThreads.ResumeLayout();
			
			// Get current status
			if (allWaiting)
			{
				lStatus.Text="All threads are waiting on something, roll the clock!";
				lStatus.ForeColor=Color.Green;
			}
			else
			{
				lStatus.Text="Some threads are still executing.";
				lStatus.ForeColor=Color.Black;
			}

		}

		private void lThreads_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			UpdateSelectedThreadLog();		
		}

		private void cbScripts_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			Type t=cbScripts.SelectedItem as Type;
			try
			{
				s=(t.GetConstructor(System.Type.EmptyTypes).Invoke(null) as Script);
				PopulateThreadList();
			}
			catch(System.Exception f)
			{
				System.Diagnostics.Debug.WriteLine(f.Message);
				System.Diagnostics.Debug.WriteLine(f.StackTrace);
			}
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\ScriptCancelCredit.cs ===
#define KOREA_FIX

using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptAllCountries.
	/// </summary>
	public class ScriptCancelCredit : Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 2 months");
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days");
		TimeRoll roll2		= new TimeRoll("3rd roll - 1 month");
		TimeRoll roll3		= new TimeRoll("4th roll - 1 month");

		override public TimeRoll []GetRolls()
		{
			return new TimeRoll[] {roll0,roll1,roll2,roll3};
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();
			string countryname;
			Owner.Country countrycode;

			// Debug variables for only running one test case
			bool fOneOnly = false;
			Owner.Country preferred = Owner.Country.US;

			// Define the countries with special cancellation rules
			ArrayList specialCaseBilledCancellationCountries = new ArrayList();
			specialCaseBilledCancellationCountries.Add(Owner.Country.KR);
			specialCaseBilledCancellationCountries.Add(Owner.Country.AU);

			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				// TODO - Perform a lookup on the expected credit values to use for each test

				if(fOneOnly && preferred != countrycode)
					continue;

				// Start the pre-paid subscription cancellation tests

				caselist.Add(new Case(countryname + " - Cancel launch-offer sub",
					new StepCreateAccount		("11111", countrycode			),			// Create the account in the starter kit
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCancelSubscription	(								),          // Cancel sub in middle of starter kit
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel pre-paid sub",
					new StepCreateAccount		("22222", countrycode			),			// Create the account in the 12 month pre-paid
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCancelSubscription	(								),          // Cancel sub in middle of 12 month pre-paid
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel three-month sub",
					new StepCreateAccount		("CCCCC", countrycode			),			// Create the account in the 3 month pre-paid
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCancelSubscription	(								),          // Cancel sub in middle of 3 month pre-paid
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel game-trial sub",
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCreateAccount		("33333", countrycode			),			// Create the account in the 2 month game-trial
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepCancelSubscription	(								),          // Cancel sub in middle of game-trial
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel console-trial sub",
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCreateAccount		("44444", countrycode			),			// Create the account in the 2 month console-trial
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepCancelSubscription	(								),          // Cancel sub in middle of console-trial
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				// The countries that have special cases for their billed tests can skip the next section
				if(specialCaseBilledCancellationCountries.Contains(countrycode))
					continue;

				// Start the billed subscription cancellation tests
			
				caselist.Add(new Case(countryname + " - Cancel monthly sub in 1st month",
					new StepCreateAccount		("33333", countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepCancelSubscription	(								),          // Cancel sub in first month of monthly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel yearly sub in 1st month",
					new StepCreateAccount		("33333", countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepCancelSubscription	(								),          // Cancel sub in first month of yearly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel monthly sub in 2nd month",
					new StepCreateAccount		("33333", countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in second month of monthly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel yearly sub in 2nd month",
					new StepCreateAccount		("33333", countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in second month of yearly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel monthly sub in 3rd month",
					new StepCreateAccount		("33333", countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in third month of monthly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel yearly sub in 3rd month",
					new StepCreateAccount		("33333", countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in third month of yearly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));				
			}

			// Australian special case billed subscription cancellation tests
			if(!fOneOnly || preferred == Owner.Country.AU)
			{
				caselist.Add(new Case("AU - Cancel monthly sub in 1st month",
					new StepCreateAccount		("33333", Owner.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepCancelSubscription	(								),          // Cancel sub in first month of monthly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel yearly sub in 1st month",
					new StepCreateAccount		("33333", Owner.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepCancelSubscription	(								),          // Cancel sub in first month of yearly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel monthly sub in 2nd month",
					new StepCreateAccount		("33333", Owner.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in second month of monthly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel yearly sub in 2nd month",
					new StepCreateAccount		("33333", Owner.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in second month of yearly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel monthly sub in 3rd month",
					new StepCreateAccount		("33333", Owner.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in third month of monthly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel yearly sub in 3rd month",
					new StepCreateAccount		("33333", Owner.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll2							),          // Time advance 1 month
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepCancelSubscription	(								),          // Cancel sub in third month of yearly
					new StepGetOpenBalance		(AccountActivityLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));				
			}

			// Korea doesn't have billed subscriptions so there's no need for cancellation tests

			cases = (Case[]) caselist.ToArray(typeof(Case));
		}

		public ScriptCancelCredit()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\RollButton.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for RollButton.
	/// </summary>
	public class RollButton : System.Windows.Forms.Button
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public TimeRoll BoundTimeRoll=null;

		public RollButton()
		{
			// This call is required by the Windows.Forms Form Designer.
			InitializeComponent();

			// TODO: Add any initialization after the InitializeComponent call

		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			// 
			// RollButton
			// 
			this.Click += new System.EventHandler(this.RollButton_Click);

		}
		#endregion

		private void RollButton_Click(object sender, System.EventArgs e)
		{
			BoundTimeRoll.ReleaseWaiting();
			this.Enabled=false;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\Script.cs ===
using System;
using System.Threading;
using System.Reflection;
using ServerTestFramework;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Script.
	/// </summary>
	abstract public class Script : ThreadBase
	{
		public TimeRoll StartSyncObject=new TimeRoll("Start object");

		const int maxExecutingCases=16;
		public Case []cases;

		protected abstract void Initialize();
		public abstract TimeRoll []GetRolls();
		
		protected override void ThreadBody()
		{
			foreach(Case cs in cases)
			{
				cs.SetThreadId();
				cs.Go();
			}
		}

		public int NonWaitingThreadCount
		{
			get
			{
				int counter=0;
				foreach(Case c in cases)
				{
					if (c.Code==Case.PassCode.Running)
						counter++;
				}
				return counter;
			}
		}

		public Script()
		{
			Initialize();
			foreach(Case cs in cases)
			{
				cs.Steps[0] = new StepWaitForRoll(StartSyncObject);
				cs.Steps[0].Parent = cs;
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\Global.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Global.
	/// </summary>
	public class Global
	{
		static public long DataVerificationTimeout = 120 * 1000 * 10;	// In ticks
//		static public string Uacs="10.10.2.21:85";
		static public string Uacs="10.10.7.205:8080";
		static public string Uodb1="10.10.5.228";
		static public string Uodb2="10.10.5.229";
		public enum  OfferType:ulong  
		{
										None	    	=0x0000000000000000,
										LaunchOffer    	=0xFFFE000080000008,
										Monthly599    	=0xFFFE00008000000B,
										Yearly4999    	=0xFFFE00008000000C,
										GameTrial    	=0xFFFE000080000009,
										ConsoleTrial    =0xFFFE00008000000A,
										PrepaidCard	    =0xFFFE00008000000D,
										ThreeMonthCard  =0xFFFE00008000000E,
										Beta001	    	=0xFFFE000080000001,
										Beta002	    	=0xFFFE000080000002,
										Beta003	    	=0xFFFE000080000003,
										Beta004	    	=0xFFFE000080000004,
										Beta005	    	=0xFFFE000080000005,
										Beta006	    	=0xFFFE000080000006
		};

		public enum RenewalStatus : byte 
		{
			NO_RENEWAL = 0x00,
			VOUCHER_RENEWAL,
			NORMAL_RENEWAL
		};

		
		public enum AccountStatus
		{
			Pending = 0,
			Enabled = 1,
			Suspended = 2,
			Expired = 3,
			Canceled = 4,
			Renewed = 10
		}

		public enum ViolationStatus
		{
			DontCare,
			Yes,
			No
		}

		public static string GetVoucherFromOffer(OfferType t)
		{
			switch(t)
			{
				case OfferType.LaunchOffer:
					return "1111111111111111111111111";
				case OfferType.Monthly599:
					return "";
				case OfferType.Yearly4999:
					return "";
				case OfferType.GameTrial:
					return "3333333333333333333333333";
				case OfferType.ConsoleTrial:
					return "4444444444444444444444444";
				case OfferType.PrepaidCard:
					return "2222222222222222222222222";
				case OfferType.ThreeMonthCard:
					return "CCCCCCCCCCCCCCCCCCCCCCCCC";
			}
			ConsoleX.WriteLine(CC.RED,"Don't know how to get voucher for offer "+t);
			return "";
		}

		public Global()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\ScriptAllCountries.cs ===
#define SKIP_BETA_PROMO_AND_TEST
#define KOREA_FIX

using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptAllCountries.
	/// </summary>
	public class ScriptAllCountries : Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 2 months");
		TimeRoll rollA		= new TimeRoll("1.5th roll - 1 month");
		TimeRoll roll1		= new TimeRoll("2nd roll - 9 months");
		TimeRoll roll2		= new TimeRoll("3rd roll - 12 months");


		override public TimeRoll []GetRolls()
		{
			return new TimeRoll[] {roll0,rollA,roll1,roll2};
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();
			string countryname;
			Owner.Country countrycode;

			// Debug variables for only running one test case
			bool fOneOnly = false;
			bool fRunBetaPromoTest = false;
			Owner.Country preferred = Owner.Country.SG;
			
			// Define the countries default to monthly autorenewal behavior
			ArrayList defaultAutoRenewMonthlyCountries = new ArrayList();
			defaultAutoRenewMonthlyCountries.Add(Owner.Country.JP);

			// Define the countries with beta offers
			ArrayList betaPromoTestExistCountries = new ArrayList();
			betaPromoTestExistCountries.Add(Owner.Country.US);
			betaPromoTestExistCountries.Add(Owner.Country.CA);
			betaPromoTestExistCountries.Add(Owner.Country.JP);
			betaPromoTestExistCountries.Add(Owner.Country.UK);
			betaPromoTestExistCountries.Add(Owner.Country.FR);
			betaPromoTestExistCountries.Add(Owner.Country.DE);

			// Build offering Array lists for eligible enumeration testing
			ArrayList defaultNonVoucherOffers = new ArrayList();
			defaultNonVoucherOffers.Add(Global.OfferType.Monthly599);
			defaultNonVoucherOffers.Add(Global.OfferType.Yearly4999);

			ArrayList defaultNonVoucherOffersFromMonthly = new ArrayList();
			defaultNonVoucherOffersFromMonthly.Add(Global.OfferType.Yearly4999);

			ArrayList defaultOnesVoucherOffers = new ArrayList();
			defaultOnesVoucherOffers.Add(Global.OfferType.LaunchOffer);

			ArrayList defaultTwosVoucherOffers = new ArrayList();
			defaultTwosVoucherOffers.Add(Global.OfferType.PrepaidCard);

			ArrayList defaultCsVoucherOffers = new ArrayList();
			defaultCsVoucherOffers.Add(Global.OfferType.ThreeMonthCard);
			
			ArrayList emptyOffersList = new ArrayList();

			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				if(fOneOnly && preferred != countrycode)
					continue;

				if(betaPromoTestExistCountries.Contains(countrycode))
					fRunBetaPromoTest = true;

				// Korea will have a special case outside of this loop
				if(countrycode == Owner.Country.KR)
					continue;

				caselist.Add(new Case(countryname + " - Launch Offer (default renewal)",
					new StepCreateAccount	("11111", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
											defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
											defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
											defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Launch Offer (non-default non-voucher renewal)",
					new StepCreateAccount	("11111", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to LO)",
					new StepCreateAccount	("11111", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to PP)",
					new StepCreateAccount	("11111", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to 3M)",
					new StepCreateAccount	("11111", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Pre Paid (default renewal)",
					new StepCreateAccount	("22222", countrycode			), 			// Create the account in the annual prepaid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the annual prepaid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),                                                                  
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Pre Paid (non-default non-voucher renewal)",
					new StepCreateAccount	("22222", countrycode			), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to LO)",
					new StepCreateAccount	("22222", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to PP)",
					new StepCreateAccount	("22222", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to 3M)",
					new StepCreateAccount	("22222", countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Three Month (default renewal)",
					new StepCreateAccount	("CCCCC", countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)                                                                  
					));

				caselist.Add(new Case(countryname + " - Three Month (non-default non-voucher renewal)",
					new StepCreateAccount	("CCCCC", countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as non-default non-voucher offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to LO)",
					new StepCreateAccount	("CCCCC", countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to PP)",
					new StepCreateAccount	("CCCCC", countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to 3M)",
					new StepCreateAccount	("CCCCC", countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo pre-paid offer
					false),                                                      
					new StepWaitForRoll		(rollA							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)          // Verify current sub is the three-month offer and default auto-renewal
					));

				// In addition to testing the renewals from the game trial offer, this case will also verify
				// propper offer enumeration from monthly and yearly billed offers
				caselist.Add(new Case(countryname + " - Game Trial (default renewal)",
					new StepCreateAccount	("33333", countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.Yearly4999    ),          // Everyone should be yearly at this point, because
																						// yearly hasn't gotten to the end of their first 12 months yet
					new StepVerifyEnumerate(defaultNonVoucherOffers),					// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    ),          // Verify current sub is in expected renewal
					new StepVerifyEnumerate(defaultNonVoucherOffersFromMonthly),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444")				// Verify that we can't see any 4's voucher offers as renewals
					));

				caselist.Add(new Case(countryname + " - Game Trial (non-default non-voucher renewal)",
					new StepCreateAccount	("33333", countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to LO)",
					new StepCreateAccount	("33333", countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to PP)",
					new StepCreateAccount	("33333", countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to 3M)",
					new StepCreateAccount	("33333", countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (default renewal)",
					new StepCreateAccount	("44444", countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.Yearly4999    ),          // Everyone should be yearly at this point, because
																						// yearly hasn't gotten to the end of their first 12 months yet
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (non-default non-voucher renewal)",
					new StepCreateAccount	("44444", countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to LO)",
					new StepCreateAccount	("44444", countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to PP)",
					new StepCreateAccount	("44444", countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to 3M)",
					new StepCreateAccount	("44444", countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				if(fRunBetaPromoTest)
				{
#if !SKIP_BETA_PROMO_AND_TEST
					if(fStarterKitToAnnualAutoRenew)
					{

						caselist.Add(new Case(countryname + " - Beta1",
							new StepCreateAccount	("66666", countrycode			),			// Create the account in the beta1 offer
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta2",
							new StepCreateAccount	("77777", countrycode			),			// Create the account in the beta2 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta3",
							new StepCreateAccount	("88888", countrycode			),			// Create the account in the beta3 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta4",
							new StepCreateAccount	("99999", countrycode			),			// Create the account in the beta4 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Promo",
							new StepCreateAccount	("AAAAA", countrycode			),			// Create the account in the promo offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Test",
							new StepCreateAccount	("BBBBB", countrycode			),			// Create the account in the test offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

					}
					else // if (!fStarterKitToAnnualAutoRenew)
					{
						caselist.Add(new Case(countryname + " - Beta1",
							new StepCreateAccount	("66666", countrycode			),			// Create the account in the beta1 offer
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta2",
							new StepCreateAccount	("77777", countrycode			),			// Create the account in the beta2 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta3",
							new StepCreateAccount	("88888", countrycode			),			// Create the account in the beta3 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta4",
							new StepCreateAccount	("99999", countrycode			),			// Create the account in the beta4 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Promo",
							new StepCreateAccount	("AAAAA", countrycode			),			// Create the account in the promo offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						Ccaselist.Add(new Case(countryname + " - Test",
							new StepCreateAccount	("BBBBB", countrycode			),			// Create the account in the test offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));
					}
#endif
				}

			}

			// Add the special cases for Korea only if we're running all cases or this
			// is the only case we want to run
			if(!fOneOnly || (preferred == Owner.Country.KR))
			{
				caselist.Add(new Case("Korea - Launch Offer (default renewal",
					new StepCreateAccount	("11111", Owner.Country.KR		),			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer	),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
					new StepSetRenewal		(Global.OfferType.PrepaidCard, true),       // Renew the expired sub into the pre-paid card sub
					new StepSetRenewal		(Global.OfferType.LaunchOffer, false),      // Set the next renewal to be the starter-kit sub
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Convert expired account into a monthly one
					));

				caselist.Add(new Case("Korea - Launch Offer (renewal to LO)",
					new StepCreateAccount	("11111", Owner.Country.KR		), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case("Korea - Launch Offer (renewal to PP)",
					new StepCreateAccount	("11111", Owner.Country.KR		), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case("Korea - Launch Offer (renewal to 3M)",
					new StepCreateAccount	("11111", Owner.Country.KR		), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case("Korea - Pre Paid (default renewal)",
					new StepCreateAccount	("22222", Owner.Country.KR		),			// Create the account in the annual prepaid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard	),          // Verify current sub is the annual prepaid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
					new StepSetRenewal		(Global.OfferType.LaunchOffer, true),       // Renew the expired sub into the starter kit sub
					new StepSetRenewal		(Global.OfferType.PrepaidCard, false),      // Set the next renewal to be the pre-paid card sub
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.PrepaidCard	)	        // Convert expired account into a monthly one
					));

				caselist.Add(new Case("Korea - Pre Paid (renewal to LO)",
					new StepCreateAccount	("22222", Owner.Country.KR		), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case("Korea - Pre Paid (renewal to PP)",
					new StepCreateAccount	("22222", Owner.Country.KR		), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case("Korea - Pre Paid (renewal to 3M)",
					new StepCreateAccount	("22222", Owner.Country.KR		), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case("Korea - Three Month (default renewal)",
					new StepCreateAccount	("CCCCC", Owner.Country.KR		),			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(rollA							),          // Time advance 2 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired,
					Global.ViolationStatus.No)							                // Verify current sub is the expired without violations
					));

				caselist.Add(new Case("Korea - Three Month (renewal to LO)",
					new StepCreateAccount	("CCCCC", Owner.Country.KR		), 			// Create the account in the 3 mo pre-paid offer
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the 3 mo pre-paid offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case("Korea - Three Month (renewal to PP)",
					new StepCreateAccount	("CCCCC", Owner.Country.KR		), 			// Create the account in the 3 mo pre-paid offer
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the 3 mo pre-paid offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case("Korea - Three Month (renewal to 3M)",
					new StepCreateAccount	("CCCCC", Owner.Country.KR		), 			// Create the account in the 3 mo pre-paid offer
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard,
											 Global.OfferType.ThreeMonthCard),          // Verify current sub is the 3 mo pre-paid offer with 3 mo renewal
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard,
											 Global.OfferType.None)						// Verify current sub is the 3 mo pre-paid offer with no renewal
					));

				caselist.Add(new Case("Korea - Game Trial (default renewal)",
					new StepCreateAccount	("33333", Owner.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
					new StepSetRenewal		(Global.OfferType.LaunchOffer, true),       // Renew the expired sub into the starter kit sub
					new StepSetRenewal		(Global.OfferType.PrepaidCard, false),      // Set the next renewal to be the pre-paid card sub
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer	),          // Verify current sub is the starter-kit offer
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.PrepaidCard	)           // Verify current sub is the pre-paid offer
					));

				caselist.Add(new Case("Korea - Game Trial (renewal to LO)",
					new StepCreateAccount	("33333", Owner.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial     ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Game Trial (renewal to PP)",
					new StepCreateAccount	("33333", Owner.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial     ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Game Trial (renewal to 3M)",
					new StepCreateAccount	("33333", Owner.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial     ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Console Trial (default renewal)",
					new StepCreateAccount	("44444", Owner.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
					new StepSetRenewal		(Global.OfferType.LaunchOffer, true),       // Renew the expired sub into the starter kit sub
					new StepSetRenewal		(Global.OfferType.PrepaidCard, false),      // Set the next renewal to be the pre-paid card sub
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer	),          // Verify current sub is the starter-kit offer
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.PrepaidCard	)           // Verify current sub is the pre-paid offer
					));

				caselist.Add(new Case("Korea - Console Trial (renewal to LO)",
					new StepCreateAccount	("44444", Owner.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial  ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Console Trial (renewal to PP)",
					new StepCreateAccount	("44444", Owner.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial  ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Console Trial (renewal to 3M)",
					new StepCreateAccount	("44444", Owner.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial  ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

			}

			cases = (Case[]) caselist.ToArray(typeof(Case));
		}

		public ScriptAllCountries()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\GetSubscriptionStatus.cs ===
using System;
using ServerTestFramework;
using System.Xml;
using System.Threading;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for GetSubscriptionStatus.
	/// </summary>
	/// 
	public class GetSubscriptionStatus
	{
		LogDelegate log;

		public class Status
		{
			public bool HasViolations;
			public Global.AccountStatus AccountStatus;
		}

		public GetSubscriptionStatus(LogDelegate logger)
		{
			//
			// TODO: Add constructor logic here
			//
			log = logger;
		}

		protected GetSubscriptionStatus()
		{
		}

		public bool GetStatus(ulong userPuid, out Status status)
		{
			return GetStatus(userPuid, false, out status);
		}

		public bool GetStatus(ulong userPuid, bool waitforuodb, out Status status)
		{
			BdkInterface bdk=new BdkInterface();
			UserSubInfo [] subs;
			UserSubInfo cursub;
			status = new Status();

			UodbWS.GetUserSubs(userPuid, out subs, out cursub);

			string ErrorXml;
			string SubscriptionStatusInfoXml;

			bdk.GetSubscriptionStatus(1, 1, 1, 1, cursub.serviceInstanceId, out ErrorXml, out SubscriptionStatusInfoXml);

			XmlDocument doc = new XmlDocument();
			doc.LoadXml(SubscriptionStatusInfoXml);
			XmlNode root = doc.DocumentElement;

			foreach(XmlNode n in root)
			{
				if(n.Name == "SubscriptionStatus")
				{
					switch(n.InnerText.ToLower())
					{
						case "enabled":
							status.AccountStatus = Global.AccountStatus.Enabled;
							break;
						case "expired":
							status.AccountStatus = Global.AccountStatus.Expired;
							break;
						case "canceled":
							status.AccountStatus = Global.AccountStatus.Canceled;
							break;
						case "suspended":
							status.AccountStatus = Global.AccountStatus.Suspended;
							break;
						default:
							throw new System.Exception("Unknown account status was returned from GetSubscriptionStatus: " + n.InnerText);
					};
					continue;
				}
				else if(n.Name == "ViolationSet")
				{
					if(n.ChildNodes.Count > 0)
						status.HasViolations = true;
				}
			}

			if(!waitforuodb)
				return true;

			XRLGetSubscriptionStatus gss = new XRLGetSubscriptionStatus();
			XRLGetSubscriptionStatusDetails [] details;
			XRLGetSubscriptionStatusResponse gssr;

			gss.userPuid = userPuid;
			if(!gss.Execute(out gssr, out details))
			{
				string outputString;
				outputString=gss.GetType().Name;
				outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(gss.XErr)+"  HTTP:"+gss.httpStatus;
				log(outputString);
				return false;
			}

			long curtime = DateTime.Now.Ticks;

			while(gssr.currentOfferStatus != (uint) status.AccountStatus && 
					DateTime.Now.Ticks - curtime < Global.DataVerificationTimeout*1000)
			{
				Thread.Sleep(500);
				if(!gss.Execute(out gssr, out details))
				{
					string outputString;
					outputString=gss.GetType().Name;
					outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(gss.XErr)+"  HTTP:"+gss.httpStatus;
					log(outputString);
					return false;
				}
			}

			if(gssr.currentOfferStatus != (uint) status.AccountStatus)
			{
				if((gssr.currentOfferStatus == 0x80) && (status.AccountStatus == Global.AccountStatus.Expired))
				{
					log("GetSubscriptionStatus XRL returned: EXPIRED_NO_VIOLATIONS,  BDK returned: Expired");
					//TODO - Check for presence of violations from the BDK
				}
				else
				{
					log("Mismatch! GetSubscriptionStatus XRL returned: " + gssr.currentOfferStatus.ToString() + ", BDK returned: " + status.AccountStatus.ToString());
					return false;
				}
			}

			return true;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\ScriptCodePaths.cs ===
using System;
using ServerTestFramework;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptCodePaths.
	/// </summary>
	public class ScriptCodePaths:Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 60 days");
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days");
		TimeRoll roll2		= new TimeRoll("3rd roll - 11.5 months");

		override public TimeRoll []GetRolls()
		{
			return new TimeRoll[] {roll0,roll1, roll2};
		}

		protected override void Initialize()
		{
			// Yearly to others
			Case	c1=new Case("Yearly to monthly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.Monthly599	));

			Case	c2=new Case("Yearly to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.PrepaidCard	),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			Case	c3=new Case("Yearly to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false	));

			// Monthly to others
			Case	c4=new Case("Monthly to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Monthly599	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Yearly4999, true));

			Case	c5=new Case("Monthly to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Monthly599	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, true));

			Case	c6=new Case("Monthly to monthly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Monthly599	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Monthly599, false));

			// Base offers 
			Case	c7=new Case("Base to yearly",
				new StepCreateAccount	("11111"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.Yearly4999	));

			Case	c8=new Case("Base to monthly",
				new StepCreateAccount	("11111"						),
				new StepSetRenewal		(Global.OfferType.Monthly599, false),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.Monthly599	));

			Case	c9=new Case("Base to prepaid",
				new StepCreateAccount	("11111"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			// Console trial offers 
			Case	c10=new Case("Console to yearly",
				new StepCreateAccount	("44444"						),
				new StepVerify			(Global.OfferType.ConsoleTrial	),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	));

			Case	c11=new Case("Console to prepaid",
				new StepCreateAccount	("44444"						),
				new StepVerify			(Global.OfferType.ConsoleTrial	),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			// Game trial offers 
			Case	c12=new Case("Game trial to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	));

			Case	c13=new Case("Game trial to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			// Prepaid offers
			Case	c14=new Case("Prepaid to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false));

			Case	c15=new Case("Prepaid to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false));

			cases=new Case[] {   c1 ,c2 ,c3 ,
							 c4 ,c5 ,c6 ,c7 ,
							 c8 ,c9 ,c10,c11,
							 c12,c13,c14,c15};
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepRandomWait.cs ===
using System;
using System.Threading;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepRandomWait.
	/// </summary>
	public class StepRandomWait : CaseStep
	{
		int WaitMilliseconds;
		public StepRandomWait(int MaxWaitMilliseconds)
		{
			//
			// TODO: Add constructor logic here
			//
			WaitMilliseconds = MaxWaitMilliseconds;
		}

		public override bool Execute()
		{
            Thread.Sleep(WaitMilliseconds);
			return true;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepGetOpenBalance.cs ===
using System;
using ServerTestFramework;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.Xml;
using System.Collections;
using ServerTestFramework.Database;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepGetBalance.
	/// </summary>
	/// 
	
	enum Balance
	{
		AccountActivitySet = 0x10000001
	};

	public class StepGetOpenBalance : CaseStep
	{
		AccountActivityLogDepth logging = AccountActivityLogDepth.None;

		public override bool Execute()
		{
			BdkInterface bdk=new BdkInterface();
			string PaymentInstrumentId;
			string ErrorXml;

			// string AmountCharged;
			UserInfo ui=UodbWS.GetUserInfo(Parent.Puid);
			PaymentInstrumentId=ui.paymentInstrumentId;

			string acctid = ui.billingAccountId;

			bool openFound = false;
			int OpenBillingPeriodId = 0;
			int BillingPeriodCount;
			string BillingPeriodSetXML;
			string AccountActivityXML;

			bdk.GetBillingPeriods(1, 1, 1, 1, acctid, "en-US", out ErrorXml, out BillingPeriodCount, out BillingPeriodSetXML);

			// If we got this far, parse the amount charged XML block
			XmlDocument doc=new XmlDocument();
			doc.LoadXml(BillingPeriodSetXML);
			XmlNode root=doc.DocumentElement;
			foreach(XmlNode n in root.ChildNodes)
			{
				if(n.Name != "BillingPeriod")
					continue;
				openFound = false;
				foreach(XmlNode o in n.ChildNodes)
				{
					if(o.Name == "BillingPeriodId")
						OpenBillingPeriodId = Convert.ToInt32(o.InnerText, 10);
					if(o.Name == "PeriodStatus" && o.InnerText == "OPEN")
						openFound = true;
				}
				if(openFound)
					break;
			}

			if(!openFound)
			{
				Log("FAILED: Expected to find an open billing period!");
				return false;
			}

			bdk.GetAccountActivity(1, 1, 1, 1, acctid, OpenBillingPeriodId, "en-US", true, out ErrorXml, out AccountActivityXML);
			AccountActivity aa = new AccountActivity();

			if(aa.Parse(AccountActivityXML))
			{
				Parent.State[Balance.AccountActivitySet] = aa;
			}

			if(logging != AccountActivityLogDepth.None)
				aa.Log(new LogDelegate(Log), logging);
			
			return true;
		}

		public StepGetOpenBalance(AccountActivityLogDepth LogResults)
		{
			logging = LogResults;
		}

		public StepGetOpenBalance()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\ScriptIntegrationCases.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptCodePaths.
	/// </summary>
	public class ScriptIntegrationCases:Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 60 days");
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days");
		TimeRoll creditverify = new TimeRoll("Verify Credit to *'d");
		TimeRoll roll2		= new TimeRoll("3rd roll - 30 days");
		TimeRoll roll3		= new TimeRoll("4th roll - 30 days");
		TimeRoll creditverify2 = new TimeRoll("Verify Credit to **'d");

		override public TimeRoll []GetRolls()
		{
			return new TimeRoll[] {roll0,roll1, creditverify, roll2, roll3, creditverify2};
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();
			ArrayList defaultAutoRenewMonthlyCountries = new ArrayList();
			defaultAutoRenewMonthlyCountries.Add(Owner.Country.JP);

			string countryname;
			Owner.Country countrycode;
			bool fOnlyExpired = false;
			bool fNoExpired = false;
			bool fOneOnly = false;
			Owner.Country preferred = Owner.Country.US;

			foreach(byte cc in Owner.Countries)
			{
				// Yearly to others
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				if(countrycode == Owner.Country.KR)
					continue;

				if(fOneOnly && (preferred != countrycode))
					continue;

				// 1
				if(!fOnlyExpired)
				{
					// This case verifies the refund of a conversion from MB to PP within the third month
					caselist.Add(new Case("** " + countryname + " - MB to PP 2.5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepWaitForRoll		(creditverify2					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from YB to PP within the third month
					caselist.Add(new Case("** " + countryname + " - YB to PP 2.5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepWaitForRoll		(creditverify2					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from MB to LO within the third month
					caselist.Add(new Case("** " + countryname + " - MB to LO 2.5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepWaitForRoll		(creditverify2					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from YB to LO within the third month
					caselist.Add(new Case("** " + countryname + " - YB to LO 2.5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepWaitForRoll		(creditverify2					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from MB to 3M within the third month
					caselist.Add(new Case("** " + countryname + " - MB to 3M 2.5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepWaitForRoll		(creditverify2					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from YB to 3M within the third month
					caselist.Add(new Case("** " + countryname + " - YB to 3M 2.5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepWaitForRoll		(creditverify2					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the conversion from MB to PP at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to PP 0 Months In", true, 
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from MB to LO at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to LO 0 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from MB to 3M at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to 3M 0 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from YB to PP at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to PP 0 Months In", true, 
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from YB to LO at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to LO 0 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from YB to 3M at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to 3M 0 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the refund of a conversion from MB to PP within the first month
					caselist.Add(new Case("* " + countryname + " - MB to PP .5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepWaitForRoll		(creditverify					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from MB to LO within the first month
					caselist.Add(new Case("* " + countryname + " - MB to LO .5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepWaitForRoll		(creditverify					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from MB to 3M within the first month
					caselist.Add(new Case("* " + countryname + " - MB to 3M .5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepWaitForRoll		(creditverify					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from YB to PP within the first month
					caselist.Add(new Case("* " + countryname + " - YB to PP .5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepWaitForRoll		(creditverify					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from YB to LO within the first month
					caselist.Add(new Case("* " + countryname + " - YB to LO .5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepWaitForRoll		(creditverify					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the refund of a conversion from YB to 3M within the first month
					caselist.Add(new Case("* " + countryname + " - YB to 3M .5 Months In", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepGetOpenBalance	(AccountActivityLogDepth.Summary),
						new StepWaitForRoll		(creditverify					),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No)
						));

					// This case verifies the conversion from MB to PP at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to PP NotSettled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from MB to LO at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to LO NotSettled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from MB to 3M at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to 3M NotSettled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies the conversion from YB to PP at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to PP NotSettled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from YB to LO at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to LO NotSettled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from YB to 3M at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to 3M NotSettled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard	)
						));

					// This case tests that the grace period on the monthly offer is 30 days
					caselist.Add(new Case(countryname + " - MB Canceled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
						));

					// This case tests that the grace period on the yearly offer is 60 days
					caselist.Add(new Case(countryname + " - YB Canceled", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
						));

					// This case tests that the 12 month pre-paid offer is set to autorenew correctly
					caselist.Add(new Case(countryname + " - PP to autorenew", true,
						new StepCreateAccount	("22222", countrycode			),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case tests that the starter kit offer is set to autorenew correctly
					caselist.Add(new Case(countryname + " - LO to autorenew", true,
						new StepCreateAccount	("11111", countrycode			),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case tests that the three-month offer is set to autorenew correctly
					caselist.Add(new Case(countryname + " - 3M to autorenew", true,
						new StepCreateAccount	("CCCCC", countrycode			),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case tests that the yearly offer can be set to renew into the billed offer other than it's autorenew offer
					caselist.Add(new Case(countryname + " - YB to non-autorenew", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.Yearly4999,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
						));

					// This test verifies that the game trial can renew into the 12 month pre-paid offer
					caselist.Add(new Case(countryname + " - GT to PP Normal", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the game trial can renew into the 12 month pre-paid offer
					caselist.Add(new Case(countryname + " - CT to PP Normal", true,
						new StepCreateAccount	("44444", countrycode			),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the game trial can renew into the starter kit offer
					caselist.Add(new Case(countryname + " - GT to LO Normal", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the game trial can renew into the starter kit offer
					caselist.Add(new Case(countryname + " - CT to LO Normal", true,
						new StepCreateAccount	("44444", countrycode			),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the game trial can renew into the 3 month pre-paid offer
					caselist.Add(new Case(countryname + " - GT to 3M Normal", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the game trial can renew into the 3 month pre-paid offer
					caselist.Add(new Case(countryname + " - CT to 3M Normal", true,
						new StepCreateAccount	("44444", countrycode			),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll2							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the 12 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - MB to PP Suspended", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the starter-kit offer when suspended
					caselist.Add(new Case(countryname + " - MB to LO Suspended", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the 3 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - MB to 3M Suspended", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 12 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - YB to PP Suspended", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the starter-kit offer when suspended
					caselist.Add(new Case(countryname + " - YB to LO Suspended", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 3-month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - YB to 3M Suspended", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test validates that we have a 0 balance when we've converted while in declines
					// but before a violation was added
					caselist.Add(new Case(countryname + " - MB to PP Violations Convert with Zero Balance", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal      (Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(3, false						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepVerify			(Global.OfferType.PrepaidCard   ),
						new StepGetOpenBalance	(AccountActivityLogDepth.LineItems)
						));
				}

				if(!fNoExpired)
				{

					// This test verifies that the monthly offer can be converted into the 12 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - MB to PP Expired", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the starter-kit offer when expired
					caselist.Add(new Case(countryname + " - MB to LO Expired", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the 3 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - MB to 3M Expired", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//							new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//							new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 12 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - YB to PP Expired", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.PrepaidCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the starter-kit offer when expired
					caselist.Add(new Case(countryname + " - YB to LO Expired", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.LaunchOffer,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 3 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - YB to 3M Expired", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//							new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//							new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						StepSetRenewal.ExpectConvert.No),
						new StepSetRenewal		(
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.ThreeMonthCard,
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));
				}

				if(!fOnlyExpired)
				{
					// This test verifies that the monthly offer converts to yearly
					caselist.Add(new Case(countryname + " - MB to YB Normal", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.Yearly4999, 
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999, 
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer doesn't convert to monthly (from the client)
					caselist.Add(new Case(countryname + " - YB to MB Normal", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepVerify			(Global.OfferType.Yearly4999, Global.OfferType.Monthly599),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999, Global.OfferType.Monthly599)
						));

					// This test verifies that renewing to monthly from monthly fails
					caselist.Add(new Case(countryname + " - MB to MB Normal", true,
						new StepCreateAccount	("33333", countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	)
						));

					// TODO - add a case to make sure that CSR can convert yearly to monthly
				}
			}

			// Special cases for Korea... shouldn't be possible to get billing violtions
			if(!fOneOnly || (fOneOnly && (preferred == Owner.Country.KR)))
			{
				countrycode = Owner.Country.KR;
				countryname = ((Owner.Country) countrycode).ToString();

				// This case verifies that Korean 12 month pre-paid can renew into itself
				caselist.Add(new Case(countryname + " - PP to PP Normal", true,
					new StepCreateAccount	("22222", countrycode			),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.No),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.PrepaidCard)
					));

				// This case verifies that Korean starter-kit can renew into the 12 month pre-paid
				caselist.Add(new Case(countryname + " - LO to PP Normal", true,
					new StepCreateAccount	("11111", countrycode			),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.No),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.PrepaidCard)
					));

				// This case verifies that Korean 3 month pre-paid can renew into the 12 month pre-paid
				caselist.Add(new Case(countryname + " - 3M to PP Normal", true,
					new StepCreateAccount	("CCCCC", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.PrepaidCard),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.PrepaidCard),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the 12 month pre-paid
				caselist.Add(new Case(countryname + " - GT to PP Normal", true,
					new StepCreateAccount	("33333", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the 12 month pre-paid
				caselist.Add(new Case(countryname + " - CT to PP Normal", true,
					new StepCreateAccount	("44444", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None)
					));

				// This case verifies that Korean 12 month pre-paid can renew into the starter-kit
				caselist.Add(new Case(countryname + " - PP to LO Normal", true,
					new StepCreateAccount	("22222", countrycode			),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.No),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.LaunchOffer)
					));

				// This case verifies that Korean starter-kit can renew into itself
				caselist.Add(new Case(countryname + " - LO to LO Normal", true,
					new StepCreateAccount	("11111", countrycode			),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.No),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.LaunchOffer)
					));

				// This case verifies that Korean 3 month pre-paid can renew into the starter kit
				caselist.Add(new Case(countryname + " - 3M to LO Normal", true,
					new StepCreateAccount	("CCCCC", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.LaunchOffer),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.LaunchOffer),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the starter-kit
				caselist.Add(new Case(countryname + " - GT to LO Normal", true,
					new StepCreateAccount	("33333", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the starter-kit
				caselist.Add(new Case(countryname + " - CT to LO Normal", true,
					new StepCreateAccount	("44444", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None)
					));


				// This case verifies that Korean 12 month pre-paid can renew into 3 month pre-paid
				caselist.Add(new Case(countryname + " - PP to 3M Normal", true,
					new StepCreateAccount	("22222", countrycode			),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.No),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.ThreeMonthCard)
					));

				// This case verifies that Korean starter-kit can renew into the 3 month pre-paid
				caselist.Add(new Case(countryname + " - LO to 3M Normal", true,
					new StepCreateAccount	("11111", countrycode			),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.No),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.ThreeMonthCard)
					));

				// This case verifies that Korean 3 month pre-paid can renew into itself
				caselist.Add(new Case(countryname + " - 3M to 3M Normal", true,
					new StepCreateAccount	("CCCCC", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.ThreeMonthCard),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.ThreeMonthCard),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the 3 month pre-paid
				caselist.Add(new Case(countryname + " - GT to 3M Normal", true,
					new StepCreateAccount	("33333", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the 3 month pre-paid
				caselist.Add(new Case(countryname + " - CT to 3M Normal", true,
					new StepCreateAccount	("44444", countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Failure),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the 12 month pre-paid when expired but in the grace period
				caselist.Add(new Case(countryname + " - GT to PP during grace period", true,
					new StepCreateAccount	("33333", countrycode			),
					new StepWaitForRoll		(roll0							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepWaitForRoll		(roll1							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None)
					));

				// This case verifies that Korean console-trial can renew into the 12 month pre-paid when expired but in the grace period
				caselist.Add(new Case(countryname + " - CT to PP during grace period", true,
					new StepCreateAccount	("44444", countrycode			),
					new StepWaitForRoll		(roll0							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepWaitForRoll		(roll1							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the starter kit when expired but in the grace period
				caselist.Add(new Case(countryname + " - GT to LO during grace period", true,
					new StepCreateAccount	("33333", countrycode			),
					new StepWaitForRoll		(roll0							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepWaitForRoll		(roll1							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None)
					));

				// This case verifies that Korean console-trial can renew into the starter kit when expired but in the grace period
				caselist.Add(new Case(countryname + " - CT to LO during grace period", true,
					new StepCreateAccount	("44444", countrycode			),
					new StepWaitForRoll		(roll0							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepWaitForRoll		(roll1							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None)
					));

				// This case verifies that Korean game-trial can renew into the 3 month pre-paid when expired but in the grace period
				caselist.Add(new Case(countryname + " - GT to 3M during grace period", true,
					new StepCreateAccount	("33333", countrycode			),
					new StepWaitForRoll		(roll0							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepWaitForRoll		(roll1							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None)
					));

				// This case verifies that Korean console-trial can renew into the 3 month pre-paid when expired but in the grace period
				caselist.Add(new Case(countryname + " - CT to 3M during grace period", true,
					new StepCreateAccount	("44444", countrycode			),
					new StepWaitForRoll		(roll0							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepWaitForRoll		(roll1							),
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepWaitForRoll		(roll2							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None)
					));
			}

			cases = (Case[]) caselist.ToArray(typeof(Case));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepCloseBalance.cs ===
using System;
using ServerTestFramework;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.Xml;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Database;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepCloseBalance.
	/// </summary>
	public class StepCloseBalance : CaseStep
	{
		public override bool Execute()
		{
			BdkInterface bdk=new BdkInterface();
			string PaymentInstrumentId;
			string ErrorXml;
			string AmountCharged;
			UserInfo ui=UodbWS.GetUserInfo(Parent.Puid);
			PaymentInstrumentId=ui.paymentInstrumentId;

			Log("StepCloseBalance: Running CloseBalance on " + ui.paymentInstrumentId);

			bdk.CloseBalance(1,
				1,
				Guid.NewGuid().ToString(), 
				PaymentInstrumentId, 
				"", 
				out ErrorXml, 
				out AmountCharged);

			XmlDocument doc=new XmlDocument();
			doc.LoadXml(ErrorXml);
			XmlElement root=doc.DocumentElement;
			XmlNode node=root.SelectSingleNode(@"ErrorHResult");

			// make sure we didn't get an error back
			if("0x0" != node.InnerText)
			{
				Log("CloseBalance returned unexpected error code: " + node.InnerText + " for PI: " + PaymentInstrumentId);
				return false;
			}

			Log("Closed balance on PI " + PaymentInstrumentId);

			// TODO - verify the ready balance if one was specified
			return true;
		}


		public StepCloseBalance()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepCancelSubscription.cs ===
using System;
using ServerTestFramework;
using System.Diagnostics;
using System.Threading;
using System.Xml;
using ServerTestFramework.Database;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepCancelSubscription.
	/// </summary>
	public class StepCancelSubscription : CaseStep
	{

		bool VerifyUODBStateChange = false;

		public override bool Execute()
		{
			BdkInterface bdk=new BdkInterface();
			UserSubInfo [] subs;
			UserSubInfo cursub;
			string ErrorXml;
			string AmountCharged;
			string SubStatusInfo;
			int RemovedServiceInstanceCount;
			string RemovedServiceInstanceSetXML;
			string subscriptionID = null;

			GetSubscriptionStatus substat = new GetSubscriptionStatus(new LogDelegate(Log));
			GetSubscriptionStatus.Status acctstatusold = new GetSubscriptionStatus.Status();
			// This is done specifically in this order to do the function call first so that we know uodb is up to date
			// for the call to getusersubs
			if(!substat.GetStatus(Parent.Puid, out acctstatusold) && VerifyUODBStateChange)
			{
				Log("Failed to retrieve the current account status!");
				return false;
			}

			UodbWS.GetUserSubs(Parent.Puid, out subs, out cursub);
			UserInfo ui=UodbWS.GetUserInfo(Parent.Puid);

			// We now have to hack the service instance ID to be the default subscription ID
			// This winds up just being the service instance ID with the 12th character switched from B to A
			subscriptionID = String.Copy(cursub.serviceInstanceId);
			subscriptionID = subscriptionID.Remove(11, 1);
			subscriptionID = subscriptionID.Insert(11, "A");

			Log("StepCancelSubscription: Running CancelSubscription on " + subscriptionID);

			bdk.CancelSubscription(1,
				1,
				1,
				1,
				Guid.NewGuid().ToString(),
				false,
				subscriptionID, 
				"",
				"<CommentInfo xmlns=\"urn:schemas-microsoft-com:billing-data\"><CommentCode>1234</CommentCode><CommentText>Blah</CommentText></CommentInfo>", 
				out ErrorXml, 
				out AmountCharged,
				out SubStatusInfo,
				out RemovedServiceInstanceCount, // TODO - make sure this is actually the subscription we want
				out RemovedServiceInstanceSetXML);

			XmlDocument doc=new XmlDocument();
			doc.LoadXml(ErrorXml);
			XmlElement root=doc.DocumentElement;
			XmlNode node=root.SelectSingleNode(@"ErrorHResult");

			// make sure we didn't get an error back
			if("0x0" != node.InnerText)
			{
				Log("CancelSubscription returned unexpected error code: " + node.InnerText + " for sub: " + subscriptionID);
				return false;
			}

			if(1 != RemovedServiceInstanceCount)
			{
				Log("CancelSubscription didn't actually cancel: " + subscriptionID);
				return false;
			}

			if(!VerifyUODBStateChange)
			{
				Log("Cancelled subscription on sub " + subscriptionID);
				return true;
			}

			GetSubscriptionStatus.Status newstatus;
			if(!substat.GetStatus(Parent.Puid, true, out newstatus))
			{
				Log("Failed to retrieve the updated account status!");
				return false;
			}

			if(newstatus.AccountStatus == acctstatusold.AccountStatus)
			{
				Log("No change from state " + acctstatusold.AccountStatus.ToString());
				return false;
			}

			Log("Cancelled subscription on sub " + subscriptionID);
			return true;
		}

		public StepCancelSubscription(bool VerifyStateChange)
		{
			VerifyUODBStateChange = VerifyStateChange;
			//
			// TODO: Add constructor logic here
			//
		}
		public StepCancelSubscription()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\ScriptVerifySPSConn.cs ===
using System;
using System.Collections;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptVerifySPSConn.
	/// </summary>
	public class ScriptVerifySPSConn : Script
	{
		TimeRoll tr = new TimeRoll("Add violations");

		override public TimeRoll [] GetRolls()
		{
			return new TimeRoll[] {tr};
		}

		protected override void Initialize()
		{
			ArrayList al = new ArrayList();

			for(int i = 0; i < 1; ++i)
			{
				al.Add(new Case("StepGetOpenBalance",
					new StepCreateAccount   ("11111"						),
					new StepUpdatePaymentInstrument(						),
					new StepGetOpenBalance	(AccountActivityLogDepth.LineItems),
					new StepWaitForRoll		(tr								)
					));
			}
			cases = (Case[]) al.ToArray(typeof(Case));
		}
		
		public ScriptVerifySPSConn()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\ScriptVerifyThreading.cs ===
using System;
using System.Collections;
namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptVerifyThreading.
	/// </summary>
	public class ScriptVerifyThreading : Script
	{
		TimeRoll [] rolls = new TimeRoll[] {new TimeRoll("Roll 1"), new TimeRoll("Roll 2"), new TimeRoll("Roll 3"), new TimeRoll("Roll 4"), new TimeRoll("Roll 5"), new TimeRoll("Roll 6"), new TimeRoll("Roll 7"), new TimeRoll("Roll 8"), new TimeRoll("Roll 9"), new TimeRoll("Roll 10")};

		override public TimeRoll []GetRolls()
		{
			return rolls;
		}

		protected override void Initialize()
		{
			System.Random r = new Random();

			ArrayList c = new ArrayList();

			for(int i = 0; i < 1000; ++i)
			{
				ArrayList al = new ArrayList();
				al.Add(new StepRandomWait(r.Next(10000)));
				for(int j = 0; j < rolls.Length; ++j)
				{
					if(r.Next(100) < 95)
					{
						al.Add(new StepWaitForRoll(rolls[j]));
						al.Add(new StepRandomWait(r.Next(10000)));
					}
				}
				c.Add(new Case("Case " + i.ToString(), (CaseStep[]) al.ToArray(typeof(CaseStep))));
			}
			cases = (Case[]) c.ToArray(typeof(Case));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepCreateAccount.cs ===
using System;
using System.Diagnostics;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Database;


namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepCreateAccount.
	/// </summary>
	public class StepCreateAccount : CaseStep
	{
		public string Voucher;
		public Owner.Country CountryCode=Owner.Country.US; 

		public override bool Execute()
		{
			// some puid

			ulong puid=0;
			UacsCommon UACS=new UacsCommon();
			Owner o=UACS.GenerateOwner(CountryCode);
			do
			{
				o.email = CountryCode.ToString() + "_XboxRenewalTesting@xboxlive.com";
				o.gamertag="auto"+UACS.Random.GenerateRandomNameString(10);
				o.firstName=o.gamertag;
				o.lastName=Voucher.Substring(1,5);
				o.activationCode=Voucher;
				o.cardExpiration=new DateTime(2066,6,6);
				Parent.Log(Header+" creating "+CountryCode+" account "+o.gamertag);
				puid=o.Create();
				if (puid==0)
				{
					string outputString;
					outputString=o.GetType().Name;
					outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(o.XErr)+"  HTTP:"+o.httpStatus;
					Log(outputString);
					continue;
				}
				if (UodbWS.IsUserQueued(puid))
				{
					Parent.Log(Header+" user is queued!");
					System.Threading.Thread.Sleep(250);
					puid = 0;
					continue;
				}
			} while (puid==0);
			Parent.Puid=puid;

			Parent.Log(Header+" created account "+o.gamertag+", puid "+Parent.Puid);
			return true;
		}

		public StepCreateAccount(string voucher):this(voucher, Owner.Country.US)
		{
		}

		public StepCreateAccount(string voucher, Owner.Country countryCode)
		{
			Debug.Assert(voucher.Length==5);
			Debug.Assert((voucher[0]>='0' && voucher[0]<='9') || (voucher[0]>='A' && voucher[0]<='C'));
			Voucher=voucher+voucher+voucher+voucher+voucher;
			CountryCode=countryCode;
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepSettleBalance.cs ===
using System;
using ServerTestFramework;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.Xml;
using ServerTestFramework.Database;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepSettleBalance.
	/// </summary>
	public class StepSettleBalance : CaseStep
	{
		double expectedAmount=0;
		bool checkBalance = false;

		public override bool Execute()
		{
			BdkInterface bdk=new BdkInterface();
			string PaymentInstrumentId;
			string ErrorXml;
			string AmountCharged;
			UserInfo ui=UodbWS.GetUserInfo(Parent.Puid);
			PaymentInstrumentId=ui.paymentInstrumentId;

			Log("StepSettleBalance: Running SettleBalance on " + ui.paymentInstrumentId);
			bdk.SettleBalance(1,1,Guid.NewGuid().ToString(),PaymentInstrumentId,out ErrorXml, out AmountCharged);

			// If we got this far, parse the amount charged XML block
			XmlDocument doc=new XmlDocument();
			doc.LoadXml(AmountCharged);
			XmlElement root=doc.DocumentElement;
			XmlNode node=root.SelectSingleNode(@"Gross");
			double charged=Convert.ToDouble(node.InnerText);

			// And compare it against the expected amount
			Log("SettleBalance: amount charged = "+charged);
			if (charged!=expectedAmount && checkBalance)
			{
				Log("FAILED: Expected to be charged "+expectedAmount);
				return false;
			}

			return true;
		}

		public StepSettleBalance()
		{
		}

		public StepSettleBalance(double expected)
		{
			expectedAmount=expected;
			checkBalance = true;
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepStopPayment.cs ===
using System;
using ServerTestFramework;
using System.Diagnostics;
using System.Threading;
using ServerTestFramework.Database;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepStopPayment.
	/// </summary>
	public class StepStopPayment : CaseStep
	{
		int count = 1;
		bool waitforchange = false;
		public override bool Execute()
		{
			BdkInterface bdk=new BdkInterface();
			string PaymentInstrumentId;
			string ErrorXml;
			UserInfo ui=UodbWS.GetUserInfo(Parent.Puid);

			GetSubscriptionStatus.Status acctstatusold = new GetSubscriptionStatus.Status();
			GetSubscriptionStatus substat = new GetSubscriptionStatus(new LogDelegate(Log));

			Log("StepStopPayment: Running StopPayment " + count.ToString() + " times on " + ui.paymentInstrumentId);
			if(waitforchange && !substat.GetStatus(Parent.Puid, out acctstatusold))
			{
				Log("Failed to retrieve the current account status!");
				return false;
			}

			PaymentInstrumentId=ui.paymentInstrumentId;

			for (int i=0; i<count; i++)
			{
				Log("Stopping payment");
				bdk.StopPayments(	1,
					1,
					PaymentInstrumentId,
					out ErrorXml);
				Thread.Sleep(1000);
			}

			if(!waitforchange)
				return true;

			GetSubscriptionStatus.Status newstatus;
			if(!substat.GetStatus(Parent.Puid, true, out newstatus))
			{
				Log("Failed to retrieve the updated account status!");
				return false;
			}

			if(newstatus.AccountStatus == acctstatusold.AccountStatus && newstatus.HasViolations == acctstatusold.HasViolations)
			{
				Log("No change from state " + acctstatusold.AccountStatus.ToString() + ((acctstatusold.HasViolations) ? " with violations." : " without violations."));
				return false;
			}

			return true;
		}

		public StepStopPayment(int Count)
		{
			count=Count;
			Debug.Assert(Count>0);
		}

		public StepStopPayment(int Count, bool WaitForStatusChange)
		{
			count=Count;
			waitforchange = WaitForStatusChange;
			Debug.Assert(Count>0);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepSetRenewal.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepSetRenewal.
	/// </summary>
	public class StepSetRenewal : CaseStep
	{
		public enum ExpectConvert {Yes, No, DontCare, Failure};
		ExpectConvert	expectConvert;
		Global.OfferType Offer;
		public override bool Execute()
		{
			// Gather data prior to the renewal so that we know if the renewal was 
			// a convert or a renew
			XRLGetSubscriptionStatusDetails []details;
			XRLGetSubscriptionStatusResponse response;
			XRLGetSubscriptionStatusResponse responseNew;
			XRLGetSubscriptionStatus gss=new XRLGetSubscriptionStatus();
			gss.userPuid=Parent.Puid;
			gss.Execute(out response, out details);

			Parent.Log(Header+" setting renewal to "+Offer+", expecting a "+GetExpectingString());
			
			XRLRenewSubscription renew=new XRLRenewSubscription();
			renew.userPUID=Parent.Puid;
			renew.offerId=(ulong) Offer;
			renew.voucher=Global.GetVoucherFromOffer(Offer);
			
			int attempt=3;
			bool b;
			do
			{
				// Try a couple of times before giving up. UACS could just be having a bad day
				b=renew.Execute();
			} while(--attempt!=0 && b==false);
			
			// If I fail and I'm not expecting a failure then dump, if I succeed and I'm expecting a failure then dump.
			if (expectConvert==ExpectConvert.Failure)
			{
				if (b)
				{
					gss.Execute(out responseNew, out details);
					Log("We expected a failure, but set renewal passed!");
					Log("Old offer: " + response.currentOfferId.ToString("X8") + 
						" Requested offer (" + Offer.ToString() + "): " + ((ulong) Offer).ToString("X8") +
						" New Offer: " + responseNew.currentOfferId.ToString("X8"));
					return false;
				}
				return true;
			}
			if(!b && expectConvert != ExpectConvert.Failure)
			{
				Log("Renew failed with XErr:"+ServerTestFramework.Global.XErrToString(renew.XErr)+"  HTTP:"+renew.httpStatus);
				return false;
			}

			if (expectConvert != ExpectConvert.DontCare)
			{
				gss.Execute(out responseNew, out details);

				if (response.startDate==responseNew.startDate &&
					response.endDate==responseNew.endDate &&
					response.currentOfferId==responseNew.currentOfferId)
				{
					// this was a renew
					if (expectConvert==ExpectConvert.Yes)
					{
						Log("Renew passed, but we expected a CONVERT and we got a RENEW");
						Log("Old offer: " + response.currentOfferId.ToString("X8") + 
							" Requested offer (" + Offer.ToString() + "): " + ((ulong) Offer).ToString("X8") +
							" New Offer: " + responseNew.currentOfferId.ToString("X8"));
						return false;
					}
				}
				else			
				{
					// this was a convert
					if (responseNew.currentOfferId!=(ulong) Offer)
					{
						//This should never happen
						Log("WARNING: We detected a convert (or so we thought), but the currentOfferId does not match... hmmm");
						Log("Old offer: " + response.currentOfferId.ToString("X8") + 
							" Requested offer (" + Offer.ToString() + "): " + ((ulong) Offer).ToString("X8") +
							" New Offer: " + responseNew.currentOfferId.ToString("X8"));
					}

					if (expectConvert==ExpectConvert.No)
					{
						Log("Renew passed, but we expected a RENEW and we got a CONVERT");
						Log("Old offer: " + response.currentOfferId.ToString("X8") + 
							" Requested offer (" + Offer.ToString() + "): " + ((ulong) Offer).ToString("X8") +
							" New Offer: " + responseNew.currentOfferId.ToString("X8"));
						return false;
					}
				}
			}
			return true;
		}

		string GetExpectingString()
		{
			switch (expectConvert)
			{
				case ExpectConvert.DontCare:
					return "pass (don't care which)";
				case ExpectConvert.Failure:
					return "failure";
				case ExpectConvert.No:
					return "renewal";
				case ExpectConvert.Yes:
					return "convert";
				default:
					return "unknown";
			}
		}
 
		public StepSetRenewal(Global.OfferType offer ):this(offer, ExpectConvert.DontCare)
		{}

		public StepSetRenewal(Global.OfferType offer, bool expectConvert ):this(offer)
		{
			if (expectConvert)
				this.expectConvert=ExpectConvert.Yes;
			else
				this.expectConvert=ExpectConvert.No;
		}


		public StepSetRenewal(Global.OfferType offer, ExpectConvert expectConvert )
		{
			this.expectConvert=expectConvert;
			Offer=offer;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepReinstateSubscription.cs ===
using System;
using ServerTestFramework;
using System.Diagnostics;
using System.Threading;
using ServerTestFramework.Database;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepReinstateSubscription.
	/// </summary>
	public class StepReinstateSubscription : CaseStep
	{
		bool WaitForChange = true;

		public override bool Execute()
		{
			BdkInterface bdk=new BdkInterface();
			UserSubInfo cursub;
			UserSubInfo [] subs;
			string ErrorXml;
			string AmountCharged;
			string SubStatusInfo;

			GetSubscriptionStatus substat = new GetSubscriptionStatus(new LogDelegate(Log));
			GetSubscriptionStatus.Status acctstatusold = new GetSubscriptionStatus.Status();
			// This is done specifically in this order to do the function call first so that we know uodb is up to date
			// for the call to getusersubs
			if(!substat.GetStatus(Parent.Puid, out acctstatusold) && WaitForChange)
			{
				Log("Failed to retrieve the current account status!");
				return false;
			}

			UodbWS.GetUserSubs(Parent.Puid, out subs, out cursub);
			UserInfo ui = UodbWS.GetUserInfo(Parent.Puid);

			Log("StepReinstateSubscription: Running ReinstateSubscription on " + cursub.serviceInstanceId);

			bdk.ReinstateSubscription(1,
				1,
				1,
				1,
				cursub.serviceInstanceId,
				0,
				"<CommentInfo xmlns=\"urn:schemas-microsoft-com:billing-data\"><CommentCode>12345678</CommentCode><CommentText>Xbox Renewal Test Case</CommentText></CommentInfo>", 
				out ErrorXml, 
				out AmountCharged,
				out SubStatusInfo);

			if(!WaitForChange)
				return true;

			GetSubscriptionStatus.Status newstatus;
			if(!substat.GetStatus(Parent.Puid, true, out newstatus))
			{
				Log("Failed to retrieve the updated account status!");
				return false;
			}

			if(newstatus.AccountStatus == acctstatusold.AccountStatus)
			{
				Log("No change from state " + acctstatusold.AccountStatus.ToString());
				return false;
			}

			return true;
		}


		public StepReinstateSubscription()
		{
			//
			// TODO: Add constructor logic here
			//
		}
		public StepReinstateSubscription(bool WaitForStateChange)
		{
			WaitForChange = WaitForStateChange;
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepVerifyAccountStatus.cs ===
using System;
using ServerTestFramework;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepVerifyAccountStatus.
	/// </summary>
	public class StepVerifyAccountStatus : CaseStep
	{
		Global.AccountStatus acctstatus;
		Global.ViolationStatus violationstatus = Global.ViolationStatus.DontCare;

		public StepVerifyAccountStatus(Global.AccountStatus status)
		{
			acctstatus = status;
		}

		public StepVerifyAccountStatus(Global.AccountStatus status, Global.ViolationStatus ExpectAccountViolations)
		{
			acctstatus = status;
			violationstatus = ExpectAccountViolations;
		}

		public override bool Execute()
		{
			GetSubscriptionStatus gss = new GetSubscriptionStatus(new LogDelegate(Log));
			GetSubscriptionStatus.Status status;
			string logline = "StepVerifyAccountStatus: Verifying account is " + acctstatus.ToString();

			switch(violationstatus)
			{
				case Global.ViolationStatus.No:
					logline += " with no violations.";
					break;
				case Global.ViolationStatus.Yes:
					logline += " with violations.";
					break;
				case Global.ViolationStatus.DontCare:
					logline += " ignoring violations.";
					break;
			};
			Log(logline);

			if(!gss.GetStatus(Parent.Puid, true, out status))
			{
				Log("Retrieving the account status failed!");
				return false;
			}
			if(status.AccountStatus != acctstatus)
			{
				Log("Mismatch! Account status: " + status.AccountStatus.ToString() + " Expected status: " + acctstatus.ToString());
				return false;
			}
			if(violationstatus != Global.ViolationStatus.DontCare &&
				((violationstatus == Global.ViolationStatus.Yes && !status.HasViolations) ||
				(violationstatus == Global.ViolationStatus.No && status.HasViolations)))
			{
				Log("Mismatch! Account " + ((status.HasViolations) ? " has " : " doesn't have ") + " violations.  Expected otherwise.");
				return false;
			}

			return true;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepUpdatePaymentInstrument.cs ===
using System;
using ServerTestFramework;
using System.Threading;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Database;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepUpdatePaymentInstrument.
	/// </summary>
	public class StepUpdatePaymentInstrument : CaseStep
	{
		bool WaitForChange = false;

		public override bool Execute()
		{
			XRLGetPaymentInfo gpi = new XRLGetPaymentInfo();
			XRLGetPaymentInfoResponse gpir;
			gpi.userPuid = Parent.Puid;

			UserInfo ui=UodbWS.GetUserInfo(Parent.Puid);

			GetSubscriptionStatus substat = new GetSubscriptionStatus(new LogDelegate(Log));
			GetSubscriptionStatus.Status acctstatusold = new GetSubscriptionStatus.Status();

			Log("StepUpdatePaymentInstrument: Running Update for payment instrument " + ui.paymentInstrumentId);

			if(WaitForChange && !substat.GetStatus(Parent.Puid, out acctstatusold))
			{
				Log("Failed to retrieve the current account status!");
				return false;
			}

			if(!gpi.Execute(out gpir))
			{
				Log("Failed to retrieve the payment instrument information for this user.");
				return false;
			}

			XRLSetPaymentInfo spi = new XRLSetPaymentInfo();
			spi.GetFrom(Parent.Puid, gpir);
			// Update the expiry date on the credit card to one month forward.
			spi.cardExpiration = spi.cardExpiration.AddYears(1);
			if(!spi.Execute())
			{
				Log("Failed to update the payment instrument information for this user.");
				string outputString;
				outputString=spi.GetType().Name;
				outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(spi.XErr)+"  HTTP:"+spi.httpStatus;
				Log(outputString);
				return false;
			}
			if(!WaitForChange)
				return true;

			long curtime = DateTime.Now.Ticks;

			// Wait for up to two minutes to to ensure the value changes.
			GetSubscriptionStatus.Status newstatus;
			if(!substat.GetStatus(Parent.Puid, true, out newstatus))
			{
				Log("Failed to retrieve the updated account status!");
				return false;
			}

			if(newstatus.AccountStatus == acctstatusold.AccountStatus && newstatus.HasViolations == acctstatusold.HasViolations)
			{
				Log("No change from state " + acctstatusold.AccountStatus.ToString() + ((acctstatusold.HasViolations) ? " with violations." : " without violations."));
				return false;
			}

			return true;
		}

		public StepUpdatePaymentInstrument()
		{
			//
			// TODO: Add constructor logic here
			//
		}
		public StepUpdatePaymentInstrument(bool WaitForStateChange)
		{
			WaitForChange = WaitForStateChange;
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\TimeRoll.cs ===
using System;
using System.Runtime;
using System.Threading;
using System.Collections;
using ServerTestFramework;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for TimeRoll.
	/// </summary>
	public class TimeRoll : ThreadBase
	{
		public uint MAX_THREADS = 8;
		public uint MAX_BLOCK = 2;

		public void ReleaseWaiting()
		{
			Go();
		}

		protected override void ThreadBody()
		{
			queued.Set();
			ArrayList tl = new ArrayList();		// For the array of wait objects for the threads
			ArrayList al = new ArrayList();		// For the array of active threads currently running (to track which to replace when done, etc)
			uint count = 0;
			uint running = 0;
			int pos = 0;
			foreach(ActiveThreads at in SyncObjects)
			{
				count += at.GetConfigured();
			}

			while(count > 0)
			{
				for(int i = 0; i < al.Count;)
				{
					ActiveThreads at = (ActiveThreads) al[i];
					if(at.GetActive() == 0)
					{
						al.RemoveAt(i);
						tl.RemoveAt(i);
						running -= at.GetConfigured();
						count -= at.GetConfigured();
						continue;
					}
					++i;
				}
				bool fDone = false;
				while(!fDone && pos < SyncObjects.Count)
				{
					for(; pos < SyncObjects.Count; ++pos)
					{
						ActiveThreads at = ((ActiveThreads) SyncObjects[pos]);
						if(at.GetConfigured() > MAX_THREADS - running)
						{
							fDone = true;
							break;
						}
						al.Add(at);
						tl.Add(at.AllThreadsComplete);
						at.ActivateThreads();
						running += at.GetConfigured();
					}
				}
				if(tl.Count > 0)
				{
					System.Threading.ManualResetEvent.WaitAny((WaitHandle []) tl.ToArray(typeof(WaitHandle)));
				}
			}
		}

		public void WaitOnQueue()
		{
			queued.WaitOne();
		}

		public ActiveThreads AddWaiter()
		{
			if(SyncObjects.Count == 0)
			{
				ActiveThreads at = new ActiveThreads(this.Name);
				SyncObjects.Add(at);
				return at;
			}

			ActiveThreads last = (ActiveThreads) SyncObjects[SyncObjects.Count - 1];
			if(last.GetConfigured() == MAX_BLOCK)
			{
				ActiveThreads at = new ActiveThreads(this.Name);
				SyncObjects.Add(at);
				return at;
			}

			last.AddWaiter();
			return last;
		}

		public string Name;
		ArrayList SyncObjects = new ArrayList();
		ManualResetEvent queued = new ManualResetEvent(false);

		public TimeRoll(string name)
		{
			Name=name;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepVerify.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepVerify.
	/// </summary>
	public class StepVerify : CaseStep
	{
		// I intentionally didn't want to add Ignore as an offer type to prevent
		// users from using it for signups or renewals;
		bool IgnoreNext=false;
		public Global.OfferType Current, Next;

		public override bool Execute()
		{
			Parent.Log(Header+" verifying offer "+Current+" / "+Next);
			XRLGetSubscriptionStatus request=new XRLGetSubscriptionStatus();
			XRLGetSubscriptionStatusResponse Head;
			XRLGetSubscriptionStatusDetails []Details;

			request.userPuid=Parent.Puid;
			bool b=request.Execute(out Head, out Details);
			if (!b)
			{
				string outputString;
				outputString=request.GetType().Name;
				outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(request.XErr)+"  HTTP:"+request.httpStatus;
				Log(outputString);
				return false;
			}

			Log("    Current offer ID : "+Head.currentOfferId.ToString("X"));
			Log("Current offer status : "+Head.currentOfferStatus);
			Log("          Start date : "+Head.startDate.ToLocalTime());
			Log("            End date : "+Head.endDate.ToLocalTime());
			Log("       Next offer ID : "+Head.renewalOfferId.ToString("X"));
			Log("   Next offer status : "+Head.renewalStatus);
			Log("               Grace : "+Head.renewalGracePeriod);
			if (Head.currentOfferId!=(ulong) Current)
			{
				b=false;
				Parent.Log("Current offer mismatch! (Expected "+Current+" got "+Head.currentOfferId.ToString("X")+")");
			}
			if (!IgnoreNext)
				if ((Head.renewalStatus != (byte) Global.RenewalStatus.NO_RENEWAL && Next == Global.OfferType.None) || (Head.renewalOfferId!=(ulong) Next))
				{
					b=false;
					Parent.Log("Renewal offer mismatch! (Expected "+Next+" got "+Head.renewalOfferId.ToString("X")+")");
				}

			return b;
		}

		public StepVerify(Global.OfferType current)
		{
			IgnoreNext=true;
			Current=current;
		}

		public StepVerify(Global.OfferType current, Global.OfferType next)
		{
			Current=current;
			Next=next;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepVerifyEnumerate.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepVerifyEnumerate.
	/// </summary>
	public class StepVerifyEnumerate : CaseStep
	{
		string enumerationSubCode = "";
		ArrayList enumerationOffersExpected = new ArrayList();
		
		// For the case where we're providing a sub-code and not expecting anything to be listed
		public StepVerifyEnumerate(string subCode)
		{
			enumerationSubCode = subCode;
		}

		// For the case where we're providing a sub-code and expecting a particular list
		public StepVerifyEnumerate(string subCode, ArrayList offersExpected)
		{
			enumerationSubCode = subCode;
			enumerationOffersExpected = offersExpected;
		}

		// For the case where we're not providing a sub-code and we're expecting a particular list
		public StepVerifyEnumerate(ArrayList offersExpected)
		{
			enumerationOffersExpected = offersExpected;
		}

		public override bool Execute()
		{
			Log("StepVerifyEnumerate: Verifying offers for subcode - '" + enumerationSubCode + "'");

			XRLEnumerateEligible ee = new XRLEnumerateEligible();
			XRLEnumerateEligibleHeader eligibleHeader;
			XRLEnumerateEligibleRecord [] eligibleRecords;

			// The only fields we might want to overwrite are...
			//    UserPUID     - this should probably always be the Parent.Puid
			//    MaxResults   - most likely 10 will be sufficient
			//    LanguageId   - 1 is English
			//    VoucherLen   - size of any subcode string
			//    Voucher      - subcode string

			ee.UserPUID = Parent.Puid;
			ee.MaxResults = 10;
			ee.LanguageId = 1;
			try 
			{
				ee.VoucherLen = Convert.ToUInt16(enumerationSubCode.Length);
				ee.Voucher = enumerationSubCode;
			}
			catch (System.OverflowException) 
			{
				Log("Sub code size was too long, discarding...");
				ee.VoucherLen = 0;
				ee.Voucher = "";
			}

			// Issue the enumerate call
			if(!ee.Execute(out eligibleHeader, out eligibleRecords))
			{
				string outputString;
				outputString=ee.GetType().Name;
				outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(ee.XErr)+"  HTTP:"+ee.httpStatus;
				Log(outputString);
				return false;
			}

			// Iterate through the expected offers and make sure that they are present in the response

			if(enumerationOffersExpected.Count != eligibleRecords.Length)
			{
				string outputString;
				outputString=enumerationOffersExpected.Count + " eligible offers expected, " + eligibleRecords.Length + " eligible offers returned.";
				Log(outputString);
				return false;
			}

			foreach(XRLEnumerateEligibleRecord header in eligibleRecords)
			{
				if(!enumerationOffersExpected.Contains((Global.OfferType) header.offeringId))
				{
					string outputString;
					outputString="Eligible offering " + header.offeringId.ToString() + " wasn't expected";
					Log(outputString);
					return false;					
				}
			}

			return true;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrix\StepWaitForRoll.cs ===
using System;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for StepWaitForRoll.
	/// </summary>
	public class StepWaitForRoll : CaseStep
	{
		TimeRoll roll;
		ActiveThreads myBatch = null;
		public override bool Execute()
		{
			if(Parent.ThreadBatch != null)
			{
				Parent.ThreadBatch.ThreadComplete(Parent.Name);
				Parent.Log(Header+Parent.ThreadBatch.rollID + " completed for this case.");
			}
			Parent.Code=Case.PassCode.Waiting;
			Parent.Log(Header+" waiting on "+roll.Name);
			roll.WaitOnQueue();
			Parent.Code=Case.PassCode.Queued;
			Parent.ThreadBatch = myBatch;
			Parent.Log(Header+"Queueing for: " + Parent.ThreadBatch.rollID);
			myBatch.WaitOnBatchActivate(Parent.Name);
			Parent.Log(Header+"Running: " + Parent.ThreadBatch.rollID);
			//int sleepTime=Parent.currentThreadId*1000;
			Parent.Code=Case.PassCode.Running;
//			Log("Thread resumed, sleeping "+sleepTime+" msecs");
//			System.Threading.Thread.Sleep(sleepTime);
			return true;
		}

		public StepWaitForRoll(TimeRoll roll)
		{
			this.roll=roll;

			myBatch = roll.AddWaiter();
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\AccountStatementInfoSet.cs ===
using System;
using System.Collections;
using System.Xml;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for AccountStatementInfoSet.
	/// </summary>
	/// 

	public enum AccountStatementInfoSetLogDepth
	{
		None = 0,
		Summary = 1,
		AccountStatements = 2,
		PaymentInstruments = 3,
		Subscriptions = 4,
		LineItems = 5
	}

	public delegate void LogDelegate(string str);

	public class AccountStatementInfoSet
	{
		public ArrayList AccountStatementInfoSetSet;

		public AccountStatementInfoSet()
		{
		}

		public void Log(LogDelegate logger, AccountStatementInfoSetLogDepth depth)
		{
			if(depth <= AccountStatementInfoSetLogDepth.Summary || AccountStatementInfoSetSet == null)
				return;

			foreach(AccountStatementInfo asi in AccountStatementInfoSetSet)
				asi.Log(logger, depth);
		}

		public bool Parse(string xml)
		{
			XmlDocument doc = new XmlDocument();
			XmlNode root;
			doc.LoadXml(xml);
			root = doc.DocumentElement;

			AccountStatementInfoSetSet = new ArrayList();

			if(root.Name != "AccountStatementInfoSet")
				return false;

			foreach(XmlNode n in root.ChildNodes)
			{
				if(n.Name != "AccountStatementInfo")
					continue;

				AccountStatementInfo asi = new AccountStatementInfo();

				if(asi.Parse(n))
					AccountStatementInfoSetSet.Add(asi);
			}

			if(AccountStatementInfoSetSet.Count == 0)
				return false;

			return true;
		}
	}	

	public class AccountStatementInfo
	{
		public ArrayList AccountStatementSet;

		public AccountStatementInfo()
		{
		}
			
		public void Log(LogDelegate logger, AccountStatementInfoSetLogDepth depth)
		{
			if(depth <= AccountStatementInfoSetLogDepth.Summary || AccountStatementSet == null)
				return;
				
			foreach(AccountStatement acs in AccountStatementSet)
				acs.Log(logger, depth);
		}

		public bool Parse(XmlNode n)
		{
			if(n.Name != "AccountStatementInfo")
				return false;

			foreach(XmlNode p in n.ChildNodes) // Enumerating sub elements of an AccountStatementInfo
			{
				if(p.Name == "AccountStatementSet")
				{
					AccountStatementSet = new ArrayList();

					foreach(XmlNode r in p.ChildNodes) // Enumerating sub elements of an AccountStatementSet
					{
						if(r.Name != "AccountStatement")
							continue;

						AccountStatement acs = new AccountStatement();

						if(acs.Parse(r))
							AccountStatementSet.Add(acs);
					}
				}
			}

			if(AccountStatementSet.Count == 0)
				return false;

			return true;
		}
	}

	public class AccountStatement
	{
		public ArrayList PaymentInstrumentActivitySet;
		public Currency ReadyBalance;
		public Currency OpenBalance;
		public Currency RefundBalance;

		public AccountStatement()
		{
		}

		public void Log(LogDelegate logger, AccountStatementInfoSetLogDepth depth)
		{
			logger("OpenBalance Summary: Ready=" + ReadyBalance.Display() + " Open=" +
				OpenBalance.Display() + " Refund=" + RefundBalance.Display());

			if(depth <= AccountStatementInfoSetLogDepth.AccountStatements || PaymentInstrumentActivitySet == null)
				return;

			foreach(PaymentInstrumentActivity pia in PaymentInstrumentActivitySet)
				pia.Log(logger, depth);
		}

		public bool Parse(XmlNode n)
		{
			CurrencyType ct = CurrencyType.Unspecified;
			bool first = true;

			if(n.Name != "AccountStatement")
				return false;

			foreach(XmlNode p in n.ChildNodes) // Enumerating sub elements of an AccountStatement
			{
				if(p.Name == "AccountInfo")
				{
					foreach(XmlNode q in p.ChildNodes) // Enumerating sub elements of an AccountInfo
					{
						if(q.Name == "Currency")
						{
							ct = Currency.ConvertType(q.InnerText);
							break; // or continue?
						}
					}
				}
				else if(p.Name == "PaymentInstrumentActivitySet")
				{
					PaymentInstrumentActivitySet = new ArrayList();

					foreach(XmlNode r in p.ChildNodes) // Enumerating sub elements of a PaymentInstrumentActivitySet
					{
						if(r.Name != "PaymentInstrumentActivity")
							continue;

						PaymentInstrumentActivity pia = new PaymentInstrumentActivity();

						if(pia.Parse(r, ct))
						{
							PaymentInstrumentActivitySet.Add(pia);

							if(first)
							{
								ReadyBalance = pia.ReadyBalance.Copy();
								OpenBalance = pia.OpenBalance.Copy();
								RefundBalance = pia.RefundBalance.Copy();
								first = false;
							}
							else
							{
								ReadyBalance += pia.ReadyBalance;
								OpenBalance += pia.OpenBalance;
								RefundBalance += pia.RefundBalance;
							}
						}
					}
				}
			}

			if(PaymentInstrumentActivitySet.Count == 0)
				return false;
				
			return true;
		}
	}

	public class PaymentInstrumentActivity
	{
		public ArrayList SubscriptionActivitySet;
		public string PaymentInstrumentId;
		public Currency ReadyBalance;
		public Currency OpenBalance;
		public Currency RefundBalance;
		public DateTime OpenBalanceCollectionDate;
		public DateTime RefundBalanceCollectionDate;

		public PaymentInstrumentActivity()
		{
		}

		public void Log(LogDelegate logger, AccountStatementInfoSetLogDepth depth)
		{
			logger("PICharges (" + PaymentInstrumentId + "): Ready=" + ReadyBalance.Display() +
				" Open=" + OpenBalance.Display() + " Refund=" + RefundBalance.Display());

			if(depth <= AccountStatementInfoSetLogDepth.PaymentInstruments || SubscriptionActivitySet == null)
				return;

			foreach(SubscriptionActivity sa in SubscriptionActivitySet)
			{
				sa.Log(logger, depth);
			}
		}

		public bool Parse(XmlNode n, CurrencyType ct)
		{
			if(n.Name != "PaymentInstrumentActivity")
				return false;

			foreach(XmlNode p in n.ChildNodes) // Enumerating sub elements of a PaymentInstrumentActivity
			{
				if(p.Name == "PaymentInstrumentInfo")
				{
					foreach(XmlNode q in p.ChildNodes) // Enumerating sub elements of a PaymentInstrumentInfo
					{
						if(q.Name == "PaymentInstrumentId")
						{
							PaymentInstrumentId = q.InnerText;
							break; // or continue?
						}
					}
				}
				else if(p.Name == "ActivitySummary")
				{
					foreach(XmlNode r in p.ChildNodes) // Enumerating sub elements of an ActivitySummary
					{
						if(r.Name == "ReadyBalance")
						{
							ReadyBalance = new Currency(ct, r.InnerText);
							continue;
						}
						else if(r.Name == "OpenBalance")
						{
							OpenBalance = new Currency(ct, r.InnerText);
							continue;
						}
						else if(r.Name == "RefundBalance")
						{
							RefundBalance = new Currency(ct, r.InnerText);
							continue;
						}
						else if(r.Name == "OpenBalanceCollectionDate")
						{
							try
							{
								OpenBalanceCollectionDate = Convert.ToDateTime(r.InnerText);
							}
							catch
							{
							}
							continue;
						}
						else if(r.Name == "RefundBalanceCollectionDate")
						{
							try
							{
								RefundBalanceCollectionDate = Convert.ToDateTime(r.InnerText);
							}
							catch
							{
							}
							continue;
						}
					}
				}
				else if(p.Name == "SubscriptionActivitySet")
				{
					SubscriptionActivitySet = new ArrayList();
					
					foreach(XmlNode s in p.ChildNodes) // Enumerating sub elements of a SubscriptionActivitySet
					{
						if(s.Name != "SubscriptionActivity")
							continue;

						SubscriptionActivity sa = new SubscriptionActivity();

						if(sa.Parse(s, ct))
							SubscriptionActivitySet.Add(sa);
					}
				}
			}
			return true;
		}
	}

	public class SubscriptionActivity
	{
		public ArrayList LineItemSet;
		public string SubscriptionId;
		public string OfferingGuid;
		public string SubscriptionDescription;

		public SubscriptionActivity()
		{
		}

		public void Log(LogDelegate logger, AccountStatementInfoSetLogDepth depth)
		{
			logger("Subscription: ID=" + SubscriptionId + " GUID=" + OfferingGuid + " Desc=" + SubscriptionDescription);

			if(depth <= AccountStatementInfoSetLogDepth.Subscriptions || LineItemSet == null)
				return;

			foreach(LineItem li in LineItemSet)
			{
				li.Log(logger);
			}
		}

		public bool Parse(XmlNode n, CurrencyType ct)
		{
			if(n.Name != "SubscriptionActivity")
				return false;

			foreach(XmlNode p in n.ChildNodes) // Enumerating sub elements of a SubscriptionActivity
			{
				if(p.Name == "SubscriptionInfo")
				{
					foreach(XmlNode q in p.ChildNodes) // Enumerating sub elements of a SubscriptionInfo
					{
						if(q.Name == "SubscriptionId")
						{
							SubscriptionId = q.InnerText;
							continue;
						}
						else if(q.Name == "OfferingGuid")
						{
							OfferingGuid = q.InnerText;
							continue;
						}
						else if(q.Name == "SubscriptionDescription")
						{
							SubscriptionDescription = q.InnerText;
							continue;
						}
					}
				}
				else if(p.Name == "LineItemSet")
				{
					LineItemSet = new ArrayList();

					foreach(XmlNode r in p.ChildNodes) // Enumerating sub elements of a LineItemSet
					{
						if(r.Name != "LineItem")
							continue;

						LineItem li = new LineItem();

						if(li.Parse(r, ct))
							LineItemSet.Add(li);
					}
				}
				// anything else, just skip
			}
			return true;
		}
	}

	public class LineItem
	{
		public DateTime date;
		public Currency charge;

		public LineItem()
		{
		}

		public void Log(LogDelegate logger)
		{
			logger("LineItem (" + date.ToShortDateString() + "): " + charge.Display());
		}

		public bool Parse(XmlNode n, CurrencyType ct)
		{
			if(n.Name != "LineItem")
				return false;

			bool fDate = false, fCharge = false;

			foreach(XmlNode p in n.ChildNodes) // Enumerating sub elements of a LineItem
			{
				if(p.Name == "ItemDate")
				{
					date = Convert.ToDateTime(p.InnerText);
					fDate = true;
				}
				else if(p.Name == "SubTotal")
				{
					charge = new Currency(ct, p.InnerText);
					fCharge = true;
				}
			}

			if(fDate && fCharge)
				return true;

			return false;
		}

		public LineItem(string dt, Currency ct)
		{
			date = Convert.ToDateTime(dt);
			charge = ct;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\ActiveThreads.cs ===
using System;
using System.Threading;
using System.Collections;
namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ActiveThreads.
	/// </summary>
	/// 
	enum EventState
	{
		Set,
		Clear
	};

	public class ActiveThreads
	{
		uint AllowedActive = 1;
		uint CurrentActive = 1;
		public ManualResetEvent AllThreadsComplete = new ManualResetEvent(false);
		public ManualResetEvent Activate = new ManualResetEvent(false);
		//EventState AllThreadsCompleteState = EventState.Clear;
		//EventState ActivateState = EventState.Clear;
		public string rollID = null;
		ArrayList caseList = new ArrayList(); 

		object lockobj = new object();
		public void ActivateThreads()
		{
			lock(lockobj)
			{
				//ActivateState = EventState.Set;
				Activate.Set();
			}
		}

		public void WaitOnBatchActivate(string caseName)
		{
			lock(lockobj)
			{
				caseList.Add(caseName);
			}
			Activate.WaitOne();
		}

		public void WaitOnAllComplete()
		{
			AllThreadsComplete.WaitOne();
		}

		public void ThreadComplete(string caseName)
		{
			lock(lockobj)
			{
				bool fFound = false;
				for(int i = 0; i < caseList.Count; ++i)
				{
					if(caseList[i].ToString() == caseName)
					{
						fFound = true;
						caseList.RemoveAt(i);
						break;
					}
				}
				if(!fFound)
					System.Diagnostics.Debugger.Break();
				--CurrentActive;
				if(CurrentActive == 0)
				{
					//AllThreadsCompleteState = EventState.Set;
					AllThreadsComplete.Set();
				}
			}
		}

		public void AddWaiter()
		{
			lock(lockobj)
			{
				++AllowedActive;
				++CurrentActive;
			}
		}

		public uint GetActive()
		{
			lock(lockobj)
			{
				return CurrentActive;
			}
		}

		public uint GetConfigured()
		{
			lock(lockobj)
			{
				return AllowedActive;
			}
		}

		public ActiveThreads(string rollname)
		{
			lock(lockobj)
			{
				rollID = rollname;
			}
		}

		protected ActiveThreads()
		{
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
//[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("")]
//[assembly: AssemblyProduct("")]
//[assembly: AssemblyCopyright("")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

//[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\CaseResult.cs ===
using System;
using System.Collections;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for CaseResult.
	/// </summary>
	public class CaseResult
	{
		public string TestName;
		public Global.TestCode TestStatus;
		public ArrayList TestErrors;
	
		public override string ToString()
		{
			return TestName;
		}

		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}

		public override bool Equals(object cr)
		{
			return TestName.Equals(((CaseResult)cr).ToString());
		}

		public CaseResult(string name, Global.TestCode status, ArrayList errors)
		{
			TestName = name;
			TestStatus = status;
			TestErrors = errors;
		}

		public CaseResult()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\CaseItem.cs ===
using System;
using System.Threading;
using ServerTestFramework;
using System.Collections;
using System.Web.Services.Protocols;
using System.Drawing;
using System.ComponentModel;
using System.Windows.Forms;

namespace RenewalMatrix
{
	class CaseItem : ListViewItem
	{
		public void Update()
		{
			Color col = Color.White;

			if (lt.OldCode==lt.Code)
				return;

			switch(lt.Code)
			{
				case Case.PassCode.Running:
					this.ImageIndex=0;
					col=Color.White;
					break;
				case Case.PassCode.Queued:
				case Case.PassCode.Waiting:
					this.ImageIndex=1;
					col=Color.LightGray;
					break;
				case Case.PassCode.Passed:
					this.ImageIndex=2;
					col=Color.Green;
					break;
				case Case.PassCode.Failed:
					this.ImageIndex=3;
					col=Color.Red;
					break;
			}

			this.BackColor = col;
			this.SubItems[1].Text = lt.Code.ToString();
			lt.OldCode=lt.Code;
				// NOTE: Ignoring failure count for now
				/*
				if(this.SubItems.Count <= 2)
				{
					this.SubItems.Add(lt.FailureCount.ToString());
				}
				*/				
		}

		public override string ToString()
		{
			return lt.Name;
		}

		public CaseItem(New_Code.LightweightTracker lwt)
		{
			lt = lwt;
			this.UseItemStyleForSubItems=true;
			this.Text=lwt.Name;
			this.SubItems.Add(this.Text);
			Update();
		}

		public New_Code.LightweightTracker lt;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\BdkInterface.cs ===
using System;
using System.Xml;
using System.Net;
using System.Net.Security;
using System.Security.Principal;
using System.Security.Cryptography.X509Certificates;

using xonline.common.utilities2;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for BdkInterface.
	/// </summary>
	public class BdkInterface : com.microsoft.extest.ssd.xontebillspsdom.xontebillsps02.bdk
	{
		public string	LastError;
		public int		LastErrorCode;
        private static X509Certificate ClientCert;
        protected const Int32 CERT_SYSTEM_STORE_LOCATION_SHIFT = 16;        
        protected const UInt32 CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2;        
        protected const UInt32 CERT_SYSTEM_STORE_LOCAL_MACHINE = (CERT_SYSTEM_STORE_LOCAL_MACHINE_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT);
        protected const UInt32 CERT_STORE_READONLY_FLAG = 0x00008000;

		public void ParseError(string ErrorXml)
		{
			XmlDocument doc=new XmlDocument();
			doc.LoadXml(ErrorXml);
			XmlElement root=doc.DocumentElement;
			XmlNode node=root.SelectSingleNode(@"ErrorHResult");
			LastErrorCode=Convert.ToInt32(node.InnerText,16);
			node=root.SelectSingleNode(@"ErrorMessage");
			LastError=node.InnerText;
		}

		public BdkInterface()
		{
			//ServicePointManager.CertificatePolicy=new MyCertPolicy(); - this is obsolete in .net 2.0
            ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(this.AcceptAllCerts);
			ServicePointManager.DefaultConnectionLimit=220;
            GetClientCertificate();
            this.ClientCertificates.Add(ClientCert);
			this.Timeout=120000;
			//this.Credentials=new NetworkCredential("XBL1BX05DOM\\XboxRenewalTesting","Jelram1!");
		}

        // Right now this handler accepts all the server certificates, however can be configured to accept only a specific certificate.
        private bool AcceptAllCerts(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            // using cert parameter we can have a validation logic whether we will be accepting the certificate or not.
            return true;
        }

        private static void GetClientCertificate()
        {
            string clientCertSubject = "onebox-sps.xboxlive.com";
            if (ClientCert == null)
            {
                ClientCert = CertUtil.GetCertificate(CERT_SYSTEM_STORE_LOCAL_MACHINE | CERT_STORE_READONLY_FLAG, clientCertSubject);
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\Case.cs ===
using System;
using System.Threading;
using ServerTestFramework;
using System.Collections;
using System.Web.Services.Protocols;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Case.
	/// </summary>
	public class Case //: ThreadBase
	{
		public enum PassCode {NotRunning, Running, Waiting, Passed, Failed, Queued};
		public int			currentThreadId;
		public PassCode		Code=PassCode.NotRunning;
		public PassCode		OldCode=PassCode.Failed;
		public string		Name;
		public bool			ContinueOnFailures = false;
		public int			PuidLow
		{
			get
			{
				return (int)(Puid & 0xFFFFFFFF);
			}
		}
		public int			PuidHigh
		{
			get
			{
				return (int)(Puid >> 32);
			}
		}
		public ulong		Puid=0;
		public CaseStep		[]Steps;

		public Case(CaseStep[] sts, string name)
		{
			Puid=0;
			OldCode=PassCode.Failed;
			Code=PassCode.NotRunning;
			Name = name;
			try
			{
				if(sts == null)
				{
					Steps = new CaseStep[1];
				}
				else
				{
					Steps=new CaseStep[sts.Length+1];
					for (int i=0; i<sts.Length; i++)
					{
						Steps[i+1]=sts[i];
						//NOTE: Don't need to set this here
						//Steps[i+1].Parent = this;
						Steps[i+1].CaseIndex = i+1;
					}
				}
			}
			catch(System.Exception f)
			{
				System.Diagnostics.Debug.WriteLine(f.Message);
				System.Diagnostics.Debug.WriteLine(f.StackTrace);
			}
		}

		public Case(string name, params CaseStep []sts):this(sts, name)
		{
		}

		public Case(string name, bool ContinueOnFailure, params CaseStep []sts):this(sts, name)
		{
			ContinueOnFailures = ContinueOnFailure;
		}

		public override string ToString()
		{
			return Name;
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\Currency.cs ===
using System;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Currency.
	/// </summary>
	/// 

	public enum CurrencyType
	{
		Unspecified,
		USD,
		CAD,
		AUD,
		EUR,
		CHF,
		DKK,
		JPY,
		KRW,
		NOK,
		SEK,
		GBP,
		TWD,
		HKD,
		SGD,
		MXN,
		NZD
	};

	[Serializable]
	public class Currency
	{
		public CurrencyType Type;
		public double Value;

		public Currency()
		{
			Type = CurrencyType.Unspecified;
			Value = 0;
		}
		public Currency(CurrencyType ct, double val)
		{
			Type = ct;
			Value = val;
		}

		public Currency(CurrencyType ct, string val)
		{
			Type = ct;
			Value = ConvertValue(val);
		}
		
		public Currency(Currency c)
		{
			Type = c.Type;
			Value = c.Value;
		}

		public Currency Copy()
		{
			return new Currency(this);
		}

		// Casting operators
		public static implicit operator CurrencyType (Currency c)
		{
			return c.Type;
		}

		public static implicit operator double (Currency c)
		{
			return c.Value;
		}

		public string Display()
		{
			return "(" + Type.ToString() + ") " + Value.ToString();
		}

		public static CurrencyType ConvertType(string ct)
		{
			if(ct == null)
				return CurrencyType.Unspecified;
			if(ct == "USD")
				return CurrencyType.USD;
			if(ct == "AUD")
				return CurrencyType.AUD;
			if(ct == "CAD")
				return CurrencyType.CAD;
			if(ct == "EUR")
				return CurrencyType.EUR;
			if(ct == "CHF")
				return CurrencyType.CHF;
			if(ct == "DKK")
				return CurrencyType.DKK;
			if(ct == "JPY")
				return CurrencyType.JPY;
			if(ct == "KRW")
				return CurrencyType.KRW;
			if(ct == "NOK")
				return CurrencyType.NOK;
			if(ct == "SEK")
				return CurrencyType.SEK;
			if(ct == "GBP")
				return CurrencyType.GBP;
			if(ct == "TWD")
				return CurrencyType.TWD;
			if(ct == "HKD")
				return CurrencyType.HKD;
			if(ct == "SGD")
				return CurrencyType.SGD;
			if(ct == "MXN")
				return CurrencyType.MXN;
			if(ct == "NZD")
				return CurrencyType.NZD;

			throw new System.Exception("Unknown currency type " + ct);
		}

		public static double ConvertValue(string val)
		{
			bool neg;
			int startindex;
			int endindex;
			int range;
			char[] nums = "0123456789".ToCharArray();

			neg = (val.IndexOf('(') > -1);
			startindex = val.IndexOfAny(nums);
			endindex = val.LastIndexOfAny(nums);
			range = endindex - startindex + 1;
			return ((neg) ? -1 : 1) * Convert.ToDouble(val.Substring(startindex, range));
		}


		// Arithmetic operators
		public static Currency operator - (Currency c)
		{
			if(c.Type == CurrencyType.Unspecified)
				throw new System.Exception("Cannot negate an unspecified currency type.");
			return new Currency(c.Type, -c.Value);
		}

		public static Currency operator + (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Cannot perform arithmetic on mismatched currency types.");
			return new Currency(lhs.Type, lhs.Value + rhs.Value);
		}

		public static Currency operator - (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Cannot perform arithmetic on mismatched currency types.");
			return new Currency(lhs.Type, lhs.Value - rhs.Value);
		}

		// Comparison operators
		public static bool operator < (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value < rhs.Value)
				return true;
			return false;
		}
		public static bool operator <= (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value <= rhs.Value)
				return true;
			return false;
		}
		public static bool operator == (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value == rhs.Value)
				return true;
			return false;
		}
		public static bool operator >= (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value >= rhs.Value)
				return true;
			return false;
		}
		public static bool operator > (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value > rhs.Value)
				return true;
			return false;
		}
		public static bool operator != (Currency lhs, Currency rhs)
		{
			if(lhs.Type != rhs.Type)
				throw new System.Exception("Currency type mismatch.");
			if(lhs.Value != rhs.Value)
				return true;
			return false;
		}

		public override bool Equals(object ct)
		{
			if(ct.GetType() != typeof(Currency))
				return false;
			return (this == (Currency) ct);
		}

		public override Int32 GetHashCode()
		{
			return Value.GetHashCode();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\CaseStep.cs ===
using System;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for CaseStep.
	/// </summary>
	[Serializable]
	public abstract class CaseStep
	{
		public string Header
		{
			get
			{
				return Parent.Name+", step "+CaseIndex+":";
			}
		}

		public void Log(string s)
		{
			Parent.Log(Header+" "+s);
		}

		public int CaseIndex=0;
		public RenewalMatrix.New_Code.HeavyweightObject Parent=null;
		public abstract bool Execute();

		public CaseStep()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\Log.cs ===
using System;
using System.IO;
using System.Threading;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Log.
	/// </summary>
	public class Log
	{
		protected Mutex m_mutex;					// The mutex to synchronize (and protect) the logging
		protected StreamWriter m_stream;			// Instance of stream writer for the output log
		protected string m_strApplicationName;		// The name of the calling application
		protected string m_strHostName;				// The name of the host we are logging for

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="fullPath">The full path to the log file.</param>
		public Log(string fullPath)
		{
			// Initialize defaults
			m_strApplicationName = "RenewalMatrix";
			m_strHostName = "localhost";

			// Create the synchronization mutex
			m_mutex = new Mutex();

			// Append to the specified file
			m_stream = new StreamWriter(fullPath, false);
		}

		/// <summary>
		/// Add an entry to the log
		/// </summary>
		/// <param name="s">The string to add to the log</param>
		/// <param name="_params">Arguments to a formatted "s" value</param>
		public void Add(string s, params object[] _params)
		{
			// Wait for the mutex to become available
			m_mutex.WaitOne();

			string strEntry;		// Syslog-style log entry

//			// Format the log entry
//			strEntry = string.Format("{0} {1} {2}: {3}", 
//				DateTime.Now.ToString("MMM dd HH:mm:ss"), 
//				m_strHostName, 
//				m_strApplicationName,
//				string.Format(s, _params)
//				);

			// Format the log entry
			strEntry = string.Format(s, _params);

			// Write the formatted string to the log
			m_stream.WriteLine(strEntry);

			// Write any pending text
			m_stream.Flush();

			// Release the mutex
			m_mutex.ReleaseMutex();
		}

		/// <summary>
		/// The calling application name
		/// </summary>
		public string applicationName
		{
			get { return m_strApplicationName; }
			set { m_strApplicationName = value; }
		}

		/// <summary>
		/// The calling application host name
		/// </summary>
		public string hostName
		{
			get { return m_strHostName; }
			set { m_strHostName = value; }
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\GetSubscriptionStatus.cs ===
using System;
using ServerTestFramework;
using System.Xml;
using System.Threading;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for GetSubscriptionStatus.
	/// </summary>
	/// 
	public class GetSubscriptionStatus
	{
		LogDelegate log;
		private bool bSpecificSub = false;
		public bool bSpecificSUB
		{
			get
			{
				return bSpecificSub;
			}
			set
			{
				bSpecificSub = value;
			}
		}
		private string SubscriptionId = "";
		public string SubscriptionID
		{
			get
			{
				return SubscriptionId;
			}
			set
			{
				SubscriptionId = value;
			}
		}

		public class Status
		{
			public bool HasViolations;
			public Global.AccountStatus AccountStatus;
		}

		public GetSubscriptionStatus(LogDelegate logger)
		{
			//
			// TODO: Add constructor logic here
			//
			log = logger;
		}

		protected GetSubscriptionStatus()
		{
		}

		public bool GetStatus(ulong userPuid, out Status status)
		{
			return GetStatus(userPuid, false, out status, false, false);
		}

		public bool GetStatus(ulong userPuid, bool waitforuodb, out Status status, bool Xenoned, bool PrintXML)
		{
			BdkInterface bdk=new BdkInterface();
			UserSubInfo [] subs;
			UserSubInfo cursub;
			string subscriptionId;
			status = new Status();

			UodbWS.GetUserSubs(userPuid, out subs, out cursub);

			string ErrorXml;
			string SubscriptionStatusInfoXml;

			if(bSpecificSub)
			{
				subscriptionId = String.Copy(SubscriptionID);
			}
			else
			{
				if (cursub == null)
				{
					throw new Exception("Couldn't get current subscription from UODB");
				}
				subscriptionId = String.Copy(cursub.serviceInstanceId);
			}


            ulong passportPuid = UodbWS.GetUserPassportUserPuid(userPuid);
            bdk.GetSubscriptionStatus(1, 1, (int)((passportPuid & 0xffffffff00000000) >> 32), (int)(passportPuid & 0xffffffff), 
                subscriptionId, out ErrorXml, out SubscriptionStatusInfoXml);

			XmlDocument doc = new XmlDocument();
			doc.LoadXml(SubscriptionStatusInfoXml);
			XmlNode root = doc.DocumentElement;

			foreach(XmlNode n in root)
			{
				if(n.Name == "SubscriptionStatus")
				{
					switch(n.InnerText.ToLower())
					{
						case "enabled":
							status.AccountStatus = Global.AccountStatus.Enabled;
							break;
						case "expired":
							status.AccountStatus = Global.AccountStatus.Expired;
							break;
						case "canceled":
							status.AccountStatus = Global.AccountStatus.Canceled;
							break;
						case "suspended":
							status.AccountStatus = Global.AccountStatus.Suspended;
							break;
						default:
							throw new System.Exception("Unknown account status was returned from GetSubscriptionStatus: " + n.InnerText);
					};
					continue;
				}
				else if(n.Name == "ViolationSet")
				{
					if(n.ChildNodes.Count > 0)
						status.HasViolations = true;
				}
			}

			if (PrintXML)
				log(SubscriptionStatusInfoXml);

			if(!waitforuodb)
				return true;

			if (!Xenoned)
			{
				XRLGetSubscriptionStatus gss = new XRLGetSubscriptionStatus();
				XRLGetSubscriptionStatusDetails [] details;
				XRLGetSubscriptionStatusResponse gssr;

				gss.userPuid = userPuid;
				if(!gss.Execute(out gssr, out details))
				{
					string outputString;
					outputString=gss.GetType().Name;
					outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(gss.XErr)+"  HTTP:"+gss.httpStatus;
					log(outputString);
					return false;
				}

				long curtime = DateTime.Now.Ticks;

				while(gssr.currentOfferStatus != (uint) status.AccountStatus && 
					DateTime.Now.Ticks - curtime < Global.DataVerificationTimeout*1000)
				{
					Thread.Sleep(500);
					if(!gss.Execute(out gssr, out details))
					{
						string outputString;
						outputString=gss.GetType().Name;
						outputString+=" XErr:"+ServerTestFramework.Global.XErrToString(gss.XErr)+"  HTTP:"+gss.httpStatus;
						log(outputString);
						return false;
					}
				}

				if(gssr.currentOfferStatus != (uint) status.AccountStatus)
				{
					if((gssr.currentOfferStatus == 0x80) && (status.AccountStatus == Global.AccountStatus.Expired))
					{
						log("GetSubscriptionStatus XRL returned: EXPIRED_NO_VIOLATIONS,  BDK returned: Expired");
						//TODO - Check for presence of violations from the BDK
					}
					else
					{
						log("Mismatch! GetSubscriptionStatus XRL returned: " + gssr.currentOfferStatus.ToString() + ", BDK returned: " + status.AccountStatus.ToString());
						return false;
					}
				}
			}
			else
			{
				// TODO: What to do if Xenoned?
			}

			return true;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\Global.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.Utilities;

//***************** FIX ME

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Global.
	/// </summary>
	public class Global
	{
		static public ArrayList ResultArray;
		static public int		ResultIndex;

		static public long DataVerificationTimeout = 120 * 1000 * 10;	// In ticks
		// Currently set to RYCOOP-BLOB
		static public string Uacs="65.52.240.21:10050";
		static public string Uodb1="65.52.240.21";
		static public string Uodb2="65.52.240.21";

		static public System.Collections.Hashtable OfferMap = new Hashtable();
		static public System.Collections.Hashtable PointsMap = new Hashtable();

        //Used for Generating Premium Subscriptions (like Game and Zune) test cases
        public enum MatrixType : uint
        {
            MatrixOne = 0x00000001,
            MatrixTwo = 0x00000002,
            MatrixThree = 0x00000004,
            MatrixFour = 0x00000008,
            MatrixFive = 0x00000010,
            MatrixSix = 0x00000020,
            MatrixSeven = 0x00000040
        }

        //Used for Generating Premium Subscriptions (like Game and Zune) test cases
        public enum UserAccountType : uint
        {
            AccountTypeSilver = 0x00000001,
            AccountTypeGold = 0x00000002,
            AccountTypeMigrated = 0x00000004,
            AccountTypeArgo = 0x00000008,
            AccountTypeNone = 0x00000010
        }
        
		public enum  OfferType:ulong  
		{
			// Xbox Offers
			None	    				=0x0000000000000000,
			LaunchOffer    				=0xFFFE000080000008,
			Monthly599    				=0xFFFE00008000000B,
			Yearly4999    				=0xFFFE00008000000C,
			GameTrial    				=0xFFFE000080000009,
			ConsoleTrial				=0xFFFE00008000000A,
			PrepaidCard					=0xFFFE00008000000D,
			ThreeMonthCard				=0xFFFE00008000000E,
			Beta001	    				=0xFFFE000080000001,
			Beta002	    				=0xFFFE000080000002,
			Beta003	    				=0xFFFE000080000003,
			Beta004	    				=0xFFFE000080000004,
			Beta005	    				=0xFFFE000080000005,
			Beta006	    				=0xFFFE000080000006,

			// Xenon offers
			// Fixed offers
			XeFree						=0xFFFE07D180000011, 
			XeMigration					=0xFFFE07D180000001,
			XeThreeYearCC				=0xFFFE07D18000000D,
			XeTwoYearCC					=0xFFFE07D18000000C,
			XeYearlyCC					=0xFFFE07D18000000A,            
			XeThreeMonthCC				=0xFFFE07D180000009,
			XeMonthlyCC					=0xFFFE07D180000008,
			XeOneMonthTrial				=0xFFFE07D180000003, 
			XeOneMonthPrepaid			=0xFFFE07D180000018, 
			XeThreeMonthPrepaid			=0xFFFE07D180000019,
			XeTwelveMonthPrepaid		=0xFFFE07D18000001A,
			XeThirteenMonthPrepaid		=0xFFFE07D18000001B,
			XeTwentyFourMonthPrepaid	=0xFFFE07D18000001C,
			XeThirtySixMonthPrepaid		=0XFFFE07D18000001D,
            XeTwelveMonthProm           = 0xFFFE07D18000002A,// 12 month prom offer
			
			//Game Subscriptions
            GameSubMonthlyCC            = 0xFFFF009588000000,
            GameSubQuarterlyCC          = 0xFFFF009588000001,
            GameSubYearlyCC             = 0xFFFF009588000002,
            GameSub1moPrepaid           = 0xFFFF009588000010,
            GameSub3moPrepaid           = 0xFFFF009588000011,
            GameSub12moPrepaid          = 0xFFFF009588000012,
            GameSubMinPrepaid           = OfferType.GameSub1moPrepaid,
            GameSubMaxPrepaid           = OfferType.GameSub12moPrepaid,
			GameSubPrepaid              = OfferType.GameSub1moPrepaid,

            //Argo Subscriptions
            ArgoSub14DayTrial           = 0xFFFE07778800001A,
            ArgoSubMonthlyCC            = 0xFFFE077788000000,
            ArgoSubQuarterlyCC          = 0xFFFE077788000001,
            ArgoSubYearlyCC             = 0xFFFE077788000002,
            ArgoSub1moPrepaid           = 0xFFFE077788000010,
            ArgoSub3moPrepaid           = 0xFFFE077788000011,
            ArgoSub12moPrepaid          = 0xFFFE077788000012,
            ArgoSubMinPrepaid           = OfferType.ArgoSub1moPrepaid,
            ArgoSubMaxPrepaid           = OfferType.ArgoSub12moPrepaid,
            ArgoSubPrepaid              = OfferType.ArgoSub1moPrepaid,

			// Varied offers - UPDATE ME WHEN NEW OFFERS ARE MADE AVAILABLE
			XeMinPrepaid				=OfferType.XeOneMonthPrepaid, // Should be one month
			XeMiddlePrepaid				=OfferType.XeThreeMonthPrepaid, // Should be three month
			XeMaxPrepaid				=OfferType.XeTwelveMonthPrepaid, // Should be twelve month, but will eventually be 24 month									
			XeRandomPrepaid				=OfferType.XeTwelveMonthPrepaid,										
			XeAnotherRandomPrepaid		=OfferType.XeThreeMonthPrepaid,
			XeDifferentRenewal			=8,
			XeDifferentRenewalFirst		=OfferType.XeThreeMonthPrepaid,
			XeDifferentRenewalSecond	=OfferType.XeTwelveMonthPrepaid,
			XeIdenticalRenewal			=9,
			XeIdenticalRenewalValue		=OfferType.XeThreeMonthPrepaid,
			XeOverstackRenewal			=10,
			XeOverstackRenewalValue		=OfferType.XeTwelveMonthPrepaid				
		};

		//TODO: Resolve difference in Reward vs RewardOffer, if any
		public enum PointsOffer:ulong
		{
			// Points Lot Offers
			None	    				=0x0000000000000000,
			Reward						=1,
			RegularOffer				=0XFFFE07D10FF00007,
			LargeOffer					=0XFFFE07D10AA0000A,
			//RewardOffer					=4,
			ExpiredOffer				=0xFFFE07D10AA0000B,
			RedeemedOffer				=0XFFFE07D10FF00015,
			InvalidOffer				=0xFFFFFFFFFFFFFFFE,
			PromoOffer					=0xFFFE07D102000501,
			ExpiredPromo				=0xFFFE07D10AA0000C,
			MaxedPromo					=0xFFFE07D10AA0000D,

			// Points Items Offers
			ItemToPurchase				=0xFFFFAB9080000003, // 99
			SecondItemToPurchase		=0xFFFE07D10AA00001, // 800
			OfferWithReward				=13,
			ExpensiveItemToPurchase		=0xFFFF009970000011,
			ItemMatchingRewardValue		=15,

			// Verification items
			PromoOfferPlusReward		=16,
			OfferWithRewardPlusReward	=17,
			RegularOfferPlusReward		=18,
			LargeOfferPlusReward		=19
		}


		//TODO: Should I actually be verifying this? (Do I actually need this?) ... I don't think I should
		public enum PointsOfferValue:uint
		{
			// Points Lot Offers
			None	    				=0,
			Reward						=0,
			RegularOffer				=2000,
			LargeOffer					=10000,
			//RewardOffer					=0,
			RewardsOfferReward			=0,
			ExpiredOffer				=800,
			RedeemedOffer				=800,
			InvalidOffer				=0,
			PromoOffer					=500,
			ExpiredPromo				=400,
			MaxedPromo					=1,

			// Points Items Offers
			ItemToPurchase				=99,
			SecondItemToPurchase		=800,
			OfferWithReward				=0,
			ExpensiveItemToPurchase		=12000,
			ItemMatchingRewardValue		=Reward,

			// Verification items
			PromoOfferPlusReward		=PromoOffer+Reward,
			OfferWithRewardPlusReward	=OfferWithReward+RewardsOfferReward+Reward,
			RegularOfferPlusReward		=RegularOffer+Reward,
			LargeOfferPlusReward		=LargeOffer+Reward
		}

		public enum OfferLength:int
		{
			// Xbox 1
			LaunchOffer				=12,
			PrepaidCard				=12,
			ThreeMonthCard			=3,
			GameTrial				=2,
			ConsoleTrial			=2,
			Monthly599				=1,
			Yearly4999				=12,

			// Xe
			// Fixed offers
			XeFree					=0,
			XeMigration				=1, // for exaustive testing
			XeThreeYearCC			=36,
			XeTwoYearCC				=24,
			XeYearlyCC				=12,           
			XeThreeMonthCC			=3,
			XeMonthlyCC				=1,
			XeOneMonthTrial			=1,
			XeOneMonthPrepaid		=1,
			XeThreeMonthPrepaid		=3,
			XeTwelveMonthPrepaid	=12,
			XeThirteenMonthPrepaid	=13,
			XeTwentyFourMonthPrepaid=24,
			XeThirtySixMonthPrepaid	=36,
            XeTwelveMonthProm       =12,

			//GameSubscription offer lengths
			GameSubMonthlyCC		=1,
            GameSubQuarterlyCC      =3,
            GameSubYearlyCC         =12,
            GameSub1moPrepaid       =1,
            GameSub3moPrepaid       =3,
            GameSub12moPrepaid      =12,

            GameSubMinPrepaid       =OfferLength.GameSub1moPrepaid,
            GameSubMaxPrepaid       =OfferLength.GameSub3moPrepaid,
            GameSubPrepaid          =OfferLength.GameSub1moPrepaid,

            //ArgoSubscription offer lengths
            ArgoSubMonthlyCC = 1,
            ArgoSubQuarterlyCC = 3,
            ArgoSubYearlyCC = 12,
            ArgoSub1moPrepaid = 1,
            ArgoSub3moPrepaid = 3,
            ArgoSub12moPrepaid = 12,
            ArgoSub14DayTrial   = 14,

            ArgoSubMinPrepaid = OfferLength.ArgoSub1moPrepaid,
            ArgoSubMaxPrepaid = OfferLength.ArgoSub3moPrepaid,
            ArgoSubPrepaid = OfferLength.ArgoSub1moPrepaid,

			// Varied offers - TODO:UPDATE ME WHEN NEW OFFERS ARE MADE AVAILABLE
			XeMinPrepaid			=OfferLength.XeOneMonthPrepaid, // Should be one month
			XeMiddlePrepaid			=OfferLength.XeThreeMonthPrepaid,// Should be three month
			XeMaxPrepaid			=OfferLength.XeTwelveMonthPrepaid, // Should be twelve month, but will eventually be 24 month
			XeRandomPrepaid			=OfferLength.XeTwelveMonthPrepaid,
			XeAnotherRandomPrepaid	=OfferLength.XeThreeMonthPrepaid,			
			XeDifferentRenewalFirst	=OfferLength.XeThreeMonthPrepaid,
			XeDifferentRenewalSecond=OfferLength.XeTwelveMonthPrepaid,
			XeDifferentRenewal		=OfferLength.XeDifferentRenewalFirst+OfferLength.XeDifferentRenewalSecond,
			XeIdenticalRenewal		=OfferLength.XeThreeMonthPrepaid*2,
			XeOverstackRenewal		=OfferLength.XeTwelveMonthPrepaid*2	
		};

		
		static public PointsOfferValue GetPointsOfferValue(PointsOffer po)
		{
			switch (po)
			{
				case PointsOffer.None:
					return PointsOfferValue.None;
				case PointsOffer.Reward:
					return PointsOfferValue.Reward;
				case PointsOffer.RegularOffer:
					return PointsOfferValue.RegularOffer;
				case PointsOffer.LargeOffer:
					return PointsOfferValue.LargeOffer;
				case PointsOffer.ExpiredOffer:
					return PointsOfferValue.ExpiredOffer;
				case PointsOffer.RedeemedOffer:
					return PointsOfferValue.RedeemedOffer;
				case PointsOffer.InvalidOffer:
					return PointsOfferValue.InvalidOffer;
				case PointsOffer.PromoOffer:
					return PointsOfferValue.PromoOffer;
				case PointsOffer.ExpiredPromo:
					return PointsOfferValue.ExpiredPromo;
				case PointsOffer.MaxedPromo:
					return PointsOfferValue.MaxedPromo;
				case PointsOffer.ItemToPurchase:
					return PointsOfferValue.ItemToPurchase;
				case PointsOffer.SecondItemToPurchase:
					return PointsOfferValue.SecondItemToPurchase;
				case PointsOffer.OfferWithReward:
					return PointsOfferValue.OfferWithReward;
				case PointsOffer.ExpensiveItemToPurchase:
					return PointsOfferValue.ExpensiveItemToPurchase;
				case PointsOffer.ItemMatchingRewardValue:
					return PointsOfferValue.ItemMatchingRewardValue;
				case PointsOffer.PromoOfferPlusReward:
					return PointsOfferValue.PromoOfferPlusReward;
				case PointsOffer.RegularOfferPlusReward:
					return PointsOfferValue.RegularOfferPlusReward;
				case PointsOffer.LargeOfferPlusReward:
					return PointsOfferValue.LargeOfferPlusReward;
				case PointsOffer.OfferWithRewardPlusReward:
					return PointsOfferValue.OfferWithRewardPlusReward;
				default:
				{
					switch (po)
					{
						// Look 4-16 lines above and try and tell me with a 
						// straight face that this isn't a compiler bug.
						case PointsOffer.OfferWithReward:
							return PointsOfferValue.OfferWithReward;
						case PointsOffer.PromoOfferPlusReward:
							return PointsOfferValue.PromoOfferPlusReward;
						case PointsOffer.RegularOfferPlusReward:
							return PointsOfferValue.RegularOfferPlusReward;
						case PointsOffer.OfferWithRewardPlusReward:
							return PointsOfferValue.OfferWithRewardPlusReward;
						case PointsOffer.Reward:
							return PointsOfferValue.Reward;
						case PointsOffer.LargeOfferPlusReward:
							return PointsOfferValue.LargeOfferPlusReward;
					}
					throw new System.ArgumentException();
				}
			}
		}
		

		public enum RenewalStatus : byte 
		{
			NO_RENEWAL = 0x00,
			VOUCHER_RENEWAL,
			NORMAL_RENEWAL
		};

		
		public enum AccountStatus
		{
			Pending = 0,
			Enabled = 1,
			Suspended = 2,
			Expired = 3,
			Canceled = 4,
			Renewed = 10
		}

		public enum ViolationStatus
		{
			DontCare,
			Yes,
			No
		}

		public enum TestCode
		{
			Passed, 
			Failed
		}

		public static string GetVoucherFromOffer(PointsOffer t)
		{
			switch(t)
			{
				case PointsOffer.RedeemedOffer:
					return "JF3D924433WTWRHPD2PJMWYCC";
				case PointsOffer.RegularOffer:
					return "8W6F6R92RQ3TQJVXCHHWPMV77";
				case PointsOffer.ExpiredOffer:
					return "QXJVC8D2VMQWTM7GFG87K9VPT";
				case PointsOffer.ExpiredPromo:
					return "X666666666666666666666666";
				case PointsOffer.InvalidOffer:
					return "12345"; // Same combination that's on my luggage
				case PointsOffer.LargeOffer:
					return "FVDTPGY667TBMDJ2JKGP464J6";
				case PointsOffer.MaxedPromo:
					return "X777777777777777777777777";
				case PointsOffer.OfferWithReward:
					return "";
				case PointsOffer.PromoOffer:
					return "X555555555555555555555555";
			}
			ConsoleX.WriteLine(CC.RED,"Don't know how to get voucher for token "+t);
			return "";
		}

		public static bool IsCreditCardOffer(OfferType t)
		{
			switch (t)
			{
				case OfferType.Monthly599:
				case OfferType.Yearly4999:
				case OfferType.XeThreeYearCC:
				case OfferType.XeTwoYearCC:
				case OfferType.XeYearlyCC:                
				case OfferType.XeThreeMonthCC:
				case OfferType.XeMonthlyCC:
				case OfferType.XeOneMonthTrial:
				case OfferType.GameSubMonthlyCC:
                case OfferType.GameSubQuarterlyCC:
                case OfferType.GameSubYearlyCC:
                case OfferType.ArgoSubMonthlyCC:
                case OfferType.ArgoSubQuarterlyCC:
                case OfferType.ArgoSubYearlyCC:
                case OfferType.XeTwelveMonthProm:
					return true;
			}
			return false;
		}

		public static OfferType GetOfferFromVoucher(string Voucher)
		{
			switch (Voucher)
			{
				case "1111111111111111111111111":
					return OfferType.LaunchOffer;
				case "3333333333333333333333333":
					return OfferType.GameTrial;
				case "4444444444444444444444444":
					return OfferType.ConsoleTrial;
				case "2222222222222222222222222":
					return OfferType.PrepaidCard;
				case "CCCCCCCCCCCCCCCCCCCCCCCCC":
					return OfferType.ThreeMonthCard;
					// Xe Offers
				case "89R44J8JBFTJQQB8QCQCHW8BF":
				case "DFCXWTDD4692J2K347VQ3G2KK":
				case "VW6XDMBRY2D7XPWPGWWBHFKDJ":
				case "QYPVM7P3MB8JQ2R8HWBH7GR9B":
				case "H7TY8RDC9H4HT9K8W3JBHH7TK":
				case "DQMKWKR9MMTGV8MDJ8J9QQWJR":
				case "4KXH79BBM4C33P7MHFX43B477":
				case "8JWT6Y4D43B63RMRGGFKMTTMX":
					return OfferType.XeTwelveMonthPrepaid;
				case "MBYVHKCWDH7HXBBHT7F77QTH8":
				case "QK47D6RMW623HMFPR49WHD8GP":
				case "KBC8D7RQX3BH2BPP6CFJQJVBR":
				case "QWVXYMMXT46QQR8HMWWDG24VG":
				case "GTTD6QBX3PT8BTK83X83H72HQ":
				case "K4TQCBVMFF4C4T6PQBWWPBWJ8":
				case "PMX23J3KXVXTHYP8W6PT79FCP":
				case "46FWCJGJRYX8XM6B2F9H7GMHX":
					return OfferType.XeThreeMonthPrepaid;
				case "CRYCPBM9W4KH3B66MRQTHHGBF":
				case "22TR6KG7TWC79CXX9VYTHMWRW":
				case "94F2J4JX7XJ6R3TFMJQ48PQ36":
				case "HYTT8MFB66RBFJ33HCPM4R3GM":
					return OfferType.XeOneMonthPrepaid;
				case "XeYearlyCC":
					return OfferType.XeYearlyCC;                
                case "XeTwelveMonthProm":
                    return OfferType.XeTwelveMonthProm;
				case "XeMonthlyCC":
					return OfferType.XeMonthlyCC;
				case "XeThreeMonthCC":
					return OfferType.XeThreeMonthCC;
				case "XeOneMonthTrial":
					return OfferType.XeOneMonthTrial;
				//TODO: FIXME
				case "V28YB4F6MWYMMWYQX8G4BPGBK":
				case "JF3D924433WTWRHPD2PJMWYCC":
				case "RGK7PGT8P2YP2M77TV4C8BQ9Q":
				case "8X438YRYCRVR8PWDWH3TBMPTP":
					return OfferType.XeThirteenMonthPrepaid;
                case "FYK74XVBD8G36BG9C4Y7HQB8Q":
                case "2FG668JGW3K4YQ2386RBD9YF9":
                case "KR4VPYYMRDRMFHB7VHH7GMM8D":
                    return OfferType.GameSub1moPrepaid;
                case "C3H7BP7J86BRH4VXK789CBMPD":
                case "QYKBJYGFK6VBTG8QKHQ6CHRXW":
                case "J2V6CCQ64W2VJXG6M899W3YBT":
                    return OfferType.GameSub3moPrepaid;
                case "BTQY7KGW67Y7JRJRBPQ8MPHF6":
                case "77KHHC26RBYPBX9Q8XX7QTH8D":
                case "HK227WKJ49P6PW48C4RVCB2RT":
                    return OfferType.GameSub12moPrepaid;
                case "D6B9MTQVGMHP892WR382626G8":
                case "9X8W93HRBH9FKHXHB8R3T49Q2":
                case "H9GXMMB4CM7R8GVB7723RGVJR":                
                    return OfferType.ArgoSub1moPrepaid;
                case "3MYR3HRBR3PXP2X89499FWBD3":
                case "4FWWKWXPPF6TFGFRW2V9VY8RF":
                case "9QWVXFKVY8C7QFG2HBW4P6X4R":
                    return OfferType.ArgoSub3moPrepaid;
                case "MX7CWJC33J6RYKQ9Y6P6GR62F":
                case "9DPMFPHYQTCGTFTXCMJWG2B7C":
                case "4KV9Q63F8XGXPX7W4J4P4G26G":
                    return OfferType.ArgoSub12moPrepaid;
                case "7W2FBYPVQJDMCPFTWPW9CPFGQ":
                case "2K8V3XVR2VQ82W6CK942HYHDF":
                case "XWHTJTQT2KMQBXWT7M62V6328":
                    return OfferType.ArgoSub14DayTrial;
			}
			return OfferType.None;
		}

		public static string GetSecondaryVoucher(OfferType t, int voucherNumber)
		{
			if ((voucherNumber > 7) || (voucherNumber < 0))
				voucherNumber %= 8;
			switch(t)
			{
				// Xe Offers
				case OfferType.XeThirteenMonthPrepaid:
					switch (voucherNumber % 4)
					{
						case 0:
							return "V28YB4F6MWYMMWYQX8G4BPGBK";
						case 1:
							return "JF3D924433WTWRHPD2PJMWYCC";
						case 2:
							return "RGK7PGT8P2YP2M77TV4C8BQ9Q";
						case 3:
							return "8X438YRYCRVR8PWDWH3TBMPTP";
					}
					break;
				case OfferType.XeTwelveMonthPrepaid:
					switch (voucherNumber)
					{
						case 0:
							return "89R44J8JBFTJQQB8QCQCHW8BF";
						case 1:
							return "DFCXWTDD4692J2K347VQ3G2KK";
						case 2:
							return "VW6XDMBRY2D7XPWPGWWBHFKDJ";
						case 3:
							return "QYPVM7P3MB8JQ2R8HWBH7GR9B";
						case 4:
							return "H7TY8RDC9H4HT9K8W3JBHH7TK";
						case 5:
							return "DQMKWKR9MMTGV8MDJ8J9QQWJR";
						case 6:
							return "4KXH79BBM4C33P7MHFX43B477";
						case 7:
						default:
							return "8JWT6Y4D43B63RMRGGFKMTTMX";
					}
				case OfferType.XeThreeMonthPrepaid:
					switch (voucherNumber)
					{
						case 0:
							return "MBYVHKCWDH7HXBBHT7F77QTH8";
						case 1:
							return "QK47D6RMW623HMFPR49WHD8GP";
						case 2:
							return "KBC8D7RQX3BH2BPP6CFJQJVBR";
						case 3:
							return "QWVXYMMXT46QQR8HMWWDG24VG";
						case 4:
							return "GTTD6QBX3PT8BTK83X83H72HQ";
						case 5:
							return "K4TQCBVMFF4C4T6PQBWWPBWJ8";
						case 6:
							return "PMX23J3KXVXTHYP8W6PT79FCP";
						case 7:
						default:
							return "46FWCJGJRYX8XM6B2F9H7GMHX";
					}
				case OfferType.XeOneMonthPrepaid:					
					switch (voucherNumber % 4)
					{
						case 0:
							return "CRYCPBM9W4KH3B66MRQTHHGBF";
						case 1:
							return "22TR6KG7TWC79CXX9VYTHMWRW";
						case 2:
							return "94F2J4JX7XJ6R3TFMJQ48PQ36";
						case 3:
						default:
							return "HYTT8MFB66RBFJ33HCPM4R3GM";
					}
				case OfferType.XeYearlyCC:
				case OfferType.XeThreeMonthCC:
				case OfferType.XeMonthlyCC:
				case OfferType.XeOneMonthTrial:
					return "";
				case OfferType.XeTwentyFourMonthPrepaid:
					switch (voucherNumber % 4)
					{
						case 0:
							return "RR9VBCVD3P7KDFY639TDYVY3K";
						case 1:
							return "V7T3DPCB4Q4PWVKRKHJXPGB7B";
						case 2:
							return "JB3PV83HJQFBKYB4JKY7RFQHW";
						case 3:
						default:
							return "PKQF7M7W36PJXJTCGMFFQ9VJ4";
					}
				case OfferType.XeThirtySixMonthPrepaid:
					break;

                case OfferType.GameSub1moPrepaid:
                    switch (voucherNumber % 3)
                    {
                        case 0:
                            return "FYK74XVBD8G36BG9C4Y7HQB8Q";
                        case 1:
                            return "2FG668JGW3K4YQ2386RBD9YF9";
                        case 2:
                        default:
                            return "KR4VPYYMRDRMFHB7VHH7GMM8D";
                    }
                case OfferType.GameSub3moPrepaid:
                    switch (voucherNumber % 3)
                    {
                        case 0:
                            return "C3H7BP7J86BRH4VXK789CBMPD";
                        case 1:
                            return "QYKBJYGFK6VBTG8QKHQ6CHRXW";
                        case 2:
                        default:
                            return "J2V6CCQ64W2VJXG6M899W3YBT";
                    }
                case OfferType.GameSub12moPrepaid:
                    switch (voucherNumber %3)
                    {
                        case 0:
                            return "BTQY7KGW67Y7JRJRBPQ8MPHF6";
                        case 1:
                            return "77KHHC26RBYPBX9Q8XX7QTH8D";
                        case 2:
                        default:
                            return "HK227WKJ49P6PW48C4RVCB2RT";
                    }
                case OfferType.ArgoSub1moPrepaid:
                    switch (voucherNumber % 3)
                    {
                        case 0:
                            return "D6B9MTQVGMHP892WR382626G8";
                        case 1:
                            return "9X8W93HRBH9FKHXHB8R3T49Q2";
                        case 2:
                        default:
                            return "H9GXMMB4CM7R8GVB7723RGVJR";
                    }
                case OfferType.ArgoSub3moPrepaid:
                    switch (voucherNumber % 3)
                    {
                        case 0:
                            return "3MYR3HRBR3PXP2X89499FWBD3";
                        case 1:
                            return "4FWWKWXPPF6TFGFRW2V9VY8RF";
                        case 2:
                        default:
                            return "9QWVXFKVY8C7QFG2HBW4P6X4R";
                    }
                case OfferType.ArgoSub12moPrepaid:
                    switch (voucherNumber % 3)
                    {
                        case 0:
                            return "MX7CWJC33J6RYKQ9Y6P6GR62F";
                        case 1:
                            return "9DPMFPHYQTCGTFTXCMJWG2B7C";
                        case 2:
                        default:
                            return "4KV9Q63F8XGXPX7W4J4P4G26G";
                    }
                case OfferType.ArgoSub14DayTrial:
                    {
                        switch (voucherNumber % 3)
                        {
                            case 0:
                                return "7W2FBYPVQJDMCPFTWPW9CPFGQ";
                            case 1:
                                return "2K8V3XVR2VQ82W6CK942HYHDF";
                            case 2:
                            default:
                                return "XWHTJTQT2KMQBXWT7M62V6328";
                        }
                    }

			}
			ConsoleX.WriteLine(CC.RED,"Don't know how to get voucher for offer "+((long)t).ToString("X"));
			return "";
		}

		public static string GetVoucherFromOffer(OfferType t)
		{
			switch(t)
			{
				// Xbox Offers
				case OfferType.LaunchOffer:
					return "1111111111111111111111111";
				case OfferType.Monthly599:
					return "";
				case OfferType.Yearly4999:
					return "";
				case OfferType.GameTrial:
					return "3333333333333333333333333";
				case OfferType.ConsoleTrial:
					return "4444444444444444444444444";
				case OfferType.PrepaidCard:
					return "2222222222222222222222222";
				case OfferType.ThreeMonthCard:
					return "CCCCCCCCCCCCCCCCCCCCCCCCC";

				// Xe Offers
				default:
					return GetSecondaryVoucher(t,0);
//				case OfferType.XeThirteenMonthPrepaid:
//					return "V28YB4F6MWYMMWYQX8G4BPGBK";
//				case OfferType.XeTwelveMonthPrepaid:
//					//return "H7TY8RDC9H4HT9K8W3JBHH7TK";
//					return "89R44J8JBFTJQQB8QCQCHW8BF";
//				case OfferType.XeThreeMonthPrepaid:
//					return "MBYVHKCWDH7HXBBHT7F77QTH8";
//				case OfferType.XeOneMonthPrepaid:
//					return "CRYCPBM9W4KH3B66MRQTHHGBF";
				case OfferType.XeYearlyCC:
					return "XeYearlyCC";                
                case OfferType.XeTwelveMonthProm:
                    return "XeTwelveMonthProm";
				case OfferType.XeThreeMonthCC:
					return "XeThreeMonthCC";
				case OfferType.XeMonthlyCC:
					return "XeMonthlyCC";
				case OfferType.XeOneMonthTrial:
					return "XeOneMonthTrial";
			}
			//ConsoleX.WriteLine(CC.RED,"Don't know how to get voucher for offer 0x"+t.ToString("X"));
			//return "";
		}

		public static int GetOfferLengthFromOffer(OfferType t)
		{
			switch (t)
			{
				case OfferType.XeFree:
					return (int) OfferLength.XeFree;
				case OfferType.XeMigration:
					return (int) OfferLength.XeMigration;
				case OfferType.XeThreeYearCC:
					return (int) OfferLength.XeThreeYearCC;
				case OfferType.XeTwoYearCC:
					return (int) OfferLength.XeTwoYearCC;
				case OfferType.XeYearlyCC:
					return (int) OfferLength.XeYearlyCC;                
                case OfferType.XeTwelveMonthProm:
                    return (int)OfferLength.XeTwelveMonthProm;
				case OfferType.XeThreeMonthCC:
					return (int) OfferLength.XeThreeMonthCC;
				case OfferType.XeMonthlyCC:
					return (int) OfferLength.XeMonthlyCC;
				case OfferType.XeOneMonthTrial:
					return (int) OfferLength.XeOneMonthTrial;
				case OfferType.XeOneMonthPrepaid:
					return (int) OfferLength.XeOneMonthPrepaid;
				case OfferType.XeThreeMonthPrepaid:
					return (int) OfferLength.XeThreeMonthPrepaid;
				case OfferType.XeTwelveMonthPrepaid:
					return (int) OfferLength.XeTwelveMonthPrepaid;
				case OfferType.XeThirteenMonthPrepaid:
					return (int) OfferLength.XeThirteenMonthPrepaid;
				case OfferType.XeTwentyFourMonthPrepaid:
					return (int) OfferLength.XeTwentyFourMonthPrepaid;
				case OfferType.GameSubMonthlyCC:
					return (int) OfferLength.GameSubMonthlyCC;
                case OfferType.GameSubQuarterlyCC:
                    return (int) OfferLength.GameSubQuarterlyCC;
                case OfferType.GameSubYearlyCC:
                    return (int) OfferLength.GameSubYearlyCC;
                case OfferType.GameSub1moPrepaid:
                    return (int) OfferLength.GameSub1moPrepaid;
                case OfferType.GameSub3moPrepaid:
                    return (int) OfferLength.GameSub3moPrepaid;
                case OfferType.GameSub12moPrepaid:
                    return (int) OfferLength.GameSub12moPrepaid;
                case OfferType.ArgoSubMonthlyCC:
                    return (int)OfferLength.ArgoSubMonthlyCC;
                case OfferType.ArgoSubQuarterlyCC:
                    return (int)OfferLength.ArgoSubQuarterlyCC;
                case OfferType.ArgoSubYearlyCC:
                    return (int)OfferLength.ArgoSubYearlyCC;
                case OfferType.ArgoSub1moPrepaid:
                    return (int)OfferLength.ArgoSub1moPrepaid;
                case OfferType.ArgoSub3moPrepaid:
                    return (int)OfferLength.ArgoSub3moPrepaid;
                case OfferType.ArgoSub12moPrepaid:
                    return (int)OfferLength.ArgoSub12moPrepaid;
                case OfferType.ArgoSub14DayTrial:
                    return (int)OfferLength.ArgoSub14DayTrial;
				case OfferType.XeThirtySixMonthPrepaid:
					return (int) OfferLength.XeThirtySixMonthPrepaid;
				default:
					return -1;
			}
		}

		public static string GetOfferFriendlyName(OfferType t)
		{
			switch (t)
			{
				case OfferType.XeFree:
					return "XeFree";
				case OfferType.XeMigration:
					return "XeMigration";
				case OfferType.XeThreeYearCC:
					return "XeThreeYearCC";
				case OfferType.XeTwoYearCC:
					return "XeTwoYearCC";
				case OfferType.XeYearlyCC:
					return "XeYearlyCC";                
                case OfferType.XeTwelveMonthProm:
                    return "XeTwelveMonthPromotion";
                case OfferType.XeThreeMonthCC:
					return "XeThreeMonthCC";
				case OfferType.XeMonthlyCC:
					return "XeMonthlyCC";
				case OfferType.XeOneMonthTrial:
					return "XeOneMonthTrial";
				case OfferType.XeOneMonthPrepaid:
					return "XeOneMonthPrepaid";
				case OfferType.XeThreeMonthPrepaid:
					return "XeThreeMonthPrepaid";
				case OfferType.XeTwelveMonthPrepaid:
					return "XeTwelveMonthPrepaid";
				case OfferType.XeThirteenMonthPrepaid:
					return "XeThirteenMonthPrepaid";
				case OfferType.XeTwentyFourMonthPrepaid:
					return "XeTwentyFourMonthPrepaid";
				case OfferType.XeThirtySixMonthPrepaid:
					return "XeThirtySixMonthPrepaid";
				case OfferType.GameSubMonthlyCC:
					return "GameSubMonthlyCC";
                case OfferType.GameSubQuarterlyCC:
                    return "GameSubQuarterlyCC";
                case OfferType.GameSubYearlyCC:
                    return "GameSubYearlyCC";
                case OfferType.GameSub1moPrepaid:
                    return "GameSub1moPrepaid";
                case OfferType.GameSub3moPrepaid:
                    return "GameSub3moPrepaid";
                case OfferType.GameSub12moPrepaid:
                    return "GameSub12moPrepaid";
                case OfferType.ArgoSubMonthlyCC:
                    return "ArgoSubMonthlyCC";
                case OfferType.ArgoSubQuarterlyCC:
                    return "ArgoSubQuarterlyCC";
                case OfferType.ArgoSubYearlyCC:
                    return "ArgoSubYearlyCC";
                case OfferType.ArgoSub1moPrepaid:
                    return "ArgoSub1moPrepaid";
                case OfferType.ArgoSub3moPrepaid:
                    return "ArgoSub3moPrepaid";
                case OfferType.ArgoSub12moPrepaid:
                    return "ArgoSub12moPrepaid";  
                case OfferType.ArgoSub14DayTrial:
                    return "ArgoSub14DayTrial";
				default:
					return "TODO:Insert Friendly Name Here";
			}
		}

        public static bool IsOfferLengthInDays(OfferType ot)
        {
            switch(ot)
            {
                case OfferType.ArgoSub14DayTrial:
                    return true;
            }
            return false;
        }
		public Global()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\Form1.cs ===
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Reflection;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using Microsoft.SPG.Test.Billing;
using System.IO;
using System.Diagnostics;
using System.Threading;
using ServerTestFramework.LiveService.UserAccount;
using System.Xml;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for Form1.
	/// </summary>
	public class Form1 : System.Windows.Forms.Form
	{
		#region GLOBALS
		public bool logFileClicked;
		public DateTime startTime, endTime;
		public static DateTime currTime;
		Script scriptRunning;
		public static BillingTestClient client = null;
        public static byte[] Countries;
		private System.Windows.Forms.Button bGo;
		public System.Windows.Forms.Button bLogFile;
		private System.Windows.Forms.Timer timer;
		private System.Windows.Forms.ImageList imageList1;
		private System.Windows.Forms.Panel panel1;
		private System.Windows.Forms.Panel panel2;
		public System.Windows.Forms.ListView lRolls;
		private System.Windows.Forms.ColumnHeader colTime;
		private System.Windows.Forms.Panel panel3;
		private System.Windows.Forms.GroupBox groupBox2;
		private System.Windows.Forms.ListView lThreads;
		private System.Windows.Forms.ColumnHeader ColName;
		private System.Windows.Forms.ColumnHeader columnHeader1;
		private System.Windows.Forms.ColumnHeader colFailures;
		private System.Windows.Forms.ComboBox cbScripts;
		public System.Windows.Forms.Label lStatus;
		private System.Windows.Forms.TextBox tLog;
		private System.ComponentModel.IContainer components;
		CaseItem selectedLogItem=null;
		int selectedLogItemLineCount=-1;
		#endregion

		//****************************************************************************
		//*******************    STATIC UI CODE     **********************************
		//****************************************************************************
		#region UI CODE
		public Form1()
		{
			// Required for Windows Form Designer support
			InitializeComponent();
			UpdateScriptComboBox();
            BuildCountriesList();
		}

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        private static void BuildCountriesList()
        {
            ServerTestFramework.LiveService.UserAccount.XeUser.Country country = new ServerTestFramework.LiveService.UserAccount.XeUser.Country();
            FieldInfo [] fInfo = typeof(ServerTestFramework.LiveService.UserAccount.XeUser.Country).GetFields();
            List<byte> result = new List<byte>();
            for (int i = 1; i < fInfo.Length; i++)
            {
                // exclude GR and CO where Live is not provided and CN where Live is paid via BOBO
                if ((XeUser.Country)fInfo[i].GetValue(country) == XeUser.Country.GR ||
                    (XeUser.Country)fInfo[i].GetValue(country) == XeUser.Country.CN ||
                    (XeUser.Country)fInfo[i].GetValue(country) == XeUser.Country.CO )
                    continue;
                result.Add((byte) fInfo[i].GetValue(country));
            }
            Countries = result.ToArray();

        }

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
		{
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.components = new System.ComponentModel.Container();
			System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(Form1));
			this.bGo = new System.Windows.Forms.Button();
			this.bLogFile = new System.Windows.Forms.Button();
			this.imageList1 = new System.Windows.Forms.ImageList(this.components);
			this.timer = new System.Windows.Forms.Timer(this.components);
			this.panel1 = new System.Windows.Forms.Panel();
			this.lStatus = new System.Windows.Forms.Label();
			this.cbScripts = new System.Windows.Forms.ComboBox();
			this.panel2 = new System.Windows.Forms.Panel();
			this.lRolls = new System.Windows.Forms.ListView();
			this.colTime = new System.Windows.Forms.ColumnHeader();
			this.panel3 = new System.Windows.Forms.Panel();
			this.groupBox2 = new System.Windows.Forms.GroupBox();
			this.tLog = new System.Windows.Forms.TextBox();
			this.lThreads = new System.Windows.Forms.ListView();
			this.ColName = new System.Windows.Forms.ColumnHeader();
			this.columnHeader1 = new System.Windows.Forms.ColumnHeader();
			this.colFailures = new System.Windows.Forms.ColumnHeader();
			this.panel1.SuspendLayout();
			this.panel2.SuspendLayout();
			this.panel3.SuspendLayout();
			this.groupBox2.SuspendLayout();
			this.SuspendLayout();
			// 
			// bGo
			// 
			this.bGo.Location = new System.Drawing.Point(328, 8);
			this.bGo.Name = "bGo";
			this.bGo.TabIndex = 0;
			this.bGo.Text = "Go";
			this.bGo.Click += new System.EventHandler(this.bGo_Click);
			// 
			// bLogFile
			// 
			this.bLogFile.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.bLogFile.Enabled = false;
			this.bLogFile.Location = new System.Drawing.Point(608, 8);
			this.bLogFile.Name = "bLogFile";
			this.bLogFile.TabIndex = 3;
			this.bLogFile.Text = "Log File";
			this.bLogFile.Click += new System.EventHandler(this.bLogFile_Click);
			// 
			// imageList1
			// 
			this.imageList1.ImageSize = new System.Drawing.Size(16, 16);
			this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageList1.ImageStream")));
			this.imageList1.TransparentColor = System.Drawing.Color.Transparent;
			// 
			// timer
			// 
			this.timer.Interval = 500;
			this.timer.Tick += new System.EventHandler(this.timer_Tick);
			// 
			// panel1
			// 
			this.panel1.Controls.Add(this.lStatus);
			this.panel1.Controls.Add(this.cbScripts);
			this.panel1.Controls.Add(this.bGo);
			this.panel1.Controls.Add(this.bLogFile);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.panel1.Location = new System.Drawing.Point(0, 0);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(688, 40);
			this.panel1.TabIndex = 3;
			this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);
			// 
			// lStatus
			// 
			this.lStatus.Location = new System.Drawing.Point(408, 12);
			this.lStatus.Name = "lStatus";
			this.lStatus.Size = new System.Drawing.Size(184, 16);
			this.lStatus.TabIndex = 2;
			this.lStatus.Text = "Hit Go to start.";
			// 
			// cbScripts
			// 
			this.cbScripts.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.cbScripts.Location = new System.Drawing.Point(8, 8);
			this.cbScripts.Name = "cbScripts";
			this.cbScripts.Size = new System.Drawing.Size(312, 21);
			this.cbScripts.TabIndex = 1;
			this.cbScripts.SelectedIndexChanged += new System.EventHandler(this.cbScripts_SelectedIndexChanged);
			// 
			// panel2
			// 
			this.panel2.Controls.Add(this.lRolls);
			this.panel2.Dock = System.Windows.Forms.DockStyle.Left;
			this.panel2.Location = new System.Drawing.Point(0, 40);
			this.panel2.Name = "panel2";
			this.panel2.Size = new System.Drawing.Size(272, 414);
			this.panel2.TabIndex = 5;
			// 
			// lRolls
			// 
			this.lRolls.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
																					 this.colTime});
			this.lRolls.Dock = System.Windows.Forms.DockStyle.Fill;
			this.lRolls.FullRowSelect = true;
			this.lRolls.Location = new System.Drawing.Point(0, 0);
			this.lRolls.MultiSelect = false;
			this.lRolls.Name = "lRolls";
			this.lRolls.Size = new System.Drawing.Size(272, 414);
			this.lRolls.TabIndex = 5;
			this.lRolls.View = System.Windows.Forms.View.Details;
			// 
			// colTime
			// 
			this.colTime.Text = "Time Rolls";
			this.colTime.Width = 400;
			// 
			// panel3
			// 
			this.panel3.Controls.Add(this.groupBox2);
			this.panel3.Dock = System.Windows.Forms.DockStyle.Fill;
			this.panel3.Location = new System.Drawing.Point(272, 40);
			this.panel3.Name = "panel3";
			this.panel3.Size = new System.Drawing.Size(416, 414);
			this.panel3.TabIndex = 6;
			// 
			// groupBox2
			// 
			this.groupBox2.Controls.Add(this.tLog);
			this.groupBox2.Controls.Add(this.lThreads);
			this.groupBox2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.groupBox2.Location = new System.Drawing.Point(0, 0);
			this.groupBox2.Name = "groupBox2";
			this.groupBox2.Size = new System.Drawing.Size(416, 414);
			this.groupBox2.TabIndex = 3;
			this.groupBox2.TabStop = false;
			this.groupBox2.Text = " Threads ";
			// 
			// tLog
			// 
			this.tLog.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tLog.ImeMode = System.Windows.Forms.ImeMode.On;
			this.tLog.Location = new System.Drawing.Point(3, 238);
			this.tLog.MaxLength = 1048576;
			this.tLog.Multiline = true;
			this.tLog.Name = "tLog";
			this.tLog.ReadOnly = true;
			this.tLog.ScrollBars = System.Windows.Forms.ScrollBars.Both;
			this.tLog.Size = new System.Drawing.Size(410, 173);
			this.tLog.TabIndex = 3;
			this.tLog.Text = "";
			this.tLog.WordWrap = false;
			// 
			// lThreads
			// 
			this.lThreads.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
																					   this.ColName,
																					   this.columnHeader1,
																					   this.colFailures});
			this.lThreads.Dock = System.Windows.Forms.DockStyle.Top;
			this.lThreads.FullRowSelect = true;
			this.lThreads.GridLines = true;
			this.lThreads.LabelWrap = false;
			this.lThreads.Location = new System.Drawing.Point(3, 16);
			this.lThreads.MultiSelect = false;
			this.lThreads.Name = "lThreads";
			this.lThreads.Size = new System.Drawing.Size(410, 222);
			this.lThreads.SmallImageList = this.imageList1;
			this.lThreads.TabIndex = 2;
			this.lThreads.View = System.Windows.Forms.View.Details;
			this.lThreads.SelectedIndexChanged += new System.EventHandler(this.lThreads_SelectedIndexChanged);
			// 
			// ColName
			// 
			this.ColName.Text = "Thread";
			this.ColName.Width = 400;
			// 
			// columnHeader1
			// 
			this.columnHeader1.Text = "State";
			this.columnHeader1.Width = 120;
			// 
			// colFailures
			// 
			this.colFailures.Text = "Failures";
			this.colFailures.Width = 40;
			// 
			// Form1
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(688, 454);
			this.Controls.Add(this.panel3);
			this.Controls.Add(this.panel2);
			this.Controls.Add(this.panel1);
			this.Name = "Form1";
			this.Text = "Auto Renewal Test Tool";
			this.panel1.ResumeLayout(false);
			this.panel2.ResumeLayout(false);
			this.panel3.ResumeLayout(false);
			this.groupBox2.ResumeLayout(false);
			this.ResumeLayout(false);

            //New For VS 2005 debuggin: Prevents exception being thrown for cross thread calls
            System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls = false;
		}
		#endregion

		// Entry point to starting tests
		private void bGo_Click(object sender, System.EventArgs e)
		{
			cbScripts.Enabled=false;
			bGo.Enabled=false;
			
			Global.ResultArray = new ArrayList();
			Global.ResultIndex = 0;

			// Copy test case names from Script to Result Array
			
			foreach(New_Code.LightweightTracker lwo in scriptRunning.lightweightObjects)
			{
				Global.ResultArray.Add(new CaseResult(lwo.Name, Global.TestCode.Failed, null));
			}

			startTime = DateTime.Now;
		
			// Get current time on 1-box
			if (RenewalMatrix.New_Code.Config.CallOneBox)
			{
				client = new BillingTestClient();
                Console.WriteLine(" run periodic processing at the begin" +  Form1.client.RunPeriodic(""));
                currTime = TimeZone.CurrentTimeZone.ToLocalTime(client.GetClockTime());
				New_Code.Config.StartDateTime = currTime;
                //Form1.client.RollClock(12, "days");
			}
			else
			{
				New_Code.Config.StartDateTime = DateTime.Now;
			}

			lRolls.Items.Add(new ListViewItem("Start time: " + currTime.ToString()));

			scriptRunning.Go();
			PopulateThreadList();
			timer.Enabled=true;
		}

		void PopulateThreadList()
		{
			lThreads.Items.Clear();
			foreach (New_Code.LightweightTracker lwt in scriptRunning.lightweightObjects)
			{
				lThreads.Items.Add(new CaseItem(lwt));
			}
		}

		private void UpdateScriptComboBox()
		{
			Assembly asm=System.Reflection.Assembly.GetExecutingAssembly();
			Type []allTypes=asm.GetTypes();
			cbScripts.Items.Clear();
			foreach (Type t in allTypes)
			{			
				if (t.BaseType==typeof(Script))
					cbScripts.Items.Add(t);
			}
			cbScripts.SelectedIndex=0;
		}

		// Useless
		private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{		
		}
		#endregion
		//****************************************************************************
		//*****************    END STATIC UI CODE    *********************************
		//****************************************************************************

		//****************************************************************************
		//*****************    INITIALIZATION CODE    ********************************
		//****************************************************************************
		#region INIT CODE
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main() 
		{

			// Initialize STF
            XmlDocument config = new XmlDataDocument();
            try
            {
                config.Load("stf.xml");
            }
            catch (System.IO.FileNotFoundException)
            {
                Console.WriteLine("Error: Unable to find config file \"stf.xml\" in the current directory.");
                return;
            }
            ServerTestFramework.Global.Initialize(config);
            string envName = "yf-xblob2";
            bool found = false;
            foreach (ServerTestFramework.EnvironmentSetting npdbSetting in ServerTestFramework.Global.EnvironmentList)
            {
                if (npdbSetting.Environment.ToLower() == envName)
                {
                    ServerTestFramework.Global.CurrentEnvironment = npdbSetting;
                    found = true;
                }
            }
            if (!found)
            {
                Console.WriteLine("Error - unknown environment '{0}' specified (not in stf.xml?).", envName);
                return;
            }

            ServerTestFramework.Global.ResetEnvironment();

			//Console.WriteLine("Using UACS "+ServerTestFramework.Global.Env.UACSServer.IPToString());

			// Get current time on 1-box / Test conenction to one box
			if (RenewalMatrix.New_Code.Config.CallOneBox)
			{
				client = new BillingTestClient();
                //Console.WriteLine(" run periodic processing at the begin" +  Form1.client.RunPeriodic(""));
				currTime = TimeZone.CurrentTimeZone.ToLocalTime(client.GetClockTime());
				New_Code.Config.StartDateTime = currTime;
                
			}
			else
			{
				New_Code.Config.StartDateTime = DateTime.Now;
			}

			// Do global mappings 
			// Won't work for this one since offers overlap
			//Global.MapOffersToOfferDurations();
			// Should work because every points offer is unique (no min/max)
			//Global.MapPointsOffersToPointsOfferValues();

			// Start application
			New_Code.Config.UIAccessPoint = new Form1();
			Application.Run(New_Code.Config.UIAccessPoint);
			ServerTestFramework.STF.Uninitialize();
		}
		#endregion
		//****************************************************************************
		//***************    END INITIALIZATION CODE    ******************************
		//****************************************************************************

		//****************************************************************************
		//******************   ASYNC UI TEST CODE    *********************************
		//****************************************************************************
		#region ASYNC CODE
		void UpdateSelectedThreadLog()
		{
			bool update=false;

			if (lThreads.SelectedItems.Count>0)
			{
				CaseItem cs=(CaseItem) lThreads.SelectedItems[0];
				if (cs==null)
					return;
				
				// Try not to update unless there is reason to update.
				if (cs!=selectedLogItem)
					update=true;
				else
				{
					if (cs.lt.GetLog().Count!= selectedLogItemLineCount)
						update = true;
				}
				selectedLogItem=cs;

				if (update)
				{
					tLog.Text = "";

					ArrayList log = cs.lt.GetLog();
					selectedLogItemLineCount=cs.lt.GetLog().Count;
					foreach(string s in log)
					{
						tLog.Text = tLog.Text + s + "\r\n";
					}
				}
			}
		}

		// Main test code (does clock rolls)
		private void timer_Tick(object sender, System.EventArgs e)
		{
			// Update log
			UpdateSelectedThreadLog();
			lThreads.SuspendLayout();
			foreach(CaseItem ci in lThreads.Items)
			{
				ci.Update();
			}
			lThreads.ResumeLayout();
		}

		private void lThreads_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			UpdateSelectedThreadLog();		
		}

		private void cbScripts_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			Type t=cbScripts.SelectedItem as Type;
			try
			{
				scriptRunning=(t.GetConstructor(System.Type.EmptyTypes).Invoke(null) as Script);
				PopulateThreadList();
			}
			catch(System.Exception f)
			{
				System.Diagnostics.Debug.WriteLine(f.Message);
				System.Diagnostics.Debug.WriteLine(f.StackTrace);
			}
		}
		#endregion
		//****************************************************************************
		//****************   END ASYNC UI TEST CODE    *******************************
		//****************************************************************************

		//****************************************************************************
		//****************   REPORTING TEST CODE    **********************************
		//****************************************************************************
		#region REPORTING CODE
		private void bLogFile_Click(object sender, System.EventArgs e)
		{
			logFileClicked = true;
			bLogFile.Enabled = false;

			try
			{
				//string nm = @"C:\BillingLogs\RenewalMatrixReport_" + DateTime.Now.ToString() + ".html";
				string nm = System.Environment.GetEnvironmentVariable("TEMP") + "\\RenewalMatrixReport_" + DateTime.Now.Ticks.ToString("X8") + ".html";
				string rpt = GenerateReport();
				TextWriter tw = File.CreateText(nm);
				tw.Write(rpt);
				tw.Close();
	
				Process p = new Process();
				p.StartInfo.FileName = nm;
				p.StartInfo.UseShellExecute = true;
				p.Start();
			}
			catch(System.Exception exc)
			{
				MessageBox.Show(this, exc.Message + "\n" + exc.StackTrace);
			}

			// Allow to log more than once, incase we hit the button too early
			bLogFile.Enabled = true;
		}

		// Taken from bscriver's WSMonitor test suite
		public string GenerateReport()
		{
			StringBuilder sb = new StringBuilder(), sb2;

			// HTML Header goodies
			sb.Append("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" >\n");
			sb.Append("<HTML>\n<HEAD>\n");
			sb.Append("<title>Renewal Matrix Test Report</title>\n");
			sb.Append("</HEAD>\n<BODY>\n");

			// Page Title & Server information
			sb.Append("<TABLE BORDER=0><tr><td>\n");
			sb.Append("<TABLE BORDER=0>\n");
			sb.Append("<tr><td colspan=2><H1>Renewal&nbsp;Matrix&nbsp;Test&nbsp;Report</H1></td></tr>\n");
			sb.Append("<tr><td width=50%><b>Start:</b> ").Append(startTime.ToString()).Append("</td>\n");
			sb.Append("    <td width=50%><b>End:</b> ").Append(endTime.ToString()).Append("</td></tr>\n");
			sb.Append("</TABLE></td>\n");

			sb.Append("</tr></TABLE>\n\n");

			// Go thru ResultArray and display results
			// CaseResult has the following fields: TestName, TestStatus, TestErrors
			// If test passed, just display name and result; if it failed, add error output

			// Now we get into the uber fun part. This will be two tables side by side.  The left will be the tests,
			// the right the apis.  The test list will be test name and status, the apis list will be api, calls, completed, successes, failures.
			// The test names will link to another portion on the same page that contains detailed results IF there was an error or other data.
			sb.Append("<TABLE BORDER=0>\n");

			// Construct the test portion in a separate string builder
			sb2 = new StringBuilder();
			sb2.Append("<TABLE BORDER=1>\n<tr><th>Test Name</th><th>Result</th></tr>\n");

			StringBuilder sbTemp;
			ArrayList alFailed = new ArrayList(), alSuccessful = new ArrayList(); //, alUnsupported = new ArrayList(), alSkipped = new ArrayList();

			foreach(CaseResult cr in Global.ResultArray)
			{
				sbTemp = new StringBuilder();

				if(cr.TestStatus != Global.TestCode.Passed)
				{
					sbTemp.Append("<tr style='background-color:red'><td>").Append(cr.TestName).Append("</td>").Append("<td><a href=\"#").Append(cr.TestName).Append("\">").Append(cr.TestStatus).Append("</a></td></tr>\n");
					alFailed.Add(sbTemp.ToString());
				}
				else
				{
					sbTemp.Append("<tr style='background-color:green'><td>").Append(cr.TestName).Append("</td><td align=center>").Append(cr.TestStatus).Append("</td></tr>\n");
					alSuccessful.Add(sbTemp.ToString());
				}
			}

			foreach(string s in alFailed)
				sb2.Append(s);

			foreach(string s in alSuccessful)
				sb2.Append(s);

			sb2.Append("</TABLE>\n");

			sb.Append("<tr><td valign=top>").Append(sb2.ToString()).Append("</td><td valign=top>");
			sb.Append("</td></tr>\n");
			sb.Append("</TABLE>\n<hr>\n");

			StringBuilder sbFailed = new StringBuilder();

			foreach(CaseResult cr in Global.ResultArray)
			{
				if (cr != null)
				{
					if(cr.TestStatus != Global.TestCode.Passed)
					{
						StringBuilder sbErrors = new StringBuilder();

						if (cr.TestErrors != null)
						{
							foreach(string s in cr.TestErrors)						
								sbErrors.Append(s).Append("\n");
						}
					
						sbFailed.Append("<h3><a name=\"#").Append(cr.TestName).Append("\">").Append(cr.TestName).Append("</a></h3>\n<pre>").Append(sbErrors).Append("</pre><hr>\n");
					}
				}
				// If test passed, there's no error info to be logged
			}

			sb.Append(sbFailed.ToString());

			// HTML Footer data
			sb.Append("</BODY>\n</HTML>\n");

			string m = sb.ToString();
			int nl = m.Length, l = 0;
			do
			{
				l = nl;
				m = m.Replace("\r\n", "\n");
				nl = m.Length;
			} while(l != nl);
			return m.Replace("\n", "\r\n");
		}
		#endregion

		//****************************************************************************
		//**************   END REPORTING TEST CODE    ********************************
		//****************************************************************************
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\ScriptAllCases.cs ===
#define SKIP_BETA_PROMO_AND_TEST
#define KOREA_FIX

using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptAllCases.
	/// </summary>

	public class ScriptAllCases : Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 2 months",TimeRollType.month, 2);
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days",TimeRollType.day,15);
		TimeRoll roll2		= new TimeRoll("3rd roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll3		= new TimeRoll("4th roll - 15 days",TimeRollType.day,15);
		TimeRoll roll4		= new TimeRoll("5th roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll5		= new TimeRoll("6th roll - 15 days",TimeRollType.day,15);
		TimeRoll roll6		= new TimeRoll("7th roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll7		= new TimeRoll("8th roll - 7 months",TimeRollType.month,7);
		TimeRoll roll8		= new TimeRoll("9th roll - 15 days",TimeRollType.day,15);
		TimeRoll roll9		= new TimeRoll("10th roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll10		= new TimeRoll("11th roll - 11 months",TimeRollType.month,11);

		override public ArrayList GetRolls()
		{
			TimeRoll[] timeRolls = new TimeRoll[] {roll0,roll1,roll2,roll3,roll4,roll5,roll6,roll7,roll8,roll9,roll10};
			ArrayList timeRollContainers = new ArrayList();
			timeRollContainers.Add(timeRolls);
			return timeRollContainers;
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();

			string countryname;
			Owner.Country countrycode;

			// Debug variables for only running one test case
			bool fOneOnly = false;
			bool fRunBetaPromoTest = false;
			bool fOnlyExpired = false;
			bool fNoExpired = false;
			Owner.Country preferred = Owner.Country.US ;
			Owner.Country korea = Owner.Country.KR;
			
			// Define the countries default to monthly autorenewal behavior
			ArrayList defaultAutoRenewMonthlyCountries = new ArrayList();
			defaultAutoRenewMonthlyCountries.Add(Owner.Country.JP);

			// Define the countries with beta offers
			ArrayList betaPromoTestExistCountries = new ArrayList();
			betaPromoTestExistCountries.Add(Owner.Country.US);
			betaPromoTestExistCountries.Add(Owner.Country.CA);
			betaPromoTestExistCountries.Add(Owner.Country.JP);
			betaPromoTestExistCountries.Add(Owner.Country.UK);
			betaPromoTestExistCountries.Add(Owner.Country.FR);
			betaPromoTestExistCountries.Add(Owner.Country.DE);

			// Build offering Array lists for eligible enumeration testing
			ArrayList defaultNonVoucherOffers = new ArrayList();
			defaultNonVoucherOffers.Add(Global.OfferType.Monthly599);
			defaultNonVoucherOffers.Add(Global.OfferType.Yearly4999);

			ArrayList defaultNonVoucherOffersFromMonthly = new ArrayList();
			defaultNonVoucherOffersFromMonthly.Add(Global.OfferType.Yearly4999);

			ArrayList defaultOnesVoucherOffers = new ArrayList();
			defaultOnesVoucherOffers.Add(Global.OfferType.LaunchOffer);

			ArrayList defaultTwosVoucherOffers = new ArrayList();
			defaultTwosVoucherOffers.Add(Global.OfferType.PrepaidCard);

			ArrayList defaultCsVoucherOffers = new ArrayList();
			defaultCsVoucherOffers.Add(Global.OfferType.ThreeMonthCard);
			
			ArrayList emptyOffersList = new ArrayList();

			// FROM SCRIPTALLCOUNTRIES
			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				if(countrycode == korea)
					continue;

				if(fOneOnly && preferred != countrycode)
					continue;

				if(betaPromoTestExistCountries.Contains(countrycode))
					fRunBetaPromoTest = true;

				caselist.Add(new Case(countryname + " - Launch Offer (default renewal)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),
					new StepWaitForRoll		(roll10							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Launch Offer (non-default non-voucher renewal)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to LO)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to PP)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to 3M)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Pre Paid (default renewal)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the annual prepaid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the annual prepaid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),                                                                  
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll10							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Pre Paid (non-default non-voucher renewal)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to LO)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to PP)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to 3M)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Three Month (default renewal)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)                 
					));

				caselist.Add(new Case(countryname + " - Three Month (non-default non-voucher renewal)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as non-default non-voucher offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify renewal to non-default non-voucher offer
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to LO)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to PP)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to 3M)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo pre-paid offer
					false),
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer                                  
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(Global.OfferType.ThreeMonthCard)			// Verify successful renewal to 3 month
					));

				// In addition to testing the renewals from the game trial offer, this case will also verify
				// propper offer enumeration from monthly and yearly billed offers
				caselist.Add(new Case(countryname + " - Game Trial (default renewal)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.Yearly4999    ),          // Everyone should be yearly at this point, because
					// yearly hasn't gotten to the end of their first 12 months yet
					new StepVerifyEnumerate(defaultNonVoucherOffers),					// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll10							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    ),          // Verify current sub is in expected renewal
					new StepVerifyEnumerate(defaultNonVoucherOffersFromMonthly),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444")				// Verify that we can't see any 4's voucher offers as renewals
					));

				caselist.Add(new Case(countryname + " - Game Trial (non-default non-voucher renewal)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to LO)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to PP)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to 3M)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (default renewal)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.Yearly4999    ),          // Everyone should be yearly at this point, because
					// yearly hasn't gotten to the end of their first 12 months yet
					new StepWaitForRoll		(roll10							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (non-default non-voucher renewal)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to LO)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to PP)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to 3M)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));
				
				if(fRunBetaPromoTest)
				{
#if !SKIP_BETA_PROMO_AND_TEST
					if(fStarterKitToAnnualAutoRenew)
					{

						caselist.Add(new Case(countryname + " - Beta1",
							new StepCreateAccount	("66666", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta1 offer
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta2",
							new StepCreateAccount	("77777", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta2 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta3",
							new StepCreateAccount	("88888", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta3 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta4",
							new StepCreateAccount	("99999", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta4 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Promo",
							new StepCreateAccount	("AAAAA", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the promo offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Test",
							new StepCreateAccount	("BBBBB", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the test offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

					}
					else // if (!fStarterKitToAnnualAutoRenew)
					{
						caselist.Add(new Case(countryname + " - Beta1",
							new StepCreateAccount	("66666", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta1 offer
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta2",
							new StepCreateAccount	("77777", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta2 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta3",
							new StepCreateAccount	("88888", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta3 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta4",
							new StepCreateAccount	("99999", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta4 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Promo",
							new StepCreateAccount	("AAAAA", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the promo offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						Ccaselist.Add(new Case(countryname + " - Test",
							new StepCreateAccount	("BBBBB", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the test offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll7							),          // Time advance 10 months
							new StepWaitForRoll		(roll10							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

					}
#endif
				}
			}

			// FROM SCRIPTINTEGRATIONCASES
			foreach(byte cc in Owner.Countries)
			{
				// Yearly to others
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();
				if( countrycode == korea)
					continue;
				if(fOneOnly && (preferred != countrycode))
					continue;

				if(!fOnlyExpired)
				{
					StepVerifyOpenBalance initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from MB to PP within the first month
					caselist.Add(new Case(countryname + " - MB to PP .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from MB to LO within the first month
					caselist.Add(new Case(countryname + " - MB to LO .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from MB to 3M within the first month
					caselist.Add(new Case(countryname + " - MB to 3M .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from YB to PP within the first month
					caselist.Add(new Case(countryname + " - YB to PP .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from YB to LO within the first month
					caselist.Add(new Case(countryname + " - YB to LO .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from YB to 3M within the first month
					caselist.Add(new Case(countryname + " - YB to 3M .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from MB to PP within the second month
					caselist.Add(new Case(countryname + " - MB to PP 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from MB to LO within the second month
					caselist.Add(new Case(countryname + " - MB to LO 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						initialStep,
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from MB to 3M within the second month
					caselist.Add(new Case(countryname + " - MB to 3M 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from YB to PP within the second month
					caselist.Add(new Case(countryname + " - YB to PP 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from YB to LO within the second month
					caselist.Add(new Case(countryname + " - YB to LO 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					// This case verifies the refund of a conversion from YB to 3M within the second month
					caselist.Add(new Case(countryname + " - YB to 3M 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					// This case verifies the refund of a conversion from MB to PP within the third month
					caselist.Add(new Case(countryname + " - MB to PP 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					// This case verifies the refund of a conversion from MB to LO within the third month
					caselist.Add(new Case(countryname + " - MB to LO 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					// This case verifies the refund of a conversion from MB to 3M within the third month
					caselist.Add(new Case(countryname + " - MB to 3M 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					// This case verifies the refund of a conversion from YB to PP within the third month
					caselist.Add(new Case(countryname + " - YB to PP 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					// This case verifies the refund of a conversion from YB to LO within the third month
					caselist.Add(new Case(countryname + " - YB to LO 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					// This case verifies the refund of a conversion from YB to 3M within the third month
					caselist.Add(new Case(countryname + " - YB to 3M 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					// This case verifies the conversion from MB to PP at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to PP 0 Months In", //true, 
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from MB to LO at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to LO 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from MB to 3M at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to 3M 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from YB to PP at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to PP 0 Months In", //true, 
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from YB to LO at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to LO 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from YB to 3M at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to 3M 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This case verifies the conversion from MB to PP at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to PP NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from MB to LO at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to LO NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from MB to 3M at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to 3M NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies the conversion from YB to PP at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to PP NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from YB to LO at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to LO NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from YB to 3M at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to 3M NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard	)
						));

					// This test validates that we have a 0 balance when we've converted while in declines
					// but before a violation was added
					caselist.Add(new Case(countryname + " - MB to PP Violations Convert with Zero Balance", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal      (Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(3, false						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepVerify			(Global.OfferType.PrepaidCard   ),
						//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems)
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, true)
						));
				
					// This test verifies that the monthly offer can be converted into the 12 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - MB to PP Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the starter-kit offer when suspended
					caselist.Add(new Case(countryname + " - MB to LO Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the 3 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - MB to 3M Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 12 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - YB to PP Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the starter-kit offer when suspended
					caselist.Add(new Case(countryname + " - YB to LO Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 3-month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - YB to 3M Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// TESTING GRACE PERIODS
					// ADD CASES FOR GAME TRIAL, CONSOLE TRIAL, PREPAID, 3MONTH AND STARTER KIT
					// This case tests that the grace period on the monthly offer is 30 days
					caselist.Add(new Case(countryname + " - MB Grace Period", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
						));

					// This case tests that the grace period on the yearly offer is 60 days
					caselist.Add(new Case(countryname + " - YB Grace Period", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
						));

					//					// This case tests that the grace period on the game trial offer is 30 days
					//					caselist.Add(new Case(countryname + " - GT Grace Period", //true,
					//						new StepWaitForRoll		(roll0							),
					//						new StepCreateAccount	("33333", countrycode			),
					////						new StepSetRenewal		(Global.OfferType.None			),
					////						new StepVerify			(Global.OfferType.GameTrial, Global.OfferType.None),
					//						new StepVerify			(Global.OfferType.GameTrial		),
					//						new StepCloseBalance	(								),
					//						new StepStopPayment		(7, true						),
					//						new StepVerify			(Global.OfferType.GameTrial		),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll1							),
					//						new StepVerify			(Global.OfferType.GameTrial		),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll3							),
					//						new StepVerify			(Global.OfferType.GameTrial		),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
					//						));
					//
					//					// This case tests that the grace period on the console trial offer is 30 days
					//					caselist.Add(new Case(countryname + " - CT Grace Period", //true,
					//						new StepWaitForRoll		(roll0							),
					//						new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					////						new StepSetRenewal		(Global.OfferType.None			),
					////						new StepVerify			(Global.OfferType.ConsoleTrial, Global.OfferType.None),
					//						new StepVerify			(Global.OfferType.ConsoleTrial	),
					//						new StepCloseBalance	(								),
					//						new StepStopPayment		(7, true						),
					//						new StepVerify			(Global.OfferType.ConsoleTrial	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll1							),
					//						new StepVerify			(Global.OfferType.ConsoleTrial	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll3							),
					//						new StepVerify			(Global.OfferType.ConsoleTrial	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
					//						));
					//
					//					// This case tests that the grace period on the 12 month prepaid offer is 60 days
					//					caselist.Add(new Case(countryname + " - PP Grace Period", //true,
					//						new StepWaitForRoll		(roll0							),
					//						new StepCreateAccount	("22222", countrycode			),
					////						new StepSetRenewal		(Global.OfferType.None			),
					////						new StepVerify			(Global.OfferType.PrepaidCard, Global.OfferType.None),
					//						new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepCloseBalance	(								),
					//						new StepStopPayment		(7, true						),
					//						new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll1							),
					//						new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll5							),
					//						new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
					//						));
					//
					//					// This case tests that the grace period on the starter kit offer is 60 days
					//					caselist.Add(new Case(countryname + " - LO Grace Period", //true,
					//						new StepWaitForRoll		(roll0							),
					//						new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					////						new StepSetRenewal		(Global.OfferType.None			),
					////						new StepVerify			(Global.OfferType.LaunchOffer, Global.OfferType.None),
					//						new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepCloseBalance	(								),
					//						new StepStopPayment		(7, true						),
					//						new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll1							),
					//						new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll5							),
					//						new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
					//						));
					//
					//					// This case tests that the grace period on the 3 month prepaid offer is 60 days
					//					caselist.Add(new Case(countryname + " - 3M Grace Period", //true,
					//						new StepWaitForRoll		(roll0							),
					//						new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					////						new StepSetRenewal		(Global.OfferType.None			),
					////						new StepVerify			(Global.OfferType.ThreeMonthCard, Global.OfferType.None),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepCloseBalance	(								),
					//						new StepStopPayment		(7, true						),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll1							),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
					//						new StepWaitForRoll		(roll5							),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
					//						));

					// This test verifies that the monthly offer converts to yearly
					caselist.Add(new Case(countryname + " - MB to YB Normal", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.Yearly4999	)
						//						new StepVerify			(Global.OfferType.Yearly4999, 
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.Yearly4999, 
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer doesn't convert to monthly (from the client)
					caselist.Add(new Case(countryname + " - YB to MB Normal", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepVerify			(Global.OfferType.Yearly4999	)
						//						new StepVerify			(Global.OfferType.Yearly4999, Global.OfferType.Monthly599),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.Yearly4999, Global.OfferType.Monthly599)
						));

					// This test verifies that renewing to monthly from monthly fails
					caselist.Add(new Case(countryname + " - MB to MB Normal", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.Monthly599	)
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.Monthly599	)
						));

				}

				if(!fNoExpired)
				{
					// This test verifies that the monthly offer can be converted into the 12 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - MB to PP Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the starter-kit offer when expired
					caselist.Add(new Case(countryname + " - MB to LO Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the monthly offer can be converted into the 3 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - MB to 3M Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//							new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//							new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 12 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - YB to PP Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.PrepaidCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the starter-kit offer when expired
					caselist.Add(new Case(countryname + " - YB to LO Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//						new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.LaunchOffer,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));

					// This test verifies that the yearly offer can be converted into the 3 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - YB to 3M Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						//							new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No),
						//							new StepReinstateSubscription(true						),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepSetRenewal		(
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,						
						//						StepSetRenewal.ExpectConvert.No),
						//						new StepWaitForRoll		(roll1							),
						//						new StepVerify			(Global.OfferType.ThreeMonthCard,
						//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
						));
				}

				// This case verifies that the starter kit offer can not be renewed into the game trial offer
				caselist.Add(new Case(countryname + " - LO to GT failure",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.LaunchOffer,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.LaunchOffer	)
					//					new StepVerify			(Global.OfferType.LaunchOffer,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the starter kit offer can not be renewed into the console trial offer
				caselist.Add(new Case(countryname + " - LO to CT failure",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.LaunchOffer,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.LaunchOffer	)
					//					new StepVerify			(Global.OfferType.LaunchOffer,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the 12 month prepaid offer can not be renewed into the game trial offer
				caselist.Add(new Case(countryname + " - PP to GT failure",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.PrepaidCard,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.PrepaidCard	)
					//					new StepVerify			(Global.OfferType.PrepaidCard,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the 12 month prepaid offer can not be renewed into the console trial offer
				caselist.Add(new Case(countryname + " - PP to CT failure",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.PrepaidCard,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.PrepaidCard	)
					//					new StepVerify			(Global.OfferType.PrepaidCard,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the 3 month prepaid offer can not be renewed into the game trial offer
				caselist.Add(new Case(countryname + " - 3M to GT failure",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.ThreeMonthCard,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.ThreeMonthCard)
					//					new StepVerify			(Global.OfferType.ThreeMonthCard,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the 3 month prepaid offer can not be renewed into the console trial offer
				caselist.Add(new Case(countryname + " - 3M to CT failure",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.ThreeMonthCard,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.ThreeMonthCard)
					//					new StepVerify			(Global.OfferType.ThreeMonthCard,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the game trial offer can not be renewed into the game trial offer
				caselist.Add(new Case(countryname + " - GT to GT failure",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.GameTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.GameTrial		)
					//					new StepVerify			(Global.OfferType.GameTrial,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the game trial offer can not be renewed into the console trial offer
				caselist.Add(new Case(countryname + " - GT to CT failure",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.GameTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.GameTrial		)
					//					new StepVerify			(Global.OfferType.GameTrial,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the console trial offer can not be renewed into the game trial offer
				caselist.Add(new Case(countryname + " - CT to GT failure",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.ConsoleTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.ConsoleTrial	)
					//					new StepVerify			(Global.OfferType.ConsoleTrial,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the console trial offer can not be renewed into the console trial offer
				caselist.Add(new Case(countryname + " - CT to CT failure",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.ConsoleTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.ConsoleTrial	)
					//					new StepVerify			(Global.OfferType.ConsoleTrial,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the monthly offer can not be renewed into the game trial offer
				caselist.Add(new Case(countryname + " - MB to GT failure",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.GameTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0),
					new StepVerify			(Global.OfferType.Monthly599	),
					//					new StepVerify			(Global.OfferType.Monthly599,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.Monthly599	)
					//					new StepVerify			(Global.OfferType.Monthly599,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the monthly offer can not be renewed into the console trial offer
				caselist.Add(new Case(countryname + " - MB to CT failure",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.GameTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0),
					new StepVerify			(Global.OfferType.Monthly599	),
					//					new StepVerify			(Global.OfferType.Monthly599,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.Monthly599	)
					//					new StepVerify			(Global.OfferType.Monthly599,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the yearly offer can not be renewed into the game trial offer
				caselist.Add(new Case(countryname + " - YB to GT failure",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.GameTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//					new StepVerify			(Global.OfferType.Yearly4999,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.Yearly4999	)
					//					new StepVerify			(Global.OfferType.Yearly4999,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));

				// This case verifies that the yearly offer can not be renewed into the console trial offer
				caselist.Add(new Case(countryname + " - YB to CT failure",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepVerify			(Global.OfferType.GameTrial,     
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
					new StepWaitForRoll		(roll0),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//					new StepVerify			(Global.OfferType.Yearly4999,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					new StepVerify			(Global.OfferType.Yearly4999	)
					//					new StepVerify			(Global.OfferType.Yearly4999,     
					//					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)
					));
			}

			// FROM SCRIPTCANCELCREDIT
			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				// TODO - Perform a lookup on the expected credit values to use for each test
				if( countrycode == korea)
					continue;

				if(fOneOnly && preferred != countrycode)
					continue;

				// Start the pre-paid subscription cancellation tests
				StepVerifyOpenBalance initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);

				caselist.Add(new Case(countryname + " - Cancel launch-offer sub",
					new StepCreateAccount		("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the starter kit
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in middle of starter kit
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel pre-paid sub",
					new StepCreateAccount		("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 12 month pre-paid
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in middle of 12 month pre-paid
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel three-month sub",
					new StepCreateAccount		("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 3 month pre-paid
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in middle of 3 month pre-paid
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel game-trial sub",
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in middle of game-trial
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel console-trial sub",
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCreateAccount		("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month console-trial
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in middle of console-trial
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				// Start the billed subscription cancellation tests
			
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel monthly sub in 1st month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in first month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel yearly sub in 1st month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in first month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel monthly sub in 2nd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					//					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in second month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel yearly sub in 2nd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					//					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in second month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel monthly sub in 3rd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					//					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					//					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepWaitForRoll			(roll5							),          // Time advance 1 month
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in third month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - Cancel yearly sub in 3rd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					//					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					//					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepWaitForRoll			(roll5							),          // Time advance 1 month
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepCancelSubscription	(								),          // Cancel sub in third month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false, ref initialStep)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				// This case verifies the refund of a conversion from MB to PP within the first month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - MB to PP .5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerify			(Global.OfferType.PrepaidCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to LO within the first month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - MB to LO .5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerify			(Global.OfferType.LaunchOffer,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to 3M within the first month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - MB to 3M .5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to PP within the first month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - YB to PP .5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerify			(Global.OfferType.PrepaidCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to LO within the first month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - YB to LO .5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerify			(Global.OfferType.LaunchOffer,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to 3M within the first month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - YB to 3M .5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll1							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to PP within the second month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - MB to PP 1.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerify			(Global.OfferType.PrepaidCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to LO within the second month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - MB to LO 1.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerify			(Global.OfferType.LaunchOffer,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to 3M within the second month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - MB to 3M 1.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to PP within the second month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - YB to PP 1.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerify			(Global.OfferType.PrepaidCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to LO within the second month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - YB to LO 1.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerify			(Global.OfferType.LaunchOffer,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to 3M within the second month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
				caselist.Add(new Case(countryname + " - YB to 3M 1.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll3							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.Summary),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to PP within the third month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - MB to PP 2.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll5							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerify			(Global.OfferType.PrepaidCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify2					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to LO within the third month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - MB to LO 2.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll5							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerify			(Global.OfferType.LaunchOffer,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify2					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from MB to 3M within the third month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - MB to 3M 2.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Monthly599	),
					new StepWaitForRoll		(roll5							),
					new StepVerify			(Global.OfferType.Monthly599	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify2					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to PP within the third month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - YB to PP 2.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll5							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.PrepaidCard	),
					//						new StepVerify			(Global.OfferType.PrepaidCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify2					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to LO within the third month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - YB to LO 2.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll5							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.LaunchOffer	),
					//						new StepVerify			(Global.OfferType.LaunchOffer,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify2					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));

				// This case verifies the refund of a conversion from YB to 3M within the third month
				initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
				caselist.Add(new Case(countryname + " - YB to 3M 2.5 Months In", //true,
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
					new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
					new StepWaitForRoll		(roll0							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					new StepWaitForRoll		(roll5							),
					new StepVerify			(Global.OfferType.Yearly4999	),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
					initialStep,
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
					new StepVerify			(Global.OfferType.ThreeMonthCard),
					//						new StepVerify			(Global.OfferType.ThreeMonthCard,
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
					//new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
					//new StepWaitForRoll		(creditverify2					),
					//new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
					//new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					//						StepSetRenewal.ExpectConvert.No),
					//						new StepSetRenewal		(
					//						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					//						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999,
					//						StepSetRenewal.ExpectConvert.No)
					));
			}

	
			cases = (Case[]) caselist.ToArray(typeof(Case));
		}


		public ScriptAllCases()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\ScriptAllCountries.cs ===
#define SKIP_BETA_PROMO_AND_TEST
#define KOREA_FIX

using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptAllCountries.
	/// </summary>
	public class ScriptAllCountries : Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 2 months",TimeRollType.month, 2);
		TimeRoll rollA		= new TimeRoll("1.5th roll - 1 month",TimeRollType.month, 1);
		TimeRoll roll1		= new TimeRoll("2nd roll - 9 months",TimeRollType.month, 9);
		TimeRoll roll2		= new TimeRoll("3rd roll - 12 months",TimeRollType.month, 12);

		override public ArrayList GetRolls()
		{
			TimeRoll[] timeRolls = new TimeRoll[] {roll0,rollA,roll1,roll2};
			ArrayList timeRollContainers = new ArrayList();
			timeRollContainers.Add(timeRolls);
			return timeRollContainers;
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();
			string countryname;
			Owner.Country countrycode;

			// Debug variables for only running one test case
			bool fOneOnly = false;
			bool fRunBetaPromoTest = false;
//			bool fOnlyExpired = false;
//			bool fNoExpired = false;
			Owner.Country preferred = Owner.Country.US;
			
			// Define the countries default to monthly autorenewal behavior
			ArrayList defaultAutoRenewMonthlyCountries = new ArrayList();
			defaultAutoRenewMonthlyCountries.Add(Owner.Country.JP);

			// Define the countries with beta offers
			ArrayList betaPromoTestExistCountries = new ArrayList();
			betaPromoTestExistCountries.Add(Owner.Country.US);
			betaPromoTestExistCountries.Add(Owner.Country.CA);
			betaPromoTestExistCountries.Add(Owner.Country.JP);
			betaPromoTestExistCountries.Add(Owner.Country.UK);
			betaPromoTestExistCountries.Add(Owner.Country.FR);
			betaPromoTestExistCountries.Add(Owner.Country.DE);

			// Build offering Array lists for eligible enumeration testing
			ArrayList defaultNonVoucherOffers = new ArrayList();
			defaultNonVoucherOffers.Add(Global.OfferType.Monthly599);
			defaultNonVoucherOffers.Add(Global.OfferType.Yearly4999);

			ArrayList defaultNonVoucherOffersFromMonthly = new ArrayList();
			defaultNonVoucherOffersFromMonthly.Add(Global.OfferType.Yearly4999);

			ArrayList defaultOnesVoucherOffers = new ArrayList();
			defaultOnesVoucherOffers.Add(Global.OfferType.LaunchOffer);

			ArrayList defaultTwosVoucherOffers = new ArrayList();
			defaultTwosVoucherOffers.Add(Global.OfferType.PrepaidCard);

			ArrayList defaultCsVoucherOffers = new ArrayList();
			defaultCsVoucherOffers.Add(Global.OfferType.ThreeMonthCard);
			
			ArrayList emptyOffersList = new ArrayList();

			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				if(fOneOnly && preferred != countrycode)
					continue;

				if(betaPromoTestExistCountries.Contains(countrycode))
					fRunBetaPromoTest = true;

				// Korea will have a special case outside of this loop
				if(countrycode == Owner.Country.KR)
					continue;

				caselist.Add(new Case(countryname + " - Launch Offer (default renewal)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
											defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
											defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
											defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Launch Offer (non-default non-voucher renewal)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to LO)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to PP)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to 3M)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Pre Paid (default renewal)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the annual prepaid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the annual prepaid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),                                                                  
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Pre Paid (non-default non-voucher renewal)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to LO)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to PP)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to 3M)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Three Month (default renewal)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)                                                                  
					));

				caselist.Add(new Case(countryname + " - Three Month (non-default non-voucher renewal)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as non-default non-voucher offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to LO)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to PP)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to 3M)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo pre-paid offer
					false),                                                      
					new StepWaitForRoll		(rollA							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)          // Verify current sub is the three-month offer and default auto-renewal
					));

				// In addition to testing the renewals from the game trial offer, this case will also verify
				// propper offer enumeration from monthly and yearly billed offers
				caselist.Add(new Case(countryname + " - Game Trial (default renewal)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.Yearly4999    ),          // Everyone should be yearly at this point, because
																						// yearly hasn't gotten to the end of their first 12 months yet
					new StepVerifyEnumerate(defaultNonVoucherOffers),					// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    ),          // Verify current sub is in expected renewal
					new StepVerifyEnumerate(defaultNonVoucherOffersFromMonthly),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444")				// Verify that we can't see any 4's voucher offers as renewals
					));

				caselist.Add(new Case(countryname + " - Game Trial (non-default non-voucher renewal)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to LO)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to PP)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to 3M)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (default renewal)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.Yearly4999    ),          // Everyone should be yearly at this point, because
																						// yearly hasn't gotten to the end of their first 12 months yet
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (non-default non-voucher renewal)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to LO)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to PP)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Console Trial (renewal to 3M)",
					new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				if(fRunBetaPromoTest)
				{
#if !SKIP_BETA_PROMO_AND_TEST
					if(fStarterKitToAnnualAutoRenew)
					{

						caselist.Add(new Case(countryname + " - Beta1",
							new StepCreateAccount	("66666", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta1 offer
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta2",
							new StepCreateAccount	("77777", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta2 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta3",
							new StepCreateAccount	("88888", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta3 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Beta4",
							new StepCreateAccount	("99999", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta4 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Promo",
							new StepCreateAccount	("AAAAA", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the promo offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

						caselist.Add(new Case(countryname + " - Test",
							new StepCreateAccount	("BBBBB", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the test offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Yearly4999	)           // Verify current sub is the annual paid offer
							));

					}
					else // if (!fStarterKitToAnnualAutoRenew)
					{
						caselist.Add(new Case(countryname + " - Beta1",
							new StepCreateAccount	("66666", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta1 offer
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta2",
							new StepCreateAccount	("77777", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta2 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta3",
							new StepCreateAccount	("88888", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta3 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Beta4",
							new StepCreateAccount	("99999", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the beta4 offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						caselist.Add(new Case(countryname + " - Promo",
							new StepCreateAccount	("AAAAA", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the promo offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));

						Ccaselist.Add(new Case(countryname + " - Test",
							new StepCreateAccount	("BBBBB", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the test offer 
							new StepWaitForRoll		(roll0							),          // Time advance 2 months
							new StepWaitForRoll		(roll1							),          // Time advance 10 months
							new StepWaitForRoll		(roll2							),          // Time advance 12 months
							new StepVerify			(Global.OfferType.Monthly599	)           // Verify current sub is monthly paid offer
							));
					}
#endif
				}

			}

			// Add the special cases for Korea only if we're running all cases or this
			// is the only case we want to run
			if(!fOneOnly || (preferred == Owner.Country.KR))
			{
				caselist.Add(new Case("Korea - Launch Offer (default renewal)",
					new StepCreateAccount	("11111", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer	),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
					new StepSetRenewal		(Global.OfferType.PrepaidCard, true),       // Renew the expired sub into the pre-paid card sub
					new StepSetRenewal		(Global.OfferType.LaunchOffer, false),      // Set the next renewal to be the starter-kit sub
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Convert expired account into a monthly one
					));

				caselist.Add(new Case("Korea - Launch Offer (renewal to LO)",
					new StepCreateAccount	("11111", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case("Korea - Launch Offer (renewal to PP)",
					new StepCreateAccount	("11111", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case("Korea - Launch Offer (renewal to 3M)",
					new StepCreateAccount	("11111", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case("Korea - Pre Paid (default renewal)",
					new StepCreateAccount	("22222", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the annual prepaid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard	),          // Verify current sub is the annual prepaid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
					new StepSetRenewal		(Global.OfferType.LaunchOffer, true),       // Renew the expired sub into the starter kit sub
					new StepSetRenewal		(Global.OfferType.PrepaidCard, false),      // Set the next renewal to be the pre-paid card sub
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.PrepaidCard	)	        // Convert expired account into a monthly one
					));

				caselist.Add(new Case("Korea - Pre Paid (renewal to LO)",
					new StepCreateAccount	("22222", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case("Korea - Pre Paid (renewal to PP)",
					new StepCreateAccount	("22222", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case("Korea - Pre Paid (renewal to 3M)",
					new StepCreateAccount	("22222", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case("Korea - Three Month (default renewal)",
					new StepCreateAccount	("CCCCC", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(rollA							),          // Time advance 2 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired,
					Global.ViolationStatus.No)							                // Verify current sub is the expired without violations
					));

				caselist.Add(new Case("Korea - Three Month (renewal to LO)",
					new StepCreateAccount	("CCCCC", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the 3 mo pre-paid offer
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the 3 mo pre-paid offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case("Korea - Three Month (renewal to PP)",
					new StepCreateAccount	("CCCCC", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the 3 mo pre-paid offer
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the 3 mo pre-paid offer
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case("Korea - Three Month (renewal to 3M)",
					new StepCreateAccount	("CCCCC", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		), 			// Create the account in the 3 mo pre-paid offer
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard,
											 Global.OfferType.ThreeMonthCard),          // Verify current sub is the 3 mo pre-paid offer with 3 mo renewal
					new StepWaitForRoll		(rollA							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard,
											 Global.OfferType.None)						// Verify current sub is the 3 mo pre-paid offer with no renewal
					));

				caselist.Add(new Case("Korea - Game Trial (default renewal)",
					new StepCreateAccount	("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
					new StepSetRenewal		(Global.OfferType.LaunchOffer, true),       // Renew the expired sub into the starter kit sub
					new StepSetRenewal		(Global.OfferType.PrepaidCard, false),      // Set the next renewal to be the pre-paid card sub
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer	),          // Verify current sub is the starter-kit offer
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.PrepaidCard	)           // Verify current sub is the pre-paid offer
					));

				caselist.Add(new Case("Korea - Game Trial (renewal to LO)",
					new StepCreateAccount	("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial     ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Game Trial (renewal to PP)",
					new StepCreateAccount	("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial     ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Game Trial (renewal to 3M)",
					new StepCreateAccount	("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial     ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Console Trial (default renewal)",
					new StepCreateAccount	("44444", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial,             // Verify current sub and default renewal
					Global.OfferType.None),
					new StepVerifyEnumerate(emptyOffersList					),			// Verify that we can't see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.No	), // Verify that we're expired without violations
//					new StepSetRenewal		(Global.OfferType.LaunchOffer, true),       // Renew the expired sub into the starter kit sub
//					new StepSetRenewal		(Global.OfferType.PrepaidCard, false),      // Set the next renewal to be the pre-paid card sub
					new StepSetRenewal		(Global.OfferType.PrepaidCard, true),       // Renew the expired sub into the pre-paid card sub
					new StepSetRenewal		(Global.OfferType.LaunchOffer, false),      // Set the next renewal to be the starter kit sub
					new StepWaitForRoll		(roll1							),          // Time advance 10 months
//					new StepVerify			(Global.OfferType.LaunchOffer	),          // Verify current sub is the starter-kit offer
					new StepVerify			(Global.OfferType.PrepaidCard	),          // Verify current sub is the pre-paid offer
					new StepWaitForRoll		(roll2							),          // Time advance 12 months
//					new StepVerify			(Global.OfferType.PrepaidCard	),          // Verify current sub is the pre-paid offer
					new StepVerify			(Global.OfferType.LaunchOffer	)			// Verify current sub is the starter-kit offer
					));

				caselist.Add(new Case("Korea - Console Trial (renewal to LO)",
					new StepCreateAccount	("44444", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial  ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Console Trial (renewal to PP)",
					new StepCreateAccount	("44444", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial  ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case("Korea - Console Trial (renewal to 3M)",
					new StepCreateAccount	("44444", ServerTestFramework.LiveService.UserAccount.XeUser.Country.KR		),			// Create the account in the console trial offer
					new StepVerify			(Global.OfferType.ConsoleTrial  ),          // Verify current sub and default renewal
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

			}

			cases = (Case[]) caselist.ToArray(typeof(Case));
		}

		public ScriptAllCountries()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\ScriptCancelCredit.cs ===
#define KOREA_FIX

using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptAllCountries.
	/// </summary>
	public class ScriptCancelCredit : Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 2 months",TimeRollType.month, 2);
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days",TimeRollType.day, 15);
		TimeRoll roll2		= new TimeRoll("3rd roll - 1 month",TimeRollType.month, 1);
		TimeRoll roll3		= new TimeRoll("4th roll - 1 month",TimeRollType.month, 1);
		TimeRoll roll4		= new TimeRoll("5th roll - 1 month",TimeRollType.month, 1);
		TimeRoll roll5		= new TimeRoll("6th roll - 1 month",TimeRollType.month, 1);

		override public ArrayList GetRolls()
		{
			TimeRoll[] timeRolls = new TimeRoll[] {roll0,roll1,roll2,roll3,roll4,roll5};
			ArrayList timeRollContainers = new ArrayList();
			timeRollContainers.Add(timeRolls);
			return timeRollContainers;
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();
			string countryname;
			Owner.Country countrycode;

			// Debug variables for only running one test case
			bool fOneOnly = false;
			Owner.Country preferred = Owner.Country.AU;

			// Define the countries with special cancellation rules
			ArrayList specialCaseBilledCancellationCountries = new ArrayList();
			specialCaseBilledCancellationCountries.Add(Owner.Country.KR);
			specialCaseBilledCancellationCountries.Add(Owner.Country.AU);

			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				// TODO - Perform a lookup on the expected credit values to use for each test

				if(fOneOnly && preferred != countrycode)
					continue;

				// Start the pre-paid subscription cancellation tests

				caselist.Add(new Case(countryname + " - Cancel launch-offer sub",
					new StepCreateAccount		("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the starter kit
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in middle of starter kit
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel pre-paid sub",
					new StepCreateAccount		("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 12 month pre-paid
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in middle of 12 month pre-paid
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel three-month sub",
					new StepCreateAccount		("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 3 month pre-paid
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in middle of 3 month pre-paid
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel game-trial sub",
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in middle of game-trial
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel console-trial sub",
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepCreateAccount		("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month console-trial
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in middle of console-trial
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				// The countries that have special cases for their billed tests can skip the next section
				if(specialCaseBilledCancellationCountries.Contains(countrycode))
					continue;

				// Start the billed subscription cancellation tests
			
				caselist.Add(new Case(countryname + " - Cancel monthly sub in 1st month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in first month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel yearly sub in 1st month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in first month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel monthly sub in 2nd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in second month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel yearly sub in 2nd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in second month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel monthly sub in 3rd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepWaitForRoll			(roll5							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in third month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case(countryname + " - Cancel yearly sub in 3rd month",
					new StepCreateAccount		("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepWaitForRoll			(roll5							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in third month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, false)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));				
			}

			// Australian special case billed subscription cancellation tests
			if(!fOneOnly || preferred == Owner.Country.AU)
			{
				caselist.Add(new Case("AU - Cancel monthly sub in 1st month",
					new StepCreateAccount		("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in first month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel yearly sub in 1st month",
					new StepCreateAccount		("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in first month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel monthly sub in 2nd month",
					new StepCreateAccount		("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in second month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel yearly sub in 2nd month",
					new StepCreateAccount		("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in second month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel monthly sub in 3rd month",
					new StepCreateAccount		("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Monthly599	),			// Set the renewal to monthly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Monthly599	),          // Verify current sub is monthly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepWaitForRoll			(roll5							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in third month of monthly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));

				caselist.Add(new Case("AU - Cancel yearly sub in 3rd month",
					new StepCreateAccount		("33333", ServerTestFramework.LiveService.UserAccount.XeUser.Country.AU		),			// Create the account in the 2 month game-trial
					new StepSetRenewal			(Global.OfferType.Yearly4999	),			// Set the renewal to yearly
					new StepWaitForRoll			(roll0							),			// Time advance 2 months
					new StepVerify				(Global.OfferType.Yearly4999	),          // Verify current sub is yearly
					new StepWaitForRoll			(roll1							),          // Time advance 15 days
					new StepWaitForRoll			(roll3							),          // Time advance 1 month
					new StepWaitForRoll			(roll5							),          // Time advance 1 month
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false),
					new StepCancelSubscription	(								),          // Cancel sub in third month of yearly
					new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true)
					//new StepGetOpenBalance		(AccountStatementInfoSetLogDepth.LineItems)			// Get current balance and display it
					// TODO - remove the StepGetOpenBalance and add a StepVerifyBalances for the specific ammounts
					));				
			}

			// Korea doesn't have billed subscriptions so there's no need for cancellation tests

			cases = (Case[]) caselist.ToArray(typeof(Case));
		}

		public ScriptCancelCredit()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\ScriptConvert.cs ===
#define SKIP_BETA_PROMO_AND_TEST
#define KOREA_FIX

using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptConvert.
	/// </summary>
	public class ScriptConvert : Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 2 months",TimeRollType.month,2);
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days",TimeRollType.day,15);
		TimeRoll roll2		= new TimeRoll("3rd roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll3		= new TimeRoll("4th roll - 15 days",TimeRollType.day,15);
		TimeRoll roll4		= new TimeRoll("5th roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll5		= new TimeRoll("6th roll - 15 days",TimeRollType.day,15);
//		TimeRoll roll6		= new TimeRoll("7th roll - 0 days");
//		TimeRoll roll7		= new TimeRoll("8th roll - 7 months");
//		TimeRoll roll8		= new TimeRoll("9th roll - 15 days");
//		TimeRoll roll9		= new TimeRoll("10th roll - 0 days");
//		TimeRoll roll10		= new TimeRoll("11th roll - 11 months");

		override public ArrayList GetRolls()
		{
			TimeRoll[] timeRolls = new TimeRoll[] {roll0,roll1,roll2,roll3,roll4,roll5/*,roll6,roll7,roll8,roll9,roll10*/};
			ArrayList timeRollContainers = new ArrayList();
			timeRollContainers.Add(timeRolls);
			return timeRollContainers;
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();
			string countryname;
			Owner.Country countrycode;

			// Debug variables for only running one test case
			bool fOneOnly = false;
			//bool fRunBetaPromoTest = false;
			bool fOnlyExpired = false;
			bool fNoExpired = false;
			Owner.Country preferred = Owner.Country.US;

			// Define the countries default to monthly autorenewal behavior
			ArrayList defaultAutoRenewMonthlyCountries = new ArrayList();
			defaultAutoRenewMonthlyCountries.Add(Owner.Country.JP);

			// Define the countries with beta offers
			ArrayList betaPromoTestExistCountries = new ArrayList();
			betaPromoTestExistCountries.Add(Owner.Country.US);
			betaPromoTestExistCountries.Add(Owner.Country.CA);
			betaPromoTestExistCountries.Add(Owner.Country.JP);
			betaPromoTestExistCountries.Add(Owner.Country.UK);
			betaPromoTestExistCountries.Add(Owner.Country.FR);
			betaPromoTestExistCountries.Add(Owner.Country.DE);

			// Build offering Array lists for eligible enumeration testing
			ArrayList defaultNonVoucherOffers = new ArrayList();
			defaultNonVoucherOffers.Add(Global.OfferType.Monthly599);
			defaultNonVoucherOffers.Add(Global.OfferType.Yearly4999);

			ArrayList defaultNonVoucherOffersFromMonthly = new ArrayList();
			defaultNonVoucherOffersFromMonthly.Add(Global.OfferType.Yearly4999);

			ArrayList defaultOnesVoucherOffers = new ArrayList();
			defaultOnesVoucherOffers.Add(Global.OfferType.LaunchOffer);

			ArrayList defaultTwosVoucherOffers = new ArrayList();
			defaultTwosVoucherOffers.Add(Global.OfferType.PrepaidCard);

			ArrayList defaultCsVoucherOffers = new ArrayList();
			defaultCsVoucherOffers.Add(Global.OfferType.ThreeMonthCard);
			
			ArrayList emptyOffersList = new ArrayList();

			// FROM SCRIPTINTEGRATIONCASES
			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				if(fOneOnly && (preferred != countrycode))
					continue;

				if(!fOnlyExpired)
				{
					// This case verifies the conversion from MB to PP at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to PP 0 Months In", //true, 
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from MB to LO at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to LO 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from MB to 3M at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - MB to 3M 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies the conversion from YB to PP at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to PP 0 Months In", //true, 
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from YB to LO at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to LO 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from YB to 3M at the very beginning of the month while settling charges
					caselist.Add(new Case(countryname + " - YB to 3M 0 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies the conversion from MB to PP at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to PP NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from MB to LO at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to LO NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from MB to 3M at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - MB to 3M NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies the conversion from YB to PP at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to PP NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies the conversion from YB to LO at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to LO NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies the conversion from YB to 3M at the very beginning of the month without settling charges
					caselist.Add(new Case(countryname + " - YB to 3M NotSettled", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					StepVerifyOpenBalance initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);

					// This case verifies the refund of a conversion from MB to PP within the first month
					caselist.Add(new Case(countryname + " - MB to PP .5 Months In",
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
//						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to LO within the first month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - MB to LO .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
//						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to 3M within the first month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - MB to 3M .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
//						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to PP within the first month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - YB to PP .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
//						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to LO within the first month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - YB to LO .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
//						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to 3M within the first month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - YB to 3M .5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
//						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to PP within the second month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - MB to PP 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
//						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to LO within the second month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - MB to LO 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
//						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to 3M within the second month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - MB to 3M 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
//						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to PP within the second month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - YB to PP 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
//						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to LO within the second month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - YB to LO 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
//						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to 3M within the second month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.Summary, false, false);
					caselist.Add(new Case(countryname + " - YB to 3M 1.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
//						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.Summary, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to PP within the third month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					caselist.Add(new Case(countryname + " - MB to PP 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
//						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to LO within the third month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					caselist.Add(new Case(countryname + " - MB to LO 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
//						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from MB to 3M within the third month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					caselist.Add(new Case(countryname + " - MB to 3M 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Monthly599	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
//						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to PP within the third month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					caselist.Add(new Case(countryname + " - YB to PP 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	),
//						new StepVerifyExpiryDate	(Global.OfferLength.PrepaidCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to LO within the third month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					caselist.Add(new Case(countryname + " - YB to LO 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	),
//						new StepVerifyExpiryDate	(Global.OfferLength.LaunchOffer),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));

					// This case verifies the refund of a conversion from YB to 3M within the third month
					initialStep = new StepVerifyOpenBalance (AccountStatementInfoSetLogDepth.LineItems, false, false);
					caselist.Add(new Case(countryname + " - YB to 3M 2.5 Months In", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						//new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, false, 0),
						initialStep,
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard),
//						new StepVerifyExpiryDate	(Global.OfferLength.ThreeMonthCard),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, true, true, ref initialStep)
						));


					// This test validates that we have a 0 balance when we've converted while in declines
					// but before a violation was added
					caselist.Add(new Case(countryname + " - MB to PP Violations Convert with Zero Balance", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal      (Global.OfferType.Monthly599	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(3, false						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepVerify			(Global.OfferType.PrepaidCard   ),
						new StepVerifyOpenBalance   (AccountStatementInfoSetLogDepth.LineItems, false, true)
						));

				}

				if(!fNoExpired)
				{
					// This test verifies that the monthly offer can be converted into the 12 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - MB to PP Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This test verifies that the monthly offer can be converted into the starter-kit offer when suspended
					caselist.Add(new Case(countryname + " - MB to LO Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This test verifies that the monthly offer can be converted into the 3 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - MB to 3M Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This test verifies that the yearly offer can be converted into the 12 month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - YB to PP Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This test verifies that the yearly offer can be converted into the starter-kit offer when suspended
					caselist.Add(new Case(countryname + " - YB to LO Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This test verifies that the yearly offer can be converted into the 3-month pre-paid offer when suspended
					caselist.Add(new Case(countryname + " - YB to 3M Suspended", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(5, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Suspended, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled, Global.ViolationStatus.No),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepGetOpenBalance	(AccountStatementInfoSetLogDepth.LineItems),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case tests that the grace period on the monthly offer is 30 days
					caselist.Add(new Case(countryname + " - MB Grace Period", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll3							),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
						));

					// This case tests that the grace period on the yearly offer is 60 days
					caselist.Add(new Case(countryname + " - YB Grace Period", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll1							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired),
						new StepWaitForRoll		(roll5							),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Canceled)
						));

					// This test verifies that the monthly offer converts to yearly
					caselist.Add(new Case(countryname + " - MB to YB Normal", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.Yearly4999	)
						));

					// This test verifies that the yearly offer doesn't convert to monthly (from the client)
					caselist.Add(new Case(countryname + " - YB to MB Normal", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepVerify			(Global.OfferType.Yearly4999	)
						));

					// This test verifies that renewing to monthly from monthly fails
					caselist.Add(new Case(countryname + " - MB to MB Normal", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepSettleBalance	(								),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.Monthly599	)
						));

					// This test verifies that the monthly offer can be converted into the 12 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - MB to PP Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This test verifies that the monthly offer can be converted into the starter-kit offer when expired
					caselist.Add(new Case(countryname + " - MB to LO Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This test verifies that the monthly offer can be converted into the 3 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - MB to 3M Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This test verifies that the yearly offer can be converted into the 12 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - YB to PP Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.PrepaidCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This test verifies that the yearly offer can be converted into the starter-kit offer when expired
					caselist.Add(new Case(countryname + " - YB to LO Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.LaunchOffer, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This test verifies that the yearly offer can be converted into the 3 month prepaid offer when expired
					caselist.Add(new Case(countryname + " - YB to 3M Expired", //true,
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No	),
						new StepWaitForRoll		(roll0							),
						new StepCloseBalance	(								),
						new StepStopPayment		(7, true						),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepVerifyAccountStatus(Global.AccountStatus.Expired, Global.ViolationStatus.Yes),
						new StepUpdatePaymentInstrument(true					),
						new StepVerifyAccountStatus(Global.AccountStatus.Enabled),
						new StepSetRenewal		(Global.OfferType.ThreeMonthCard, StepSetRenewal.ExpectConvert.Yes),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies that the starter kit offer can not be renewed into the game trial offer
					caselist.Add(new Case(countryname + " - LO to GT failure",
						new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.LaunchOffer,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies that the starter kit offer can not be renewed into the console trial offer
					caselist.Add(new Case(countryname + " - LO to CT failure",
						new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.LaunchOffer,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.LaunchOffer	)
						));

					// This case verifies that the 12 month prepaid offer can not be renewed into the game trial offer
					caselist.Add(new Case(countryname + " - PP to GT failure",
						new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.PrepaidCard,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies that the 12 month prepaid offer can not be renewed into the console trial offer
					caselist.Add(new Case(countryname + " - PP to CT failure",
						new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.PrepaidCard,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.PrepaidCard	)
						));

					// This case verifies that the 3 month prepaid offer can not be renewed into the game trial offer
					caselist.Add(new Case(countryname + " - 3M to GT failure",
						new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.ThreeMonthCard,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies that the 3 month prepaid offer can not be renewed into the console trial offer
					caselist.Add(new Case(countryname + " - 3M to CT failure",
						new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.ThreeMonthCard,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.ThreeMonthCard)
						));

					// This case verifies that the game trial offer can not be renewed into the game trial offer
					caselist.Add(new Case(countryname + " - GT to GT failure",
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.GameTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.GameTrial		)
						));

					// This case verifies that the game trial offer can not be renewed into the console trial offer
					caselist.Add(new Case(countryname + " - GT to CT failure",
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.GameTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.GameTrial		)
						));

					// This case verifies that the console trial offer can not be renewed into the game trial offer
					caselist.Add(new Case(countryname + " - CT to GT failure",
						new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.ConsoleTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.ConsoleTrial	)
						));

					// This case verifies that the console trial offer can not be renewed into the console trial offer
					caselist.Add(new Case(countryname + " - CT to CT failure",
						new StepCreateAccount	("44444", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.ConsoleTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.ConsoleTrial	)
						));

					// This case verifies that the monthly offer can not be renewed into the game trial offer
					caselist.Add(new Case(countryname + " - MB to GT failure",
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.GameTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.Monthly599	)
						));

					// This case verifies that the monthly offer can not be renewed into the console trial offer
					caselist.Add(new Case(countryname + " - MB to CT failure",
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.GameTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.Monthly599, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0),
						new StepVerify			(Global.OfferType.Monthly599	),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.Monthly599	)
						));

					// This case verifies that the yearly offer can not be renewed into the game trial offer
					caselist.Add(new Case(countryname + " - YB to GT failure",
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.GameTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.GameTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.Yearly4999	)
						));

					// This case verifies that the yearly offer can not be renewed into the console trial offer
					caselist.Add(new Case(countryname + " - YB to CT failure",
						new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),
						new StepVerify			(Global.OfferType.GameTrial,     
						defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
						Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
						new StepSetRenewal		(Global.OfferType.Yearly4999, StepSetRenewal.ExpectConvert.No),
						new StepWaitForRoll		(roll0),
						new StepVerify			(Global.OfferType.Yearly4999	),
						new StepSetRenewal		(Global.OfferType.ConsoleTrial, StepSetRenewal.ExpectConvert.Failure),
						new StepVerify			(Global.OfferType.Yearly4999	)
						));
				}

			}

			cases = (Case[]) caselist.ToArray(typeof(Case));
		}


		public ScriptConvert()
		{
			//
			// TODO: Add constructor logic here
			//
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\Script.cs ===
using System;
using System.Threading;
using System.Reflection;
using System.Collections;
using System.Windows.Forms;
using System.Drawing;
using ServerTestFramework;
 using System.Diagnostics;
namespace RenewalMatrix
{
	/// <summary>
	/// Script class
	/// Nice ideas for the future that I might not have time to execute on:
	/// - Merging scripts at a code level automagically
	/// 
	/// </summary>
	abstract public class Script : ThreadBase
	{
		public TimeRoll StartSyncObject=new TimeRoll("Start object",TimeRollType.no_roll,0); // NOTE: is this correct?
		public New_Code.Timeline ScriptTimeline = new New_Code.Timeline();

		// Still use these object for the in
		public Case []cases;

		// NEW CODE
		public ArrayList lightweightObjects;

		public void ConvertCasesToLightweightObjects()
		{
			ArrayList al = new ArrayList();
			al.AddRange(cases);
			lightweightObjects = new ArrayList();
			foreach (Case c in al)
			{
				lightweightObjects.Add((new RenewalMatrix.New_Code.HeavyweightObject(c)).LightweightObject );
			}
			// End conversion by freeing memory associated with cases
			cases = null;
			return;
		}

		// END NEW CODE

		protected abstract void Initialize();
		//public abstract TimeRoll []GetRolls();
		public abstract ArrayList GetRolls();

        bool RollClock(int numofDays)  //if seccuss, should return true
        {
            try
            {
                String path = @"c:\temp\"; // you need to set this path to where PsExec.exe is located. 
                String strExe = path + "PsExec.exe";
                String strCmdLine = "\\\\VM1Box  \"c:\\progra~1\\master~1\\godclock.exe\" -a " + numofDays + " day";  //run renewmatrix as admin and has the same password as on onebox.

                ProcessStartInfo startInfo = new ProcessStartInfo(strExe, strCmdLine);

                startInfo.CreateNoWindow = false;
                startInfo.UseShellExecute = false;
                startInfo.RedirectStandardOutput = true;
                startInfo.RedirectStandardError = true;

                Process process = Process.Start(startInfo);

                //ReaderThread stdoutReader = new ReaderThread(process.StandardOutput);
                //ReaderThread stderrReader = new ReaderThread(process.StandardError);

                process.WaitForExit();

                return process.ExitCode == 0 ? true : false;
            }
            catch {
                return false;
            }
        }

		protected override void ThreadBody()
		{
			int timeDelta = 0;
            
			//Use new scheduling with lightweight objects
			this.ScriptTimeline.FinalizeTimelineForRun();
			while (timeDelta != -1)
			{
				foreach (New_Code.LightweightTracker lt in lightweightObjects)
				{
					int currentTime = this.ScriptTimeline.GetCurrentTime();
					if (lt.NeedsToBeProcessed(currentTime))
					{
						lt.RunTestStepsUntilTimeRoll(currentTime);
					}
				}
				timeDelta = this.ScriptTimeline.Advance();
				if (RenewalMatrix.New_Code.Config.CallOneBox)
				{
					if (timeDelta != -1)
					{
						// Sleep for 1 minute to avoid rolling the clock too soon
						Console.WriteLine(DateTime.Now + ":   rolling clock...");
						//Thread.Sleep(60000);
						Console.WriteLine("Running Clock Roll...");
						try
						{
							//Clock Roll try/catch
							string msg = "";

                            DateTime previousTime = Form1.client.GetClockTime();
                            
                            while (true)
                            {

                                New_Code.Config.UIAccessPoint.lRolls.Items.Add(new ListViewItem("Start roll clock"));
                                if (RollClock(timeDelta)) msg = " Success";
                                else msg = " failed";

                                Console.WriteLine("Roll clock result: " + msg);

                                Thread.Sleep(10000);
                                Console.WriteLine("Wait 10 seconds before check if the clock is advanced: " + msg);
                                Form1.currTime = TimeZone.CurrentTimeZone.ToLocalTime(Form1.client.GetClockTime());

                                New_Code.Config.UIAccessPoint.lRolls.Items.Add(new ListViewItem("Time after " + timeDelta + " " + "day(s) " + msg + " time roll: " + Form1.currTime.ToString()));
                                
                                //Now we removed extra buffer for rolling clock and do periodic process for every check point.
                                //We have to add check on clock rolling in case the operation returns successfully but the actuall clock is not advanced.
                                //Reroll clock is needed in this case.                                 
                                if (((TimeSpan)Form1.currTime.Subtract(previousTime)).Days + 1 >= timeDelta)
                                    break;

                                Console.WriteLine("Reroll the clock");
                                New_Code.Config.UIAccessPoint.lRolls.Items.Add(new ListViewItem("!!!!Reroll the clock"));
                            }
						}
						catch
						{
							Console.WriteLine("Error running " + timeDelta + " " + "days" + " time roll!");
							New_Code.Config.UIAccessPoint.lRolls.Items.Add(new ListViewItem("Error running " + timeDelta + " " + "day(s)" + " time roll!"));
							// should exit or retry
						}
						Console.WriteLine("Running periodic processing...");
						try
						{
							//Periodic processing try/catch
							string msg = Form1.client.RunPeriodic("");
                            Console.WriteLine(DateTime.Now + ": Periodic processing result: " + msg);
							New_Code.Config.UIAccessPoint.lRolls.Items.Add(new ListViewItem(DateTime.Now + ":Periodic processing completed after " + timeDelta + " " + "day(s)" + " time roll"));
						}
						catch
						{
							Console.WriteLine("Error running periodic processing after " + timeDelta + " " + "day(s)" + " time roll!");
							New_Code.Config.UIAccessPoint.lRolls.Items.Add(new ListViewItem("Error running periodic processing after " + timeDelta + " " + "day(s)" + " time roll!"));
							// should exit or retry
						}
					}					
				}
				// We are finished
				New_Code.Config.UIAccessPoint.lStatus.Text="All tests completed.";
				New_Code.Config.UIAccessPoint.lStatus.ForeColor=Color.Green;

				// Allow logging
				if(!New_Code.Config.UIAccessPoint.logFileClicked)
				{
					New_Code.Config.UIAccessPoint.endTime = DateTime.Now;
					New_Code.Config.UIAccessPoint.bLogFile.Enabled = true;
				}
			}
		}

		public int NonWaitingThreadCount
		{
			get
			{
				int counter=0;
				foreach(Case c in cases)
				{
					if (c.Code==Case.PassCode.Running)
						counter++;
				}
				return counter;
			}
		}

		public Script()
		{
			Initialize();
			ArrayList timeRollResults = this.GetRolls();
			foreach (TimeRoll[] timeRolls in timeRollResults)
			{
				Queue timeRollQueue = new Queue(timeRolls);
				this.ScriptTimeline.BuildTimelineFromTimeRolls(timeRollQueue,New_Code.Config.StartDateTime);
			}
			ConvertCasesToLightweightObjects();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\ScriptCodePaths.cs ===
using System;
using ServerTestFramework;
using System.Collections;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptCodePaths.
	/// </summary>
	public class ScriptCodePaths:Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 60 days",TimeRollType.day,60);
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days",TimeRollType.day,15);
		TimeRoll roll2		= new TimeRoll("3rd roll - 11.5 months",TimeRollType.week,50);

		override public ArrayList GetRolls()
		{
			TimeRoll[] timeRolls = new TimeRoll[] {roll0,roll1, roll2};
			ArrayList timeRollContainers = new ArrayList();
			timeRollContainers.Add(timeRolls);
			return timeRollContainers;
		}

		protected override void Initialize()
		{
			// Yearly to others
			Case	c1=new Case("Yearly to monthly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.Monthly599	));

			Case	c2=new Case("Yearly to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.PrepaidCard	),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			Case	c3=new Case("Yearly to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false	));

			// Monthly to others
			Case	c4=new Case("Monthly to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Monthly599	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Yearly4999, true));

			Case	c5=new Case("Monthly to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Monthly599	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, true));

			Case	c6=new Case("Monthly to monthly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Monthly599	),
				new StepVerify			(Global.OfferType.GameTrial		),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Monthly599	),
				new StepWaitForRoll		(roll1							),
				new StepSetRenewal		(Global.OfferType.Monthly599, false));

			// Base offers 
			Case	c7=new Case("Base to yearly",
				new StepCreateAccount	("11111"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.Yearly4999	));

			Case	c8=new Case("Base to monthly",
				new StepCreateAccount	("11111"						),
				new StepSetRenewal		(Global.OfferType.Monthly599, false),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.Monthly599	));

			Case	c9=new Case("Base to prepaid",
				new StepCreateAccount	("11111"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll2							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			// Console trial offers 
			Case	c10=new Case("Console to yearly",
				new StepCreateAccount	("44444"						),
				new StepVerify			(Global.OfferType.ConsoleTrial	),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	));

			Case	c11=new Case("Console to prepaid",
				new StepCreateAccount	("44444"						),
				new StepVerify			(Global.OfferType.ConsoleTrial	),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			// Game trial offers 
			Case	c12=new Case("Game trial to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.Yearly4999	));

			Case	c13=new Case("Game trial to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	));

			// Prepaid offers
			Case	c14=new Case("Prepaid to yearly",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	),
				new StepSetRenewal		(Global.OfferType.Yearly4999, false));

			Case	c15=new Case("Prepaid to prepaid",
				new StepCreateAccount	("33333"						),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false),
				new StepWaitForRoll		(roll0							),
				new StepVerify			(Global.OfferType.PrepaidCard	),
				new StepSetRenewal		(Global.OfferType.PrepaidCard, false));

			cases=new Case[] {   c1 ,c2 ,c3 ,
							 c4 ,c5 ,c6 ,c7 ,
							 c8 ,c9 ,c10,c11,
							 c12,c13,c14,c15};
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\ScriptRenewCancel.cs ===
#define SKIP_BETA_PROMO_AND_TEST
#define KOREA_FIX

using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;

namespace RenewalMatrix
{
	/// <summary>
	/// Summary description for ScriptRenewCancel.
	/// </summary>
	public class ScriptRenewCancel : Script
	{
		TimeRoll roll0		= new TimeRoll("1st roll - 2 months",TimeRollType.month,2);
		TimeRoll roll1		= new TimeRoll("2nd roll - 15 days",TimeRollType.day,15);
		TimeRoll roll2		= new TimeRoll("3rd roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll3		= new TimeRoll("4th roll - 15 days",TimeRollType.day,15);
		TimeRoll roll4		= new TimeRoll("5th roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll5		= new TimeRoll("6th roll - 15 days",TimeRollType.day,15);
		TimeRoll roll6		= new TimeRoll("7th roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll7		= new TimeRoll("8th roll - 7 months",TimeRollType.month,7);
		TimeRoll roll8		= new TimeRoll("9th roll - 15 days",TimeRollType.day,15);
		TimeRoll roll9		= new TimeRoll("10th roll - 0 days",TimeRollType.end_of_month,0);
		TimeRoll roll10		= new TimeRoll("11th roll - 11 months",TimeRollType.month,11);

		override public ArrayList GetRolls()
		{
			TimeRoll[] timeRolls = new TimeRoll[] {roll0,roll1,roll2,roll3,roll4,roll5,roll6,roll7,roll8,roll9,roll10};
			ArrayList timeRollContainers = new ArrayList();
			timeRollContainers.Add(timeRolls);
			return timeRollContainers;
		}

		protected override void Initialize()
		{
			ArrayList caselist = new ArrayList();
			string countryname;
			Owner.Country countrycode;

			// Debug variables for only running one test case
			bool fOneOnly = false;
			bool fRunBetaPromoTest = false;
			//bool fOnlyExpired = false;
			//bool fNoExpired = false;
			Owner.Country preferred = Owner.Country.US;

			// Define the countries default to monthly autorenewal behavior
			ArrayList defaultAutoRenewMonthlyCountries = new ArrayList();
			defaultAutoRenewMonthlyCountries.Add(Owner.Country.JP);

			// Define the countries with beta offers
			ArrayList betaPromoTestExistCountries = new ArrayList();
			betaPromoTestExistCountries.Add(Owner.Country.US);
			betaPromoTestExistCountries.Add(Owner.Country.CA);
			betaPromoTestExistCountries.Add(Owner.Country.JP);
			betaPromoTestExistCountries.Add(Owner.Country.UK);
			betaPromoTestExistCountries.Add(Owner.Country.FR);
			betaPromoTestExistCountries.Add(Owner.Country.DE);

			// Build offering Array lists for eligible enumeration testing
			ArrayList defaultNonVoucherOffers = new ArrayList();
			defaultNonVoucherOffers.Add(Global.OfferType.Monthly599);
			defaultNonVoucherOffers.Add(Global.OfferType.Yearly4999);

			ArrayList defaultNonVoucherOffersFromMonthly = new ArrayList();
			defaultNonVoucherOffersFromMonthly.Add(Global.OfferType.Yearly4999);

			ArrayList defaultOnesVoucherOffers = new ArrayList();
			defaultOnesVoucherOffers.Add(Global.OfferType.LaunchOffer);

			ArrayList defaultTwosVoucherOffers = new ArrayList();
			defaultTwosVoucherOffers.Add(Global.OfferType.PrepaidCard);

			ArrayList defaultCsVoucherOffers = new ArrayList();
			defaultCsVoucherOffers.Add(Global.OfferType.ThreeMonthCard);
			
			ArrayList emptyOffersList = new ArrayList();

			// FROM SCRIPTALLCOUNTRIES
			foreach(byte cc in Owner.Countries)
			{
				// Determine the country code and string for this test
				countrycode = (Owner.Country) cc;
				countryname = ((Owner.Country) countrycode).ToString();

				if(fOneOnly && preferred != countrycode)
					continue;

				if(betaPromoTestExistCountries.Contains(countrycode))
					fRunBetaPromoTest = true;

				caselist.Add(new Case(countryname + " - Launch Offer (default renewal)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),
					new StepWaitForRoll		(roll10							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Launch Offer (non-default non-voucher renewal)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to LO)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to PP)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Launch Offer (renewal to 3M)",
					new StepCreateAccount	("11111", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.LaunchOffer,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer   ),          // Verify current sub is the starter kit offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Pre Paid (default renewal)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the annual prepaid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the annual prepaid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),                                                                  
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll10							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    )           // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Pre Paid (non-default non-voucher renewal)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the 12 mo pre-paid offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(											// Change to non-default non-voucher renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,					
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(											// Verify renewal to non-default non-voucher offer
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to LO)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to PP)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Pre Paid (renewal to 3M)",
					new StepCreateAccount	("22222", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the starter kit offer
					new StepVerify			(Global.OfferType.PrepaidCard,              // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 month
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard   ),          // Verify current sub is the 12 mo pre-paid offer
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify successful renewal to 3 month
					));

				caselist.Add(new Case(countryname + " - Three Month (default renewal)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999)                 
					));

				caselist.Add(new Case(countryname + " - Three Month (non-default non-voucher renewal)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as non-default non-voucher offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify renewal to non-default non-voucher offer
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to LO)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(Global.OfferType.LaunchOffer   )           // Verify successful renewal to starter kit
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to PP)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo pre-paid offer
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(Global.OfferType.PrepaidCard   )           // Verify successful renewal to 12 mo pre-paid
					));

				caselist.Add(new Case(countryname + " - Three Month (renewal to 3M)",
					new StepCreateAccount	("CCCCC", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			), 			// Create the account in the three-month offer
					new StepVerify			(Global.OfferType.ThreeMonthCard,           // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo pre-paid offer
					false),
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard),          // Verify current sub is the three-month offer                                  
					new StepWaitForRoll		(roll2							),          // Time advance 1 month
					new StepVerify			(Global.OfferType.ThreeMonthCard)			// Verify successful renewal to 3 month
					));

				// In addition to testing the renewals from the game trial offer, this case will also verify
				// propper offer enumeration from monthly and yearly billed offers
				caselist.Add(new Case(countryname + " - Game Trial (default renewal)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepVerifyEnumerate(defaultNonVoucherOffers			),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(                                           // Verify current sub is in expected renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(                                           // Set next renewal for a different offer...
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?            // & expect convert if currently in monthly
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					true : false),                                                      
					new StepWaitForRoll		(roll7							),          // Time advance 10 months
					new StepVerify			(Global.OfferType.Yearly4999    ),          // Everyone should be yearly at this point, because
					// yearly hasn't gotten to the end of their first 12 months yet
					new StepVerifyEnumerate(defaultNonVoucherOffers),					// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444"),				// Verify that we can't see any 4's voucher offers as renewals
					new StepWaitForRoll		(roll10							),          // Time advance 12 months
					new StepVerify			(Global.OfferType.Monthly599    ),          // Verify current sub is in expected renewal
					new StepVerifyEnumerate(defaultNonVoucherOffersFromMonthly),			// Verify that we can see the non-voucher offers
					new StepVerifyEnumerate("1111111111111111111111111",				// Verify that we can see the 1's voucher offers as renewals
					defaultOnesVoucherOffers),
					new StepVerifyEnumerate("2222222222222222222222222",				// Verify that we can see the 2's voucher offers as renewals
					defaultTwosVoucherOffers),
					new StepVerifyEnumerate("CCCCCCCCCCCCCCCCCCCCCCCCC",				// Verify that we can see the C's voucher offers as renewals
					defaultCsVoucherOffers),
					new StepVerifyEnumerate("3333333333333333333333333"),				// Verify that we can't see any 3's voucher offers as renewals
					new StepVerifyEnumerate("4444444444444444444444444")				// Verify that we can't see any 4's voucher offers as renewals
					));

				caselist.Add(new Case(countryname + " - Game Trial (non-default non-voucher renewal)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599,          // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Yearly4999 : Global.OfferType.Monthly599)          // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to LO)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.LaunchOffer,              // Set the next renewal as the starter kit
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.LaunchOffer)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to PP)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.PrepaidCard,              // Set the next renewal as the 12 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.PrepaidCard)              // Verify current sub is in expected renewal
					));

				caselist.Add(new Case(countryname + " - Game Trial (renewal to 3M)",
					new StepCreateAccount	("33333", (ServerTestFramework.LiveService.UserAccount.XeUser.Country) countrycode			),			// Create the account in the game trial offer
					new StepVerify			(Global.OfferType.GameTrial,                // Verify current sub and default renewal
					defaultAutoRenewMonthlyCountries.Contains(countrycode) ?
					Global.OfferType.Monthly599 : Global.OfferType.Yearly4999),
					new StepSetRenewal		(Global.OfferType.ThreeMonthCard,           // Set the next renewal as the 3 mo prepaid
					false),                                                      
					new StepWaitForRoll		(roll0							),          // Time advance 2 months
					new StepVerify			(Global.OfferType.ThreeMonthCard)           // Verify current sub is in expected renewal
					));

				caselist.Add(n